
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf8  080130a0  080130a0  000230a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d98  08013d98  00030210  2**0
                  CONTENTS
  4 .ARM          00000000  08013d98  08013d98  00030210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013d98  08013d98  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d98  08013d98  00023d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d9c  08013d9c  00023d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08013da0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da70  20000210  08013fb0  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dc80  08013fb0  0003dc80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2b5  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027eb  00000000  00000000  0003f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00041ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  000429f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a25  00000000  00000000  000435f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010512  00000000  00000000  00056015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062b8e  00000000  00000000  00066527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c90b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc4  00000000  00000000  000c9108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013088 	.word	0x08013088

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08013088 	.word	0x08013088

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b095      	sub	sp, #84	; 0x54
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4ba2      	ldr	r3, [pc, #648]	; (8000f48 <main+0x290>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4aa0      	ldr	r2, [pc, #640]	; (8000f48 <main+0x290>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b9f      	ldr	r3, [pc, #636]	; (8000f4c <main+0x294>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a9e      	ldr	r2, [pc, #632]	; (8000f4c <main+0x294>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f00b fb48 	bl	800c370 <RCC_enableMaxFrequencies>

   	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000ce0:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <main+0x298>)
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	22c8      	movs	r2, #200	; 0xc8
 8000cec:	4999      	ldr	r1, [pc, #612]	; (8000f54 <main+0x29c>)
 8000cee:	489a      	ldr	r0, [pc, #616]	; (8000f58 <main+0x2a0>)
 8000cf0:	f004 fa50 	bl	8005194 <xTaskCreate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a99      	ldr	r2, [pc, #612]	; (8000f5c <main+0x2a4>)
 8000cf8:	6013      	str	r3, [r2, #0]
							NULL,                   // parametro pasado a la tarea
							3,                      // Prioridad de la tarea
							&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000cfa:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <main+0x2a4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00a      	beq.n	8000d18 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d14:	bf00      	nop
 8000d16:	e7fe      	b.n	8000d16 <main+0x5e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d18:	4b91      	ldr	r3, [pc, #580]	; (8000f60 <main+0x2a8>)
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	22c8      	movs	r2, #200	; 0xc8
 8000d24:	498f      	ldr	r1, [pc, #572]	; (8000f64 <main+0x2ac>)
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <main+0x2b0>)
 8000d28:	f004 fa34 	bl	8005194 <xTaskCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a8b      	ldr	r2, [pc, #556]	; (8000f5c <main+0x2a4>)
 8000d30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d32:	4b8a      	ldr	r3, [pc, #552]	; (8000f5c <main+0x2a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00a      	beq.n	8000d50 <main+0x98>
        __asm volatile
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
    }
 8000d4c:	bf00      	nop
 8000d4e:	e7fe      	b.n	8000d4e <main+0x96>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d50:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <main+0x2b4>)
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2303      	movs	r3, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	22c8      	movs	r2, #200	; 0xc8
 8000d5c:	4984      	ldr	r1, [pc, #528]	; (8000f70 <main+0x2b8>)
 8000d5e:	4885      	ldr	r0, [pc, #532]	; (8000f74 <main+0x2bc>)
 8000d60:	f004 fa18 	bl	8005194 <xTaskCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <main+0x2a4>)
 8000d68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <main+0x2a4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d00a      	beq.n	8000d88 <main+0xd0>
        __asm volatile
 8000d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8000d84:	bf00      	nop
 8000d86:	e7fe      	b.n	8000d86 <main+0xce>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <main+0x2c0>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	22c8      	movs	r2, #200	; 0xc8
 8000d94:	4979      	ldr	r1, [pc, #484]	; (8000f7c <main+0x2c4>)
 8000d96:	487a      	ldr	r0, [pc, #488]	; (8000f80 <main+0x2c8>)
 8000d98:	f004 f9fc 	bl	8005194 <xTaskCreate>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a6f      	ldr	r2, [pc, #444]	; (8000f5c <main+0x2a4>)
 8000da0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <main+0x2a4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00a      	beq.n	8000dc0 <main+0x108>
        __asm volatile
 8000daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dae:	f383 8811 	msr	BASEPRI, r3
 8000db2:	f3bf 8f6f 	isb	sy
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8000dbc:	bf00      	nop
 8000dbe:	e7fe      	b.n	8000dbe <main+0x106>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000dc0:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <main+0x2cc>)
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	22c8      	movs	r2, #200	; 0xc8
 8000dcc:	496e      	ldr	r1, [pc, #440]	; (8000f88 <main+0x2d0>)
 8000dce:	486f      	ldr	r0, [pc, #444]	; (8000f8c <main+0x2d4>)
 8000dd0:	f004 f9e0 	bl	8005194 <xTaskCreate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a61      	ldr	r2, [pc, #388]	; (8000f5c <main+0x2a4>)
 8000dd8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <main+0x2a4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00a      	beq.n	8000df8 <main+0x140>
        __asm volatile
 8000de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8000df4:	bf00      	nop
 8000df6:	e7fe      	b.n	8000df6 <main+0x13e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000df8:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <main+0x2d8>)
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	22c8      	movs	r2, #200	; 0xc8
 8000e04:	4963      	ldr	r1, [pc, #396]	; (8000f94 <main+0x2dc>)
 8000e06:	4864      	ldr	r0, [pc, #400]	; (8000f98 <main+0x2e0>)
 8000e08:	f004 f9c4 	bl	8005194 <xTaskCreate>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <main+0x2a4>)
 8000e10:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <main+0x2a4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00a      	beq.n	8000e30 <main+0x178>
        __asm volatile
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8000e2c:	bf00      	nop
 8000e2e:	e7fe      	b.n	8000e2e <main+0x176>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e30:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <main+0x2e4>)
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	2303      	movs	r3, #3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	22c8      	movs	r2, #200	; 0xc8
 8000e3c:	4958      	ldr	r1, [pc, #352]	; (8000fa0 <main+0x2e8>)
 8000e3e:	4859      	ldr	r0, [pc, #356]	; (8000fa4 <main+0x2ec>)
 8000e40:	f004 f9a8 	bl	8005194 <xTaskCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a45      	ldr	r2, [pc, #276]	; (8000f5c <main+0x2a4>)
 8000e48:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <main+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d00a      	beq.n	8000e68 <main+0x1b0>
        __asm volatile
 8000e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000e64:	bf00      	nop
 8000e66:	e7fe      	b.n	8000e66 <main+0x1ae>

	 /////////////////////////////////TAREA DE GIRAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Roll,"Task-Roll",STACK_SIZE,NULL,3,&xHandleTask_Roll );
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <main+0x2f0>)
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2300      	movs	r3, #0
 8000e72:	22c8      	movs	r2, #200	; 0xc8
 8000e74:	494d      	ldr	r1, [pc, #308]	; (8000fac <main+0x2f4>)
 8000e76:	484e      	ldr	r0, [pc, #312]	; (8000fb0 <main+0x2f8>)
 8000e78:	f004 f98c 	bl	8005194 <xTaskCreate>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <main+0x2a4>)
 8000e80:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <main+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d00a      	beq.n	8000ea0 <main+0x1e8>
        __asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000e9c:	bf00      	nop
 8000e9e:	e7fe      	b.n	8000e9e <main+0x1e6>

	 /////////////////////////////////TAREA DE GIRAR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_RollTo,"Task-RollTo",STACK_SIZE,NULL,3,&xHandleTask_Rollto );
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <main+0x2fc>)
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	22c8      	movs	r2, #200	; 0xc8
 8000eac:	4942      	ldr	r1, [pc, #264]	; (8000fb8 <main+0x300>)
 8000eae:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x304>)
 8000eb0:	f004 f970 	bl	8005194 <xTaskCreate>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <main+0x2a4>)
 8000eb8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <main+0x2a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d00a      	beq.n	8000ed8 <main+0x220>
        __asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <main+0x21e>

	 /////////////////////////////////TAREA DE REINICIAR VARIABLES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Reinit,"Task-Reinit",STACK_SIZE,NULL,3,&xHandleTask_Reinit );
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x308>)
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2303      	movs	r3, #3
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	22c8      	movs	r2, #200	; 0xc8
 8000ee4:	4937      	ldr	r1, [pc, #220]	; (8000fc4 <main+0x30c>)
 8000ee6:	4838      	ldr	r0, [pc, #224]	; (8000fc8 <main+0x310>)
 8000ee8:	f004 f954 	bl	8005194 <xTaskCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <main+0x2a4>)
 8000ef0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <main+0x2a4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d00a      	beq.n	8000f10 <main+0x258>
        __asm volatile
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	623b      	str	r3, [r7, #32]
    }
 8000f0c:	bf00      	nop
 8000f0e:	e7fe      	b.n	8000f0e <main+0x256>

	 /////////////////////////////////TAREA DE CUADRADO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Square,"Task-Square",STACK_SIZE,NULL,3,&xHandleTask_Square );
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <main+0x314>)
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2303      	movs	r3, #3
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	22c8      	movs	r2, #200	; 0xc8
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <main+0x318>)
 8000f1e:	482d      	ldr	r0, [pc, #180]	; (8000fd4 <main+0x31c>)
 8000f20:	f004 f938 	bl	8005194 <xTaskCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <main+0x2a4>)
 8000f28:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <main+0x2a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d052      	beq.n	8000fd8 <main+0x320>
        __asm volatile
 8000f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f36:	f383 8811 	msr	BASEPRI, r3
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	f3bf 8f4f 	dsb	sy
 8000f42:	61fb      	str	r3, [r7, #28]
    }
 8000f44:	bf00      	nop
 8000f46:	e7fe      	b.n	8000f46 <main+0x28e>
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	20000230 	.word	0x20000230
 8000f54:	0801323c 	.word	0x0801323c
 8000f58:	08001671 	.word	0x08001671
 8000f5c:	2000022c 	.word	0x2000022c
 8000f60:	20000234 	.word	0x20000234
 8000f64:	08013248 	.word	0x08013248
 8000f68:	08002479 	.word	0x08002479
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	08013254 	.word	0x08013254
 8000f74:	08001931 	.word	0x08001931
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	08013264 	.word	0x08013264
 8000f80:	08001971 	.word	0x08001971
 8000f84:	20000240 	.word	0x20000240
 8000f88:	08013270 	.word	0x08013270
 8000f8c:	080019c5 	.word	0x080019c5
 8000f90:	20000244 	.word	0x20000244
 8000f94:	08013278 	.word	0x08013278
 8000f98:	08001a0d 	.word	0x08001a0d
 8000f9c:	20000248 	.word	0x20000248
 8000fa0:	08013288 	.word	0x08013288
 8000fa4:	08001ce1 	.word	0x08001ce1
 8000fa8:	2000024c 	.word	0x2000024c
 8000fac:	08013294 	.word	0x08013294
 8000fb0:	08001de5 	.word	0x08001de5
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	080132a0 	.word	0x080132a0
 8000fbc:	08001e41 	.word	0x08001e41
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	080132ac 	.word	0x080132ac
 8000fc8:	08002439 	.word	0x08002439
 8000fcc:	20000258 	.word	0x20000258
 8000fd0:	080132b8 	.word	0x080132b8
 8000fd4:	08001ea5 	.word	0x08001ea5


	 /////////////////////////////////TAREA DE ASTAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Astar,"Task-Astar",STACK_SIZE,NULL,3,&xHandleTask_Astar );
 8000fd8:	4b65      	ldr	r3, [pc, #404]	; (8001170 <main+0x4b8>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	22c8      	movs	r2, #200	; 0xc8
 8000fe4:	4963      	ldr	r1, [pc, #396]	; (8001174 <main+0x4bc>)
 8000fe6:	4864      	ldr	r0, [pc, #400]	; (8001178 <main+0x4c0>)
 8000fe8:	f004 f8d4 	bl	8005194 <xTaskCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a63      	ldr	r2, [pc, #396]	; (800117c <main+0x4c4>)
 8000ff0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ff2:	4b62      	ldr	r3, [pc, #392]	; (800117c <main+0x4c4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00a      	beq.n	8001010 <main+0x358>
        __asm volatile
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	61bb      	str	r3, [r7, #24]
    }
 800100c:	bf00      	nop
 800100e:	e7fe      	b.n	800100e <main+0x356>

	 /////////////////////////////////TAREA DE LLENAR GRID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Grid,"Task-Grid",10000,NULL,3,&xHandleTask_Grid );
 8001010:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <main+0x4c8>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2303      	movs	r3, #3
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	f242 7210 	movw	r2, #10000	; 0x2710
 800101e:	4959      	ldr	r1, [pc, #356]	; (8001184 <main+0x4cc>)
 8001020:	4859      	ldr	r0, [pc, #356]	; (8001188 <main+0x4d0>)
 8001022:	f004 f8b7 	bl	8005194 <xTaskCreate>
 8001026:	4603      	mov	r3, r0
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <main+0x4c4>)
 800102a:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <main+0x4c4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d00a      	beq.n	800104a <main+0x392>
        __asm volatile
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	617b      	str	r3, [r7, #20]
    }
 8001046:	bf00      	nop
 8001048:	e7fe      	b.n	8001048 <main+0x390>

	 /////////////////////////////////TAREA DE CREAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_CrOp,"Task-CrOp",STACK_SIZE,NULL,3,&xHandleTask_CrOp );
 800104a:	4b50      	ldr	r3, [pc, #320]	; (800118c <main+0x4d4>)
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2303      	movs	r3, #3
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2300      	movs	r3, #0
 8001054:	22c8      	movs	r2, #200	; 0xc8
 8001056:	494e      	ldr	r1, [pc, #312]	; (8001190 <main+0x4d8>)
 8001058:	484e      	ldr	r0, [pc, #312]	; (8001194 <main+0x4dc>)
 800105a:	f004 f89b 	bl	8005194 <xTaskCreate>
 800105e:	4603      	mov	r3, r0
 8001060:	4a46      	ldr	r2, [pc, #280]	; (800117c <main+0x4c4>)
 8001062:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8001064:	4b45      	ldr	r3, [pc, #276]	; (800117c <main+0x4c4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d00a      	beq.n	8001082 <main+0x3ca>
        __asm volatile
 800106c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001070:	f383 8811 	msr	BASEPRI, r3
 8001074:	f3bf 8f6f 	isb	sy
 8001078:	f3bf 8f4f 	dsb	sy
 800107c:	613b      	str	r3, [r7, #16]
    }
 800107e:	bf00      	nop
 8001080:	e7fe      	b.n	8001080 <main+0x3c8>

	 /////////////////////////////////TAREA DE PROCESAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_PrOp,"Task-PrOp",STACK_SIZE,NULL,3,&xHandleTask_PrOp );
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <main+0x4e0>)
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	2303      	movs	r3, #3
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	22c8      	movs	r2, #200	; 0xc8
 800108e:	4943      	ldr	r1, [pc, #268]	; (800119c <main+0x4e4>)
 8001090:	4843      	ldr	r0, [pc, #268]	; (80011a0 <main+0x4e8>)
 8001092:	f004 f87f 	bl	8005194 <xTaskCreate>
 8001096:	4603      	mov	r3, r0
 8001098:	4a38      	ldr	r2, [pc, #224]	; (800117c <main+0x4c4>)
 800109a:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <main+0x4c4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00a      	beq.n	80010ba <main+0x402>
        __asm volatile
 80010a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a8:	f383 8811 	msr	BASEPRI, r3
 80010ac:	f3bf 8f6f 	isb	sy
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	60fb      	str	r3, [r7, #12]
    }
 80010b6:	bf00      	nop
 80010b8:	e7fe      	b.n	80010b8 <main+0x400>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 80010ba:	2200      	movs	r2, #0
 80010bc:	2101      	movs	r1, #1
 80010be:	2014      	movs	r0, #20
 80010c0:	f003 fb1c 	bl	80046fc <xQueueGenericCreate>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a37      	ldr	r2, [pc, #220]	; (80011a4 <main+0x4ec>)
 80010c8:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <main+0x4ec>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10a      	bne.n	80010e8 <main+0x430>
        __asm volatile
 80010d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d6:	f383 8811 	msr	BASEPRI, r3
 80010da:	f3bf 8f6f 	isb	sy
 80010de:	f3bf 8f4f 	dsb	sy
 80010e2:	60bb      	str	r3, [r7, #8]
    }
 80010e4:	bf00      	nop
 80010e6:	e7fe      	b.n	80010e6 <main+0x42e>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 80010e8:	2200      	movs	r2, #0
 80010ea:	2104      	movs	r1, #4
 80010ec:	200a      	movs	r0, #10
 80010ee:	f003 fb05 	bl	80046fc <xQueueGenericCreate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <main+0x4f0>)
 80010f6:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <main+0x4f0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10a      	bne.n	8001116 <main+0x45e>
        __asm volatile
 8001100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001104:	f383 8811 	msr	BASEPRI, r3
 8001108:	f3bf 8f6f 	isb	sy
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	607b      	str	r3, [r7, #4]
    }
 8001112:	bf00      	nop
 8001114:	e7fe      	b.n	8001114 <main+0x45c>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <main+0x4f4>)
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <main+0x4f8>)
 8001124:	f005 f90c 	bl	8006340 <xTimerCreate>
 8001128:	4603      	mov	r3, r0
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <main+0x4fc>)
 800112c:	6013      	str	r3, [r2, #0]
									 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <main+0x4fc>)
 8001130:	681c      	ldr	r4, [r3, #0]
 8001132:	f004 fa71 	bl	8005618 <xTaskGetTickCount>
 8001136:	4602      	mov	r2, r0
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	2101      	movs	r1, #1
 8001142:	4620      	mov	r0, r4
 8001144:	f005 f958 	bl	80063f8 <xTimerGenericCommand>


	inSystem ();
 8001148:	f000 f83a 	bl	80011c0 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 800114c:	2102      	movs	r1, #2
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <main+0x500>)
 8001150:	f001 fb88 	bl	8002864 <calibracionGyros>
 8001154:	ee10 3a10 	vmov	r3, s0
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fa0d 	bl	8000578 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4916      	ldr	r1, [pc, #88]	; (80011bc <main+0x504>)
 8001164:	e9c1 2300 	strd	r2, r3, [r1]

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8001168:	f004 f95a 	bl	8005420 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 800116c:	e7fe      	b.n	800116c <main+0x4b4>
 800116e:	bf00      	nop
 8001170:	2000025c 	.word	0x2000025c
 8001174:	080132c4 	.word	0x080132c4
 8001178:	08001efd 	.word	0x08001efd
 800117c:	2000022c 	.word	0x2000022c
 8001180:	20000260 	.word	0x20000260
 8001184:	080132d0 	.word	0x080132d0
 8001188:	08001fa9 	.word	0x08001fa9
 800118c:	20000264 	.word	0x20000264
 8001190:	080132dc 	.word	0x080132dc
 8001194:	08002149 	.word	0x08002149
 8001198:	20000268 	.word	0x20000268
 800119c:	080132e8 	.word	0x080132e8
 80011a0:	08002211 	.word	0x08002211
 80011a4:	20000270 	.word	0x20000270
 80011a8:	2000026c 	.word	0x2000026c
 80011ac:	080042e5 	.word	0x080042e5
 80011b0:	080132f4 	.word	0x080132f4
 80011b4:	20000274 	.word	0x20000274
 80011b8:	20000430 	.word	0x20000430
 80011bc:	20000c18 	.word	0x20000c18

080011c0 <inSystem>:

	}
}


void inSystem (void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80011c6:	4baf      	ldr	r3, [pc, #700]	; (8001484 <inSystem+0x2c4>)
 80011c8:	4aaf      	ldr	r2, [pc, #700]	; (8001488 <inSystem+0x2c8>)
 80011ca:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80011cc:	4bad      	ldr	r3, [pc, #692]	; (8001484 <inSystem+0x2c4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80011d2:	4bac      	ldr	r3, [pc, #688]	; (8001484 <inSystem+0x2c4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80011d8:	4baa      	ldr	r3, [pc, #680]	; (8001484 <inSystem+0x2c4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80011de:	4ba9      	ldr	r3, [pc, #676]	; (8001484 <inSystem+0x2c4>)
 80011e0:	2205      	movs	r2, #5
 80011e2:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011e4:	4ba7      	ldr	r3, [pc, #668]	; (8001484 <inSystem+0x2c4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80011ea:	4ba6      	ldr	r3, [pc, #664]	; (8001484 <inSystem+0x2c4>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80011f0:	48a4      	ldr	r0, [pc, #656]	; (8001484 <inSystem+0x2c4>)
 80011f2:	f009 fb57 	bl	800a8a4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80011f6:	2101      	movs	r1, #1
 80011f8:	48a2      	ldr	r0, [pc, #648]	; (8001484 <inSystem+0x2c4>)
 80011fa:	f009 fc7d 	bl	800aaf8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80011fe:	f007 fdbb 	bl	8008d78 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <inSystem+0x2cc>)
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <inSystem+0x2d0>)
 8001208:	4aa2      	ldr	r2, [pc, #648]	; (8001494 <inSystem+0x2d4>)
 800120a:	49a3      	ldr	r1, [pc, #652]	; (8001498 <inSystem+0x2d8>)
 800120c:	48a3      	ldr	r0, [pc, #652]	; (800149c <inSystem+0x2dc>)
 800120e:	f002 fa0f 	bl	8003630 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8001212:	4ba3      	ldr	r3, [pc, #652]	; (80014a0 <inSystem+0x2e0>)
 8001214:	4a9c      	ldr	r2, [pc, #624]	; (8001488 <inSystem+0x2c8>)
 8001216:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001218:	4ba1      	ldr	r3, [pc, #644]	; (80014a0 <inSystem+0x2e0>)
 800121a:	2202      	movs	r2, #2
 800121c:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800121e:	4ba0      	ldr	r3, [pc, #640]	; (80014a0 <inSystem+0x2e0>)
 8001220:	2202      	movs	r2, #2
 8001222:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001224:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <inSystem+0x2e0>)
 8001226:	2200      	movs	r2, #0
 8001228:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 800122a:	4b9d      	ldr	r3, [pc, #628]	; (80014a0 <inSystem+0x2e0>)
 800122c:	2200      	movs	r2, #0
 800122e:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001230:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <inSystem+0x2e0>)
 8001232:	2200      	movs	r2, #0
 8001234:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001236:	4b9a      	ldr	r3, [pc, #616]	; (80014a0 <inSystem+0x2e0>)
 8001238:	2202      	movs	r2, #2
 800123a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 800123c:	4898      	ldr	r0, [pc, #608]	; (80014a0 <inSystem+0x2e0>)
 800123e:	f009 fb31 	bl	800a8a4 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001242:	4b98      	ldr	r3, [pc, #608]	; (80014a4 <inSystem+0x2e4>)
 8001244:	4a98      	ldr	r2, [pc, #608]	; (80014a8 <inSystem+0x2e8>)
 8001246:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001248:	4b96      	ldr	r3, [pc, #600]	; (80014a4 <inSystem+0x2e4>)
 800124a:	2200      	movs	r2, #0
 800124c:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 800124e:	4b95      	ldr	r3, [pc, #596]	; (80014a4 <inSystem+0x2e4>)
 8001250:	4a96      	ldr	r2, [pc, #600]	; (80014ac <inSystem+0x2ec>)
 8001252:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001254:	4993      	ldr	r1, [pc, #588]	; (80014a4 <inSystem+0x2e4>)
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b95      	ldr	r3, [pc, #596]	; (80014b0 <inSystem+0x2f0>)
 800125c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001260:	4b90      	ldr	r3, [pc, #576]	; (80014a4 <inSystem+0x2e4>)
 8001262:	2264      	movs	r2, #100	; 0x64
 8001264:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001266:	4b8f      	ldr	r3, [pc, #572]	; (80014a4 <inSystem+0x2e4>)
 8001268:	2201      	movs	r2, #1
 800126a:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800126c:	4b8d      	ldr	r3, [pc, #564]	; (80014a4 <inSystem+0x2e4>)
 800126e:	2201      	movs	r2, #1
 8001270:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 8001272:	488c      	ldr	r0, [pc, #560]	; (80014a4 <inSystem+0x2e4>)
 8001274:	f00a fb80 	bl	800b978 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001278:	488a      	ldr	r0, [pc, #552]	; (80014a4 <inSystem+0x2e4>)
 800127a:	f00a fc67 	bl	800bb4c <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800127e:	4b8d      	ldr	r3, [pc, #564]	; (80014b4 <inSystem+0x2f4>)
 8001280:	4a81      	ldr	r2, [pc, #516]	; (8001488 <inSystem+0x2c8>)
 8001282:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001284:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <inSystem+0x2f4>)
 8001286:	2202      	movs	r2, #2
 8001288:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800128a:	4b8a      	ldr	r3, [pc, #552]	; (80014b4 <inSystem+0x2f4>)
 800128c:	2202      	movs	r2, #2
 800128e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <inSystem+0x2f4>)
 8001292:	2200      	movs	r2, #0
 8001294:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001296:	4b87      	ldr	r3, [pc, #540]	; (80014b4 <inSystem+0x2f4>)
 8001298:	2201      	movs	r2, #1
 800129a:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800129c:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <inSystem+0x2f4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80012a2:	4b84      	ldr	r3, [pc, #528]	; (80014b4 <inSystem+0x2f4>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80012a8:	4882      	ldr	r0, [pc, #520]	; (80014b4 <inSystem+0x2f4>)
 80012aa:	f009 fafb 	bl	800a8a4 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80012ae:	4b82      	ldr	r3, [pc, #520]	; (80014b8 <inSystem+0x2f8>)
 80012b0:	4a7d      	ldr	r2, [pc, #500]	; (80014a8 <inSystem+0x2e8>)
 80012b2:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80012b4:	4b80      	ldr	r3, [pc, #512]	; (80014b8 <inSystem+0x2f8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80012ba:	4b7f      	ldr	r3, [pc, #508]	; (80014b8 <inSystem+0x2f8>)
 80012bc:	4a7b      	ldr	r2, [pc, #492]	; (80014ac <inSystem+0x2ec>)
 80012be:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80012c0:	497d      	ldr	r1, [pc, #500]	; (80014b8 <inSystem+0x2f8>)
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <inSystem+0x2f0>)
 80012c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80012cc:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <inSystem+0x2f8>)
 80012ce:	2264      	movs	r2, #100	; 0x64
 80012d0:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80012d2:	4b79      	ldr	r3, [pc, #484]	; (80014b8 <inSystem+0x2f8>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80012d8:	4b77      	ldr	r3, [pc, #476]	; (80014b8 <inSystem+0x2f8>)
 80012da:	2201      	movs	r2, #1
 80012dc:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80012de:	4876      	ldr	r0, [pc, #472]	; (80014b8 <inSystem+0x2f8>)
 80012e0:	f00a fb4a 	bl	800b978 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80012e4:	4874      	ldr	r0, [pc, #464]	; (80014b8 <inSystem+0x2f8>)
 80012e6:	f00a fc31 	bl	800bb4c <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80012ea:	4b74      	ldr	r3, [pc, #464]	; (80014bc <inSystem+0x2fc>)
 80012ec:	4a74      	ldr	r2, [pc, #464]	; (80014c0 <inSystem+0x300>)
 80012ee:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012f0:	4b72      	ldr	r3, [pc, #456]	; (80014bc <inSystem+0x2fc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012f6:	4b71      	ldr	r3, [pc, #452]	; (80014bc <inSystem+0x2fc>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012fc:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <inSystem+0x2fc>)
 80012fe:	220a      	movs	r2, #10
 8001300:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001302:	4b6e      	ldr	r3, [pc, #440]	; (80014bc <inSystem+0x2fc>)
 8001304:	2200      	movs	r2, #0
 8001306:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <inSystem+0x2fc>)
 800130a:	2200      	movs	r2, #0
 800130c:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800130e:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <inSystem+0x2fc>)
 8001310:	2202      	movs	r2, #2
 8001312:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001314:	4869      	ldr	r0, [pc, #420]	; (80014bc <inSystem+0x2fc>)
 8001316:	f009 fac5 	bl	800a8a4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 800131a:	2100      	movs	r1, #0
 800131c:	4867      	ldr	r0, [pc, #412]	; (80014bc <inSystem+0x2fc>)
 800131e:	f009 fc16 	bl	800ab4e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 8001322:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <inSystem+0x304>)
 8001324:	4a66      	ldr	r2, [pc, #408]	; (80014c0 <inSystem+0x300>)
 8001326:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <inSystem+0x304>)
 800132a:	2200      	movs	r2, #0
 800132c:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800132e:	4b65      	ldr	r3, [pc, #404]	; (80014c4 <inSystem+0x304>)
 8001330:	2201      	movs	r2, #1
 8001332:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001334:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <inSystem+0x304>)
 8001336:	220b      	movs	r2, #11
 8001338:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800133a:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <inSystem+0x304>)
 800133c:	2200      	movs	r2, #0
 800133e:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001340:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <inSystem+0x304>)
 8001342:	2200      	movs	r2, #0
 8001344:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <inSystem+0x304>)
 8001348:	2202      	movs	r2, #2
 800134a:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 800134c:	485d      	ldr	r0, [pc, #372]	; (80014c4 <inSystem+0x304>)
 800134e:	f009 faa9 	bl	800a8a4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001352:	2100      	movs	r1, #0
 8001354:	485b      	ldr	r0, [pc, #364]	; (80014c4 <inSystem+0x304>)
 8001356:	f009 fbfa 	bl	800ab4e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <inSystem+0x308>)
 800135c:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <inSystem+0x300>)
 800135e:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <inSystem+0x308>)
 8001362:	2200      	movs	r2, #0
 8001364:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001366:	4b58      	ldr	r3, [pc, #352]	; (80014c8 <inSystem+0x308>)
 8001368:	2201      	movs	r2, #1
 800136a:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <inSystem+0x308>)
 800136e:	220c      	movs	r2, #12
 8001370:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <inSystem+0x308>)
 8001374:	2200      	movs	r2, #0
 8001376:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <inSystem+0x308>)
 800137a:	2200      	movs	r2, #0
 800137c:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <inSystem+0x308>)
 8001380:	2202      	movs	r2, #2
 8001382:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001384:	4850      	ldr	r0, [pc, #320]	; (80014c8 <inSystem+0x308>)
 8001386:	f009 fa8d 	bl	800a8a4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800138a:	2100      	movs	r1, #0
 800138c:	484e      	ldr	r0, [pc, #312]	; (80014c8 <inSystem+0x308>)
 800138e:	f009 fbde 	bl	800ab4e <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001392:	4b42      	ldr	r3, [pc, #264]	; (800149c <inSystem+0x2dc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800139a:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <inSystem+0x30c>)
 800139c:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <inSystem+0x310>)
 800139e:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013a0:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <inSystem+0x30c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <inSystem+0x30c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <inSystem+0x30c>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013b2:	4b46      	ldr	r3, [pc, #280]	; (80014cc <inSystem+0x30c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <inSystem+0x30c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013be:	4b43      	ldr	r3, [pc, #268]	; (80014cc <inSystem+0x30c>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80013c4:	4841      	ldr	r0, [pc, #260]	; (80014cc <inSystem+0x30c>)
 80013c6:	f009 fa6d 	bl	800a8a4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80013ca:	2100      	movs	r1, #0
 80013cc:	483f      	ldr	r0, [pc, #252]	; (80014cc <inSystem+0x30c>)
 80013ce:	f009 fbbe 	bl	800ab4e <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <inSystem+0x2dc>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <inSystem+0x314>)
 80013dc:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <inSystem+0x300>)
 80013de:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <inSystem+0x314>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <inSystem+0x314>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <inSystem+0x314>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <inSystem+0x314>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <inSystem+0x314>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013fe:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <inSystem+0x314>)
 8001400:	2202      	movs	r2, #2
 8001402:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <inSystem+0x318>)
 8001406:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <inSystem+0x314>)
 8001408:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <inSystem+0x318>)
 800140c:	2202      	movs	r2, #2
 800140e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001410:	4831      	ldr	r0, [pc, #196]	; (80014d8 <inSystem+0x318>)
 8001412:	f008 f97f 	bl	8009714 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001416:	2106      	movs	r1, #6
 8001418:	482f      	ldr	r0, [pc, #188]	; (80014d8 <inSystem+0x318>)
 800141a:	f009 f823 	bl	800a464 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <inSystem+0x31c>)
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <inSystem+0x300>)
 8001422:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <inSystem+0x31c>)
 8001426:	2200      	movs	r2, #0
 8001428:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <inSystem+0x31c>)
 800142c:	2200      	movs	r2, #0
 800142e:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <inSystem+0x31c>)
 8001432:	2203      	movs	r2, #3
 8001434:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <inSystem+0x31c>)
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <inSystem+0x31c>)
 800143e:	2200      	movs	r2, #0
 8001440:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <inSystem+0x31c>)
 8001444:	2202      	movs	r2, #2
 8001446:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <inSystem+0x320>)
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <inSystem+0x31c>)
 800144c:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <inSystem+0x320>)
 8001450:	2202      	movs	r2, #2
 8001452:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001454:	4822      	ldr	r0, [pc, #136]	; (80014e0 <inSystem+0x320>)
 8001456:	f008 f95d 	bl	8009714 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 800145a:	2106      	movs	r1, #6
 800145c:	4820      	ldr	r0, [pc, #128]	; (80014e0 <inSystem+0x320>)
 800145e:	f009 f801 	bl	800a464 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <inSystem+0x324>)
 8001464:	4a08      	ldr	r2, [pc, #32]	; (8001488 <inSystem+0x2c8>)
 8001466:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <inSystem+0x324>)
 800146a:	2207      	movs	r2, #7
 800146c:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <inSystem+0x324>)
 8001470:	2202      	movs	r2, #2
 8001472:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <inSystem+0x324>)
 8001476:	2200      	movs	r2, #0
 8001478:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <inSystem+0x324>)
 800147c:	2202      	movs	r2, #2
 800147e:	711a      	strb	r2, [r3, #4]
 8001480:	e032      	b.n	80014e8 <inSystem+0x328>
 8001482:	bf00      	nop
 8001484:	20000278 	.word	0x20000278
 8001488:	40020000 	.word	0x40020000
 800148c:	2000061c 	.word	0x2000061c
 8001490:	20000630 	.word	0x20000630
 8001494:	20000650 	.word	0x20000650
 8001498:	20000b70 	.word	0x20000b70
 800149c:	20000440 	.word	0x20000440
 80014a0:	20000284 	.word	0x20000284
 80014a4:	20000350 	.word	0x20000350
 80014a8:	40000c00 	.word	0x40000c00
 80014ac:	41e00000 	.word	0x41e00000
 80014b0:	40408000 	.word	0x40408000
 80014b4:	20000290 	.word	0x20000290
 80014b8:	20000370 	.word	0x20000370
 80014bc:	200002c0 	.word	0x200002c0
 80014c0:	40020800 	.word	0x40020800
 80014c4:	200002b4 	.word	0x200002b4
 80014c8:	200002d8 	.word	0x200002d8
 80014cc:	200002cc 	.word	0x200002cc
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	200002e4 	.word	0x200002e4
 80014d8:	20000314 	.word	0x20000314
 80014dc:	200002f0 	.word	0x200002f0
 80014e0:	2000031c 	.word	0x2000031c
 80014e4:	200002a8 	.word	0x200002a8
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014e8:	4b54      	ldr	r3, [pc, #336]	; (800163c <inSystem+0x47c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014ee:	4b53      	ldr	r3, [pc, #332]	; (800163c <inSystem+0x47c>)
 80014f0:	2203      	movs	r2, #3
 80014f2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80014f4:	4851      	ldr	r0, [pc, #324]	; (800163c <inSystem+0x47c>)
 80014f6:	f009 f9d5 	bl	800a8a4 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80014fa:	4b51      	ldr	r3, [pc, #324]	; (8001640 <inSystem+0x480>)
 80014fc:	4a51      	ldr	r2, [pc, #324]	; (8001644 <inSystem+0x484>)
 80014fe:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <inSystem+0x480>)
 8001502:	2207      	movs	r2, #7
 8001504:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001506:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <inSystem+0x480>)
 8001508:	2202      	movs	r2, #2
 800150a:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <inSystem+0x480>)
 800150e:	2200      	movs	r2, #0
 8001510:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <inSystem+0x480>)
 8001514:	2203      	movs	r2, #3
 8001516:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <inSystem+0x480>)
 800151a:	2200      	movs	r2, #0
 800151c:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <inSystem+0x480>)
 8001520:	2203      	movs	r2, #3
 8001522:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001524:	4846      	ldr	r0, [pc, #280]	; (8001640 <inSystem+0x480>)
 8001526:	f009 f9bd 	bl	800a8a4 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <inSystem+0x488>)
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <inSystem+0x48c>)
 800152e:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <inSystem+0x488>)
 8001532:	4a47      	ldr	r2, [pc, #284]	; (8001650 <inSystem+0x490>)
 8001534:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <inSystem+0x488>)
 8001538:	2201      	movs	r2, #1
 800153a:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 800153c:	4b42      	ldr	r3, [pc, #264]	; (8001648 <inSystem+0x488>)
 800153e:	2201      	movs	r2, #1
 8001540:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <inSystem+0x488>)
 8001544:	2200      	movs	r2, #0
 8001546:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <inSystem+0x488>)
 800154a:	2202      	movs	r2, #2
 800154c:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <inSystem+0x488>)
 8001550:	2200      	movs	r2, #0
 8001552:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <inSystem+0x488>)
 8001556:	2200      	movs	r2, #0
 8001558:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <inSystem+0x488>)
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8001560:	4839      	ldr	r0, [pc, #228]	; (8001648 <inSystem+0x488>)
 8001562:	f00b fa83 	bl	800ca6c <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001566:	2106      	movs	r1, #6
 8001568:	4837      	ldr	r0, [pc, #220]	; (8001648 <inSystem+0x488>)
 800156a:	f00b ff31 	bl	800d3d0 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <inSystem+0x494>)
 8001570:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001574:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <inSystem+0x494>)
 8001578:	2201      	movs	r2, #1
 800157a:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <inSystem+0x494>)
 800157e:	2200      	movs	r2, #0
 8001580:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001582:	4b34      	ldr	r3, [pc, #208]	; (8001654 <inSystem+0x494>)
 8001584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001588:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <inSystem+0x494>)
 800158c:	2210      	movs	r2, #16
 800158e:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001590:	4830      	ldr	r0, [pc, #192]	; (8001654 <inSystem+0x494>)
 8001592:	f007 fc0d 	bl	8008db0 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001596:	2106      	movs	r1, #6
 8001598:	482e      	ldr	r0, [pc, #184]	; (8001654 <inSystem+0x494>)
 800159a:	f007 fdc7 	bl	800912c <TIM_SetPriority>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800159e:	482d      	ldr	r0, [pc, #180]	; (8001654 <inSystem+0x494>)
 80015a0:	f008 f84c 	bl	800963c <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <inSystem+0x498>)
 80015a6:	4a2d      	ldr	r2, [pc, #180]	; (800165c <inSystem+0x49c>)
 80015a8:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <inSystem+0x498>)
 80015ac:	2204      	movs	r2, #4
 80015ae:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015b0:	4b29      	ldr	r3, [pc, #164]	; (8001658 <inSystem+0x498>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <inSystem+0x498>)
 80015b8:	2208      	movs	r2, #8
 80015ba:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <inSystem+0x498>)
 80015be:	2201      	movs	r2, #1
 80015c0:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <inSystem+0x498>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <inSystem+0x498>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <inSystem+0x4a0>)
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <inSystem+0x49c>)
 80015d2:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <inSystem+0x4a0>)
 80015d6:	2204      	movs	r2, #4
 80015d8:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <inSystem+0x4a0>)
 80015dc:	2202      	movs	r2, #2
 80015de:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <inSystem+0x4a0>)
 80015e2:	2209      	movs	r2, #9
 80015e4:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <inSystem+0x4a0>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <inSystem+0x4a0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <inSystem+0x4a0>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <inSystem+0x4a4>)
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <inSystem+0x4a8>)
 80015fc:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <inSystem+0x4a4>)
 8001600:	2232      	movs	r2, #50	; 0x32
 8001602:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <inSystem+0x4a4>)
 8001606:	2268      	movs	r2, #104	; 0x68
 8001608:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <inSystem+0x4a4>)
 800160c:	2201      	movs	r2, #1
 800160e:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <inSystem+0x4ac>)
 8001612:	4a11      	ldr	r2, [pc, #68]	; (8001658 <inSystem+0x498>)
 8001614:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <inSystem+0x4ac>)
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <inSystem+0x4a0>)
 800161a:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <inSystem+0x4ac>)
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <inSystem+0x4a4>)
 8001620:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <inSystem+0x4ac>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <inSystem+0x4ac>)
 800162a:	2200      	movs	r2, #0
 800162c:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <inSystem+0x4ac>)
 8001630:	f009 faf0 	bl	800ac14 <configMPUAccel>

}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002a8 	.word	0x200002a8
 8001640:	2000029c 	.word	0x2000029c
 8001644:	40020000 	.word	0x40020000
 8001648:	20000390 	.word	0x20000390
 800164c:	40004400 	.word	0x40004400
 8001650:	02faf080 	.word	0x02faf080
 8001654:	20000324 	.word	0x20000324
 8001658:	200002fc 	.word	0x200002fc
 800165c:	40020400 	.word	0x40020400
 8001660:	20000308 	.word	0x20000308
 8001664:	20000424 	.word	0x20000424
 8001668:	40005400 	.word	0x40005400
 800166c:	20000430 	.word	0x20000430

08001670 <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 8001678:	4b97      	ldr	r3, [pc, #604]	; (80018d8 <vTask_Menu+0x268>)
 800167a:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here: ";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 800167c:	4b97      	ldr	r3, [pc, #604]	; (80018dc <vTask_Menu+0x26c>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f107 010c 	add.w	r1, r7, #12
 8001684:	2300      	movs	r3, #0
 8001686:	f04f 32ff 	mov.w	r2, #4294967295
 800168a:	f003 f8b9 	bl	8004800 <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2000      	movs	r0, #0
 800169e:	f004 fb55 	bl	8005d4c <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	617b      	str	r3, [r7, #20]

		if (end){
 80016a6:	4b8e      	ldr	r3, [pc, #568]	; (80018e0 <vTask_Menu+0x270>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00c      	beq.n	80016c8 <vTask_Menu+0x58>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 80016ae:	4b8d      	ldr	r3, [pc, #564]	; (80018e4 <vTask_Menu+0x274>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 80016b4:	4b8a      	ldr	r3, [pc, #552]	; (80018e0 <vTask_Menu+0x270>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 80016ba:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <vTask_Menu+0x278>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f002 ffb3 	bl	800462c <xQueueGenericReset>
 80016c6:	e7d9      	b.n	800167c <vTask_Menu+0xc>
		}else{

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	f000 80d5 	beq.w	800187e <vTask_Menu+0x20e>

				switch (cmd->functionType) {
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	3b01      	subs	r3, #1
 80016da:	2b06      	cmp	r3, #6
 80016dc:	f200 80f9 	bhi.w	80018d2 <vTask_Menu+0x262>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <vTask_Menu+0x78>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	08001705 	.word	0x08001705
 80016ec:	0800173b 	.word	0x0800173b
 80016f0:	08001771 	.word	0x08001771
 80016f4:	080017a7 	.word	0x080017a7
 80016f8:	080017dd 	.word	0x080017dd
 80016fc:	08001813 	.word	0x08001813
 8001700:	08001849 	.word	0x08001849
					case 1:{// sGo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001704:	4b75      	ldr	r3, [pc, #468]	; (80018dc <vTask_Menu+0x26c>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	f04f 32ff 	mov.w	r2, #4294967295
 800170e:	4977      	ldr	r1, [pc, #476]	; (80018ec <vTask_Menu+0x27c>)
 8001710:	f003 f876 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001714:	4b74      	ldr	r3, [pc, #464]	; (80018e8 <vTask_Menu+0x278>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f002 ff86 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGo;
 8001720:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <vTask_Menu+0x274>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <vTask_Menu+0x280>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	2300      	movs	r3, #0
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2300      	movs	r3, #0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	f004 fb8a 	bl	8005e4c <xTaskGenericNotify>


						break;
 8001738:	e0cc      	b.n	80018d4 <vTask_Menu+0x264>
					}case 2:{// sGoTo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <vTask_Menu+0x26c>)
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	2300      	movs	r3, #0
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	496b      	ldr	r1, [pc, #428]	; (80018f4 <vTask_Menu+0x284>)
 8001746:	f003 f85b 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <vTask_Menu+0x278>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f002 ff6b 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGoTo;
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <vTask_Menu+0x274>)
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <vTask_Menu+0x288>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2300      	movs	r3, #0
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	f004 fb6f 	bl	8005e4c <xTaskGenericNotify>


						break;
 800176e:	e0b1      	b.n	80018d4 <vTask_Menu+0x264>
					}case 3:{ // sRoll
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_3,portMAX_DELAY);
 8001770:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <vTask_Menu+0x26c>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	4960      	ldr	r1, [pc, #384]	; (80018fc <vTask_Menu+0x28c>)
 800177c:	f003 f840 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <vTask_Menu+0x278>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f002 ff50 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRoll;
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <vTask_Menu+0x274>)
 800178e:	2204      	movs	r2, #4
 8001790:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Roll, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRoll
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <vTask_Menu+0x290>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	f004 fb54 	bl	8005e4c <xTaskGenericNotify>


						break;
 80017a4:	e096      	b.n	80018d4 <vTask_Menu+0x264>
					}case 4:{ // sRollTo
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 80017a6:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <vTask_Menu+0x26c>)
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	4954      	ldr	r1, [pc, #336]	; (8001904 <vTask_Menu+0x294>)
 80017b2:	f003 f825 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017b6:	4b4c      	ldr	r3, [pc, #304]	; (80018e8 <vTask_Menu+0x278>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 ff35 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRollTo;
 80017c2:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <vTask_Menu+0x274>)
 80017c4:	2205      	movs	r2, #5
 80017c6:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Rollto, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80017c8:	4b4f      	ldr	r3, [pc, #316]	; (8001908 <vTask_Menu+0x298>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2300      	movs	r3, #0
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	f004 fb39 	bl	8005e4c <xTaskGenericNotify>


						break;
 80017da:	e07b      	b.n	80018d4 <vTask_Menu+0x264>
					}case 5:{ // Reinit
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_5,portMAX_DELAY);
 80017dc:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <vTask_Menu+0x26c>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	4949      	ldr	r1, [pc, #292]	; (800190c <vTask_Menu+0x29c>)
 80017e8:	f003 f80a 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017ec:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <vTask_Menu+0x278>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 ff1a 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state  = Aux;
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <vTask_Menu+0x274>)
 80017fa:	2208      	movs	r2, #8
 80017fc:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Reinit, 0 ,eNoAction); // NOS VAMOS AL ESTADO Reinit
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <vTask_Menu+0x2a0>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	f004 fb1e 	bl	8005e4c <xTaskGenericNotify>


						break;
 8001810:	e060      	b.n	80018d4 <vTask_Menu+0x264>
					}case 6:{ // sSquare
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_6,portMAX_DELAY);
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <vTask_Menu+0x26c>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	2300      	movs	r3, #0
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	493d      	ldr	r1, [pc, #244]	; (8001914 <vTask_Menu+0x2a4>)
 800181e:	f002 ffef 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <vTask_Menu+0x278>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f002 feff 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sSquare;
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <vTask_Menu+0x274>)
 8001830:	2207      	movs	r2, #7
 8001832:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Square, 0 ,eNoAction); // NOS VAMOS AL ESTADO sSquare
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <vTask_Menu+0x2a8>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	f004 fb03 	bl	8005e4c <xTaskGenericNotify>


						break;
 8001846:	e045      	b.n	80018d4 <vTask_Menu+0x264>
					}case 7:{ // sAstar
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_7,portMAX_DELAY);
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <vTask_Menu+0x26c>)
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	f04f 32ff 	mov.w	r2, #4294967295
 8001852:	4932      	ldr	r1, [pc, #200]	; (800191c <vTask_Menu+0x2ac>)
 8001854:	f002 ffd4 	bl	8004800 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <vTask_Menu+0x278>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fee4 	bl	800462c <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sAstar;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <vTask_Menu+0x274>)
 8001866:	2206      	movs	r2, #6
 8001868:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Astar, 0 ,eNoAction); // NOS VAMOS AL ESTADO sAstar
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <vTask_Menu+0x2b0>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	f004 fae8 	bl	8005e4c <xTaskGenericNotify>
						break;
 800187c:	e02a      	b.n	80018d4 <vTask_Menu+0x264>
						///////
						continue;}
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <vTask_Menu+0x26c>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	4926      	ldr	r1, [pc, #152]	; (8001924 <vTask_Menu+0x2b4>)
 800188a:	f002 ffb9 	bl	8004800 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <vTask_Menu+0x2b8>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <vTask_Menu+0x278>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fec6 	bl	800462c <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00c f85a 	bl	800d960 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <vTask_Menu+0x2bc>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	2300      	movs	r3, #0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	f004 fac7 	bl	8005e4c <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f004 fa3e 	bl	8005d4c <xTaskGenericNotifyWait>
 80018d0:	e6d4      	b.n	800167c <vTask_Menu+0xc>
						continue;}
 80018d2:	bf00      	nop
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80018d4:	e6d2      	b.n	800167c <vTask_Menu+0xc>
 80018d6:	bf00      	nop
 80018d8:	08013300 	.word	0x08013300
 80018dc:	2000026c 	.word	0x2000026c
 80018e0:	20000625 	.word	0x20000625
 80018e4:	2000061f 	.word	0x2000061f
 80018e8:	20000270 	.word	0x20000270
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000240 	.word	0x20000240
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	20000248 	.word	0x20000248
 80018fc:	20000010 	.word	0x20000010
 8001900:	2000024c 	.word	0x2000024c
 8001904:	20000014 	.word	0x20000014
 8001908:	20000250 	.word	0x20000250
 800190c:	20000018 	.word	0x20000018
 8001910:	20000254 	.word	0x20000254
 8001914:	2000001c 	.word	0x2000001c
 8001918:	20000258 	.word	0x20000258
 800191c:	20000020 	.word	0x20000020
 8001920:	2000025c 	.word	0x2000025c
 8001924:	20000004 	.word	0x20000004
 8001928:	20000624 	.word	0x20000624
 800192c:	20000230 	.word	0x20000230

08001930 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 8001930:	b580      	push	{r7, lr}
 8001932:	b096      	sub	sp, #88	; 0x58
 8001934:	af02      	add	r7, sp, #8
 8001936:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 8001938:	2300      	movs	r3, #0
 800193a:	64fb      	str	r3, [r7, #76]	; 0x4c
	command_t cmd = {0};
 800193c:	f107 0308 	add.w	r3, r7, #8
 8001940:	2244      	movs	r2, #68	; 0x44
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f00c f80b 	bl	800d960 <memset>

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2000      	movs	r0, #0
 8001958:	f004 f9f8 	bl	8005d4c <xTaskGenericNotifyWait>
 800195c:	64f8      	str	r0, [r7, #76]	; 0x4c

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 800195e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001960:	2b01      	cmp	r3, #1
 8001962:	d1f2      	bne.n	800194a <vTask_Commands+0x1a>

		   process_command(&cmd);
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4618      	mov	r0, r3
 800196a:	f000 fd9d 	bl	80024a8 <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800196e:	e7ec      	b.n	800194a <vTask_Commands+0x1a>

08001970 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f004 f9e1 	bl	8005d4c <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <vTask_Stop+0x44>)
 800198c:	f001 fe2b 	bl	80035e6 <stop>


		Mode_dir.Mode     = None;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <vTask_Stop+0x48>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]

		 if (end){
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <vTask_Stop+0x4c>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0ec      	beq.n	8001978 <vTask_Stop+0x8>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <vTask_Stop+0x50>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	f004 fa4e 	bl	8005e4c <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019b0:	e7e2      	b.n	8001978 <vTask_Stop+0x8>
 80019b2:	bf00      	nop
 80019b4:	20000440 	.word	0x20000440
 80019b8:	2000061c 	.word	0x2000061c
 80019bc:	20000625 	.word	0x20000625
 80019c0:	20000230 	.word	0x20000230

080019c4 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f004 f9b7 	bl	8005d4c <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <vTask_Go+0x3c>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <vTask_Go+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <vTask_Go+0x3c>)
 80019ec:	705a      	strb	r2, [r3, #1]

		resetParameters();
 80019ee:	f002 fc63 	bl	80042b8 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80019f2:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <vTask_Go+0x3c>)
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <vTask_Go+0x44>)
 80019f8:	f001 fd0a 	bl	8003410 <On_motor_Straigh_Roll>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019fc:	e7e6      	b.n	80019cc <vTask_Go+0x8>
 80019fe:	bf00      	nop
 8001a00:	2000061c 	.word	0x2000061c
 8001a04:	2000055c 	.word	0x2000055c
 8001a08:	20000440 	.word	0x20000440

08001a0c <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af06      	add	r7, sp, #24
 8001a12:	6078      	str	r0, [r7, #4]

	double angleToGo_Relative = 0;
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f004 f98d 	bl	8005d4c <xTaskGenericNotifyWait>

		 switch (next_state) {
 8001a32:	4b9a      	ldr	r3, [pc, #616]	; (8001c9c <vTask_Control+0x290>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	f200 8111 	bhi.w	8001c60 <vTask_Control+0x254>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <vTask_Control+0x38>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001a59 	.word	0x08001a59
 8001a48:	08001a91 	.word	0x08001a91
 8001a4c:	08001c61 	.word	0x08001c61
 8001a50:	08001b51 	.word	0x08001b51
 8001a54:	08001b85 	.word	0x08001b85
			case sGo:{

				go(handler_Motor_Array,
 8001a58:	4b91      	ldr	r3, [pc, #580]	; (8001ca0 <vTask_Control+0x294>)
 8001a5a:	ed93 7b00 	vldr	d7, [r3]
 8001a5e:	4b91      	ldr	r3, [pc, #580]	; (8001ca4 <vTask_Control+0x298>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001a66:	4b90      	ldr	r3, [pc, #576]	; (8001ca8 <vTask_Control+0x29c>)
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	4b90      	ldr	r3, [pc, #576]	; (8001cac <vTask_Control+0x2a0>)
 8001a6c:	9303      	str	r3, [sp, #12]
 8001a6e:	4b90      	ldr	r3, [pc, #576]	; (8001cb0 <vTask_Control+0x2a4>)
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	4b90      	ldr	r3, [pc, #576]	; (8001cb4 <vTask_Control+0x2a8>)
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	4b90      	ldr	r3, [pc, #576]	; (8001cb8 <vTask_Control+0x2ac>)
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7e:	eef0 0a67 	vmov.f32	s1, s15
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <vTask_Control+0x2b0>)
 8001a84:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <vTask_Control+0x2b4>)
 8001a86:	498f      	ldr	r1, [pc, #572]	; (8001cc4 <vTask_Control+0x2b8>)
 8001a88:	488f      	ldr	r0, [pc, #572]	; (8001cc8 <vTask_Control+0x2bc>)
 8001a8a:	f002 f85b 	bl	8003b44 <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				break;
 8001a8e:	e104      	b.n	8001c9a <vTask_Control+0x28e>
			}case sGoTo:{


				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8001a90:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <vTask_Control+0x2b4>)
 8001a92:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a96:	4b8a      	ldr	r3, [pc, #552]	; (8001cc0 <vTask_Control+0x2b4>)
 8001a98:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001a9c:	eeb0 1a46 	vmov.f32	s2, s12
 8001aa0:	eef0 1a66 	vmov.f32	s3, s13
 8001aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa8:	eef0 0a67 	vmov.f32	s1, s15
 8001aac:	4883      	ldr	r0, [pc, #524]	; (8001cbc <vTask_Control+0x2b0>)
 8001aae:	f009 fe0b 	bl	800b6c8 <distance_traveled>
 8001ab2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab6:	eef0 7a60 	vmov.f32	s15, s1
 8001aba:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <vTask_Control+0x2c0>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]

				// Función de control del robot
				go(handler_Motor_Array,
 8001ac0:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <vTask_Control+0x294>)
 8001ac2:	ed93 7b00 	vldr	d7, [r3]
 8001ac6:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <vTask_Control+0x298>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <vTask_Control+0x29c>)
 8001ad0:	9304      	str	r3, [sp, #16]
 8001ad2:	4b76      	ldr	r3, [pc, #472]	; (8001cac <vTask_Control+0x2a0>)
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <vTask_Control+0x2a4>)
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <vTask_Control+0x2a8>)
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <vTask_Control+0x2ac>)
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae6:	eef0 0a67 	vmov.f32	s1, s15
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <vTask_Control+0x2b0>)
 8001aec:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <vTask_Control+0x2b4>)
 8001aee:	4975      	ldr	r1, [pc, #468]	; (8001cc4 <vTask_Control+0x2b8>)
 8001af0:	4875      	ldr	r0, [pc, #468]	; (8001cc8 <vTask_Control+0x2bc>)
 8001af2:	f002 f827 	bl	8003b44 <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001af6:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <vTask_Control+0x2c0>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f842 	bl	8000b88 <__aeabi_d2iz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bfb8      	it	lt
 8001b0a:	425b      	neglt	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd21 	bl	8000554 <__aeabi_i2d>
 8001b12:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <vTask_Control+0x2b0>)
 8001b14:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001b18:	2401      	movs	r4, #1
 8001b1a:	f7fe fff7 	bl	8000b0c <__aeabi_dcmplt>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <vTask_Control+0x11c>
 8001b24:	2300      	movs	r3, #0
 8001b26:	461c      	mov	r4, r3
 8001b28:	b2e3      	uxtb	r3, r4
 8001b2a:	f083 0301 	eor.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80af 	beq.w	8001c94 <vTask_Control+0x288>
					// Paramos el proceso
					end = SET;
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <vTask_Control+0x2c4>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <vTask_Control+0x2c8>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f004 f97f 	bl	8005e4c <xTaskGenericNotify>
				}


				break;
 8001b4e:	e0a1      	b.n	8001c94 <vTask_Control+0x288>
			}case sRoll:{


				// Si llegamos a este comando lo que se quiere es SOLO GIRAR en una cierta direccion
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <vTask_Control+0x294>)
 8001b52:	ed93 7b00 	vldr	d7, [r3]
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <vTask_Control+0x298>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <vTask_Control+0x2cc>)
 8001b60:	9303      	str	r3, [sp, #12]
 8001b62:	4b52      	ldr	r3, [pc, #328]	; (8001cac <vTask_Control+0x2a0>)
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	4b52      	ldr	r3, [pc, #328]	; (8001cb0 <vTask_Control+0x2a4>)
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	4b52      	ldr	r3, [pc, #328]	; (8001cb4 <vTask_Control+0x2a8>)
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b72:	eef0 0a67 	vmov.f32	s1, s15
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <vTask_Control+0x2b0>)
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <vTask_Control+0x2b4>)
 8001b7a:	4952      	ldr	r1, [pc, #328]	; (8001cc4 <vTask_Control+0x2b8>)
 8001b7c:	4852      	ldr	r0, [pc, #328]	; (8001cc8 <vTask_Control+0x2bc>)
 8001b7e:	f002 f875 	bl	8003c6c <NOP>
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);

				break;
 8001b82:	e08a      	b.n	8001c9a <vTask_Control+0x28e>


				// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - parameters_Pos_Robot.grad_global);
 8001b84:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <vTask_Control+0x2b4>)
 8001b86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b8a:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <vTask_Control+0x2b4>)
 8001b8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b90:	f7fe fb92 	bl	80002b8 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe fff4 	bl	8000b88 <__aeabi_d2iz>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bfb8      	it	lt
 8001ba6:	425b      	neglt	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcd3 	bl	8000554 <__aeabi_i2d>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <vTask_Control+0x294>)
 8001bb8:	ed93 7b00 	vldr	d7, [r3]
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <vTask_Control+0x298>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <vTask_Control+0x2cc>)
 8001bc6:	9303      	str	r3, [sp, #12]
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <vTask_Control+0x2a0>)
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <vTask_Control+0x2a4>)
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <vTask_Control+0x2a8>)
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd8:	eef0 0a67 	vmov.f32	s1, s15
 8001bdc:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <vTask_Control+0x2b0>)
 8001bde:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <vTask_Control+0x2b4>)
 8001be0:	4938      	ldr	r1, [pc, #224]	; (8001cc4 <vTask_Control+0x2b8>)
 8001be2:	4839      	ldr	r0, [pc, #228]	; (8001cc8 <vTask_Control+0x2bc>)
 8001be4:	f002 f842 	bl	8003c6c <NOP>
					data,
					Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <vTask_Control+0x2b0>)
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcb1 	bl	8000554 <__aeabi_i2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bfe:	f7fe ff85 	bl	8000b0c <__aeabi_dcmplt>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <vTask_Control+0x200>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	b2e3      	uxtb	r3, r4
 8001c0e:	f083 0301 	eor.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <vTask_Control+0x220>
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <vTask_Control+0x2d0>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <vTask_Control+0x2d0>)
 8001c2a:	701a      	strb	r2, [r3, #0]

				// Paramos el robot
				if (Done){
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <vTask_Control+0x2d0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d031      	beq.n	8001c98 <vTask_Control+0x28c>
					// Paramos el proceso
					end = SET;
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <vTask_Control+0x2c4>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <vTask_Control+0x2c8>)
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	f004 f900 	bl	8005e4c <xTaskGenericNotify>

					angleToGo_Relative = 0; // Reseteamos
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9c7 2302 	strd	r2, r3, [r7, #8]
					Done = RESET; // Reseteamos la bandera
 8001c58:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <vTask_Control+0x2d0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001c5e:	e01b      	b.n	8001c98 <vTask_Control+0x28c>
			}
			default:{
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <vTask_Control+0x294>)
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <vTask_Control+0x298>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <vTask_Control+0x2cc>)
 8001c70:	9303      	str	r3, [sp, #12]
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <vTask_Control+0x2a0>)
 8001c74:	9302      	str	r3, [sp, #8]
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <vTask_Control+0x2a4>)
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <vTask_Control+0x2a8>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c82:	eef0 0a67 	vmov.f32	s1, s15
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <vTask_Control+0x2b0>)
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <vTask_Control+0x2b4>)
 8001c8a:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <vTask_Control+0x2b8>)
 8001c8c:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <vTask_Control+0x2bc>)
 8001c8e:	f001 ffed 	bl	8003c6c <NOP>
					&flag_angulo,
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);
				break;}
 8001c92:	e002      	b.n	8001c9a <vTask_Control+0x28e>
				break;
 8001c94:	bf00      	nop
 8001c96:	e6c3      	b.n	8001a20 <vTask_Control+0x14>
				break;
 8001c98:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001c9a:	e6c1      	b.n	8001a20 <vTask_Control+0x14>
 8001c9c:	2000061f 	.word	0x2000061f
 8001ca0:	20000c18 	.word	0x20000c18
 8001ca4:	2000061c 	.word	0x2000061c
 8001ca8:	200005dc 	.word	0x200005dc
 8001cac:	20000622 	.word	0x20000622
 8001cb0:	20000621 	.word	0x20000621
 8001cb4:	20000620 	.word	0x20000620
 8001cb8:	20000630 	.word	0x20000630
 8001cbc:	20000650 	.word	0x20000650
 8001cc0:	20000b70 	.word	0x20000b70
 8001cc4:	20000430 	.word	0x20000430
 8001cc8:	20000440 	.word	0x20000440
 8001ccc:	20000c38 	.word	0x20000c38
 8001cd0:	20000625 	.word	0x20000625
 8001cd4:	2000023c 	.word	0x2000023c
 8001cd8:	2000059c 	.word	0x2000059c
 8001cdc:	20000623 	.word	0x20000623

08001ce0 <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f004 f829 	bl	8005d4c <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <vTask_GoTo+0xec>)
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <vTask_GoTo+0xf0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <vTask_GoTo+0xec>)
 8001d08:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <vTask_GoTo+0xf4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc10 	bl	8000534 <__aeabi_ui2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	492f      	ldr	r1, [pc, #188]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d1a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		resetParameters();
 8001d1e:	f002 facb 	bl	80042b8 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <vTask_GoTo+0xec>)
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	482d      	ldr	r0, [pc, #180]	; (8001ddc <vTask_GoTo+0xfc>)
 8001d28:	f001 fb72 	bl	8003410 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <vTask_GoTo+0x100>)
 8001d2e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001d32:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d34:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <vTask_GoTo+0x100>)
 8001d3a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001d3e:	4926      	ldr	r1, [pc, #152]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d40:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d46:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <vTask_GoTo+0x100>)
 8001d4c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001d50:	eeb0 0a47 	vmov.f32	s0, s14
 8001d54:	eef0 0a67 	vmov.f32	s1, s15
 8001d58:	f00e fcda 	bl	8010710 <cos>
 8001d5c:	ec53 2b10 	vmov	r2, r3, d0
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fc60 	bl	8000628 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d72:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001d76:	f7fe faa1 	bl	80002bc <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4916      	ldr	r1, [pc, #88]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d80:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001d86:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <vTask_GoTo+0x100>)
 8001d8c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001d90:	eeb0 0a47 	vmov.f32	s0, s14
 8001d94:	eef0 0a67 	vmov.f32	s1, s15
 8001d98:	f00e fd56 	bl	8010848 <sin>
 8001d9c:	ec53 2b10 	vmov	r2, r3, d0
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fc40 	bl	8000628 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001db2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001db6:	f7fe fa81 	bl	80002bc <__adddf3>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4906      	ldr	r1, [pc, #24]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001dc0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <vTask_GoTo+0xf8>)
 8001dc6:	f009 fb93 	bl	800b4f0 <calculation_parameter_distance>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001dca:	e78d      	b.n	8001ce8 <vTask_GoTo+0x8>
 8001dcc:	2000061c 	.word	0x2000061c
 8001dd0:	2000055c 	.word	0x2000055c
 8001dd4:	20000560 	.word	0x20000560
 8001dd8:	20000650 	.word	0x20000650
 8001ddc:	20000440 	.word	0x20000440
 8001de0:	20000b70 	.word	0x20000b70

08001de4 <vTask_Roll>:

////////////////////////////////////////////////////////////////////////ROLL STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Roll( void * pvParameters ){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2300      	movs	r3, #0
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f003 ffa7 	bl	8005d4c <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
		Mode_dir.Mode = Mode = Roll;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <vTask_Roll+0x48>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <vTask_Roll+0x48>)
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <vTask_Roll+0x4c>)
 8001e0a:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <vTask_Roll+0x50>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <vTask_Roll+0x4c>)
 8001e14:	705a      	strb	r2, [r3, #1]

		resetParameters();
 8001e16:	f002 fa4f 	bl	80042b8 <resetParameters>

		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <vTask_Roll+0x4c>)
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <vTask_Roll+0x54>)
 8001e20:	f001 faf6 	bl	8003410 <On_motor_Straigh_Roll>

		Done = RESET; // Reseteamos la bandera
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <vTask_Roll+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001e2a:	e7df      	b.n	8001dec <vTask_Roll+0x8>
 8001e2c:	2000061e 	.word	0x2000061e
 8001e30:	2000061c 	.word	0x2000061c
 8001e34:	2000055c 	.word	0x2000055c
 8001e38:	20000440 	.word	0x20000440
 8001e3c:	20000623 	.word	0x20000623

08001e40 <vTask_RollTo>:

////////////////////////////////////////////////////////////////////////ROLLTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_RollTo( void * pvParameters ){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2000      	movs	r0, #0
 8001e56:	f003 ff79 	bl	8005d4c <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
		Mode_dir.Mode = Mode = Roll;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <vTask_RollTo+0x4c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <vTask_RollTo+0x4c>)
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <vTask_RollTo+0x50>)
 8001e66:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <vTask_RollTo+0x54>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <vTask_RollTo+0x50>)
 8001e70:	705a      	strb	r2, [r3, #1]

		// Almacenamos el angulo al que se quiere ir
		parameters_Path_Robot.angle = sparam;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <vTask_RollTo+0x58>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <vTask_RollTo+0x5c>)
 8001e7a:	649a      	str	r2, [r3, #72]	; 0x48

		resetParameters();
 8001e7c:	f002 fa1c 	bl	80042b8 <resetParameters>

		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <vTask_RollTo+0x50>)
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <vTask_RollTo+0x60>)
 8001e86:	f001 fac3 	bl	8003410 <On_motor_Straigh_Roll>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001e8a:	e7dd      	b.n	8001e48 <vTask_RollTo+0x8>
 8001e8c:	2000061e 	.word	0x2000061e
 8001e90:	2000061c 	.word	0x2000061c
 8001e94:	2000055c 	.word	0x2000055c
 8001e98:	20000560 	.word	0x20000560
 8001e9c:	20000650 	.word	0x20000650
 8001ea0:	20000440 	.word	0x20000440

08001ea4 <vTask_Square>:


////////////////////////////////////////////////////////////////////////SQUARE STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Square( void * pvParameters ){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f003 ff47 	bl	8005d4c <xTaskGenericNotifyWait>

		square_dir  = fparam; // Direccion del cuadrado
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <vTask_Square+0x44>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <vTask_Square+0x48>)
 8001ec6:	701a      	strb	r2, [r3, #0]
		square_side = sparam; // lado del cuadrado en cm
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <vTask_Square+0x4c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb31 	bl	8000534 <__aeabi_ui2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <vTask_Square+0x50>)
 8001ed8:	e9c1 2300 	strd	r2, r3, [r1]
		parameters_op_Robot.op_Mode = 0; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <vTask_Square+0x54>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001ee4:	e7e2      	b.n	8001eac <vTask_Square+0x8>
 8001ee6:	bf00      	nop
 8001ee8:	2000055c 	.word	0x2000055c
 8001eec:	20000c40 	.word	0x20000c40
 8001ef0:	20000560 	.word	0x20000560
 8001ef4:	20000c48 	.word	0x20000c48
 8001ef8:	20000bf0 	.word	0x20000bf0

08001efc <vTask_Astar>:


////////////////////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Astar( void * pvParameters ){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2000      	movs	r0, #0
 8001f12:	f003 ff1b 	bl	8005d4c <xTaskGenericNotifyWait>

		//////////////////////////////////////////////  ASTAR - Algoritm setup//////////////////////////////////////////////////////////

		// Solo necesitamos definir las distancias paralela y diagonal de la malla
		handlerAstarParameters.parallelDistance  = fparam;
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <vTask_Astar+0x7c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <vTask_Astar+0x80>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = sparam;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <vTask_Astar+0x84>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <vTask_Astar+0x80>)
 8001f36:	edc3 7a01 	vstr	s15, [r3, #4]

		flag_Astar = SET;
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <vTask_Astar+0x88>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]

		writeMsg(&handlerUSART, msg_InsertGrid);
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <vTask_Astar+0x8c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <vTask_Astar+0x90>)
 8001f48:	f00b f97c 	bl	800d244 <writeMsg>

		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8001f4c:	4910      	ldr	r1, [pc, #64]	; (8001f90 <vTask_Astar+0x94>)
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <vTask_Astar+0x90>)
 8001f50:	f00b f978 	bl	800d244 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8001f54:	490f      	ldr	r1, [pc, #60]	; (8001f94 <vTask_Astar+0x98>)
 8001f56:	480d      	ldr	r0, [pc, #52]	; (8001f8c <vTask_Astar+0x90>)
 8001f58:	f00b f974 	bl	800d244 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <vTask_Astar+0x9c>)
 8001f5e:	480b      	ldr	r0, [pc, #44]	; (8001f8c <vTask_Astar+0x90>)
 8001f60:	f00b f970 	bl	800d244 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 8001f64:	490d      	ldr	r1, [pc, #52]	; (8001f9c <vTask_Astar+0xa0>)
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <vTask_Astar+0x90>)
 8001f68:	f00b f96c 	bl	800d244 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8001f6c:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <vTask_Astar+0xa4>)
 8001f6e:	490d      	ldr	r1, [pc, #52]	; (8001fa4 <vTask_Astar+0xa8>)
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <vTask_Astar+0x90>)
 8001f72:	f006 fd73 	bl	8008a5c <initSerialComunication>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001f76:	e7c5      	b.n	8001f04 <vTask_Astar+0x8>
 8001f78:	2000055c 	.word	0x2000055c
 8001f7c:	200004a0 	.word	0x200004a0
 8001f80:	20000560 	.word	0x20000560
 8001f84:	20000626 	.word	0x20000626
 8001f88:	20000028 	.word	0x20000028
 8001f8c:	20000390 	.word	0x20000390
 8001f90:	080134dc 	.word	0x080134dc
 8001f94:	08013514 	.word	0x08013514
 8001f98:	0801354c 	.word	0x0801354c
 8001f9c:	08013584 	.word	0x08013584
 8001fa0:	200002a8 	.word	0x200002a8
 8001fa4:	2000029c 	.word	0x2000029c

08001fa8 <vTask_Grid>:

	}

}

void vTask_Grid( void * pvParameters ){
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f003 fec5 	bl	8005d4c <xTaskGenericNotifyWait>

		 status = xQueueReceive(xQueue_InputData, &item,0);
 8001fc2:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <vTask_Grid+0x158>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f107 010b 	add.w	r1, r7, #11
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fdbf 	bl	8004b50 <xQueueReceive>
 8001fd2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d158      	bne.n	800208c <vTask_Grid+0xe4>

			if (item != '\0'){
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d055      	beq.n	800208c <vTask_Grid+0xe4>


				if (item == 'z'){
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	2b7a      	cmp	r3, #122	; 0x7a
 8001fe4:	d117      	bne.n	8002016 <vTask_Grid+0x6e>
					memset(stringMatrix, 0, sizeof(stringMatrix));
 8001fe6:	2231      	movs	r2, #49	; 0x31
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4846      	ldr	r0, [pc, #280]	; (8002104 <vTask_Grid+0x15c>)
 8001fec:	f00b fcb8 	bl	800d960 <memset>
					stringRow    = 0;
 8001ff0:	4b45      	ldr	r3, [pc, #276]	; (8002108 <vTask_Grid+0x160>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 8001ff6:	4b45      	ldr	r3, [pc, #276]	; (800210c <vTask_Grid+0x164>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8001ffc:	4944      	ldr	r1, [pc, #272]	; (8002110 <vTask_Grid+0x168>)
 8001ffe:	4845      	ldr	r0, [pc, #276]	; (8002114 <vTask_Grid+0x16c>)
 8002000:	f00b f920 	bl	800d244 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8002004:	4b44      	ldr	r3, [pc, #272]	; (8002118 <vTask_Grid+0x170>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4842      	ldr	r0, [pc, #264]	; (8002114 <vTask_Grid+0x16c>)
 800200c:	f00b f91a 	bl	800d244 <writeMsg>
					item = '\0';
 8002010:	2300      	movs	r3, #0
 8002012:	72fb      	strb	r3, [r7, #11]
 8002014:	e03a      	b.n	800208c <vTask_Grid+0xe4>
				}else if (item != '@'){
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d02c      	beq.n	8002076 <vTask_Grid+0xce>
					if (item != '\n'){ // Como estamos en Windows, el enter da un par the caracteres \r\n
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	2b0a      	cmp	r3, #10
 8002020:	d026      	beq.n	8002070 <vTask_Grid+0xc8>
						if (item != '\r'){
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	2b0d      	cmp	r3, #13
 8002026:	d017      	beq.n	8002058 <vTask_Grid+0xb0>
							stringMatrix[stringRow][stringColumn] = item;
 8002028:	4b37      	ldr	r3, [pc, #220]	; (8002108 <vTask_Grid+0x160>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <vTask_Grid+0x164>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461c      	mov	r4, r3
 8002034:	7af8      	ldrb	r0, [r7, #11]
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <vTask_Grid+0x15c>)
 8002038:	460b      	mov	r3, r1
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a5b      	subs	r3, r3, r1
 800203e:	4413      	add	r3, r2
 8002040:	4423      	add	r3, r4
 8002042:	4602      	mov	r2, r0
 8002044:	701a      	strb	r2, [r3, #0]
							stringColumn++;
 8002046:	4b31      	ldr	r3, [pc, #196]	; (800210c <vTask_Grid+0x164>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b2f      	ldr	r3, [pc, #188]	; (800210c <vTask_Grid+0x164>)
 8002050:	701a      	strb	r2, [r3, #0]
							item = '\0';
 8002052:	2300      	movs	r3, #0
 8002054:	72fb      	strb	r3, [r7, #11]
 8002056:	e019      	b.n	800208c <vTask_Grid+0xe4>
						}else{
							stringRow++;
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <vTask_Grid+0x160>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <vTask_Grid+0x160>)
 8002062:	701a      	strb	r2, [r3, #0]
							stringColumn = 0;
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <vTask_Grid+0x164>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
							item = '\0';
 800206a:	2300      	movs	r3, #0
 800206c:	72fb      	strb	r3, [r7, #11]
 800206e:	e00d      	b.n	800208c <vTask_Grid+0xe4>
						}
					}else{
						item = '\0';
 8002070:	2300      	movs	r3, #0
 8002072:	72fb      	strb	r3, [r7, #11]
 8002074:	e00a      	b.n	800208c <vTask_Grid+0xe4>
					}
				}else{
					doneTransaction = SET;
 8002076:	4b29      	ldr	r3, [pc, #164]	; (800211c <vTask_Grid+0x174>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]

					flag_Astar = RESET;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <vTask_Grid+0x178>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <vTask_Grid+0x164>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
					item = '\0';
 8002088:	2300      	movs	r3, #0
 800208a:	72fb      	strb	r3, [r7, #11]
				}
			}
		}

		// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
		if (doneTransaction){
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <vTask_Grid+0x174>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d08d      	beq.n	8001fb0 <vTask_Grid+0x8>

			starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <vTask_Grid+0x17c>)
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	4b23      	ldr	r3, [pc, #140]	; (8002128 <vTask_Grid+0x180>)
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4b23      	ldr	r3, [pc, #140]	; (800212c <vTask_Grid+0x184>)
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <vTask_Grid+0x188>)
 80020a0:	4924      	ldr	r1, [pc, #144]	; (8002134 <vTask_Grid+0x18c>)
 80020a2:	4818      	ldr	r0, [pc, #96]	; (8002104 <vTask_Grid+0x15c>)
 80020a4:	f005 f8d8 	bl	8007258 <findShorterWay>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <vTask_Grid+0x190>)
 80020ae:	701a      	strb	r2, [r3, #0]

			if (starWorking){
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <vTask_Grid+0x190>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <vTask_Grid+0x14a>
				// si se llego hasta aca es porque Astar si funciona correctamente

				memset(stringMatrix, 0, sizeof(stringMatrix));
 80020b8:	2231      	movs	r2, #49	; 0x31
 80020ba:	2100      	movs	r1, #0
 80020bc:	4811      	ldr	r0, [pc, #68]	; (8002104 <vTask_Grid+0x15c>)
 80020be:	f00b fc4f 	bl	800d960 <memset>
				stringRow    = 0;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <vTask_Grid+0x160>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <vTask_Grid+0x164>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 80020ce:	4910      	ldr	r1, [pc, #64]	; (8002110 <vTask_Grid+0x168>)
 80020d0:	4810      	ldr	r0, [pc, #64]	; (8002114 <vTask_Grid+0x16c>)
 80020d2:	f00b f8b7 	bl	800d244 <writeMsg>

				flag_Astar = RESET;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <vTask_Grid+0x178>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <vTask_Grid+0x174>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
				Do_the_track = SET;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <vTask_Grid+0x194>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
				parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE ASTAR
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <vTask_Grid+0x198>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]
 80020f0:	e75e      	b.n	8001fb0 <vTask_Grid+0x8>
			}else{
				writeMsg(&handlerUSART, msg_NotWorking);
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <vTask_Grid+0x19c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	4806      	ldr	r0, [pc, #24]	; (8002114 <vTask_Grid+0x16c>)
 80020fa:	f00b f8a3 	bl	800d244 <writeMsg>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80020fe:	e757      	b.n	8001fb0 <vTask_Grid+0x8>
 8002100:	20000270 	.word	0x20000270
 8002104:	20000568 	.word	0x20000568
 8002108:	2000059a 	.word	0x2000059a
 800210c:	20000599 	.word	0x20000599
 8002110:	080135bc 	.word	0x080135bc
 8002114:	20000390 	.word	0x20000390
 8002118:	20000028 	.word	0x20000028
 800211c:	20000534 	.word	0x20000534
 8002120:	20000626 	.word	0x20000626
 8002124:	2000dbb4 	.word	0x2000dbb4
 8002128:	200004ac 	.word	0x200004ac
 800212c:	200004a0 	.word	0x200004a0
 8002130:	2000d6e8 	.word	0x2000d6e8
 8002134:	2000db80 	.word	0x2000db80
 8002138:	2000059b 	.word	0x2000059b
 800213c:	20000627 	.word	0x20000627
 8002140:	20000bf0 	.word	0x20000bf0
 8002144:	20000024 	.word	0x20000024

08002148 <vTask_CrOp>:
	}// End of the while

}


void vTask_CrOp( void * pvParameters ){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af02      	add	r7, sp, #8
 800214e:	6078      	str	r0, [r7, #4]

	while(1){

		// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
		switch (parameters_op_Robot.op_Mode) {
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <vTask_CrOp+0x9c>)
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <vTask_CrOp+0x18>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d025      	beq.n	80021aa <vTask_CrOp+0x62>
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros

				break;

			}
			default:{break;}
 800215e:	e03f      	b.n	80021e0 <vTask_CrOp+0x98>
				create_square_operations(square_side,
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <vTask_CrOp+0xa0>)
 8002162:	ed93 7b00 	vldr	d7, [r3]
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <vTask_CrOp+0xa4>)
 8002168:	7818      	ldrb	r0, [r3, #0]
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <vTask_CrOp+0xa8>)
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4b21      	ldr	r3, [pc, #132]	; (80021f4 <vTask_CrOp+0xac>)
 8002170:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <vTask_CrOp+0xb0>)
 8002172:	4922      	ldr	r1, [pc, #136]	; (80021fc <vTask_CrOp+0xb4>)
 8002174:	eeb0 0a47 	vmov.f32	s0, s14
 8002178:	eef0 0a67 	vmov.f32	s1, s15
 800217c:	f001 ff4c 	bl	8004018 <create_square_operations>
				parameters_op_Robot.op_Mode = 0; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <vTask_CrOp+0x9c>)
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2020 	strb.w	r2, [r3, #32]
				counter_operation = 0;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <vTask_CrOp+0xb8>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
				parameters_op_Robot.op_Mode = 2;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <vTask_CrOp+0x9c>)
 8002190:	2202      	movs	r2, #2
 8002192:	f883 2020 	strb.w	r2, [r3, #32]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <vTask_CrOp+0xbc>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	2300      	movs	r3, #0
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2300      	movs	r3, #0
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	f003 fe52 	bl	8005e4c <xTaskGenericNotify>
				break;
 80021a8:	e01a      	b.n	80021e0 <vTask_CrOp+0x98>
				create_Astar_operations(&handlerAstarParameters,
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <vTask_CrOp+0xa8>)
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <vTask_CrOp+0xac>)
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <vTask_CrOp+0xb0>)
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <vTask_CrOp+0xb4>)
 80021b6:	4914      	ldr	r1, [pc, #80]	; (8002208 <vTask_CrOp+0xc0>)
 80021b8:	4814      	ldr	r0, [pc, #80]	; (800220c <vTask_CrOp+0xc4>)
 80021ba:	f006 fcb9 	bl	8008b30 <create_Astar_operations>
				counter_operation = 0;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <vTask_CrOp+0xb8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
				parameters_op_Robot.op_Mode = 2;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <vTask_CrOp+0x9c>)
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 2020 	strb.w	r2, [r3, #32]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <vTask_CrOp+0xbc>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2300      	movs	r3, #0
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	f003 fe37 	bl	8005e4c <xTaskGenericNotify>
				break;
 80021de:	bf00      	nop
		switch (parameters_op_Robot.op_Mode) {
 80021e0:	e7b6      	b.n	8002150 <vTask_CrOp+0x8>
 80021e2:	bf00      	nop
 80021e4:	20000bf0 	.word	0x20000bf0
 80021e8:	20000c48 	.word	0x20000c48
 80021ec:	20000c40 	.word	0x20000c40
 80021f0:	20000b70 	.word	0x20000b70
 80021f4:	20000650 	.word	0x20000650
 80021f8:	20000bc0 	.word	0x20000bc0
 80021fc:	200006c0 	.word	0x200006c0
 8002200:	20000c50 	.word	0x20000c50
 8002204:	20000254 	.word	0x20000254
 8002208:	2000dbb4 	.word	0x2000dbb4
 800220c:	200004a0 	.word	0x200004a0

08002210 <vTask_PrOp>:

	}

}

void vTask_PrOp( void * pvParameters ){
 8002210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af02      	add	r7, sp, #8
 8002218:	6078      	str	r0, [r7, #4]

	while(1){


		// Esperamos 3 segundos
		delay_ms(3000);
 800221a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800221e:	f006 ff4d 	bl	80090bc <delay_ms>

		// Este caso representa la ejecución de las operaciones almacenadas en la lista de operaciones

		if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <vTask_PrOp+0x200>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	4a7a      	ldr	r2, [pc, #488]	; (8002414 <vTask_PrOp+0x204>)
 800222a:	460b      	mov	r3, r1
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	3370      	adds	r3, #112	; 0x70
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d175      	bne.n	8002328 <vTask_PrOp+0x118>

			// Creamos el comando para que haga la tarea respectiva a ir en linea recta

			parameters_Path_Robot.line_Distance =
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 800223c:	4b74      	ldr	r3, [pc, #464]	; (8002410 <vTask_PrOp+0x200>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	4a74      	ldr	r2, [pc, #464]	; (8002414 <vTask_PrOp+0x204>)
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	3378      	adds	r3, #120	; 0x78
 8002250:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <vTask_PrOp+0x208>)
 800225a:	f7fe f9e5 	bl	8000628 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	4b6d      	ldr	r3, [pc, #436]	; (800241c <vTask_PrOp+0x20c>)
 8002268:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800226c:	f7fe f824 	bl	80002b8 <__aeabi_dsub>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	ec43 2b17 	vmov	d7, r2, r3
 8002278:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8002408 <vTask_PrOp+0x1f8>
 800227c:	eeb0 0a47 	vmov.f32	s0, s14
 8002280:	eef0 0a67 	vmov.f32	s1, s15
 8002284:	f00e fb6e 	bl	8010964 <pow>
 8002288:	ec59 8b10 	vmov	r8, r9, d0
						 pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination*10 - parameters_Pos_Robot.yg_position),2));
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <vTask_PrOp+0x200>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	4a60      	ldr	r2, [pc, #384]	; (8002414 <vTask_PrOp+0x204>)
 8002294:	460b      	mov	r3, r1
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	3380      	adds	r3, #128	; 0x80
 80022a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <vTask_PrOp+0x208>)
 80022aa:	f7fe f9bd 	bl	8000628 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	4b59      	ldr	r3, [pc, #356]	; (800241c <vTask_PrOp+0x20c>)
 80022b8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80022bc:	f7fd fffc 	bl	80002b8 <__aeabi_dsub>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	ec43 2b17 	vmov	d7, r2, r3
 80022c8:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8002408 <vTask_PrOp+0x1f8>
 80022cc:	eeb0 0a47 	vmov.f32	s0, s14
 80022d0:	eef0 0a67 	vmov.f32	s1, s15
 80022d4:	f00e fb46 	bl	8010964 <pow>
 80022d8:	ec53 2b10 	vmov	r2, r3, d0
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 80022dc:	4640      	mov	r0, r8
 80022de:	4649      	mov	r1, r9
 80022e0:	f7fd ffec 	bl	80002bc <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	ec43 2b17 	vmov	d7, r2, r3
 80022ec:	eeb0 0a47 	vmov.f32	s0, s14
 80022f0:	eef0 0a67 	vmov.f32	s1, s15
 80022f4:	f00e fba6 	bl	8010a44 <sqrt>
 80022f8:	eeb0 7a40 	vmov.f32	s14, s0
 80022fc:	eef0 7a60 	vmov.f32	s15, s1
			parameters_Path_Robot.line_Distance =
 8002300:	4b44      	ldr	r3, [pc, #272]	; (8002414 <vTask_PrOp+0x204>)
 8002302:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40


			sprintf(bufferReceptionMultiOperations, "goto %u %.2f" , 1 , parameters_Path_Robot.line_Distance); // Mandamos una direccion hacia adelante
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <vTask_PrOp+0x204>)
 8002308:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800230c:	e9cd 2300 	strd	r2, r3, [sp]
 8002310:	2201      	movs	r2, #1
 8002312:	4943      	ldr	r1, [pc, #268]	; (8002420 <vTask_PrOp+0x210>)
 8002314:	4843      	ldr	r0, [pc, #268]	; (8002424 <vTask_PrOp+0x214>)
 8002316:	f00c f885 	bl	800e424 <siprintf>
			// y ademas la distancia a recorrer

//			parseCommands(bufferReceptionMultiOperations); // Mandamos el comando

			counter_operation++;
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <vTask_PrOp+0x200>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <vTask_PrOp+0x200>)
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e778      	b.n	800221a <vTask_PrOp+0xa>

			// fin de la operacion de linea recta

		}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <vTask_PrOp+0x200>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	4a39      	ldr	r2, [pc, #228]	; (8002414 <vTask_PrOp+0x204>)
 8002330:	460b      	mov	r3, r1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	3370      	adds	r3, #112	; 0x70
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d155      	bne.n	80023ee <vTask_PrOp+0x1de>
			// Creamos el comando para que haga la tarea para que gire un cierto ángulo

			// metemos el angulo a rotar, ya sea positivo o negativo

			if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <vTask_PrOp+0x200>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	4a32      	ldr	r2, [pc, #200]	; (8002414 <vTask_PrOp+0x204>)
 800234a:	460b      	mov	r3, r1
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	3388      	adds	r3, #136	; 0x88
 8002356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	f7fe fbd3 	bl	8000b0c <__aeabi_dcmplt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01f      	beq.n	80023ac <vTask_PrOp+0x19c>
				sprintf(bufferReceptionMultiOperations,
						"rollto %u %.2f" ,
						1 , // CCW
						-parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative -8);
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <vTask_PrOp+0x200>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <vTask_PrOp+0x204>)
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	3388      	adds	r3, #136	; 0x88
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	4614      	mov	r4, r2
 8002386:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
				sprintf(bufferReceptionMultiOperations,
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <vTask_PrOp+0x218>)
 8002390:	4620      	mov	r0, r4
 8002392:	4629      	mov	r1, r5
 8002394:	f7fd ff90 	bl	80002b8 <__aeabi_dsub>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9cd 2300 	strd	r2, r3, [sp]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4922      	ldr	r1, [pc, #136]	; (800242c <vTask_PrOp+0x21c>)
 80023a4:	481f      	ldr	r0, [pc, #124]	; (8002424 <vTask_PrOp+0x214>)
 80023a6:	f00c f83d 	bl	800e424 <siprintf>
 80023aa:	e019      	b.n	80023e0 <vTask_PrOp+0x1d0>
			}else{
				sprintf(bufferReceptionMultiOperations,
						"rollto %u %.2f" ,
						0 , // CW
						parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative - 8);
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <vTask_PrOp+0x200>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <vTask_PrOp+0x204>)
 80023b4:	460b      	mov	r3, r1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	3388      	adds	r3, #136	; 0x88
 80023c0:	e9d3 0100 	ldrd	r0, r1, [r3]
				sprintf(bufferReceptionMultiOperations,
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <vTask_PrOp+0x218>)
 80023ca:	f7fd ff75 	bl	80002b8 <__aeabi_dsub>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9cd 2300 	strd	r2, r3, [sp]
 80023d6:	2200      	movs	r2, #0
 80023d8:	4914      	ldr	r1, [pc, #80]	; (800242c <vTask_PrOp+0x21c>)
 80023da:	4812      	ldr	r0, [pc, #72]	; (8002424 <vTask_PrOp+0x214>)
 80023dc:	f00c f822 	bl	800e424 <siprintf>
			}

//			parseCommands(bufferReceptionMultiOperations); // Mandamos el comando

			counter_operation++;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <vTask_PrOp+0x200>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <vTask_PrOp+0x200>)
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e715      	b.n	800221a <vTask_PrOp+0xa>

		}else{// Al llegar aca es porque se acabaron las operaciones, la ultima operacion sera una operacion nula, lo que indica
			// cerrar el comando de Astar
			memset(parameters_Path_Robot.Operation_List,0, sizeof(parameters_Path_Robot.Operation_List));
 80023ee:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80023f2:	2100      	movs	r1, #0
 80023f4:	480e      	ldr	r0, [pc, #56]	; (8002430 <vTask_PrOp+0x220>)
 80023f6:	f00b fab3 	bl	800d960 <memset>
			counter_operation = 0;
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <vTask_PrOp+0x200>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
			Do_the_track = RESET; // Bajamos la bandera de Do_the_track para dejar de hacer operaciones
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <vTask_PrOp+0x224>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
		delay_ms(3000);
 8002406:	e708      	b.n	800221a <vTask_PrOp+0xa>
 8002408:	00000000 	.word	0x00000000
 800240c:	40000000 	.word	0x40000000
 8002410:	20000c50 	.word	0x20000c50
 8002414:	20000650 	.word	0x20000650
 8002418:	40240000 	.word	0x40240000
 800241c:	20000b70 	.word	0x20000b70
 8002420:	080135dc 	.word	0x080135dc
 8002424:	200004f4 	.word	0x200004f4
 8002428:	40200000 	.word	0x40200000
 800242c:	080135ec 	.word	0x080135ec
 8002430:	200006c0 	.word	0x200006c0
 8002434:	20000627 	.word	0x20000627

08002438 <vTask_Reinit>:

///////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Reinit( void * pvParameters ){
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2000      	movs	r0, #0
 800244e:	f003 fc7d 	bl	8005d4c <xTaskGenericNotifyWait>

		 // en este comando reiniciamos las variables del sistema para volver a empezar desde un nuevo punto de referencia
		int_Config_Motor(handler_Motor_Array,
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <vTask_Reinit+0x2c>)
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <vTask_Reinit+0x30>)
 8002458:	4a04      	ldr	r2, [pc, #16]	; (800246c <vTask_Reinit+0x34>)
 800245a:	4905      	ldr	r1, [pc, #20]	; (8002470 <vTask_Reinit+0x38>)
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <vTask_Reinit+0x3c>)
 800245e:	f001 f8e7 	bl	8003630 <int_Config_Motor>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002462:	e7ed      	b.n	8002440 <vTask_Reinit+0x8>
 8002464:	2000061c 	.word	0x2000061c
 8002468:	20000630 	.word	0x20000630
 800246c:	20000650 	.word	0x20000650
 8002470:	20000b70 	.word	0x20000b70
 8002474:	20000440 	.word	0x20000440

08002478 <vTask_Print>:

}



void vTask_Print( void * pvParameters ){
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <vTask_Print+0x28>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f107 010c 	add.w	r1, r7, #12
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fb5f 	bl	8004b50 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4619      	mov	r1, r3
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <vTask_Print+0x2c>)
 8002498:	f00a fed4 	bl	800d244 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 800249c:	e7f0      	b.n	8002480 <vTask_Print+0x8>
 800249e:	bf00      	nop
 80024a0:	2000026c 	.word	0x2000026c
 80024a4:	20000390 	.word	0x20000390

080024a8 <process_command>:
   }
}



void process_command (command_t *cmd){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f837 	bl	8002524 <extract_command>


	if (next_state == sMainMenu){
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <process_command+0x68>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <process_command+0x6c>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2303      	movs	r3, #3
 80024ca:	2100      	movs	r1, #0
 80024cc:	f003 fcbe 	bl	8005e4c <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 80024d0:	e019      	b.n	8002506 <process_command+0x5e>
	}else if (!wrong_command){
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <process_command+0x70>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <process_command+0x4c>
		end = SET;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <process_command+0x74>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <process_command+0x78>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	f003 fcad 	bl	8005e4c <xTaskGenericNotify>
}
 80024f2:	e008      	b.n	8002506 <process_command+0x5e>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <process_command+0x6c>)
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2303      	movs	r3, #3
 8002500:	2100      	movs	r1, #0
 8002502:	f003 fca3 	bl	8005e4c <xTaskGenericNotify>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000061f 	.word	0x2000061f
 8002514:	20000230 	.word	0x20000230
 8002518:	20000624 	.word	0x20000624
 800251c:	20000625 	.word	0x20000625
 8002520:	2000023c 	.word	0x2000023c

08002524 <extract_command>:


int extract_command (command_t *cmd){
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af04      	add	r7, sp, #16
 800252a:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <extract_command+0x15c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f002 fc7a 	bl	8004e2e <uxQueueMessagesWaiting>
 800253a:	4603      	mov	r3, r0
 800253c:	613b      	str	r3, [r7, #16]
	if (status == 0){
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <extract_command+0x26>
		return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	e095      	b.n	8002676 <extract_command+0x152>
	}

	if (wrong_command){
 800254a:	4b4e      	ldr	r3, [pc, #312]	; (8002684 <extract_command+0x160>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <extract_command+0x50>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2240      	movs	r2, #64	; 0x40
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f00b f9fd 	bl	800d960 <memset>
				xQueueReset(xQueue_InputData);
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <extract_command+0x15c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f002 f85d 	bl	800462c <xQueueGenericReset>
 8002572:	e07f      	b.n	8002674 <extract_command+0x150>
	}else{

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 8002574:	4b42      	ldr	r3, [pc, #264]	; (8002680 <extract_command+0x15c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f107 010f 	add.w	r1, r7, #15
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fae6 	bl	8004b50 <xQueueReceive>
 8002584:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <extract_command+0x76>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	75fa      	strb	r2, [r7, #23]
 8002592:	461a      	mov	r2, r3
 8002594:	7bf9      	ldrb	r1, [r7, #15]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '#');
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b23      	cmp	r3, #35	; 0x23
 800259e:	d1e9      	bne.n	8002574 <extract_command+0x50>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	2100      	movs	r1, #0
 80025a6:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//		sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 80025a8:	4b37      	ldr	r3, [pc, #220]	; (8002688 <extract_command+0x164>)
 80025aa:	9303      	str	r3, [sp, #12]
 80025ac:	4b37      	ldr	r3, [pc, #220]	; (800268c <extract_command+0x168>)
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <extract_command+0x16c>)
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	4b37      	ldr	r3, [pc, #220]	; (8002694 <extract_command+0x170>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <extract_command+0x174>)
 80025ba:	4a38      	ldr	r2, [pc, #224]	; (800269c <extract_command+0x178>)
 80025bc:	4938      	ldr	r1, [pc, #224]	; (80026a0 <extract_command+0x17c>)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f001 fb7e 	bl	8003cc0 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f00b f9c8 	bl	800d960 <memset>
		xQueueReset(xQueue_InputData);
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <extract_command+0x15c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 f828 	bl	800462c <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 80025dc:	4931      	ldr	r1, [pc, #196]	; (80026a4 <extract_command+0x180>)
 80025de:	4830      	ldr	r0, [pc, #192]	; (80026a0 <extract_command+0x17c>)
 80025e0:	f7fd fdfe 	bl	80001e0 <strcmp>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <extract_command+0xce>
			cmd->functionType = 1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
 80025f0:	e040      	b.n	8002674 <extract_command+0x150>
		}else if (strcmp(data, "sGoTo") == 0){
 80025f2:	492d      	ldr	r1, [pc, #180]	; (80026a8 <extract_command+0x184>)
 80025f4:	482a      	ldr	r0, [pc, #168]	; (80026a0 <extract_command+0x17c>)
 80025f6:	f7fd fdf3 	bl	80001e0 <strcmp>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <extract_command+0xe4>
			cmd->functionType = 2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
 8002606:	e035      	b.n	8002674 <extract_command+0x150>
		}else if (strcmp(data, "sRoll") == 0){
 8002608:	4928      	ldr	r1, [pc, #160]	; (80026ac <extract_command+0x188>)
 800260a:	4825      	ldr	r0, [pc, #148]	; (80026a0 <extract_command+0x17c>)
 800260c:	f7fd fde8 	bl	80001e0 <strcmp>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <extract_command+0xfa>
			cmd->functionType = 3;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
 800261c:	e02a      	b.n	8002674 <extract_command+0x150>
		}else if (strcmp(data, "sRollTo") == 0){
 800261e:	4924      	ldr	r1, [pc, #144]	; (80026b0 <extract_command+0x18c>)
 8002620:	481f      	ldr	r0, [pc, #124]	; (80026a0 <extract_command+0x17c>)
 8002622:	f7fd fddd 	bl	80001e0 <strcmp>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d103      	bne.n	8002634 <extract_command+0x110>
			cmd->functionType = 4;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2204      	movs	r2, #4
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
 8002632:	e01f      	b.n	8002674 <extract_command+0x150>
		}else if (strcmp(data, "reinit") == 0){
 8002634:	491f      	ldr	r1, [pc, #124]	; (80026b4 <extract_command+0x190>)
 8002636:	481a      	ldr	r0, [pc, #104]	; (80026a0 <extract_command+0x17c>)
 8002638:	f7fd fdd2 	bl	80001e0 <strcmp>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <extract_command+0x126>
			cmd->functionType = 5;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
 8002648:	e014      	b.n	8002674 <extract_command+0x150>
		}else if (strcmp(data, "sSquare") == 0){
 800264a:	491b      	ldr	r1, [pc, #108]	; (80026b8 <extract_command+0x194>)
 800264c:	4814      	ldr	r0, [pc, #80]	; (80026a0 <extract_command+0x17c>)
 800264e:	f7fd fdc7 	bl	80001e0 <strcmp>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <extract_command+0x13c>
			cmd->functionType = 6;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2206      	movs	r2, #6
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
 800265e:	e009      	b.n	8002674 <extract_command+0x150>
		}else if (strcmp(data, "sAstar") == 0){
 8002660:	4916      	ldr	r1, [pc, #88]	; (80026bc <extract_command+0x198>)
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <extract_command+0x17c>)
 8002664:	f7fd fdbc 	bl	80001e0 <strcmp>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <extract_command+0x150>
			cmd->functionType = 7;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2207      	movs	r2, #7
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
		}

	}
	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000270 	.word	0x20000270
 8002684:	20000624 	.word	0x20000624
 8002688:	20000564 	.word	0x20000564
 800268c:	20000560 	.word	0x20000560
 8002690:	2000055c 	.word	0x2000055c
 8002694:	20000550 	.word	0x20000550
 8002698:	20000544 	.word	0x20000544
 800269c:	20000538 	.word	0x20000538
 80026a0:	2000059c 	.word	0x2000059c
 80026a4:	080135fc 	.word	0x080135fc
 80026a8:	08013600 	.word	0x08013600
 80026ac:	08013608 	.word	0x08013608
 80026b0:	08013610 	.word	0x08013610
 80026b4:	08013618 	.word	0x08013618
 80026b8:	08013620 	.word	0x08013620
 80026bc:	08013628 	.word	0x08013628

080026c0 <callback_extInt1>:

//Interrupciones de Exti
void callback_extInt1(void){
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <callback_extInt1+0x24>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <callback_extInt1+0x28>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	791a      	ldrb	r2, [r3, #4]
 80026d2:	3201      	adds	r2, #1
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	711a      	strb	r2, [r3, #4]
	}
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2000061c 	.word	0x2000061c
 80026e8:	20000440 	.word	0x20000440

080026ec <callback_extInt3>:

void callback_extInt3(void){
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <callback_extInt3+0x24>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <callback_extInt3+0x28>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	791a      	ldrb	r2, [r3, #4]
 80026fe:	3201      	adds	r2, #1
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	711a      	strb	r2, [r3, #4]
	}
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000061c 	.word	0x2000061c
 8002714:	20000440 	.word	0x20000440

08002718 <usart2Rx_Callback>:



//Interripcion USART2
void usart2Rx_Callback(void){
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af02      	add	r7, sp, #8

	rxData = getRxData();
 800271e:	f00a fdb9 	bl	800d294 <getRxData>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <usart2Rx_Callback+0xcc>)
 8002728:	701a      	strb	r2, [r3, #0]
	writeChar(&handlerUSART, rxData);
 800272a:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <usart2Rx_Callback+0xcc>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	482d      	ldr	r0, [pc, #180]	; (80027e8 <usart2Rx_Callback+0xd0>)
 8002732:	f00a fd6f 	bl	800d214 <writeChar>

	if (rxData == '\r'){
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <usart2Rx_Callback+0xcc>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b0d      	cmp	r3, #13
 800273c:	d102      	bne.n	8002744 <usart2Rx_Callback+0x2c>
		wrong_command = SET;
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <usart2Rx_Callback+0xd4>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <usart2Rx_Callback+0xd8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fc9c 	bl	800508a <xQueueIsQueueFullFromISR>
 8002752:	4603      	mov	r3, r0
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <usart2Rx_Callback+0xdc>)
 8002756:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <usart2Rx_Callback+0xdc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d007      	beq.n	8002770 <usart2Rx_Callback+0x58>

		xQueueSendToBackFromISR(xQueue_InputData,
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <usart2Rx_Callback+0xd8>)
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2200      	movs	r2, #0
 8002768:	491e      	ldr	r1, [pc, #120]	; (80027e4 <usart2Rx_Callback+0xcc>)
 800276a:	f002 f947 	bl	80049fc <xQueueGenericSendFromISR>
 800276e:	e011      	b.n	8002794 <usart2Rx_Callback+0x7c>
								NULL);

	}else{


		if (rxData == '#'){
 8002770:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <usart2Rx_Callback+0xcc>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b23      	cmp	r3, #35	; 0x23
 8002776:	d10d      	bne.n	8002794 <usart2Rx_Callback+0x7c>

			xQueueReceiveFromISR(xQueue_InputData,
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <usart2Rx_Callback+0xd8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	4919      	ldr	r1, [pc, #100]	; (80027e4 <usart2Rx_Callback+0xcc>)
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fac5 	bl	8004d10 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <usart2Rx_Callback+0xd8>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	2300      	movs	r3, #0
 800278c:	2200      	movs	r2, #0
 800278e:	4915      	ldr	r1, [pc, #84]	; (80027e4 <usart2Rx_Callback+0xcc>)
 8002790:	f002 f934 	bl	80049fc <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (flag_Astar){
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <usart2Rx_Callback+0xe0>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <usart2Rx_Callback+0xac>
		if (rxData == '#' || rxData == '\r'){
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <usart2Rx_Callback+0xcc>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b23      	cmp	r3, #35	; 0x23
 80027a2:	d003      	beq.n	80027ac <usart2Rx_Callback+0x94>
 80027a4:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <usart2Rx_Callback+0xcc>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b0d      	cmp	r3, #13
 80027aa:	d116      	bne.n	80027da <usart2Rx_Callback+0xc2>
			// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
			xTaskNotifyFromISR(xHandleTask_Commands,
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <usart2Rx_Callback+0xe4>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	2300      	movs	r3, #0
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	f003 fc25 	bl	800600c <xTaskGenericNotifyFromISR>
		xTaskNotifyFromISR(xHandleTask_Grid,
						   0,
						   eNoAction,
						   NULL);
	}
}
 80027c2:	e00a      	b.n	80027da <usart2Rx_Callback+0xc2>
		xTaskNotifyFromISR(xHandleTask_Grid,
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <usart2Rx_Callback+0xe8>)
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2300      	movs	r3, #0
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	f003 fc19 	bl	800600c <xTaskGenericNotifyFromISR>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000535 	.word	0x20000535
 80027e8:	20000390 	.word	0x20000390
 80027ec:	20000624 	.word	0x20000624
 80027f0:	20000270 	.word	0x20000270
 80027f4:	2000022c 	.word	0x2000022c
 80027f8:	20000626 	.word	0x20000626
 80027fc:	20000238 	.word	0x20000238
 8002800:	20000260 	.word	0x20000260

08002804 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <BasicTimer2_Callback+0x4c>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <BasicTimer2_Callback+0x50>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <BasicTimer2_Callback+0x54>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d803      	bhi.n	8002826 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <BasicTimer2_Callback+0x58>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e005      	b.n	8002832 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <BasicTimer2_Callback+0x54>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <BasicTimer2_Callback+0x54>)
 8002830:	801a      	strh	r2, [r3, #0]

	// Solo cuando estemos en alguna operacion diferente a None, se despierta la tarea de control
	xTaskNotifyFromISR(xHandleTask_Control,
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <BasicTimer2_Callback+0x5c>)
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	2300      	movs	r3, #0
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	f003 fbe2 	bl	800600c <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000620 	.word	0x20000620
 8002854:	2000002c 	.word	0x2000002c
 8002858:	2000062a 	.word	0x2000062a
 800285c:	20000621 	.word	0x20000621
 8002860:	20000244 	.word	0x20000244

08002864 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8002870:	23c8      	movs	r3, #200	; 0xc8
 8002872:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	617b      	str	r3, [r7, #20]

	switch (axis) {
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d061      	beq.n	8002954 <calibracionGyros+0xf0>
 8002890:	2b02      	cmp	r3, #2
 8002892:	dc70      	bgt.n	8002976 <calibracionGyros+0x112>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d015      	beq.n	80028c4 <calibracionGyros+0x60>
 8002898:	2b01      	cmp	r3, #1
 800289a:	d037      	beq.n	800290c <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 800289c:	e06b      	b.n	8002976 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f008 fb42 	bl	800af28 <readGyro_X>
 80028a4:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80028a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b4:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80028b8:	7efb      	ldrb	r3, [r7, #27]
 80028ba:	3301      	adds	r3, #1
 80028bc:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 80028be:	2001      	movs	r0, #1
 80028c0:	f006 fbfc 	bl	80090bc <delay_ms>
			while (contador < numMedidas){
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	8a7a      	ldrh	r2, [r7, #18]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d8e7      	bhi.n	800289e <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 80028ce:	8a7b      	ldrh	r3, [r7, #18]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80028e4:	e048      	b.n	8002978 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f008 fba6 	bl	800b038 <readGyro_Y>
 80028ec:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80028f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fc:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002900:	7efb      	ldrb	r3, [r7, #27]
 8002902:	3301      	adds	r3, #1
 8002904:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002906:	2001      	movs	r0, #1
 8002908:	f006 fbd8 	bl	80090bc <delay_ms>
			while (contador < numMedidas){
 800290c:	7efb      	ldrb	r3, [r7, #27]
 800290e:	b29b      	uxth	r3, r3
 8002910:	8a7a      	ldrh	r2, [r7, #18]
 8002912:	429a      	cmp	r2, r3
 8002914:	d8e7      	bhi.n	80028e6 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8002916:	8a7b      	ldrh	r3, [r7, #18]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002920:	edd7 6a07 	vldr	s13, [r7, #28]
 8002924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002928:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 800292c:	e024      	b.n	8002978 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f008 fc0a 	bl	800b148 <readGyro_Z>
 8002934:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002938:	ed97 7a07 	vldr	s14, [r7, #28]
 800293c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002948:	7efb      	ldrb	r3, [r7, #27]
 800294a:	3301      	adds	r3, #1
 800294c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800294e:	2001      	movs	r0, #1
 8002950:	f006 fbb4 	bl	80090bc <delay_ms>
			while (contador < numMedidas){
 8002954:	7efb      	ldrb	r3, [r7, #27]
 8002956:	b29b      	uxth	r3, r3
 8002958:	8a7a      	ldrh	r2, [r7, #18]
 800295a:	429a      	cmp	r2, r3
 800295c:	d8e7      	bhi.n	800292e <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 800295e:	8a7b      	ldrh	r3, [r7, #18]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002968:	edd7 6a07 	vldr	s13, [r7, #28]
 800296c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002970:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002974:	e000      	b.n	8002978 <calibracionGyros+0x114>
			break;
 8002976:	bf00      	nop
		}
	}


	return promedio;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	ee07 3a90 	vmov	s15, r3
}
 800297e:	eeb0 0a67 	vmov.f32	s0, s15
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6178      	str	r0, [r7, #20]
 8002990:	ed87 0a04 	vstr	s0, [r7, #16]
 8002994:	ed87 1b02 	vstr	d1, [r7, #8]
 8002998:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f008 fbd4 	bl	800b148 <readGyro_Z>
 80029a0:	ee10 3a10 	vmov	r3, s0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fde7 	bl	8000578 <__aeabi_f2d>
 80029aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ae:	f7fd fc83 	bl	80002b8 <__aeabi_dsub>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f92d 	bl	8000c18 <__aeabi_d2f>
 80029be:	4603      	mov	r3, r0
 80029c0:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 80029c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80029c6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80029ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ce:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002a34 <getAngle+0xac>
 80029d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 80029e2:	69b8      	ldr	r0, [r7, #24]
 80029e4:	f7fd fdc8 	bl	8000578 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <getAngle+0xb0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fdbe 	bl	8000578 <__aeabi_f2d>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fc5b 	bl	80002bc <__adddf3>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f7fe f903 	bl	8000c18 <__aeabi_d2f>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <getAngle+0xb0>)
 8002a16:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <getAngle+0xb4>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <getAngle+0xb8>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <getAngle+0xb8>)
 8002a28:	801a      	strh	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	447a0000 	.word	0x447a0000
 8002a38:	20000c20 	.word	0x20000c20
 8002a3c:	20000324 	.word	0x20000324
 8002a40:	20000628 	.word	0x20000628
 8002a44:	00000000 	.word	0x00000000

08002a48 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	ed2d 8b02 	vpush	{d8}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8002a58:	793b      	ldrb	r3, [r7, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	f040 81d4 	bne.w	8002e08 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8002a60:	4bab      	ldr	r3, [pc, #684]	; (8002d10 <get_measuremets_parameters+0x2c8>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4bab      	ldr	r3, [pc, #684]	; (8002d14 <get_measuremets_parameters+0x2cc>)
 8002a68:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8002a6a:	4bab      	ldr	r3, [pc, #684]	; (8002d18 <get_measuremets_parameters+0x2d0>)
 8002a6c:	edd3 6a00 	vldr	s13, [r3]
 8002a70:	4baa      	ldr	r3, [pc, #680]	; (8002d1c <get_measuremets_parameters+0x2d4>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a80:	4ba7      	ldr	r3, [pc, #668]	; (8002d20 <get_measuremets_parameters+0x2d8>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002a86:	4ba6      	ldr	r3, [pc, #664]	; (8002d20 <get_measuremets_parameters+0x2d8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd74 	bl	8000578 <__aeabi_f2d>
 8002a90:	a39b      	add	r3, pc, #620	; (adr r3, 8002d00 <get_measuremets_parameters+0x2b8>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fd fdc7 	bl	8000628 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	4b9f      	ldr	r3, [pc, #636]	; (8002d24 <get_measuremets_parameters+0x2dc>)
 8002aa8:	f7fd fee8 	bl	800087c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002ab6:	4b98      	ldr	r3, [pc, #608]	; (8002d18 <get_measuremets_parameters+0x2d0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd5c 	bl	8000578 <__aeabi_f2d>
 8002ac0:	a38f      	add	r3, pc, #572	; (adr r3, 8002d00 <get_measuremets_parameters+0x2b8>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f7fd fdaf 	bl	8000628 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b93      	ldr	r3, [pc, #588]	; (8002d24 <get_measuremets_parameters+0x2dc>)
 8002ad8:	f7fd fed0 	bl	800087c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	ec43 2b17 	vmov	d7, r2, r3
 8002ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae8:	eef0 0a67 	vmov.f32	s1, s15
 8002aec:	f00d feac 	bl	8010848 <sin>
 8002af0:	eeb0 8a40 	vmov.f32	s16, s0
 8002af4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002af8:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <get_measuremets_parameters+0x2d0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd3b 	bl	8000578 <__aeabi_f2d>
 8002b02:	a37f      	add	r3, pc, #508	; (adr r3, 8002d00 <get_measuremets_parameters+0x2b8>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd8e 	bl	8000628 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <get_measuremets_parameters+0x2dc>)
 8002b1a:	f7fd feaf 	bl	800087c <__aeabi_ddiv>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	ec43 2b17 	vmov	d7, r2, r3
 8002b26:	eeb0 0a47 	vmov.f32	s0, s14
 8002b2a:	eef0 0a67 	vmov.f32	s1, s15
 8002b2e:	f00d fdef 	bl	8010710 <cos>
 8002b32:	eeb0 7a40 	vmov.f32	s14, s0
 8002b36:	eef0 7a60 	vmov.f32	s15, s1
 8002b3a:	eeb0 1a47 	vmov.f32	s2, s14
 8002b3e:	eef0 1a67 	vmov.f32	s3, s15
 8002b42:	eeb0 0a48 	vmov.f32	s0, s16
 8002b46:	eef0 0a68 	vmov.f32	s1, s17
 8002b4a:	f00d ff09 	bl	8010960 <atan2>
 8002b4e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002b52:	a36d      	add	r3, pc, #436	; (adr r3, 8002d08 <get_measuremets_parameters+0x2c0>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fd66 	bl	8000628 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b6a:	f7fd fba7 	bl	80002bc <__adddf3>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b7e:	a360      	add	r3, pc, #384	; (adr r3, 8002d00 <get_measuremets_parameters+0x2b8>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fd50 	bl	8000628 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <get_measuremets_parameters+0x2dc>)
 8002b96:	f7fd fe71 	bl	800087c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	ec43 2b17 	vmov	d7, r2, r3
 8002ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba6:	eef0 0a67 	vmov.f32	s1, s15
 8002baa:	f00d fe4d 	bl	8010848 <sin>
 8002bae:	eeb0 8a40 	vmov.f32	s16, s0
 8002bb2:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002bbc:	a350      	add	r3, pc, #320	; (adr r3, 8002d00 <get_measuremets_parameters+0x2b8>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fd31 	bl	8000628 <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <get_measuremets_parameters+0x2dc>)
 8002bd4:	f7fd fe52 	bl	800087c <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	ec43 2b17 	vmov	d7, r2, r3
 8002be0:	eeb0 0a47 	vmov.f32	s0, s14
 8002be4:	eef0 0a67 	vmov.f32	s1, s15
 8002be8:	f00d fd92 	bl	8010710 <cos>
 8002bec:	eeb0 7a40 	vmov.f32	s14, s0
 8002bf0:	eef0 7a60 	vmov.f32	s15, s1
 8002bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8002bf8:	eef0 1a67 	vmov.f32	s3, s15
 8002bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8002c00:	eef0 0a68 	vmov.f32	s1, s17
 8002c04:	f00d feac 	bl	8010960 <atan2>
 8002c08:	eeb0 7a40 	vmov.f32	s14, s0
 8002c0c:	eef0 7a60 	vmov.f32	s15, s1
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	ed93 7b02 	vldr	d7, [r3, #8]
 8002c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	f00d fe10 	bl	8010848 <sin>
 8002c28:	eeb0 8a40 	vmov.f32	s16, s0
 8002c2c:	eef0 8a60 	vmov.f32	s17, s1
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	ed93 7b02 	vldr	d7, [r3, #8]
 8002c36:	eeb0 0a47 	vmov.f32	s0, s14
 8002c3a:	eef0 0a67 	vmov.f32	s1, s15
 8002c3e:	f00d fd67 	bl	8010710 <cos>
 8002c42:	eeb0 7a40 	vmov.f32	s14, s0
 8002c46:	eef0 7a60 	vmov.f32	s15, s1
 8002c4a:	eeb0 1a47 	vmov.f32	s2, s14
 8002c4e:	eef0 1a67 	vmov.f32	s3, s15
 8002c52:	eeb0 0a48 	vmov.f32	s0, s16
 8002c56:	eef0 0a68 	vmov.f32	s1, s17
 8002c5a:	f00d fe81 	bl	8010960 <atan2>
 8002c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c62:	eef0 7a60 	vmov.f32	s15, s1
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8002c6c:	797b      	ldrb	r3, [r7, #5]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d15e      	bne.n	8002d30 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <get_measuremets_parameters+0x2e0>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3304      	adds	r3, #4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	791b      	ldrb	r3, [r3, #4]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <get_measuremets_parameters+0x2e4>)
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3304      	adds	r3, #4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb2:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	edd3 6a03 	vldr	s13, [r3, #12]
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <get_measuremets_parameters+0x2cc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd2:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <get_measuremets_parameters+0x2cc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf6:	edc3 7a02 	vstr	s15, [r3, #8]
 8002cfa:	e065      	b.n	8002dc8 <get_measuremets_parameters+0x380>
 8002cfc:	f3af 8000 	nop.w
 8002d00:	54442d18 	.word	0x54442d18
 8002d04:	400921fb 	.word	0x400921fb
 8002d08:	1a63c1f8 	.word	0x1a63c1f8
 8002d0c:	404ca5dc 	.word	0x404ca5dc
 8002d10:	20000628 	.word	0x20000628
 8002d14:	2000062c 	.word	0x2000062c
 8002d18:	20000c20 	.word	0x20000c20
 8002d1c:	2000062a 	.word	0x2000062a
 8002d20:	20000c24 	.word	0x20000c24
 8002d24:	40668000 	.word	0x40668000
 8002d28:	20000030 	.word	0x20000030
 8002d2c:	20000034 	.word	0x20000034

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	791b      	ldrb	r3, [r3, #4]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <get_measuremets_parameters+0x3a8>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	eef1 7a67 	vneg.f32	s15, s15
 8002d50:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3304      	adds	r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <get_measuremets_parameters+0x3ac>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3304      	adds	r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	eef1 7a67 	vneg.f32	s15, s15
 8002d78:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d84:	eef1 6a67 	vneg.f32	s13, s15
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <get_measuremets_parameters+0x3b0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d9c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3304      	adds	r3, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002daa:	eef1 6a67 	vneg.f32	s13, s15
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <get_measuremets_parameters+0x3b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc4:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <get_measuremets_parameters+0x3b4>)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <get_measuremets_parameters+0x3b8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <get_measuremets_parameters+0x3bc>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	801a      	strh	r2, [r3, #0]
		time_accumulated = 0;

		//Reiniciamos el contador de acción
		counting_action  = 0;}

}
 8002dee:	e2f0      	b.n	80033d2 <get_measuremets_parameters+0x98a>
 8002df0:	20000030 	.word	0x20000030
 8002df4:	20000034 	.word	0x20000034
 8002df8:	2000062c 	.word	0x2000062c
 8002dfc:	20000c20 	.word	0x20000c20
 8002e00:	20000628 	.word	0x20000628
 8002e04:	2000062a 	.word	0x2000062a
	else if(operation_mode_dir.Mode == Roll)
 8002e08:	793b      	ldrb	r3, [r7, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 81c8 	bne.w	80031a0 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8002e10:	4bad      	ldr	r3, [pc, #692]	; (80030c8 <get_measuremets_parameters+0x680>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4bad      	ldr	r3, [pc, #692]	; (80030cc <get_measuremets_parameters+0x684>)
 8002e18:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8002e1a:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <get_measuremets_parameters+0x688>)
 8002e1c:	edd3 6a00 	vldr	s13, [r3]
 8002e20:	4bac      	ldr	r3, [pc, #688]	; (80030d4 <get_measuremets_parameters+0x68c>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e30:	4ba9      	ldr	r3, [pc, #676]	; (80030d8 <get_measuremets_parameters+0x690>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002e36:	4ba8      	ldr	r3, [pc, #672]	; (80030d8 <get_measuremets_parameters+0x690>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb9c 	bl	8000578 <__aeabi_f2d>
 8002e40:	a39d      	add	r3, pc, #628	; (adr r3, 80030b8 <get_measuremets_parameters+0x670>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f7fd fbef 	bl	8000628 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	4ba1      	ldr	r3, [pc, #644]	; (80030dc <get_measuremets_parameters+0x694>)
 8002e58:	f7fd fd10 	bl	800087c <__aeabi_ddiv>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002e66:	4b9a      	ldr	r3, [pc, #616]	; (80030d0 <get_measuremets_parameters+0x688>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb84 	bl	8000578 <__aeabi_f2d>
 8002e70:	a391      	add	r3, pc, #580	; (adr r3, 80030b8 <get_measuremets_parameters+0x670>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fbd7 	bl	8000628 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	4b95      	ldr	r3, [pc, #596]	; (80030dc <get_measuremets_parameters+0x694>)
 8002e88:	f7fd fcf8 	bl	800087c <__aeabi_ddiv>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	ec43 2b17 	vmov	d7, r2, r3
 8002e94:	eeb0 0a47 	vmov.f32	s0, s14
 8002e98:	eef0 0a67 	vmov.f32	s1, s15
 8002e9c:	f00d fcd4 	bl	8010848 <sin>
 8002ea0:	eeb0 8a40 	vmov.f32	s16, s0
 8002ea4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002ea8:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <get_measuremets_parameters+0x688>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb63 	bl	8000578 <__aeabi_f2d>
 8002eb2:	a381      	add	r3, pc, #516	; (adr r3, 80030b8 <get_measuremets_parameters+0x670>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd fbb6 	bl	8000628 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	4b84      	ldr	r3, [pc, #528]	; (80030dc <get_measuremets_parameters+0x694>)
 8002eca:	f7fd fcd7 	bl	800087c <__aeabi_ddiv>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	ec43 2b17 	vmov	d7, r2, r3
 8002ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eda:	eef0 0a67 	vmov.f32	s1, s15
 8002ede:	f00d fc17 	bl	8010710 <cos>
 8002ee2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee6:	eef0 7a60 	vmov.f32	s15, s1
 8002eea:	eeb0 1a47 	vmov.f32	s2, s14
 8002eee:	eef0 1a67 	vmov.f32	s3, s15
 8002ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ef6:	eef0 0a68 	vmov.f32	s1, s17
 8002efa:	f00d fd31 	bl	8010960 <atan2>
 8002efe:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002f02:	a36f      	add	r3, pc, #444	; (adr r3, 80030c0 <get_measuremets_parameters+0x678>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fb8e 	bl	8000628 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f1a:	f7fd f9cf 	bl	80002bc <__adddf3>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f2e:	a362      	add	r3, pc, #392	; (adr r3, 80030b8 <get_measuremets_parameters+0x670>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd fb78 	bl	8000628 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	4b65      	ldr	r3, [pc, #404]	; (80030dc <get_measuremets_parameters+0x694>)
 8002f46:	f7fd fc99 	bl	800087c <__aeabi_ddiv>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	ec43 2b17 	vmov	d7, r2, r3
 8002f52:	eeb0 0a47 	vmov.f32	s0, s14
 8002f56:	eef0 0a67 	vmov.f32	s1, s15
 8002f5a:	f00d fc75 	bl	8010848 <sin>
 8002f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8002f62:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f6c:	a352      	add	r3, pc, #328	; (adr r3, 80030b8 <get_measuremets_parameters+0x670>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fb59 	bl	8000628 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	4b56      	ldr	r3, [pc, #344]	; (80030dc <get_measuremets_parameters+0x694>)
 8002f84:	f7fd fc7a 	bl	800087c <__aeabi_ddiv>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	ec43 2b17 	vmov	d7, r2, r3
 8002f90:	eeb0 0a47 	vmov.f32	s0, s14
 8002f94:	eef0 0a67 	vmov.f32	s1, s15
 8002f98:	f00d fbba 	bl	8010710 <cos>
 8002f9c:	eeb0 7a40 	vmov.f32	s14, s0
 8002fa0:	eef0 7a60 	vmov.f32	s15, s1
 8002fa4:	eeb0 1a47 	vmov.f32	s2, s14
 8002fa8:	eef0 1a67 	vmov.f32	s3, s15
 8002fac:	eeb0 0a48 	vmov.f32	s0, s16
 8002fb0:	eef0 0a68 	vmov.f32	s1, s17
 8002fb4:	f00d fcd4 	bl	8010960 <atan2>
 8002fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fbc:	eef0 7a60 	vmov.f32	s15, s1
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	ed93 7b02 	vldr	d7, [r3, #8]
 8002fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd0:	eef0 0a67 	vmov.f32	s1, s15
 8002fd4:	f00d fc38 	bl	8010848 <sin>
 8002fd8:	eeb0 8a40 	vmov.f32	s16, s0
 8002fdc:	eef0 8a60 	vmov.f32	s17, s1
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	ed93 7b02 	vldr	d7, [r3, #8]
 8002fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fea:	eef0 0a67 	vmov.f32	s1, s15
 8002fee:	f00d fb8f 	bl	8010710 <cos>
 8002ff2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff6:	eef0 7a60 	vmov.f32	s15, s1
 8002ffa:	eeb0 1a47 	vmov.f32	s2, s14
 8002ffe:	eef0 1a67 	vmov.f32	s3, s15
 8003002:	eeb0 0a48 	vmov.f32	s0, s16
 8003006:	eef0 0a68 	vmov.f32	s1, s17
 800300a:	f00d fca9 	bl	8010960 <atan2>
 800300e:	eeb0 7a40 	vmov.f32	s14, s0
 8003012:	eef0 7a60 	vmov.f32	s15, s1
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 800301c:	797b      	ldrb	r3, [r7, #5]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d162      	bne.n	80030e8 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	791b      	ldrb	r3, [r3, #4]
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003030:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <get_measuremets_parameters+0x698>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3304      	adds	r3, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	791b      	ldrb	r3, [r3, #4]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <get_measuremets_parameters+0x69c>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3304      	adds	r3, #4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	eef1 7a67 	vneg.f32	s15, s15
 8003066:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <get_measuremets_parameters+0x684>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003086:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	edd3 7a03 	vldr	s15, [r3, #12]
 8003094:	eef1 6a67 	vneg.f32	s13, s15
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <get_measuremets_parameters+0x684>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3304      	adds	r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ae:	edc3 7a02 	vstr	s15, [r3, #8]
 80030b2:	e061      	b.n	8003178 <get_measuremets_parameters+0x730>
 80030b4:	f3af 8000 	nop.w
 80030b8:	54442d18 	.word	0x54442d18
 80030bc:	400921fb 	.word	0x400921fb
 80030c0:	1a63c1f8 	.word	0x1a63c1f8
 80030c4:	404ca5dc 	.word	0x404ca5dc
 80030c8:	20000628 	.word	0x20000628
 80030cc:	2000062c 	.word	0x2000062c
 80030d0:	20000c20 	.word	0x20000c20
 80030d4:	2000062a 	.word	0x2000062a
 80030d8:	20000c24 	.word	0x20000c24
 80030dc:	40668000 	.word	0x40668000
 80030e0:	20000030 	.word	0x20000030
 80030e4:	20000034 	.word	0x20000034
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	791b      	ldrb	r3, [r3, #4]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f6:	4bbe      	ldr	r3, [pc, #760]	; (80033f0 <get_measuremets_parameters+0x9a8>)
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	eef1 7a67 	vneg.f32	s15, s15
 8003108:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3304      	adds	r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311c:	4bb5      	ldr	r3, [pc, #724]	; (80033f4 <get_measuremets_parameters+0x9ac>)
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3304      	adds	r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	edd3 7a03 	vldr	s15, [r3, #12]
 8003138:	eef1 6a67 	vneg.f32	s13, s15
 800313c:	4bae      	ldr	r3, [pc, #696]	; (80033f8 <get_measuremets_parameters+0x9b0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003150:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3304      	adds	r3, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	edd3 6a03 	vldr	s13, [r3, #12]
 800315e:	4ba6      	ldr	r3, [pc, #664]	; (80033f8 <get_measuremets_parameters+0x9b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3304      	adds	r3, #4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003174:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2200      	movs	r2, #0
 800317e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3304      	adds	r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800318a:	4b9c      	ldr	r3, [pc, #624]	; (80033fc <get_measuremets_parameters+0x9b4>)
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8003192:	4b9b      	ldr	r3, [pc, #620]	; (8003400 <get_measuremets_parameters+0x9b8>)
 8003194:	2200      	movs	r2, #0
 8003196:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8003198:	4b9a      	ldr	r3, [pc, #616]	; (8003404 <get_measuremets_parameters+0x9bc>)
 800319a:	2200      	movs	r2, #0
 800319c:	801a      	strh	r2, [r3, #0]
}
 800319e:	e118      	b.n	80033d2 <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 80031a0:	4b97      	ldr	r3, [pc, #604]	; (8003400 <get_measuremets_parameters+0x9b8>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <get_measuremets_parameters+0x9b0>)
 80031a8:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 80031aa:	4b94      	ldr	r3, [pc, #592]	; (80033fc <get_measuremets_parameters+0x9b4>)
 80031ac:	edd3 6a00 	vldr	s13, [r3]
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <get_measuremets_parameters+0x9bc>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	ee07 3a90 	vmov	s15, r3
 80031b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c0:	4b91      	ldr	r3, [pc, #580]	; (8003408 <get_measuremets_parameters+0x9c0>)
 80031c2:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80031c6:	4b90      	ldr	r3, [pc, #576]	; (8003408 <get_measuremets_parameters+0x9c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9d4 	bl	8000578 <__aeabi_f2d>
 80031d0:	a383      	add	r3, pc, #524	; (adr r3, 80033e0 <get_measuremets_parameters+0x998>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd fa27 	bl	8000628 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	4b89      	ldr	r3, [pc, #548]	; (800340c <get_measuremets_parameters+0x9c4>)
 80031e8:	f7fd fb48 	bl	800087c <__aeabi_ddiv>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80031f6:	4b81      	ldr	r3, [pc, #516]	; (80033fc <get_measuremets_parameters+0x9b4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9bc 	bl	8000578 <__aeabi_f2d>
 8003200:	a377      	add	r3, pc, #476	; (adr r3, 80033e0 <get_measuremets_parameters+0x998>)
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f7fd fa0f 	bl	8000628 <__aeabi_dmul>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	4b7d      	ldr	r3, [pc, #500]	; (800340c <get_measuremets_parameters+0x9c4>)
 8003218:	f7fd fb30 	bl	800087c <__aeabi_ddiv>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	ec43 2b17 	vmov	d7, r2, r3
 8003224:	eeb0 0a47 	vmov.f32	s0, s14
 8003228:	eef0 0a67 	vmov.f32	s1, s15
 800322c:	f00d fb0c 	bl	8010848 <sin>
 8003230:	eeb0 8a40 	vmov.f32	s16, s0
 8003234:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003238:	4b70      	ldr	r3, [pc, #448]	; (80033fc <get_measuremets_parameters+0x9b4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f99b 	bl	8000578 <__aeabi_f2d>
 8003242:	a367      	add	r3, pc, #412	; (adr r3, 80033e0 <get_measuremets_parameters+0x998>)
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f7fd f9ee 	bl	8000628 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	4b6c      	ldr	r3, [pc, #432]	; (800340c <get_measuremets_parameters+0x9c4>)
 800325a:	f7fd fb0f 	bl	800087c <__aeabi_ddiv>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	ec43 2b17 	vmov	d7, r2, r3
 8003266:	eeb0 0a47 	vmov.f32	s0, s14
 800326a:	eef0 0a67 	vmov.f32	s1, s15
 800326e:	f00d fa4f 	bl	8010710 <cos>
 8003272:	eeb0 7a40 	vmov.f32	s14, s0
 8003276:	eef0 7a60 	vmov.f32	s15, s1
 800327a:	eeb0 1a47 	vmov.f32	s2, s14
 800327e:	eef0 1a67 	vmov.f32	s3, s15
 8003282:	eeb0 0a48 	vmov.f32	s0, s16
 8003286:	eef0 0a68 	vmov.f32	s1, s17
 800328a:	f00d fb69 	bl	8010960 <atan2>
 800328e:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003292:	a355      	add	r3, pc, #340	; (adr r3, 80033e8 <get_measuremets_parameters+0x9a0>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f7fd f9c6 	bl	8000628 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4610      	mov	r0, r2
 80032a2:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032aa:	f7fd f807 	bl	80002bc <__adddf3>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80032be:	a348      	add	r3, pc, #288	; (adr r3, 80033e0 <get_measuremets_parameters+0x998>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f9b0 	bl	8000628 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b4d      	ldr	r3, [pc, #308]	; (800340c <get_measuremets_parameters+0x9c4>)
 80032d6:	f7fd fad1 	bl	800087c <__aeabi_ddiv>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	ec43 2b17 	vmov	d7, r2, r3
 80032e2:	eeb0 0a47 	vmov.f32	s0, s14
 80032e6:	eef0 0a67 	vmov.f32	s1, s15
 80032ea:	f00d faad 	bl	8010848 <sin>
 80032ee:	eeb0 8a40 	vmov.f32	s16, s0
 80032f2:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80032fc:	a338      	add	r3, pc, #224	; (adr r3, 80033e0 <get_measuremets_parameters+0x998>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f7fd f991 	bl	8000628 <__aeabi_dmul>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <get_measuremets_parameters+0x9c4>)
 8003314:	f7fd fab2 	bl	800087c <__aeabi_ddiv>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	ec43 2b17 	vmov	d7, r2, r3
 8003320:	eeb0 0a47 	vmov.f32	s0, s14
 8003324:	eef0 0a67 	vmov.f32	s1, s15
 8003328:	f00d f9f2 	bl	8010710 <cos>
 800332c:	eeb0 7a40 	vmov.f32	s14, s0
 8003330:	eef0 7a60 	vmov.f32	s15, s1
 8003334:	eeb0 1a47 	vmov.f32	s2, s14
 8003338:	eef0 1a67 	vmov.f32	s3, s15
 800333c:	eeb0 0a48 	vmov.f32	s0, s16
 8003340:	eef0 0a68 	vmov.f32	s1, s17
 8003344:	f00d fb0c 	bl	8010960 <atan2>
 8003348:	eeb0 7a40 	vmov.f32	s14, s0
 800334c:	eef0 7a60 	vmov.f32	s15, s1
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	ed93 7b02 	vldr	d7, [r3, #8]
 800335c:	eeb0 0a47 	vmov.f32	s0, s14
 8003360:	eef0 0a67 	vmov.f32	s1, s15
 8003364:	f00d fa70 	bl	8010848 <sin>
 8003368:	eeb0 8a40 	vmov.f32	s16, s0
 800336c:	eef0 8a60 	vmov.f32	s17, s1
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	ed93 7b02 	vldr	d7, [r3, #8]
 8003376:	eeb0 0a47 	vmov.f32	s0, s14
 800337a:	eef0 0a67 	vmov.f32	s1, s15
 800337e:	f00d f9c7 	bl	8010710 <cos>
 8003382:	eeb0 7a40 	vmov.f32	s14, s0
 8003386:	eef0 7a60 	vmov.f32	s15, s1
 800338a:	eeb0 1a47 	vmov.f32	s2, s14
 800338e:	eef0 1a67 	vmov.f32	s3, s15
 8003392:	eeb0 0a48 	vmov.f32	s0, s16
 8003396:	eef0 0a68 	vmov.f32	s1, s17
 800339a:	f00d fae1 	bl	8010960 <atan2>
 800339e:	eeb0 7a40 	vmov.f32	s14, s0
 80033a2:	eef0 7a60 	vmov.f32	s15, s1
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2200      	movs	r2, #0
 80033b2:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3304      	adds	r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <get_measuremets_parameters+0x9b4>)
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <get_measuremets_parameters+0x9b8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;}
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <get_measuremets_parameters+0x9bc>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	801a      	strh	r2, [r3, #0]
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	ecbd 8b02 	vpop	{d8}
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	54442d18 	.word	0x54442d18
 80033e4:	400921fb 	.word	0x400921fb
 80033e8:	1a63c1f8 	.word	0x1a63c1f8
 80033ec:	404ca5dc 	.word	0x404ca5dc
 80033f0:	20000030 	.word	0x20000030
 80033f4:	20000034 	.word	0x20000034
 80033f8:	2000062c 	.word	0x2000062c
 80033fc:	20000c20 	.word	0x20000c20
 8003400:	20000628 	.word	0x20000628
 8003404:	2000062a 	.word	0x2000062a
 8003408:	20000c24 	.word	0x20000c24
 800340c:	40668000 	.word	0x40668000

08003410 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 800341a:	783b      	ldrb	r3, [r7, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d120      	bne.n	8003462 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f844 	bl	80034b0 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	4618      	mov	r0, r3
 8003430:	f008 fb9e 	bl	800bb70 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f007 fb86 	bl	800ab4e <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	4618      	mov	r0, r3
 800344c:	f008 fb90 	bl	800bb70 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2101      	movs	r1, #1
 800345a:	4618      	mov	r0, r3
 800345c:	f007 fb77 	bl	800ab4e <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8003460:	e022      	b.n	80034a8 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 8003462:	783b      	ldrb	r3, [r7, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d11f      	bne.n	80034a8 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f820 	bl	80034b0 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	4618      	mov	r0, r3
 8003478:	f008 fb7a 	bl	800bb70 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f007 fb62 	bl	800ab4e <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	4618      	mov	r0, r3
 8003494:	f008 fb6c 	bl	800bb70 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f007 fb53 	bl	800ab4e <GPIO_WritePin_Afopt>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 80034ba:	783b      	ldrb	r3, [r7, #0]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d143      	bne.n	8003548 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	7f1a      	ldrb	r2, [r3, #28]
 80034c6:	787b      	ldrb	r3, [r7, #1]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d018      	beq.n	80034fe <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	787a      	ldrb	r2, [r7, #1]
 80034d2:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	7f1b      	ldrb	r3, [r3, #28]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f007 fb2e 	bl	800ab4e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	4618      	mov	r0, r3
 80034fa:	f008 fef9 	bl	800c2f0 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	7f1a      	ldrb	r2, [r3, #28]
 8003506:	787b      	ldrb	r3, [r7, #1]
 8003508:	429a      	cmp	r2, r3
 800350a:	d068      	beq.n	80035de <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	787a      	ldrb	r2, [r7, #1]
 8003514:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	7f1b      	ldrb	r3, [r3, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f007 fb0b 	bl	800ab4e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	4618      	mov	r0, r3
 8003542:	f008 fed5 	bl	800c2f0 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 8003546:	e04a      	b.n	80035de <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 8003548:	783b      	ldrb	r3, [r7, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d147      	bne.n	80035de <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	7f1a      	ldrb	r2, [r3, #28]
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	429a      	cmp	r2, r3
 8003558:	d11d      	bne.n	8003596 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 800355a:	787b      	ldrb	r3, [r7, #1]
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a1a      	ldr	r2, [r3, #32]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f007 fae2 	bl	800ab4e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	4618      	mov	r0, r3
 8003592:	f008 fead 	bl	800c2f0 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	7f1a      	ldrb	r2, [r3, #28]
 800359e:	787b      	ldrb	r3, [r7, #1]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d01c      	beq.n	80035de <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	787a      	ldrb	r2, [r7, #1]
 80035ac:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a1a      	ldr	r2, [r3, #32]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	7f1b      	ldrb	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f007 fabf 	bl	800ab4e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	4618      	mov	r0, r3
 80035da:	f008 fe89 	bl	800c2f0 <PWMx_Toggle>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	4618      	mov	r0, r3
 80035f6:	f008 fe3b 	bl	800c270 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f007 faa3 	bl	800ab4e <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	4618      	mov	r0, r3
 8003612:	f008 fe2d 	bl	800c270 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f007 fa94 	bl	800ab4e <GPIO_WritePin_Afopt>


}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a85      	ldr	r2, [pc, #532]	; (8003858 <int_Config_Motor+0x228>)
 8003642:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a84      	ldr	r2, [pc, #528]	; (800385c <int_Config_Motor+0x22c>)
 800364a:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a83      	ldr	r2, [pc, #524]	; (8003860 <int_Config_Motor+0x230>)
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a82      	ldr	r2, [pc, #520]	; (8003864 <int_Config_Motor+0x234>)
 800365a:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a81      	ldr	r2, [pc, #516]	; (8003868 <int_Config_Motor+0x238>)
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a74      	ldr	r2, [pc, #464]	; (800386c <int_Config_Motor+0x23c>)
 800369c:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6f      	ldr	r2, [pc, #444]	; (8003870 <int_Config_Motor+0x240>)
 80036b2:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <int_Config_Motor+0x244>)
 80036ba:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3304      	adds	r3, #4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <int_Config_Motor+0x22c>)
 80036c4:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3304      	adds	r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6a      	ldr	r2, [pc, #424]	; (8003878 <int_Config_Motor+0x248>)
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3304      	adds	r3, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a69      	ldr	r2, [pc, #420]	; (800387c <int_Config_Motor+0x24c>)
 80036d8:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3304      	adds	r3, #4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a67      	ldr	r2, [pc, #412]	; (8003880 <int_Config_Motor+0x250>)
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3304      	adds	r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3304      	adds	r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3304      	adds	r3, #4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3304      	adds	r3, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3304      	adds	r3, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a51      	ldr	r2, [pc, #324]	; (800386c <int_Config_Motor+0x23c>)
 8003726:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3304      	adds	r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3304      	adds	r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a4c      	ldr	r2, [pc, #304]	; (8003870 <int_Config_Motor+0x240>)
 8003740:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003768:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	4a45      	ldr	r2, [pc, #276]	; (8003884 <int_Config_Motor+0x254>)
 800376e:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4a45      	ldr	r2, [pc, #276]	; (8003888 <int_Config_Motor+0x258>)
 8003774:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50


	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = None;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000448 	.word	0x20000448
 800385c:	41e00000 	.word	0x41e00000
 8003860:	200002c0 	.word	0x200002c0
 8003864:	200002d8 	.word	0x200002d8
 8003868:	20000350 	.word	0x20000350
 800386c:	437a0000 	.word	0x437a0000
 8003870:	42c80000 	.word	0x42c80000
 8003874:	20000474 	.word	0x20000474
 8003878:	200002b4 	.word	0x200002b4
 800387c:	200002cc 	.word	0x200002cc
 8003880:	20000370 	.word	0x20000370
 8003884:	3dcccccd 	.word	0x3dcccccd
 8003888:	3f4ccccd 	.word	0x3f4ccccd

0800388c <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 800389a:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <PID_control+0x1cc>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	4a6f      	ldr	r2, [pc, #444]	; (8003a5c <PID_control+0x1d0>)
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038ae:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003a60 <PID_control+0x1d4>
 80038b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b6:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80038c6:	eeb0 1a46 	vmov.f32	s2, s12
 80038ca:	eef0 1a66 	vmov.f32	s3, s13
 80038ce:	eeb0 0a47 	vmov.f32	s0, s14
 80038d2:	eef0 0a67 	vmov.f32	s1, s15
 80038d6:	68b8      	ldr	r0, [r7, #8]
 80038d8:	f007 feb2 	bl	800b640 <distance_to_straight_line>
 80038dc:	ec51 0b10 	vmov	r0, r1, d0
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <PID_control+0x1d8>)
 80038e6:	f7fc ffc9 	bl	800087c <__aeabi_ddiv>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	f7fd f991 	bl	8000c18 <__aeabi_d2f>
 80038f6:	4603      	mov	r3, r0
 80038f8:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 80038fa:	ed97 1a04 	vldr	s2, [r7, #16]
 80038fe:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003a68 <PID_control+0x1dc>
 8003902:	ed97 0a05 	vldr	s0, [r7, #20]
 8003906:	6838      	ldr	r0, [r7, #0]
 8003908:	f000 f8bc 	bl	8003a84 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 800390c:	4b57      	ldr	r3, [pc, #348]	; (8003a6c <PID_control+0x1e0>)
 800390e:	ed93 7a00 	vldr	s14, [r3]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800391c:	4b54      	ldr	r3, [pc, #336]	; (8003a70 <PID_control+0x1e4>)
 800391e:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	ed93 7a00 	vldr	s14, [r3]
 8003928:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <PID_control+0x1e0>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003932:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <PID_control+0x1e8>)
 8003934:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <PID_control+0x1e4>)
 8003940:	edd3 7a00 	vldr	s15, [r3]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	ed93 7a02 	vldr	s14, [r3, #8]
 800394c:	eeb0 1a47 	vmov.f32	s2, s14
 8003950:	eef0 0a67 	vmov.f32	s1, s15
 8003954:	ed97 0a05 	vldr	s0, [r7, #20]
 8003958:	4610      	mov	r0, r2
 800395a:	f000 f893 	bl	8003a84 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3304      	adds	r3, #4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <PID_control+0x1e8>)
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3304      	adds	r3, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	ed93 7a02 	vldr	s14, [r3, #8]
 8003976:	eeb0 1a47 	vmov.f32	s2, s14
 800397a:	eef0 0a67 	vmov.f32	s1, s15
 800397e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003982:	4610      	mov	r0, r2
 8003984:	f000 f87e 	bl	8003a84 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	edd3 7a00 	vldr	s15, [r3]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a2:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3304      	adds	r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3304      	adds	r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3304      	adds	r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c6:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80039d2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003a78 <PID_control+0x1ec>
 80039d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	db04      	blt.n	80039ea <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <PID_control+0x1f0>)
 80039e6:	615a      	str	r2, [r3, #20]
 80039e8:	e00e      	b.n	8003a08 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80039f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	d803      	bhi.n	8003a08 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <PID_control+0x1f4>)
 8003a06:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a12:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003a78 <PID_control+0x1ec>
 8003a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	db05      	blt.n	8003a2c <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3304      	adds	r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <PID_control+0x1f0>)
 8003a28:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8003a2a:	e011      	b.n	8003a50 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a36:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a42:	d900      	bls.n	8003a46 <PID_control+0x1ba>
}
 8003a44:	e004      	b.n	8003a50 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <PID_control+0x1f4>)
 8003a4e:	615a      	str	r2, [r3, #20]
}
 8003a50:	bf00      	nop
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000324 	.word	0x20000324
 8003a5c:	2000002c 	.word	0x2000002c
 8003a60:	447a0000 	.word	0x447a0000
 8003a64:	408f4000 	.word	0x408f4000
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	20000c28 	.word	0x20000c28
 8003a70:	20000c2c 	.word	0x20000c2c
 8003a74:	20000c30 	.word	0x20000c30
 8003a78:	42700000 	.word	0x42700000
 8003a7c:	42700000 	.word	0x42700000
 8003a80:	41b80000 	.word	0x41b80000

08003a84 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a90:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a94:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8003a98:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a9c:	edd7 7a00 	vldr	s15, [r7]
 8003aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	ed93 7a04 	vldr	s14, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	edd3 6a01 	vldr	s13, [r3, #4]
 8003aca:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	ed93 7a06 	vldr	s14, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	edd3 6a01 	vldr	s13, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b12:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8003b16:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	60da      	str	r2, [r3, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3724      	adds	r7, #36	; 0x24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6178      	str	r0, [r7, #20]
 8003b4c:	6139      	str	r1, [r7, #16]
 8003b4e:	60fa      	str	r2, [r7, #12]
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	ed97 1b00 	vldr	d1, [r7]
 8003b64:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003c68 <go+0x124>
 8003b68:	6938      	ldr	r0, [r7, #16]
 8003b6a:	f7fe ff0d 	bl	8002988 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	6978      	ldr	r0, [r7, #20]
 8003b82:	f7fe ff61 	bl	8002a48 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d061      	beq.n	8003c5e <go+0x11a>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bb8:	ee16 0a90 	vmov	r0, s13
 8003bbc:	f7fc fcdc 	bl	8000578 <__aeabi_f2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bce:	eeb0 0a47 	vmov.f32	s0, s14
 8003bd2:	eef0 0a67 	vmov.f32	s1, s15
 8003bd6:	f00c fd9b 	bl	8010710 <cos>
 8003bda:	ec51 0b10 	vmov	r0, r1, d0
 8003bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be2:	f7fc fd21 	bl	8000628 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	68f9      	ldr	r1, [r7, #12]
 8003bec:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	ed93 7b04 	vldr	d7, [r3, #16]
 8003bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8003bfa:	eef0 0a67 	vmov.f32	s1, s15
 8003bfe:	f00c fe23 	bl	8010848 <sin>
 8003c02:	ec51 0b10 	vmov	r0, r1, d0
 8003c06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0a:	f7fc fd0d 	bl	8000628 <__aeabi_dmul>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c24:	f7fc fb4a 	bl	80002bc <__adddf3>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	68f9      	ldr	r1, [r7, #12]
 8003c2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c3e:	f7fc fb3d 	bl	80002bc <__adddf3>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		//Convertimos el valor y imprimimos en la terminal
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f7ff fe1a 	bl	800388c <PID_control>

		*fcontrol = RESET;
 8003c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	00000000 	.word	0x00000000

08003c6c <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6178      	str	r0, [r7, #20]
 8003c74:	6139      	str	r1, [r7, #16]
 8003c76:	60fa      	str	r2, [r7, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	ed97 1b00 	vldr	d1, [r7]
 8003c8c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003cbc <NOP+0x50>
 8003c90:	6938      	ldr	r0, [r7, #16]
 8003c92:	f7fe fe79 	bl	8002988 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f7fe fecd 	bl	8002a48 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
	}

}
 8003cb4:	bf00      	nop
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]

	int counter = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 8003cea:	e00a      	b.n	8003d02 <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	7812      	ldrb	r2, [r2, #0]
 8003cfa:	701a      	strb	r2, [r3, #0]

			counter++;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d1ee      	bne.n	8003cec <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b23      	cmp	r3, #35	; 0x23
 8003d28:	f000 8088 	beq.w	8003e3c <extract_info+0x17c>
			break;
		}

		count_f = counter;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8003d30:	e00d      	b.n	8003d4e <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8003d32:	7e3b      	ldrb	r3, [r7, #24]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	68f9      	ldr	r1, [r7, #12]
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	440a      	add	r2, r1
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	701a      	strb	r2, [r3, #0]

			counter++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d1eb      	bne.n	8003d32 <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	7e3b      	ldrb	r3, [r7, #24]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8003d64:	7e3b      	ldrb	r3, [r7, #24]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b23      	cmp	r3, #35	; 0x23
 8003d84:	d05c      	beq.n	8003e40 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 8003d8a:	e00d      	b.n	8003da8 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	7812      	ldrb	r2, [r2, #0]
 8003da0:	701a      	strb	r2, [r3, #0]

			counter++;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d1eb      	bne.n	8003d8c <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b23      	cmp	r3, #35	; 0x23
 8003dde:	d031      	beq.n	8003e44 <extract_info+0x184>
			break;
		}

		count_t = counter;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 8003de4:	e00d      	b.n	8003e02 <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 8003de6:	7dbb      	ldrb	r3, [r7, #22]
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	4413      	add	r3, r2
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	440a      	add	r2, r1
 8003df8:	7812      	ldrb	r2, [r2, #0]
 8003dfa:	701a      	strb	r2, [r3, #0]

			counter++;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d1eb      	bne.n	8003de6 <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	7dbb      	ldrb	r3, [r7, #22]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8003e18:	7dbb      	ldrb	r3, [r7, #22]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	4413      	add	r3, r2
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b23      	cmp	r3, #35	; 0x23
 8003e38:	d006      	beq.n	8003e48 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 8003e3a:	e762      	b.n	8003d02 <extract_info+0x42>
			break;
 8003e3c:	bf00      	nop
 8003e3e:	e004      	b.n	8003e4a <extract_info+0x18a>
			break;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <extract_info+0x18a>
			break;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <extract_info+0x18a>
			break;
 8003e48:	bf00      	nop
		}
	}

	counter = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 8003e4e:	7efb      	ldrb	r3, [r7, #27]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0d6      	b.n	8004006 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8003e58:	7efb      	ldrb	r3, [r7, #27]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e03c      	b.n	8003eda <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8003e60:	7efb      	ldrb	r3, [r7, #27]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bfb8      	it	lt
 8003e6c:	425b      	neglt	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3b30      	subs	r3, #48	; 0x30
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc fb6b 	bl	8000554 <__aeabi_i2d>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	69f8      	ldr	r0, [r7, #28]
 8003e84:	f7fc fb66 	bl	8000554 <__aeabi_i2d>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	ec43 2b11 	vmov	d1, r2, r3
 8003e90:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8004010 <extract_info+0x350>
 8003e94:	f00c fd66 	bl	8010964 <pow>
 8003e98:	ec53 2b10 	vmov	r2, r3, d0
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc fbc2 	bl	8000628 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc fb3f 	bl	8000534 <__aeabi_ui2d>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4620      	mov	r0, r4
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	f7fc f9fd 	bl	80002bc <__adddf3>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f7fc fe85 	bl	8000bd8 <__aeabi_d2uiz>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed2:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dabf      	bge.n	8003e60 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 8003ee0:	7ebb      	ldrb	r3, [r7, #26]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e08d      	b.n	8004006 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 8003eea:	7ebb      	ldrb	r3, [r7, #26]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e03c      	b.n	8003f6c <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 8003ef2:	7ebb      	ldrb	r3, [r7, #26]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bfb8      	it	lt
 8003efe:	425b      	neglt	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	3b30      	subs	r3, #48	; 0x30
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fb22 	bl	8000554 <__aeabi_i2d>
 8003f10:	4604      	mov	r4, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	69f8      	ldr	r0, [r7, #28]
 8003f16:	f7fc fb1d 	bl	8000554 <__aeabi_i2d>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	ec43 2b11 	vmov	d1, r2, r3
 8003f22:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8004010 <extract_info+0x350>
 8003f26:	f00c fd1d 	bl	8010964 <pow>
 8003f2a:	ec53 2b10 	vmov	r2, r3, d0
 8003f2e:	4620      	mov	r0, r4
 8003f30:	4629      	mov	r1, r5
 8003f32:	f7fc fb79 	bl	8000628 <__aeabi_dmul>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4614      	mov	r4, r2
 8003f3c:	461d      	mov	r5, r3
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc faf6 	bl	8000534 <__aeabi_ui2d>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	f7fc f9b4 	bl	80002bc <__adddf3>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f7fc fe3c 	bl	8000bd8 <__aeabi_d2uiz>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	dabf      	bge.n	8003ef2 <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 8003f72:	7e7b      	ldrb	r3, [r7, #25]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e044      	b.n	8004006 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 8003f7c:	7e7b      	ldrb	r3, [r7, #25]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e03c      	b.n	8003ffe <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 8003f84:	7e7b      	ldrb	r3, [r7, #25]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bfb8      	it	lt
 8003f90:	425b      	neglt	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	4413      	add	r3, r2
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	3b30      	subs	r3, #48	; 0x30
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fc fad9 	bl	8000554 <__aeabi_i2d>
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	460d      	mov	r5, r1
 8003fa6:	69f8      	ldr	r0, [r7, #28]
 8003fa8:	f7fc fad4 	bl	8000554 <__aeabi_i2d>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	ec43 2b11 	vmov	d1, r2, r3
 8003fb4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004010 <extract_info+0x350>
 8003fb8:	f00c fcd4 	bl	8010964 <pow>
 8003fbc:	ec53 2b10 	vmov	r2, r3, d0
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc fb30 	bl	8000628 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc faad 	bl	8000534 <__aeabi_ui2d>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4620      	mov	r0, r4
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f7fc f96b 	bl	80002bc <__adddf3>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	f7fc fdf3 	bl	8000bd8 <__aeabi_d2uiz>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff6:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	dabf      	bge.n	8003f84 <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bdb0      	pop	{r4, r5, r7, pc}
 800400e:	bf00      	nop
 8004010:	00000000 	.word	0x00000000
 8004014:	40240000 	.word	0x40240000

08004018 <create_square_operations>:
void create_square_operations(double side,
							  uint8_t CW_CCW,
							  Parameters_Operation_t prtList[30],
							  Parameter_build_t *ptrbuild,
							  Parameters_Path_t *ptrPath,
							  Parameters_Position_t *ptrPos){
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b09e      	sub	sp, #120	; 0x78
 800401c:	af00      	add	r7, sp, #0
 800401e:	ed87 0b06 	vstr	d0, [r7, #24]
 8004022:	6139      	str	r1, [r7, #16]
 8004024:	60fa      	str	r2, [r7, #12]
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	4603      	mov	r3, r0
 800402a:	75fb      	strb	r3, [r7, #23]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double finishline_y = 0;
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8004044:	68f9      	ldr	r1, [r7, #12]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9c1 2300 	strd	r2, r3, [r1]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// Preguntamos si se quiere recorrer el cuadrado en CW o CCW, no importa donde este situado, comenzara en linea recta como primera operación

	if (CW_CCW == 1) // Se quiere ir en CW
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b01      	cmp	r3, #1
 800407c:	f040 808e 	bne.w	800419c <create_square_operations+0x184>
	{

		// calculo del vector unitario del robot

		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8004080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004084:	ed93 7b04 	vldr	d7, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3310      	adds	r3, #16
 800408c:	4618      	mov	r0, r3
 800408e:	eeb0 0a47 	vmov.f32	s0, s14
 8004092:	eef0 0a67 	vmov.f32	s1, s15
 8004096:	f007 fc4d 	bl	800b934 <unitary_vector>

		double coordenadas_cuadrado[4][2] = {{side,0},
 800409a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800409e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80040ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
											 {side,-side},
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	607b      	str	r3, [r7, #4]
		double coordenadas_cuadrado[4][2] = {{side,0},
 80040c2:	ed97 7b00 	vldr	d7, [r7]
 80040c6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
											 {0,-side},
 80040d6:	69bc      	ldr	r4, [r7, #24]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
		double coordenadas_cuadrado[4][2] = {{side,0},
 80040de:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
											 {0,0}}; // Coordenadas (x,y) destino para hacer el cuadrado


		for (uint8_t i = 0 ; i < 4; i++){
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004100:	e035      	b.n	800416e <create_square_operations+0x156>

			// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir


			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 8004102:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	3370      	adds	r3, #112	; 0x70
 800410a:	f107 0208 	add.w	r2, r7, #8
 800410e:	4413      	add	r3, r2
 8004110:	3b58      	subs	r3, #88	; 0x58
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 800411a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3370      	adds	r3, #112	; 0x70
 8004122:	f107 0208 	add.w	r2, r7, #8
 8004126:	4413      	add	r3, r2
 8004128:	3b50      	subs	r3, #80	; 0x50
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			ptrPath->goal_Position_x = finishline_x;
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004138:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004142:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8004146:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800414a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	6938      	ldr	r0, [r7, #16]
 8004152:	f007 f881 	bl	800b258 <build_Operation>

			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8004156:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800415a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800415e:	68b8      	ldr	r0, [r7, #8]
 8004160:	f007 f95e 	bl	800b420 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4; i++){
 8004164:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004168:	3301      	adds	r3, #1
 800416a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800416e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004172:	2b03      	cmp	r3, #3
 8004174:	d9c5      	bls.n	8004102 <create_square_operations+0xea>

		}


		// Agregamos la operacion nula
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417c:	ed9f 2b4c 	vldr	d2, [pc, #304]	; 80042b0 <create_square_operations+0x298>
 8004180:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 80042b0 <create_square_operations+0x298>
 8004184:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 80042b0 <create_square_operations+0x298>
 8004188:	2200      	movs	r2, #0
 800418a:	4619      	mov	r1, r3
 800418c:	6938      	ldr	r0, [r7, #16]
 800418e:	f007 f903 	bl	800b398 <add_Operation>
		ptrbuild->number_operation = 0;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
		ptrbuild->number_operation = 0;

	}

}
 800419a:	e084      	b.n	80042a6 <create_square_operations+0x28e>
		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 800419c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a0:	ed93 7b04 	vldr	d7, [r3, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3310      	adds	r3, #16
 80041a8:	4618      	mov	r0, r3
 80041aa:	eeb0 0a47 	vmov.f32	s0, s14
 80041ae:	eef0 0a67 	vmov.f32	s1, s15
 80041b2:	f007 fbbf 	bl	800b934 <unitary_vector>
		double coordenadas_cuadrado[4][2] = {{side,0},
 80041b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80041ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80041d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80041e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (uint8_t i = 0 ; i < 4 ; i++){
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800420c:	e035      	b.n	800427a <create_square_operations+0x262>
			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 800420e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	3370      	adds	r3, #112	; 0x70
 8004216:	f107 0208 	add.w	r2, r7, #8
 800421a:	4413      	add	r3, r2
 800421c:	3b58      	subs	r3, #88	; 0x58
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 8004226:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	3370      	adds	r3, #112	; 0x70
 800422e:	f107 0208 	add.w	r2, r7, #8
 8004232:	4413      	add	r3, r2
 8004234:	3b50      	subs	r3, #80	; 0x50
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			ptrPath->goal_Position_x = finishline_x;
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004244:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800424e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8004252:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004256:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	6938      	ldr	r0, [r7, #16]
 800425e:	f006 fffb 	bl	800b258 <build_Operation>
			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8004262:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004266:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800426a:	68b8      	ldr	r0, [r7, #8]
 800426c:	f007 f8d8 	bl	800b420 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4 ; i++){
 8004270:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004274:	3301      	adds	r3, #1
 8004276:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800427a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800427e:	2b03      	cmp	r3, #3
 8004280:	d9c5      	bls.n	800420e <create_square_operations+0x1f6>
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004288:	ed9f 2b09 	vldr	d2, [pc, #36]	; 80042b0 <create_square_operations+0x298>
 800428c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 80042b0 <create_square_operations+0x298>
 8004290:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80042b0 <create_square_operations+0x298>
 8004294:	2200      	movs	r2, #0
 8004296:	4619      	mov	r1, r3
 8004298:	6938      	ldr	r0, [r7, #16]
 800429a:	f007 f87d 	bl	800b398 <add_Operation>
		ptrbuild->number_operation = 0;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80042a6:	bf00      	nop
 80042a8:	3778      	adds	r7, #120	; 0x78
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bdb0      	pop	{r4, r5, r7, pc}
 80042ae:	bf00      	nop
	...

080042b8 <resetParameters>:


void resetParameters(void){
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
	fparam = 0;
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <resetParameters+0x20>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
	sparam = 0;
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <resetParameters+0x24>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
	tparam = 0;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <resetParameters+0x28>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	2000055c 	.word	0x2000055c
 80042dc:	20000560 	.word	0x20000560
 80042e0:	20000564 	.word	0x20000564

080042e4 <led_state_callback>:

void led_state_callback (TimerHandle_t xTimer){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 80042ec:	4803      	ldr	r0, [pc, #12]	; (80042fc <led_state_callback+0x18>)
 80042ee:	f006 fc7a 	bl	800abe6 <GPIOxTooglePin>

}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000278 	.word	0x20000278

08004300 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800430a:	4b0f      	ldr	r3, [pc, #60]	; (8004348 <ITM_SendChar+0x48>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <ITM_SendChar+0x48>)
 8004310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004314:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <ITM_SendChar+0x4c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <ITM_SendChar+0x4c>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8004322:	bf00      	nop
 8004324:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f8      	beq.n	8004324 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8004332:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	6013      	str	r3, [r2, #0]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	e000edfc 	.word	0xe000edfc
 800434c:	e0000e00 	.word	0xe0000e00

08004350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	return 1;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_kill>:

int _kill(int pid, int sig)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800436a:	f009 fab9 	bl	800d8e0 <__errno>
 800436e:	4603      	mov	r3, r0
 8004370:	2216      	movs	r2, #22
 8004372:	601a      	str	r2, [r3, #0]
	return -1;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_exit>:

void _exit (int status)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004388:	f04f 31ff 	mov.w	r1, #4294967295
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ffe7 	bl	8004360 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004392:	e7fe      	b.n	8004392 <_exit+0x12>

08004394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e00a      	b.n	80043bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043a6:	f3af 8000 	nop.w
 80043aa:	4601      	mov	r1, r0
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	60ba      	str	r2, [r7, #8]
 80043b2:	b2ca      	uxtb	r2, r1
 80043b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3301      	adds	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	dbf0      	blt.n	80043a6 <_read+0x12>
	}

return len;
 80043c4:	687b      	ldr	r3, [r7, #4]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e009      	b.n	80043f4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	60ba      	str	r2, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff89 	bl	8004300 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	3301      	adds	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	dbf1      	blt.n	80043e0 <_write+0x12>
	}
	return len;
 80043fc:	687b      	ldr	r3, [r7, #4]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <_close>:

int _close(int file)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	return -1;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800442e:	605a      	str	r2, [r3, #4]
	return 0;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <_isatty>:

int _isatty(int file)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
	return 1;
 8004446:	2301      	movs	r3, #1
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
	return 0;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004470:	480d      	ldr	r0, [pc, #52]	; (80044a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004478:	480c      	ldr	r0, [pc, #48]	; (80044ac <LoopForever+0x6>)
  ldr r1, =_edata
 800447a:	490d      	ldr	r1, [pc, #52]	; (80044b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800447c:	4a0d      	ldr	r2, [pc, #52]	; (80044b4 <LoopForever+0xe>)
  movs r3, #0
 800447e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004480:	e002      	b.n	8004488 <LoopCopyDataInit>

08004482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004486:	3304      	adds	r3, #4

08004488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800448a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800448c:	d3f9      	bcc.n	8004482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004490:	4c0a      	ldr	r4, [pc, #40]	; (80044bc <LoopForever+0x16>)
  movs r3, #0
 8004492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004494:	e001      	b.n	800449a <LoopFillZerobss>

08004496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004498:	3204      	adds	r2, #4

0800449a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800449a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800449c:	d3fb      	bcc.n	8004496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800449e:	f009 fa25 	bl	800d8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044a2:	f7fc fc09 	bl	8000cb8 <main>

080044a6 <LoopForever>:

LoopForever:
    b LoopForever
 80044a6:	e7fe      	b.n	80044a6 <LoopForever>
  ldr   r0, =_estack
 80044a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044b0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80044b4:	08013da0 	.word	0x08013da0
  ldr r2, =_sbss
 80044b8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80044bc:	2000dc80 	.word	0x2000dc80

080044c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044c0:	e7fe      	b.n	80044c0 <ADC_IRQHandler>

080044c2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f103 0208 	add.w	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f04f 32ff 	mov.w	r2, #4294967295
 80044da:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f103 0208 	add.w	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f103 0208 	add.w	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d103      	bne.n	8004584 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e00c      	b.n	800459e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3308      	adds	r3, #8
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e002      	b.n	8004592 <vListInsert+0x2e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	429a      	cmp	r2, r3
 800459c:	d2f6      	bcs.n	800458c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6852      	ldr	r2, [r2, #4]
 80045f6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d103      	bne.n	800460a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1e5a      	subs	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <xQueueGenericReset+0x2a>
        __asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	60bb      	str	r3, [r7, #8]
    }
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004656:	f002 fadf 	bl	8006c18 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	3b01      	subs	r3, #1
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d114      	bne.n	80046d6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01a      	beq.n	80046ea <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3310      	adds	r3, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f913 	bl	80058e4 <xTaskRemoveFromEventList>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <xQueueGenericReset+0xcc>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	e009      	b.n	80046ea <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3310      	adds	r3, #16
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fef1 	bl	80044c2 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3324      	adds	r3, #36	; 0x24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff feec 	bl	80044c2 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80046ea:	f002 fac5 	bl	8006c78 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	; 0x30
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61bb      	str	r3, [r7, #24]
    }
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <xQueueGenericCreate+0x48>
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d101      	bne.n	8004748 <xQueueGenericCreate+0x4c>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <xQueueGenericCreate+0x4e>
 8004748:	2300      	movs	r3, #0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <xQueueGenericCreate+0x68>
        __asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	617b      	str	r3, [r7, #20]
    }
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800476a:	d90a      	bls.n	8004782 <xQueueGenericCreate+0x86>
        __asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	613b      	str	r3, [r7, #16]
    }
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	3350      	adds	r3, #80	; 0x50
 8004786:	4618      	mov	r0, r3
 8004788:	f002 fb68 	bl	8006e5c <pvPortMalloc>
 800478c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	3350      	adds	r3, #80	; 0x50
 800479c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800479e:	79fa      	ldrb	r2, [r7, #7]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f805 	bl	80047ba <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
    }
 80047b2:	4618      	mov	r0, r3
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e002      	b.n	80047dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047e8:	2101      	movs	r1, #1
 80047ea:	69b8      	ldr	r0, [r7, #24]
 80047ec:	f7ff ff1e 	bl	800462c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	; 0x38
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xQueueGenericSend+0x32>
        __asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d103      	bne.n	8004840 <xQueueGenericSend+0x40>
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <xQueueGenericSend+0x44>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <xQueueGenericSend+0x46>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <xQueueGenericSend+0x60>
        __asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d103      	bne.n	800486e <xQueueGenericSend+0x6e>
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <xQueueGenericSend+0x72>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <xQueueGenericSend+0x74>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xQueueGenericSend+0x8e>
        __asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	623b      	str	r3, [r7, #32]
    }
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488e:	f001 f9c5 	bl	8005c1c <xTaskGetSchedulerState>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <xQueueGenericSend+0x9e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <xQueueGenericSend+0xa2>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <xQueueGenericSend+0xa4>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xQueueGenericSend+0xbe>
        __asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	61fb      	str	r3, [r7, #28]
    }
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80048be:	f002 f9ab 	bl	8006c18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <xQueueGenericSend+0xd4>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d129      	bne.n	8004928 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048da:	f000 fac6 	bl	8004e6a <prvCopyDataToQueue>
 80048de:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fff9 	bl	80058e4 <xTaskRemoveFromEventList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80048f8:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <xQueueGenericSend+0x1f8>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	e00a      	b.n	8004920 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <xQueueGenericSend+0x1f8>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004920:	f002 f9aa 	bl	8006c78 <vPortExitCritical>
                return pdPASS;
 8004924:	2301      	movs	r3, #1
 8004926:	e063      	b.n	80049f0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800492e:	f002 f9a3 	bl	8006c78 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004932:	2300      	movs	r3, #0
 8004934:	e05c      	b.n	80049f0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f831 	bl	80059a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004946:	2301      	movs	r3, #1
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800494a:	f002 f995 	bl	8006c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800494e:	f000 fdb9 	bl	80054c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004952:	f002 f961 	bl	8006c18 <vPortEnterCritical>
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800495c:	b25b      	sxtb	r3, r3
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d103      	bne.n	800496c <xQueueGenericSend+0x16c>
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004972:	b25b      	sxtb	r3, r3
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d103      	bne.n	8004982 <xQueueGenericSend+0x182>
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004982:	f002 f979 	bl	8006c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004986:	1d3a      	adds	r2, r7, #4
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f820 	bl	80059d4 <xTaskCheckForTimeOut>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d124      	bne.n	80049e4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800499a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800499c:	f000 fb5d 	bl	800505a <prvIsQueueFull>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	3310      	adds	r3, #16
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 ff48 	bl	8005844 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80049b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b6:	f000 fae8 	bl	8004f8a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80049ba:	f000 fd91 	bl	80054e0 <xTaskResumeAll>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f47f af7c 	bne.w	80048be <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <xQueueGenericSend+0x1f8>)
 80049c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	e772      	b.n	80048be <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80049d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049da:	f000 fad6 	bl	8004f8a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80049de:	f000 fd7f 	bl	80054e0 <xTaskResumeAll>
 80049e2:	e76c      	b.n	80048be <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80049e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e6:	f000 fad0 	bl	8004f8a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80049ea:	f000 fd79 	bl	80054e0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80049ee:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3738      	adds	r7, #56	; 0x38
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b090      	sub	sp, #64	; 0x40
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSendFromISR+0x3c>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <xQueueGenericSendFromISR+0x40>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <xQueueGenericSendFromISR+0x42>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSendFromISR+0x6a>
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSendFromISR+0x6e>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSendFromISR+0x70>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	623b      	str	r3, [r7, #32]
    }
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a86:	f002 f9a9 	bl	8006ddc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	61fa      	str	r2, [r7, #28]
 8004aa0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <xQueueGenericSendFromISR+0xbc>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d13e      	bne.n	8004b36 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ace:	f000 f9cc 	bl	8004e6a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004ad2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d112      	bne.n	8004b02 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d025      	beq.n	8004b30 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	3324      	adds	r3, #36	; 0x24
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fefb 	bl	80058e4 <xTaskRemoveFromEventList>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01d      	beq.n	8004b30 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01a      	beq.n	8004b30 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e016      	b.n	8004b30 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b06:	2b7f      	cmp	r3, #127	; 0x7f
 8004b08:	d10a      	bne.n	8004b20 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	617b      	str	r3, [r7, #20]
    }
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b24:	3301      	adds	r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	b25a      	sxtb	r2, r3
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004b30:	2301      	movs	r3, #1
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004b34:	e001      	b.n	8004b3a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004b44:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3740      	adds	r7, #64	; 0x40
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <xQueueReceive+0x30>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	623b      	str	r3, [r7, #32]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <xQueueReceive+0x3e>
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <xQueueReceive+0x42>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueReceive+0x44>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xQueueReceive+0x5e>
        __asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	61fb      	str	r3, [r7, #28]
    }
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bae:	f001 f835 	bl	8005c1c <xTaskGetSchedulerState>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <xQueueReceive+0x6e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <xQueueReceive+0x72>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <xQueueReceive+0x74>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueReceive+0x8e>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	61bb      	str	r3, [r7, #24]
    }
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004bde:	f002 f81b 	bl	8006c18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01f      	beq.n	8004c2e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf2:	f000 f9a4 	bl	8004f3e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00f      	beq.n	8004c26 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	3310      	adds	r3, #16
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fe6a 	bl	80058e4 <xTaskRemoveFromEventList>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004c16:	4b3d      	ldr	r3, [pc, #244]	; (8004d0c <xQueueReceive+0x1bc>)
 8004c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004c26:	f002 f827 	bl	8006c78 <vPortExitCritical>
                return pdPASS;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e069      	b.n	8004d02 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004c34:	f002 f820 	bl	8006c78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e062      	b.n	8004d02 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c42:	f107 0310 	add.w	r3, r7, #16
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 feae 	bl	80059a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004c50:	f002 f812 	bl	8006c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c54:	f000 fc36 	bl	80054c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c58:	f001 ffde 	bl	8006c18 <vPortEnterCritical>
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d103      	bne.n	8004c72 <xQueueReceive+0x122>
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d103      	bne.n	8004c88 <xQueueReceive+0x138>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c88:	f001 fff6 	bl	8006c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c8c:	1d3a      	adds	r2, r7, #4
 8004c8e:	f107 0310 	add.w	r3, r7, #16
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fe9d 	bl	80059d4 <xTaskCheckForTimeOut>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d123      	bne.n	8004ce8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca2:	f000 f9c4 	bl	800502e <prvIsQueueEmpty>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d017      	beq.n	8004cdc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fdc5 	bl	8005844 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbc:	f000 f965 	bl	8004f8a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004cc0:	f000 fc0e 	bl	80054e0 <xTaskResumeAll>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d189      	bne.n	8004bde <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <xQueueReceive+0x1bc>)
 8004ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	e780      	b.n	8004bde <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cde:	f000 f954 	bl	8004f8a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004ce2:	f000 fbfd 	bl	80054e0 <xTaskResumeAll>
 8004ce6:	e77a      	b.n	8004bde <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cea:	f000 f94e 	bl	8004f8a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004cee:	f000 fbf7 	bl	80054e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf4:	f000 f99b 	bl	800502e <prvIsQueueEmpty>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f43f af6f 	beq.w	8004bde <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004d00:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3730      	adds	r7, #48	; 0x30
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b090      	sub	sp, #64	; 0x40
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <xQueueReceiveFromISR+0x3a>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <xQueueReceiveFromISR+0x3e>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <xQueueReceiveFromISR+0x40>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d6a:	f002 f837 	bl	8006ddc <vPortValidateInterruptPriority>
        __asm volatile
 8004d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	623a      	str	r2, [r7, #32]
 8004d84:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004d86:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d03e      	beq.n	8004e14 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004da4:	f000 f8cb 	bl	8004f3e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	1e5a      	subs	r2, r3, #1
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004db0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d112      	bne.n	8004de0 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d025      	beq.n	8004e0e <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fd8c 	bl	80058e4 <xTaskRemoveFromEventList>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01d      	beq.n	8004e0e <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01a      	beq.n	8004e0e <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e016      	b.n	8004e0e <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004de0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004de4:	2b7f      	cmp	r3, #127	; 0x7f
 8004de6:	d10a      	bne.n	8004dfe <xQueueReceiveFromISR+0xee>
        __asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	61bb      	str	r3, [r7, #24]
    }
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e02:	3301      	adds	r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	b25a      	sxtb	r2, r3
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	e001      	b.n	8004e18 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f383 8811 	msr	BASEPRI, r3
    }
 8004e22:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3740      	adds	r7, #64	; 0x40
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	60bb      	str	r3, [r7, #8]
    }
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004e52:	f001 fee1 	bl	8006c18 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004e5c:	f001 ff0c 	bl	8006c78 <vPortExitCritical>

    return uxReturn;
 8004e60:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d14d      	bne.n	8004f2c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fedf 	bl	8005c58 <xTaskPriorityDisinherit>
 8004e9a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	e043      	b.n	8004f2c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d119      	bne.n	8004ede <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6858      	ldr	r0, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	f008 fd45 	bl	800d944 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d32b      	bcc.n	8004f2c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	e026      	b.n	8004f2c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68d8      	ldr	r0, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	f008 fd2b 	bl	800d944 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	425b      	negs	r3, r3
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d207      	bcs.n	8004f1a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	425b      	negs	r3, r3
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d105      	bne.n	8004f2c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004f34:	697b      	ldr	r3, [r7, #20]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d018      	beq.n	8004f82 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d303      	bcc.n	8004f72 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68d9      	ldr	r1, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f008 fce1 	bl	800d944 <memcpy>
    }
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004f92:	f001 fe41 	bl	8006c18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f9c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f9e:	e011      	b.n	8004fc4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d012      	beq.n	8004fce <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3324      	adds	r3, #36	; 0x24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fc99 	bl	80058e4 <xTaskRemoveFromEventList>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004fb8:	f000 fd72 	bl	8005aa0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dce9      	bgt.n	8004fa0 <prvUnlockQueue+0x16>
 8004fcc:	e000      	b.n	8004fd0 <prvUnlockQueue+0x46>
                        break;
 8004fce:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	22ff      	movs	r2, #255	; 0xff
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004fd8:	f001 fe4e 	bl	8006c78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004fdc:	f001 fe1c 	bl	8006c18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fe8:	e011      	b.n	800500e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fc74 	bl	80058e4 <xTaskRemoveFromEventList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005002:	f000 fd4d 	bl	8005aa0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	3b01      	subs	r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800500e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dce9      	bgt.n	8004fea <prvUnlockQueue+0x60>
 8005016:	e000      	b.n	800501a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005018:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	22ff      	movs	r2, #255	; 0xff
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005022:	f001 fe29 	bl	8006c78 <vPortExitCritical>
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005036:	f001 fdef 	bl	8006c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e001      	b.n	800504c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800504c:	f001 fe14 	bl	8006c78 <vPortExitCritical>

    return xReturn;
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005062:	f001 fdd9 	bl	8006c18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506e:	429a      	cmp	r2, r3
 8005070:	d102      	bne.n	8005078 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005072:	2301      	movs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e001      	b.n	800507c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800507c:	f001 fdfc 	bl	8006c78 <vPortExitCritical>

    return xReturn;
 8005080:	68fb      	ldr	r3, [r7, #12]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800508a:	b480      	push	{r7}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	60fb      	str	r3, [r7, #12]
    }
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d102      	bne.n	80050c4 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e001      	b.n	80050c8 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80050c8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80050ca:	4618      	mov	r0, r3
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	e014      	b.n	8005112 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050e8:	4a0f      	ldr	r2, [pc, #60]	; (8005128 <vQueueAddToRegistry+0x50>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050f4:	490c      	ldr	r1, [pc, #48]	; (8005128 <vQueueAddToRegistry+0x50>)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80050fe:	4a0a      	ldr	r2, [pc, #40]	; (8005128 <vQueueAddToRegistry+0x50>)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800510a:	e006      	b.n	800511a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b07      	cmp	r3, #7
 8005116:	d9e7      	bls.n	80050e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000c54 	.word	0x20000c54

0800512c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800513c:	f001 fd6c 	bl	8006c18 <vPortEnterCritical>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005146:	b25b      	sxtb	r3, r3
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d103      	bne.n	8005156 <vQueueWaitForMessageRestricted+0x2a>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515c:	b25b      	sxtb	r3, r3
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d103      	bne.n	800516c <vQueueWaitForMessageRestricted+0x40>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800516c:	f001 fd84 	bl	8006c78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3324      	adds	r3, #36	; 0x24
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fb83 	bl	800588c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f7ff feff 	bl	8004f8a <prvUnlockQueue>
    }
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005194:	b580      	push	{r7, lr}
 8005196:	b08c      	sub	sp, #48	; 0x30
 8005198:	af04      	add	r7, sp, #16
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fe57 	bl	8006e5c <pvPortMalloc>
 80051ae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051b6:	2058      	movs	r0, #88	; 0x58
 80051b8:	f001 fe50 	bl	8006e5c <pvPortMalloc>
 80051bc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ca:	e005      	b.n	80051d8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80051cc:	6978      	ldr	r0, [r7, #20]
 80051ce:	f001 ff25 	bl	800701c <vPortFree>
 80051d2:	e001      	b.n	80051d8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d013      	beq.n	8005206 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	2300      	movs	r3, #0
 80051e2:	9303      	str	r3, [sp, #12]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	9302      	str	r3, [sp, #8]
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f80e 	bl	8005216 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80051fa:	69f8      	ldr	r0, [r7, #28]
 80051fc:	f000 f8a2 	bl	8005344 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005200:	2301      	movs	r3, #1
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	e002      	b.n	800520c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800520c:	69bb      	ldr	r3, [r7, #24]
    }
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b088      	sub	sp, #32
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
 8005222:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	461a      	mov	r2, r3
 800522e:	21a5      	movs	r1, #165	; 0xa5
 8005230:	f008 fb96 	bl	800d960 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800523e:	3b01      	subs	r3, #1
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f023 0307 	bic.w	r3, r3, #7
 800524c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	617b      	str	r3, [r7, #20]
    }
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01f      	beq.n	80052b4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e012      	b.n	80052a0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	7819      	ldrb	r1, [r3, #0]
 8005282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	3334      	adds	r3, #52	; 0x34
 800528a:	460a      	mov	r2, r1
 800528c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d006      	beq.n	80052a8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3301      	adds	r3, #1
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b09      	cmp	r3, #9
 80052a4:	d9e9      	bls.n	800527a <prvInitialiseNewTask+0x64>
 80052a6:	e000      	b.n	80052aa <prvInitialiseNewTask+0x94>
            {
                break;
 80052a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052b2:	e003      	b.n	80052bc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d901      	bls.n	80052c6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052c2:	2304      	movs	r3, #4
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2200      	movs	r2, #0
 80052d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	3304      	adds	r3, #4
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff f910 	bl	8004502 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	3318      	adds	r3, #24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff f90b 	bl	8004502 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	f1c3 0205 	rsb	r2, r3, #5
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	3350      	adds	r3, #80	; 0x50
 8005306:	2204      	movs	r2, #4
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f008 fb28 	bl	800d960 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	3354      	adds	r3, #84	; 0x54
 8005314:	2201      	movs	r2, #1
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f008 fb21 	bl	800d960 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	69b8      	ldr	r0, [r7, #24]
 8005324:	f001 fb48 	bl	80069b8 <pxPortInitialiseStack>
 8005328:	4602      	mov	r2, r0
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005338:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800533a:	bf00      	nop
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800534c:	f001 fc64 	bl	8006c18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005350:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <prvAddNewTaskToReadyList+0xc0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <prvAddNewTaskToReadyList+0xc0>)
 8005358:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005362:	4a29      	ldr	r2, [pc, #164]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <prvAddNewTaskToReadyList+0xc0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d110      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005370:	f000 fbba 	bl	8005ae8 <prvInitialiseTaskLists>
 8005374:	e00d      	b.n	8005392 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005376:	4b25      	ldr	r3, [pc, #148]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800537e:	4b22      	ldr	r3, [pc, #136]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	429a      	cmp	r2, r3
 800538a:	d802      	bhi.n	8005392 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800538c:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005392:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <prvAddNewTaskToReadyList+0xcc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <prvAddNewTaskToReadyList+0xcc>)
 800539a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800539c:	4b1c      	ldr	r3, [pc, #112]	; (8005410 <prvAddNewTaskToReadyList+0xcc>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	2201      	movs	r2, #1
 80053aa:	409a      	lsls	r2, r3
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <prvAddNewTaskToReadyList+0xd0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	4a18      	ldr	r2, [pc, #96]	; (8005414 <prvAddNewTaskToReadyList+0xd0>)
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <prvAddNewTaskToReadyList+0xd4>)
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7ff f8a5 	bl	800451c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80053d2:	f001 fc51 	bl	8006c78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d207      	bcs.n	80053fc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <prvAddNewTaskToReadyList+0xd8>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000d6c 	.word	0x20000d6c
 8005408:	20000c94 	.word	0x20000c94
 800540c:	20000d78 	.word	0x20000d78
 8005410:	20000d88 	.word	0x20000d88
 8005414:	20000d74 	.word	0x20000d74
 8005418:	20000c98 	.word	0x20000c98
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <vTaskStartScheduler+0x88>)
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	2282      	movs	r2, #130	; 0x82
 8005432:	491e      	ldr	r1, [pc, #120]	; (80054ac <vTaskStartScheduler+0x8c>)
 8005434:	481e      	ldr	r0, [pc, #120]	; (80054b0 <vTaskStartScheduler+0x90>)
 8005436:	f7ff fead 	bl	8005194 <xTaskCreate>
 800543a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d102      	bne.n	8005448 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005442:	f000 ff4b 	bl	80062dc <xTimerCreateTimerTask>
 8005446:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d116      	bne.n	800547c <vTaskStartScheduler+0x5c>
        __asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	60bb      	str	r3, [r7, #8]
    }
 8005460:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005462:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <vTaskStartScheduler+0x94>)
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <vTaskStartScheduler+0x98>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <vTaskStartScheduler+0x9c>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005476:	f001 fb2d 	bl	8006ad4 <xPortStartScheduler>
 800547a:	e00e      	b.n	800549a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d10a      	bne.n	800549a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	607b      	str	r3, [r7, #4]
    }
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <vTaskStartScheduler+0xa0>)
 800549c:	681b      	ldr	r3, [r3, #0]
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000d90 	.word	0x20000d90
 80054ac:	08013630 	.word	0x08013630
 80054b0:	08005ab9 	.word	0x08005ab9
 80054b4:	20000d8c 	.word	0x20000d8c
 80054b8:	20000d78 	.word	0x20000d78
 80054bc:	20000d70 	.word	0x20000d70
 80054c0:	20000038 	.word	0x20000038

080054c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <vTaskSuspendAll+0x18>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a03      	ldr	r2, [pc, #12]	; (80054dc <vTaskSuspendAll+0x18>)
 80054d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000d94 	.word	0x20000d94

080054e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80054ee:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <xTaskResumeAll+0x114>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskResumeAll+0x2c>
        __asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	603b      	str	r3, [r7, #0]
    }
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800550c:	f001 fb84 	bl	8006c18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005510:	4b38      	ldr	r3, [pc, #224]	; (80055f4 <xTaskResumeAll+0x114>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a37      	ldr	r2, [pc, #220]	; (80055f4 <xTaskResumeAll+0x114>)
 8005518:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551a:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <xTaskResumeAll+0x114>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d161      	bne.n	80055e6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005522:	4b35      	ldr	r3, [pc, #212]	; (80055f8 <xTaskResumeAll+0x118>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d05d      	beq.n	80055e6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552a:	e02e      	b.n	800558a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552c:	4b33      	ldr	r3, [pc, #204]	; (80055fc <xTaskResumeAll+0x11c>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f84c 	bl	80045d6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff f847 	bl	80045d6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	2201      	movs	r2, #1
 800554e:	409a      	lsls	r2, r3
 8005550:	4b2b      	ldr	r3, [pc, #172]	; (8005600 <xTaskResumeAll+0x120>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <xTaskResumeAll+0x120>)
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <xTaskResumeAll+0x124>)
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fe ffd3 	bl	800451c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557a:	4b23      	ldr	r3, [pc, #140]	; (8005608 <xTaskResumeAll+0x128>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	429a      	cmp	r2, r3
 8005582:	d302      	bcc.n	800558a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005584:	4b21      	ldr	r3, [pc, #132]	; (800560c <xTaskResumeAll+0x12c>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800558a:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <xTaskResumeAll+0x11c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1cc      	bne.n	800552c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005598:	f000 fb24 	bl	8005be4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <xTaskResumeAll+0x130>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d010      	beq.n	80055ca <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80055a8:	f000 f846 	bl	8005638 <xTaskIncrementTick>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <xTaskResumeAll+0x12c>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f1      	bne.n	80055a8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <xTaskResumeAll+0x130>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80055ca:	4b10      	ldr	r3, [pc, #64]	; (800560c <xTaskResumeAll+0x12c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80055d2:	2301      	movs	r3, #1
 80055d4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <xTaskResumeAll+0x134>)
 80055d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80055e6:	f001 fb47 	bl	8006c78 <vPortExitCritical>

    return xAlreadyYielded;
 80055ea:	68bb      	ldr	r3, [r7, #8]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000d94 	.word	0x20000d94
 80055f8:	20000d6c 	.word	0x20000d6c
 80055fc:	20000d2c 	.word	0x20000d2c
 8005600:	20000d74 	.word	0x20000d74
 8005604:	20000c98 	.word	0x20000c98
 8005608:	20000c94 	.word	0x20000c94
 800560c:	20000d80 	.word	0x20000d80
 8005610:	20000d7c 	.word	0x20000d7c
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <xTaskGetTickCount+0x1c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005624:	687b      	ldr	r3, [r7, #4]
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000d70 	.word	0x20000d70

08005638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <xTaskIncrementTick+0x128>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d17f      	bne.n	800574a <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800564a:	4b46      	ldr	r3, [pc, #280]	; (8005764 <xTaskIncrementTick+0x12c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005652:	4a44      	ldr	r2, [pc, #272]	; (8005764 <xTaskIncrementTick+0x12c>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d120      	bne.n	80056a0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800565e:	4b42      	ldr	r3, [pc, #264]	; (8005768 <xTaskIncrementTick+0x130>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <xTaskIncrementTick+0x46>
        __asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	603b      	str	r3, [r7, #0]
    }
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <xTaskIncrementTick+0x44>
 800567e:	4b3a      	ldr	r3, [pc, #232]	; (8005768 <xTaskIncrementTick+0x130>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	4b39      	ldr	r3, [pc, #228]	; (800576c <xTaskIncrementTick+0x134>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a37      	ldr	r2, [pc, #220]	; (8005768 <xTaskIncrementTick+0x130>)
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4a37      	ldr	r2, [pc, #220]	; (800576c <xTaskIncrementTick+0x134>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b37      	ldr	r3, [pc, #220]	; (8005770 <xTaskIncrementTick+0x138>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	4a35      	ldr	r2, [pc, #212]	; (8005770 <xTaskIncrementTick+0x138>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	f000 faa2 	bl	8005be4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80056a0:	4b34      	ldr	r3, [pc, #208]	; (8005774 <xTaskIncrementTick+0x13c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d348      	bcc.n	800573c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <xTaskIncrementTick+0x130>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b4:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <xTaskIncrementTick+0x13c>)
 80056b6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ba:	601a      	str	r2, [r3, #0]
                    break;
 80056bc:	e03e      	b.n	800573c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <xTaskIncrementTick+0x130>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d203      	bcs.n	80056de <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80056d6:	4a27      	ldr	r2, [pc, #156]	; (8005774 <xTaskIncrementTick+0x13c>)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056dc:	e02e      	b.n	800573c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe ff77 	bl	80045d6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3318      	adds	r3, #24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe ff6e 	bl	80045d6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	2201      	movs	r2, #1
 8005700:	409a      	lsls	r2, r3
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <xTaskIncrementTick+0x140>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4313      	orrs	r3, r2
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <xTaskIncrementTick+0x140>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <xTaskIncrementTick+0x144>)
 800571a:	441a      	add	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7fe fefa 	bl	800451c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <xTaskIncrementTick+0x148>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	429a      	cmp	r2, r3
 8005734:	d3b9      	bcc.n	80056aa <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8005736:	2301      	movs	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800573a:	e7b6      	b.n	80056aa <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <xTaskIncrementTick+0x14c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e004      	b.n	8005754 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800574a:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <xTaskIncrementTick+0x150>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <xTaskIncrementTick+0x150>)
 8005752:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005754:	697b      	ldr	r3, [r7, #20]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000d94 	.word	0x20000d94
 8005764:	20000d70 	.word	0x20000d70
 8005768:	20000d24 	.word	0x20000d24
 800576c:	20000d28 	.word	0x20000d28
 8005770:	20000d84 	.word	0x20000d84
 8005774:	20000d8c 	.word	0x20000d8c
 8005778:	20000d74 	.word	0x20000d74
 800577c:	20000c98 	.word	0x20000c98
 8005780:	20000c94 	.word	0x20000c94
 8005784:	20000d80 	.word	0x20000d80
 8005788:	20000d7c 	.word	0x20000d7c

0800578c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005792:	4b27      	ldr	r3, [pc, #156]	; (8005830 <vTaskSwitchContext+0xa4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800579a:	4b26      	ldr	r3, [pc, #152]	; (8005834 <vTaskSwitchContext+0xa8>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80057a0:	e03f      	b.n	8005822 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <vTaskSwitchContext+0xa8>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a8:	4b23      	ldr	r3, [pc, #140]	; (8005838 <vTaskSwitchContext+0xac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	fab3 f383 	clz	r3, r3
 80057b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	f1c3 031f 	rsb	r3, r3, #31
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	491f      	ldr	r1, [pc, #124]	; (800583c <vTaskSwitchContext+0xb0>)
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	607b      	str	r3, [r7, #4]
    }
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <vTaskSwitchContext+0x5a>
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4a12      	ldr	r2, [pc, #72]	; (800583c <vTaskSwitchContext+0xb0>)
 80057f4:	4413      	add	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3308      	adds	r3, #8
 800580a:	429a      	cmp	r2, r3
 800580c:	d104      	bne.n	8005818 <vTaskSwitchContext+0x8c>
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4a08      	ldr	r2, [pc, #32]	; (8005840 <vTaskSwitchContext+0xb4>)
 8005820:	6013      	str	r3, [r2, #0]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000d94 	.word	0x20000d94
 8005834:	20000d80 	.word	0x20000d80
 8005838:	20000d74 	.word	0x20000d74
 800583c:	20000c98 	.word	0x20000c98
 8005840:	20000c94 	.word	0x20000c94

08005844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60fb      	str	r3, [r7, #12]
    }
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <vTaskPlaceOnEventList+0x44>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3318      	adds	r3, #24
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe fe76 	bl	8004564 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005878:	2101      	movs	r1, #1
 800587a:	6838      	ldr	r0, [r7, #0]
 800587c:	f000 fcc8 	bl	8006210 <prvAddCurrentTaskToDelayedList>
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000c94 	.word	0x20000c94

0800588c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	617b      	str	r3, [r7, #20]
    }
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3318      	adds	r3, #24
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7fe fe2d 	bl	800451c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	68b8      	ldr	r0, [r7, #8]
 80058d2:	f000 fc9d 	bl	8006210 <prvAddCurrentTaskToDelayedList>
    }
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000c94 	.word	0x20000c94

080058e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	60fb      	str	r3, [r7, #12]
    }
 800590c:	bf00      	nop
 800590e:	e7fe      	b.n	800590e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3318      	adds	r3, #24
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe fe5e 	bl	80045d6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <xTaskRemoveFromEventList+0xac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11c      	bne.n	800595c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	3304      	adds	r3, #4
 8005926:	4618      	mov	r0, r3
 8005928:	f7fe fe55 	bl	80045d6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	2201      	movs	r2, #1
 8005932:	409a      	lsls	r2, r3
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <xTaskRemoveFromEventList+0xb0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4313      	orrs	r3, r2
 800593a:	4a16      	ldr	r2, [pc, #88]	; (8005994 <xTaskRemoveFromEventList+0xb0>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <xTaskRemoveFromEventList+0xb4>)
 800594c:	441a      	add	r2, r3
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fe fde1 	bl	800451c <vListInsertEnd>
 800595a:	e005      	b.n	8005968 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3318      	adds	r3, #24
 8005960:	4619      	mov	r1, r3
 8005962:	480e      	ldr	r0, [pc, #56]	; (800599c <xTaskRemoveFromEventList+0xb8>)
 8005964:	f7fe fdda 	bl	800451c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <xTaskRemoveFromEventList+0xbc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	429a      	cmp	r2, r3
 8005974:	d905      	bls.n	8005982 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005976:	2301      	movs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <xTaskRemoveFromEventList+0xc0>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e001      	b.n	8005986 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005986:	697b      	ldr	r3, [r7, #20]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000d94 	.word	0x20000d94
 8005994:	20000d74 	.word	0x20000d74
 8005998:	20000c98 	.word	0x20000c98
 800599c:	20000d2c 	.word	0x20000d2c
 80059a0:	20000c94 	.word	0x20000c94
 80059a4:	20000d80 	.word	0x20000d80

080059a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <vTaskInternalSetTimeOutState+0x24>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <vTaskInternalSetTimeOutState+0x28>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	605a      	str	r2, [r3, #4]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000d84 	.word	0x20000d84
 80059d0:	20000d70 	.word	0x20000d70

080059d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	613b      	str	r3, [r7, #16]
    }
 80059f6:	bf00      	nop
 80059f8:	e7fe      	b.n	80059f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
    }
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005a16:	f001 f8ff 	bl	8006c18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005a1a:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <xTaskCheckForTimeOut+0xc4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d102      	bne.n	8005a3a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e026      	b.n	8005a88 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <xTaskCheckForTimeOut+0xc8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d00a      	beq.n	8005a5c <xTaskCheckForTimeOut+0x88>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d305      	bcc.n	8005a5c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005a50:	2301      	movs	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e015      	b.n	8005a88 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d20b      	bcs.n	8005a7e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	1ad2      	subs	r2, r2, r3
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff ff98 	bl	80059a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e004      	b.n	8005a88 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005a88:	f001 f8f6 	bl	8006c78 <vPortExitCritical>

    return xReturn;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3720      	adds	r7, #32
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20000d70 	.word	0x20000d70
 8005a9c:	20000d84 	.word	0x20000d84

08005aa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <vTaskMissedYield+0x14>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	20000d80 	.word	0x20000d80

08005ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005ac0:	f000 f852 	bl	8005b68 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <prvIdleTask+0x28>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d9f9      	bls.n	8005ac0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <prvIdleTask+0x2c>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005adc:	e7f0      	b.n	8005ac0 <prvIdleTask+0x8>
 8005ade:	bf00      	nop
 8005ae0:	20000c98 	.word	0x20000c98
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	e00c      	b.n	8005b0e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <prvInitialiseTaskLists+0x60>)
 8005b00:	4413      	add	r3, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fcdd 	bl	80044c2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d9ef      	bls.n	8005af4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005b14:	480d      	ldr	r0, [pc, #52]	; (8005b4c <prvInitialiseTaskLists+0x64>)
 8005b16:	f7fe fcd4 	bl	80044c2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005b1a:	480d      	ldr	r0, [pc, #52]	; (8005b50 <prvInitialiseTaskLists+0x68>)
 8005b1c:	f7fe fcd1 	bl	80044c2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005b20:	480c      	ldr	r0, [pc, #48]	; (8005b54 <prvInitialiseTaskLists+0x6c>)
 8005b22:	f7fe fcce 	bl	80044c2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005b26:	480c      	ldr	r0, [pc, #48]	; (8005b58 <prvInitialiseTaskLists+0x70>)
 8005b28:	f7fe fccb 	bl	80044c2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005b2c:	480b      	ldr	r0, [pc, #44]	; (8005b5c <prvInitialiseTaskLists+0x74>)
 8005b2e:	f7fe fcc8 	bl	80044c2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <prvInitialiseTaskLists+0x78>)
 8005b34:	4a05      	ldr	r2, [pc, #20]	; (8005b4c <prvInitialiseTaskLists+0x64>)
 8005b36:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvInitialiseTaskLists+0x7c>)
 8005b3a:	4a05      	ldr	r2, [pc, #20]	; (8005b50 <prvInitialiseTaskLists+0x68>)
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000c98 	.word	0x20000c98
 8005b4c:	20000cfc 	.word	0x20000cfc
 8005b50:	20000d10 	.word	0x20000d10
 8005b54:	20000d2c 	.word	0x20000d2c
 8005b58:	20000d40 	.word	0x20000d40
 8005b5c:	20000d58 	.word	0x20000d58
 8005b60:	20000d24 	.word	0x20000d24
 8005b64:	20000d28 	.word	0x20000d28

08005b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b6e:	e019      	b.n	8005ba4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005b70:	f001 f852 	bl	8006c18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <prvCheckTasksWaitingTermination+0x50>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe fd28 	bl	80045d6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <prvCheckTasksWaitingTermination+0x54>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <prvCheckTasksWaitingTermination+0x54>)
 8005b8e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <prvCheckTasksWaitingTermination+0x58>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <prvCheckTasksWaitingTermination+0x58>)
 8005b98:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005b9a:	f001 f86d 	bl	8006c78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f810 	bl	8005bc4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <prvCheckTasksWaitingTermination+0x58>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e1      	bne.n	8005b70 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000d40 	.word	0x20000d40
 8005bbc:	20000d6c 	.word	0x20000d6c
 8005bc0:	20000d54 	.word	0x20000d54

08005bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fa23 	bl	800701c <vPortFree>
                vPortFree( pxTCB );
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 fa20 	bl	800701c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <prvResetNextTaskUnblockTime+0x30>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <prvResetNextTaskUnblockTime+0x34>)
 8005bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005bfa:	e005      	b.n	8005c08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <prvResetNextTaskUnblockTime+0x30>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <prvResetNextTaskUnblockTime+0x34>)
 8005c06:	6013      	str	r3, [r2, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000d24 	.word	0x20000d24
 8005c18:	20000d8c 	.word	0x20000d8c

08005c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <xTaskGetSchedulerState+0x34>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	e008      	b.n	8005c42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c30:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <xTaskGetSchedulerState+0x38>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e001      	b.n	8005c42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005c42:	687b      	ldr	r3, [r7, #4]
    }
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20000d78 	.word	0x20000d78
 8005c54:	20000d94 	.word	0x20000d94

08005c58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d063      	beq.n	8005d36 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <xTaskPriorityDisinherit+0xe8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d00a      	beq.n	8005c8e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
    }
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60bb      	str	r3, [r7, #8]
    }
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb0:	1e5a      	subs	r2, r3, #1
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d039      	beq.n	8005d36 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d135      	bne.n	8005d36 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fc81 	bl	80045d6 <uxListRemove>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43da      	mvns	r2, r3
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <xTaskPriorityDisinherit+0xec>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4013      	ands	r3, r2
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <xTaskPriorityDisinherit+0xec>)
 8005cee:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f1c3 0205 	rsb	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	2201      	movs	r2, #1
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <xTaskPriorityDisinherit+0xec>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <xTaskPriorityDisinherit+0xec>)
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <xTaskPriorityDisinherit+0xf0>)
 8005d24:	441a      	add	r2, r3
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f7fe fbf5 	bl	800451c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005d36:	697b      	ldr	r3, [r7, #20]
    }
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000c94 	.word	0x20000c94
 8005d44:	20000d74 	.word	0x20000d74
 8005d48:	20000c98 	.word	0x20000c98

08005d4c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
    }
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005d76:	f000 ff4f 	bl	8006c18 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005d7a:	4b32      	ldr	r3, [pc, #200]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	3354      	adds	r3, #84	; 0x54
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d022      	beq.n	8005dd2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	3214      	adds	r2, #20
 8005d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	43d2      	mvns	r2, r2
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	3214      	adds	r2, #20
 8005da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005da6:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	3354      	adds	r3, #84	; 0x54
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005dba:	2101      	movs	r1, #1
 8005dbc:	6a38      	ldr	r0, [r7, #32]
 8005dbe:	f000 fa27 	bl	8006210 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005dc2:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <xTaskGenericNotifyWait+0xfc>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005dd2:	f000 ff51 	bl	8006c78 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005dd6:	f000 ff1f 	bl	8006c18 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005de0:	4b18      	ldr	r3, [pc, #96]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	3214      	adds	r2, #20
 8005de8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005df0:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	3354      	adds	r3, #84	; 0x54
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d002      	beq.n	8005e08 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e00e      	b.n	8005e26 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	3214      	adds	r2, #20
 8005e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	43d2      	mvns	r2, r2
 8005e18:	4011      	ands	r1, r2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	3214      	adds	r2, #20
 8005e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <xTaskGenericNotifyWait+0xf8>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3354      	adds	r3, #84	; 0x54
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005e34:	f000 ff20 	bl	8006c78 <vPortExitCritical>

        return xReturn;
 8005e38:	697b      	ldr	r3, [r7, #20]
    }
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000c94 	.word	0x20000c94
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08c      	sub	sp, #48	; 0x30
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <xTaskGenericNotify+0x2e>
        __asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	623b      	str	r3, [r7, #32]
    }
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xTaskGenericNotify+0x4a>
        __asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61fb      	str	r3, [r7, #28]
    }
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8005e9a:	f000 febd 	bl	8006c18 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d006      	beq.n	8005eb2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	3214      	adds	r2, #20
 8005eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3354      	adds	r3, #84	; 0x54
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	3354      	adds	r3, #84	; 0x54
 8005ec8:	2202      	movs	r2, #2
 8005eca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d83b      	bhi.n	8005f4a <xTaskGenericNotify+0xfe>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <xTaskGenericNotify+0x8c>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f69 	.word	0x08005f69
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f21 	.word	0x08005f21
 8005ee8:	08005f2f 	.word	0x08005f2f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	3214      	adds	r2, #20
 8005ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	ea42 0103 	orr.w	r1, r2, r3
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	3214      	adds	r2, #20
 8005f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005f06:	e032      	b.n	8005f6e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	3214      	adds	r2, #20
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	3214      	adds	r2, #20
 8005f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005f1e:	e026      	b.n	8005f6e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	3214      	adds	r2, #20
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005f2c:	e01f      	b.n	8005f6e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d006      	beq.n	8005f44 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	3214      	adds	r2, #20
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005f42:	e014      	b.n	8005f6e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8005f48:	e011      	b.n	8005f6e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005f4a:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <xTaskGenericNotify+0x1ac>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <xTaskGenericNotify+0x120>
        __asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	61bb      	str	r3, [r7, #24]
    }
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xTaskGenericNotify+0x11a>
                    break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <xTaskGenericNotify+0x122>

                    break;
 8005f6c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d139      	bne.n	8005fea <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fb2b 	bl	80045d6 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	409a      	lsls	r2, r3
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <xTaskGenericNotify+0x1b0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <xTaskGenericNotify+0x1b0>)
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <xTaskGenericNotify+0x1b4>)
 8005fa0:	441a      	add	r2, r3
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f7fe fab7 	bl	800451c <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <xTaskGenericNotify+0x180>
        __asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	617b      	str	r3, [r7, #20]
    }
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <xTaskGenericNotify+0x1b8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d907      	bls.n	8005fea <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <xTaskGenericNotify+0x1bc>)
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005fea:	f000 fe45 	bl	8006c78 <vPortExitCritical>

        return xReturn;
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3730      	adds	r7, #48	; 0x30
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000d70 	.word	0x20000d70
 8005ffc:	20000d74 	.word	0x20000d74
 8006000:	20000c98 	.word	0x20000c98
 8006004:	20000c94 	.word	0x20000c94
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800600c:	b580      	push	{r7, lr}
 800600e:	b090      	sub	sp, #64	; 0x40
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800601a:	2301      	movs	r3, #1
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006056:	f000 fec1 	bl	8006ddc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800605e:	f3ef 8211 	mrs	r2, BASEPRI
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	627a      	str	r2, [r7, #36]	; 0x24
 8006074:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	2b00      	cmp	r3, #0
 800607e:	d006      	beq.n	800608e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	3214      	adds	r2, #20
 8006086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800608a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800608e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	3354      	adds	r3, #84	; 0x54
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800609c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4413      	add	r3, r2
 80060a2:	3354      	adds	r3, #84	; 0x54
 80060a4:	2202      	movs	r2, #2
 80060a6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d83b      	bhi.n	8006126 <xTaskGenericNotifyFromISR+0x11a>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <xTaskGenericNotifyFromISR+0xa8>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	08006145 	.word	0x08006145
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060e5 	.word	0x080060e5
 80060c0:	080060fd 	.word	0x080060fd
 80060c4:	0800610b 	.word	0x0800610b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	3214      	adds	r2, #20
 80060ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	ea42 0103 	orr.w	r1, r2, r3
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	3214      	adds	r2, #20
 80060de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060e2:	e032      	b.n	800614a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	3214      	adds	r2, #20
 80060ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	3214      	adds	r2, #20
 80060f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060fa:	e026      	b.n	800614a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	3214      	adds	r2, #20
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006108:	e01f      	b.n	800614a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800610a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800610e:	2b02      	cmp	r3, #2
 8006110:	d006      	beq.n	8006120 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	3214      	adds	r2, #20
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800611e:	e014      	b.n	800614a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006120:	2300      	movs	r3, #0
 8006122:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006124:	e011      	b.n	800614a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006126:	4b33      	ldr	r3, [pc, #204]	; (80061f4 <xTaskGenericNotifyFromISR+0x1e8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	61fb      	str	r3, [r7, #28]
    }
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006144:	bf00      	nop
 8006146:	e000      	b.n	800614a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006148:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800614a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800614e:	2b01      	cmp	r3, #1
 8006150:	d145      	bne.n	80061de <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	61bb      	str	r3, [r7, #24]
    }
 800616c:	bf00      	nop
 800616e:	e7fe      	b.n	800616e <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006170:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <xTaskGenericNotifyFromISR+0x1ec>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11c      	bne.n	80061b2 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fa2a 	bl	80045d6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	2201      	movs	r2, #1
 8006188:	409a      	lsls	r2, r3
 800618a:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <xTaskGenericNotifyFromISR+0x1f0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <xTaskGenericNotifyFromISR+0x1f0>)
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4a17      	ldr	r2, [pc, #92]	; (8006200 <xTaskGenericNotifyFromISR+0x1f4>)
 80061a2:	441a      	add	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	3304      	adds	r3, #4
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f7fe f9b6 	bl	800451c <vListInsertEnd>
 80061b0:	e005      	b.n	80061be <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	3318      	adds	r3, #24
 80061b6:	4619      	mov	r1, r3
 80061b8:	4812      	ldr	r0, [pc, #72]	; (8006204 <xTaskGenericNotifyFromISR+0x1f8>)
 80061ba:	f7fe f9af 	bl	800451c <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <xTaskGenericNotifyFromISR+0x1fc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d908      	bls.n	80061de <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80061cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80061d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <xTaskGenericNotifyFromISR+0x200>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f383 8811 	msr	BASEPRI, r3
    }
 80061e8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80061ec:	4618      	mov	r0, r3
 80061ee:	3740      	adds	r7, #64	; 0x40
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000d70 	.word	0x20000d70
 80061f8:	20000d94 	.word	0x20000d94
 80061fc:	20000d74 	.word	0x20000d74
 8006200:	20000c98 	.word	0x20000c98
 8006204:	20000d2c 	.word	0x20000d2c
 8006208:	20000c94 	.word	0x20000c94
 800620c:	20000d80 	.word	0x20000d80

08006210 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800621a:	4b29      	ldr	r3, [pc, #164]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006220:	4b28      	ldr	r3, [pc, #160]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3304      	adds	r3, #4
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe f9d5 	bl	80045d6 <uxListRemove>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006232:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	2201      	movs	r2, #1
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	43da      	mvns	r2, r3
 8006240:	4b21      	ldr	r3, [pc, #132]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4013      	ands	r3, r2
 8006246:	4a20      	ldr	r2, [pc, #128]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006248:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d10a      	bne.n	8006268 <prvAddCurrentTaskToDelayedList+0x58>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	481a      	ldr	r0, [pc, #104]	; (80062cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006262:	f7fe f95b 	bl	800451c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006266:	e026      	b.n	80062b6 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006270:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	429a      	cmp	r2, r3
 800627e:	d209      	bcs.n	8006294 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006280:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3304      	adds	r3, #4
 800628a:	4619      	mov	r1, r3
 800628c:	4610      	mov	r0, r2
 800628e:	f7fe f969 	bl	8004564 <vListInsert>
}
 8006292:	e010      	b.n	80062b6 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3304      	adds	r3, #4
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7fe f95f 	bl	8004564 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d202      	bcs.n	80062b6 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80062b0:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	6013      	str	r3, [r2, #0]
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000d70 	.word	0x20000d70
 80062c4:	20000c94 	.word	0x20000c94
 80062c8:	20000d74 	.word	0x20000d74
 80062cc:	20000d58 	.word	0x20000d58
 80062d0:	20000d28 	.word	0x20000d28
 80062d4:	20000d24 	.word	0x20000d24
 80062d8:	20000d8c 	.word	0x20000d8c

080062dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80062e6:	f000 fb31 	bl	800694c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80062ea:	4b11      	ldr	r3, [pc, #68]	; (8006330 <xTimerCreateTimerTask+0x54>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <xTimerCreateTimerTask+0x58>)
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	2302      	movs	r3, #2
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	2300      	movs	r3, #0
 80062fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006300:	490d      	ldr	r1, [pc, #52]	; (8006338 <xTimerCreateTimerTask+0x5c>)
 8006302:	480e      	ldr	r0, [pc, #56]	; (800633c <xTimerCreateTimerTask+0x60>)
 8006304:	f7fe ff46 	bl	8005194 <xTaskCreate>
 8006308:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	603b      	str	r3, [r7, #0]
    }
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006326:	687b      	ldr	r3, [r7, #4]
    }
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20000dc8 	.word	0x20000dc8
 8006334:	20000dcc 	.word	0x20000dcc
 8006338:	08013638 	.word	0x08013638
 800633c:	0800652d 	.word	0x0800652d

08006340 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006340:	b580      	push	{r7, lr}
 8006342:	b088      	sub	sp, #32
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800634e:	202c      	movs	r0, #44	; 0x2c
 8006350:	f000 fd84 	bl	8006e5c <pvPortMalloc>
 8006354:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f805 	bl	8006382 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006378:	697b      	ldr	r3, [r7, #20]
        }
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	617b      	str	r3, [r7, #20]
    }
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01e      	beq.n	80063f0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80063b2:	f000 facb 	bl	800694c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	3304      	adds	r3, #4
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe f895 	bl	8004502 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80063f0:	bf00      	nop
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	; 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006406:	2300      	movs	r3, #0
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
    }
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <xTimerGenericCommand+0x98>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02a      	beq.n	8006484 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b05      	cmp	r3, #5
 800643e:	dc18      	bgt.n	8006472 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006440:	f7ff fbec 	bl	8005c1c <xTaskGetSchedulerState>
 8006444:	4603      	mov	r3, r0
 8006446:	2b02      	cmp	r3, #2
 8006448:	d109      	bne.n	800645e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <xTimerGenericCommand+0x98>)
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	f107 0114 	add.w	r1, r7, #20
 8006452:	2300      	movs	r3, #0
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	f7fe f9d3 	bl	8004800 <xQueueGenericSend>
 800645a:	6278      	str	r0, [r7, #36]	; 0x24
 800645c:	e012      	b.n	8006484 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <xTimerGenericCommand+0x98>)
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f107 0114 	add.w	r1, r7, #20
 8006466:	2300      	movs	r3, #0
 8006468:	2200      	movs	r2, #0
 800646a:	f7fe f9c9 	bl	8004800 <xQueueGenericSend>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24
 8006470:	e008      	b.n	8006484 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <xTimerGenericCommand+0x98>)
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	f107 0114 	add.w	r1, r7, #20
 800647a:	2300      	movs	r3, #0
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	f7fe fabd 	bl	80049fc <xQueueGenericSendFromISR>
 8006482:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006486:	4618      	mov	r0, r3
 8006488:	3728      	adds	r7, #40	; 0x28
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000dc8 	.word	0x20000dc8

08006494 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649e:	4b22      	ldr	r3, [pc, #136]	; (8006528 <prvProcessExpiredTimer+0x94>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe f892 	bl	80045d6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d022      	beq.n	8006506 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	18d1      	adds	r1, r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f000 f8d1 	bl	8006674 <prvInsertTimerInActiveList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01f      	beq.n	8006518 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	2100      	movs	r1, #0
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff ff88 	bl	80063f8 <xTimerGenericCommand>
 80064e8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d113      	bne.n	8006518 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
    }
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	b2da      	uxtb	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	6978      	ldr	r0, [r7, #20]
 800651e:	4798      	blx	r3
    }
 8006520:	bf00      	nop
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000dc0 	.word	0x20000dc0

0800652c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006534:	f107 0308 	add.w	r3, r7, #8
 8006538:	4618      	mov	r0, r3
 800653a:	f000 f857 	bl	80065ec <prvGetNextExpireTime>
 800653e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4619      	mov	r1, r3
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f803 	bl	8006550 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800654a:	f000 f8d5 	bl	80066f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800654e:	e7f1      	b.n	8006534 <prvTimerTask+0x8>

08006550 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800655a:	f7fe ffb3 	bl	80054c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f866 	bl	8006634 <prvSampleTimeNow>
 8006568:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d130      	bne.n	80065d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <prvProcessTimerOrBlockTask+0x3c>
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	429a      	cmp	r2, r3
 800657c:	d806      	bhi.n	800658c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800657e:	f7fe ffaf 	bl	80054e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006582:	68f9      	ldr	r1, [r7, #12]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff ff85 	bl	8006494 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800658a:	e024      	b.n	80065d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d008      	beq.n	80065a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <prvProcessTimerOrBlockTask+0x90>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <prvProcessTimerOrBlockTask+0x50>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <prvProcessTimerOrBlockTask+0x52>
 80065a0:	2300      	movs	r3, #0
 80065a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <prvProcessTimerOrBlockTask+0x94>)
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f7fe fdbb 	bl	800512c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80065b6:	f7fe ff93 	bl	80054e0 <xTaskResumeAll>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <prvProcessTimerOrBlockTask+0x98>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
    }
 80065d0:	e001      	b.n	80065d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80065d2:	f7fe ff85 	bl	80054e0 <xTaskResumeAll>
    }
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000dc4 	.word	0x20000dc4
 80065e4:	20000dc8 	.word	0x20000dc8
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <prvGetNextExpireTime+0x44>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <prvGetNextExpireTime+0x16>
 80065fe:	2201      	movs	r2, #1
 8006600:	e000      	b.n	8006604 <prvGetNextExpireTime+0x18>
 8006602:	2200      	movs	r2, #0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <prvGetNextExpireTime+0x44>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e001      	b.n	8006620 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006620:	68fb      	ldr	r3, [r7, #12]
    }
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000dc0 	.word	0x20000dc0

08006634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800663c:	f7fe ffec 	bl	8005618 <xTaskGetTickCount>
 8006640:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <prvSampleTimeNow+0x3c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	429a      	cmp	r2, r3
 800664a:	d205      	bcs.n	8006658 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800664c:	f000 f91a 	bl	8006884 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e002      	b.n	800665e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <prvSampleTimeNow+0x3c>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006664:	68fb      	ldr	r3, [r7, #12]
    }
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000dd0 	.word	0x20000dd0

08006674 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d812      	bhi.n	80066c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d302      	bcc.n	80066ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e01b      	b.n	80066e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <prvInsertTimerInActiveList+0x7c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f7fd ff53 	bl	8004564 <vListInsert>
 80066be:	e012      	b.n	80066e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d206      	bcs.n	80066d6 <prvInsertTimerInActiveList+0x62>
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e007      	b.n	80066e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <prvInsertTimerInActiveList+0x80>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7fd ff3f 	bl	8004564 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80066e6:	697b      	ldr	r3, [r7, #20]
    }
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000dc4 	.word	0x20000dc4
 80066f4:	20000dc0 	.word	0x20000dc0

080066f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	; 0x30
 80066fc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066fe:	e0ae      	b.n	800685e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f2c0 80aa 	blt.w	800685c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	3304      	adds	r3, #4
 8006718:	4618      	mov	r0, r3
 800671a:	f7fd ff5c 	bl	80045d6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff ff87 	bl	8006634 <prvSampleTimeNow>
 8006726:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b09      	cmp	r3, #9
 800672c:	f200 8097 	bhi.w	800685e <prvProcessReceivedCommands+0x166>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <prvProcessReceivedCommands+0x40>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006761 	.word	0x08006761
 800673c:	08006761 	.word	0x08006761
 8006740:	08006761 	.word	0x08006761
 8006744:	080067d5 	.word	0x080067d5
 8006748:	080067e9 	.word	0x080067e9
 800674c:	08006833 	.word	0x08006833
 8006750:	08006761 	.word	0x08006761
 8006754:	08006761 	.word	0x08006761
 8006758:	080067d5 	.word	0x080067d5
 800675c:	080067e9 	.word	0x080067e9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	18d1      	adds	r1, r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a3a      	ldr	r2, [r7, #32]
 800677e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006780:	f7ff ff78 	bl	8006674 <prvInsertTimerInActiveList>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d069      	beq.n	800685e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006790:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d05e      	beq.n	800685e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	441a      	add	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2300      	movs	r3, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067b2:	f7ff fe21 	bl	80063f8 <xTimerGenericCommand>
 80067b6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d14f      	bne.n	800685e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	61bb      	str	r3, [r7, #24]
    }
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067da:	f023 0301 	bic.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80067e6:	e03a      	b.n	800685e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	617b      	str	r3, [r7, #20]
    }
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	18d1      	adds	r1, r2, r3
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800682c:	f7ff ff22 	bl	8006674 <prvInsertTimerInActiveList>
                        break;
 8006830:	e015      	b.n	800685e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006842:	f000 fbeb 	bl	800701c <vPortFree>
 8006846:	e00a      	b.n	800685e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	b2da      	uxtb	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800685a:	e000      	b.n	800685e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800685c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <prvProcessReceivedCommands+0x188>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f107 0108 	add.w	r1, r7, #8
 8006866:	2200      	movs	r2, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe f971 	bl	8004b50 <xQueueReceive>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f af45 	bne.w	8006700 <prvProcessReceivedCommands+0x8>
        }
    }
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	3728      	adds	r7, #40	; 0x28
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20000dc8 	.word	0x20000dc8

08006884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800688a:	e048      	b.n	800691e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800688c:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <prvSwitchTimerLists+0xc0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006896:	4b2b      	ldr	r3, [pc, #172]	; (8006944 <prvSwitchTimerLists+0xc0>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fd fe96 	bl	80045d6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02e      	beq.n	800691e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d90e      	bls.n	80068f0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <prvSwitchTimerLists+0xc0>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fd fe3b 	bl	8004564 <vListInsert>
 80068ee:	e016      	b.n	800691e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2300      	movs	r3, #0
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	2100      	movs	r1, #0
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fd7c 	bl	80063f8 <xTimerGenericCommand>
 8006900:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	603b      	str	r3, [r7, #0]
    }
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <prvSwitchTimerLists+0xc0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1b1      	bne.n	800688c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <prvSwitchTimerLists+0xc0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <prvSwitchTimerLists+0xc4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a04      	ldr	r2, [pc, #16]	; (8006944 <prvSwitchTimerLists+0xc0>)
 8006934:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006936:	4a04      	ldr	r2, [pc, #16]	; (8006948 <prvSwitchTimerLists+0xc4>)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6013      	str	r3, [r2, #0]
    }
 800693c:	bf00      	nop
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000dc0 	.word	0x20000dc0
 8006948:	20000dc4 	.word	0x20000dc4

0800694c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006950:	f000 f962 	bl	8006c18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11d      	bne.n	8006998 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800695c:	4811      	ldr	r0, [pc, #68]	; (80069a4 <prvCheckForValidListAndQueue+0x58>)
 800695e:	f7fd fdb0 	bl	80044c2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006962:	4811      	ldr	r0, [pc, #68]	; (80069a8 <prvCheckForValidListAndQueue+0x5c>)
 8006964:	f7fd fdad 	bl	80044c2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006968:	4b10      	ldr	r3, [pc, #64]	; (80069ac <prvCheckForValidListAndQueue+0x60>)
 800696a:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <prvCheckForValidListAndQueue+0x58>)
 800696c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800696e:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <prvCheckForValidListAndQueue+0x64>)
 8006970:	4a0d      	ldr	r2, [pc, #52]	; (80069a8 <prvCheckForValidListAndQueue+0x5c>)
 8006972:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006974:	2200      	movs	r2, #0
 8006976:	210c      	movs	r1, #12
 8006978:	200a      	movs	r0, #10
 800697a:	f7fd febf 	bl	80046fc <xQueueGenericCreate>
 800697e:	4603      	mov	r3, r0
 8006980:	4a07      	ldr	r2, [pc, #28]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 8006982:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800698c:	4b04      	ldr	r3, [pc, #16]	; (80069a0 <prvCheckForValidListAndQueue+0x54>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4908      	ldr	r1, [pc, #32]	; (80069b4 <prvCheckForValidListAndQueue+0x68>)
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fba0 	bl	80050d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006998:	f000 f96e 	bl	8006c78 <vPortExitCritical>
    }
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000dc8 	.word	0x20000dc8
 80069a4:	20000d98 	.word	0x20000d98
 80069a8:	20000dac 	.word	0x20000dac
 80069ac:	20000dc0 	.word	0x20000dc0
 80069b0:	20000dc4 	.word	0x20000dc4
 80069b4:	08013640 	.word	0x08013640

080069b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3b04      	subs	r3, #4
 80069c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3b04      	subs	r3, #4
 80069e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80069e8:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <pxPortInitialiseStack+0x64>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3b14      	subs	r3, #20
 80069f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3b04      	subs	r3, #4
 80069fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f06f 0202 	mvn.w	r2, #2
 8006a06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3b20      	subs	r3, #32
 8006a0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	08006a21 	.word	0x08006a21

08006a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006a2a:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <prvTaskExitError+0x54>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d00a      	beq.n	8006a4a <prvTaskExitError+0x2a>
        __asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
    }
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <prvTaskExitError+0x28>
        __asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	60bb      	str	r3, [r7, #8]
    }
 8006a5c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006a5e:	bf00      	nop
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0fc      	beq.n	8006a60 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	2000003c 	.word	0x2000003c
	...

08006a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <pxCurrentTCBConst2>)
 8006a82:	6819      	ldr	r1, [r3, #0]
 8006a84:	6808      	ldr	r0, [r1, #0]
 8006a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	f380 8809 	msr	PSP, r0
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f380 8811 	msr	BASEPRI, r0
 8006a9a:	4770      	bx	lr
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst2>:
 8006aa0:	20000c94 	.word	0x20000c94
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006aa8:	4808      	ldr	r0, [pc, #32]	; (8006acc <prvPortStartFirstTask+0x24>)
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	6800      	ldr	r0, [r0, #0]
 8006aae:	f380 8808 	msr	MSP, r0
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f380 8814 	msr	CONTROL, r0
 8006aba:	b662      	cpsie	i
 8006abc:	b661      	cpsie	f
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	df00      	svc	0
 8006ac8:	bf00      	nop
 8006aca:	0000      	.short	0x0000
 8006acc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop

08006ad4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ada:	4b46      	ldr	r3, [pc, #280]	; (8006bf4 <xPortStartScheduler+0x120>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a46      	ldr	r2, [pc, #280]	; (8006bf8 <xPortStartScheduler+0x124>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10a      	bne.n	8006afa <xPortStartScheduler+0x26>
        __asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	613b      	str	r3, [r7, #16]
    }
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006afa:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <xPortStartScheduler+0x120>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a3f      	ldr	r2, [pc, #252]	; (8006bfc <xPortStartScheduler+0x128>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d10a      	bne.n	8006b1a <xPortStartScheduler+0x46>
        __asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	60fb      	str	r3, [r7, #12]
    }
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b1a:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <xPortStartScheduler+0x12c>)
 8006b1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	22ff      	movs	r2, #255	; 0xff
 8006b2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	4b31      	ldr	r3, [pc, #196]	; (8006c04 <xPortStartScheduler+0x130>)
 8006b40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b42:	4b31      	ldr	r3, [pc, #196]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b44:	2207      	movs	r2, #7
 8006b46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b48:	e009      	b.n	8006b5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4a2d      	ldr	r2, [pc, #180]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d0ef      	beq.n	8006b4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b6a:	4b27      	ldr	r3, [pc, #156]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1c3 0307 	rsb	r3, r3, #7
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d00a      	beq.n	8006b8c <xPortStartScheduler+0xb8>
        __asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60bb      	str	r3, [r7, #8]
    }
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b8c:	4b1e      	ldr	r3, [pc, #120]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b96:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <xPortStartScheduler+0x134>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b9e:	4a1a      	ldr	r2, [pc, #104]	; (8006c08 <xPortStartScheduler+0x134>)
 8006ba0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006baa:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <xPortStartScheduler+0x138>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <xPortStartScheduler+0x138>)
 8006bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006bb6:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <xPortStartScheduler+0x138>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a14      	ldr	r2, [pc, #80]	; (8006c0c <xPortStartScheduler+0x138>)
 8006bbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006bc2:	f000 f8db 	bl	8006d7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <xPortStartScheduler+0x13c>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006bcc:	f000 f8fa 	bl	8006dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bd0:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <xPortStartScheduler+0x140>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a0f      	ldr	r2, [pc, #60]	; (8006c14 <xPortStartScheduler+0x140>)
 8006bd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006bdc:	f7ff ff64 	bl	8006aa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006be0:	f7fe fdd4 	bl	800578c <vTaskSwitchContext>
    prvTaskExitError();
 8006be4:	f7ff ff1c 	bl	8006a20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	e000ed00 	.word	0xe000ed00
 8006bf8:	410fc271 	.word	0x410fc271
 8006bfc:	410fc270 	.word	0x410fc270
 8006c00:	e000e400 	.word	0xe000e400
 8006c04:	20000dd4 	.word	0x20000dd4
 8006c08:	20000dd8 	.word	0x20000dd8
 8006c0c:	e000ed20 	.word	0xe000ed20
 8006c10:	2000003c 	.word	0x2000003c
 8006c14:	e000ef34 	.word	0xe000ef34

08006c18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	607b      	str	r3, [r7, #4]
    }
 8006c30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <vPortEnterCritical+0x58>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	4a0d      	ldr	r2, [pc, #52]	; (8006c70 <vPortEnterCritical+0x58>)
 8006c3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <vPortEnterCritical+0x58>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10f      	bne.n	8006c64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <vPortEnterCritical+0x5c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <vPortEnterCritical+0x4c>
        __asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	603b      	str	r3, [r7, #0]
    }
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <vPortEnterCritical+0x4a>
    }
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	2000003c 	.word	0x2000003c
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <vPortExitCritical+0x50>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <vPortExitCritical+0x24>
        __asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	607b      	str	r3, [r7, #4]
    }
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <vPortExitCritical+0x50>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <vPortExitCritical+0x50>)
 8006ca4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ca6:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <vPortExitCritical+0x50>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d105      	bne.n	8006cba <vPortExitCritical+0x42>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	f383 8811 	msr	BASEPRI, r3
    }
 8006cb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	2000003c 	.word	0x2000003c
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006cd0:	f3ef 8009 	mrs	r0, PSP
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <pxCurrentTCBConst>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f01e 0f10 	tst.w	lr, #16
 8006ce0:	bf08      	it	eq
 8006ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cf4:	f380 8811 	msr	BASEPRI, r0
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f7fe fd44 	bl	800578c <vTaskSwitchContext>
 8006d04:	f04f 0000 	mov.w	r0, #0
 8006d08:	f380 8811 	msr	BASEPRI, r0
 8006d0c:	bc09      	pop	{r0, r3}
 8006d0e:	6819      	ldr	r1, [r3, #0]
 8006d10:	6808      	ldr	r0, [r1, #0]
 8006d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d16:	f01e 0f10 	tst.w	lr, #16
 8006d1a:	bf08      	it	eq
 8006d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d20:	f380 8809 	msr	PSP, r0
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst>:
 8006d30:	20000c94 	.word	0x20000c94
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
    }
 8006d50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d52:	f7fe fc71 	bl	8005638 <xTaskIncrementTick>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <SysTick_Handler+0x40>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
    }
 8006d6e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <vPortSetupTimerInterrupt+0x38>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <vPortSetupTimerInterrupt+0x3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <vPortSetupTimerInterrupt+0x40>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <vPortSetupTimerInterrupt+0x44>)
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d9e:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e010 	.word	0xe000e010
 8006db4:	e000e018 	.word	0xe000e018
 8006db8:	20000000 	.word	0x20000000
 8006dbc:	10624dd3 	.word	0x10624dd3
 8006dc0:	e000e014 	.word	0xe000e014

08006dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006dd4 <vPortEnableVFP+0x10>
 8006dc8:	6801      	ldr	r1, [r0, #0]
 8006dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dce:	6001      	str	r1, [r0, #0]
 8006dd0:	4770      	bx	lr
 8006dd2:	0000      	.short	0x0000
 8006dd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop

08006ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006de2:	f3ef 8305 	mrs	r3, IPSR
 8006de6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d914      	bls.n	8006e18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dee:	4a17      	ldr	r2, [pc, #92]	; (8006e4c <vPortValidateInterruptPriority+0x70>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006df8:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <vPortValidateInterruptPriority+0x74>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	7afa      	ldrb	r2, [r7, #11]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d20a      	bcs.n	8006e18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	607b      	str	r3, [r7, #4]
    }
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <vPortValidateInterruptPriority+0x78>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e20:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <vPortValidateInterruptPriority+0x7c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d90a      	bls.n	8006e3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	603b      	str	r3, [r7, #0]
    }
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <vPortValidateInterruptPriority+0x60>
    }
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	e000e3f0 	.word	0xe000e3f0
 8006e50:	20000dd4 	.word	0x20000dd4
 8006e54:	e000ed0c 	.word	0xe000ed0c
 8006e58:	20000dd8 	.word	0x20000dd8

08006e5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006e68:	f7fe fb2c 	bl	80054c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006e6c:	4b65      	ldr	r3, [pc, #404]	; (8007004 <pvPortMalloc+0x1a8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006e74:	f000 f934 	bl	80070e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e78:	4b63      	ldr	r3, [pc, #396]	; (8007008 <pvPortMalloc+0x1ac>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 80a7 	bne.w	8006fd4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02d      	beq.n	8006ee8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d227      	bcs.n	8006ee8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006e98:	2208      	movs	r2, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d021      	beq.n	8006eee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f023 0307 	bic.w	r3, r3, #7
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d214      	bcs.n	8006ee2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f023 0307 	bic.w	r3, r3, #7
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d010      	beq.n	8006eee <pvPortMalloc+0x92>
        __asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	617b      	str	r3, [r7, #20]
    }
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ee6:	e002      	b.n	8006eee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	607b      	str	r3, [r7, #4]
 8006eec:	e000      	b.n	8006ef0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d06e      	beq.n	8006fd4 <pvPortMalloc+0x178>
 8006ef6:	4b45      	ldr	r3, [pc, #276]	; (800700c <pvPortMalloc+0x1b0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d869      	bhi.n	8006fd4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006f00:	4b43      	ldr	r3, [pc, #268]	; (8007010 <pvPortMalloc+0x1b4>)
 8006f02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006f04:	4b42      	ldr	r3, [pc, #264]	; (8007010 <pvPortMalloc+0x1b4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f0a:	e004      	b.n	8006f16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d903      	bls.n	8006f28 <pvPortMalloc+0xcc>
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f1      	bne.n	8006f0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f28:	4b36      	ldr	r3, [pc, #216]	; (8007004 <pvPortMalloc+0x1a8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d050      	beq.n	8006fd4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2208      	movs	r2, #8
 8006f38:	4413      	add	r3, r2
 8006f3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	1ad2      	subs	r2, r2, r3
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d91f      	bls.n	8006f94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <pvPortMalloc+0x120>
        __asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	613b      	str	r3, [r7, #16]
    }
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f8e:	69b8      	ldr	r0, [r7, #24]
 8006f90:	f000 f908 	bl	80071a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f94:	4b1d      	ldr	r3, [pc, #116]	; (800700c <pvPortMalloc+0x1b0>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	4a1b      	ldr	r2, [pc, #108]	; (800700c <pvPortMalloc+0x1b0>)
 8006fa0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fa2:	4b1a      	ldr	r3, [pc, #104]	; (800700c <pvPortMalloc+0x1b0>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <pvPortMalloc+0x1b8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d203      	bcs.n	8006fb6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fae:	4b17      	ldr	r3, [pc, #92]	; (800700c <pvPortMalloc+0x1b0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a18      	ldr	r2, [pc, #96]	; (8007014 <pvPortMalloc+0x1b8>)
 8006fb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <pvPortMalloc+0x1ac>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <pvPortMalloc+0x1bc>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	4a11      	ldr	r2, [pc, #68]	; (8007018 <pvPortMalloc+0x1bc>)
 8006fd2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006fd4:	f7fe fa84 	bl	80054e0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <pvPortMalloc+0x19c>
        __asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60fb      	str	r3, [r7, #12]
    }
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <pvPortMalloc+0x19a>
    return pvReturn;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3728      	adds	r7, #40	; 0x28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	2000d5e4 	.word	0x2000d5e4
 8007008:	2000d5f8 	.word	0x2000d5f8
 800700c:	2000d5e8 	.word	0x2000d5e8
 8007010:	2000d5dc 	.word	0x2000d5dc
 8007014:	2000d5ec 	.word	0x2000d5ec
 8007018:	2000d5f0 	.word	0x2000d5f0

0800701c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d04d      	beq.n	80070ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800702e:	2308      	movs	r3, #8
 8007030:	425b      	negs	r3, r3
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	4413      	add	r3, r2
 8007036:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b24      	ldr	r3, [pc, #144]	; (80070d4 <vPortFree+0xb8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4013      	ands	r3, r2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <vPortFree+0x44>
        __asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60fb      	str	r3, [r7, #12]
    }
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <vPortFree+0x62>
        __asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60bb      	str	r3, [r7, #8]
    }
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	4b14      	ldr	r3, [pc, #80]	; (80070d4 <vPortFree+0xb8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4013      	ands	r3, r2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01e      	beq.n	80070ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11a      	bne.n	80070ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <vPortFree+0xb8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	43db      	mvns	r3, r3
 800709e:	401a      	ands	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80070a4:	f7fe fa0e 	bl	80054c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <vPortFree+0xbc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <vPortFree+0xbc>)
 80070b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070b6:	6938      	ldr	r0, [r7, #16]
 80070b8:	f000 f874 	bl	80071a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80070bc:	4b07      	ldr	r3, [pc, #28]	; (80070dc <vPortFree+0xc0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3301      	adds	r3, #1
 80070c2:	4a06      	ldr	r2, [pc, #24]	; (80070dc <vPortFree+0xc0>)
 80070c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80070c6:	f7fe fa0b 	bl	80054e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	2000d5f8 	.word	0x2000d5f8
 80070d8:	2000d5e8 	.word	0x2000d5e8
 80070dc:	2000d5f4 	.word	0x2000d5f4

080070e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070e6:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80070ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80070ec:	4b27      	ldr	r3, [pc, #156]	; (800718c <prvHeapInit+0xac>)
 80070ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3307      	adds	r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0307 	bic.w	r3, r3, #7
 8007106:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	4a1f      	ldr	r2, [pc, #124]	; (800718c <prvHeapInit+0xac>)
 8007110:	4413      	add	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007118:	4a1d      	ldr	r2, [pc, #116]	; (8007190 <prvHeapInit+0xb0>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800711e:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <prvHeapInit+0xb0>)
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	4413      	add	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800712c:	2208      	movs	r2, #8
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1a9b      	subs	r3, r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0307 	bic.w	r3, r3, #7
 800713a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a15      	ldr	r2, [pc, #84]	; (8007194 <prvHeapInit+0xb4>)
 8007140:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <prvHeapInit+0xb4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <prvHeapInit+0xb4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	1ad2      	subs	r2, r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007160:	4b0c      	ldr	r3, [pc, #48]	; (8007194 <prvHeapInit+0xb4>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <prvHeapInit+0xb8>)
 800716e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4a09      	ldr	r2, [pc, #36]	; (800719c <prvHeapInit+0xbc>)
 8007176:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <prvHeapInit+0xc0>)
 800717a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800717e:	601a      	str	r2, [r3, #0]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000ddc 	.word	0x20000ddc
 8007190:	2000d5dc 	.word	0x2000d5dc
 8007194:	2000d5e4 	.word	0x2000d5e4
 8007198:	2000d5ec 	.word	0x2000d5ec
 800719c:	2000d5e8 	.word	0x2000d5e8
 80071a0:	2000d5f8 	.word	0x2000d5f8

080071a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071ac:	4b28      	ldr	r3, [pc, #160]	; (8007250 <prvInsertBlockIntoFreeList+0xac>)
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e002      	b.n	80071b8 <prvInsertBlockIntoFreeList+0x14>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d8f7      	bhi.n	80071b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	4413      	add	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d108      	bne.n	80071e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	441a      	add	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d118      	bne.n	800722c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <prvInsertBlockIntoFreeList+0xb0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d00d      	beq.n	8007222 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	441a      	add	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e008      	b.n	8007234 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <prvInsertBlockIntoFreeList+0xb0>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e003      	b.n	8007234 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d002      	beq.n	8007242 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	2000d5dc 	.word	0x2000d5dc
 8007254:	2000d5e4 	.word	0x2000d5e4

08007258 <findShorterWay>:
int findShorterWay(char terminalGrid[7][7],
				   char Gridcopy[7][7],
				   float matrixCosts[7][7][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[20][2]){
 8007258:	b590      	push	{r4, r7, lr}
 800725a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800725e:	af00      	add	r7, sp, #0
 8007260:	f507 7404 	add.w	r4, r7, #528	; 0x210
 8007264:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 8007268:	6020      	str	r0, [r4, #0]
 800726a:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800726e:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 8007272:	6001      	str	r1, [r0, #0]
 8007274:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007278:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800727c:	600a      	str	r2, [r1, #0]
 800727e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007282:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007286:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8007288:	49c8      	ldr	r1, [pc, #800]	; (80075ac <findShorterWay+0x354>)
 800728a:	48c9      	ldr	r0, [pc, #804]	; (80075b0 <findShorterWay+0x358>)
 800728c:	f005 ffda 	bl	800d244 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8007290:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800729c:	2300      	movs	r3, #0
 800729e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t i = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	uint8_t j = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	int position[2];
	uint8_t numberOfPositions = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	uint8_t counter = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t counterStudy = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[30][4] = {0};
 80072c0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80072c4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80072c8:	4618      	mov	r0, r3
 80072ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80072ce:	461a      	mov	r2, r3
 80072d0:	2100      	movs	r1, #0
 80072d2:	f006 fb45 	bl	800d960 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 80072d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80072da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80072de:	6818      	ldr	r0, [r3, #0]
 80072e0:	f001 fa9c 	bl	800881c <getRows>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80072ec:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80072f4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80072f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	f001 fab1 	bl	8008864 <getColums>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800730a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 8007312:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007316:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800731a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800731e:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 8007322:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007326:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	6809      	ldr	r1, [r1, #0]
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	f001 fa21 	bl	8008776 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 8007334:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007338:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800733c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007340:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007344:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007348:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007354:	6800      	ldr	r0, [r0, #0]
 8007356:	f000 ff89 	bl	800826c <setHeuristic>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <findShorterWay+0x12e>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8007360:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8007362:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007366:	f5a3 7104 	sub.w	r1, r3, #528	; 0x210
 800736a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800736e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007372:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8007376:	6809      	ldr	r1, [r1, #0]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f001 f990 	bl	800869e <findStart>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01e      	beq.n	80073c2 <findShorterWay+0x16a>
 8007384:	e002      	b.n	800738c <findShorterWay+0x134>
    	return 0;
 8007386:	2300      	movs	r3, #0
 8007388:	f000 beb6 	b.w	80080f8 <findShorterWay+0xea0>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 800738c:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 800738e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007394:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007398:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 800739a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800739e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073a4:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 80073a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073ac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073b0:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 80073b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073b8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073bc:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 80073be:	f000 bdc1 	b.w	8007f44 <findShorterWay+0xcec>
    	return 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f000 be98 	b.w	80080f8 <findShorterWay+0xea0>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 80073c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073d2:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 80073d4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073de:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80073e6:	e09a      	b.n	800751e <findShorterWay+0x2c6>
    		for (j = 0; j < 3; j++){
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80073ee:	e08c      	b.n	800750a <findShorterWay+0x2b2>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80073f0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80073fa:	4413      	add	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dd07      	ble.n	8007410 <findShorterWay+0x1b8>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 8007400:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800740a:	4413      	add	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	dc0e      	bgt.n	800742e <findShorterWay+0x1d6>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 8007410:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007414:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007422:	443b      	add	r3, r7
 8007424:	440b      	add	r3, r1
 8007426:	3b18      	subs	r3, #24
 8007428:	2230      	movs	r2, #48	; 0x30
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e068      	b.n	8007500 <findShorterWay+0x2a8>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 800742e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007438:	4413      	add	r3, r2
 800743a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800743e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	7a12      	ldrb	r2, [r2, #8]
 8007446:	4293      	cmp	r3, r2
 8007448:	dc0d      	bgt.n	8007466 <findShorterWay+0x20e>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 800744a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007454:	4413      	add	r3, r2
 8007456:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800745a:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800745e:	6812      	ldr	r2, [r2, #0]
 8007460:	7a52      	ldrb	r2, [r2, #9]
 8007462:	4293      	cmp	r3, r2
 8007464:	dd0e      	ble.n	8007484 <findShorterWay+0x22c>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8007466:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800746a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007478:	443b      	add	r3, r7
 800747a:	440b      	add	r3, r1
 800747c:	3b18      	subs	r3, #24
 800747e:	2230      	movs	r2, #48	; 0x30
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	e03d      	b.n	8007500 <findShorterWay+0x2a8>
    			}else if(i == 1 && j == 1){
 8007484:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007488:	2b01      	cmp	r3, #1
 800748a:	d112      	bne.n	80074b2 <findShorterWay+0x25a>
 800748c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10e      	bne.n	80074b2 <findShorterWay+0x25a>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8007494:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007498:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800749c:	4613      	mov	r3, r2
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074a6:	443b      	add	r3, r7
 80074a8:	440b      	add	r3, r1
 80074aa:	3b18      	subs	r3, #24
 80074ac:	2250      	movs	r2, #80	; 0x50
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e026      	b.n	8007500 <findShorterWay+0x2a8>
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 80074b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80074bc:	4413      	add	r3, r2
 80074be:	461a      	mov	r2, r3
 80074c0:	4613      	mov	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	3b07      	subs	r3, #7
 80074c8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80074cc:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	18d0      	adds	r0, r2, r3
 80074d4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80074de:	4413      	add	r3, r2
 80074e0:	3b01      	subs	r3, #1
 80074e2:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80074e6:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80074ea:	5cc0      	ldrb	r0, [r0, r3]
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80074f6:	443b      	add	r3, r7
 80074f8:	440b      	add	r3, r1
 80074fa:	3b18      	subs	r3, #24
 80074fc:	4602      	mov	r2, r0
 80074fe:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 8007500:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007504:	3301      	adds	r3, #1
 8007506:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800750a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800750e:	2b02      	cmp	r3, #2
 8007510:	f67f af6e 	bls.w	80073f0 <findShorterWay+0x198>
    	for(i = 0; i < 3; i++){
 8007514:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007518:	3301      	adds	r3, #1
 800751a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800751e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007522:	2b02      	cmp	r3, #2
 8007524:	f67f af60 	bls.w	80073e8 <findShorterWay+0x190>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 8007528:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 800752c:	461a      	mov	r2, r3
 800752e:	4921      	ldr	r1, [pc, #132]	; (80075b4 <findShorterWay+0x35c>)
 8007530:	4821      	ldr	r0, [pc, #132]	; (80075b8 <findShorterWay+0x360>)
 8007532:	f006 ff77 	bl	800e424 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 8007536:	4920      	ldr	r1, [pc, #128]	; (80075b8 <findShorterWay+0x360>)
 8007538:	481d      	ldr	r0, [pc, #116]	; (80075b0 <findShorterWay+0x358>)
 800753a:	f005 fe83 	bl	800d244 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 800753e:	2300      	movs	r3, #0
 8007540:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007544:	e026      	b.n	8007594 <findShorterWay+0x33c>
			for (j = 0; j < 3; j++){
 8007546:	2300      	movs	r3, #0
 8007548:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800754c:	e015      	b.n	800757a <findShorterWay+0x322>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 800754e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007552:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007560:	443b      	add	r3, r7
 8007562:	440b      	add	r3, r1
 8007564:	3b18      	subs	r3, #24
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	4619      	mov	r1, r3
 800756a:	4811      	ldr	r0, [pc, #68]	; (80075b0 <findShorterWay+0x358>)
 800756c:	f005 fe52 	bl	800d214 <writeChar>
			for (j = 0; j < 3; j++){
 8007570:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007574:	3301      	adds	r3, #1
 8007576:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800757a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800757e:	2b02      	cmp	r3, #2
 8007580:	d9e5      	bls.n	800754e <findShorterWay+0x2f6>
			}
			writeChar(&handlerAstarUsart, '\r');
 8007582:	210d      	movs	r1, #13
 8007584:	480a      	ldr	r0, [pc, #40]	; (80075b0 <findShorterWay+0x358>)
 8007586:	f005 fe45 	bl	800d214 <writeChar>
    	for(i = 0; i < 3; i++){
 800758a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800758e:	3301      	adds	r3, #1
 8007590:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007594:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007598:	2b02      	cmp	r3, #2
 800759a:	d9d4      	bls.n	8007546 <findShorterWay+0x2ee>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 800759c:	210d      	movs	r1, #13
 800759e:	4804      	ldr	r0, [pc, #16]	; (80075b0 <findShorterWay+0x358>)
 80075a0:	f005 fe38 	bl	800d214 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 80075aa:	e01b      	b.n	80075e4 <findShorterWay+0x38c>
 80075ac:	08013648 	.word	0x08013648
 80075b0:	2000d5fc 	.word	0x2000d5fc
 80075b4:	0801367c 	.word	0x0801367c
 80075b8:	2000d6a8 	.word	0x2000d6a8
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80075bc:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 80075c0:	4613      	mov	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80075ca:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	4413      	add	r3, r2
 80075d2:	4619      	mov	r1, r3
 80075d4:	48b2      	ldr	r0, [pc, #712]	; (80078a0 <findShorterWay+0x648>)
 80075d6:	f005 fe35 	bl	800d244 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80075da:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 80075de:	3301      	adds	r3, #1
 80075e0:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 80075e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075e8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	7a1b      	ldrb	r3, [r3, #8]
 80075f0:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d3e1      	bcc.n	80075bc <findShorterWay+0x364>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 80075f8:	210d      	movs	r1, #13
 80075fa:	48a9      	ldr	r0, [pc, #676]	; (80078a0 <findShorterWay+0x648>)
 80075fc:	f005 fe0a 	bl	800d214 <writeChar>


    	for(i = 0; i < 3; i++){
 8007600:	2300      	movs	r3, #0
 8007602:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007606:	e275      	b.n	8007af4 <findShorterWay+0x89c>
			for (j = 0; j < 3; j++){
 8007608:	2300      	movs	r3, #0
 800760a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800760e:	e261      	b.n	8007ad4 <findShorterWay+0x87c>
				switch (nineSlotsMatriz[i][j]) {
 8007610:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007614:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007618:	4613      	mov	r3, r2
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	4413      	add	r3, r2
 800761e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007622:	443b      	add	r3, r7
 8007624:	440b      	add	r3, r1
 8007626:	3b18      	subs	r3, #24
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b73      	cmp	r3, #115	; 0x73
 800762c:	d074      	beq.n	8007718 <findShorterWay+0x4c0>
 800762e:	2b73      	cmp	r3, #115	; 0x73
 8007630:	f300 8245 	bgt.w	8007abe <findShorterWay+0x866>
 8007634:	2b50      	cmp	r3, #80	; 0x50
 8007636:	dc65      	bgt.n	8007704 <findShorterWay+0x4ac>
 8007638:	2b23      	cmp	r3, #35	; 0x23
 800763a:	f2c0 8240 	blt.w	8007abe <findShorterWay+0x866>
 800763e:	3b23      	subs	r3, #35	; 0x23
 8007640:	2b2d      	cmp	r3, #45	; 0x2d
 8007642:	f200 823c 	bhi.w	8007abe <findShorterWay+0x866>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <findShorterWay+0x3f4>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800770d 	.word	0x0800770d
 8007650:	08007abf 	.word	0x08007abf
 8007654:	08007abf 	.word	0x08007abf
 8007658:	08007abf 	.word	0x08007abf
 800765c:	08007abf 	.word	0x08007abf
 8007660:	08007abf 	.word	0x08007abf
 8007664:	08007abf 	.word	0x08007abf
 8007668:	080078a5 	.word	0x080078a5
 800766c:	08007abf 	.word	0x08007abf
 8007670:	08007abf 	.word	0x08007abf
 8007674:	08007abf 	.word	0x08007abf
 8007678:	08007abf 	.word	0x08007abf
 800767c:	08007abf 	.word	0x08007abf
 8007680:	08007715 	.word	0x08007715
 8007684:	08007abf 	.word	0x08007abf
 8007688:	08007abf 	.word	0x08007abf
 800768c:	08007abf 	.word	0x08007abf
 8007690:	08007abf 	.word	0x08007abf
 8007694:	08007abf 	.word	0x08007abf
 8007698:	08007abf 	.word	0x08007abf
 800769c:	08007abf 	.word	0x08007abf
 80076a0:	08007abf 	.word	0x08007abf
 80076a4:	08007abf 	.word	0x08007abf
 80076a8:	08007abf 	.word	0x08007abf
 80076ac:	08007abf 	.word	0x08007abf
 80076b0:	08007abf 	.word	0x08007abf
 80076b4:	08007abf 	.word	0x08007abf
 80076b8:	08007abf 	.word	0x08007abf
 80076bc:	08007abf 	.word	0x08007abf
 80076c0:	08007abf 	.word	0x08007abf
 80076c4:	08007abf 	.word	0x08007abf
 80076c8:	08007abf 	.word	0x08007abf
 80076cc:	08007abf 	.word	0x08007abf
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007abf 	.word	0x08007abf
 80076d8:	08007abf 	.word	0x08007abf
 80076dc:	08007abf 	.word	0x08007abf
 80076e0:	08007abf 	.word	0x08007abf
 80076e4:	08007abf 	.word	0x08007abf
 80076e8:	08007abf 	.word	0x08007abf
 80076ec:	08007abf 	.word	0x08007abf
 80076f0:	08007abf 	.word	0x08007abf
 80076f4:	08007abf 	.word	0x08007abf
 80076f8:	08007abf 	.word	0x08007abf
 80076fc:	08007721 	.word	0x08007721
 8007700:	0800771d 	.word	0x0800771d
 8007704:	2b65      	cmp	r3, #101	; 0x65
 8007706:	f000 81c3 	beq.w	8007a90 <findShorterWay+0x838>
 800770a:	e1d8      	b.n	8007abe <findShorterWay+0x866>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 800770c:	bf00      	nop
						break;
 800770e:	e1d8      	b.n	8007ac2 <findShorterWay+0x86a>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8007710:	bf00      	nop
						break;
 8007712:	e1d6      	b.n	8007ac2 <findShorterWay+0x86a>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8007714:	bf00      	nop
						break;
 8007716:	e1d4      	b.n	8007ac2 <findShorterWay+0x86a>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 8007718:	bf00      	nop
						break;
 800771a:	e1d2      	b.n	8007ac2 <findShorterWay+0x86a>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 800771c:	bf00      	nop
						break;
 800771e:	e1d0      	b.n	8007ac2 <findShorterWay+0x86a>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8007720:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007724:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007728:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800772c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 8007730:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007734:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007738:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800773c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007740:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	f000 ff3b 	bl	80085c6 <setFcost>
 8007750:	eef0 7a40 	vmov.f32	s15, s0
 8007754:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007758:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 800775c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007760:	ed93 7a01 	vldr	s14, [r3, #4]
 8007764:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800776e:	4413      	add	r3, r2
 8007770:	461a      	mov	r2, r3
 8007772:	23a8      	movs	r3, #168	; 0xa8
 8007774:	fb02 f303 	mul.w	r3, r2, r3
 8007778:	3ba8      	subs	r3, #168	; 0xa8
 800777a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800777e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	18d1      	adds	r1, r2, r3
 8007786:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007790:	4413      	add	r3, r2
 8007792:	1e5a      	subs	r2, r3, #1
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	440b      	add	r3, r1
 800779e:	3304      	adds	r3, #4
 80077a0:	edd3 7a00 	vldr	s15, [r3]
 80077a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ac:	db01      	blt.n	80077b2 <findShorterWay+0x55a>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 80077ae:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 80077b0:	e187      	b.n	8007ac2 <findShorterWay+0x86a>
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 80077b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80077b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80077ba:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80077be:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80077c2:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	f000 fcf3 	bl	80081b8 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 80077d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80077d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80077da:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80077de:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80077e2:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	f000 fd0f 	bl	8008210 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 80077f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80077f6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80077fa:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007804:	f000 fc84 	bl	8008110 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007808:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007812:	4413      	add	r3, r2
 8007814:	461a      	mov	r2, r3
 8007816:	23a8      	movs	r3, #168	; 0xa8
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	3ba8      	subs	r3, #168	; 0xa8
 800781e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007822:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	18d0      	adds	r0, r2, r3
 800782a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007834:	4413      	add	r3, r2
 8007836:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007838:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800783c:	6899      	ldr	r1, [r3, #8]
 800783e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007842:	440b      	add	r3, r1
 8007844:	4619      	mov	r1, r3
 8007846:	23a8      	movs	r3, #168	; 0xa8
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	3ba8      	subs	r3, #168	; 0xa8
 800784e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007852:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8007856:	6809      	ldr	r1, [r1, #0]
 8007858:	18cc      	adds	r4, r1, r3
 800785a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800785e:	68d9      	ldr	r1, [r3, #12]
 8007860:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007864:	440b      	add	r3, r1
 8007866:	1e59      	subs	r1, r3, #1
 8007868:	460b      	mov	r3, r1
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	440b      	add	r3, r1
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	4423      	add	r3, r4
 8007872:	3314      	adds	r3, #20
 8007874:	edd3 7a00 	vldr	s15, [r3]
 8007878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800787c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007880:	4613      	mov	r3, r2
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4403      	add	r3, r0
 800788a:	3304      	adds	r3, #4
 800788c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 800788e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007892:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007896:	0123      	lsls	r3, r4, #4
 8007898:	440b      	add	r3, r1
 800789a:	601a      	str	r2, [r3, #0]
						break;
 800789c:	e111      	b.n	8007ac2 <findShorterWay+0x86a>
 800789e:	bf00      	nop
 80078a0:	2000d5fc 	.word	0x2000d5fc
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 80078a4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80078a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 80078ac:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80078b0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 80078b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80078b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80078bc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80078c0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80078c4:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80078ce:	6800      	ldr	r0, [r0, #0]
 80078d0:	f000 fc72 	bl	80081b8 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 80078d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80078d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80078dc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80078e0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80078e4:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	f000 fc8e 	bl	8008210 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 80078f4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80078f8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80078fc:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007906:	f000 fc03 	bl	8008110 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 800790a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007914:	4413      	add	r3, r2
 8007916:	461a      	mov	r2, r3
 8007918:	4613      	mov	r3, r2
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	1a9b      	subs	r3, r3, r2
 800791e:	3b07      	subs	r3, #7
 8007920:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007924:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	441a      	add	r2, r3
 800792c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007930:	68d9      	ldr	r1, [r3, #12]
 8007932:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007936:	440b      	add	r3, r1
 8007938:	3b01      	subs	r3, #1
 800793a:	214f      	movs	r1, #79	; 0x4f
 800793c:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 800793e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007948:	4413      	add	r3, r2
 800794a:	461a      	mov	r2, r3
 800794c:	23a8      	movs	r3, #168	; 0xa8
 800794e:	fb02 f303 	mul.w	r3, r2, r3
 8007952:	3ba8      	subs	r3, #168	; 0xa8
 8007954:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007958:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	18d1      	adds	r1, r2, r3
 8007960:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800796a:	4413      	add	r3, r2
 800796c:	1e5a      	subs	r2, r3, #1
 800796e:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007972:	4613      	mov	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4413      	add	r3, r2
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	440b      	add	r3, r1
 800797c:	3304      	adds	r3, #4
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007984:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007988:	0103      	lsls	r3, r0, #4
 800798a:	440b      	add	r3, r1
 800798c:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 800798e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007998:	4413      	add	r3, r2
 800799a:	461a      	mov	r2, r3
 800799c:	23a8      	movs	r3, #168	; 0xa8
 800799e:	fb02 f303 	mul.w	r3, r2, r3
 80079a2:	3ba8      	subs	r3, #168	; 0xa8
 80079a4:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80079a8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	18d1      	adds	r1, r2, r3
 80079b0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80079b4:	68da      	ldr	r2, [r3, #12]
 80079b6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80079ba:	4413      	add	r3, r2
 80079bc:	1e5a      	subs	r2, r3, #1
 80079be:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 80079c2:	4613      	mov	r3, r2
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	4413      	add	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	440b      	add	r3, r1
 80079cc:	3308      	adds	r3, #8
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80079d4:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 80079d8:	0103      	lsls	r3, r0, #4
 80079da:	440b      	add	r3, r1
 80079dc:	3304      	adds	r3, #4
 80079de:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 80079e0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80079ea:	4413      	add	r3, r2
 80079ec:	1e5a      	subs	r2, r3, #1
 80079ee:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80079f2:	ee07 2a90 	vmov	s15, r2
 80079f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079fa:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80079fe:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	4413      	add	r3, r2
 8007a06:	3308      	adds	r3, #8
 8007a08:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8007a0c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007a16:	4413      	add	r3, r2
 8007a18:	1e5a      	subs	r2, r3, #1
 8007a1a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007a1e:	ee07 2a90 	vmov	s15, r2
 8007a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a26:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007a2a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4413      	add	r3, r2
 8007a32:	330c      	adds	r3, #12
 8007a34:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8007a38:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007a42:	4413      	add	r3, r2
 8007a44:	461a      	mov	r2, r3
 8007a46:	23a8      	movs	r3, #168	; 0xa8
 8007a48:	fb02 f303 	mul.w	r3, r2, r3
 8007a4c:	3ba8      	subs	r3, #168	; 0xa8
 8007a4e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007a52:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	18d1      	adds	r1, r2, r3
 8007a5a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007a64:	4413      	add	r3, r2
 8007a66:	1e5a      	subs	r2, r3, #1
 8007a68:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3314      	adds	r3, #20
 8007a80:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8007a84:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007a88:	3301      	adds	r3, #1
 8007a8a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

						break;
 8007a8e:	e018      	b.n	8007ac2 <findShorterWay+0x86a>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8007a90:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007a94:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007a98:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007a9c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateParent(ptrChanges, position, matrixCosts);
 8007aa0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007aa4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007aa8:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007ab2:	f000 fb2d 	bl	8008110 <updateParent>
						shorterWayFound = SET;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						break;
 8007abc:	e001      	b.n	8007ac2 <findShorterWay+0x86a>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e31a      	b.n	80080f8 <findShorterWay+0xea0>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8007ac2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <findShorterWay+0x888>
			for (j = 0; j < 3; j++){
 8007aca:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ace:	3301      	adds	r3, #1
 8007ad0:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007ad4:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	f67f ad99 	bls.w	8007610 <findShorterWay+0x3b8>
 8007ade:	e000      	b.n	8007ae2 <findShorterWay+0x88a>
					break;
 8007ae0:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8007ae2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10a      	bne.n	8007b00 <findShorterWay+0x8a8>
    	for(i = 0; i < 3; i++){
 8007aea:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007aee:	3301      	adds	r3, #1
 8007af0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007af4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	f67f ad85 	bls.w	8007608 <findShorterWay+0x3b0>
 8007afe:	e000      	b.n	8007b02 <findShorterWay+0x8aa>
				break;
 8007b00:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8007b02:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 81be 	bne.w	8007e88 <findShorterWay+0xc30>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8007b0c:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	4619      	mov	r1, r3
 8007b16:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007b1a:	f000 feb9 	bl	8008890 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8007b1e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80d7 	beq.w	8007cda <findShorterWay+0xa82>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007b2c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b36:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007b38:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b42:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007b44:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007b56:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	441a      	add	r2, r3
 8007b5e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	5cd3      	ldrb	r3, [r2, r3]
 8007b66:	2b73      	cmp	r3, #115	; 0x73
 8007b68:	d101      	bne.n	8007b6e <findShorterWay+0x916>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8007b6a:	bf00      	nop
 8007b6c:	e011      	b.n	8007b92 <findShorterWay+0x93a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8007b6e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	461a      	mov	r2, r3
 8007b76:	4613      	mov	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007b80:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	441a      	add	r2, r3
 8007b88:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	2144      	movs	r1, #68	; 0x44
 8007b90:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8007b92:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007b9c:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	edd3 7a00 	vldr	s15, [r3]
 8007baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bae:	ee17 2a90 	vmov	r2, s15
 8007bb2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bb6:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8007bb8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007bc2:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	4413      	add	r3, r2
 8007bca:	330c      	adds	r3, #12
 8007bcc:	edd3 7a00 	vldr	s15, [r3]
 8007bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bd4:	ee17 2a90 	vmov	r2, s15
 8007bd8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bdc:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007be4:	e014      	b.n	8007c10 <findShorterWay+0x9b8>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8007be6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007bec:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007bf0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007bf4:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007bf8:	0089      	lsls	r1, r1, #2
 8007bfa:	440b      	add	r3, r1
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8007c06:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007c10:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d9e6      	bls.n	8007be6 <findShorterWay+0x98e>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007c18:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	3301      	adds	r3, #1
 8007c22:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007c26:	e03b      	b.n	8007ca0 <findShorterWay+0xa48>
					for (j = 0 ; j < 4 ; j++){
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007c2e:	e02e      	b.n	8007c8e <findShorterWay+0xa36>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8007c30:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8007c34:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007c38:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c3c:	1e58      	subs	r0, r3, #1
 8007c3e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c42:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007c46:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007c4a:	00a4      	lsls	r4, r4, #2
 8007c4c:	4422      	add	r2, r4
 8007c4e:	0092      	lsls	r2, r2, #2
 8007c50:	440a      	add	r2, r1
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007c58:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007c5c:	0080      	lsls	r0, r0, #2
 8007c5e:	4403      	add	r3, r0
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8007c66:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8007c6a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c6e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007c72:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007c76:	0089      	lsls	r1, r1, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8007c84:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c88:	3301      	adds	r3, #1
 8007c8a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007c8e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d9cc      	bls.n	8007c30 <findShorterWay+0x9d8>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007c96:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007ca0:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007ca4:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d3bd      	bcc.n	8007c28 <findShorterWay+0x9d0>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8007cac:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8007cb6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cc0:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8007cc2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ccc:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8007cce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007cd8:	e0d0      	b.n	8007e7c <findShorterWay+0xc24>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007cda:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ce4:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007ce6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cf0:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007cf2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	1a9b      	subs	r3, r3, r2
 8007d00:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d04:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007d08:	6812      	ldr	r2, [r2, #0]
 8007d0a:	441a      	add	r2, r3
 8007d0c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	5cd3      	ldrb	r3, [r2, r3]
 8007d14:	2b73      	cmp	r3, #115	; 0x73
 8007d16:	d101      	bne.n	8007d1c <findShorterWay+0xac4>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8007d18:	bf00      	nop
 8007d1a:	e011      	b.n	8007d40 <findShorterWay+0xae8>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8007d1c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	461a      	mov	r2, r3
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d2e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	441a      	add	r2, r3
 8007d36:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2144      	movs	r1, #68	; 0x44
 8007d3e:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8007d40:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d4a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	4413      	add	r3, r2
 8007d52:	3308      	adds	r3, #8
 8007d54:	edd3 7a00 	vldr	s15, [r3]
 8007d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d5c:	ee17 2a90 	vmov	r2, s15
 8007d60:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d64:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8007d66:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d70:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007d74:	011b      	lsls	r3, r3, #4
 8007d76:	4413      	add	r3, r2
 8007d78:	330c      	adds	r3, #12
 8007d7a:	edd3 7a00 	vldr	s15, [r3]
 8007d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d82:	ee17 2a90 	vmov	r2, s15
 8007d86:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d8a:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007d92:	e014      	b.n	8007dbe <findShorterWay+0xb66>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 8007d94:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d9a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d9e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007da2:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007da6:	0089      	lsls	r1, r1, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8007db4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007db8:	3301      	adds	r3, #1
 8007dba:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007dbe:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d9e6      	bls.n	8007d94 <findShorterWay+0xb3c>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8007dc6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	3301      	adds	r3, #1
 8007dd0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007dd4:	e03b      	b.n	8007e4e <findShorterWay+0xbf6>
					for (j = 0 ; j < 4 ; j++){
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007ddc:	e02e      	b.n	8007e3c <findShorterWay+0xbe4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8007dde:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8007de2:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007de6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007dea:	1e58      	subs	r0, r3, #1
 8007dec:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007df0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007df4:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007df8:	00a4      	lsls	r4, r4, #2
 8007dfa:	4422      	add	r2, r4
 8007dfc:	0092      	lsls	r2, r2, #2
 8007dfe:	440a      	add	r2, r1
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007e06:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007e0a:	0080      	lsls	r0, r0, #2
 8007e0c:	4403      	add	r3, r0
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	440b      	add	r3, r1
 8007e12:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8007e14:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8007e18:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e1c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e20:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007e24:	0089      	lsls	r1, r1, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f04f 0200 	mov.w	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8007e32:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e36:	3301      	adds	r3, #1
 8007e38:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007e3c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d9cc      	bls.n	8007dde <findShorterWay+0xb86>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8007e44:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007e4e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007e52:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d3bd      	bcc.n	8007dd6 <findShorterWay+0xb7e>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8007e5a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8007e64:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e6e:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8007e70:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e7a:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 8007e7c:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8007e80:	3301      	adds	r3, #1
 8007e82:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 8007e86:	e05d      	b.n	8007f44 <findShorterWay+0xcec>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8007e88:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			j = ptrChanges->endPos[1];
 8007e92:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			while(Gridcopy[i][j] != 's'){
 8007e9c:	e042      	b.n	8007f24 <findShorterWay+0xccc>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 8007e9e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ea2:	22a8      	movs	r2, #168	; 0xa8
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007eac:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007eb0:	6812      	ldr	r2, [r2, #0]
 8007eb2:	18d1      	adds	r1, r2, r3
 8007eb4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007eb8:	4613      	mov	r3, r2
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	4413      	add	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	440b      	add	r3, r1
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	edd3 7a00 	vldr	s15, [r3]
 8007ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ecc:	ee17 3a90 	vmov	r3, s15
 8007ed0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				position[1] = matrixCosts[i][j][4];
 8007ed4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ed8:	22a8      	movs	r2, #168	; 0xa8
 8007eda:	fb02 f303 	mul.w	r3, r2, r3
 8007ede:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007ee2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	18d1      	adds	r1, r2, r3
 8007eea:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007eee:	4613      	mov	r3, r2
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	4413      	add	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3310      	adds	r3, #16
 8007efa:	edd3 7a00 	vldr	s15, [r3]
 8007efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f02:	ee17 3a90 	vmov	r3, s15
 8007f06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

				// actualizamos la nueva posición
				i = position[0];
 8007f0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007f0e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
				j = position[1];
 8007f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007f16:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 8007f1a:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			while(Gridcopy[i][j] != 's'){
 8007f24:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007f28:	4613      	mov	r3, r2
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f32:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	441a      	add	r2, r3
 8007f3a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f3e:	5cd3      	ldrb	r3, [r2, r3]
 8007f40:	2b73      	cmp	r3, #115	; 0x73
 8007f42:	d1ac      	bne.n	8007e9e <findShorterWay+0xc46>
    while(!shorterWayFound){
 8007f44:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f43f aa3d 	beq.w	80073c8 <findShorterWay+0x170>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 8007f4e:	496d      	ldr	r1, [pc, #436]	; (8008104 <findShorterWay+0xeac>)
 8007f50:	486d      	ldr	r0, [pc, #436]	; (8008108 <findShorterWay+0xeb0>)
 8007f52:	f005 f977 	bl	800d244 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8007f56:	210d      	movs	r1, #13
 8007f58:	486b      	ldr	r0, [pc, #428]	; (8008108 <findShorterWay+0xeb0>)
 8007f5a:	f005 f95b 	bl	800d214 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 8007f5e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8007f62:	3301      	adds	r3, #1
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007f6a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8007f72:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	j = ptrChanges->endPos[1];
 8007f7c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8007f86:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8007f8a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8007f8e:	e087      	b.n	80080a0 <findShorterWay+0xe48>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8007f90:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007f94:	4613      	mov	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f9e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007faa:	5cd3      	ldrb	r3, [r2, r3]
 8007fac:	2b65      	cmp	r3, #101	; 0x65
 8007fae:	d101      	bne.n	8007fb4 <findShorterWay+0xd5c>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8007fb0:	bf00      	nop
 8007fb2:	e020      	b.n	8007ff6 <findShorterWay+0xd9e>
    	}else if (Gridcopy[i][j] == 's'){
 8007fb4:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007fb8:	4613      	mov	r3, r2
 8007fba:	00db      	lsls	r3, r3, #3
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007fc2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	441a      	add	r2, r3
 8007fca:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007fce:	5cd3      	ldrb	r3, [r2, r3]
 8007fd0:	2b73      	cmp	r3, #115	; 0x73
 8007fd2:	d101      	bne.n	8007fd8 <findShorterWay+0xd80>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8007fd4:	bf00      	nop
 8007fd6:	e00e      	b.n	8007ff6 <findShorterWay+0xd9e>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8007fd8:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007fdc:	4613      	mov	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007fe6:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	441a      	add	r2, r3
 8007fee:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ff2:	2149      	movs	r1, #73	; 0x49
 8007ff4:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 8007ff6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8008000:	4413      	add	r3, r2
 8008002:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008006:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8008008:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8008012:	4413      	add	r3, r2
 8008014:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008018:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 800801a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800801e:	22a8      	movs	r2, #168	; 0xa8
 8008020:	fb02 f303 	mul.w	r3, r2, r3
 8008024:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008028:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	18d1      	adds	r1, r2, r3
 8008030:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008034:	4613      	mov	r3, r2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	4413      	add	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	440b      	add	r3, r1
 800803e:	330c      	adds	r3, #12
 8008040:	edd3 7a00 	vldr	s15, [r3]
 8008044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008048:	ee17 3a90 	vmov	r3, s15
 800804c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		position[1] = matrixCosts[i][j][4];
 8008050:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008054:	22a8      	movs	r2, #168	; 0xa8
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800805e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	18d1      	adds	r1, r2, r3
 8008066:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 800806a:	4613      	mov	r3, r2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4413      	add	r3, r2
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	440b      	add	r3, r1
 8008074:	3310      	adds	r3, #16
 8008076:	edd3 7a00 	vldr	s15, [r3]
 800807a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800807e:	ee17 3a90 	vmov	r3, s15
 8008082:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

		// actualizamos la nueva posición
		i = position[0];
 8008086:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800808a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
		j = position[1];
 800808e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008092:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008096:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800809a:	3b01      	subs	r3, #1
 800809c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80080a0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f6bf af73 	bge.w	8007f90 <findShorterWay+0xd38>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80080aa:	2300      	movs	r3, #0
 80080ac:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 80080b0:	e013      	b.n	80080da <findShorterWay+0xe82>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 80080b2:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 80080b6:	4613      	mov	r3, r2
 80080b8:	00db      	lsls	r3, r3, #3
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80080c0:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	4413      	add	r3, r2
 80080c8:	4619      	mov	r1, r3
 80080ca:	480f      	ldr	r0, [pc, #60]	; (8008108 <findShorterWay+0xeb0>)
 80080cc:	f005 f8ba 	bl	800d244 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80080d0:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 80080d4:	3301      	adds	r3, #1
 80080d6:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 80080da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80080de:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	7a1b      	ldrb	r3, [r3, #8]
 80080e6:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d3e1      	bcc.n	80080b2 <findShorterWay+0xe5a>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 80080ee:	4907      	ldr	r1, [pc, #28]	; (800810c <findShorterWay+0xeb4>)
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <findShorterWay+0xeb0>)
 80080f2:	f005 f8a7 	bl	800d244 <writeMsg>

    return 1;
 80080f6:	2301      	movs	r3, #1


}
 80080f8:	4618      	mov	r0, r3
 80080fa:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd90      	pop	{r4, r7, pc}
 8008102:	bf00      	nop
 8008104:	080136a4 	.word	0x080136a4
 8008108:	2000d5fc 	.word	0x2000d5fc
 800810c:	080136e4 	.word	0x080136e4

08008110 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fa8e 	bl	8008640 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800812a:	b2d8      	uxtb	r0, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4413      	add	r3, r2
 8008136:	461a      	mov	r2, r3
 8008138:	23a8      	movs	r3, #168	; 0xa8
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	3ba8      	subs	r3, #168	; 0xa8
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	18d1      	adds	r1, r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	3304      	adds	r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4413      	add	r3, r2
 8008150:	1e5a      	subs	r2, r3, #1
 8008152:	ee07 0a90 	vmov	s15, r0
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	4613      	mov	r3, r2
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	4413      	add	r3, r2
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	440b      	add	r3, r1
 8008164:	330c      	adds	r3, #12
 8008166:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008170:	b2d8      	uxtb	r0, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4413      	add	r3, r2
 800817c:	461a      	mov	r2, r3
 800817e:	23a8      	movs	r3, #168	; 0xa8
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	3ba8      	subs	r3, #168	; 0xa8
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	18d1      	adds	r1, r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	3304      	adds	r3, #4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4413      	add	r3, r2
 8008196:	1e5a      	subs	r2, r3, #1
 8008198:	ee07 0a90 	vmov	s15, r0
 800819c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a0:	4613      	mov	r3, r2
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	4413      	add	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	440b      	add	r3, r1
 80081aa:	3310      	adds	r3, #16
 80081ac:	edc3 7a00 	vstr	s15, [r3]

}
 80081b0:	bf00      	nop
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 80081b8:	b5b0      	push	{r4, r5, r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4413      	add	r3, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	23a8      	movs	r3, #168	; 0xa8
 80081d4:	fb02 f303 	mul.w	r3, r2, r3
 80081d8:	3ba8      	subs	r3, #168	; 0xa8
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	18d5      	adds	r5, r2, r3
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	3304      	adds	r3, #4
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4413      	add	r3, r2
 80081ea:	1e5c      	subs	r4, r3, #1
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68b9      	ldr	r1, [r7, #8]
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 f901 	bl	80083f8 <setGcost>
 80081f6:	eef0 7a40 	vmov.f32	s15, s0
 80081fa:	4623      	mov	r3, r4
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	4423      	add	r3, r4
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	442b      	add	r3, r5
 8008204:	edc3 7a00 	vstr	s15, [r3]
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bdb0      	pop	{r4, r5, r7, pc}

08008210 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 8008210:	b5b0      	push	{r4, r5, r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	689a      	ldr	r2, [r3, #8]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4413      	add	r3, r2
 8008228:	461a      	mov	r2, r3
 800822a:	23a8      	movs	r3, #168	; 0xa8
 800822c:	fb02 f303 	mul.w	r3, r2, r3
 8008230:	3ba8      	subs	r3, #168	; 0xa8
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	18d5      	adds	r5, r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4413      	add	r3, r2
 8008242:	1e5c      	subs	r4, r3, #1
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 f9bb 	bl	80085c6 <setFcost>
 8008250:	eef0 7a40 	vmov.f32	s15, s0
 8008254:	4623      	mov	r3, r4
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4423      	add	r3, r4
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	442b      	add	r3, r5
 800825e:	3304      	adds	r3, #4
 8008260:	edc3 7a00 	vstr	s15, [r3]

}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bdb0      	pop	{r4, r5, r7, pc}

0800826c <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[7][7][6] , char Gridcopy[7][7]){
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	68f9      	ldr	r1, [r7, #12]
 800828a:	6838      	ldr	r0, [r7, #0]
 800828c:	f000 fa3d 	bl	800870a <findEnd>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8008296:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8008298:	2300      	movs	r3, #0
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e0a1      	b.n	80083e2 <setHeuristic+0x176>
		return RESET;
 800829e:	2300      	movs	r3, #0
 80082a0:	e0a6      	b.n	80083f0 <setHeuristic+0x184>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80082a2:	2300      	movs	r3, #0
 80082a4:	77bb      	strb	r3, [r7, #30]
 80082a6:	e093      	b.n	80083d0 <setHeuristic+0x164>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 80082a8:	7ffa      	ldrb	r2, [r7, #31]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfb8      	it	lt
 80082b4:	425b      	neglt	r3, r3
 80082b6:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 80082b8:	7fba      	ldrb	r2, [r7, #30]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bfb8      	it	lt
 80082c4:	425b      	neglt	r3, r3
 80082c6:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	dc3e      	bgt.n	800834e <setHeuristic+0xe2>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082e8:	ee17 3a90 	vmov	r3, s15
 80082ec:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	edd3 6a00 	vldr	s13, [r3]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfb8      	it	lt
 8008308:	425b      	neglt	r3, r3
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800831a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800831e:	ee17 3a90 	vmov	r3, s15
 8008322:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 8008324:	7ffb      	ldrb	r3, [r7, #31]
 8008326:	22a8      	movs	r2, #168	; 0xa8
 8008328:	fb02 f303 	mul.w	r3, r2, r3
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	18d1      	adds	r1, r2, r3
 8008330:	7fba      	ldrb	r2, [r7, #30]
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800833c:	4613      	mov	r3, r2
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	4413      	add	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	440b      	add	r3, r1
 8008346:	3308      	adds	r3, #8
 8008348:	edc3 7a00 	vstr	s15, [r3]
 800834c:	e03d      	b.n	80083ca <setHeuristic+0x15e>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	ed93 7a01 	vldr	s14, [r3, #4]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008366:	ee17 3a90 	vmov	r3, s15
 800836a:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	edd3 6a00 	vldr	s13, [r3]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	bfb8      	it	lt
 8008386:	425b      	neglt	r3, r3
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800839c:	ee17 3a90 	vmov	r3, s15
 80083a0:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 80083a2:	7ffb      	ldrb	r3, [r7, #31]
 80083a4:	22a8      	movs	r2, #168	; 0xa8
 80083a6:	fb02 f303 	mul.w	r3, r2, r3
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	18d1      	adds	r1, r2, r3
 80083ae:	7fba      	ldrb	r2, [r7, #30]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ba:	4613      	mov	r3, r2
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	4413      	add	r3, r2
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	440b      	add	r3, r1
 80083c4:	3308      	adds	r3, #8
 80083c6:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 80083ca:	7fbb      	ldrb	r3, [r7, #30]
 80083cc:	3301      	adds	r3, #1
 80083ce:	77bb      	strb	r3, [r7, #30]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	7a5b      	ldrb	r3, [r3, #9]
 80083d4:	7fba      	ldrb	r2, [r7, #30]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f4ff af66 	bcc.w	80082a8 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 80083dc:	7ffb      	ldrb	r3, [r7, #31]
 80083de:	3301      	adds	r3, #1
 80083e0:	77fb      	strb	r3, [r7, #31]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	7a1b      	ldrb	r3, [r3, #8]
 80083e6:	7ffa      	ldrb	r2, [r7, #31]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	f4ff af5a 	bcc.w	80082a2 <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 80083ee:	2301      	movs	r3, #1

}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3720      	adds	r7, #32
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 800840c:	f04f 0300 	mov.w	r3, #0
 8008410:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfb8      	it	lt
 8008420:	425b      	neglt	r3, r3
 8008422:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	bfb8      	it	lt
 8008432:	425b      	neglt	r3, r3
 8008434:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4413      	add	r3, r2
 8008440:	1e5a      	subs	r2, r3, #1
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	429a      	cmp	r2, r3
 8008448:	d05d      	beq.n	8008506 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3304      	adds	r3, #4
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4413      	add	r3, r2
 8008456:	1e5a      	subs	r2, r3, #1
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	429a      	cmp	r2, r3
 800845e:	d052      	beq.n	8008506 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	429a      	cmp	r2, r3
 800846c:	dc25      	bgt.n	80084ba <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	ed93 7a01 	vldr	s14, [r3, #4]
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	ed97 7a07 	vldr	s14, [r7, #28]
 8008486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800848a:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	ed93 7a00 	vldr	s14, [r3]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	bfb8      	it	lt
 800849e:	425b      	neglt	r3, r3
 80084a0:	ee07 3a90 	vmov	s15, r3
 80084a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80084b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084b4:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80084b8:	e077      	b.n	80085aa <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80084d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084d6:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	ed93 7a00 	vldr	s14, [r3]
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bfb8      	it	lt
 80084ea:	425b      	neglt	r3, r3
 80084ec:	ee07 3a90 	vmov	s15, r3
 80084f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80084fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008500:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8008504:	e051      	b.n	80085aa <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	429a      	cmp	r2, r3
 8008512:	dc25      	bgt.n	8008560 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	ed93 7a01 	vldr	s14, [r3, #4]
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	ee07 3a90 	vmov	s15, r3
 8008520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008528:	ed97 7a07 	vldr	s14, [r7, #28]
 800852c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008530:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	ed93 7a00 	vldr	s14, [r3]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfb8      	it	lt
 8008544:	425b      	neglt	r3, r3
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800854e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008552:	ed97 7a07 	vldr	s14, [r7, #28]
 8008556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800855a:	edc7 7a07 	vstr	s15, [r7, #28]
 800855e:	e024      	b.n	80085aa <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	ed93 7a01 	vldr	s14, [r3, #4]
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	ed97 7a07 	vldr	s14, [r7, #28]
 8008578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800857c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	ed93 7a00 	vldr	s14, [r3]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	bfb8      	it	lt
 8008590:	425b      	neglt	r3, r3
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800859a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859e:	ed97 7a07 	vldr	s14, [r7, #28]
 80085a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085a6:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	ee07 3a90 	vmov	s15, r3
}
 80085b8:	eeb0 0a67 	vmov.f32	s0, s15
 80085bc:	3724      	adds	r7, #36	; 0x24
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff ff0d 	bl	80083f8 <setGcost>
 80085de:	eef0 7a40 	vmov.f32	s15, s0
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4413      	add	r3, r2
 80085f8:	461a      	mov	r2, r3
 80085fa:	23a8      	movs	r3, #168	; 0xa8
 80085fc:	fb02 f303 	mul.w	r3, r2, r3
 8008600:	3ba8      	subs	r3, #168	; 0xa8
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	18d1      	adds	r1, r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3304      	adds	r3, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4413      	add	r3, r2
 8008612:	1e5a      	subs	r2, r3, #1
 8008614:	4613      	mov	r3, r2
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	4413      	add	r3, r2
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	440b      	add	r3, r1
 800861e:	3308      	adds	r3, #8
 8008620:	edd3 7a00 	vldr	s15, [r3]
 8008624:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	ee07 3a90 	vmov	s15, r3

}
 8008636:	eeb0 0a67 	vmov.f32	s0, s15
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4413      	add	r3, r2
 8008654:	1e5a      	subs	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	429a      	cmp	r2, r3
 800865c:	d10c      	bne.n	8008678 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	3304      	adds	r3, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4413      	add	r3, r2
 800866a:	1e5a      	subs	r2, r3, #1
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	429a      	cmp	r2, r3
 8008672:	d101      	bne.n	8008678 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8008674:	bf00      	nop
 8008676:	e00c      	b.n	8008692 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	b2da      	uxtb	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800869e:	b480      	push	{r7}
 80086a0:	b087      	sub	sp, #28
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]
 80086ae:	e020      	b.n	80086f2 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80086b0:	2300      	movs	r3, #0
 80086b2:	75bb      	strb	r3, [r7, #22]
 80086b4:	e015      	b.n	80086e2 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 80086b6:	7dfa      	ldrb	r2, [r7, #23]
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	441a      	add	r2, r3
 80086c2:	7dbb      	ldrb	r3, [r7, #22]
 80086c4:	5cd3      	ldrb	r3, [r2, r3]
 80086c6:	2b73      	cmp	r3, #115	; 0x73
 80086c8:	d107      	bne.n	80086da <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 80086ca:	7dfa      	ldrb	r2, [r7, #23]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 80086d0:	7dba      	ldrb	r2, [r7, #22]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e011      	b.n	80086fe <findStart+0x60>
			}else{
				__NOP();
 80086da:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80086dc:	7dbb      	ldrb	r3, [r7, #22]
 80086de:	3301      	adds	r3, #1
 80086e0:	75bb      	strb	r3, [r7, #22]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	7a5b      	ldrb	r3, [r3, #9]
 80086e6:	7dba      	ldrb	r2, [r7, #22]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d3e4      	bcc.n	80086b6 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	3301      	adds	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	7a1b      	ldrb	r3, [r3, #8]
 80086f6:	7dfa      	ldrb	r2, [r7, #23]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d3d9      	bcc.n	80086b0 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80086fc:	2300      	movs	r3, #0



}
 80086fe:	4618      	mov	r0, r3
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <findEnd>:
int findEnd(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800870a:	b480      	push	{r7}
 800870c:	b087      	sub	sp, #28
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]
 800871a:	e020      	b.n	800875e <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800871c:	2300      	movs	r3, #0
 800871e:	75bb      	strb	r3, [r7, #22]
 8008720:	e015      	b.n	800874e <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8008722:	7dfa      	ldrb	r2, [r7, #23]
 8008724:	4613      	mov	r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	441a      	add	r2, r3
 800872e:	7dbb      	ldrb	r3, [r7, #22]
 8008730:	5cd3      	ldrb	r3, [r2, r3]
 8008732:	2b65      	cmp	r3, #101	; 0x65
 8008734:	d107      	bne.n	8008746 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8008736:	7dfa      	ldrb	r2, [r7, #23]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 800873c:	7dba      	ldrb	r2, [r7, #22]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8008742:	2301      	movs	r3, #1
 8008744:	e011      	b.n	800876a <findEnd+0x60>
			}else{
				__NOP();
 8008746:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008748:	7dbb      	ldrb	r3, [r7, #22]
 800874a:	3301      	adds	r3, #1
 800874c:	75bb      	strb	r3, [r7, #22]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	7a5b      	ldrb	r3, [r3, #9]
 8008752:	7dba      	ldrb	r2, [r7, #22]
 8008754:	429a      	cmp	r2, r3
 8008756:	d3e4      	bcc.n	8008722 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	3301      	adds	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	7a1b      	ldrb	r3, [r3, #8]
 8008762:	7dfa      	ldrb	r2, [r7, #23]
 8008764:	429a      	cmp	r2, r3
 8008766:	d3d9      	bcc.n	800871c <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8008768:	2300      	movs	r3, #0

}
 800876a:	4618      	mov	r0, r3
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[7][7], char Gridcopy[7][7]){
 8008776:	b480      	push	{r7}
 8008778:	b087      	sub	sp, #28
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]
 8008786:	e03d      	b.n	8008804 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008788:	2300      	movs	r3, #0
 800878a:	75bb      	strb	r3, [r7, #22]
 800878c:	e031      	b.n	80087f2 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	7a5b      	ldrb	r3, [r3, #9]
 8008792:	7dba      	ldrb	r2, [r7, #22]
 8008794:	429a      	cmp	r2, r3
 8008796:	d109      	bne.n	80087ac <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8008798:	7dfa      	ldrb	r2, [r7, #23]
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	441a      	add	r2, r3
 80087a4:	7dbb      	ldrb	r3, [r7, #22]
 80087a6:	210d      	movs	r1, #13
 80087a8:	54d1      	strb	r1, [r2, r3]
 80087aa:	e01f      	b.n	80087ec <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 80087ac:	7dba      	ldrb	r2, [r7, #22]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	7a5b      	ldrb	r3, [r3, #9]
 80087b2:	3301      	adds	r3, #1
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d109      	bne.n	80087cc <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 80087b8:	7dfa      	ldrb	r2, [r7, #23]
 80087ba:	4613      	mov	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	441a      	add	r2, r3
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	2100      	movs	r1, #0
 80087c8:	54d1      	strb	r1, [r2, r3]
 80087ca:	e00f      	b.n	80087ec <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 80087cc:	7dfa      	ldrb	r2, [r7, #23]
 80087ce:	4613      	mov	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	18d0      	adds	r0, r2, r3
 80087d8:	7db9      	ldrb	r1, [r7, #22]
 80087da:	7dfa      	ldrb	r2, [r7, #23]
 80087dc:	4613      	mov	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	441a      	add	r2, r3
 80087e6:	7dbb      	ldrb	r3, [r7, #22]
 80087e8:	5c41      	ldrb	r1, [r0, r1]
 80087ea:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 80087ec:	7dbb      	ldrb	r3, [r7, #22]
 80087ee:	3301      	adds	r3, #1
 80087f0:	75bb      	strb	r3, [r7, #22]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7a5b      	ldrb	r3, [r3, #9]
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	7dbb      	ldrb	r3, [r7, #22]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	dac7      	bge.n	800878e <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	3301      	adds	r3, #1
 8008802:	75fb      	strb	r3, [r7, #23]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	7a1b      	ldrb	r3, [r3, #8]
 8008808:	7dfa      	ldrb	r2, [r7, #23]
 800880a:	429a      	cmp	r2, r3
 800880c:	d3bc      	bcc.n	8008788 <buildMatrixCopy+0x12>
			}
		}
	}

}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[7][7]){
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8008828:	2300      	movs	r3, #0
 800882a:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 800882c:	e00a      	b.n	8008844 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 800882e:	7bfa      	ldrb	r2, [r7, #15]
 8008830:	4613      	mov	r3, r2
 8008832:	00db      	lsls	r3, r3, #3
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	3301      	adds	r3, #1
 8008842:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	4613      	mov	r3, r2
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4413      	add	r3, r2
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1eb      	bne.n	800882e <getRows+0x12>

	}

	return counterRows;
 8008856:	7bfb      	ldrb	r3, [r7, #15]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[7][7]){
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008870:	e002      	b.n	8008878 <getColums+0x14>

		counterColumns++;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	3301      	adds	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	5cd3      	ldrb	r3, [r2, r3]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f7      	bne.n	8008872 <getColums+0xe>

	}

	return counterColumns;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8008890:	b480      	push	{r7}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 800889e:	f04f 0300 	mov.w	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 80088a4:	f04f 0300 	mov.w	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 80088aa:	2300      	movs	r3, #0
 80088ac:	77fb      	strb	r3, [r7, #31]
 80088ae:	e04d      	b.n	800894c <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 80088b0:	2300      	movs	r3, #0
 80088b2:	77bb      	strb	r3, [r7, #30]
 80088b4:	e034      	b.n	8008920 <findLesserValue+0x90>
			if (i == j){
 80088b6:	7ffa      	ldrb	r2, [r7, #31]
 80088b8:	7fbb      	ldrb	r3, [r7, #30]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d101      	bne.n	80088c2 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 80088be:	bf00      	nop
 80088c0:	e02b      	b.n	800891a <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 80088c2:	7ffb      	ldrb	r3, [r7, #31]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	4413      	add	r3, r2
 80088ca:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 80088ce:	7fbb      	ldrb	r3, [r7, #30]
 80088d0:	011b      	lsls	r3, r3, #4
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	4413      	add	r3, r2
 80088d6:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 80088da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	d41a      	bmi.n	800891a <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 80088e4:	7ffb      	ldrb	r3, [r7, #31]
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	4413      	add	r3, r2
 80088ec:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 80088f0:	7fbb      	ldrb	r3, [r7, #30]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	4413      	add	r3, r2
 80088f8:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 80088fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8008900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008904:	d104      	bne.n	8008910 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800890e:	e004      	b.n	800891a <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8008918:	e006      	b.n	8008928 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 800891a:	7fbb      	ldrb	r3, [r7, #30]
 800891c:	3301      	adds	r3, #1
 800891e:	77bb      	strb	r3, [r7, #30]
 8008920:	7fba      	ldrb	r2, [r7, #30]
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	429a      	cmp	r2, r3
 8008926:	d3c6      	bcc.n	80088b6 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8008928:	7fba      	ldrb	r2, [r7, #30]
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	429a      	cmp	r2, r3
 800892e:	d10a      	bne.n	8008946 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8008930:	7ffa      	ldrb	r2, [r7, #31]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8008936:	7ffb      	ldrb	r3, [r7, #31]
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	4413      	add	r3, r2
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8008944:	e006      	b.n	8008954 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8008946:	7ffb      	ldrb	r3, [r7, #31]
 8008948:	3301      	adds	r3, #1
 800894a:	77fb      	strb	r3, [r7, #31]
 800894c:	7ffa      	ldrb	r2, [r7, #31]
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d3ad      	bcc.n	80088b0 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d076      	beq.n	8008a4c <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 800895e:	2300      	movs	r3, #0
 8008960:	77fb      	strb	r3, [r7, #31]
 8008962:	e06e      	b.n	8008a42 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8008964:	7ffb      	ldrb	r3, [r7, #31]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	4413      	add	r3, r2
 800896c:	edd3 6a00 	vldr	s13, [r3]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897a:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 800897e:	2300      	movs	r3, #0
 8008980:	77bb      	strb	r3, [r7, #30]
 8008982:	e045      	b.n	8008a10 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8008984:	7fbb      	ldrb	r3, [r7, #30]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	4413      	add	r3, r2
 800898c:	edd3 6a00 	vldr	s13, [r3]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 800899e:	7ffa      	ldrb	r2, [r7, #31]
 80089a0:	7fbb      	ldrb	r3, [r7, #30]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d101      	bne.n	80089aa <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 80089a6:	bf00      	nop
 80089a8:	e02f      	b.n	8008a0a <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 80089aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80089ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b2:	eef4 7a47 	vcmp.f32	s15, s14
 80089b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ba:	d11c      	bne.n	80089f6 <findLesserValue+0x166>
 80089bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80089c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c4:	eef4 7a47 	vcmp.f32	s15, s14
 80089c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089cc:	d113      	bne.n	80089f6 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	4413      	add	r3, r2
 80089d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80089da:	7fbb      	ldrb	r3, [r7, #30]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	4413      	add	r3, r2
 80089e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80089e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ee:	d900      	bls.n	80089f2 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 80089f0:	e014      	b.n	8008a1c <findLesserValue+0x18c>
						__NOP();
 80089f2:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 80089f4:	e009      	b.n	8008a0a <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 80089f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80089fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fe:	eef4 7a47 	vcmp.f32	s15, s14
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	d108      	bne.n	8008a1a <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8008a08:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8008a0a:	7fbb      	ldrb	r3, [r7, #30]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	77bb      	strb	r3, [r7, #30]
 8008a10:	7fba      	ldrb	r2, [r7, #30]
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d3b5      	bcc.n	8008984 <findLesserValue+0xf4>
 8008a18:	e000      	b.n	8008a1c <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8008a1a:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8008a1c:	7fba      	ldrb	r2, [r7, #30]
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d10b      	bne.n	8008a3c <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8008a24:	7ffa      	ldrb	r2, [r7, #31]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8008a2a:	7ffb      	ldrb	r3, [r7, #31]
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4413      	add	r3, r2
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8008a38:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8008a3a:	e008      	b.n	8008a4e <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8008a3c:	7ffb      	ldrb	r3, [r7, #31]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	77fb      	strb	r3, [r7, #31]
 8008a42:	7ffa      	ldrb	r2, [r7, #31]
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d38c      	bcc.n	8008964 <findLesserValue+0xd4>
}
 8008a4a:	e000      	b.n	8008a4e <findLesserValue+0x1be>
		__NOP();
 8008a4c:	bf00      	nop
}
 8008a4e:	bf00      	nop
 8008a50:	3724      	adds	r7, #36	; 0x24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	; (8008b24 <initSerialComunication+0xc8>)
 8008a6e:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4a2b      	ldr	r2, [pc, #172]	; (8008b24 <initSerialComunication+0xc8>)
 8008a76:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	79da      	ldrb	r2, [r3, #7]
 8008a7c:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <initSerialComunication+0xc8>)
 8008a7e:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	791a      	ldrb	r2, [r3, #4]
 8008a84:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <initSerialComunication+0xc8>)
 8008a86:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	799a      	ldrb	r2, [r3, #6]
 8008a8c:	4b25      	ldr	r3, [pc, #148]	; (8008b24 <initSerialComunication+0xc8>)
 8008a8e:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	7a5a      	ldrb	r2, [r3, #9]
 8008a94:	4b23      	ldr	r3, [pc, #140]	; (8008b24 <initSerialComunication+0xc8>)
 8008a96:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	7a9a      	ldrb	r2, [r3, #10]
 8008a9c:	4b21      	ldr	r3, [pc, #132]	; (8008b24 <initSerialComunication+0xc8>)
 8008a9e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	7a1a      	ldrb	r2, [r3, #8]
 8008aa4:	4b1f      	ldr	r3, [pc, #124]	; (8008b24 <initSerialComunication+0xc8>)
 8008aa6:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <initSerialComunication+0xcc>)
 8008aae:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	7a5a      	ldrb	r2, [r3, #9]
 8008ab4:	4b1c      	ldr	r3, [pc, #112]	; (8008b28 <initSerialComunication+0xcc>)
 8008ab6:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	795a      	ldrb	r2, [r3, #5]
 8008abc:	4b1a      	ldr	r3, [pc, #104]	; (8008b28 <initSerialComunication+0xcc>)
 8008abe:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	7a1a      	ldrb	r2, [r3, #8]
 8008ac4:	4b18      	ldr	r3, [pc, #96]	; (8008b28 <initSerialComunication+0xcc>)
 8008ac6:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	791a      	ldrb	r2, [r3, #4]
 8008acc:	4b16      	ldr	r3, [pc, #88]	; (8008b28 <initSerialComunication+0xcc>)
 8008ace:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	79da      	ldrb	r2, [r3, #7]
 8008ad4:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <initSerialComunication+0xcc>)
 8008ad6:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	799a      	ldrb	r2, [r3, #6]
 8008adc:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <initSerialComunication+0xcc>)
 8008ade:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <initSerialComunication+0xd0>)
 8008ae6:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7a5a      	ldrb	r2, [r3, #9]
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <initSerialComunication+0xd0>)
 8008aee:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	795a      	ldrb	r2, [r3, #5]
 8008af4:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <initSerialComunication+0xd0>)
 8008af6:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	7a1a      	ldrb	r2, [r3, #8]
 8008afc:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <initSerialComunication+0xd0>)
 8008afe:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	791a      	ldrb	r2, [r3, #4]
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <initSerialComunication+0xd0>)
 8008b06:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	79da      	ldrb	r2, [r3, #7]
 8008b0c:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <initSerialComunication+0xd0>)
 8008b0e:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	799a      	ldrb	r2, [r3, #6]
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <initSerialComunication+0xd0>)
 8008b16:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	2000d5fc 	.word	0x2000d5fc
 8008b28:	2000d690 	.word	0x2000d690
 8008b2c:	2000d69c 	.word	0x2000d69c

08008b30 <create_Astar_operations>:
void create_Astar_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *ptrbuild,
					   Parameters_Path_t *ptrPath,
					   Parameters_Position_t *ptrPos){
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08e      	sub	sp, #56	; 0x38
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 8008b56:	f04f 0200 	mov.w	r2, #0
 8008b5a:	f04f 0300 	mov.w	r3, #0
 8008b5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	e9c1 2300 	strd	r2, r3, [r1]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b84:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008b9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b9e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// calculo del vector unitario del robot


	unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8008ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba4:	ed93 7b04 	vldr	d7, [r3, #16]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	3310      	adds	r3, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	eeb0 0a47 	vmov.f32	s0, s14
 8008bb2:	eef0 0a67 	vmov.f32	s1, s15
 8008bb6:	f002 febd 	bl	800b934 <unitary_vector>




	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bc0:	e06f      	b.n	8008ca2 <create_Astar_operations+0x172>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_y = -(shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 8008bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	4413      	add	r3, r2
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	440b      	add	r3, r1
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	edd3 7a00 	vldr	s15, [r3]
 8008bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf0:	ee17 0a90 	vmov	r0, s15
 8008bf4:	f7f7 fcc0 	bl	8000578 <__aeabi_f2d>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dist_to_x = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 8008c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c04:	3301      	adds	r3, #1
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	440b      	add	r3, r1
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	edd3 7a00 	vldr	s15, [r3]
 8008c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2e:	ee17 0a90 	vmov	r0, s15
 8008c32:	f7f7 fca1 	bl	8000578 <__aeabi_f2d>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]

		finishline_x += dist_to_x; // Coordenada x a ir
 8008c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008c46:	f7f7 fb39 	bl	80002bc <__adddf3>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 8008c52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c5a:	f7f7 fb2f 	bl	80002bc <__adddf3>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		ptrPath->goal_Position_x = finishline_x;
 8008c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPath->goal_Position_y = finishline_y;
 8008c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c76:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8008c7a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8008c7e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f002 fae7 	bl	800b258 <build_Operation>

		change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8008c8a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8008c8e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008c92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c94:	f002 fbc4 	bl	800b420 <change_coordinates_position>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ca2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	7a9b      	ldrb	r3, [r3, #10]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	429a      	cmp	r2, r3
 8008cae:	db88      	blt.n	8008bc2 <create_Astar_operations+0x92>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cb6:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8008ce0 <create_Astar_operations+0x1b0>
 8008cba:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8008ce0 <create_Astar_operations+0x1b0>
 8008cbe:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8008ce0 <create_Astar_operations+0x1b0>
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f002 fb66 	bl	800b398 <add_Operation>
	ptrbuild->number_operation = 0;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


}
 8008cd4:	bf00      	nop
 8008cd6:	3738      	adds	r7, #56	; 0x38
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	f3af 8000 	nop.w
	...

08008ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	4603      	mov	r3, r0
 8008cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	db0b      	blt.n	8008d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	f003 021f 	and.w	r2, r3, #31
 8008d00:	4907      	ldr	r1, [pc, #28]	; (8008d20 <__NVIC_EnableIRQ+0x38>)
 8008d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	2001      	movs	r0, #1
 8008d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8008d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	e000e100 	.word	0xe000e100

08008d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	db0a      	blt.n	8008d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	490c      	ldr	r1, [pc, #48]	; (8008d70 <__NVIC_SetPriority+0x4c>)
 8008d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d42:	0112      	lsls	r2, r2, #4
 8008d44:	b2d2      	uxtb	r2, r2
 8008d46:	440b      	add	r3, r1
 8008d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d4c:	e00a      	b.n	8008d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	4908      	ldr	r1, [pc, #32]	; (8008d74 <__NVIC_SetPriority+0x50>)
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	3b04      	subs	r3, #4
 8008d5c:	0112      	lsls	r2, r2, #4
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	440b      	add	r3, r1
 8008d62:	761a      	strb	r2, [r3, #24]
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	e000e100 	.word	0xe000e100
 8008d74:	e000ed00 	.word	0xe000ed00

08008d78 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <inTIM4+0x30>)
 8008d7e:	4a0b      	ldr	r2, [pc, #44]	; (8008dac <inTIM4+0x34>)
 8008d80:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <inTIM4+0x30>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8008d88:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <inTIM4+0x30>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8008d8e:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <inTIM4+0x30>)
 8008d90:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d94:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8008d96:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <inTIM4+0x30>)
 8008d98:	220a      	movs	r2, #10
 8008d9a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8008d9c:	4802      	ldr	r0, [pc, #8]	; (8008da8 <inTIM4+0x30>)
 8008d9e:	f000 f807 	bl	8008db0 <BasicTimer_Config>

}
 8008da2:	bf00      	nop
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20000338 	.word	0x20000338
 8008dac:	40000800 	.word	0x40000800

08008db0 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008dc0:	b672      	cpsid	i
}
 8008dc2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a85      	ldr	r2, [pc, #532]	; (8008fe0 <BasicTimer_Config+0x230>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d106      	bne.n	8008ddc <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008dce:	4b85      	ldr	r3, [pc, #532]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd2:	4a84      	ldr	r2, [pc, #528]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8008dda:	e030      	b.n	8008e3e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de4:	d106      	bne.n	8008df4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008de6:	4b7f      	ldr	r3, [pc, #508]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	4a7e      	ldr	r2, [pc, #504]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008dec:	f043 0301 	orr.w	r3, r3, #1
 8008df0:	6413      	str	r3, [r2, #64]	; 0x40
 8008df2:	e024      	b.n	8008e3e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a7b      	ldr	r2, [pc, #492]	; (8008fe8 <BasicTimer_Config+0x238>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d106      	bne.n	8008e0c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008dfe:	4b79      	ldr	r3, [pc, #484]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	4a78      	ldr	r2, [pc, #480]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008e04:	f043 0302 	orr.w	r3, r3, #2
 8008e08:	6413      	str	r3, [r2, #64]	; 0x40
 8008e0a:	e018      	b.n	8008e3e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a76      	ldr	r2, [pc, #472]	; (8008fec <BasicTimer_Config+0x23c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d106      	bne.n	8008e24 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008e16:	4b73      	ldr	r3, [pc, #460]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	4a72      	ldr	r2, [pc, #456]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008e1c:	f043 0304 	orr.w	r3, r3, #4
 8008e20:	6413      	str	r3, [r2, #64]	; 0x40
 8008e22:	e00c      	b.n	8008e3e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a71      	ldr	r2, [pc, #452]	; (8008ff0 <BasicTimer_Config+0x240>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d106      	bne.n	8008e3c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8008e2e:	4b6d      	ldr	r3, [pc, #436]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	4a6c      	ldr	r2, [pc, #432]	; (8008fe4 <BasicTimer_Config+0x234>)
 8008e34:	f043 0308 	orr.w	r3, r3, #8
 8008e38:	6413      	str	r3, [r2, #64]	; 0x40
 8008e3a:	e000      	b.n	8008e3e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8008e3c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008e4c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6892      	ldr	r2, [r2, #8]
 8008e56:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	791b      	ldrb	r3, [r3, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 80d3 	bne.w	8009008 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 0210 	bic.w	r2, r2, #16
 8008e70:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2ba0      	cmp	r3, #160	; 0xa0
 8008e7c:	d022      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2bc8      	cmp	r3, #200	; 0xc8
 8008e82:	d01f      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008e8a:	d01b      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008e92:	d017      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008e9a:	d013      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008ea2:	d00f      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008eaa:	d00b      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008eb2:	d007      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008eba:	d003      	beq.n	8008ec4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ec2:	d10b      	bne.n	8008edc <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	2264      	movs	r2, #100	; 0x64
 8008eca:	fb02 f303 	mul.w	r3, r2, r3
 8008ece:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	3a01      	subs	r2, #1
 8008ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8008eda:	e07c      	b.n	8008fd6 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008ee2:	d029      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008eea:	d025      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d020      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008efc:	d01c      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d017      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f241 7270 	movw	r2, #6000	; 0x1770
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d012      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f641 3258 	movw	r2, #7000	; 0x1b58
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d00d      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008f22:	d009      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f242 3228 	movw	r2, #9000	; 0x2328
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d004      	beq.n	8008f38 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d10c      	bne.n	8008f52 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	3a01      	subs	r2, #1
 8008f4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008f50:	e041      	b.n	8008fd6 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008f58:	d028      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d023      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f247 5230 	movw	r2, #30000	; 0x7530
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01e      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f649 4240 	movw	r2, #40000	; 0x9c40
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d019      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d014      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00f      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <BasicTimer_Config+0x244>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d00b      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4a18      	ldr	r2, [pc, #96]	; (8008ff8 <BasicTimer_Config+0x248>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d007      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4a17      	ldr	r2, [pc, #92]	; (8008ffc <BasicTimer_Config+0x24c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4a16      	ldr	r2, [pc, #88]	; (8009000 <BasicTimer_Config+0x250>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d108      	bne.n	8008fbe <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	3a01      	subs	r2, #1
 8008fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fbc:	e00b      	b.n	8008fd6 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	4a10      	ldr	r2, [pc, #64]	; (8009004 <BasicTimer_Config+0x254>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	08db      	lsrs	r3, r3, #3
 8008fca:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	3a01      	subs	r2, #1
 8008fd4:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8008fde:	e027      	b.n	8009030 <BasicTimer_Config+0x280>
 8008fe0:	40010000 	.word	0x40010000
 8008fe4:	40023800 	.word	0x40023800
 8008fe8:	40000400 	.word	0x40000400
 8008fec:	40000800 	.word	0x40000800
 8008ff0:	40000c00 	.word	0x40000c00
 8008ff4:	00011170 	.word	0x00011170
 8008ff8:	00013880 	.word	0x00013880
 8008ffc:	00015f90 	.word	0x00015f90
 8009000:	000186a0 	.word	0x000186a0
 8009004:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0210 	orr.w	r2, r2, #16
 8009016:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3a01      	subs	r2, #1
 8009022:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3a01      	subs	r2, #1
 800902e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7c1b      	ldrb	r3, [r3, #16]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d12d      	bne.n	8009094 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0201 	orr.w	r2, r2, #1
 8009046:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009050:	d103      	bne.n	800905a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8009052:	201c      	movs	r0, #28
 8009054:	f7ff fe48 	bl	8008ce8 <__NVIC_EnableIRQ>
 8009058:	e024      	b.n	80090a4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <BasicTimer_Config+0x300>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d103      	bne.n	800906c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8009064:	201d      	movs	r0, #29
 8009066:	f7ff fe3f 	bl	8008ce8 <__NVIC_EnableIRQ>
 800906a:	e01b      	b.n	80090a4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a10      	ldr	r2, [pc, #64]	; (80090b4 <BasicTimer_Config+0x304>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d103      	bne.n	800907e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8009076:	201e      	movs	r0, #30
 8009078:	f7ff fe36 	bl	8008ce8 <__NVIC_EnableIRQ>
 800907c:	e012      	b.n	80090a4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a0d      	ldr	r2, [pc, #52]	; (80090b8 <BasicTimer_Config+0x308>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d103      	bne.n	8009090 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8009088:	2032      	movs	r0, #50	; 0x32
 800908a:	f7ff fe2d 	bl	8008ce8 <__NVIC_EnableIRQ>
 800908e:	e009      	b.n	80090a4 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8009090:	bf00      	nop
 8009092:	e007      	b.n	80090a4 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68da      	ldr	r2, [r3, #12]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0201 	bic.w	r2, r2, #1
 80090a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80090a4:	b662      	cpsie	i
}
 80090a6:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00

080090bc <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 80090c6:	4818      	ldr	r0, [pc, #96]	; (8009128 <delay_ms+0x6c>)
 80090c8:	f000 fab8 	bl	800963c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	461a      	mov	r2, r3
 80090d0:	0092      	lsls	r2, r2, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 80090e0:	e016      	b.n	8009110 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 80090e2:	4b11      	ldr	r3, [pc, #68]	; (8009128 <delay_ms+0x6c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00f      	beq.n	8009110 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 80090f0:	4b0d      	ldr	r3, [pc, #52]	; (8009128 <delay_ms+0x6c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	3301      	adds	r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	89fb      	ldrh	r3, [r7, #14]
 80090fc:	4413      	add	r3, r2
 80090fe:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8009100:	4b09      	ldr	r3, [pc, #36]	; (8009128 <delay_ms+0x6c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	691a      	ldr	r2, [r3, #16]
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <delay_ms+0x6c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8009110:	89fa      	ldrh	r2, [r7, #14]
 8009112:	89bb      	ldrh	r3, [r7, #12]
 8009114:	429a      	cmp	r2, r3
 8009116:	d3e4      	bcc.n	80090e2 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8009118:	4803      	ldr	r0, [pc, #12]	; (8009128 <delay_ms+0x6c>)
 800911a:	f000 faa1 	bl	8009660 <stopTimer>
}
 800911e:	bf00      	nop
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000338 	.word	0x20000338

0800912c <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	460b      	mov	r3, r1
 8009136:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8009138:	b672      	cpsid	i
}
 800913a:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009144:	d105      	bne.n	8009152 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	4619      	mov	r1, r3
 800914a:	201c      	movs	r0, #28
 800914c:	f7ff fdea 	bl	8008d24 <__NVIC_SetPriority>
 8009150:	e021      	b.n	8009196 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <TIM_SetPriority+0x78>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d105      	bne.n	8009168 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	4619      	mov	r1, r3
 8009160:	201d      	movs	r0, #29
 8009162:	f7ff fddf 	bl	8008d24 <__NVIC_SetPriority>
 8009166:	e016      	b.n	8009196 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a0e      	ldr	r2, [pc, #56]	; (80091a8 <TIM_SetPriority+0x7c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d105      	bne.n	800917e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	4619      	mov	r1, r3
 8009176:	201e      	movs	r0, #30
 8009178:	f7ff fdd4 	bl	8008d24 <__NVIC_SetPriority>
 800917c:	e00b      	b.n	8009196 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <TIM_SetPriority+0x80>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d105      	bne.n	8009194 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	4619      	mov	r1, r3
 800918c:	2032      	movs	r0, #50	; 0x32
 800918e:	f7ff fdc9 	bl	8008d24 <__NVIC_SetPriority>
 8009192:	e000      	b.n	8009196 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8009194:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009196:	b662      	cpsie	i
}
 8009198:	bf00      	nop
	}

	__enable_irq();

}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	40000400 	.word	0x40000400
 80091a8:	40000800 	.word	0x40000800
 80091ac:	40000c00 	.word	0x40000c00

080091b0 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80091b4:	bf00      	nop
}
 80091b6:	bf00      	nop
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80091c4:	bf00      	nop
}
 80091c6:	bf00      	nop
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80091d4:	bf00      	nop
}
 80091d6:	bf00      	nop
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80091e4:	bf00      	nop
}
 80091e6:	bf00      	nop
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80091f4:	bf00      	nop
}
 80091f6:	bf00      	nop
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009204:	bf00      	nop
}
 8009206:	bf00      	nop
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009214:	bf00      	nop
}
 8009216:	bf00      	nop
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009224:	bf00      	nop
}
 8009226:	bf00      	nop
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009234:	bf00      	nop
}
 8009236:	bf00      	nop
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009244:	bf00      	nop
}
 8009246:	bf00      	nop
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009254:	bf00      	nop
}
 8009256:	bf00      	nop
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009264:	bf00      	nop
}
 8009266:	bf00      	nop
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009274:	bf00      	nop
}
 8009276:	bf00      	nop
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009284:	bf00      	nop
}
 8009286:	bf00      	nop
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009294:	bf00      	nop
}
 8009296:	bf00      	nop
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80092a4:	bf00      	nop
}
 80092a6:	bf00      	nop
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80092b4:	bf00      	nop
}
 80092b6:	bf00      	nop
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80092c4:	bf00      	nop
}
 80092c6:	bf00      	nop
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80092d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80092e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80092f2:	f7f9 fa87 	bl	8002804 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80092f6:	e066      	b.n	80093c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80092f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d012      	beq.n	800932c <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8009306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009310:	f023 0302 	bic.w	r3, r3, #2
 8009314:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8009316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009324:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8009326:	f7ff ff5b 	bl	80091e0 <Capture_TIM2_Ch1_Callback>
}
 800932a:	e04c      	b.n	80093c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 800932c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0304 	and.w	r3, r3, #4
 8009336:	2b00      	cmp	r3, #0
 8009338:	d012      	beq.n	8009360 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800933a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009344:	f023 0304 	bic.w	r3, r3, #4
 8009348:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800934a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009358:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800935a:	f7ff ff49 	bl	80091f0 <Capture_TIM2_Ch2_Callback>
}
 800935e:	e032      	b.n	80093c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8009360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d012      	beq.n	8009394 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800936e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009378:	f023 0308 	bic.w	r3, r3, #8
 800937c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800937e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800938c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800938e:	f7ff ff37 	bl	8009200 <Capture_TIM2_Ch3_Callback>
}
 8009392:	e018      	b.n	80093c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8009394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0310 	and.w	r3, r3, #16
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80093a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80093ac:	f023 0310 	bic.w	r3, r3, #16
 80093b0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80093b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80093bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093c0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80093c2:	f7ff ff25 	bl	8009210 <Capture_TIM2_Ch4_Callback>
}
 80093c6:	bf00      	nop
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80093d0:	4b31      	ldr	r3, [pc, #196]	; (8009498 <TIM3_IRQHandler+0xcc>)
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d008      	beq.n	80093ee <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80093dc:	4b2e      	ldr	r3, [pc, #184]	; (8009498 <TIM3_IRQHandler+0xcc>)
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	4a2d      	ldr	r2, [pc, #180]	; (8009498 <TIM3_IRQHandler+0xcc>)
 80093e2:	f023 0301 	bic.w	r3, r3, #1
 80093e6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80093e8:	f7ff fee2 	bl	80091b0 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80093ec:	e052      	b.n	8009494 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80093ee:	4b2a      	ldr	r3, [pc, #168]	; (8009498 <TIM3_IRQHandler+0xcc>)
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80093fa:	4b27      	ldr	r3, [pc, #156]	; (8009498 <TIM3_IRQHandler+0xcc>)
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	4a26      	ldr	r2, [pc, #152]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009400:	f023 0302 	bic.w	r3, r3, #2
 8009404:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8009406:	4b24      	ldr	r3, [pc, #144]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	4a23      	ldr	r2, [pc, #140]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800940c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009410:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8009412:	f7ff ff05 	bl	8009220 <Capture_TIM3_Ch1_Callback>
}
 8009416:	e03d      	b.n	8009494 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8009418:	4b1f      	ldr	r3, [pc, #124]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00e      	beq.n	8009442 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8009424:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	4a1b      	ldr	r2, [pc, #108]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800942a:	f023 0304 	bic.w	r3, r3, #4
 800942e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8009430:	4b19      	ldr	r3, [pc, #100]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	4a18      	ldr	r2, [pc, #96]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800943a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 800943c:	f7ff fef8 	bl	8009230 <Capture_TIM3_Ch2_Callback>
}
 8009440:	e028      	b.n	8009494 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8009442:	4b15      	ldr	r3, [pc, #84]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00e      	beq.n	800946c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	4a11      	ldr	r2, [pc, #68]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009454:	f023 0308 	bic.w	r3, r3, #8
 8009458:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009464:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8009466:	f7ff feeb 	bl	8009240 <Capture_TIM3_Ch3_Callback>
}
 800946a:	e013      	b.n	8009494 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f003 0310 	and.w	r3, r3, #16
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00d      	beq.n	8009494 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8009478:	4b07      	ldr	r3, [pc, #28]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	4a06      	ldr	r2, [pc, #24]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800947e:	f023 0310 	bic.w	r3, r3, #16
 8009482:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <TIM3_IRQHandler+0xcc>)
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	4a03      	ldr	r2, [pc, #12]	; (8009498 <TIM3_IRQHandler+0xcc>)
 800948a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800948e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8009490:	f7ff fede 	bl	8009250 <Capture_TIM3_Ch4_Callback>
}
 8009494:	bf00      	nop
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40000400 	.word	0x40000400

0800949c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80094a0:	4b31      	ldr	r3, [pc, #196]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d008      	beq.n	80094be <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80094ac:	4b2e      	ldr	r3, [pc, #184]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	4a2d      	ldr	r2, [pc, #180]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094b2:	f023 0301 	bic.w	r3, r3, #1
 80094b6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80094b8:	f7ff fe82 	bl	80091c0 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80094bc:	e052      	b.n	8009564 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80094be:	4b2a      	ldr	r3, [pc, #168]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00e      	beq.n	80094e8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80094ca:	4b27      	ldr	r3, [pc, #156]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	4a26      	ldr	r2, [pc, #152]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094d0:	f023 0302 	bic.w	r3, r3, #2
 80094d4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80094d6:	4b24      	ldr	r3, [pc, #144]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	4a23      	ldr	r2, [pc, #140]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094e0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80094e2:	f7ff febd 	bl	8009260 <Capture_TIM4_Ch1_Callback>
}
 80094e6:	e03d      	b.n	8009564 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80094e8:	4b1f      	ldr	r3, [pc, #124]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00e      	beq.n	8009512 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80094f4:	4b1c      	ldr	r3, [pc, #112]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	4a1b      	ldr	r2, [pc, #108]	; (8009568 <TIM4_IRQHandler+0xcc>)
 80094fa:	f023 0304 	bic.w	r3, r3, #4
 80094fe:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8009500:	4b19      	ldr	r3, [pc, #100]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	4a18      	ldr	r2, [pc, #96]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800950a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800950c:	f7ff fec8 	bl	80092a0 <Capture_TIM5_Ch2_Callback>
}
 8009510:	e028      	b.n	8009564 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8009512:	4b15      	ldr	r3, [pc, #84]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f003 0308 	and.w	r3, r3, #8
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00e      	beq.n	800953c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800951e:	4b12      	ldr	r3, [pc, #72]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	4a11      	ldr	r2, [pc, #68]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009524:	f023 0308 	bic.w	r3, r3, #8
 8009528:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <TIM4_IRQHandler+0xcc>)
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	4a0e      	ldr	r2, [pc, #56]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009534:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8009536:	f7ff fe9b 	bl	8009270 <Capture_TIM4_Ch3_Callback>
}
 800953a:	e013      	b.n	8009564 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 800953c:	4b0a      	ldr	r3, [pc, #40]	; (8009568 <TIM4_IRQHandler+0xcc>)
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00d      	beq.n	8009564 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8009548:	4b07      	ldr	r3, [pc, #28]	; (8009568 <TIM4_IRQHandler+0xcc>)
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	4a06      	ldr	r2, [pc, #24]	; (8009568 <TIM4_IRQHandler+0xcc>)
 800954e:	f023 0310 	bic.w	r3, r3, #16
 8009552:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8009554:	4b04      	ldr	r3, [pc, #16]	; (8009568 <TIM4_IRQHandler+0xcc>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4a03      	ldr	r2, [pc, #12]	; (8009568 <TIM4_IRQHandler+0xcc>)
 800955a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800955e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8009560:	f7ff fe8e 	bl	8009280 <Capture_TIM4_Ch4_Callback>
}
 8009564:	bf00      	nop
 8009566:	bd80      	pop	{r7, pc}
 8009568:	40000800 	.word	0x40000800

0800956c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8009570:	4b31      	ldr	r3, [pc, #196]	; (8009638 <TIM5_IRQHandler+0xcc>)
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d008      	beq.n	800958e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800957c:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <TIM5_IRQHandler+0xcc>)
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	4a2d      	ldr	r2, [pc, #180]	; (8009638 <TIM5_IRQHandler+0xcc>)
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8009588:	f7ff fe22 	bl	80091d0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800958c:	e052      	b.n	8009634 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800958e:	4b2a      	ldr	r3, [pc, #168]	; (8009638 <TIM5_IRQHandler+0xcc>)
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00e      	beq.n	80095b8 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800959a:	4b27      	ldr	r3, [pc, #156]	; (8009638 <TIM5_IRQHandler+0xcc>)
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	4a26      	ldr	r2, [pc, #152]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095a0:	f023 0302 	bic.w	r3, r3, #2
 80095a4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80095a6:	4b24      	ldr	r3, [pc, #144]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	4a23      	ldr	r2, [pc, #140]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095b0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80095b2:	f7ff fe6d 	bl	8009290 <Capture_TIM5_Ch1_Callback>
}
 80095b6:	e03d      	b.n	8009634 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80095b8:	4b1f      	ldr	r3, [pc, #124]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00e      	beq.n	80095e2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80095c4:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	4a1b      	ldr	r2, [pc, #108]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095ca:	f023 0304 	bic.w	r3, r3, #4
 80095ce:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80095d0:	4b19      	ldr	r3, [pc, #100]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	4a18      	ldr	r2, [pc, #96]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095da:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80095dc:	f7ff fe60 	bl	80092a0 <Capture_TIM5_Ch2_Callback>
}
 80095e0:	e028      	b.n	8009634 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00e      	beq.n	800960c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	4a11      	ldr	r2, [pc, #68]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095f4:	f023 0308 	bic.w	r3, r3, #8
 80095f8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80095fa:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <TIM5_IRQHandler+0xcc>)
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	4a0e      	ldr	r2, [pc, #56]	; (8009638 <TIM5_IRQHandler+0xcc>)
 8009600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009604:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8009606:	f7ff fe53 	bl	80092b0 <Capture_TIM5_Ch3_Callback>
}
 800960a:	e013      	b.n	8009634 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <TIM5_IRQHandler+0xcc>)
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	f003 0310 	and.w	r3, r3, #16
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00d      	beq.n	8009634 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <TIM5_IRQHandler+0xcc>)
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	4a06      	ldr	r2, [pc, #24]	; (8009638 <TIM5_IRQHandler+0xcc>)
 800961e:	f023 0310 	bic.w	r3, r3, #16
 8009622:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <TIM5_IRQHandler+0xcc>)
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	4a03      	ldr	r2, [pc, #12]	; (8009638 <TIM5_IRQHandler+0xcc>)
 800962a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800962e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8009630:	f7ff fe46 	bl	80092c0 <Capture_TIM5_Ch4_Callback>
}
 8009634:	bf00      	nop
 8009636:	bd80      	pop	{r7, pc}
 8009638:	40000c00 	.word	0x40000c00

0800963c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0201 	bic.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <__NVIC_EnableIRQ>:
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800968e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009692:	2b00      	cmp	r3, #0
 8009694:	db0b      	blt.n	80096ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	f003 021f 	and.w	r2, r3, #31
 800969c:	4907      	ldr	r1, [pc, #28]	; (80096bc <__NVIC_EnableIRQ+0x38>)
 800969e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a2:	095b      	lsrs	r3, r3, #5
 80096a4:	2001      	movs	r0, #1
 80096a6:	fa00 f202 	lsl.w	r2, r0, r2
 80096aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	e000e100 	.word	0xe000e100

080096c0 <__NVIC_SetPriority>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db0a      	blt.n	80096ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	490c      	ldr	r1, [pc, #48]	; (800970c <__NVIC_SetPriority+0x4c>)
 80096da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096de:	0112      	lsls	r2, r2, #4
 80096e0:	b2d2      	uxtb	r2, r2
 80096e2:	440b      	add	r3, r1
 80096e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80096e8:	e00a      	b.n	8009700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	4908      	ldr	r1, [pc, #32]	; (8009710 <__NVIC_SetPriority+0x50>)
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	3b04      	subs	r3, #4
 80096f8:	0112      	lsls	r2, r2, #4
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	440b      	add	r3, r1
 80096fe:	761a      	strb	r2, [r3, #24]
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	e000e100 	.word	0xe000e100
 8009710:	e000ed00 	.word	0xe000ed00

08009714 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4618      	mov	r0, r3
 8009722:	f001 f8bf 	bl	800a8a4 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8009726:	4b96      	ldr	r3, [pc, #600]	; (8009980 <extInt_Config+0x26c>)
 8009728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800972c:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	791b      	ldrb	r3, [r3, #4]
 8009734:	2b0f      	cmp	r3, #15
 8009736:	f200 85cd 	bhi.w	800a2d4 <extInt_Config+0xbc0>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <extInt_Config+0x2c>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009781 	.word	0x08009781
 8009744:	08009837 	.word	0x08009837
 8009748:	080098ed 	.word	0x080098ed
 800974c:	080099c3 	.word	0x080099c3
 8009750:	08009a79 	.word	0x08009a79
 8009754:	08009b27 	.word	0x08009b27
 8009758:	08009bed 	.word	0x08009bed
 800975c:	08009c95 	.word	0x08009c95
 8009760:	08009d3d 	.word	0x08009d3d
 8009764:	08009de5 	.word	0x08009de5
 8009768:	08009eab 	.word	0x08009eab
 800976c:	08009f53 	.word	0x08009f53
 8009770:	08009ffb 	.word	0x08009ffb
 8009774:	0800a0c1 	.word	0x0800a0c1
 8009778:	0800a167 	.word	0x0800a167
 800977c:	0800a20f 	.word	0x0800a20f
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8009780:	4b80      	ldr	r3, [pc, #512]	; (8009984 <extInt_Config+0x270>)
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	4a7f      	ldr	r2, [pc, #508]	; (8009984 <extInt_Config+0x270>)
 8009786:	f023 030f 	bic.w	r3, r3, #15
 800978a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a7d      	ldr	r2, [pc, #500]	; (8009988 <extInt_Config+0x274>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d105      	bne.n	80097a4 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8009798:	4b7a      	ldr	r3, [pc, #488]	; (8009984 <extInt_Config+0x270>)
 800979a:	4a7a      	ldr	r2, [pc, #488]	; (8009984 <extInt_Config+0x270>)
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80097a0:	f000 bd9a 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a78      	ldr	r2, [pc, #480]	; (800998c <extInt_Config+0x278>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d107      	bne.n	80097c0 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80097b0:	4b74      	ldr	r3, [pc, #464]	; (8009984 <extInt_Config+0x270>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	4a73      	ldr	r2, [pc, #460]	; (8009984 <extInt_Config+0x270>)
 80097b6:	f043 0301 	orr.w	r3, r3, #1
 80097ba:	6093      	str	r3, [r2, #8]
					break;
 80097bc:	f000 bd8c 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a72      	ldr	r2, [pc, #456]	; (8009990 <extInt_Config+0x27c>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d107      	bne.n	80097dc <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80097cc:	4b6d      	ldr	r3, [pc, #436]	; (8009984 <extInt_Config+0x270>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	4a6c      	ldr	r2, [pc, #432]	; (8009984 <extInt_Config+0x270>)
 80097d2:	f043 0302 	orr.w	r3, r3, #2
 80097d6:	6093      	str	r3, [r2, #8]
					break;
 80097d8:	f000 bd7e 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a6c      	ldr	r2, [pc, #432]	; (8009994 <extInt_Config+0x280>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d107      	bne.n	80097f8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80097e8:	4b66      	ldr	r3, [pc, #408]	; (8009984 <extInt_Config+0x270>)
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	4a65      	ldr	r2, [pc, #404]	; (8009984 <extInt_Config+0x270>)
 80097ee:	f043 0303 	orr.w	r3, r3, #3
 80097f2:	6093      	str	r3, [r2, #8]
					break;
 80097f4:	f000 bd70 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a66      	ldr	r2, [pc, #408]	; (8009998 <extInt_Config+0x284>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d107      	bne.n	8009814 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8009804:	4b5f      	ldr	r3, [pc, #380]	; (8009984 <extInt_Config+0x270>)
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	4a5e      	ldr	r2, [pc, #376]	; (8009984 <extInt_Config+0x270>)
 800980a:	f043 0304 	orr.w	r3, r3, #4
 800980e:	6093      	str	r3, [r2, #8]
					break;
 8009810:	f000 bd62 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a60      	ldr	r2, [pc, #384]	; (800999c <extInt_Config+0x288>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d107      	bne.n	8009830 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8009820:	4b58      	ldr	r3, [pc, #352]	; (8009984 <extInt_Config+0x270>)
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	4a57      	ldr	r2, [pc, #348]	; (8009984 <extInt_Config+0x270>)
 8009826:	f043 0307 	orr.w	r3, r3, #7
 800982a:	6093      	str	r3, [r2, #8]
					break;
 800982c:	f000 bd54 	b.w	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009830:	bf00      	nop
					break;
 8009832:	f000 bd51 	b.w	800a2d8 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8009836:	4b53      	ldr	r3, [pc, #332]	; (8009984 <extInt_Config+0x270>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	4a52      	ldr	r2, [pc, #328]	; (8009984 <extInt_Config+0x270>)
 800983c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009840:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a4f      	ldr	r2, [pc, #316]	; (8009988 <extInt_Config+0x274>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d105      	bne.n	800985a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800984e:	4b4d      	ldr	r3, [pc, #308]	; (8009984 <extInt_Config+0x270>)
 8009850:	4a4c      	ldr	r2, [pc, #304]	; (8009984 <extInt_Config+0x270>)
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009856:	f000 bd3f 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a4a      	ldr	r2, [pc, #296]	; (800998c <extInt_Config+0x278>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d107      	bne.n	8009876 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8009866:	4b47      	ldr	r3, [pc, #284]	; (8009984 <extInt_Config+0x270>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	4a46      	ldr	r2, [pc, #280]	; (8009984 <extInt_Config+0x270>)
 800986c:	f043 0310 	orr.w	r3, r3, #16
 8009870:	6093      	str	r3, [r2, #8]
					break;
 8009872:	f000 bd31 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a44      	ldr	r2, [pc, #272]	; (8009990 <extInt_Config+0x27c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d107      	bne.n	8009892 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8009882:	4b40      	ldr	r3, [pc, #256]	; (8009984 <extInt_Config+0x270>)
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	4a3f      	ldr	r2, [pc, #252]	; (8009984 <extInt_Config+0x270>)
 8009888:	f043 0320 	orr.w	r3, r3, #32
 800988c:	6093      	str	r3, [r2, #8]
					break;
 800988e:	f000 bd23 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a3e      	ldr	r2, [pc, #248]	; (8009994 <extInt_Config+0x280>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d107      	bne.n	80098ae <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800989e:	4b39      	ldr	r3, [pc, #228]	; (8009984 <extInt_Config+0x270>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	4a38      	ldr	r2, [pc, #224]	; (8009984 <extInt_Config+0x270>)
 80098a4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80098a8:	6093      	str	r3, [r2, #8]
					break;
 80098aa:	f000 bd15 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a38      	ldr	r2, [pc, #224]	; (8009998 <extInt_Config+0x284>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d107      	bne.n	80098ca <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80098ba:	4b32      	ldr	r3, [pc, #200]	; (8009984 <extInt_Config+0x270>)
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	4a31      	ldr	r2, [pc, #196]	; (8009984 <extInt_Config+0x270>)
 80098c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c4:	6093      	str	r3, [r2, #8]
					break;
 80098c6:	f000 bd07 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a32      	ldr	r2, [pc, #200]	; (800999c <extInt_Config+0x288>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d107      	bne.n	80098e6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80098d6:	4b2b      	ldr	r3, [pc, #172]	; (8009984 <extInt_Config+0x270>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	4a2a      	ldr	r2, [pc, #168]	; (8009984 <extInt_Config+0x270>)
 80098dc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80098e0:	6093      	str	r3, [r2, #8]
					break;
 80098e2:	f000 bcf9 	b.w	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 80098e6:	bf00      	nop
					break;
 80098e8:	f000 bcf6 	b.w	800a2d8 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 80098ec:	4b25      	ldr	r3, [pc, #148]	; (8009984 <extInt_Config+0x270>)
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	4a24      	ldr	r2, [pc, #144]	; (8009984 <extInt_Config+0x270>)
 80098f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80098f6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a22      	ldr	r2, [pc, #136]	; (8009988 <extInt_Config+0x274>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d105      	bne.n	8009910 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8009904:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <extInt_Config+0x270>)
 8009906:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <extInt_Config+0x270>)
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800990c:	f000 bce4 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1d      	ldr	r2, [pc, #116]	; (800998c <extInt_Config+0x278>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d107      	bne.n	800992c <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800991c:	4b19      	ldr	r3, [pc, #100]	; (8009984 <extInt_Config+0x270>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	4a18      	ldr	r2, [pc, #96]	; (8009984 <extInt_Config+0x270>)
 8009922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009926:	6093      	str	r3, [r2, #8]
					break;
 8009928:	f000 bcd6 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a17      	ldr	r2, [pc, #92]	; (8009990 <extInt_Config+0x27c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d107      	bne.n	8009948 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8009938:	4b12      	ldr	r3, [pc, #72]	; (8009984 <extInt_Config+0x270>)
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	4a11      	ldr	r2, [pc, #68]	; (8009984 <extInt_Config+0x270>)
 800993e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009942:	6093      	str	r3, [r2, #8]
					break;
 8009944:	f000 bcc8 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a11      	ldr	r2, [pc, #68]	; (8009994 <extInt_Config+0x280>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d107      	bne.n	8009964 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8009954:	4b0b      	ldr	r3, [pc, #44]	; (8009984 <extInt_Config+0x270>)
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <extInt_Config+0x270>)
 800995a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800995e:	6093      	str	r3, [r2, #8]
					break;
 8009960:	f000 bcba 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a0b      	ldr	r2, [pc, #44]	; (8009998 <extInt_Config+0x284>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d117      	bne.n	80099a0 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <extInt_Config+0x270>)
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	4a03      	ldr	r2, [pc, #12]	; (8009984 <extInt_Config+0x270>)
 8009976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800997a:	6093      	str	r3, [r2, #8]
					break;
 800997c:	f000 bcac 	b.w	800a2d8 <extInt_Config+0xbc4>
 8009980:	40023800 	.word	0x40023800
 8009984:	40013800 	.word	0x40013800
 8009988:	40020000 	.word	0x40020000
 800998c:	40020400 	.word	0x40020400
 8009990:	40020800 	.word	0x40020800
 8009994:	40020c00 	.word	0x40020c00
 8009998:	40021000 	.word	0x40021000
 800999c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a8a      	ldr	r2, [pc, #552]	; (8009bd0 <extInt_Config+0x4bc>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d107      	bne.n	80099bc <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80099ac:	4b89      	ldr	r3, [pc, #548]	; (8009bd4 <extInt_Config+0x4c0>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	4a88      	ldr	r2, [pc, #544]	; (8009bd4 <extInt_Config+0x4c0>)
 80099b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80099b6:	6093      	str	r3, [r2, #8]
					break;
 80099b8:	f000 bc8e 	b.w	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 80099bc:	bf00      	nop
					break;
 80099be:	f000 bc8b 	b.w	800a2d8 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 80099c2:	4b84      	ldr	r3, [pc, #528]	; (8009bd4 <extInt_Config+0x4c0>)
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	4a83      	ldr	r2, [pc, #524]	; (8009bd4 <extInt_Config+0x4c0>)
 80099c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099cc:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a80      	ldr	r2, [pc, #512]	; (8009bd8 <extInt_Config+0x4c4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d105      	bne.n	80099e6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80099da:	4b7e      	ldr	r3, [pc, #504]	; (8009bd4 <extInt_Config+0x4c0>)
 80099dc:	4a7d      	ldr	r2, [pc, #500]	; (8009bd4 <extInt_Config+0x4c0>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80099e2:	f000 bc79 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a7b      	ldr	r2, [pc, #492]	; (8009bdc <extInt_Config+0x4c8>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d107      	bne.n	8009a02 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80099f2:	4b78      	ldr	r3, [pc, #480]	; (8009bd4 <extInt_Config+0x4c0>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	4a77      	ldr	r2, [pc, #476]	; (8009bd4 <extInt_Config+0x4c0>)
 80099f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099fc:	6093      	str	r3, [r2, #8]
					break;
 80099fe:	f000 bc6b 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a75      	ldr	r2, [pc, #468]	; (8009be0 <extInt_Config+0x4cc>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d107      	bne.n	8009a1e <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8009a0e:	4b71      	ldr	r3, [pc, #452]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	4a70      	ldr	r2, [pc, #448]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a18:	6093      	str	r3, [r2, #8]
					break;
 8009a1a:	f000 bc5d 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a6f      	ldr	r2, [pc, #444]	; (8009be4 <extInt_Config+0x4d0>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d107      	bne.n	8009a3a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8009a2a:	4b6a      	ldr	r3, [pc, #424]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	4a69      	ldr	r2, [pc, #420]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a30:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009a34:	6093      	str	r3, [r2, #8]
					break;
 8009a36:	f000 bc4f 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a69      	ldr	r2, [pc, #420]	; (8009be8 <extInt_Config+0x4d4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d107      	bne.n	8009a56 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8009a46:	4b63      	ldr	r3, [pc, #396]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4a62      	ldr	r2, [pc, #392]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a50:	6093      	str	r3, [r2, #8]
					break;
 8009a52:	f000 bc41 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a5c      	ldr	r2, [pc, #368]	; (8009bd0 <extInt_Config+0x4bc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d107      	bne.n	8009a72 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8009a62:	4b5c      	ldr	r3, [pc, #368]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	4a5b      	ldr	r2, [pc, #364]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a68:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009a6c:	6093      	str	r3, [r2, #8]
					break;
 8009a6e:	f000 bc33 	b.w	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009a72:	bf00      	nop
					break;
 8009a74:	f000 bc30 	b.w	800a2d8 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8009a78:	4b56      	ldr	r3, [pc, #344]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4a55      	ldr	r2, [pc, #340]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a7e:	f023 030f 	bic.w	r3, r3, #15
 8009a82:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a53      	ldr	r2, [pc, #332]	; (8009bd8 <extInt_Config+0x4c4>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d105      	bne.n	8009a9c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8009a90:	4b50      	ldr	r3, [pc, #320]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a92:	4a50      	ldr	r2, [pc, #320]	; (8009bd4 <extInt_Config+0x4c0>)
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009a98:	f000 bc1e 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a4e      	ldr	r2, [pc, #312]	; (8009bdc <extInt_Config+0x4c8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d107      	bne.n	8009ab8 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8009aa8:	4b4a      	ldr	r3, [pc, #296]	; (8009bd4 <extInt_Config+0x4c0>)
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	4a49      	ldr	r2, [pc, #292]	; (8009bd4 <extInt_Config+0x4c0>)
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	60d3      	str	r3, [r2, #12]
					break;
 8009ab4:	f000 bc10 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a48      	ldr	r2, [pc, #288]	; (8009be0 <extInt_Config+0x4cc>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d107      	bne.n	8009ad4 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8009ac4:	4b43      	ldr	r3, [pc, #268]	; (8009bd4 <extInt_Config+0x4c0>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	4a42      	ldr	r2, [pc, #264]	; (8009bd4 <extInt_Config+0x4c0>)
 8009aca:	f043 0302 	orr.w	r3, r3, #2
 8009ace:	60d3      	str	r3, [r2, #12]
					break;
 8009ad0:	f000 bc02 	b.w	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a42      	ldr	r2, [pc, #264]	; (8009be4 <extInt_Config+0x4d0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d106      	bne.n	8009aee <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8009ae0:	4b3c      	ldr	r3, [pc, #240]	; (8009bd4 <extInt_Config+0x4c0>)
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	4a3b      	ldr	r2, [pc, #236]	; (8009bd4 <extInt_Config+0x4c0>)
 8009ae6:	f043 0303 	orr.w	r3, r3, #3
 8009aea:	60d3      	str	r3, [r2, #12]
					break;
 8009aec:	e3f4      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a3c      	ldr	r2, [pc, #240]	; (8009be8 <extInt_Config+0x4d4>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d106      	bne.n	8009b08 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8009afa:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <extInt_Config+0x4c0>)
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	4a35      	ldr	r2, [pc, #212]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b00:	f043 0304 	orr.w	r3, r3, #4
 8009b04:	60d3      	str	r3, [r2, #12]
					break;
 8009b06:	e3e7      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a30      	ldr	r2, [pc, #192]	; (8009bd0 <extInt_Config+0x4bc>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d106      	bne.n	8009b22 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8009b14:	4b2f      	ldr	r3, [pc, #188]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4a2e      	ldr	r2, [pc, #184]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b1a:	f043 0307 	orr.w	r3, r3, #7
 8009b1e:	60d3      	str	r3, [r2, #12]
					break;
 8009b20:	e3da      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009b22:	bf00      	nop
					break;
 8009b24:	e3d8      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8009b26:	4b2b      	ldr	r3, [pc, #172]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	4a2a      	ldr	r2, [pc, #168]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b30:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a27      	ldr	r2, [pc, #156]	; (8009bd8 <extInt_Config+0x4c4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d104      	bne.n	8009b48 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8009b3e:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b40:	4a24      	ldr	r2, [pc, #144]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009b46:	e3c7      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a23      	ldr	r2, [pc, #140]	; (8009bdc <extInt_Config+0x4c8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d106      	bne.n	8009b62 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8009b54:	4b1f      	ldr	r3, [pc, #124]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	4a1e      	ldr	r2, [pc, #120]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b5a:	f043 0310 	orr.w	r3, r3, #16
 8009b5e:	60d3      	str	r3, [r2, #12]
					break;
 8009b60:	e3ba      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a1d      	ldr	r2, [pc, #116]	; (8009be0 <extInt_Config+0x4cc>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d106      	bne.n	8009b7c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8009b6e:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b74:	f043 0320 	orr.w	r3, r3, #32
 8009b78:	60d3      	str	r3, [r2, #12]
					break;
 8009b7a:	e3ad      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a18      	ldr	r2, [pc, #96]	; (8009be4 <extInt_Config+0x4d0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d106      	bne.n	8009b96 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8009b88:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	4a11      	ldr	r2, [pc, #68]	; (8009bd4 <extInt_Config+0x4c0>)
 8009b8e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009b92:	60d3      	str	r3, [r2, #12]
					break;
 8009b94:	e3a0      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a12      	ldr	r2, [pc, #72]	; (8009be8 <extInt_Config+0x4d4>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d106      	bne.n	8009bb0 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8009ba2:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <extInt_Config+0x4c0>)
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	4a0b      	ldr	r2, [pc, #44]	; (8009bd4 <extInt_Config+0x4c0>)
 8009ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bac:	60d3      	str	r3, [r2, #12]
					break;
 8009bae:	e393      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a06      	ldr	r2, [pc, #24]	; (8009bd0 <extInt_Config+0x4bc>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d106      	bne.n	8009bca <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <extInt_Config+0x4c0>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	4a04      	ldr	r2, [pc, #16]	; (8009bd4 <extInt_Config+0x4c0>)
 8009bc2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009bc6:	60d3      	str	r3, [r2, #12]
					break;
 8009bc8:	e386      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009bca:	bf00      	nop
					break;
 8009bcc:	e384      	b.n	800a2d8 <extInt_Config+0xbc4>
 8009bce:	bf00      	nop
 8009bd0:	40021c00 	.word	0x40021c00
 8009bd4:	40013800 	.word	0x40013800
 8009bd8:	40020000 	.word	0x40020000
 8009bdc:	40020400 	.word	0x40020400
 8009be0:	40020800 	.word	0x40020800
 8009be4:	40020c00 	.word	0x40020c00
 8009be8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8009bec:	4b86      	ldr	r3, [pc, #536]	; (8009e08 <extInt_Config+0x6f4>)
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	4a85      	ldr	r2, [pc, #532]	; (8009e08 <extInt_Config+0x6f4>)
 8009bf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bf6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a83      	ldr	r2, [pc, #524]	; (8009e0c <extInt_Config+0x6f8>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d104      	bne.n	8009c0e <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8009c04:	4b80      	ldr	r3, [pc, #512]	; (8009e08 <extInt_Config+0x6f4>)
 8009c06:	4a80      	ldr	r2, [pc, #512]	; (8009e08 <extInt_Config+0x6f4>)
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009c0c:	e364      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a7e      	ldr	r2, [pc, #504]	; (8009e10 <extInt_Config+0x6fc>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d106      	bne.n	8009c28 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8009c1a:	4b7b      	ldr	r3, [pc, #492]	; (8009e08 <extInt_Config+0x6f4>)
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	4a7a      	ldr	r2, [pc, #488]	; (8009e08 <extInt_Config+0x6f4>)
 8009c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c24:	60d3      	str	r3, [r2, #12]
					break;
 8009c26:	e357      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a79      	ldr	r2, [pc, #484]	; (8009e14 <extInt_Config+0x700>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d106      	bne.n	8009c42 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8009c34:	4b74      	ldr	r3, [pc, #464]	; (8009e08 <extInt_Config+0x6f4>)
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	4a73      	ldr	r2, [pc, #460]	; (8009e08 <extInt_Config+0x6f4>)
 8009c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c3e:	60d3      	str	r3, [r2, #12]
					break;
 8009c40:	e34a      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a73      	ldr	r2, [pc, #460]	; (8009e18 <extInt_Config+0x704>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d106      	bne.n	8009c5c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8009c4e:	4b6e      	ldr	r3, [pc, #440]	; (8009e08 <extInt_Config+0x6f4>)
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	4a6d      	ldr	r2, [pc, #436]	; (8009e08 <extInt_Config+0x6f4>)
 8009c54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009c58:	60d3      	str	r3, [r2, #12]
					break;
 8009c5a:	e33d      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a6e      	ldr	r2, [pc, #440]	; (8009e1c <extInt_Config+0x708>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d106      	bne.n	8009c76 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8009c68:	4b67      	ldr	r3, [pc, #412]	; (8009e08 <extInt_Config+0x6f4>)
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	4a66      	ldr	r2, [pc, #408]	; (8009e08 <extInt_Config+0x6f4>)
 8009c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c72:	60d3      	str	r3, [r2, #12]
					break;
 8009c74:	e330      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a68      	ldr	r2, [pc, #416]	; (8009e20 <extInt_Config+0x70c>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d106      	bne.n	8009c90 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8009c82:	4b61      	ldr	r3, [pc, #388]	; (8009e08 <extInt_Config+0x6f4>)
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	4a60      	ldr	r2, [pc, #384]	; (8009e08 <extInt_Config+0x6f4>)
 8009c88:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009c8c:	60d3      	str	r3, [r2, #12]
					break;
 8009c8e:	e323      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009c90:	bf00      	nop
					break;
 8009c92:	e321      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8009c94:	4b5c      	ldr	r3, [pc, #368]	; (8009e08 <extInt_Config+0x6f4>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	4a5b      	ldr	r2, [pc, #364]	; (8009e08 <extInt_Config+0x6f4>)
 8009c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c9e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a59      	ldr	r2, [pc, #356]	; (8009e0c <extInt_Config+0x6f8>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d104      	bne.n	8009cb6 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8009cac:	4b56      	ldr	r3, [pc, #344]	; (8009e08 <extInt_Config+0x6f4>)
 8009cae:	4a56      	ldr	r2, [pc, #344]	; (8009e08 <extInt_Config+0x6f4>)
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009cb4:	e310      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a54      	ldr	r2, [pc, #336]	; (8009e10 <extInt_Config+0x6fc>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d106      	bne.n	8009cd0 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8009cc2:	4b51      	ldr	r3, [pc, #324]	; (8009e08 <extInt_Config+0x6f4>)
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	4a50      	ldr	r2, [pc, #320]	; (8009e08 <extInt_Config+0x6f4>)
 8009cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ccc:	60d3      	str	r3, [r2, #12]
					break;
 8009cce:	e303      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a4f      	ldr	r2, [pc, #316]	; (8009e14 <extInt_Config+0x700>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d106      	bne.n	8009cea <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8009cdc:	4b4a      	ldr	r3, [pc, #296]	; (8009e08 <extInt_Config+0x6f4>)
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	4a49      	ldr	r2, [pc, #292]	; (8009e08 <extInt_Config+0x6f4>)
 8009ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ce6:	60d3      	str	r3, [r2, #12]
					break;
 8009ce8:	e2f6      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a49      	ldr	r2, [pc, #292]	; (8009e18 <extInt_Config+0x704>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d106      	bne.n	8009d04 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8009cf6:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <extInt_Config+0x6f4>)
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	4a43      	ldr	r2, [pc, #268]	; (8009e08 <extInt_Config+0x6f4>)
 8009cfc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009d00:	60d3      	str	r3, [r2, #12]
					break;
 8009d02:	e2e9      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a44      	ldr	r2, [pc, #272]	; (8009e1c <extInt_Config+0x708>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d106      	bne.n	8009d1e <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8009d10:	4b3d      	ldr	r3, [pc, #244]	; (8009e08 <extInt_Config+0x6f4>)
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	4a3c      	ldr	r2, [pc, #240]	; (8009e08 <extInt_Config+0x6f4>)
 8009d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d1a:	60d3      	str	r3, [r2, #12]
					break;
 8009d1c:	e2dc      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a3e      	ldr	r2, [pc, #248]	; (8009e20 <extInt_Config+0x70c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d106      	bne.n	8009d38 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8009d2a:	4b37      	ldr	r3, [pc, #220]	; (8009e08 <extInt_Config+0x6f4>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	4a36      	ldr	r2, [pc, #216]	; (8009e08 <extInt_Config+0x6f4>)
 8009d30:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009d34:	60d3      	str	r3, [r2, #12]
					break;
 8009d36:	e2cf      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009d38:	bf00      	nop
					break;
 8009d3a:	e2cd      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8009d3c:	4b32      	ldr	r3, [pc, #200]	; (8009e08 <extInt_Config+0x6f4>)
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	4a31      	ldr	r2, [pc, #196]	; (8009e08 <extInt_Config+0x6f4>)
 8009d42:	f023 030f 	bic.w	r3, r3, #15
 8009d46:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a2f      	ldr	r2, [pc, #188]	; (8009e0c <extInt_Config+0x6f8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d104      	bne.n	8009d5e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8009d54:	4b2c      	ldr	r3, [pc, #176]	; (8009e08 <extInt_Config+0x6f4>)
 8009d56:	4a2c      	ldr	r2, [pc, #176]	; (8009e08 <extInt_Config+0x6f4>)
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8009d5c:	e2bc      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a2a      	ldr	r2, [pc, #168]	; (8009e10 <extInt_Config+0x6fc>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d106      	bne.n	8009d78 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8009d6a:	4b27      	ldr	r3, [pc, #156]	; (8009e08 <extInt_Config+0x6f4>)
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	4a26      	ldr	r2, [pc, #152]	; (8009e08 <extInt_Config+0x6f4>)
 8009d70:	f043 0301 	orr.w	r3, r3, #1
 8009d74:	6113      	str	r3, [r2, #16]
					break;
 8009d76:	e2af      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a25      	ldr	r2, [pc, #148]	; (8009e14 <extInt_Config+0x700>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d106      	bne.n	8009d92 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8009d84:	4b20      	ldr	r3, [pc, #128]	; (8009e08 <extInt_Config+0x6f4>)
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	4a1f      	ldr	r2, [pc, #124]	; (8009e08 <extInt_Config+0x6f4>)
 8009d8a:	f043 0302 	orr.w	r3, r3, #2
 8009d8e:	6113      	str	r3, [r2, #16]
					break;
 8009d90:	e2a2      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a1f      	ldr	r2, [pc, #124]	; (8009e18 <extInt_Config+0x704>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d106      	bne.n	8009dac <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8009d9e:	4b1a      	ldr	r3, [pc, #104]	; (8009e08 <extInt_Config+0x6f4>)
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	4a19      	ldr	r2, [pc, #100]	; (8009e08 <extInt_Config+0x6f4>)
 8009da4:	f043 0303 	orr.w	r3, r3, #3
 8009da8:	6113      	str	r3, [r2, #16]
					break;
 8009daa:	e295      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1a      	ldr	r2, [pc, #104]	; (8009e1c <extInt_Config+0x708>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d106      	bne.n	8009dc6 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8009db8:	4b13      	ldr	r3, [pc, #76]	; (8009e08 <extInt_Config+0x6f4>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	4a12      	ldr	r2, [pc, #72]	; (8009e08 <extInt_Config+0x6f4>)
 8009dbe:	f043 0304 	orr.w	r3, r3, #4
 8009dc2:	6113      	str	r3, [r2, #16]
					break;
 8009dc4:	e288      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a14      	ldr	r2, [pc, #80]	; (8009e20 <extInt_Config+0x70c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d106      	bne.n	8009de0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8009dd2:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <extInt_Config+0x6f4>)
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	4a0c      	ldr	r2, [pc, #48]	; (8009e08 <extInt_Config+0x6f4>)
 8009dd8:	f043 0307 	orr.w	r3, r3, #7
 8009ddc:	6113      	str	r3, [r2, #16]
					break;
 8009dde:	e27b      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009de0:	bf00      	nop
					break;
 8009de2:	e279      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8009de4:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <extInt_Config+0x6f4>)
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <extInt_Config+0x6f4>)
 8009dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dee:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a05      	ldr	r2, [pc, #20]	; (8009e0c <extInt_Config+0x6f8>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d113      	bne.n	8009e24 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <extInt_Config+0x6f4>)
 8009dfe:	4a02      	ldr	r2, [pc, #8]	; (8009e08 <extInt_Config+0x6f4>)
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8009e04:	e268      	b.n	800a2d8 <extInt_Config+0xbc4>
 8009e06:	bf00      	nop
 8009e08:	40013800 	.word	0x40013800
 8009e0c:	40020000 	.word	0x40020000
 8009e10:	40020400 	.word	0x40020400
 8009e14:	40020800 	.word	0x40020800
 8009e18:	40020c00 	.word	0x40020c00
 8009e1c:	40021000 	.word	0x40021000
 8009e20:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a83      	ldr	r2, [pc, #524]	; (800a038 <extInt_Config+0x924>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d106      	bne.n	8009e3e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8009e30:	4b82      	ldr	r3, [pc, #520]	; (800a03c <extInt_Config+0x928>)
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	4a81      	ldr	r2, [pc, #516]	; (800a03c <extInt_Config+0x928>)
 8009e36:	f043 0310 	orr.w	r3, r3, #16
 8009e3a:	6113      	str	r3, [r2, #16]
					break;
 8009e3c:	e24c      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a7e      	ldr	r2, [pc, #504]	; (800a040 <extInt_Config+0x92c>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d106      	bne.n	8009e58 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8009e4a:	4b7c      	ldr	r3, [pc, #496]	; (800a03c <extInt_Config+0x928>)
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	4a7b      	ldr	r2, [pc, #492]	; (800a03c <extInt_Config+0x928>)
 8009e50:	f043 0320 	orr.w	r3, r3, #32
 8009e54:	6113      	str	r3, [r2, #16]
					break;
 8009e56:	e23f      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a79      	ldr	r2, [pc, #484]	; (800a044 <extInt_Config+0x930>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d106      	bne.n	8009e72 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8009e64:	4b75      	ldr	r3, [pc, #468]	; (800a03c <extInt_Config+0x928>)
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	4a74      	ldr	r2, [pc, #464]	; (800a03c <extInt_Config+0x928>)
 8009e6a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009e6e:	6113      	str	r3, [r2, #16]
					break;
 8009e70:	e232      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a73      	ldr	r2, [pc, #460]	; (800a048 <extInt_Config+0x934>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d106      	bne.n	8009e8c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8009e7e:	4b6f      	ldr	r3, [pc, #444]	; (800a03c <extInt_Config+0x928>)
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	4a6e      	ldr	r2, [pc, #440]	; (800a03c <extInt_Config+0x928>)
 8009e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e88:	6113      	str	r3, [r2, #16]
					break;
 8009e8a:	e225      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a6e      	ldr	r2, [pc, #440]	; (800a04c <extInt_Config+0x938>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d106      	bne.n	8009ea6 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8009e98:	4b68      	ldr	r3, [pc, #416]	; (800a03c <extInt_Config+0x928>)
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	4a67      	ldr	r2, [pc, #412]	; (800a03c <extInt_Config+0x928>)
 8009e9e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009ea2:	6113      	str	r3, [r2, #16]
					break;
 8009ea4:	e218      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009ea6:	bf00      	nop
					break;
 8009ea8:	e216      	b.n	800a2d8 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8009eaa:	4b64      	ldr	r3, [pc, #400]	; (800a03c <extInt_Config+0x928>)
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	4a63      	ldr	r2, [pc, #396]	; (800a03c <extInt_Config+0x928>)
 8009eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009eb4:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a64      	ldr	r2, [pc, #400]	; (800a050 <extInt_Config+0x93c>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d104      	bne.n	8009ecc <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8009ec2:	4b5e      	ldr	r3, [pc, #376]	; (800a03c <extInt_Config+0x928>)
 8009ec4:	4a5d      	ldr	r2, [pc, #372]	; (800a03c <extInt_Config+0x928>)
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8009eca:	e205      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a59      	ldr	r2, [pc, #356]	; (800a038 <extInt_Config+0x924>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d106      	bne.n	8009ee6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8009ed8:	4b58      	ldr	r3, [pc, #352]	; (800a03c <extInt_Config+0x928>)
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	4a57      	ldr	r2, [pc, #348]	; (800a03c <extInt_Config+0x928>)
 8009ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ee2:	6113      	str	r3, [r2, #16]
					break;
 8009ee4:	e1f8      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a54      	ldr	r2, [pc, #336]	; (800a040 <extInt_Config+0x92c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d106      	bne.n	8009f00 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8009ef2:	4b52      	ldr	r3, [pc, #328]	; (800a03c <extInt_Config+0x928>)
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	4a51      	ldr	r2, [pc, #324]	; (800a03c <extInt_Config+0x928>)
 8009ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009efc:	6113      	str	r3, [r2, #16]
					break;
 8009efe:	e1eb      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a4f      	ldr	r2, [pc, #316]	; (800a044 <extInt_Config+0x930>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d106      	bne.n	8009f1a <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8009f0c:	4b4b      	ldr	r3, [pc, #300]	; (800a03c <extInt_Config+0x928>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	4a4a      	ldr	r2, [pc, #296]	; (800a03c <extInt_Config+0x928>)
 8009f12:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f16:	6113      	str	r3, [r2, #16]
					break;
 8009f18:	e1de      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a49      	ldr	r2, [pc, #292]	; (800a048 <extInt_Config+0x934>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d106      	bne.n	8009f34 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8009f26:	4b45      	ldr	r3, [pc, #276]	; (800a03c <extInt_Config+0x928>)
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	4a44      	ldr	r2, [pc, #272]	; (800a03c <extInt_Config+0x928>)
 8009f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f30:	6113      	str	r3, [r2, #16]
					break;
 8009f32:	e1d1      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a44      	ldr	r2, [pc, #272]	; (800a04c <extInt_Config+0x938>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d106      	bne.n	8009f4e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8009f40:	4b3e      	ldr	r3, [pc, #248]	; (800a03c <extInt_Config+0x928>)
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	4a3d      	ldr	r2, [pc, #244]	; (800a03c <extInt_Config+0x928>)
 8009f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f4a:	6113      	str	r3, [r2, #16]
					break;
 8009f4c:	e1c4      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009f4e:	bf00      	nop
					break;
 8009f50:	e1c2      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8009f52:	4b3a      	ldr	r3, [pc, #232]	; (800a03c <extInt_Config+0x928>)
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	4a39      	ldr	r2, [pc, #228]	; (800a03c <extInt_Config+0x928>)
 8009f58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f5c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a3a      	ldr	r2, [pc, #232]	; (800a050 <extInt_Config+0x93c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d104      	bne.n	8009f74 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8009f6a:	4b34      	ldr	r3, [pc, #208]	; (800a03c <extInt_Config+0x928>)
 8009f6c:	4a33      	ldr	r2, [pc, #204]	; (800a03c <extInt_Config+0x928>)
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8009f72:	e1b1      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a2f      	ldr	r2, [pc, #188]	; (800a038 <extInt_Config+0x924>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d106      	bne.n	8009f8e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8009f80:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <extInt_Config+0x928>)
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	4a2d      	ldr	r2, [pc, #180]	; (800a03c <extInt_Config+0x928>)
 8009f86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f8a:	6113      	str	r3, [r2, #16]
					break;
 8009f8c:	e1a4      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a2a      	ldr	r2, [pc, #168]	; (800a040 <extInt_Config+0x92c>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d106      	bne.n	8009fa8 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8009f9a:	4b28      	ldr	r3, [pc, #160]	; (800a03c <extInt_Config+0x928>)
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	4a27      	ldr	r2, [pc, #156]	; (800a03c <extInt_Config+0x928>)
 8009fa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009fa4:	6113      	str	r3, [r2, #16]
					break;
 8009fa6:	e197      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a25      	ldr	r2, [pc, #148]	; (800a044 <extInt_Config+0x930>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d106      	bne.n	8009fc2 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8009fb4:	4b21      	ldr	r3, [pc, #132]	; (800a03c <extInt_Config+0x928>)
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	4a20      	ldr	r2, [pc, #128]	; (800a03c <extInt_Config+0x928>)
 8009fba:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009fbe:	6113      	str	r3, [r2, #16]
					break;
 8009fc0:	e18a      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <extInt_Config+0x934>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d106      	bne.n	8009fdc <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8009fce:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <extInt_Config+0x928>)
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	4a1a      	ldr	r2, [pc, #104]	; (800a03c <extInt_Config+0x928>)
 8009fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fd8:	6113      	str	r3, [r2, #16]
					break;
 8009fda:	e17d      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a1a      	ldr	r2, [pc, #104]	; (800a04c <extInt_Config+0x938>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d106      	bne.n	8009ff6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8009fe8:	4b14      	ldr	r3, [pc, #80]	; (800a03c <extInt_Config+0x928>)
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	4a13      	ldr	r2, [pc, #76]	; (800a03c <extInt_Config+0x928>)
 8009fee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009ff2:	6113      	str	r3, [r2, #16]
					break;
 8009ff4:	e170      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 8009ff6:	bf00      	nop
					break;
 8009ff8:	e16e      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8009ffa:	4b10      	ldr	r3, [pc, #64]	; (800a03c <extInt_Config+0x928>)
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	4a0f      	ldr	r2, [pc, #60]	; (800a03c <extInt_Config+0x928>)
 800a000:	f023 030f 	bic.w	r3, r3, #15
 800a004:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a10      	ldr	r2, [pc, #64]	; (800a050 <extInt_Config+0x93c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d104      	bne.n	800a01c <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800a012:	4b0a      	ldr	r3, [pc, #40]	; (800a03c <extInt_Config+0x928>)
 800a014:	4a09      	ldr	r2, [pc, #36]	; (800a03c <extInt_Config+0x928>)
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a01a:	e15d      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a05      	ldr	r2, [pc, #20]	; (800a038 <extInt_Config+0x924>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d115      	bne.n	800a054 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <extInt_Config+0x928>)
 800a02a:	695b      	ldr	r3, [r3, #20]
 800a02c:	4a03      	ldr	r2, [pc, #12]	; (800a03c <extInt_Config+0x928>)
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	6153      	str	r3, [r2, #20]
					break;
 800a034:	e150      	b.n	800a2d8 <extInt_Config+0xbc4>
 800a036:	bf00      	nop
 800a038:	40020400 	.word	0x40020400
 800a03c:	40013800 	.word	0x40013800
 800a040:	40020800 	.word	0x40020800
 800a044:	40020c00 	.word	0x40020c00
 800a048:	40021000 	.word	0x40021000
 800a04c:	40021c00 	.word	0x40021c00
 800a050:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a89      	ldr	r2, [pc, #548]	; (800a280 <extInt_Config+0xb6c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d106      	bne.n	800a06e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800a060:	4b88      	ldr	r3, [pc, #544]	; (800a284 <extInt_Config+0xb70>)
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	4a87      	ldr	r2, [pc, #540]	; (800a284 <extInt_Config+0xb70>)
 800a066:	f043 0302 	orr.w	r3, r3, #2
 800a06a:	6153      	str	r3, [r2, #20]
					break;
 800a06c:	e134      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a84      	ldr	r2, [pc, #528]	; (800a288 <extInt_Config+0xb74>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d106      	bne.n	800a088 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800a07a:	4b82      	ldr	r3, [pc, #520]	; (800a284 <extInt_Config+0xb70>)
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	4a81      	ldr	r2, [pc, #516]	; (800a284 <extInt_Config+0xb70>)
 800a080:	f043 0303 	orr.w	r3, r3, #3
 800a084:	6153      	str	r3, [r2, #20]
					break;
 800a086:	e127      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a7f      	ldr	r2, [pc, #508]	; (800a28c <extInt_Config+0xb78>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d106      	bne.n	800a0a2 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800a094:	4b7b      	ldr	r3, [pc, #492]	; (800a284 <extInt_Config+0xb70>)
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	4a7a      	ldr	r2, [pc, #488]	; (800a284 <extInt_Config+0xb70>)
 800a09a:	f043 0304 	orr.w	r3, r3, #4
 800a09e:	6153      	str	r3, [r2, #20]
					break;
 800a0a0:	e11a      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a79      	ldr	r2, [pc, #484]	; (800a290 <extInt_Config+0xb7c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d106      	bne.n	800a0bc <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800a0ae:	4b75      	ldr	r3, [pc, #468]	; (800a284 <extInt_Config+0xb70>)
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	4a74      	ldr	r2, [pc, #464]	; (800a284 <extInt_Config+0xb70>)
 800a0b4:	f043 0307 	orr.w	r3, r3, #7
 800a0b8:	6153      	str	r3, [r2, #20]
					break;
 800a0ba:	e10d      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 800a0bc:	bf00      	nop
					break;
 800a0be:	e10b      	b.n	800a2d8 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 800a0c0:	4b70      	ldr	r3, [pc, #448]	; (800a284 <extInt_Config+0xb70>)
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	4a6f      	ldr	r2, [pc, #444]	; (800a284 <extInt_Config+0xb70>)
 800a0c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ca:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a70      	ldr	r2, [pc, #448]	; (800a294 <extInt_Config+0xb80>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d104      	bne.n	800a0e2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800a0d8:	4b6a      	ldr	r3, [pc, #424]	; (800a284 <extInt_Config+0xb70>)
 800a0da:	4a6a      	ldr	r2, [pc, #424]	; (800a284 <extInt_Config+0xb70>)
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	6153      	str	r3, [r2, #20]
 800a0e0:	e041      	b.n	800a166 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a6b      	ldr	r2, [pc, #428]	; (800a298 <extInt_Config+0xb84>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d106      	bne.n	800a0fc <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800a0ee:	4b65      	ldr	r3, [pc, #404]	; (800a284 <extInt_Config+0xb70>)
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	4a64      	ldr	r2, [pc, #400]	; (800a284 <extInt_Config+0xb70>)
 800a0f4:	f043 0310 	orr.w	r3, r3, #16
 800a0f8:	6153      	str	r3, [r2, #20]
 800a0fa:	e034      	b.n	800a166 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a5f      	ldr	r2, [pc, #380]	; (800a280 <extInt_Config+0xb6c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d106      	bne.n	800a116 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800a108:	4b5e      	ldr	r3, [pc, #376]	; (800a284 <extInt_Config+0xb70>)
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	4a5d      	ldr	r2, [pc, #372]	; (800a284 <extInt_Config+0xb70>)
 800a10e:	f043 0320 	orr.w	r3, r3, #32
 800a112:	6153      	str	r3, [r2, #20]
 800a114:	e027      	b.n	800a166 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a5a      	ldr	r2, [pc, #360]	; (800a288 <extInt_Config+0xb74>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d106      	bne.n	800a130 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800a122:	4b58      	ldr	r3, [pc, #352]	; (800a284 <extInt_Config+0xb70>)
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	4a57      	ldr	r2, [pc, #348]	; (800a284 <extInt_Config+0xb70>)
 800a128:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a12c:	6153      	str	r3, [r2, #20]
 800a12e:	e01a      	b.n	800a166 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a55      	ldr	r2, [pc, #340]	; (800a28c <extInt_Config+0xb78>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d106      	bne.n	800a14a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800a13c:	4b51      	ldr	r3, [pc, #324]	; (800a284 <extInt_Config+0xb70>)
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	4a50      	ldr	r2, [pc, #320]	; (800a284 <extInt_Config+0xb70>)
 800a142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a146:	6153      	str	r3, [r2, #20]
 800a148:	e00d      	b.n	800a166 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a4f      	ldr	r2, [pc, #316]	; (800a290 <extInt_Config+0xb7c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d106      	bne.n	800a164 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800a156:	4b4b      	ldr	r3, [pc, #300]	; (800a284 <extInt_Config+0xb70>)
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	4a4a      	ldr	r2, [pc, #296]	; (800a284 <extInt_Config+0xb70>)
 800a15c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a160:	6153      	str	r3, [r2, #20]
 800a162:	e000      	b.n	800a166 <extInt_Config+0xa52>

					} else {
						__NOP();
 800a164:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 800a166:	4b47      	ldr	r3, [pc, #284]	; (800a284 <extInt_Config+0xb70>)
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	4a46      	ldr	r2, [pc, #280]	; (800a284 <extInt_Config+0xb70>)
 800a16c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a170:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a46      	ldr	r2, [pc, #280]	; (800a294 <extInt_Config+0xb80>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d104      	bne.n	800a188 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800a17e:	4b41      	ldr	r3, [pc, #260]	; (800a284 <extInt_Config+0xb70>)
 800a180:	4a40      	ldr	r2, [pc, #256]	; (800a284 <extInt_Config+0xb70>)
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a186:	e0a7      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a42      	ldr	r2, [pc, #264]	; (800a298 <extInt_Config+0xb84>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d106      	bne.n	800a1a2 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800a194:	4b3b      	ldr	r3, [pc, #236]	; (800a284 <extInt_Config+0xb70>)
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	4a3a      	ldr	r2, [pc, #232]	; (800a284 <extInt_Config+0xb70>)
 800a19a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a19e:	6153      	str	r3, [r2, #20]
					break;
 800a1a0:	e09a      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a35      	ldr	r2, [pc, #212]	; (800a280 <extInt_Config+0xb6c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d106      	bne.n	800a1bc <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800a1ae:	4b35      	ldr	r3, [pc, #212]	; (800a284 <extInt_Config+0xb70>)
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	4a34      	ldr	r2, [pc, #208]	; (800a284 <extInt_Config+0xb70>)
 800a1b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1b8:	6153      	str	r3, [r2, #20]
					break;
 800a1ba:	e08d      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a31      	ldr	r2, [pc, #196]	; (800a288 <extInt_Config+0xb74>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d106      	bne.n	800a1d6 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800a1c8:	4b2e      	ldr	r3, [pc, #184]	; (800a284 <extInt_Config+0xb70>)
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	4a2d      	ldr	r2, [pc, #180]	; (800a284 <extInt_Config+0xb70>)
 800a1ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a1d2:	6153      	str	r3, [r2, #20]
					break;
 800a1d4:	e080      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a2b      	ldr	r2, [pc, #172]	; (800a28c <extInt_Config+0xb78>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d106      	bne.n	800a1f0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800a1e2:	4b28      	ldr	r3, [pc, #160]	; (800a284 <extInt_Config+0xb70>)
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	4a27      	ldr	r2, [pc, #156]	; (800a284 <extInt_Config+0xb70>)
 800a1e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1ec:	6153      	str	r3, [r2, #20]
					break;
 800a1ee:	e073      	b.n	800a2d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a26      	ldr	r2, [pc, #152]	; (800a290 <extInt_Config+0xb7c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d106      	bne.n	800a20a <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800a1fc:	4b21      	ldr	r3, [pc, #132]	; (800a284 <extInt_Config+0xb70>)
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	4a20      	ldr	r2, [pc, #128]	; (800a284 <extInt_Config+0xb70>)
 800a202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a206:	6153      	str	r3, [r2, #20]
					break;
 800a208:	e066      	b.n	800a2d8 <extInt_Config+0xbc4>
						__NOP();
 800a20a:	bf00      	nop
					break;
 800a20c:	e064      	b.n	800a2d8 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800a20e:	4b1d      	ldr	r3, [pc, #116]	; (800a284 <extInt_Config+0xb70>)
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	4a1c      	ldr	r2, [pc, #112]	; (800a284 <extInt_Config+0xb70>)
 800a214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a218:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a1c      	ldr	r2, [pc, #112]	; (800a294 <extInt_Config+0xb80>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d104      	bne.n	800a230 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800a226:	4b17      	ldr	r3, [pc, #92]	; (800a284 <extInt_Config+0xb70>)
 800a228:	4a16      	ldr	r2, [pc, #88]	; (800a284 <extInt_Config+0xb70>)
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800a22e:	e053      	b.n	800a2d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a18      	ldr	r2, [pc, #96]	; (800a298 <extInt_Config+0xb84>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d106      	bne.n	800a24a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800a23c:	4b11      	ldr	r3, [pc, #68]	; (800a284 <extInt_Config+0xb70>)
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	4a10      	ldr	r2, [pc, #64]	; (800a284 <extInt_Config+0xb70>)
 800a242:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a246:	6153      	str	r3, [r2, #20]
						break;
 800a248:	e046      	b.n	800a2d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a0b      	ldr	r2, [pc, #44]	; (800a280 <extInt_Config+0xb6c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d106      	bne.n	800a264 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800a256:	4b0b      	ldr	r3, [pc, #44]	; (800a284 <extInt_Config+0xb70>)
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	4a0a      	ldr	r2, [pc, #40]	; (800a284 <extInt_Config+0xb70>)
 800a25c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a260:	6153      	str	r3, [r2, #20]
						break;
 800a262:	e039      	b.n	800a2d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a07      	ldr	r2, [pc, #28]	; (800a288 <extInt_Config+0xb74>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d115      	bne.n	800a29c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <extInt_Config+0xb70>)
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	4a03      	ldr	r2, [pc, #12]	; (800a284 <extInt_Config+0xb70>)
 800a276:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a27a:	6153      	str	r3, [r2, #20]
						break;
 800a27c:	e02c      	b.n	800a2d8 <extInt_Config+0xbc4>
 800a27e:	bf00      	nop
 800a280:	40020800 	.word	0x40020800
 800a284:	40013800 	.word	0x40013800
 800a288:	40020c00 	.word	0x40020c00
 800a28c:	40021000 	.word	0x40021000
 800a290:	40021c00 	.word	0x40021c00
 800a294:	40020000 	.word	0x40020000
 800a298:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a6c      	ldr	r2, [pc, #432]	; (800a454 <extInt_Config+0xd40>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d106      	bne.n	800a2b6 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800a2a8:	4b6b      	ldr	r3, [pc, #428]	; (800a458 <extInt_Config+0xd44>)
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	4a6a      	ldr	r2, [pc, #424]	; (800a458 <extInt_Config+0xd44>)
 800a2ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2b2:	6153      	str	r3, [r2, #20]
						break;
 800a2b4:	e010      	b.n	800a2d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a67      	ldr	r2, [pc, #412]	; (800a45c <extInt_Config+0xd48>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d106      	bne.n	800a2d0 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800a2c2:	4b65      	ldr	r3, [pc, #404]	; (800a458 <extInt_Config+0xd44>)
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	4a64      	ldr	r2, [pc, #400]	; (800a458 <extInt_Config+0xd44>)
 800a2c8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a2cc:	6153      	str	r3, [r2, #20]
						break;
 800a2ce:	e003      	b.n	800a2d8 <extInt_Config+0xbc4>
							__NOP();
 800a2d0:	bf00      	nop
						break;
 800a2d2:	e001      	b.n	800a2d8 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 800a2d4:	bf00      	nop
						break;
 800a2d6:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	791b      	ldrb	r3, [r3, #4]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d020      	beq.n	800a322 <extInt_Config+0xc0e>
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	dc37      	bgt.n	800a354 <extInt_Config+0xc40>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <extInt_Config+0xbda>
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d00d      	beq.n	800a308 <extInt_Config+0xbf4>
 800a2ec:	e032      	b.n	800a354 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a2ee:	4b5c      	ldr	r3, [pc, #368]	; (800a460 <extInt_Config+0xd4c>)
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	6812      	ldr	r2, [r2, #0]
 800a2f6:	7912      	ldrb	r2, [r2, #4]
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	408a      	lsls	r2, r1
 800a2fe:	4611      	mov	r1, r2
 800a300:	4a57      	ldr	r2, [pc, #348]	; (800a460 <extInt_Config+0xd4c>)
 800a302:	430b      	orrs	r3, r1
 800a304:	60d3      	str	r3, [r2, #12]

		break;
 800a306:	e027      	b.n	800a358 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a308:	4b55      	ldr	r3, [pc, #340]	; (800a460 <extInt_Config+0xd4c>)
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6812      	ldr	r2, [r2, #0]
 800a310:	7912      	ldrb	r2, [r2, #4]
 800a312:	4611      	mov	r1, r2
 800a314:	2201      	movs	r2, #1
 800a316:	408a      	lsls	r2, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	4a51      	ldr	r2, [pc, #324]	; (800a460 <extInt_Config+0xd4c>)
 800a31c:	430b      	orrs	r3, r1
 800a31e:	6093      	str	r3, [r2, #8]

		break;
 800a320:	e01a      	b.n	800a358 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a322:	4b4f      	ldr	r3, [pc, #316]	; (800a460 <extInt_Config+0xd4c>)
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	7912      	ldrb	r2, [r2, #4]
 800a32c:	4611      	mov	r1, r2
 800a32e:	2201      	movs	r2, #1
 800a330:	408a      	lsls	r2, r1
 800a332:	4611      	mov	r1, r2
 800a334:	4a4a      	ldr	r2, [pc, #296]	; (800a460 <extInt_Config+0xd4c>)
 800a336:	430b      	orrs	r3, r1
 800a338:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a33a:	4b49      	ldr	r3, [pc, #292]	; (800a460 <extInt_Config+0xd4c>)
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6812      	ldr	r2, [r2, #0]
 800a342:	7912      	ldrb	r2, [r2, #4]
 800a344:	4611      	mov	r1, r2
 800a346:	2201      	movs	r2, #1
 800a348:	408a      	lsls	r2, r1
 800a34a:	4611      	mov	r1, r2
 800a34c:	4a44      	ldr	r2, [pc, #272]	; (800a460 <extInt_Config+0xd4c>)
 800a34e:	430b      	orrs	r3, r1
 800a350:	6093      	str	r3, [r2, #8]

		break;
 800a352:	e001      	b.n	800a358 <extInt_Config+0xc44>

	}default :{

		__NOP();
 800a354:	bf00      	nop
		break;
 800a356:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800a358:	b672      	cpsid	i
}
 800a35a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a35c:	4b40      	ldr	r3, [pc, #256]	; (800a460 <extInt_Config+0xd4c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6812      	ldr	r2, [r2, #0]
 800a364:	7912      	ldrb	r2, [r2, #4]
 800a366:	4611      	mov	r1, r2
 800a368:	2201      	movs	r2, #1
 800a36a:	408a      	lsls	r2, r1
 800a36c:	4611      	mov	r1, r2
 800a36e:	4a3c      	ldr	r2, [pc, #240]	; (800a460 <extInt_Config+0xd4c>)
 800a370:	430b      	orrs	r3, r1
 800a372:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	791b      	ldrb	r3, [r3, #4]
 800a37a:	2b0f      	cmp	r3, #15
 800a37c:	d862      	bhi.n	800a444 <extInt_Config+0xd30>
 800a37e:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <extInt_Config+0xc70>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a3c5 	.word	0x0800a3c5
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3d5 	.word	0x0800a3d5
 800a390:	0800a3dd 	.word	0x0800a3dd
 800a394:	0800a3e5 	.word	0x0800a3e5
 800a398:	0800a3ed 	.word	0x0800a3ed
 800a39c:	0800a3f5 	.word	0x0800a3f5
 800a3a0:	0800a3fd 	.word	0x0800a3fd
 800a3a4:	0800a405 	.word	0x0800a405
 800a3a8:	0800a40d 	.word	0x0800a40d
 800a3ac:	0800a415 	.word	0x0800a415
 800a3b0:	0800a41d 	.word	0x0800a41d
 800a3b4:	0800a425 	.word	0x0800a425
 800a3b8:	0800a42d 	.word	0x0800a42d
 800a3bc:	0800a435 	.word	0x0800a435
 800a3c0:	0800a43d 	.word	0x0800a43d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 800a3c4:	2006      	movs	r0, #6
 800a3c6:	f7ff f95d 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3ca:	e03d      	b.n	800a448 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800a3cc:	2007      	movs	r0, #7
 800a3ce:	f7ff f959 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3d2:	e039      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 800a3d4:	2008      	movs	r0, #8
 800a3d6:	f7ff f955 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3da:	e035      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800a3dc:	2009      	movs	r0, #9
 800a3de:	f7ff f951 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3e2:	e031      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 800a3e4:	200a      	movs	r0, #10
 800a3e6:	f7ff f94d 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3ea:	e02d      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a3ec:	2017      	movs	r0, #23
 800a3ee:	f7ff f949 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3f2:	e029      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a3f4:	2017      	movs	r0, #23
 800a3f6:	f7ff f945 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a3fa:	e025      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a3fc:	2017      	movs	r0, #23
 800a3fe:	f7ff f941 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a402:	e021      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a404:	2017      	movs	r0, #23
 800a406:	f7ff f93d 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a40a:	e01d      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a40c:	2017      	movs	r0, #23
 800a40e:	f7ff f939 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a412:	e019      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a414:	2028      	movs	r0, #40	; 0x28
 800a416:	f7ff f935 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a41a:	e015      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a41c:	2028      	movs	r0, #40	; 0x28
 800a41e:	f7ff f931 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a422:	e011      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a424:	2028      	movs	r0, #40	; 0x28
 800a426:	f7ff f92d 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a42a:	e00d      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a42c:	2028      	movs	r0, #40	; 0x28
 800a42e:	f7ff f929 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a432:	e009      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a434:	2028      	movs	r0, #40	; 0x28
 800a436:	f7ff f925 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a43a:	e005      	b.n	800a448 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a43c:	2028      	movs	r0, #40	; 0x28
 800a43e:	f7ff f921 	bl	8009684 <__NVIC_EnableIRQ>
			break;
 800a442:	e001      	b.n	800a448 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 800a444:	bf00      	nop
			break;
 800a446:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a448:	b662      	cpsie	i
}
 800a44a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	40021000 	.word	0x40021000
 800a458:	40013800 	.word	0x40013800
 800a45c:	40021c00 	.word	0x40021c00
 800a460:	40013c00 	.word	0x40013c00

0800a464 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a470:	b672      	cpsid	i
}
 800a472:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	791b      	ldrb	r3, [r3, #4]
 800a47a:	2b0f      	cmp	r3, #15
 800a47c:	f200 8084 	bhi.w	800a588 <exti_Set_Priority+0x124>
 800a480:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <exti_Set_Priority+0x24>)
 800a482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a486:	bf00      	nop
 800a488:	0800a4c9 	.word	0x0800a4c9
 800a48c:	0800a4d5 	.word	0x0800a4d5
 800a490:	0800a4e1 	.word	0x0800a4e1
 800a494:	0800a4ed 	.word	0x0800a4ed
 800a498:	0800a4f9 	.word	0x0800a4f9
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a511 	.word	0x0800a511
 800a4a4:	0800a51d 	.word	0x0800a51d
 800a4a8:	0800a529 	.word	0x0800a529
 800a4ac:	0800a535 	.word	0x0800a535
 800a4b0:	0800a541 	.word	0x0800a541
 800a4b4:	0800a54d 	.word	0x0800a54d
 800a4b8:	0800a559 	.word	0x0800a559
 800a4bc:	0800a565 	.word	0x0800a565
 800a4c0:	0800a571 	.word	0x0800a571
 800a4c4:	0800a57d 	.word	0x0800a57d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	2006      	movs	r0, #6
 800a4ce:	f7ff f8f7 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a4d2:	e05b      	b.n	800a58c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	2007      	movs	r0, #7
 800a4da:	f7ff f8f1 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a4de:	e055      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	2008      	movs	r0, #8
 800a4e6:	f7ff f8eb 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a4ea:	e04f      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	2009      	movs	r0, #9
 800a4f2:	f7ff f8e5 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a4f6:	e049      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	200a      	movs	r0, #10
 800a4fe:	f7ff f8df 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a502:	e043      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	4619      	mov	r1, r3
 800a508:	2017      	movs	r0, #23
 800a50a:	f7ff f8d9 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a50e:	e03d      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	4619      	mov	r1, r3
 800a514:	2017      	movs	r0, #23
 800a516:	f7ff f8d3 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a51a:	e037      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	4619      	mov	r1, r3
 800a520:	2017      	movs	r0, #23
 800a522:	f7ff f8cd 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a526:	e031      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	4619      	mov	r1, r3
 800a52c:	2017      	movs	r0, #23
 800a52e:	f7ff f8c7 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a532:	e02b      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	4619      	mov	r1, r3
 800a538:	2017      	movs	r0, #23
 800a53a:	f7ff f8c1 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a53e:	e025      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	4619      	mov	r1, r3
 800a544:	2028      	movs	r0, #40	; 0x28
 800a546:	f7ff f8bb 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a54a:	e01f      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	4619      	mov	r1, r3
 800a550:	2028      	movs	r0, #40	; 0x28
 800a552:	f7ff f8b5 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a556:	e019      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	4619      	mov	r1, r3
 800a55c:	2028      	movs	r0, #40	; 0x28
 800a55e:	f7ff f8af 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a562:	e013      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	4619      	mov	r1, r3
 800a568:	2028      	movs	r0, #40	; 0x28
 800a56a:	f7ff f8a9 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a56e:	e00d      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	4619      	mov	r1, r3
 800a574:	2028      	movs	r0, #40	; 0x28
 800a576:	f7ff f8a3 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a57a:	e007      	b.n	800a58c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	4619      	mov	r1, r3
 800a580:	2028      	movs	r0, #40	; 0x28
 800a582:	f7ff f89d 	bl	80096c0 <__NVIC_SetPriority>
				break;
 800a586:	e001      	b.n	800a58c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 800a588:	bf00      	nop
				break;
 800a58a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a58c:	b662      	cpsie	i
}
 800a58e:	bf00      	nop

		}

	__enable_irq();

}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
	__NOP();
 800a59c:	bf00      	nop
}
 800a59e:	bf00      	nop
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
	__NOP();
 800a5ac:	bf00      	nop
}
 800a5ae:	bf00      	nop
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
	__NOP();
 800a5bc:	bf00      	nop
}
 800a5be:	bf00      	nop
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
	__NOP();
 800a5cc:	bf00      	nop
}
 800a5ce:	bf00      	nop
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 800a5d8:	b480      	push	{r7}
 800a5da:	af00      	add	r7, sp, #0
	__NOP();
 800a5dc:	bf00      	nop
}
 800a5de:	bf00      	nop
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
	__NOP();
 800a5ec:	bf00      	nop
}
 800a5ee:	bf00      	nop
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
	__NOP();
 800a5fc:	bf00      	nop
}
 800a5fe:	bf00      	nop
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 800a608:	b480      	push	{r7}
 800a60a:	af00      	add	r7, sp, #0
	__NOP();
 800a60c:	bf00      	nop
}
 800a60e:	bf00      	nop
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
	__NOP();
 800a61c:	bf00      	nop
}
 800a61e:	bf00      	nop
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
	__NOP();
 800a62c:	bf00      	nop
}
 800a62e:	bf00      	nop
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 800a638:	b480      	push	{r7}
 800a63a:	af00      	add	r7, sp, #0
	__NOP();
 800a63c:	bf00      	nop
}
 800a63e:	bf00      	nop
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
	__NOP();
 800a64c:	bf00      	nop
}
 800a64e:	bf00      	nop
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
	__NOP();
 800a65c:	bf00      	nop
}
 800a65e:	bf00      	nop
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
	__NOP();
 800a66c:	bf00      	nop
}
 800a66e:	bf00      	nop
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800a67c:	4b07      	ldr	r3, [pc, #28]	; (800a69c <EXTI0_IRQHandler+0x24>)
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 800a688:	4b04      	ldr	r3, [pc, #16]	; (800a69c <EXTI0_IRQHandler+0x24>)
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	4a03      	ldr	r2, [pc, #12]	; (800a69c <EXTI0_IRQHandler+0x24>)
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 800a694:	f7ff ff80 	bl	800a598 <callback_extInt0>
	}
}
 800a698:	bf00      	nop
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40013c00 	.word	0x40013c00

0800a6a0 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800a6a4:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <EXTI1_IRQHandler+0x24>)
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d007      	beq.n	800a6c0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800a6b0:	4b04      	ldr	r3, [pc, #16]	; (800a6c4 <EXTI1_IRQHandler+0x24>)
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	4a03      	ldr	r2, [pc, #12]	; (800a6c4 <EXTI1_IRQHandler+0x24>)
 800a6b6:	f043 0302 	orr.w	r3, r3, #2
 800a6ba:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800a6bc:	f7f8 f800 	bl	80026c0 <callback_extInt1>
	}
}
 800a6c0:	bf00      	nop
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	40013c00 	.word	0x40013c00

0800a6c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800a6cc:	4b07      	ldr	r3, [pc, #28]	; (800a6ec <EXTI2_IRQHandler+0x24>)
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d007      	beq.n	800a6e8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <EXTI2_IRQHandler+0x24>)
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	4a03      	ldr	r2, [pc, #12]	; (800a6ec <EXTI2_IRQHandler+0x24>)
 800a6de:	f043 0304 	orr.w	r3, r3, #4
 800a6e2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 800a6e4:	f7ff ff60 	bl	800a5a8 <callback_extInt2>
	}
}
 800a6e8:	bf00      	nop
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	40013c00 	.word	0x40013c00

0800a6f0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800a6f4:	4b07      	ldr	r3, [pc, #28]	; (800a714 <EXTI3_IRQHandler+0x24>)
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d007      	beq.n	800a710 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 800a700:	4b04      	ldr	r3, [pc, #16]	; (800a714 <EXTI3_IRQHandler+0x24>)
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	4a03      	ldr	r2, [pc, #12]	; (800a714 <EXTI3_IRQHandler+0x24>)
 800a706:	f043 0308 	orr.w	r3, r3, #8
 800a70a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800a70c:	f7f7 ffee 	bl	80026ec <callback_extInt3>
	}
}
 800a710:	bf00      	nop
 800a712:	bd80      	pop	{r7, pc}
 800a714:	40013c00 	.word	0x40013c00

0800a718 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800a718:	b580      	push	{r7, lr}
 800a71a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800a71c:	4b07      	ldr	r3, [pc, #28]	; (800a73c <EXTI4_IRQHandler+0x24>)
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	f003 0310 	and.w	r3, r3, #16
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800a728:	4b04      	ldr	r3, [pc, #16]	; (800a73c <EXTI4_IRQHandler+0x24>)
 800a72a:	695b      	ldr	r3, [r3, #20]
 800a72c:	4a03      	ldr	r2, [pc, #12]	; (800a73c <EXTI4_IRQHandler+0x24>)
 800a72e:	f043 0310 	orr.w	r3, r3, #16
 800a732:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800a734:	f7ff ff40 	bl	800a5b8 <callback_extInt4>
	}
}
 800a738:	bf00      	nop
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	40013c00 	.word	0x40013c00

0800a740 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800a744:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	f003 0320 	and.w	r3, r3, #32
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d008      	beq.n	800a762 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 800a750:	4b23      	ldr	r3, [pc, #140]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	4a22      	ldr	r2, [pc, #136]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a756:	f043 0320 	orr.w	r3, r3, #32
 800a75a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800a75c:	f7ff ff34 	bl	800a5c8 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 800a760:	e03c      	b.n	800a7dc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800a762:	4b1f      	ldr	r3, [pc, #124]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800a76e:	4b1c      	ldr	r3, [pc, #112]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	4a1b      	ldr	r2, [pc, #108]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a778:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800a77a:	f7ff ff2d 	bl	800a5d8 <callback_extInt6>
}
 800a77e:	e02d      	b.n	800a7dc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 800a780:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d008      	beq.n	800a79e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800a78c:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	4a13      	ldr	r2, [pc, #76]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a796:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 800a798:	f7ff ff26 	bl	800a5e8 <callback_extInt7>
}
 800a79c:	e01e      	b.n	800a7dc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800a79e:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d008      	beq.n	800a7bc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	4a0c      	ldr	r2, [pc, #48]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7b4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 800a7b6:	f7ff ff1f 	bl	800a5f8 <callback_extInt8>
}
 800a7ba:	e00f      	b.n	800a7dc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800a7bc:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d008      	beq.n	800a7da <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	4a04      	ldr	r2, [pc, #16]	; (800a7e0 <EXTI9_5_IRQHandler+0xa0>)
 800a7ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7d2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 800a7d4:	f7ff ff18 	bl	800a608 <callback_extInt9>
}
 800a7d8:	e000      	b.n	800a7dc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800a7da:	bf00      	nop
}
 800a7dc:	bf00      	nop
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	40013c00 	.word	0x40013c00

0800a7e4 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 800a7e8:	4b2d      	ldr	r3, [pc, #180]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800a7f4:	4b2a      	ldr	r3, [pc, #168]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	4a29      	ldr	r2, [pc, #164]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a7fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7fe:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 800a800:	f7ff ff0a 	bl	800a618 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800a804:	e049      	b.n	800a89a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800a806:	4b26      	ldr	r3, [pc, #152]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d008      	beq.n	800a824 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	4a22      	ldr	r2, [pc, #136]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a81c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800a81e:	f7ff ff03 	bl	800a628 <callback_extInt11>
}
 800a822:	e03a      	b.n	800a89a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800a824:	4b1e      	ldr	r3, [pc, #120]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d008      	beq.n	800a842 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 800a830:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	4a1a      	ldr	r2, [pc, #104]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a83a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800a83c:	f7ff fefc 	bl	800a638 <callback_extInt12>
}
 800a840:	e02b      	b.n	800a89a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800a842:	4b17      	ldr	r3, [pc, #92]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d008      	beq.n	800a860 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800a84e:	4b14      	ldr	r3, [pc, #80]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	4a13      	ldr	r2, [pc, #76]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a858:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800a85a:	f7ff fef5 	bl	800a648 <callback_extInt13>
}
 800a85e:	e01c      	b.n	800a89a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 800a860:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d008      	beq.n	800a87e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800a86c:	4b0c      	ldr	r3, [pc, #48]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	4a0b      	ldr	r2, [pc, #44]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a876:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 800a878:	f7ff feee 	bl	800a658 <callback_extInt14>
}
 800a87c:	e00d      	b.n	800a89a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800a87e:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800a88a:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	4a04      	ldr	r2, [pc, #16]	; (800a8a0 <EXTI15_10_IRQHandler+0xbc>)
 800a890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a894:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800a896:	f7ff fee7 	bl	800a668 <callback_extInt15>
}
 800a89a:	bf00      	nop
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	40013c00 	.word	0x40013c00

0800a8a4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a88      	ldr	r2, [pc, #544]	; (800aadc <GPIO_Config+0x238>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d106      	bne.n	800a8cc <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800a8be:	4b88      	ldr	r3, [pc, #544]	; (800aae0 <GPIO_Config+0x23c>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	4a87      	ldr	r2, [pc, #540]	; (800aae0 <GPIO_Config+0x23c>)
 800a8c4:	f043 0301 	orr.w	r3, r3, #1
 800a8c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ca:	e03a      	b.n	800a942 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a84      	ldr	r2, [pc, #528]	; (800aae4 <GPIO_Config+0x240>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d106      	bne.n	800a8e4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800a8d6:	4b82      	ldr	r3, [pc, #520]	; (800aae0 <GPIO_Config+0x23c>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	4a81      	ldr	r2, [pc, #516]	; (800aae0 <GPIO_Config+0x23c>)
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8e2:	e02e      	b.n	800a942 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a7f      	ldr	r2, [pc, #508]	; (800aae8 <GPIO_Config+0x244>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d106      	bne.n	800a8fc <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800a8ee:	4b7c      	ldr	r3, [pc, #496]	; (800aae0 <GPIO_Config+0x23c>)
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f2:	4a7b      	ldr	r2, [pc, #492]	; (800aae0 <GPIO_Config+0x23c>)
 800a8f4:	f043 0304 	orr.w	r3, r3, #4
 800a8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fa:	e022      	b.n	800a942 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a7a      	ldr	r2, [pc, #488]	; (800aaec <GPIO_Config+0x248>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d106      	bne.n	800a914 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800a906:	4b76      	ldr	r3, [pc, #472]	; (800aae0 <GPIO_Config+0x23c>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	4a75      	ldr	r2, [pc, #468]	; (800aae0 <GPIO_Config+0x23c>)
 800a90c:	f043 0308 	orr.w	r3, r3, #8
 800a910:	6313      	str	r3, [r2, #48]	; 0x30
 800a912:	e016      	b.n	800a942 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a75      	ldr	r2, [pc, #468]	; (800aaf0 <GPIO_Config+0x24c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d106      	bne.n	800a92c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800a91e:	4b70      	ldr	r3, [pc, #448]	; (800aae0 <GPIO_Config+0x23c>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	4a6f      	ldr	r2, [pc, #444]	; (800aae0 <GPIO_Config+0x23c>)
 800a924:	f043 0310 	orr.w	r3, r3, #16
 800a928:	6313      	str	r3, [r2, #48]	; 0x30
 800a92a:	e00a      	b.n	800a942 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a70      	ldr	r2, [pc, #448]	; (800aaf4 <GPIO_Config+0x250>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d105      	bne.n	800a942 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800a936:	4b6a      	ldr	r3, [pc, #424]	; (800aae0 <GPIO_Config+0x23c>)
 800a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93a:	4a69      	ldr	r2, [pc, #420]	; (800aae0 <GPIO_Config+0x23c>)
 800a93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a940:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	795b      	ldrb	r3, [r3, #5]
 800a946:	2b02      	cmp	r3, #2
 800a948:	d143      	bne.n	800a9d2 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	791b      	ldrb	r3, [r3, #4]
 800a94e:	2b07      	cmp	r3, #7
 800a950:	d81f      	bhi.n	800a992 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	791b      	ldrb	r3, [r3, #4]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6a1a      	ldr	r2, [r3, #32]
 800a960:	210f      	movs	r1, #15
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	fa01 f303 	lsl.w	r3, r1, r3
 800a968:	43db      	mvns	r3, r3
 800a96a:	4619      	mov	r1, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	400a      	ands	r2, r1
 800a972:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a1a      	ldr	r2, [r3, #32]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	7a5b      	ldrb	r3, [r3, #9]
 800a97e:	4619      	mov	r1, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	fa01 f303 	lsl.w	r3, r1, r3
 800a986:	4619      	mov	r1, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	621a      	str	r2, [r3, #32]
 800a990:	e01f      	b.n	800a9d2 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	791b      	ldrb	r3, [r3, #4]
 800a996:	3b08      	subs	r3, #8
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a2:	210f      	movs	r1, #15
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9aa:	43db      	mvns	r3, r3
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	400a      	ands	r2, r1
 800a9b4:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7a5b      	ldrb	r3, [r3, #9]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	795b      	ldrb	r3, [r3, #5]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	791b      	ldrb	r3, [r3, #4]
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	791b      	ldrb	r3, [r3, #4]
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	2103      	movs	r1, #3
 800a9f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9f6:	43db      	mvns	r3, r3
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	400a      	ands	r2, r1
 800aa00:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6819      	ldr	r1, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	7a1b      	ldrb	r3, [r3, #8]
 800aa16:	461a      	mov	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	791b      	ldrb	r3, [r3, #4]
 800aa1c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa20:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	791b      	ldrb	r3, [r3, #4]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	2301      	movs	r3, #1
 800aa30:	408b      	lsls	r3, r1
 800aa32:	43db      	mvns	r3, r3
 800aa34:	4619      	mov	r1, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	400a      	ands	r2, r1
 800aa3c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6859      	ldr	r1, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	799b      	ldrb	r3, [r3, #6]
 800aa52:	461a      	mov	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	791b      	ldrb	r3, [r3, #4]
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	2103      	movs	r1, #3
 800aa6e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa72:	43db      	mvns	r3, r3
 800aa74:	4619      	mov	r1, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	400a      	ands	r2, r1
 800aa7c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6899      	ldr	r1, [r3, #8]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	79db      	ldrb	r3, [r3, #7]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	791b      	ldrb	r3, [r3, #4]
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	791b      	ldrb	r3, [r3, #4]
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	2103      	movs	r1, #3
 800aaae:	fa01 f303 	lsl.w	r3, r1, r3
 800aab2:	43db      	mvns	r3, r3
 800aab4:	4619      	mov	r1, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	400a      	ands	r2, r1
 800aabc:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68d9      	ldr	r1, [r3, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800aace:	bf00      	nop
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40020000 	.word	0x40020000
 800aae0:	40023800 	.word	0x40023800
 800aae4:	40020400 	.word	0x40020400
 800aae8:	40020800 	.word	0x40020800
 800aaec:	40020c00 	.word	0x40020c00
 800aaf0:	40021000 	.word	0x40021000
 800aaf4:	40021c00 	.word	0x40021c00

0800aaf8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d10d      	bne.n	800ab26 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	791b      	ldrb	r3, [r3, #4]
 800ab14:	4619      	mov	r1, r3
 800ab16:	2301      	movs	r3, #1
 800ab18:	408b      	lsls	r3, r1
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800ab24:	e00d      	b.n	800ab42 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	699a      	ldr	r2, [r3, #24]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	791b      	ldrb	r3, [r3, #4]
 800ab30:	3310      	adds	r3, #16
 800ab32:	2101      	movs	r1, #1
 800ab34:	fa01 f303 	lsl.w	r3, r1, r3
 800ab38:	4619      	mov	r1, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	619a      	str	r2, [r3, #24]
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	460b      	mov	r3, r1
 800ab58:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800ab5a:	78fb      	ldrb	r3, [r7, #3]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10d      	bne.n	800ab7c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	699a      	ldr	r2, [r3, #24]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	408b      	lsls	r3, r1
 800ab70:	4619      	mov	r1, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800ab7a:	e00d      	b.n	800ab98 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	699a      	ldr	r2, [r3, #24]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	3310      	adds	r3, #16
 800ab88:	2101      	movs	r1, #1
 800ab8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab8e:	4619      	mov	r1, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	619a      	str	r2, [r3, #24]
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	791b      	ldrb	r3, [r3, #4]
 800abb4:	461a      	mov	r2, r3
 800abb6:	2301      	movs	r3, #1
 800abb8:	4093      	lsls	r3, r2
 800abba:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800abc4:	897b      	ldrh	r3, [r7, #10]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4013      	ands	r3, r2
 800abca:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	791b      	ldrb	r3, [r3, #4]
 800abd0:	461a      	mov	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	40d3      	lsrs	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800abd8:	68fb      	ldr	r3, [r7, #12]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff ffd8 	bl	800aba4 <GPIO_ReadPin>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bf0c      	ite	eq
 800abfe:	2301      	moveq	r3, #1
 800ac00:	2300      	movne	r3, #0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	4619      	mov	r1, r3
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff ff76 	bl	800aaf8 <GPIO_WritePin>
}
 800ac0c:	bf00      	nop
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff fe3b 	bl	800a8a4 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff fe36 	bl	800a8a4 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 fbfd 	bl	800d43c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800ac42:	e004      	b.n	800ac4e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f94f 	bl	800aee8 <WHOIAM>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0f7      	beq.n	800ac44 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800ac54:	216b      	movs	r1, #107	; 0x6b
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f8f1 	bl	800ae3e <readData>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	461a      	mov	r2, r3
 800ac68:	216b      	movs	r1, #107	; 0x6b
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f89c 	bl	800ada8 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 800ac70:	216b      	movs	r1, #107	; 0x6b
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f8e3 	bl	800ae3e <readData>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800ac7c:	211c      	movs	r1, #28
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f8dd 	bl	800ae3e <readData>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	f023 0318 	bic.w	r3, r3, #24
 800ac8e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d833      	bhi.n	800ad00 <configMPUAccel+0xec>
 800ac98:	a201      	add	r2, pc, #4	; (adr r2, 800aca0 <configMPUAccel+0x8c>)
 800ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800acb1 	.word	0x0800acb1
 800aca4:	0800acbf 	.word	0x0800acbf
 800aca8:	0800acd5 	.word	0x0800acd5
 800acac:	0800aceb 	.word	0x0800aceb
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	461a      	mov	r2, r3
 800acb4:	211c      	movs	r1, #28
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f876 	bl	800ada8 <writeData>


				break;
 800acbc:	e021      	b.n	800ad02 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	f043 0308 	orr.w	r3, r3, #8
 800acc4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	461a      	mov	r2, r3
 800acca:	211c      	movs	r1, #28
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f86b 	bl	800ada8 <writeData>


				break;
 800acd2:	e016      	b.n	800ad02 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	f043 0310 	orr.w	r3, r3, #16
 800acda:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	461a      	mov	r2, r3
 800ace0:	211c      	movs	r1, #28
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f860 	bl	800ada8 <writeData>


				break;
 800ace8:	e00b      	b.n	800ad02 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	f043 0318 	orr.w	r3, r3, #24
 800acf0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
 800acf4:	461a      	mov	r2, r3
 800acf6:	211c      	movs	r1, #28
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f855 	bl	800ada8 <writeData>


				break;
 800acfe:	e000      	b.n	800ad02 <configMPUAccel+0xee>
			}default:{
				break;
 800ad00:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800ad02:	211c      	movs	r1, #28
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f89a 	bl	800ae3e <readData>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800ad0e:	211b      	movs	r1, #27
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f894 	bl	800ae3e <readData>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	f023 0318 	bic.w	r3, r3, #24
 800ad20:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	785b      	ldrb	r3, [r3, #1]
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d832      	bhi.n	800ad90 <configMPUAccel+0x17c>
 800ad2a:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <configMPUAccel+0x11c>)
 800ad2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad30:	0800ad41 	.word	0x0800ad41
 800ad34:	0800ad4f 	.word	0x0800ad4f
 800ad38:	0800ad65 	.word	0x0800ad65
 800ad3c:	0800ad7b 	.word	0x0800ad7b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	461a      	mov	r2, r3
 800ad44:	211b      	movs	r1, #27
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f82e 	bl	800ada8 <writeData>


				break;
 800ad4c:	e021      	b.n	800ad92 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	f043 0308 	orr.w	r3, r3, #8
 800ad54:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	211b      	movs	r1, #27
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f823 	bl	800ada8 <writeData>


				break;
 800ad62:	e016      	b.n	800ad92 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
 800ad66:	f043 0310 	orr.w	r3, r3, #16
 800ad6a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	211b      	movs	r1, #27
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f818 	bl	800ada8 <writeData>


				break;
 800ad78:	e00b      	b.n	800ad92 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	f043 0318 	orr.w	r3, r3, #24
 800ad80:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	461a      	mov	r2, r3
 800ad86:	211b      	movs	r1, #27
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f80d 	bl	800ada8 <writeData>


				break;
 800ad8e:	e000      	b.n	800ad92 <configMPUAccel+0x17e>
			}default:{
				break;
 800ad90:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800ad92:	211b      	movs	r1, #27
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f852 	bl	800ae3e <readData>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73bb      	strb	r3, [r7, #14]


}
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop

0800ada8 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
 800adb4:	4613      	mov	r3, r2
 800adb6:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	695a      	ldr	r2, [r3, #20]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adca:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	4618      	mov	r0, r3
 800add2:	f002 fca3 	bl	800d71c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68d8      	ldr	r0, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	791b      	ldrb	r3, [r3, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	4619      	mov	r1, r3
 800ade4:	f002 fd05 	bl	800d7f2 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	78fa      	ldrb	r2, [r7, #3]
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f002 fd26 	bl	800d842 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800adf6:	e000      	b.n	800adfa <writeData+0x52>
		__NOP();
 800adf8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f6      	bne.n	800adf8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	78ba      	ldrb	r2, [r7, #2]
 800ae10:	4611      	mov	r1, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f002 fd2f 	bl	800d876 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800ae18:	e000      	b.n	800ae1c <writeData+0x74>
		__NOP();
 800ae1a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1f6      	bne.n	800ae1a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f002 fc61 	bl	800d6f8 <i2c_stopTransaction>



}
 800ae36:	bf00      	nop
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	460b      	mov	r3, r1
 800ae48:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	695a      	ldr	r2, [r3, #20]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae60:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f002 fc58 	bl	800d71c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68d8      	ldr	r0, [r3, #12]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	791b      	ldrb	r3, [r3, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f002 fcba 	bl	800d7f2 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	78fa      	ldrb	r2, [r7, #3]
 800ae84:	4611      	mov	r1, r2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f002 fcdb 	bl	800d842 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800ae8c:	e000      	b.n	800ae90 <readData+0x52>
		__NOP();
 800ae8e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1f6      	bne.n	800ae8e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f002 fc6a 	bl	800d77e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68d8      	ldr	r0, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	791b      	ldrb	r3, [r3, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f002 fc9b 	bl	800d7f2 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f002 fc84 	bl	800d7ce <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f002 fc14 	bl	800d6f8 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f002 fce8 	bl	800d8aa <i2c_readDataByte>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 800aede:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 800aef8:	2175      	movs	r1, #117	; 0x75
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff ff9f 	bl	800ae3e <readData>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800af0a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	085b      	lsrs	r3, r3, #1
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	bf14      	ite	ne
 800af16:	2301      	movne	r3, #1
 800af18:	2300      	moveq	r3, #0
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800af1e:	7bbb      	ldrb	r3, [r7, #14]

}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 800af34:	2300      	movs	r3, #0
 800af36:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800af3c:	f04f 0200 	mov.w	r2, #0
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 800af48:	2143      	movs	r1, #67	; 0x43
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff ff77 	bl	800ae3e <readData>
 800af50:	4603      	mov	r3, r0
 800af52:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 800af54:	2144      	movs	r1, #68	; 0x44
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff ff71 	bl	800ae3e <readData>
 800af5c:	4603      	mov	r3, r0
 800af5e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 800af60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	b21a      	sxth	r2, r3
 800af68:	89bb      	ldrh	r3, [r7, #12]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	785b      	ldrb	r3, [r3, #1]
 800af72:	2b03      	cmp	r3, #3
 800af74:	d846      	bhi.n	800b004 <readGyro_X+0xdc>
 800af76:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <readGyro_X+0x54>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800af8d 	.word	0x0800af8d
 800af80:	0800afab 	.word	0x0800afab
 800af84:	0800afc9 	.word	0x0800afc9
 800af88:	0800afe7 	.word	0x0800afe7
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800af8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800af90:	4618      	mov	r0, r3
 800af92:	f7f5 fadf 	bl	8000554 <__aeabi_i2d>
 800af96:	a325      	add	r3, pc, #148	; (adr r3, 800b02c <readGyro_X+0x104>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f7f5 fc6e 	bl	800087c <__aeabi_ddiv>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800afa8:	e02d      	b.n	800b006 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 800afaa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7f5 fad0 	bl	8000554 <__aeabi_i2d>
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	4b19      	ldr	r3, [pc, #100]	; (800b020 <readGyro_X+0xf8>)
 800afba:	f7f5 fc5f 	bl	800087c <__aeabi_ddiv>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800afc6:	e01e      	b.n	800b006 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 800afc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7f5 fac1 	bl	8000554 <__aeabi_i2d>
 800afd2:	f04f 0200 	mov.w	r2, #0
 800afd6:	4b13      	ldr	r3, [pc, #76]	; (800b024 <readGyro_X+0xfc>)
 800afd8:	f7f5 fc50 	bl	800087c <__aeabi_ddiv>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800afe4:	e00f      	b.n	800b006 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 800afe6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afea:	4618      	mov	r0, r3
 800afec:	f7f5 fab2 	bl	8000554 <__aeabi_i2d>
 800aff0:	f04f 0200 	mov.w	r2, #0
 800aff4:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <readGyro_X+0x100>)
 800aff6:	f7f5 fc41 	bl	800087c <__aeabi_ddiv>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b002:	e000      	b.n	800b006 <readGyro_X+0xde>
		}default:{
			break;
 800b004:	bf00      	nop
		}

	}

	return GYROX_R;
 800b006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b00a:	f7f5 fe05 	bl	8000c18 <__aeabi_d2f>
 800b00e:	4603      	mov	r3, r0
 800b010:	ee07 3a90 	vmov	s15, r3

}
 800b014:	eeb0 0a67 	vmov.f32	s0, s15
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	40508000 	.word	0x40508000
 800b024:	40408000 	.word	0x40408000
 800b028:	40300000 	.word	0x40300000
 800b02c:	00000000 	.word	0x00000000
 800b030:	40606000 	.word	0x40606000
 800b034:	00000000 	.word	0x00000000

0800b038 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800b04c:	f04f 0200 	mov.w	r2, #0
 800b050:	f04f 0300 	mov.w	r3, #0
 800b054:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 800b058:	2145      	movs	r1, #69	; 0x45
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff feef 	bl	800ae3e <readData>
 800b060:	4603      	mov	r3, r0
 800b062:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800b064:	2146      	movs	r1, #70	; 0x46
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff fee9 	bl	800ae3e <readData>
 800b06c:	4603      	mov	r3, r0
 800b06e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 800b070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	b21a      	sxth	r2, r3
 800b078:	89bb      	ldrh	r3, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	785b      	ldrb	r3, [r3, #1]
 800b082:	2b03      	cmp	r3, #3
 800b084:	d846      	bhi.n	800b114 <readGyro_Y+0xdc>
 800b086:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <readGyro_Y+0x54>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b09d 	.word	0x0800b09d
 800b090:	0800b0bb 	.word	0x0800b0bb
 800b094:	0800b0d9 	.word	0x0800b0d9
 800b098:	0800b0f7 	.word	0x0800b0f7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800b09c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7f5 fa57 	bl	8000554 <__aeabi_i2d>
 800b0a6:	a325      	add	r3, pc, #148	; (adr r3, 800b13c <readGyro_Y+0x104>)
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f7f5 fbe6 	bl	800087c <__aeabi_ddiv>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b0b8:	e02d      	b.n	800b116 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 800b0ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f5 fa48 	bl	8000554 <__aeabi_i2d>
 800b0c4:	f04f 0200 	mov.w	r2, #0
 800b0c8:	4b19      	ldr	r3, [pc, #100]	; (800b130 <readGyro_Y+0xf8>)
 800b0ca:	f7f5 fbd7 	bl	800087c <__aeabi_ddiv>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b0d6:	e01e      	b.n	800b116 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 800b0d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7f5 fa39 	bl	8000554 <__aeabi_i2d>
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	4b13      	ldr	r3, [pc, #76]	; (800b134 <readGyro_Y+0xfc>)
 800b0e8:	f7f5 fbc8 	bl	800087c <__aeabi_ddiv>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b0f4:	e00f      	b.n	800b116 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 800b0f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7f5 fa2a 	bl	8000554 <__aeabi_i2d>
 800b100:	f04f 0200 	mov.w	r2, #0
 800b104:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <readGyro_Y+0x100>)
 800b106:	f7f5 fbb9 	bl	800087c <__aeabi_ddiv>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b112:	e000      	b.n	800b116 <readGyro_Y+0xde>
		}default:{
			break;
 800b114:	bf00      	nop
		}

	}

	return GYROY_R;
 800b116:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b11a:	f7f5 fd7d 	bl	8000c18 <__aeabi_d2f>
 800b11e:	4603      	mov	r3, r0
 800b120:	ee07 3a90 	vmov	s15, r3

}
 800b124:	eeb0 0a67 	vmov.f32	s0, s15
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	40508000 	.word	0x40508000
 800b134:	40408000 	.word	0x40408000
 800b138:	40300000 	.word	0x40300000
 800b13c:	00000000 	.word	0x00000000
 800b140:	40606000 	.word	0x40606000
 800b144:	00000000 	.word	0x00000000

0800b148 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 800b168:	2147      	movs	r1, #71	; 0x47
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7ff fe67 	bl	800ae3e <readData>
 800b170:	4603      	mov	r3, r0
 800b172:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 800b174:	2148      	movs	r1, #72	; 0x48
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff fe61 	bl	800ae3e <readData>
 800b17c:	4603      	mov	r3, r0
 800b17e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 800b180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	b21a      	sxth	r2, r3
 800b188:	89bb      	ldrh	r3, [r7, #12]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	785b      	ldrb	r3, [r3, #1]
 800b192:	2b03      	cmp	r3, #3
 800b194:	d846      	bhi.n	800b224 <readGyro_Z+0xdc>
 800b196:	a201      	add	r2, pc, #4	; (adr r2, 800b19c <readGyro_Z+0x54>)
 800b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19c:	0800b1ad 	.word	0x0800b1ad
 800b1a0:	0800b1cb 	.word	0x0800b1cb
 800b1a4:	0800b1e9 	.word	0x0800b1e9
 800b1a8:	0800b207 	.word	0x0800b207
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800b1ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7f5 f9cf 	bl	8000554 <__aeabi_i2d>
 800b1b6:	a325      	add	r3, pc, #148	; (adr r3, 800b24c <readGyro_Z+0x104>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f7f5 fb5e 	bl	800087c <__aeabi_ddiv>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b1c8:	e02d      	b.n	800b226 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800b1ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7f5 f9c0 	bl	8000554 <__aeabi_i2d>
 800b1d4:	f04f 0200 	mov.w	r2, #0
 800b1d8:	4b19      	ldr	r3, [pc, #100]	; (800b240 <readGyro_Z+0xf8>)
 800b1da:	f7f5 fb4f 	bl	800087c <__aeabi_ddiv>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b1e6:	e01e      	b.n	800b226 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 800b1e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7f5 f9b1 	bl	8000554 <__aeabi_i2d>
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	4b13      	ldr	r3, [pc, #76]	; (800b244 <readGyro_Z+0xfc>)
 800b1f8:	f7f5 fb40 	bl	800087c <__aeabi_ddiv>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b204:	e00f      	b.n	800b226 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 800b206:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f5 f9a2 	bl	8000554 <__aeabi_i2d>
 800b210:	f04f 0200 	mov.w	r2, #0
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <readGyro_Z+0x100>)
 800b216:	f7f5 fb31 	bl	800087c <__aeabi_ddiv>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b222:	e000      	b.n	800b226 <readGyro_Z+0xde>
		}default:{
			break;
 800b224:	bf00      	nop
		}

	}

	return GYROZ_R;
 800b226:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b22a:	f7f5 fcf5 	bl	8000c18 <__aeabi_d2f>
 800b22e:	4603      	mov	r3, r0
 800b230:	ee07 3a90 	vmov	s15, r3

}
 800b234:	eeb0 0a67 	vmov.f32	s0, s15
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	40508000 	.word	0x40508000
 800b244:	40408000 	.word	0x40408000
 800b248:	40300000 	.word	0x40300000
 800b24c:	00000000 	.word	0x00000000
 800b250:	40606000 	.word	0x40606000
 800b254:	00000000 	.word	0x00000000

0800b258 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08c      	sub	sp, #48	; 0x30
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6178      	str	r0, [r7, #20]
 800b260:	6139      	str	r1, [r7, #16]
 800b262:	ed87 0b02 	vstr	d0, [r7, #8]
 800b266:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b274:	f7f5 f820 	bl	80002b8 <__aeabi_dsub>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b286:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b28a:	f7f5 f815 	bl	80002b8 <__aeabi_dsub>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3310      	adds	r3, #16
 800b29a:	f107 0218 	add.w	r2, r7, #24
 800b29e:	4611      	mov	r1, r2
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fa55 	bl	800b750 <calculed_ang_turn>
 800b2a6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 800b2aa:	f04f 0200 	mov.w	r2, #0
 800b2ae:	4b38      	ldr	r3, [pc, #224]	; (800b390 <build_Operation+0x138>)
 800b2b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b2b4:	f7f5 fc48 	bl	8000b48 <__aeabi_dcmpgt>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d020      	beq.n	800b300 <build_Operation+0xa8>
 800b2be:	f04f 0200 	mov.w	r2, #0
 800b2c2:	4b34      	ldr	r3, [pc, #208]	; (800b394 <build_Operation+0x13c>)
 800b2c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b2c8:	f7f5 fc20 	bl	8000b0c <__aeabi_dcmplt>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d016      	beq.n	800b300 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d8:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 800b388 <build_Operation+0x130>
 800b2dc:	ed97 1b00 	vldr	d1, [r7]
 800b2e0:	ed97 0b02 	vldr	d0, [r7, #8]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6978      	ldr	r0, [r7, #20]
 800b2ea:	f000 f855 	bl	800b398 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b2fe:	e02b      	b.n	800b358 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b306:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b30a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b388 <build_Operation+0x130>
 800b30e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b388 <build_Operation+0x130>
 800b312:	2202      	movs	r2, #2
 800b314:	4619      	mov	r1, r3
 800b316:	6978      	ldr	r0, [r7, #20]
 800b318:	f000 f83e 	bl	800b398 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b322:	3301      	adds	r3, #1
 800b324:	b2da      	uxtb	r2, r3
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b332:	ed9f 2b15 	vldr	d2, [pc, #84]	; 800b388 <build_Operation+0x130>
 800b336:	ed97 1b00 	vldr	d1, [r7]
 800b33a:	ed97 0b02 	vldr	d0, [r7, #8]
 800b33e:	2201      	movs	r2, #1
 800b340:	4619      	mov	r1, r3
 800b342:	6978      	ldr	r0, [r7, #20]
 800b344:	f000 f828 	bl	800b398 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b34e:	3301      	adds	r3, #1
 800b350:	b2da      	uxtb	r2, r3
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 800b358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b35c:	6939      	ldr	r1, [r7, #16]
 800b35e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 800b362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b366:	6939      	ldr	r1, [r7, #16]
 800b368:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 800b36c:	6939      	ldr	r1, [r7, #16]
 800b36e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b372:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 800b376:	6939      	ldr	r1, [r7, #16]
 800b378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b37c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800b380:	bf00      	nop
 800b382:	3730      	adds	r7, #48	; 0x30
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
	...
 800b390:	c0140000 	.word	0xc0140000
 800b394:	40140000 	.word	0x40140000

0800b398 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 800b398:	b480      	push	{r7}
 800b39a:	b089      	sub	sp, #36	; 0x24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	61f8      	str	r0, [r7, #28]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	ed87 0b04 	vstr	d0, [r7, #16]
 800b3a6:	ed87 1b02 	vstr	d1, [r7, #8]
 800b3aa:	ed87 2b00 	vstr	d2, [r7]
 800b3ae:	76fb      	strb	r3, [r7, #27]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800b3b4:	7efa      	ldrb	r2, [r7, #27]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4413      	add	r3, r2
 800b3bc:	00db      	lsls	r3, r3, #3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	7eba      	ldrb	r2, [r7, #26]
 800b3c6:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 800b3c8:	7efa      	ldrb	r2, [r7, #27]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	00db      	lsls	r3, r3, #3
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	1899      	adds	r1, r3, r2
 800b3d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b3dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 800b3e0:	7efa      	ldrb	r2, [r7, #27]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	00db      	lsls	r3, r3, #3
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	1899      	adds	r1, r3, r2
 800b3f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 800b3f8:	7efa      	ldrb	r2, [r7, #27]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	461a      	mov	r2, r3
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	1899      	adds	r1, r3, r2
 800b408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b40c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800b410:	bf00      	nop
 800b412:	3724      	adds	r7, #36	; 0x24
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	0000      	movs	r0, r0
	...

0800b420 <change_coordinates_position>:
	ptrParameterPath->goal_Position_x += pot_x;
	ptrParameterPath->goal_Position_y += pot_y;
}

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 800b420:	b5b0      	push	{r4, r5, r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	6178      	str	r0, [r7, #20]
 800b428:	ed87 0b02 	vstr	d0, [r7, #8]
 800b42c:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800b436:	6979      	ldr	r1, [r7, #20]
 800b438:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800b442:	6979      	ldr	r1, [r7, #20]
 800b444:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 800b448:	6979      	ldr	r1, [r7, #20]
 800b44a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b44e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = coor_y;
 800b452:	6979      	ldr	r1, [r7, #20]
 800b454:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b458:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b468:	f7f4 ff26 	bl	80002b8 <__aeabi_dsub>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	ec43 2b17 	vmov	d7, r2, r3
 800b474:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b4e8 <change_coordinates_position+0xc8>
 800b478:	eeb0 0a47 	vmov.f32	s0, s14
 800b47c:	eef0 0a67 	vmov.f32	s1, s15
 800b480:	f005 fa70 	bl	8010964 <pow>
 800b484:	ec55 4b10 	vmov	r4, r5, d0
										   pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));                  //[mm]
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b494:	f7f4 ff10 	bl	80002b8 <__aeabi_dsub>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	ec43 2b17 	vmov	d7, r2, r3
 800b4a0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800b4e8 <change_coordinates_position+0xc8>
 800b4a4:	eeb0 0a47 	vmov.f32	s0, s14
 800b4a8:	eef0 0a67 	vmov.f32	s1, s15
 800b4ac:	f005 fa5a 	bl	8010964 <pow>
 800b4b0:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7f4 ff00 	bl	80002bc <__adddf3>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	ec43 2b17 	vmov	d7, r2, r3
 800b4c4:	eeb0 0a47 	vmov.f32	s0, s14
 800b4c8:	eef0 0a67 	vmov.f32	s1, s15
 800b4cc:	f005 faba 	bl	8010a44 <sqrt>
 800b4d0:	eeb0 7a40 	vmov.f32	s14, s0
 800b4d4:	eef0 7a60 	vmov.f32	s15, s1
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

}
 800b4de:	bf00      	nop
 800b4e0:	3718      	adds	r7, #24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	00000000 	.word	0x00000000
 800b4ec:	40000000 	.word	0x40000000

0800b4f0 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 800b4f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b4f4:	b08a      	sub	sp, #40	; 0x28
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b506:	f7f4 fed7 	bl	80002b8 <__aeabi_dsub>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b51e:	f7f4 fecb 	bl	80002b8 <__aeabi_dsub>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 800b52a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 800b638 <calculation_parameter_distance+0x148>
 800b52e:	ed97 0b08 	vldr	d0, [r7, #32]
 800b532:	f005 fa17 	bl	8010964 <pow>
 800b536:	ec59 8b10 	vmov	r8, r9, d0
 800b53a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 800b638 <calculation_parameter_distance+0x148>
 800b53e:	ed97 0b06 	vldr	d0, [r7, #24]
 800b542:	f005 fa0f 	bl	8010964 <pow>
 800b546:	ec53 2b10 	vmov	r2, r3, d0
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f7f4 feb5 	bl	80002bc <__adddf3>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	ec43 2b17 	vmov	d7, r2, r3
 800b55a:	eeb0 0a47 	vmov.f32	s0, s14
 800b55e:	eef0 0a67 	vmov.f32	s1, s15
 800b562:	f005 fa6f 	bl	8010a44 <sqrt>
 800b566:	eeb0 7a40 	vmov.f32	s14, s0
 800b56a:	eef0 7a60 	vmov.f32	s15, s1
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 800b574:	6979      	ldr	r1, [r7, #20]
 800b576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b57a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 800b57e:	6979      	ldr	r1, [r7, #20]
 800b580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b584:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 800b588:	6a3b      	ldr	r3, [r7, #32]
 800b58a:	60bb      	str	r3, [r7, #8]
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b59a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b59e:	f7f5 f843 	bl	8000628 <__aeabi_dmul>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4690      	mov	r8, r2
 800b5a8:	4699      	mov	r9, r3
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b5b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5b4:	f7f5 f838 	bl	8000628 <__aeabi_dmul>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4640      	mov	r0, r8
 800b5be:	4649      	mov	r1, r9
 800b5c0:	f7f4 fe7a 	bl	80002b8 <__aeabi_dsub>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	6979      	ldr	r1, [r7, #20]
 800b5ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800b5ce:	6979      	ldr	r1, [r7, #20]
 800b5d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 800b5d8:	6a3c      	ldr	r4, [r7, #32]
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	603b      	str	r3, [r7, #0]
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b5f0:	607b      	str	r3, [r7, #4]
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b5f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5fc:	f7f5 f814 	bl	8000628 <__aeabi_dmul>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4614      	mov	r4, r2
 800b606:	461d      	mov	r5, r3
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b60e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b612:	f7f5 f809 	bl	8000628 <__aeabi_dmul>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f4 fe4d 	bl	80002bc <__adddf3>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 800b62c:	bf00      	nop
 800b62e:	3728      	adds	r7, #40	; 0x28
 800b630:	46bd      	mov	sp, r7
 800b632:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b636:	bf00      	nop
 800b638:	00000000 	.word	0x00000000
 800b63c:	40000000 	.word	0x40000000

0800b640 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b640:	b5b0      	push	{r4, r5, r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6178      	str	r0, [r7, #20]
 800b648:	ed87 0b02 	vstr	d0, [r7, #8]
 800b64c:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b65a:	f7f4 ffe5 	bl	8000628 <__aeabi_dmul>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4614      	mov	r4, r2
 800b664:	461d      	mov	r5, r3
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800b66c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b670:	f7f4 ffda 	bl	8000628 <__aeabi_dmul>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4620      	mov	r0, r4
 800b67a:	4629      	mov	r1, r5
 800b67c:	f7f4 fe1e 	bl	80002bc <__adddf3>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4610      	mov	r0, r2
 800b686:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b68e:	f7f4 fe15 	bl	80002bc <__adddf3>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	4610      	mov	r0, r2
 800b698:	4619      	mov	r1, r3
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f5 f8ec 	bl	800087c <__aeabi_ddiv>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	61b9      	str	r1, [r7, #24]
 800b6ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b6b0:	61fb      	str	r3, [r7, #28]

	return distance;
 800b6b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6b6:	ec43 2b17 	vmov	d7, r2, r3
}
 800b6ba:	eeb0 0a47 	vmov.f32	s0, s14
 800b6be:	eef0 0a67 	vmov.f32	s1, s15
 800b6c2:	3720      	adds	r7, #32
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bdb0      	pop	{r4, r5, r7, pc}

0800b6c8 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b6c8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6178      	str	r0, [r7, #20]
 800b6d0:	ed87 0b02 	vstr	d0, [r7, #8]
 800b6d4:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b6de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6e2:	f7f4 ffa1 	bl	8000628 <__aeabi_dmul>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4614      	mov	r4, r2
 800b6ec:	461d      	mov	r5, r3
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6f8:	f7f4 ff96 	bl	8000628 <__aeabi_dmul>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4620      	mov	r0, r4
 800b702:	4629      	mov	r1, r5
 800b704:	f7f4 fdda 	bl	80002bc <__adddf3>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4610      	mov	r0, r2
 800b70e:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b716:	f7f4 fdd1 	bl	80002bc <__adddf3>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4610      	mov	r0, r2
 800b720:	4619      	mov	r1, r3
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800b728:	f7f5 f8a8 	bl	800087c <__aeabi_ddiv>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800b734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b738:	ec43 2b17 	vmov	d7, r2, r3
}
 800b73c:	eeb0 0a47 	vmov.f32	s0, s14
 800b740:	eef0 0a67 	vmov.f32	s1, s15
 800b744:	3720      	adds	r7, #32
 800b746:	46bd      	mov	sp, r7
 800b748:	bdb0      	pop	{r4, r5, r7, pc}
 800b74a:	0000      	movs	r0, r0
 800b74c:	0000      	movs	r0, r0
	...

0800b750 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 800b750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b754:	b08a      	sub	sp, #40	; 0x28
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 ff5d 	bl	8000628 <__aeabi_dmul>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4690      	mov	r8, r2
 800b774:	4699      	mov	r9, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3308      	adds	r3, #8
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f4 ff50 	bl	8000628 <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4640      	mov	r0, r8
 800b78e:	4649      	mov	r1, r9
 800b790:	f7f4 fd92 	bl	80002b8 <__aeabi_dsub>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	ed93 7b00 	vldr	d7, [r3]
 800b7a2:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 800b920 <calculed_ang_turn+0x1d0>
 800b7a6:	eeb0 0a47 	vmov.f32	s0, s14
 800b7aa:	eef0 0a67 	vmov.f32	s1, s15
 800b7ae:	f005 f8d9 	bl	8010964 <pow>
 800b7b2:	ec59 8b10 	vmov	r8, r9, d0
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	ed93 7b00 	vldr	d7, [r3]
 800b7be:	ed9f 1b58 	vldr	d1, [pc, #352]	; 800b920 <calculed_ang_turn+0x1d0>
 800b7c2:	eeb0 0a47 	vmov.f32	s0, s14
 800b7c6:	eef0 0a67 	vmov.f32	s1, s15
 800b7ca:	f005 f8cb 	bl	8010964 <pow>
 800b7ce:	ec53 2b10 	vmov	r2, r3, d0
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f7f4 fd71 	bl	80002bc <__adddf3>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	ec43 2b17 	vmov	d7, r2, r3
 800b7e2:	eeb0 0a47 	vmov.f32	s0, s14
 800b7e6:	eef0 0a67 	vmov.f32	s1, s15
 800b7ea:	f005 f92b 	bl	8010a44 <sqrt>
 800b7ee:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	ed93 7b00 	vldr	d7, [r3]
 800b7f8:	ed9f 1b49 	vldr	d1, [pc, #292]	; 800b920 <calculed_ang_turn+0x1d0>
 800b7fc:	eeb0 0a47 	vmov.f32	s0, s14
 800b800:	eef0 0a67 	vmov.f32	s1, s15
 800b804:	f005 f8ae 	bl	8010964 <pow>
 800b808:	ec59 8b10 	vmov	r8, r9, d0
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	3308      	adds	r3, #8
 800b810:	ed93 7b00 	vldr	d7, [r3]
 800b814:	ed9f 1b42 	vldr	d1, [pc, #264]	; 800b920 <calculed_ang_turn+0x1d0>
 800b818:	eeb0 0a47 	vmov.f32	s0, s14
 800b81c:	eef0 0a67 	vmov.f32	s1, s15
 800b820:	f005 f8a0 	bl	8010964 <pow>
 800b824:	ec53 2b10 	vmov	r2, r3, d0
 800b828:	4640      	mov	r0, r8
 800b82a:	4649      	mov	r1, r9
 800b82c:	f7f4 fd46 	bl	80002bc <__adddf3>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	ec43 2b17 	vmov	d7, r2, r3
 800b838:	eeb0 0a47 	vmov.f32	s0, s14
 800b83c:	eef0 0a67 	vmov.f32	s1, s15
 800b840:	f005 f900 	bl	8010a44 <sqrt>
 800b844:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f7f4 fee8 	bl	8000628 <__aeabi_dmul>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4690      	mov	r8, r2
 800b85e:	4699      	mov	r9, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3308      	adds	r3, #8
 800b864:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	3308      	adds	r3, #8
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 feda 	bl	8000628 <__aeabi_dmul>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	4640      	mov	r0, r8
 800b87a:	4649      	mov	r1, r9
 800b87c:	f7f4 fd1e 	bl	80002bc <__adddf3>
 800b880:	4602      	mov	r2, r0
 800b882:	460b      	mov	r3, r1
 800b884:	4690      	mov	r8, r2
 800b886:	4699      	mov	r9, r3
 800b888:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b88c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b890:	f7f4 feca 	bl	8000628 <__aeabi_dmul>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4640      	mov	r0, r8
 800b89a:	4649      	mov	r1, r9
 800b89c:	f7f4 ffee 	bl	800087c <__aeabi_ddiv>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	ec43 2b17 	vmov	d7, r2, r3
 800b8a8:	eeb0 0a47 	vmov.f32	s0, s14
 800b8ac:	eef0 0a67 	vmov.f32	s1, s15
 800b8b0:	f005 f822 	bl	80108f8 <acos>
 800b8b4:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 800b8b8:	f04f 0200 	mov.w	r2, #0
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	; (800b930 <calculed_ang_turn+0x1e0>)
 800b8be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b8c2:	f7f4 feb1 	bl	8000628 <__aeabi_dmul>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	a316      	add	r3, pc, #88	; (adr r3, 800b928 <calculed_ang_turn+0x1d8>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f4 ffd2 	bl	800087c <__aeabi_ddiv>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 800b8e0:	f04f 0200 	mov.w	r2, #0
 800b8e4:	f04f 0300 	mov.w	r3, #0
 800b8e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8ec:	f7f5 f90e 	bl	8000b0c <__aeabi_dcmplt>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <calculed_ang_turn+0x1b2>
 800b8f6:	6a3c      	ldr	r4, [r7, #32]
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b8fe:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 800b902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b906:	ec43 2b17 	vmov	d7, r2, r3
}
 800b90a:	eeb0 0a47 	vmov.f32	s0, s14
 800b90e:	eef0 0a67 	vmov.f32	s1, s15
 800b912:	3728      	adds	r7, #40	; 0x28
 800b914:	46bd      	mov	sp, r7
 800b916:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w
 800b920:	00000000 	.word	0x00000000
 800b924:	40000000 	.word	0x40000000
 800b928:	54442d18 	.word	0x54442d18
 800b92c:	400921fb 	.word	0x400921fb
 800b930:	40668000 	.word	0x40668000

0800b934 <unitary_vector>:



void unitary_vector (double angle,double vector_b[2]){
 800b934:	b590      	push	{r4, r7, lr}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	ed87 0b02 	vstr	d0, [r7, #8]
 800b93e:	6078      	str	r0, [r7, #4]

	// Esta función lo que haremos es definir un vector unitario con respecto al angulo actual que tenga el robot
	vector_b[0] = cos(angle);
 800b940:	ed97 0b02 	vldr	d0, [r7, #8]
 800b944:	f004 fee4 	bl	8010710 <cos>
 800b948:	eeb0 7a40 	vmov.f32	s14, s0
 800b94c:	eef0 7a60 	vmov.f32	s15, s1
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	ed83 7b00 	vstr	d7, [r3]
	vector_b[1] = sin(angle);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f103 0408 	add.w	r4, r3, #8
 800b95c:	ed97 0b02 	vldr	d0, [r7, #8]
 800b960:	f004 ff72 	bl	8010848 <sin>
 800b964:	eeb0 7a40 	vmov.f32	s14, s0
 800b968:	eef0 7a60 	vmov.f32	s15, s1
 800b96c:	ed84 7b00 	vstr	d7, [r4]

}
 800b970:	bf00      	nop
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	bd90      	pop	{r4, r7, pc}

0800b978 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a6c      	ldr	r2, [pc, #432]	; (800bb38 <pwm_Config+0x1c0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d106      	bne.n	800b998 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800b98a:	4b6c      	ldr	r3, [pc, #432]	; (800bb3c <pwm_Config+0x1c4>)
 800b98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98e:	4a6b      	ldr	r2, [pc, #428]	; (800bb3c <pwm_Config+0x1c4>)
 800b990:	f043 0301 	orr.w	r3, r3, #1
 800b994:	6453      	str	r3, [r2, #68]	; 0x44
 800b996:	e030      	b.n	800b9fa <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a0:	d106      	bne.n	800b9b0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800b9a2:	4b66      	ldr	r3, [pc, #408]	; (800bb3c <pwm_Config+0x1c4>)
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	4a65      	ldr	r2, [pc, #404]	; (800bb3c <pwm_Config+0x1c4>)
 800b9a8:	f043 0301 	orr.w	r3, r3, #1
 800b9ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b9ae:	e024      	b.n	800b9fa <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a62      	ldr	r2, [pc, #392]	; (800bb40 <pwm_Config+0x1c8>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d106      	bne.n	800b9c8 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800b9ba:	4b60      	ldr	r3, [pc, #384]	; (800bb3c <pwm_Config+0x1c4>)
 800b9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9be:	4a5f      	ldr	r2, [pc, #380]	; (800bb3c <pwm_Config+0x1c4>)
 800b9c0:	f043 0302 	orr.w	r3, r3, #2
 800b9c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9c6:	e018      	b.n	800b9fa <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a5d      	ldr	r2, [pc, #372]	; (800bb44 <pwm_Config+0x1cc>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d106      	bne.n	800b9e0 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800b9d2:	4b5a      	ldr	r3, [pc, #360]	; (800bb3c <pwm_Config+0x1c4>)
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d6:	4a59      	ldr	r2, [pc, #356]	; (800bb3c <pwm_Config+0x1c4>)
 800b9d8:	f043 0304 	orr.w	r3, r3, #4
 800b9dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b9de:	e00c      	b.n	800b9fa <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a58      	ldr	r2, [pc, #352]	; (800bb48 <pwm_Config+0x1d0>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d106      	bne.n	800b9f8 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800b9ea:	4b54      	ldr	r3, [pc, #336]	; (800bb3c <pwm_Config+0x1c4>)
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	4a53      	ldr	r2, [pc, #332]	; (800bb3c <pwm_Config+0x1c4>)
 800b9f0:	f043 0308 	orr.w	r3, r3, #8
 800b9f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9f6:	e000      	b.n	800b9fa <pwm_Config+0x82>
	}
	else{
		__NOP();
 800b9f8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ba08:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7f5b      	ldrb	r3, [r3, #29]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f930 	bl	800bc78 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa67 	bl	800beec <setDuttyCycle>
 800ba1e:	e005      	b.n	800ba2c <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f929 	bl	800bc78 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fb38 	bl	800c09c <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f022 0210 	bic.w	r2, r2, #16
 800ba3a:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2200      	movs	r2, #0
 800ba42:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	7a1b      	ldrb	r3, [r3, #8]
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d86f      	bhi.n	800bb2c <pwm_Config+0x1b4>
 800ba4c:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <pwm_Config+0xdc>)
 800ba4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba52:	bf00      	nop
 800ba54:	0800ba65 	.word	0x0800ba65
 800ba58:	0800ba97 	.word	0x0800ba97
 800ba5c:	0800bac9 	.word	0x0800bac9
 800ba60:	0800bafb 	.word	0x0800bafb
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	699a      	ldr	r2, [r3, #24]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0203 	bic.w	r2, r2, #3
 800ba72:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699a      	ldr	r2, [r3, #24]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ba82:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f042 0208 	orr.w	r2, r2, #8
 800ba92:	619a      	str	r2, [r3, #24]


		break;
 800ba94:	e04b      	b.n	800bb2e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	699a      	ldr	r2, [r3, #24]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800baa4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	699a      	ldr	r2, [r3, #24]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800bab4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	699a      	ldr	r2, [r3, #24]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bac4:	619a      	str	r2, [r3, #24]

		break;
 800bac6:	e032      	b.n	800bb2e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	69da      	ldr	r2, [r3, #28]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0203 	bic.w	r2, r2, #3
 800bad6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69da      	ldr	r2, [r3, #28]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bae6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69da      	ldr	r2, [r3, #28]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f042 0208 	orr.w	r2, r2, #8
 800baf6:	61da      	str	r2, [r3, #28]

		break;
 800baf8:	e019      	b.n	800bb2e <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	69da      	ldr	r2, [r3, #28]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bb08:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	69da      	ldr	r2, [r3, #28]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800bb18:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	69da      	ldr	r2, [r3, #28]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb28:	61da      	str	r2, [r3, #28]

		break;
 800bb2a:	e000      	b.n	800bb2e <pwm_Config+0x1b6>
	}

	default:{
		break;
 800bb2c:	bf00      	nop
	}// fin del switch-case




}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	40010000 	.word	0x40010000
 800bb3c:	40023800 	.word	0x40023800
 800bb40:	40000400 	.word	0x40000400
 800bb44:	40000800 	.word	0x40000800
 800bb48:	40000c00 	.word	0x40000c00

0800bb4c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f042 0201 	orr.w	r2, r2, #1
 800bb62:	601a      	str	r2, [r3, #0]

}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a3d      	ldr	r2, [pc, #244]	; (800bc74 <enableOutput+0x104>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d13a      	bne.n	800bbf8 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb90:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7a1b      	ldrb	r3, [r3, #8]
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d862      	bhi.n	800bc60 <enableOutput+0xf0>
 800bb9a:	a201      	add	r2, pc, #4	; (adr r2, 800bba0 <enableOutput+0x30>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbb1 	.word	0x0800bbb1
 800bba4:	0800bbc3 	.word	0x0800bbc3
 800bba8:	0800bbd5 	.word	0x0800bbd5
 800bbac:	0800bbe7 	.word	0x0800bbe7
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6a1a      	ldr	r2, [r3, #32]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0201 	orr.w	r2, r2, #1
 800bbbe:	621a      	str	r2, [r3, #32]

				break;
 800bbc0:	e051      	b.n	800bc66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6a1a      	ldr	r2, [r3, #32]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0210 	orr.w	r2, r2, #16
 800bbd0:	621a      	str	r2, [r3, #32]

				break;
 800bbd2:	e048      	b.n	800bc66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6a1a      	ldr	r2, [r3, #32]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbe2:	621a      	str	r2, [r3, #32]

				break;
 800bbe4:	e03f      	b.n	800bc66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6a1a      	ldr	r2, [r3, #32]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbf4:	621a      	str	r2, [r3, #32]

				break;
 800bbf6:	e036      	b.n	800bc66 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	7a1b      	ldrb	r3, [r3, #8]
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d831      	bhi.n	800bc64 <enableOutput+0xf4>
 800bc00:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <enableOutput+0x98>)
 800bc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc06:	bf00      	nop
 800bc08:	0800bc19 	.word	0x0800bc19
 800bc0c:	0800bc2b 	.word	0x0800bc2b
 800bc10:	0800bc3d 	.word	0x0800bc3d
 800bc14:	0800bc4f 	.word	0x0800bc4f
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6a1a      	ldr	r2, [r3, #32]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f042 0201 	orr.w	r2, r2, #1
 800bc26:	621a      	str	r2, [r3, #32]

				break;
 800bc28:	e01d      	b.n	800bc66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6a1a      	ldr	r2, [r3, #32]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f042 0210 	orr.w	r2, r2, #16
 800bc38:	621a      	str	r2, [r3, #32]

				break;
 800bc3a:	e014      	b.n	800bc66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6a1a      	ldr	r2, [r3, #32]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc4a:	621a      	str	r2, [r3, #32]

				break;
 800bc4c:	e00b      	b.n	800bc66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6a1a      	ldr	r2, [r3, #32]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc5c:	621a      	str	r2, [r3, #32]

				break;
 800bc5e:	e002      	b.n	800bc66 <enableOutput+0xf6>
				break;
 800bc60:	bf00      	nop
 800bc62:	e000      	b.n	800bc66 <enableOutput+0xf6>
			}

			default: {
				break;
 800bc64:	bf00      	nop
			}

		}
	}
	return SET;
 800bc66:	2301      	movs	r3, #1
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	40010000 	.word	0x40010000

0800bc78 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	68d2      	ldr	r2, [r2, #12]
 800bc8c:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b10      	cmp	r3, #16
 800bc98:	d01a      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2b14      	cmp	r3, #20
 800bc9e:	d017      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b1e      	cmp	r3, #30
 800bca4:	d014      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b28      	cmp	r3, #40	; 0x28
 800bcaa:	d011      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b32      	cmp	r3, #50	; 0x32
 800bcb0:	d00e      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b3c      	cmp	r3, #60	; 0x3c
 800bcb6:	d00b      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b46      	cmp	r3, #70	; 0x46
 800bcbc:	d008      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b50      	cmp	r3, #80	; 0x50
 800bcc2:	d005      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b5a      	cmp	r3, #90	; 0x5a
 800bcc8:	d002      	beq.n	800bcd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2b64      	cmp	r3, #100	; 0x64
 800bcce:	d118      	bne.n	800bd02 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	4b7b      	ldr	r3, [pc, #492]	; (800bec8 <setFrequency+0x250>)
 800bcdc:	f7f4 fca4 	bl	8000628 <__aeabi_dmul>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4610      	mov	r0, r2
 800bce6:	4619      	mov	r1, r3
 800bce8:	f7f4 ff76 	bl	8000bd8 <__aeabi_d2uiz>
 800bcec:	4603      	mov	r3, r0
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	4b76      	ldr	r3, [pc, #472]	; (800becc <setFrequency+0x254>)
 800bcf2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800bcf4:	4b75      	ldr	r3, [pc, #468]	; (800becc <setFrequency+0x254>)
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	1e5a      	subs	r2, r3, #1
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	62da      	str	r2, [r3, #44]	; 0x2c
 800bd00:	e0dd      	b.n	800bebe <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2ba0      	cmp	r3, #160	; 0xa0
 800bd06:	d022      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2bc8      	cmp	r3, #200	; 0xc8
 800bd0c:	d01f      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bd14:	d01b      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bd1c:	d017      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bd24:	d013      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800bd2c:	d00f      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800bd34:	d00b      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800bd3c:	d007      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800bd44:	d003      	beq.n	800bd4e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd4c:	d118      	bne.n	800bd80 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	4b5d      	ldr	r3, [pc, #372]	; (800bed0 <setFrequency+0x258>)
 800bd5a:	f7f4 fc65 	bl	8000628 <__aeabi_dmul>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4610      	mov	r0, r2
 800bd64:	4619      	mov	r1, r3
 800bd66:	f7f4 ff37 	bl	8000bd8 <__aeabi_d2uiz>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	4b57      	ldr	r3, [pc, #348]	; (800becc <setFrequency+0x254>)
 800bd70:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800bd72:	4b56      	ldr	r3, [pc, #344]	; (800becc <setFrequency+0x254>)
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	1e5a      	subs	r2, r3, #1
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bd7e:	e09e      	b.n	800bebe <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd86:	d029      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bd8e:	d025      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bd96:	4293      	cmp	r3, r2
 800bd98:	d020      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800bda0:	d01c      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d017      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f241 7270 	movw	r2, #6000	; 0x1770
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d012      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f641 3258 	movw	r2, #7000	; 0x1b58
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d00d      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800bdc6:	d009      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f242 3228 	movw	r2, #9000	; 0x2328
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d004      	beq.n	800bddc <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f242 7210 	movw	r2, #10000	; 0x2710
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d118      	bne.n	800be0e <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bde2:	f04f 0200 	mov.w	r2, #0
 800bde6:	4b3b      	ldr	r3, [pc, #236]	; (800bed4 <setFrequency+0x25c>)
 800bde8:	f7f4 fc1e 	bl	8000628 <__aeabi_dmul>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	f7f4 fef0 	bl	8000bd8 <__aeabi_d2uiz>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	4b33      	ldr	r3, [pc, #204]	; (800becc <setFrequency+0x254>)
 800bdfe:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <setFrequency+0x254>)
 800be02:	881b      	ldrh	r3, [r3, #0]
 800be04:	1e5a      	subs	r2, r3, #1
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	62da      	str	r2, [r3, #44]	; 0x2c
 800be0c:	e057      	b.n	800bebe <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800be14:	d028      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f644 6220 	movw	r2, #20000	; 0x4e20
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d023      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f247 5230 	movw	r2, #30000	; 0x7530
 800be26:	4293      	cmp	r3, r2
 800be28:	d01e      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f649 4240 	movw	r2, #40000	; 0x9c40
 800be30:	4293      	cmp	r3, r2
 800be32:	d019      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f24c 3250 	movw	r2, #50000	; 0xc350
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d014      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f64e 2260 	movw	r2, #60000	; 0xea60
 800be44:	4293      	cmp	r3, r2
 800be46:	d00f      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	4a23      	ldr	r2, [pc, #140]	; (800bed8 <setFrequency+0x260>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00b      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4a22      	ldr	r2, [pc, #136]	; (800bedc <setFrequency+0x264>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d007      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4a21      	ldr	r2, [pc, #132]	; (800bee0 <setFrequency+0x268>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d003      	beq.n	800be68 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4a20      	ldr	r2, [pc, #128]	; (800bee4 <setFrequency+0x26c>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d111      	bne.n	800be8c <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be6e:	4610      	mov	r0, r2
 800be70:	4619      	mov	r1, r3
 800be72:	f7f4 feb1 	bl	8000bd8 <__aeabi_d2uiz>
 800be76:	4603      	mov	r3, r0
 800be78:	b29a      	uxth	r2, r3
 800be7a:	4b14      	ldr	r3, [pc, #80]	; (800becc <setFrequency+0x254>)
 800be7c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <setFrequency+0x254>)
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	1e5a      	subs	r2, r3, #1
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	62da      	str	r2, [r3, #44]	; 0x2c
 800be8a:	e018      	b.n	800bebe <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800be92:	f04f 0200 	mov.w	r2, #0
 800be96:	4b14      	ldr	r3, [pc, #80]	; (800bee8 <setFrequency+0x270>)
 800be98:	f7f4 fcf0 	bl	800087c <__aeabi_ddiv>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4610      	mov	r0, r2
 800bea2:	4619      	mov	r1, r3
 800bea4:	f7f4 fe98 	bl	8000bd8 <__aeabi_d2uiz>
 800bea8:	4603      	mov	r3, r0
 800beaa:	b29a      	uxth	r2, r3
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <setFrequency+0x254>)
 800beae:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800beb0:	4b06      	ldr	r3, [pc, #24]	; (800becc <setFrequency+0x254>)
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800bebc:	bf00      	nop
 800bebe:	bf00      	nop
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	408f4000 	.word	0x408f4000
 800becc:	2000dc54 	.word	0x2000dc54
 800bed0:	40590000 	.word	0x40590000
 800bed4:	40240000 	.word	0x40240000
 800bed8:	00011170 	.word	0x00011170
 800bedc:	00013880 	.word	0x00013880
 800bee0:	00015f90 	.word	0x00015f90
 800bee4:	000186a0 	.word	0x000186a0
 800bee8:	40340000 	.word	0x40340000

0800beec <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800beec:	b590      	push	{r4, r7, lr}
 800beee:	b08b      	sub	sp, #44	; 0x2c
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7a1b      	ldrb	r3, [r3, #8]
 800bef8:	2b03      	cmp	r3, #3
 800befa:	f200 80c3 	bhi.w	800c084 <setDuttyCycle+0x198>
 800befe:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <setDuttyCycle+0x18>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf71 	.word	0x0800bf71
 800bf0c:	0800bfcd 	.word	0x0800bfcd
 800bf10:	0800c029 	.word	0x0800c029
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	ed93 7a06 	vldr	s14, [r3, #24]
 800bf1a:	4b5d      	ldr	r3, [pc, #372]	; (800c090 <setDuttyCycle+0x1a4>)
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf2a:	ee17 0a90 	vmov	r0, s15
 800bf2e:	f7f4 fb23 	bl	8000578 <__aeabi_f2d>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800bf3a:	f04f 0200 	mov.w	r2, #0
 800bf3e:	4b55      	ldr	r3, [pc, #340]	; (800c094 <setDuttyCycle+0x1a8>)
 800bf40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf44:	f7f4 fc9a 	bl	800087c <__aeabi_ddiv>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	4619      	mov	r1, r3
 800bf50:	f04f 0200 	mov.w	r2, #0
 800bf54:	4b50      	ldr	r3, [pc, #320]	; (800c098 <setDuttyCycle+0x1ac>)
 800bf56:	f7f4 f9af 	bl	80002b8 <__aeabi_dsub>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4619      	mov	r1, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681c      	ldr	r4, [r3, #0]
 800bf66:	f7f4 fe37 	bl	8000bd8 <__aeabi_d2uiz>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800bf6e:	e08a      	b.n	800c086 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	ed93 7a06 	vldr	s14, [r3, #24]
 800bf76:	4b46      	ldr	r3, [pc, #280]	; (800c090 <setDuttyCycle+0x1a4>)
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf86:	ee17 0a90 	vmov	r0, s15
 800bf8a:	f7f4 faf5 	bl	8000578 <__aeabi_f2d>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800bf96:	f04f 0200 	mov.w	r2, #0
 800bf9a:	4b3e      	ldr	r3, [pc, #248]	; (800c094 <setDuttyCycle+0x1a8>)
 800bf9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bfa0:	f7f4 fc6c 	bl	800087c <__aeabi_ddiv>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f04f 0200 	mov.w	r2, #0
 800bfb0:	4b39      	ldr	r3, [pc, #228]	; (800c098 <setDuttyCycle+0x1ac>)
 800bfb2:	f7f4 f981 	bl	80002b8 <__aeabi_dsub>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4610      	mov	r0, r2
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681c      	ldr	r4, [r3, #0]
 800bfc2:	f7f4 fe09 	bl	8000bd8 <__aeabi_d2uiz>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800bfca:	e05c      	b.n	800c086 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	ed93 7a06 	vldr	s14, [r3, #24]
 800bfd2:	4b2f      	ldr	r3, [pc, #188]	; (800c090 <setDuttyCycle+0x1a4>)
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	ee07 3a90 	vmov	s15, r3
 800bfda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe2:	ee17 0a90 	vmov	r0, s15
 800bfe6:	f7f4 fac7 	bl	8000578 <__aeabi_f2d>
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 800bff2:	f04f 0200 	mov.w	r2, #0
 800bff6:	4b27      	ldr	r3, [pc, #156]	; (800c094 <setDuttyCycle+0x1a8>)
 800bff8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bffc:	f7f4 fc3e 	bl	800087c <__aeabi_ddiv>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4610      	mov	r0, r2
 800c006:	4619      	mov	r1, r3
 800c008:	f04f 0200 	mov.w	r2, #0
 800c00c:	4b22      	ldr	r3, [pc, #136]	; (800c098 <setDuttyCycle+0x1ac>)
 800c00e:	f7f4 f953 	bl	80002b8 <__aeabi_dsub>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4610      	mov	r0, r2
 800c018:	4619      	mov	r1, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681c      	ldr	r4, [r3, #0]
 800c01e:	f7f4 fddb 	bl	8000bd8 <__aeabi_d2uiz>
 800c022:	4603      	mov	r3, r0
 800c024:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c026:	e02e      	b.n	800c086 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	ed93 7a06 	vldr	s14, [r3, #24]
 800c02e:	4b18      	ldr	r3, [pc, #96]	; (800c090 <setDuttyCycle+0x1a4>)
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c03e:	ee17 0a90 	vmov	r0, s15
 800c042:	f7f4 fa99 	bl	8000578 <__aeabi_f2d>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	4b10      	ldr	r3, [pc, #64]	; (800c094 <setDuttyCycle+0x1a8>)
 800c054:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c058:	f7f4 fc10 	bl	800087c <__aeabi_ddiv>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4610      	mov	r0, r2
 800c062:	4619      	mov	r1, r3
 800c064:	f04f 0200 	mov.w	r2, #0
 800c068:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <setDuttyCycle+0x1ac>)
 800c06a:	f7f4 f925 	bl	80002b8 <__aeabi_dsub>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4610      	mov	r0, r2
 800c074:	4619      	mov	r1, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681c      	ldr	r4, [r3, #0]
 800c07a:	f7f4 fdad 	bl	8000bd8 <__aeabi_d2uiz>
 800c07e:	4603      	mov	r3, r0
 800c080:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c082:	e000      	b.n	800c086 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 800c084:	bf00      	nop
	}

	}// fin del switch-case

}
 800c086:	bf00      	nop
 800c088:	372c      	adds	r7, #44	; 0x2c
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd90      	pop	{r4, r7, pc}
 800c08e:	bf00      	nop
 800c090:	2000dc54 	.word	0x2000dc54
 800c094:	40590000 	.word	0x40590000
 800c098:	3ff00000 	.word	0x3ff00000

0800c09c <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b08b      	sub	sp, #44	; 0x2c
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7a1b      	ldrb	r3, [r3, #8]
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	f200 80d3 	bhi.w	800c254 <setDuttyCycleAfOpt+0x1b8>
 800c0ae:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <setDuttyCycleAfOpt+0x18>)
 800c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b4:	0800c0c5 	.word	0x0800c0c5
 800c0b8:	0800c129 	.word	0x0800c129
 800c0bc:	0800c18d 	.word	0x0800c18d
 800c0c0:	0800c1f1 	.word	0x0800c1f1
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c0ca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c260 <setDuttyCycleAfOpt+0x1c4>
 800c0ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c0d2:	4b64      	ldr	r3, [pc, #400]	; (800c264 <setDuttyCycleAfOpt+0x1c8>)
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e2:	ee17 0a90 	vmov	r0, s15
 800c0e6:	f7f4 fa47 	bl	8000578 <__aeabi_f2d>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800c0f2:	f04f 0200 	mov.w	r2, #0
 800c0f6:	4b5c      	ldr	r3, [pc, #368]	; (800c268 <setDuttyCycleAfOpt+0x1cc>)
 800c0f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c0fc:	f7f4 fbbe 	bl	800087c <__aeabi_ddiv>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4610      	mov	r0, r2
 800c106:	4619      	mov	r1, r3
 800c108:	f04f 0200 	mov.w	r2, #0
 800c10c:	4b57      	ldr	r3, [pc, #348]	; (800c26c <setDuttyCycleAfOpt+0x1d0>)
 800c10e:	f7f4 f8d3 	bl	80002b8 <__aeabi_dsub>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4610      	mov	r0, r2
 800c118:	4619      	mov	r1, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681c      	ldr	r4, [r3, #0]
 800c11e:	f7f4 fd5b 	bl	8000bd8 <__aeabi_d2uiz>
 800c122:	4603      	mov	r3, r0
 800c124:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c126:	e096      	b.n	800c256 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c12e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c260 <setDuttyCycleAfOpt+0x1c4>
 800c132:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c136:	4b4b      	ldr	r3, [pc, #300]	; (800c264 <setDuttyCycleAfOpt+0x1c8>)
 800c138:	881b      	ldrh	r3, [r3, #0]
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c146:	ee17 0a90 	vmov	r0, s15
 800c14a:	f7f4 fa15 	bl	8000578 <__aeabi_f2d>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	4b43      	ldr	r3, [pc, #268]	; (800c268 <setDuttyCycleAfOpt+0x1cc>)
 800c15c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c160:	f7f4 fb8c 	bl	800087c <__aeabi_ddiv>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4610      	mov	r0, r2
 800c16a:	4619      	mov	r1, r3
 800c16c:	f04f 0200 	mov.w	r2, #0
 800c170:	4b3e      	ldr	r3, [pc, #248]	; (800c26c <setDuttyCycleAfOpt+0x1d0>)
 800c172:	f7f4 f8a1 	bl	80002b8 <__aeabi_dsub>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4610      	mov	r0, r2
 800c17c:	4619      	mov	r1, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681c      	ldr	r4, [r3, #0]
 800c182:	f7f4 fd29 	bl	8000bd8 <__aeabi_d2uiz>
 800c186:	4603      	mov	r3, r0
 800c188:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c18a:	e064      	b.n	800c256 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c192:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c260 <setDuttyCycleAfOpt+0x1c4>
 800c196:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c19a:	4b32      	ldr	r3, [pc, #200]	; (800c264 <setDuttyCycleAfOpt+0x1c8>)
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1aa:	ee17 0a90 	vmov	r0, s15
 800c1ae:	f7f4 f9e3 	bl	8000578 <__aeabi_f2d>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800c1ba:	f04f 0200 	mov.w	r2, #0
 800c1be:	4b2a      	ldr	r3, [pc, #168]	; (800c268 <setDuttyCycleAfOpt+0x1cc>)
 800c1c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c1c4:	f7f4 fb5a 	bl	800087c <__aeabi_ddiv>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	f04f 0200 	mov.w	r2, #0
 800c1d4:	4b25      	ldr	r3, [pc, #148]	; (800c26c <setDuttyCycleAfOpt+0x1d0>)
 800c1d6:	f7f4 f86f 	bl	80002b8 <__aeabi_dsub>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681c      	ldr	r4, [r3, #0]
 800c1e6:	f7f4 fcf7 	bl	8000bd8 <__aeabi_d2uiz>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c1ee:	e032      	b.n	800c256 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c1f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c260 <setDuttyCycleAfOpt+0x1c4>
 800c1fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1fe:	4b19      	ldr	r3, [pc, #100]	; (800c264 <setDuttyCycleAfOpt+0x1c8>)
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c20e:	ee17 0a90 	vmov	r0, s15
 800c212:	f7f4 f9b1 	bl	8000578 <__aeabi_f2d>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800c21e:	f04f 0200 	mov.w	r2, #0
 800c222:	4b11      	ldr	r3, [pc, #68]	; (800c268 <setDuttyCycleAfOpt+0x1cc>)
 800c224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c228:	f7f4 fb28 	bl	800087c <__aeabi_ddiv>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4610      	mov	r0, r2
 800c232:	4619      	mov	r1, r3
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <setDuttyCycleAfOpt+0x1d0>)
 800c23a:	f7f4 f83d 	bl	80002b8 <__aeabi_dsub>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4610      	mov	r0, r2
 800c244:	4619      	mov	r1, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681c      	ldr	r4, [r3, #0]
 800c24a:	f7f4 fcc5 	bl	8000bd8 <__aeabi_d2uiz>
 800c24e:	4603      	mov	r3, r0
 800c250:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c252:	e000      	b.n	800c256 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 800c254:	bf00      	nop
	}

	}// fin del switch-case


}
 800c256:	bf00      	nop
 800c258:	372c      	adds	r7, #44	; 0x2c
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd90      	pop	{r4, r7, pc}
 800c25e:	bf00      	nop
 800c260:	42c80000 	.word	0x42c80000
 800c264:	2000dc54 	.word	0x2000dc54
 800c268:	40590000 	.word	0x40590000
 800c26c:	3ff00000 	.word	0x3ff00000

0800c270 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7a1b      	ldrb	r3, [r3, #8]
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	d82f      	bhi.n	800c2e0 <disableOutput+0x70>
 800c280:	a201      	add	r2, pc, #4	; (adr r2, 800c288 <disableOutput+0x18>)
 800c282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c286:	bf00      	nop
 800c288:	0800c299 	.word	0x0800c299
 800c28c:	0800c2ab 	.word	0x0800c2ab
 800c290:	0800c2bd 	.word	0x0800c2bd
 800c294:	0800c2cf 	.word	0x0800c2cf
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6a1a      	ldr	r2, [r3, #32]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 0201 	bic.w	r2, r2, #1
 800c2a6:	621a      	str	r2, [r3, #32]

			break;
 800c2a8:	e01b      	b.n	800c2e2 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6a1a      	ldr	r2, [r3, #32]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0210 	bic.w	r2, r2, #16
 800c2b8:	621a      	str	r2, [r3, #32]

			break;
 800c2ba:	e012      	b.n	800c2e2 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	6a1a      	ldr	r2, [r3, #32]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2ca:	621a      	str	r2, [r3, #32]

			break;
 800c2cc:	e009      	b.n	800c2e2 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6a1a      	ldr	r2, [r3, #32]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2dc:	621a      	str	r2, [r3, #32]

			break;
 800c2de:	e000      	b.n	800c2e2 <disableOutput+0x72>
		}

		default: {
			break;
 800c2e0:	bf00      	nop
		}
		}

	return RESET;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	7a1b      	ldrb	r3, [r3, #8]
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d82f      	bhi.n	800c360 <PWMx_Toggle+0x70>
 800c300:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <PWMx_Toggle+0x18>)
 800c302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c306:	bf00      	nop
 800c308:	0800c319 	.word	0x0800c319
 800c30c:	0800c32b 	.word	0x0800c32b
 800c310:	0800c33d 	.word	0x0800c33d
 800c314:	0800c34f 	.word	0x0800c34f
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6a1a      	ldr	r2, [r3, #32]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f082 0202 	eor.w	r2, r2, #2
 800c326:	621a      	str	r2, [r3, #32]

				break;
 800c328:	e01b      	b.n	800c362 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6a1a      	ldr	r2, [r3, #32]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f082 0220 	eor.w	r2, r2, #32
 800c338:	621a      	str	r2, [r3, #32]

				break;
 800c33a:	e012      	b.n	800c362 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6a1a      	ldr	r2, [r3, #32]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800c34a:	621a      	str	r2, [r3, #32]

				break;
 800c34c:	e009      	b.n	800c362 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6a1a      	ldr	r2, [r3, #32]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c35c:	621a      	str	r2, [r3, #32]

				break;
 800c35e:	e000      	b.n	800c362 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800c360:	bf00      	nop
			}
			}


}
 800c362:	bf00      	nop
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop

0800c370 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 800c37a:	4b92      	ldr	r3, [pc, #584]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a91      	ldr	r2, [pc, #580]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c384:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c386:	4b8f      	ldr	r3, [pc, #572]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38c:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800c38e:	4b8e      	ldr	r3, [pc, #568]	; (800c5c8 <RCC_enableMaxFrequencies+0x258>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a8d      	ldr	r2, [pc, #564]	; (800c5c8 <RCC_enableMaxFrequencies+0x258>)
 800c394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c398:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800c39a:	4b8a      	ldr	r3, [pc, #552]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	4a89      	ldr	r2, [pc, #548]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c3a4:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800c3a6:	79fb      	ldrb	r3, [r7, #7]
 800c3a8:	2b08      	cmp	r3, #8
 800c3aa:	f200 82fc 	bhi.w	800c9a6 <RCC_enableMaxFrequencies+0x636>
 800c3ae:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <RCC_enableMaxFrequencies+0x44>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c3d9 	.word	0x0800c3d9
 800c3b8:	0800c47b 	.word	0x0800c47b
 800c3bc:	0800c51d 	.word	0x0800c51d
 800c3c0:	0800c5d1 	.word	0x0800c5d1
 800c3c4:	0800c673 	.word	0x0800c673
 800c3c8:	0800c715 	.word	0x0800c715
 800c3cc:	0800c7c1 	.word	0x0800c7c1
 800c3d0:	0800c863 	.word	0x0800c863
 800c3d4:	0800c905 	.word	0x0800c905
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c3d8:	4b7a      	ldr	r3, [pc, #488]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	4a79      	ldr	r2, [pc, #484]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c3e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c3e4:	4b77      	ldr	r3, [pc, #476]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4a76      	ldr	r2, [pc, #472]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3ea:	f043 0310 	orr.w	r3, r3, #16
 800c3ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c3f0:	4b74      	ldr	r3, [pc, #464]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	4a73      	ldr	r2, [pc, #460]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c3f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c3fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3fe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c400:	4b70      	ldr	r3, [pc, #448]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	4a6f      	ldr	r2, [pc, #444]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c406:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c40a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c40c:	4b6d      	ldr	r3, [pc, #436]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	4a6c      	ldr	r2, [pc, #432]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c412:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c416:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c418:	4b6a      	ldr	r3, [pc, #424]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	4a69      	ldr	r2, [pc, #420]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c41e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c422:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c424:	4b67      	ldr	r3, [pc, #412]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	4a66      	ldr	r2, [pc, #408]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c42a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c42e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c430:	4b64      	ldr	r3, [pc, #400]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	4a63      	ldr	r2, [pc, #396]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c43a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c43c:	4b61      	ldr	r3, [pc, #388]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	4a60      	ldr	r2, [pc, #384]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c446:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c448:	4b5e      	ldr	r3, [pc, #376]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a5d      	ldr	r2, [pc, #372]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c44e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c452:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c454:	e000      	b.n	800c458 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 800c456:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c458:	4b5a      	ldr	r3, [pc, #360]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c460:	2b00      	cmp	r3, #0
 800c462:	d0f8      	beq.n	800c456 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c464:	4b59      	ldr	r3, [pc, #356]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a58      	ldr	r2, [pc, #352]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c46a:	f023 030f 	bic.w	r3, r3, #15
 800c46e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c470:	4b56      	ldr	r3, [pc, #344]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c472:	4a56      	ldr	r2, [pc, #344]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6013      	str	r3, [r2, #0]

			break;
 800c478:	e296      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c47a:	4b52      	ldr	r3, [pc, #328]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	4a51      	ldr	r2, [pc, #324]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c480:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c484:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c486:	4b4f      	ldr	r3, [pc, #316]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	4a4e      	ldr	r2, [pc, #312]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c48c:	f043 0310 	orr.w	r3, r3, #16
 800c490:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c492:	4b4c      	ldr	r3, [pc, #304]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	4a4b      	ldr	r2, [pc, #300]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c498:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4a0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c4a2:	4b48      	ldr	r3, [pc, #288]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	4a47      	ldr	r2, [pc, #284]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4a8:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c4ac:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c4ae:	4b45      	ldr	r3, [pc, #276]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	4a44      	ldr	r2, [pc, #272]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c4b8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800c4ba:	4b42      	ldr	r3, [pc, #264]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	4a41      	ldr	r2, [pc, #260]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4c4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c4c6:	4b3f      	ldr	r3, [pc, #252]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	4a3e      	ldr	r2, [pc, #248]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4d0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c4d2:	4b3c      	ldr	r3, [pc, #240]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	4a3b      	ldr	r2, [pc, #236]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4dc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c4de:	4b39      	ldr	r3, [pc, #228]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	4a38      	ldr	r2, [pc, #224]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4e8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c4ea:	4b36      	ldr	r3, [pc, #216]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a35      	ldr	r2, [pc, #212]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c4f4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c4f6:	e000      	b.n	800c4fa <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800c4f8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c4fa:	4b32      	ldr	r3, [pc, #200]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0f8      	beq.n	800c4f8 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c506:	4b31      	ldr	r3, [pc, #196]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a30      	ldr	r2, [pc, #192]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c50c:	f023 030f 	bic.w	r3, r3, #15
 800c510:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c512:	4b2e      	ldr	r3, [pc, #184]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c514:	4a2d      	ldr	r2, [pc, #180]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6013      	str	r3, [r2, #0]

			break;
 800c51a:	e245      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c51c:	4b29      	ldr	r3, [pc, #164]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	4a28      	ldr	r2, [pc, #160]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c526:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c528:	4b26      	ldr	r3, [pc, #152]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	4a25      	ldr	r2, [pc, #148]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c52e:	f043 0310 	orr.w	r3, r3, #16
 800c532:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c534:	4b23      	ldr	r3, [pc, #140]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	4a22      	ldr	r2, [pc, #136]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c53a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c542:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 800c544:	4b1f      	ldr	r3, [pc, #124]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4a1e      	ldr	r2, [pc, #120]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c54a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800c54e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c550:	4b1c      	ldr	r3, [pc, #112]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	4a1b      	ldr	r2, [pc, #108]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c556:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c55a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c55c:	4b19      	ldr	r3, [pc, #100]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	4a18      	ldr	r2, [pc, #96]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c566:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c568:	4b16      	ldr	r3, [pc, #88]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	4a15      	ldr	r2, [pc, #84]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c56e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c572:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c574:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	4a12      	ldr	r2, [pc, #72]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c57a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c57e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c580:	4b10      	ldr	r3, [pc, #64]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	4a0f      	ldr	r2, [pc, #60]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c58a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c58c:	4b0d      	ldr	r3, [pc, #52]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0c      	ldr	r2, [pc, #48]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c596:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c598:	e000      	b.n	800c59c <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800c59a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <RCC_enableMaxFrequencies+0x254>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0f8      	beq.n	800c59a <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c5a8:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a07      	ldr	r2, [pc, #28]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c5ae:	f023 030f 	bic.w	r3, r3, #15
 800c5b2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c5b4:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a04      	ldr	r2, [pc, #16]	; (800c5cc <RCC_enableMaxFrequencies+0x25c>)
 800c5ba:	f043 0301 	orr.w	r3, r3, #1
 800c5be:	6013      	str	r3, [r2, #0]


			break;
 800c5c0:	e1f2      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
 800c5c2:	bf00      	nop
 800c5c4:	40023800 	.word	0x40023800
 800c5c8:	40007000 	.word	0x40007000
 800c5cc:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c5d0:	4b79      	ldr	r3, [pc, #484]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	4a78      	ldr	r2, [pc, #480]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c5dc:	4b76      	ldr	r3, [pc, #472]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4a75      	ldr	r2, [pc, #468]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5e2:	f043 0310 	orr.w	r3, r3, #16
 800c5e6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c5e8:	4b73      	ldr	r3, [pc, #460]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	4a72      	ldr	r2, [pc, #456]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c5f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5f6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800c5f8:	4b6f      	ldr	r3, [pc, #444]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	4a6e      	ldr	r2, [pc, #440]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c5fe:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800c602:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c604:	4b6c      	ldr	r3, [pc, #432]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	4a6b      	ldr	r2, [pc, #428]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c60a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c60e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c610:	4b69      	ldr	r3, [pc, #420]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c612:	4a69      	ldr	r2, [pc, #420]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c618:	4b67      	ldr	r3, [pc, #412]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	4a66      	ldr	r2, [pc, #408]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c61e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c622:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c624:	4b64      	ldr	r3, [pc, #400]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	4a63      	ldr	r2, [pc, #396]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c62a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c62e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c630:	4b61      	ldr	r3, [pc, #388]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	4a60      	ldr	r2, [pc, #384]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c63a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c63c:	4b5e      	ldr	r3, [pc, #376]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a5d      	ldr	r2, [pc, #372]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c646:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c648:	e000      	b.n	800c64c <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800c64a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c64c:	4b5a      	ldr	r3, [pc, #360]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d0f8      	beq.n	800c64a <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c658:	4b58      	ldr	r3, [pc, #352]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a57      	ldr	r2, [pc, #348]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c65e:	f023 030f 	bic.w	r3, r3, #15
 800c662:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c664:	4b55      	ldr	r3, [pc, #340]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a54      	ldr	r2, [pc, #336]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c66a:	f043 0301 	orr.w	r3, r3, #1
 800c66e:	6013      	str	r3, [r2, #0]

			break;
 800c670:	e19a      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c672:	4b51      	ldr	r3, [pc, #324]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	4a50      	ldr	r2, [pc, #320]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c678:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c67c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c67e:	4b4e      	ldr	r3, [pc, #312]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	4a4d      	ldr	r2, [pc, #308]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c684:	f043 0310 	orr.w	r3, r3, #16
 800c688:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c68a:	4b4b      	ldr	r3, [pc, #300]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	4a4a      	ldr	r2, [pc, #296]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c690:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c698:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c69a:	4b47      	ldr	r3, [pc, #284]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	4a46      	ldr	r2, [pc, #280]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6a0:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c6a4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c6a6:	4b44      	ldr	r3, [pc, #272]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	4a43      	ldr	r2, [pc, #268]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c6b0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c6b2:	4b41      	ldr	r3, [pc, #260]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6b4:	4a40      	ldr	r2, [pc, #256]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c6ba:	4b3f      	ldr	r3, [pc, #252]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	4a3e      	ldr	r2, [pc, #248]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6c4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c6c6:	4b3c      	ldr	r3, [pc, #240]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	4a3b      	ldr	r2, [pc, #236]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6d0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c6d2:	4b39      	ldr	r3, [pc, #228]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	4a38      	ldr	r2, [pc, #224]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c6dc:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c6de:	4b36      	ldr	r3, [pc, #216]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a35      	ldr	r2, [pc, #212]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6e8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c6ea:	e000      	b.n	800c6ee <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800c6ec:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c6ee:	4b32      	ldr	r3, [pc, #200]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0f8      	beq.n	800c6ec <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c6fa:	4b30      	ldr	r3, [pc, #192]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a2f      	ldr	r2, [pc, #188]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c700:	f023 030f 	bic.w	r3, r3, #15
 800c704:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c706:	4b2d      	ldr	r3, [pc, #180]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a2c      	ldr	r2, [pc, #176]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c70c:	f043 0301 	orr.w	r3, r3, #1
 800c710:	6013      	str	r3, [r2, #0]

			break;
 800c712:	e149      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c714:	4b28      	ldr	r3, [pc, #160]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4a27      	ldr	r2, [pc, #156]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c71a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c71e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c720:	4b25      	ldr	r3, [pc, #148]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	4a24      	ldr	r2, [pc, #144]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c726:	f043 0310 	orr.w	r3, r3, #16
 800c72a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c72c:	4b22      	ldr	r3, [pc, #136]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	4a21      	ldr	r2, [pc, #132]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c732:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c73a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 800c73c:	4b1e      	ldr	r3, [pc, #120]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	4a1d      	ldr	r2, [pc, #116]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c742:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800c746:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c748:	4b1b      	ldr	r3, [pc, #108]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4a1a      	ldr	r2, [pc, #104]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c74e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c752:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c754:	4b18      	ldr	r3, [pc, #96]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c756:	4a18      	ldr	r2, [pc, #96]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c75c:	4b16      	ldr	r3, [pc, #88]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	4a15      	ldr	r2, [pc, #84]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c766:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c768:	4b13      	ldr	r3, [pc, #76]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	4a12      	ldr	r2, [pc, #72]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c76e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c772:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c774:	4b10      	ldr	r3, [pc, #64]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	4a0f      	ldr	r2, [pc, #60]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c77a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c77e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c780:	4b0d      	ldr	r3, [pc, #52]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a0c      	ldr	r2, [pc, #48]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c78a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c78c:	e000      	b.n	800c790 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800c78e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c790:	4b09      	ldr	r3, [pc, #36]	; (800c7b8 <RCC_enableMaxFrequencies+0x448>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0f8      	beq.n	800c78e <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c79c:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a06      	ldr	r2, [pc, #24]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c7a2:	f023 030f 	bic.w	r3, r3, #15
 800c7a6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800c7a8:	4b04      	ldr	r3, [pc, #16]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a03      	ldr	r2, [pc, #12]	; (800c7bc <RCC_enableMaxFrequencies+0x44c>)
 800c7ae:	f043 0302 	orr.w	r3, r3, #2
 800c7b2:	6013      	str	r3, [r2, #0]

			break;
 800c7b4:	e0f8      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
 800c7b6:	bf00      	nop
 800c7b8:	40023800 	.word	0x40023800
 800c7bc:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c7c0:	4b84      	ldr	r3, [pc, #528]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	4a83      	ldr	r2, [pc, #524]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7ca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c7cc:	4b81      	ldr	r3, [pc, #516]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a80      	ldr	r2, [pc, #512]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7d2:	f043 0310 	orr.w	r3, r3, #16
 800c7d6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c7d8:	4b7e      	ldr	r3, [pc, #504]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	4a7d      	ldr	r2, [pc, #500]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 800c7e8:	4b7a      	ldr	r3, [pc, #488]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	4a79      	ldr	r2, [pc, #484]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7ee:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800c7f2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c7f4:	4b77      	ldr	r3, [pc, #476]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	4a76      	ldr	r2, [pc, #472]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c7fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c7fe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c800:	4b74      	ldr	r3, [pc, #464]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c802:	4a74      	ldr	r2, [pc, #464]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c808:	4b72      	ldr	r3, [pc, #456]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	4a71      	ldr	r2, [pc, #452]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c812:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c814:	4b6f      	ldr	r3, [pc, #444]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	4a6e      	ldr	r2, [pc, #440]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c81a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c81e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c820:	4b6c      	ldr	r3, [pc, #432]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	4a6b      	ldr	r2, [pc, #428]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c826:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c82a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c82c:	4b69      	ldr	r3, [pc, #420]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a68      	ldr	r2, [pc, #416]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c836:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c838:	e000      	b.n	800c83c <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 800c83a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c83c:	4b65      	ldr	r3, [pc, #404]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d0f8      	beq.n	800c83a <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c848:	4b63      	ldr	r3, [pc, #396]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a62      	ldr	r2, [pc, #392]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c84e:	f023 030f 	bic.w	r3, r3, #15
 800c852:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800c854:	4b60      	ldr	r3, [pc, #384]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a5f      	ldr	r2, [pc, #380]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c85a:	f043 0302 	orr.w	r3, r3, #2
 800c85e:	6013      	str	r3, [r2, #0]

			break;
 800c860:	e0a2      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c862:	4b5c      	ldr	r3, [pc, #368]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	4a5b      	ldr	r2, [pc, #364]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c86c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c86e:	4b59      	ldr	r3, [pc, #356]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	4a58      	ldr	r2, [pc, #352]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c874:	f043 0310 	orr.w	r3, r3, #16
 800c878:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c87a:	4b56      	ldr	r3, [pc, #344]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	4a55      	ldr	r2, [pc, #340]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c880:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c888:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800c88a:	4b52      	ldr	r3, [pc, #328]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	4a51      	ldr	r2, [pc, #324]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c890:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800c894:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c896:	4b4f      	ldr	r3, [pc, #316]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	4a4e      	ldr	r2, [pc, #312]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c89c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c8a0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c8a2:	4b4c      	ldr	r3, [pc, #304]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8a4:	4a4b      	ldr	r2, [pc, #300]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c8aa:	4b4a      	ldr	r3, [pc, #296]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	4a49      	ldr	r2, [pc, #292]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8b4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c8b6:	4b47      	ldr	r3, [pc, #284]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	4a46      	ldr	r2, [pc, #280]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8c0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c8c2:	4b44      	ldr	r3, [pc, #272]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	4a43      	ldr	r2, [pc, #268]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c8cc:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c8ce:	4b41      	ldr	r3, [pc, #260]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a40      	ldr	r2, [pc, #256]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8d8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c8da:	e000      	b.n	800c8de <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 800c8dc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c8de:	4b3d      	ldr	r3, [pc, #244]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d0f8      	beq.n	800c8dc <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c8ea:	4b3b      	ldr	r3, [pc, #236]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a3a      	ldr	r2, [pc, #232]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c8f0:	f023 030f 	bic.w	r3, r3, #15
 800c8f4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800c8f6:	4b38      	ldr	r3, [pc, #224]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a37      	ldr	r2, [pc, #220]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c8fc:	f043 0302 	orr.w	r3, r3, #2
 800c900:	6013      	str	r3, [r2, #0]

			break;
 800c902:	e051      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c904:	4b33      	ldr	r3, [pc, #204]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4a32      	ldr	r2, [pc, #200]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c90a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c90e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800c910:	4b30      	ldr	r3, [pc, #192]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	4a2f      	ldr	r2, [pc, #188]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c916:	f043 0308 	orr.w	r3, r3, #8
 800c91a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c91c:	4b2d      	ldr	r3, [pc, #180]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	4a2c      	ldr	r2, [pc, #176]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c92a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800c92c:	4b29      	ldr	r3, [pc, #164]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	4a28      	ldr	r2, [pc, #160]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c932:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800c936:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c938:	4b26      	ldr	r3, [pc, #152]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	4a25      	ldr	r2, [pc, #148]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c93e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c942:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c944:	4b23      	ldr	r3, [pc, #140]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c946:	4a23      	ldr	r2, [pc, #140]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c94c:	4b21      	ldr	r3, [pc, #132]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	4a20      	ldr	r2, [pc, #128]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c956:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c958:	4b1e      	ldr	r3, [pc, #120]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	4a1d      	ldr	r2, [pc, #116]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c95e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c962:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c964:	4b1b      	ldr	r3, [pc, #108]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	4a1a      	ldr	r2, [pc, #104]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c96a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c96e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c970:	4b18      	ldr	r3, [pc, #96]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c97a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c97c:	e000      	b.n	800c980 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800c97e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c980:	4b14      	ldr	r3, [pc, #80]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0f8      	beq.n	800c97e <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a11      	ldr	r2, [pc, #68]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c992:	f023 030f 	bic.w	r3, r3, #15
 800c996:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800c998:	4b0f      	ldr	r3, [pc, #60]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a0e      	ldr	r2, [pc, #56]	; (800c9d8 <RCC_enableMaxFrequencies+0x668>)
 800c99e:	f043 0303 	orr.w	r3, r3, #3
 800c9a2:	6013      	str	r3, [r2, #0]

			break;
 800c9a4:	e000      	b.n	800c9a8 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800c9a6:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800c9a8:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	4a09      	ldr	r2, [pc, #36]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c9ae:	f043 0302 	orr.w	r3, r3, #2
 800c9b2:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800c9b4:	e000      	b.n	800c9b8 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800c9b6:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800c9b8:	4b06      	ldr	r3, [pc, #24]	; (800c9d4 <RCC_enableMaxFrequencies+0x664>)
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	f003 0308 	and.w	r3, r3, #8
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0f8      	beq.n	800c9b6 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	40023800 	.word	0x40023800
 800c9d8:	40023c00 	.word	0x40023c00

0800c9dc <__NVIC_EnableIRQ>:
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c9e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	db0b      	blt.n	800ca06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	f003 021f 	and.w	r2, r3, #31
 800c9f4:	4907      	ldr	r1, [pc, #28]	; (800ca14 <__NVIC_EnableIRQ+0x38>)
 800c9f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9fa:	095b      	lsrs	r3, r3, #5
 800c9fc:	2001      	movs	r0, #1
 800c9fe:	fa00 f202 	lsl.w	r2, r0, r2
 800ca02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ca06:	bf00      	nop
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	e000e100 	.word	0xe000e100

0800ca18 <__NVIC_SetPriority>:
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	6039      	str	r1, [r7, #0]
 800ca22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	db0a      	blt.n	800ca42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	b2da      	uxtb	r2, r3
 800ca30:	490c      	ldr	r1, [pc, #48]	; (800ca64 <__NVIC_SetPriority+0x4c>)
 800ca32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca36:	0112      	lsls	r2, r2, #4
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	440b      	add	r3, r1
 800ca3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ca40:	e00a      	b.n	800ca58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	4908      	ldr	r1, [pc, #32]	; (800ca68 <__NVIC_SetPriority+0x50>)
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	f003 030f 	and.w	r3, r3, #15
 800ca4e:	3b04      	subs	r3, #4
 800ca50:	0112      	lsls	r2, r2, #4
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	440b      	add	r3, r1
 800ca56:	761a      	strb	r2, [r3, #24]
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	e000e100 	.word	0xe000e100
 800ca68:	e000ed00 	.word	0xe000ed00

0800ca6c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca74:	b672      	cpsid	i
}
 800ca76:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a91      	ldr	r2, [pc, #580]	; (800ccc4 <USART_Config+0x258>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d106      	bne.n	800ca90 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800ca82:	4b91      	ldr	r3, [pc, #580]	; (800ccc8 <USART_Config+0x25c>)
 800ca84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca86:	4a90      	ldr	r2, [pc, #576]	; (800ccc8 <USART_Config+0x25c>)
 800ca88:	f043 0310 	orr.w	r3, r3, #16
 800ca8c:	6453      	str	r3, [r2, #68]	; 0x44
 800ca8e:	e018      	b.n	800cac2 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a8d      	ldr	r2, [pc, #564]	; (800cccc <USART_Config+0x260>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d106      	bne.n	800caa8 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800ca9a:	4b8b      	ldr	r3, [pc, #556]	; (800ccc8 <USART_Config+0x25c>)
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9e:	4a8a      	ldr	r2, [pc, #552]	; (800ccc8 <USART_Config+0x25c>)
 800caa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caa4:	6413      	str	r3, [r2, #64]	; 0x40
 800caa6:	e00c      	b.n	800cac2 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a88      	ldr	r2, [pc, #544]	; (800ccd0 <USART_Config+0x264>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d106      	bne.n	800cac0 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800cab2:	4b85      	ldr	r3, [pc, #532]	; (800ccc8 <USART_Config+0x25c>)
 800cab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab6:	4a84      	ldr	r2, [pc, #528]	; (800ccc8 <USART_Config+0x25c>)
 800cab8:	f043 0320 	orr.w	r3, r3, #32
 800cabc:	6453      	str	r3, [r2, #68]	; 0x44
 800cabe:	e000      	b.n	800cac2 <USART_Config+0x56>
	}
	else{
		__NOP();
 800cac0:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2200      	movs	r2, #0
 800cad0:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7a5b      	ldrb	r3, [r3, #9]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d025      	beq.n	800cb26 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7a5b      	ldrb	r3, [r3, #9]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d110      	bne.n	800cb04 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68da      	ldr	r2, [r3, #12]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800caf0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68da      	ldr	r2, [r3, #12]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb00:	60da      	str	r2, [r3, #12]
 800cb02:	e018      	b.n	800cb36 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68da      	ldr	r2, [r3, #12]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb12:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68da      	ldr	r2, [r3, #12]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb22:	60da      	str	r2, [r3, #12]
 800cb24:	e007      	b.n	800cb36 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cb34:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	7a1b      	ldrb	r3, [r3, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d108      	bne.n	800cb50 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68da      	ldr	r2, [r3, #12]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb4c:	60da      	str	r2, [r3, #12]
 800cb4e:	e007      	b.n	800cb60 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68da      	ldr	r2, [r3, #12]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb5e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7a9b      	ldrb	r3, [r3, #10]
 800cb64:	2b03      	cmp	r3, #3
 800cb66:	d82f      	bhi.n	800cbc8 <USART_Config+0x15c>
 800cb68:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <USART_Config+0x104>)
 800cb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6e:	bf00      	nop
 800cb70:	0800cb81 	.word	0x0800cb81
 800cb74:	0800cb93 	.word	0x0800cb93
 800cb78:	0800cba5 	.word	0x0800cba5
 800cb7c:	0800cbb7 	.word	0x0800cbb7
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	691a      	ldr	r2, [r3, #16]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800cb8e:	611a      	str	r2, [r3, #16]
			break;
 800cb90:	e023      	b.n	800cbda <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	691a      	ldr	r2, [r3, #16]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cba0:	611a      	str	r2, [r3, #16]
			break;
 800cba2:	e01a      	b.n	800cbda <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	691a      	ldr	r2, [r3, #16]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbb2:	611a      	str	r2, [r3, #16]
			break;
 800cbb4:	e011      	b.n	800cbda <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	691a      	ldr	r2, [r3, #16]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800cbc4:	611a      	str	r2, [r3, #16]
			break;
 800cbc6:	e008      	b.n	800cbda <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	691a      	ldr	r2, [r3, #16]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800cbd6:	611a      	str	r2, [r3, #16]
			break;
 800cbd8:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	68da      	ldr	r2, [r3, #12]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681c      	ldr	r4, [r3, #0]
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f8d7 	bl	800cd98 <brrCalculus>
 800cbea:	4603      	mov	r3, r0
 800cbec:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	799b      	ldrb	r3, [r3, #6]
 800cbf2:	2b03      	cmp	r3, #3
 800cbf4:	d82e      	bhi.n	800cc54 <USART_Config+0x1e8>
 800cbf6:	a201      	add	r2, pc, #4	; (adr r2, 800cbfc <USART_Config+0x190>)
 800cbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbfc:	0800cc0d 	.word	0x0800cc0d
 800cc00:	0800cc1f 	.word	0x0800cc1f
 800cc04:	0800cc31 	.word	0x0800cc31
 800cc08:	0800cc43 	.word	0x0800cc43
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68da      	ldr	r2, [r3, #12]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f042 0208 	orr.w	r2, r2, #8
 800cc1a:	60da      	str	r2, [r3, #12]
			break;
 800cc1c:	e023      	b.n	800cc66 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f042 0204 	orr.w	r2, r2, #4
 800cc2c:	60da      	str	r2, [r3, #12]
			break;
 800cc2e:	e01a      	b.n	800cc66 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 020c 	orr.w	r2, r2, #12
 800cc3e:	60da      	str	r2, [r3, #12]
			break;
 800cc40:	e011      	b.n	800cc66 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f022 020c 	bic.w	r2, r2, #12
 800cc50:	60da      	str	r2, [r3, #12]
			break;
 800cc52:	e008      	b.n	800cc66 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f022 020c 	bic.w	r2, r2, #12
 800cc62:	60da      	str	r2, [r3, #12]
			break;
 800cc64:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	799b      	ldrb	r3, [r3, #6]
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d008      	beq.n	800cc80 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68da      	ldr	r2, [r3, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc7c:	60da      	str	r2, [r3, #12]
 800cc7e:	e007      	b.n	800cc90 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68da      	ldr	r2, [r3, #12]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc8e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	795b      	ldrb	r3, [r3, #5]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d139      	bne.n	800cd0c <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68da      	ldr	r2, [r3, #12]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f042 0220 	orr.w	r2, r2, #32
 800cca6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a05      	ldr	r2, [pc, #20]	; (800ccc4 <USART_Config+0x258>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d110      	bne.n	800ccd4 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800ccb2:	2025      	movs	r0, #37	; 0x25
 800ccb4:	f7ff fe92 	bl	800c9dc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 800ccb8:	2101      	movs	r1, #1
 800ccba:	2025      	movs	r0, #37	; 0x25
 800ccbc:	f7ff feac 	bl	800ca18 <__NVIC_SetPriority>
 800ccc0:	e02c      	b.n	800cd1c <USART_Config+0x2b0>
 800ccc2:	bf00      	nop
 800ccc4:	40011000 	.word	0x40011000
 800ccc8:	40023800 	.word	0x40023800
 800cccc:	40004400 	.word	0x40004400
 800ccd0:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a2c      	ldr	r2, [pc, #176]	; (800cd8c <USART_Config+0x320>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d107      	bne.n	800ccee <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800ccde:	2026      	movs	r0, #38	; 0x26
 800cce0:	f7ff fe7c 	bl	800c9dc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 800cce4:	2101      	movs	r1, #1
 800cce6:	2026      	movs	r0, #38	; 0x26
 800cce8:	f7ff fe96 	bl	800ca18 <__NVIC_SetPriority>
 800ccec:	e016      	b.n	800cd1c <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a27      	ldr	r2, [pc, #156]	; (800cd90 <USART_Config+0x324>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d107      	bne.n	800cd08 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800ccf8:	2047      	movs	r0, #71	; 0x47
 800ccfa:	f7ff fe6f 	bl	800c9dc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800ccfe:	2101      	movs	r1, #1
 800cd00:	2047      	movs	r0, #71	; 0x47
 800cd02:	f7ff fe89 	bl	800ca18 <__NVIC_SetPriority>
 800cd06:	e009      	b.n	800cd1c <USART_Config+0x2b0>
		}
		else{
				__NOP();
 800cd08:	bf00      	nop
 800cd0a:	e007      	b.n	800cd1c <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	68da      	ldr	r2, [r3, #12]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f022 0220 	bic.w	r2, r2, #32
 800cd1a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	791b      	ldrb	r3, [r3, #4]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d124      	bne.n	800cd6e <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd32:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a16      	ldr	r2, [pc, #88]	; (800cd94 <USART_Config+0x328>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d103      	bne.n	800cd46 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800cd3e:	2025      	movs	r0, #37	; 0x25
 800cd40:	f7ff fe4c 	bl	800c9dc <__NVIC_EnableIRQ>
 800cd44:	e01b      	b.n	800cd7e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a10      	ldr	r2, [pc, #64]	; (800cd8c <USART_Config+0x320>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d103      	bne.n	800cd58 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800cd50:	2026      	movs	r0, #38	; 0x26
 800cd52:	f7ff fe43 	bl	800c9dc <__NVIC_EnableIRQ>
 800cd56:	e012      	b.n	800cd7e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a0c      	ldr	r2, [pc, #48]	; (800cd90 <USART_Config+0x324>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d103      	bne.n	800cd6a <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800cd62:	2047      	movs	r0, #71	; 0x47
 800cd64:	f7ff fe3a 	bl	800c9dc <__NVIC_EnableIRQ>
 800cd68:	e009      	b.n	800cd7e <USART_Config+0x312>
		}
		else{
				__NOP();
 800cd6a:	bf00      	nop
 800cd6c:	e007      	b.n	800cd7e <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68da      	ldr	r2, [r3, #12]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd7c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800cd7e:	b662      	cpsie	i
}
 800cd80:	bf00      	nop
	}

	__enable_irq();
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd90      	pop	{r4, r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	40004400 	.word	0x40004400
 800cd90:	40011400 	.word	0x40011400
 800cd94:	40011000 	.word	0x40011000

0800cd98 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 800cd98:	b5b0      	push	{r4, r5, r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	79db      	ldrb	r3, [r3, #7]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	f200 8217 	bhi.w	800d1da <brrCalculus+0x442>
 800cdac:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <brrCalculus+0x1c>)
 800cdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb2:	bf00      	nop
 800cdb4:	0800cdc5 	.word	0x0800cdc5
 800cdb8:	0800cebf 	.word	0x0800cebf
 800cdbc:	0800cfd9 	.word	0x0800cfd9
 800cdc0:	0800d0e1 	.word	0x0800d0e1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800cdc4:	4980      	ldr	r1, [pc, #512]	; (800cfc8 <brrCalculus+0x230>)
 800cdc6:	a37c      	add	r3, pc, #496	; (adr r3, 800cfb8 <brrCalculus+0x220>)
 800cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdcc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdda:	ee17 0a90 	vmov	r0, s15
 800cdde:	f7f3 fbcb 	bl	8000578 <__aeabi_f2d>
 800cde2:	4b79      	ldr	r3, [pc, #484]	; (800cfc8 <brrCalculus+0x230>)
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f7f3 fc1e 	bl	8000628 <__aeabi_dmul>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4975      	ldr	r1, [pc, #468]	; (800cfc8 <brrCalculus+0x230>)
 800cdf2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800cdf6:	4b74      	ldr	r3, [pc, #464]	; (800cfc8 <brrCalculus+0x230>)
 800cdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	4619      	mov	r1, r3
 800ce00:	f7f3 fec2 	bl	8000b88 <__aeabi_d2iz>
 800ce04:	4603      	mov	r3, r0
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	4b70      	ldr	r3, [pc, #448]	; (800cfcc <brrCalculus+0x234>)
 800ce0a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800ce0c:	4b6e      	ldr	r3, [pc, #440]	; (800cfc8 <brrCalculus+0x230>)
 800ce0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ce12:	4b6d      	ldr	r3, [pc, #436]	; (800cfc8 <brrCalculus+0x230>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	f7f3 feb4 	bl	8000b88 <__aeabi_d2iz>
 800ce20:	4603      	mov	r3, r0
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7f3 fb96 	bl	8000554 <__aeabi_i2d>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f7f3 fa42 	bl	80002b8 <__aeabi_dsub>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	4610      	mov	r0, r2
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	f7f3 feec 	bl	8000c18 <__aeabi_d2f>
 800ce40:	4603      	mov	r3, r0
 800ce42:	4a63      	ldr	r2, [pc, #396]	; (800cfd0 <brrCalculus+0x238>)
 800ce44:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800ce46:	4b62      	ldr	r3, [pc, #392]	; (800cfd0 <brrCalculus+0x238>)
 800ce48:	edd3 7a00 	vldr	s15, [r3]
 800ce4c:	2004      	movs	r0, #4
 800ce4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce52:	f000 fa6d 	bl	800d330 <roundToNDecimals>
 800ce56:	eef0 7a40 	vmov.f32	s15, s0
 800ce5a:	4b5d      	ldr	r3, [pc, #372]	; (800cfd0 <brrCalculus+0x238>)
 800ce5c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800ce60:	4b5b      	ldr	r3, [pc, #364]	; (800cfd0 <brrCalculus+0x238>)
 800ce62:	edd3 7a00 	vldr	s15, [r3]
 800ce66:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800ce6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce6e:	4b58      	ldr	r3, [pc, #352]	; (800cfd0 <brrCalculus+0x238>)
 800ce70:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800ce74:	4b56      	ldr	r3, [pc, #344]	; (800cfd0 <brrCalculus+0x238>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7f3 fb7d 	bl	8000578 <__aeabi_f2d>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	ec43 2b10 	vmov	d0, r2, r3
 800ce86:	f003 fc97 	bl	80107b8 <round>
 800ce8a:	ec53 2b10 	vmov	r2, r3, d0
 800ce8e:	4610      	mov	r0, r2
 800ce90:	4619      	mov	r1, r3
 800ce92:	f7f3 fec1 	bl	8000c18 <__aeabi_d2f>
 800ce96:	4603      	mov	r3, r0
 800ce98:	4a4d      	ldr	r2, [pc, #308]	; (800cfd0 <brrCalculus+0x238>)
 800ce9a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800ce9c:	4b4b      	ldr	r3, [pc, #300]	; (800cfcc <brrCalculus+0x234>)
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	011b      	lsls	r3, r3, #4
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	4b4a      	ldr	r3, [pc, #296]	; (800cfd0 <brrCalculus+0x238>)
 800cea6:	edd3 7a00 	vldr	s15, [r3]
 800ceaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceae:	ee17 3a90 	vmov	r3, s15
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	b29a      	uxth	r2, r3
 800ceb8:	4b46      	ldr	r3, [pc, #280]	; (800cfd4 <brrCalculus+0x23c>)
 800ceba:	801a      	strh	r2, [r3, #0]


		break;
 800cebc:	e18f      	b.n	800d1de <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800cebe:	4942      	ldr	r1, [pc, #264]	; (800cfc8 <brrCalculus+0x230>)
 800cec0:	a33f      	add	r3, pc, #252	; (adr r3, 800cfc0 <brrCalculus+0x228>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	ee07 3a90 	vmov	s15, r3
 800ced0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced4:	ee17 0a90 	vmov	r0, s15
 800ced8:	f7f3 fb4e 	bl	8000578 <__aeabi_f2d>
 800cedc:	4b3a      	ldr	r3, [pc, #232]	; (800cfc8 <brrCalculus+0x230>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	f7f3 fba1 	bl	8000628 <__aeabi_dmul>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	4937      	ldr	r1, [pc, #220]	; (800cfc8 <brrCalculus+0x230>)
 800ceec:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800cef0:	4b35      	ldr	r3, [pc, #212]	; (800cfc8 <brrCalculus+0x230>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	4610      	mov	r0, r2
 800cef8:	4619      	mov	r1, r3
 800cefa:	f7f3 fe45 	bl	8000b88 <__aeabi_d2iz>
 800cefe:	4603      	mov	r3, r0
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	4b32      	ldr	r3, [pc, #200]	; (800cfcc <brrCalculus+0x234>)
 800cf04:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800cf06:	4b30      	ldr	r3, [pc, #192]	; (800cfc8 <brrCalculus+0x230>)
 800cf08:	e9d3 4500 	ldrd	r4, r5, [r3]
 800cf0c:	4b2e      	ldr	r3, [pc, #184]	; (800cfc8 <brrCalculus+0x230>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	4610      	mov	r0, r2
 800cf14:	4619      	mov	r1, r3
 800cf16:	f7f3 fe37 	bl	8000b88 <__aeabi_d2iz>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f3 fb19 	bl	8000554 <__aeabi_i2d>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4620      	mov	r0, r4
 800cf28:	4629      	mov	r1, r5
 800cf2a:	f7f3 f9c5 	bl	80002b8 <__aeabi_dsub>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	460b      	mov	r3, r1
 800cf32:	4610      	mov	r0, r2
 800cf34:	4619      	mov	r1, r3
 800cf36:	f7f3 fe6f 	bl	8000c18 <__aeabi_d2f>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4a24      	ldr	r2, [pc, #144]	; (800cfd0 <brrCalculus+0x238>)
 800cf3e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800cf40:	4b23      	ldr	r3, [pc, #140]	; (800cfd0 <brrCalculus+0x238>)
 800cf42:	edd3 7a00 	vldr	s15, [r3]
 800cf46:	2004      	movs	r0, #4
 800cf48:	eeb0 0a67 	vmov.f32	s0, s15
 800cf4c:	f000 f9f0 	bl	800d330 <roundToNDecimals>
 800cf50:	eef0 7a40 	vmov.f32	s15, s0
 800cf54:	4b1e      	ldr	r3, [pc, #120]	; (800cfd0 <brrCalculus+0x238>)
 800cf56:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800cf5a:	4b1d      	ldr	r3, [pc, #116]	; (800cfd0 <brrCalculus+0x238>)
 800cf5c:	edd3 7a00 	vldr	s15, [r3]
 800cf60:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800cf64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf68:	4b19      	ldr	r3, [pc, #100]	; (800cfd0 <brrCalculus+0x238>)
 800cf6a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800cf6e:	4b18      	ldr	r3, [pc, #96]	; (800cfd0 <brrCalculus+0x238>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f3 fb00 	bl	8000578 <__aeabi_f2d>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	ec43 2b10 	vmov	d0, r2, r3
 800cf80:	f003 fc1a 	bl	80107b8 <round>
 800cf84:	ec53 2b10 	vmov	r2, r3, d0
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f7f3 fe44 	bl	8000c18 <__aeabi_d2f>
 800cf90:	4603      	mov	r3, r0
 800cf92:	4a0f      	ldr	r2, [pc, #60]	; (800cfd0 <brrCalculus+0x238>)
 800cf94:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800cf96:	4b0d      	ldr	r3, [pc, #52]	; (800cfcc <brrCalculus+0x234>)
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	4b0c      	ldr	r3, [pc, #48]	; (800cfd0 <brrCalculus+0x238>)
 800cfa0:	edd3 7a00 	vldr	s15, [r3]
 800cfa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfa8:	ee17 3a90 	vmov	r3, s15
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	4b08      	ldr	r3, [pc, #32]	; (800cfd4 <brrCalculus+0x23c>)
 800cfb4:	801a      	strh	r2, [r3, #0]


		break;
 800cfb6:	e112      	b.n	800d1de <brrCalculus+0x446>
 800cfb8:	b4e81b4f 	.word	0xb4e81b4f
 800cfbc:	3edb4e81 	.word	0x3edb4e81
 800cfc0:	b4e81b4f 	.word	0xb4e81b4f
 800cfc4:	3ecb4e81 	.word	0x3ecb4e81
 800cfc8:	2000dc60 	.word	0x2000dc60
 800cfcc:	2000dc58 	.word	0x2000dc58
 800cfd0:	2000dc5c 	.word	0x2000dc5c
 800cfd4:	2000dc56 	.word	0x2000dc56
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 800cfd8:	4989      	ldr	r1, [pc, #548]	; (800d200 <brrCalculus+0x468>)
 800cfda:	a385      	add	r3, pc, #532	; (adr r3, 800d1f0 <brrCalculus+0x458>)
 800cfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	ee07 3a90 	vmov	s15, r3
 800cfea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfee:	ee17 0a90 	vmov	r0, s15
 800cff2:	f7f3 fac1 	bl	8000578 <__aeabi_f2d>
 800cff6:	4b82      	ldr	r3, [pc, #520]	; (800d200 <brrCalculus+0x468>)
 800cff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffc:	f7f3 fb14 	bl	8000628 <__aeabi_dmul>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	497e      	ldr	r1, [pc, #504]	; (800d200 <brrCalculus+0x468>)
 800d006:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d00a:	4b7d      	ldr	r3, [pc, #500]	; (800d200 <brrCalculus+0x468>)
 800d00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d010:	4610      	mov	r0, r2
 800d012:	4619      	mov	r1, r3
 800d014:	f7f3 fdb8 	bl	8000b88 <__aeabi_d2iz>
 800d018:	4603      	mov	r3, r0
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	4b79      	ldr	r3, [pc, #484]	; (800d204 <brrCalculus+0x46c>)
 800d01e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d020:	4b77      	ldr	r3, [pc, #476]	; (800d200 <brrCalculus+0x468>)
 800d022:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d026:	4b76      	ldr	r3, [pc, #472]	; (800d200 <brrCalculus+0x468>)
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	4610      	mov	r0, r2
 800d02e:	4619      	mov	r1, r3
 800d030:	f7f3 fdaa 	bl	8000b88 <__aeabi_d2iz>
 800d034:	4603      	mov	r3, r0
 800d036:	4618      	mov	r0, r3
 800d038:	f7f3 fa8c 	bl	8000554 <__aeabi_i2d>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	4620      	mov	r0, r4
 800d042:	4629      	mov	r1, r5
 800d044:	f7f3 f938 	bl	80002b8 <__aeabi_dsub>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4610      	mov	r0, r2
 800d04e:	4619      	mov	r1, r3
 800d050:	f7f3 fde2 	bl	8000c18 <__aeabi_d2f>
 800d054:	4603      	mov	r3, r0
 800d056:	4a6c      	ldr	r2, [pc, #432]	; (800d208 <brrCalculus+0x470>)
 800d058:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d05a:	4b6b      	ldr	r3, [pc, #428]	; (800d208 <brrCalculus+0x470>)
 800d05c:	edd3 7a00 	vldr	s15, [r3]
 800d060:	2004      	movs	r0, #4
 800d062:	eeb0 0a67 	vmov.f32	s0, s15
 800d066:	f000 f963 	bl	800d330 <roundToNDecimals>
 800d06a:	eef0 7a40 	vmov.f32	s15, s0
 800d06e:	4b66      	ldr	r3, [pc, #408]	; (800d208 <brrCalculus+0x470>)
 800d070:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d074:	4b64      	ldr	r3, [pc, #400]	; (800d208 <brrCalculus+0x470>)
 800d076:	edd3 7a00 	vldr	s15, [r3]
 800d07a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d07e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d082:	4b61      	ldr	r3, [pc, #388]	; (800d208 <brrCalculus+0x470>)
 800d084:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 800d088:	4b5f      	ldr	r3, [pc, #380]	; (800d208 <brrCalculus+0x470>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7f3 fa73 	bl	8000578 <__aeabi_f2d>
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	ec43 2b10 	vmov	d0, r2, r3
 800d09a:	f003 fb8d 	bl	80107b8 <round>
 800d09e:	ec51 0b10 	vmov	r0, r1, d0
 800d0a2:	f04f 0200 	mov.w	r2, #0
 800d0a6:	4b59      	ldr	r3, [pc, #356]	; (800d20c <brrCalculus+0x474>)
 800d0a8:	f7f3 f908 	bl	80002bc <__adddf3>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	f7f3 fdb0 	bl	8000c18 <__aeabi_d2f>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	4a53      	ldr	r2, [pc, #332]	; (800d208 <brrCalculus+0x470>)
 800d0bc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d0be:	4b51      	ldr	r3, [pc, #324]	; (800d204 <brrCalculus+0x46c>)
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	011b      	lsls	r3, r3, #4
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	4b50      	ldr	r3, [pc, #320]	; (800d208 <brrCalculus+0x470>)
 800d0c8:	edd3 7a00 	vldr	s15, [r3]
 800d0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0d0:	ee17 3a90 	vmov	r3, s15
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	4b4d      	ldr	r3, [pc, #308]	; (800d210 <brrCalculus+0x478>)
 800d0dc:	801a      	strh	r2, [r3, #0]


		break;
 800d0de:	e07e      	b.n	800d1de <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 800d0e0:	4947      	ldr	r1, [pc, #284]	; (800d200 <brrCalculus+0x468>)
 800d0e2:	a345      	add	r3, pc, #276	; (adr r3, 800d1f8 <brrCalculus+0x460>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	ee07 3a90 	vmov	s15, r3
 800d0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f6:	ee17 0a90 	vmov	r0, s15
 800d0fa:	f7f3 fa3d 	bl	8000578 <__aeabi_f2d>
 800d0fe:	4b40      	ldr	r3, [pc, #256]	; (800d200 <brrCalculus+0x468>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 fa90 	bl	8000628 <__aeabi_dmul>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	493c      	ldr	r1, [pc, #240]	; (800d200 <brrCalculus+0x468>)
 800d10e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d112:	4b3b      	ldr	r3, [pc, #236]	; (800d200 <brrCalculus+0x468>)
 800d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d118:	4610      	mov	r0, r2
 800d11a:	4619      	mov	r1, r3
 800d11c:	f7f3 fd34 	bl	8000b88 <__aeabi_d2iz>
 800d120:	4603      	mov	r3, r0
 800d122:	b29a      	uxth	r2, r3
 800d124:	4b37      	ldr	r3, [pc, #220]	; (800d204 <brrCalculus+0x46c>)
 800d126:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d128:	4b35      	ldr	r3, [pc, #212]	; (800d200 <brrCalculus+0x468>)
 800d12a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d12e:	4b34      	ldr	r3, [pc, #208]	; (800d200 <brrCalculus+0x468>)
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	4610      	mov	r0, r2
 800d136:	4619      	mov	r1, r3
 800d138:	f7f3 fd26 	bl	8000b88 <__aeabi_d2iz>
 800d13c:	4603      	mov	r3, r0
 800d13e:	4618      	mov	r0, r3
 800d140:	f7f3 fa08 	bl	8000554 <__aeabi_i2d>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	4620      	mov	r0, r4
 800d14a:	4629      	mov	r1, r5
 800d14c:	f7f3 f8b4 	bl	80002b8 <__aeabi_dsub>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4610      	mov	r0, r2
 800d156:	4619      	mov	r1, r3
 800d158:	f7f3 fd5e 	bl	8000c18 <__aeabi_d2f>
 800d15c:	4603      	mov	r3, r0
 800d15e:	4a2a      	ldr	r2, [pc, #168]	; (800d208 <brrCalculus+0x470>)
 800d160:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d162:	4b29      	ldr	r3, [pc, #164]	; (800d208 <brrCalculus+0x470>)
 800d164:	edd3 7a00 	vldr	s15, [r3]
 800d168:	2004      	movs	r0, #4
 800d16a:	eeb0 0a67 	vmov.f32	s0, s15
 800d16e:	f000 f8df 	bl	800d330 <roundToNDecimals>
 800d172:	eef0 7a40 	vmov.f32	s15, s0
 800d176:	4b24      	ldr	r3, [pc, #144]	; (800d208 <brrCalculus+0x470>)
 800d178:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d17c:	4b22      	ldr	r3, [pc, #136]	; (800d208 <brrCalculus+0x470>)
 800d17e:	edd3 7a00 	vldr	s15, [r3]
 800d182:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d18a:	4b1f      	ldr	r3, [pc, #124]	; (800d208 <brrCalculus+0x470>)
 800d18c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d190:	4b1d      	ldr	r3, [pc, #116]	; (800d208 <brrCalculus+0x470>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f7f3 f9ef 	bl	8000578 <__aeabi_f2d>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	ec43 2b10 	vmov	d0, r2, r3
 800d1a2:	f003 fb09 	bl	80107b8 <round>
 800d1a6:	ec53 2b10 	vmov	r2, r3, d0
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f7f3 fd33 	bl	8000c18 <__aeabi_d2f>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	4a14      	ldr	r2, [pc, #80]	; (800d208 <brrCalculus+0x470>)
 800d1b6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d1b8:	4b12      	ldr	r3, [pc, #72]	; (800d204 <brrCalculus+0x46c>)
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	011b      	lsls	r3, r3, #4
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	4b11      	ldr	r3, [pc, #68]	; (800d208 <brrCalculus+0x470>)
 800d1c2:	edd3 7a00 	vldr	s15, [r3]
 800d1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ca:	ee17 3a90 	vmov	r3, s15
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	4b0e      	ldr	r3, [pc, #56]	; (800d210 <brrCalculus+0x478>)
 800d1d6:	801a      	strh	r2, [r3, #0]


		break;
 800d1d8:	e001      	b.n	800d1de <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800d1da:	bf00      	nop
		break;
 800d1dc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800d1de:	4b0c      	ldr	r3, [pc, #48]	; (800d210 <brrCalculus+0x478>)
 800d1e0:	881b      	ldrh	r3, [r3, #0]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	f3af 8000 	nop.w
 800d1f0:	789abcdf 	.word	0x789abcdf
 800d1f4:	3ec23456 	.word	0x3ec23456
 800d1f8:	789abcdf 	.word	0x789abcdf
 800d1fc:	3ea23456 	.word	0x3ea23456
 800d200:	2000dc60 	.word	0x2000dc60
 800d204:	2000dc58 	.word	0x2000dc58
 800d208:	2000dc5c 	.word	0x2000dc5c
 800d20c:	3ff00000 	.word	0x3ff00000
 800d210:	2000dc56 	.word	0x2000dc56

0800d214 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d21e:	e000      	b.n	800d222 <writeChar+0xe>
		__NOP();
 800d220:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d0f7      	beq.n	800d220 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	683a      	ldr	r2, [r7, #0]
 800d236:	605a      	str	r2, [r3, #4]

}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800d24e:	e008      	b.n	800d262 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	4619      	mov	r1, r3
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7ff ffdc 	bl	800d214 <writeChar>
		msgToSend ++ ;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	3301      	adds	r3, #1
 800d260:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f2      	bne.n	800d250 <writeMsg+0xc>
	}
}
 800d26a:	bf00      	nop
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 800d274:	b480      	push	{r7}
 800d276:	af00      	add	r7, sp, #0
	__NOP();
 800d278:	bf00      	nop
}
 800d27a:	bf00      	nop
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 800d284:	b480      	push	{r7}
 800d286:	af00      	add	r7, sp, #0
	__NOP();
 800d288:	bf00      	nop
}
 800d28a:	bf00      	nop
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800d294:	b480      	push	{r7}
 800d296:	af00      	add	r7, sp, #0
	return auxRxData;
 800d298:	4b03      	ldr	r3, [pc, #12]	; (800d2a8 <getRxData+0x14>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop
 800d2a8:	2000dc68 	.word	0x2000dc68

0800d2ac <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800d2b0:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <USART2_IRQHandler+0x24>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f003 0320 	and.w	r3, r3, #32
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800d2bc:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <USART2_IRQHandler+0x24>)
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	b2da      	uxtb	r2, r3
 800d2c2:	4b04      	ldr	r3, [pc, #16]	; (800d2d4 <USART2_IRQHandler+0x28>)
 800d2c4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800d2c6:	f7f5 fa27 	bl	8002718 <usart2Rx_Callback>
	}

}
 800d2ca:	bf00      	nop
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	40004400 	.word	0x40004400
 800d2d4:	2000dc68 	.word	0x2000dc68

0800d2d8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800d2dc:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <USART1_IRQHandler+0x24>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 0320 	and.w	r3, r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d006      	beq.n	800d2f6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800d2e8:	4b04      	ldr	r3, [pc, #16]	; (800d2fc <USART1_IRQHandler+0x24>)
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	4b04      	ldr	r3, [pc, #16]	; (800d300 <USART1_IRQHandler+0x28>)
 800d2f0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800d2f2:	f7ff ffbf 	bl	800d274 <usart1Rx_Callback>
	}
}
 800d2f6:	bf00      	nop
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	40011000 	.word	0x40011000
 800d300:	2000dc68 	.word	0x2000dc68

0800d304 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800d308:	4b07      	ldr	r3, [pc, #28]	; (800d328 <USART6_IRQHandler+0x24>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 0320 	and.w	r3, r3, #32
 800d310:	2b00      	cmp	r3, #0
 800d312:	d006      	beq.n	800d322 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800d314:	4b04      	ldr	r3, [pc, #16]	; (800d328 <USART6_IRQHandler+0x24>)
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	4b04      	ldr	r3, [pc, #16]	; (800d32c <USART6_IRQHandler+0x28>)
 800d31c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800d31e:	f7ff ffb1 	bl	800d284 <usart6Rx_Callback>
	}

}
 800d322:	bf00      	nop
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	40011400 	.word	0x40011400
 800d32c:	2000dc68 	.word	0x2000dc68

0800d330 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	ed87 0a01 	vstr	s0, [r7, #4]
 800d33a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800d33c:	6838      	ldr	r0, [r7, #0]
 800d33e:	f7f3 f909 	bl	8000554 <__aeabi_i2d>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	ec43 2b11 	vmov	d1, r2, r3
 800d34a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800d3c8 <roundToNDecimals+0x98>
 800d34e:	f003 fb09 	bl	8010964 <pow>
 800d352:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7f3 f90e 	bl	8000578 <__aeabi_f2d>
 800d35c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d360:	f7f3 f962 	bl	8000628 <__aeabi_dmul>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4610      	mov	r0, r2
 800d36a:	4619      	mov	r1, r3
 800d36c:	f7f3 fc54 	bl	8000c18 <__aeabi_d2f>
 800d370:	4603      	mov	r3, r0
 800d372:	607b      	str	r3, [r7, #4]

    number = round(number);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7f3 f8ff 	bl	8000578 <__aeabi_f2d>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	ec43 2b10 	vmov	d0, r2, r3
 800d382:	f003 fa19 	bl	80107b8 <round>
 800d386:	ec53 2b10 	vmov	r2, r3, d0
 800d38a:	4610      	mov	r0, r2
 800d38c:	4619      	mov	r1, r3
 800d38e:	f7f3 fc43 	bl	8000c18 <__aeabi_d2f>
 800d392:	4603      	mov	r3, r0
 800d394:	607b      	str	r3, [r7, #4]

    number /= factor;
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7f3 f8ee 	bl	8000578 <__aeabi_f2d>
 800d39c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3a0:	f7f3 fa6c 	bl	800087c <__aeabi_ddiv>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f7f3 fc34 	bl	8000c18 <__aeabi_d2f>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	607b      	str	r3, [r7, #4]

    return number;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	ee07 3a90 	vmov	s15, r3
}
 800d3ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	f3af 8000 	nop.w
 800d3c8:	00000000 	.word	0x00000000
 800d3cc:	40240000 	.word	0x40240000

0800d3d0 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3dc:	b672      	cpsid	i
}
 800d3de:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a12      	ldr	r2, [pc, #72]	; (800d430 <usart_Set_Priority+0x60>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d105      	bne.n	800d3f6 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800d3ea:	78fb      	ldrb	r3, [r7, #3]
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	2025      	movs	r0, #37	; 0x25
 800d3f0:	f7ff fb12 	bl	800ca18 <__NVIC_SetPriority>
 800d3f4:	e016      	b.n	800d424 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a0e      	ldr	r2, [pc, #56]	; (800d434 <usart_Set_Priority+0x64>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d105      	bne.n	800d40c <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800d400:	78fb      	ldrb	r3, [r7, #3]
 800d402:	4619      	mov	r1, r3
 800d404:	2026      	movs	r0, #38	; 0x26
 800d406:	f7ff fb07 	bl	800ca18 <__NVIC_SetPriority>
 800d40a:	e00b      	b.n	800d424 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a09      	ldr	r2, [pc, #36]	; (800d438 <usart_Set_Priority+0x68>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d105      	bne.n	800d422 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	4619      	mov	r1, r3
 800d41a:	2047      	movs	r0, #71	; 0x47
 800d41c:	f7ff fafc 	bl	800ca18 <__NVIC_SetPriority>
 800d420:	e000      	b.n	800d424 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800d422:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800d424:	b662      	cpsie	i
}
 800d426:	bf00      	nop



	__enable_irq();

}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	40011000 	.word	0x40011000
 800d434:	40004400 	.word	0x40004400
 800d438:	40011400 	.word	0x40011400

0800d43c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a89      	ldr	r2, [pc, #548]	; (800d670 <i2c_config+0x234>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d106      	bne.n	800d45c <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800d44e:	4b89      	ldr	r3, [pc, #548]	; (800d674 <i2c_config+0x238>)
 800d450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d452:	4a88      	ldr	r2, [pc, #544]	; (800d674 <i2c_config+0x238>)
 800d454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d458:	6413      	str	r3, [r2, #64]	; 0x40
 800d45a:	e016      	b.n	800d48a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a85      	ldr	r2, [pc, #532]	; (800d678 <i2c_config+0x23c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d106      	bne.n	800d474 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800d466:	4b83      	ldr	r3, [pc, #524]	; (800d674 <i2c_config+0x238>)
 800d468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46a:	4a82      	ldr	r2, [pc, #520]	; (800d674 <i2c_config+0x238>)
 800d46c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d470:	6413      	str	r3, [r2, #64]	; 0x40
 800d472:	e00a      	b.n	800d48a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a80      	ldr	r2, [pc, #512]	; (800d67c <i2c_config+0x240>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d105      	bne.n	800d48a <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800d47e:	4b7d      	ldr	r3, [pc, #500]	; (800d674 <i2c_config+0x238>)
 800d480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d482:	4a7c      	ldr	r2, [pc, #496]	; (800d674 <i2c_config+0x238>)
 800d484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d488:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f022 0201 	bic.w	r2, r2, #1
 800d498:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d49a:	e000      	b.n	800d49e <i2c_config+0x62>
		__NOP();
 800d49c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	f003 0302 	and.w	r3, r3, #2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1f7      	bne.n	800d49c <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d4ba:	601a      	str	r2, [r3, #0]

	__NOP();
 800d4bc:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4cc:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800d4dc:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	79db      	ldrb	r3, [r3, #7]
 800d4e2:	2b10      	cmp	r3, #16
 800d4e4:	d108      	bne.n	800d4f8 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f042 0210 	orr.w	r2, r2, #16
 800d4f4:	605a      	str	r2, [r3, #4]
 800d4f6:	e018      	b.n	800d52a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	79db      	ldrb	r3, [r3, #7]
 800d4fc:	2b19      	cmp	r3, #25
 800d4fe:	d108      	bne.n	800d512 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f042 0219 	orr.w	r2, r2, #25
 800d50e:	605a      	str	r2, [r3, #4]
 800d510:	e00b      	b.n	800d52a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	79db      	ldrb	r3, [r3, #7]
 800d516:	2b32      	cmp	r3, #50	; 0x32
 800d518:	d107      	bne.n	800d52a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	685a      	ldr	r2, [r3, #4]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800d528:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2200      	movs	r2, #0
 800d530:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2200      	movs	r2, #0
 800d538:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	795b      	ldrb	r3, [r3, #5]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d15c      	bne.n	800d5fc <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	69da      	ldr	r2, [r3, #28]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d550:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	79db      	ldrb	r3, [r3, #7]
 800d556:	2b32      	cmp	r3, #50	; 0x32
 800d558:	d03f      	beq.n	800d5da <i2c_config+0x19e>
 800d55a:	2b32      	cmp	r3, #50	; 0x32
 800d55c:	f300 80b2 	bgt.w	800d6c4 <i2c_config+0x288>
 800d560:	2b19      	cmp	r3, #25
 800d562:	d029      	beq.n	800d5b8 <i2c_config+0x17c>
 800d564:	2b19      	cmp	r3, #25
 800d566:	f300 80ad 	bgt.w	800d6c4 <i2c_config+0x288>
 800d56a:	2b04      	cmp	r3, #4
 800d56c:	d002      	beq.n	800d574 <i2c_config+0x138>
 800d56e:	2b10      	cmp	r3, #16
 800d570:	d011      	beq.n	800d596 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800d572:	e0a7      	b.n	800d6c4 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	69da      	ldr	r2, [r3, #28]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f042 0214 	orr.w	r2, r2, #20
 800d582:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6a1a      	ldr	r2, [r3, #32]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f042 0205 	orr.w	r2, r2, #5
 800d592:	621a      	str	r2, [r3, #32]
				break;
 800d594:	e099      	b.n	800d6ca <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	69da      	ldr	r2, [r3, #28]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d5a4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6a1a      	ldr	r2, [r3, #32]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f042 0211 	orr.w	r2, r2, #17
 800d5b4:	621a      	str	r2, [r3, #32]
				break;
 800d5b6:	e088      	b.n	800d6ca <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	69da      	ldr	r2, [r3, #28]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800d5c6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6a1a      	ldr	r2, [r3, #32]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f042 0215 	orr.w	r2, r2, #21
 800d5d6:	621a      	str	r2, [r3, #32]
				break;
 800d5d8:	e077      	b.n	800d6ca <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	69da      	ldr	r2, [r3, #28]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800d5e8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6a1a      	ldr	r2, [r3, #32]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800d5f8:	621a      	str	r2, [r3, #32]
				break;
 800d5fa:	e066      	b.n	800d6ca <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	69da      	ldr	r2, [r3, #28]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d60a:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	79db      	ldrb	r3, [r3, #7]
 800d610:	2b32      	cmp	r3, #50	; 0x32
 800d612:	d046      	beq.n	800d6a2 <i2c_config+0x266>
 800d614:	2b32      	cmp	r3, #50	; 0x32
 800d616:	dc57      	bgt.n	800d6c8 <i2c_config+0x28c>
 800d618:	2b19      	cmp	r3, #25
 800d61a:	d031      	beq.n	800d680 <i2c_config+0x244>
 800d61c:	2b19      	cmp	r3, #25
 800d61e:	dc53      	bgt.n	800d6c8 <i2c_config+0x28c>
 800d620:	2b04      	cmp	r3, #4
 800d622:	d002      	beq.n	800d62a <i2c_config+0x1ee>
 800d624:	2b10      	cmp	r3, #16
 800d626:	d011      	beq.n	800d64c <i2c_config+0x210>


				break;
			}default:{

				break;
 800d628:	e04e      	b.n	800d6c8 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	69da      	ldr	r2, [r3, #28]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f042 0203 	orr.w	r2, r2, #3
 800d638:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	6a1a      	ldr	r2, [r3, #32]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f042 0202 	orr.w	r2, r2, #2
 800d648:	621a      	str	r2, [r3, #32]
				break;
 800d64a:	e03e      	b.n	800d6ca <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	69da      	ldr	r2, [r3, #28]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f042 020d 	orr.w	r2, r2, #13
 800d65a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	6a1a      	ldr	r2, [r3, #32]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f042 0206 	orr.w	r2, r2, #6
 800d66a:	621a      	str	r2, [r3, #32]
				break;
 800d66c:	e02d      	b.n	800d6ca <i2c_config+0x28e>
 800d66e:	bf00      	nop
 800d670:	40005400 	.word	0x40005400
 800d674:	40023800 	.word	0x40023800
 800d678:	40005800 	.word	0x40005800
 800d67c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	69da      	ldr	r2, [r3, #28]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0215 	orr.w	r2, r2, #21
 800d68e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6a1a      	ldr	r2, [r3, #32]
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f042 0208 	orr.w	r2, r2, #8
 800d69e:	621a      	str	r2, [r3, #32]
				break;
 800d6a0:	e013      	b.n	800d6ca <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	69da      	ldr	r2, [r3, #28]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800d6b0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6a1a      	ldr	r2, [r3, #32]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f042 0210 	orr.w	r2, r2, #16
 800d6c0:	621a      	str	r2, [r3, #32]
				break;
 800d6c2:	e002      	b.n	800d6ca <i2c_config+0x28e>
				break;
 800d6c4:	bf00      	nop
 800d6c6:	e002      	b.n	800d6ce <i2c_config+0x292>
				break;
 800d6c8:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d6ca:	e000      	b.n	800d6ce <i2c_config+0x292>
		__NOP();
 800d6cc:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	f003 0302 	and.w	r3, r3, #2
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1f7      	bne.n	800d6cc <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f042 0201 	orr.w	r2, r2, #1
 800d6ea:	601a      	str	r2, [r3, #0]


}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d70e:	601a      	str	r2, [r3, #0]
}
 800d710:	bf00      	nop
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7a1b      	ldrb	r3, [r3, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d009      	beq.n	800d740 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d73a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d73c:	e000      	b.n	800d740 <i2c_startTransaction+0x24>
		__NOP();
 800d73e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	f003 0302 	and.w	r3, r3, #2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1f7      	bne.n	800d73e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d75c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800d75e:	e000      	b.n	800d762 <i2c_startTransaction+0x46>
		__NOP();
 800d760:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	695b      	ldr	r3, [r3, #20]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d0f7      	beq.n	800d760 <i2c_startTransaction+0x44>
	}
}
 800d770:	bf00      	nop
 800d772:	bf00      	nop
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800d77e:	b480      	push	{r7}
 800d780:	b083      	sub	sp, #12
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	7a1b      	ldrb	r3, [r3, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d007      	beq.n	800d79e <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d79c:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7ac:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800d7ae:	e000      	b.n	800d7b2 <i2c_reStartTransaction+0x34>
		__NOP();
 800d7b0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	695b      	ldr	r3, [r3, #20]
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d0f7      	beq.n	800d7b0 <i2c_reStartTransaction+0x32>
	}
}
 800d7c0:	bf00      	nop
 800d7c2:	bf00      	nop
 800d7c4:	370c      	adds	r7, #12
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800d7ce:	b480      	push	{r7}
 800d7d0:	b083      	sub	sp, #12
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7e4:	601a      	str	r2, [r3, #0]
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800d7f2:	b480      	push	{r7}
 800d7f4:	b085      	sub	sp, #20
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	70fb      	strb	r3, [r7, #3]
 800d7fe:	4613      	mov	r3, r2
 800d800:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800d806:	78fb      	ldrb	r3, [r7, #3]
 800d808:	005a      	lsls	r2, r3, #1
 800d80a:	78bb      	ldrb	r3, [r7, #2]
 800d80c:	431a      	orrs	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800d814:	e000      	b.n	800d818 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800d816:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	f003 0302 	and.w	r3, r3, #2
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0f7      	beq.n	800d816 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	73fb      	strb	r3, [r7, #15]

}
 800d836:	bf00      	nop
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	78fa      	ldrb	r2, [r7, #3]
 800d854:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800d856:	e000      	b.n	800d85a <i2c_sendMemoryAddress+0x18>
		__NOP();
 800d858:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d864:	2b00      	cmp	r3, #0
 800d866:	d0f7      	beq.n	800d858 <i2c_sendMemoryAddress+0x16>
	}
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800d876:	b480      	push	{r7}
 800d878:	b083      	sub	sp, #12
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	460b      	mov	r3, r1
 800d880:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	78fa      	ldrb	r2, [r7, #3]
 800d888:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800d88a:	e000      	b.n	800d88e <i2c_sendDataByte+0x18>
		__NOP();
 800d88c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d0f7      	beq.n	800d88c <i2c_sendDataByte+0x16>
	}
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800d8b2:	e000      	b.n	800d8b6 <i2c_readDataByte+0xc>
		__NOP();
 800d8b4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0f7      	beq.n	800d8b4 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	799b      	ldrb	r3, [r3, #6]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <__errno>:
 800d8e0:	4b01      	ldr	r3, [pc, #4]	; (800d8e8 <__errno+0x8>)
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	20000040 	.word	0x20000040

0800d8ec <__libc_init_array>:
 800d8ec:	b570      	push	{r4, r5, r6, lr}
 800d8ee:	4d0d      	ldr	r5, [pc, #52]	; (800d924 <__libc_init_array+0x38>)
 800d8f0:	4c0d      	ldr	r4, [pc, #52]	; (800d928 <__libc_init_array+0x3c>)
 800d8f2:	1b64      	subs	r4, r4, r5
 800d8f4:	10a4      	asrs	r4, r4, #2
 800d8f6:	2600      	movs	r6, #0
 800d8f8:	42a6      	cmp	r6, r4
 800d8fa:	d109      	bne.n	800d910 <__libc_init_array+0x24>
 800d8fc:	4d0b      	ldr	r5, [pc, #44]	; (800d92c <__libc_init_array+0x40>)
 800d8fe:	4c0c      	ldr	r4, [pc, #48]	; (800d930 <__libc_init_array+0x44>)
 800d900:	f005 fbc2 	bl	8013088 <_init>
 800d904:	1b64      	subs	r4, r4, r5
 800d906:	10a4      	asrs	r4, r4, #2
 800d908:	2600      	movs	r6, #0
 800d90a:	42a6      	cmp	r6, r4
 800d90c:	d105      	bne.n	800d91a <__libc_init_array+0x2e>
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
 800d910:	f855 3b04 	ldr.w	r3, [r5], #4
 800d914:	4798      	blx	r3
 800d916:	3601      	adds	r6, #1
 800d918:	e7ee      	b.n	800d8f8 <__libc_init_array+0xc>
 800d91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d91e:	4798      	blx	r3
 800d920:	3601      	adds	r6, #1
 800d922:	e7f2      	b.n	800d90a <__libc_init_array+0x1e>
 800d924:	08013d98 	.word	0x08013d98
 800d928:	08013d98 	.word	0x08013d98
 800d92c:	08013d98 	.word	0x08013d98
 800d930:	08013d9c 	.word	0x08013d9c

0800d934 <malloc>:
 800d934:	4b02      	ldr	r3, [pc, #8]	; (800d940 <malloc+0xc>)
 800d936:	4601      	mov	r1, r0
 800d938:	6818      	ldr	r0, [r3, #0]
 800d93a:	f000 b885 	b.w	800da48 <_malloc_r>
 800d93e:	bf00      	nop
 800d940:	20000040 	.word	0x20000040

0800d944 <memcpy>:
 800d944:	440a      	add	r2, r1
 800d946:	4291      	cmp	r1, r2
 800d948:	f100 33ff 	add.w	r3, r0, #4294967295
 800d94c:	d100      	bne.n	800d950 <memcpy+0xc>
 800d94e:	4770      	bx	lr
 800d950:	b510      	push	{r4, lr}
 800d952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d95a:	4291      	cmp	r1, r2
 800d95c:	d1f9      	bne.n	800d952 <memcpy+0xe>
 800d95e:	bd10      	pop	{r4, pc}

0800d960 <memset>:
 800d960:	4402      	add	r2, r0
 800d962:	4603      	mov	r3, r0
 800d964:	4293      	cmp	r3, r2
 800d966:	d100      	bne.n	800d96a <memset+0xa>
 800d968:	4770      	bx	lr
 800d96a:	f803 1b01 	strb.w	r1, [r3], #1
 800d96e:	e7f9      	b.n	800d964 <memset+0x4>

0800d970 <_free_r>:
 800d970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d972:	2900      	cmp	r1, #0
 800d974:	d044      	beq.n	800da00 <_free_r+0x90>
 800d976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d97a:	9001      	str	r0, [sp, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f1a1 0404 	sub.w	r4, r1, #4
 800d982:	bfb8      	it	lt
 800d984:	18e4      	addlt	r4, r4, r3
 800d986:	f001 fbed 	bl	800f164 <__malloc_lock>
 800d98a:	4a1e      	ldr	r2, [pc, #120]	; (800da04 <_free_r+0x94>)
 800d98c:	9801      	ldr	r0, [sp, #4]
 800d98e:	6813      	ldr	r3, [r2, #0]
 800d990:	b933      	cbnz	r3, 800d9a0 <_free_r+0x30>
 800d992:	6063      	str	r3, [r4, #4]
 800d994:	6014      	str	r4, [r2, #0]
 800d996:	b003      	add	sp, #12
 800d998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d99c:	f001 bbe8 	b.w	800f170 <__malloc_unlock>
 800d9a0:	42a3      	cmp	r3, r4
 800d9a2:	d908      	bls.n	800d9b6 <_free_r+0x46>
 800d9a4:	6825      	ldr	r5, [r4, #0]
 800d9a6:	1961      	adds	r1, r4, r5
 800d9a8:	428b      	cmp	r3, r1
 800d9aa:	bf01      	itttt	eq
 800d9ac:	6819      	ldreq	r1, [r3, #0]
 800d9ae:	685b      	ldreq	r3, [r3, #4]
 800d9b0:	1949      	addeq	r1, r1, r5
 800d9b2:	6021      	streq	r1, [r4, #0]
 800d9b4:	e7ed      	b.n	800d992 <_free_r+0x22>
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	b10b      	cbz	r3, 800d9c0 <_free_r+0x50>
 800d9bc:	42a3      	cmp	r3, r4
 800d9be:	d9fa      	bls.n	800d9b6 <_free_r+0x46>
 800d9c0:	6811      	ldr	r1, [r2, #0]
 800d9c2:	1855      	adds	r5, r2, r1
 800d9c4:	42a5      	cmp	r5, r4
 800d9c6:	d10b      	bne.n	800d9e0 <_free_r+0x70>
 800d9c8:	6824      	ldr	r4, [r4, #0]
 800d9ca:	4421      	add	r1, r4
 800d9cc:	1854      	adds	r4, r2, r1
 800d9ce:	42a3      	cmp	r3, r4
 800d9d0:	6011      	str	r1, [r2, #0]
 800d9d2:	d1e0      	bne.n	800d996 <_free_r+0x26>
 800d9d4:	681c      	ldr	r4, [r3, #0]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	6053      	str	r3, [r2, #4]
 800d9da:	4421      	add	r1, r4
 800d9dc:	6011      	str	r1, [r2, #0]
 800d9de:	e7da      	b.n	800d996 <_free_r+0x26>
 800d9e0:	d902      	bls.n	800d9e8 <_free_r+0x78>
 800d9e2:	230c      	movs	r3, #12
 800d9e4:	6003      	str	r3, [r0, #0]
 800d9e6:	e7d6      	b.n	800d996 <_free_r+0x26>
 800d9e8:	6825      	ldr	r5, [r4, #0]
 800d9ea:	1961      	adds	r1, r4, r5
 800d9ec:	428b      	cmp	r3, r1
 800d9ee:	bf04      	itt	eq
 800d9f0:	6819      	ldreq	r1, [r3, #0]
 800d9f2:	685b      	ldreq	r3, [r3, #4]
 800d9f4:	6063      	str	r3, [r4, #4]
 800d9f6:	bf04      	itt	eq
 800d9f8:	1949      	addeq	r1, r1, r5
 800d9fa:	6021      	streq	r1, [r4, #0]
 800d9fc:	6054      	str	r4, [r2, #4]
 800d9fe:	e7ca      	b.n	800d996 <_free_r+0x26>
 800da00:	b003      	add	sp, #12
 800da02:	bd30      	pop	{r4, r5, pc}
 800da04:	2000dc6c 	.word	0x2000dc6c

0800da08 <sbrk_aligned>:
 800da08:	b570      	push	{r4, r5, r6, lr}
 800da0a:	4e0e      	ldr	r6, [pc, #56]	; (800da44 <sbrk_aligned+0x3c>)
 800da0c:	460c      	mov	r4, r1
 800da0e:	6831      	ldr	r1, [r6, #0]
 800da10:	4605      	mov	r5, r0
 800da12:	b911      	cbnz	r1, 800da1a <sbrk_aligned+0x12>
 800da14:	f000 fcf6 	bl	800e404 <_sbrk_r>
 800da18:	6030      	str	r0, [r6, #0]
 800da1a:	4621      	mov	r1, r4
 800da1c:	4628      	mov	r0, r5
 800da1e:	f000 fcf1 	bl	800e404 <_sbrk_r>
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	d00a      	beq.n	800da3c <sbrk_aligned+0x34>
 800da26:	1cc4      	adds	r4, r0, #3
 800da28:	f024 0403 	bic.w	r4, r4, #3
 800da2c:	42a0      	cmp	r0, r4
 800da2e:	d007      	beq.n	800da40 <sbrk_aligned+0x38>
 800da30:	1a21      	subs	r1, r4, r0
 800da32:	4628      	mov	r0, r5
 800da34:	f000 fce6 	bl	800e404 <_sbrk_r>
 800da38:	3001      	adds	r0, #1
 800da3a:	d101      	bne.n	800da40 <sbrk_aligned+0x38>
 800da3c:	f04f 34ff 	mov.w	r4, #4294967295
 800da40:	4620      	mov	r0, r4
 800da42:	bd70      	pop	{r4, r5, r6, pc}
 800da44:	2000dc70 	.word	0x2000dc70

0800da48 <_malloc_r>:
 800da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4c:	1ccd      	adds	r5, r1, #3
 800da4e:	f025 0503 	bic.w	r5, r5, #3
 800da52:	3508      	adds	r5, #8
 800da54:	2d0c      	cmp	r5, #12
 800da56:	bf38      	it	cc
 800da58:	250c      	movcc	r5, #12
 800da5a:	2d00      	cmp	r5, #0
 800da5c:	4607      	mov	r7, r0
 800da5e:	db01      	blt.n	800da64 <_malloc_r+0x1c>
 800da60:	42a9      	cmp	r1, r5
 800da62:	d905      	bls.n	800da70 <_malloc_r+0x28>
 800da64:	230c      	movs	r3, #12
 800da66:	603b      	str	r3, [r7, #0]
 800da68:	2600      	movs	r6, #0
 800da6a:	4630      	mov	r0, r6
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	4e2e      	ldr	r6, [pc, #184]	; (800db2c <_malloc_r+0xe4>)
 800da72:	f001 fb77 	bl	800f164 <__malloc_lock>
 800da76:	6833      	ldr	r3, [r6, #0]
 800da78:	461c      	mov	r4, r3
 800da7a:	bb34      	cbnz	r4, 800daca <_malloc_r+0x82>
 800da7c:	4629      	mov	r1, r5
 800da7e:	4638      	mov	r0, r7
 800da80:	f7ff ffc2 	bl	800da08 <sbrk_aligned>
 800da84:	1c43      	adds	r3, r0, #1
 800da86:	4604      	mov	r4, r0
 800da88:	d14d      	bne.n	800db26 <_malloc_r+0xde>
 800da8a:	6834      	ldr	r4, [r6, #0]
 800da8c:	4626      	mov	r6, r4
 800da8e:	2e00      	cmp	r6, #0
 800da90:	d140      	bne.n	800db14 <_malloc_r+0xcc>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	4631      	mov	r1, r6
 800da96:	4638      	mov	r0, r7
 800da98:	eb04 0803 	add.w	r8, r4, r3
 800da9c:	f000 fcb2 	bl	800e404 <_sbrk_r>
 800daa0:	4580      	cmp	r8, r0
 800daa2:	d13a      	bne.n	800db1a <_malloc_r+0xd2>
 800daa4:	6821      	ldr	r1, [r4, #0]
 800daa6:	3503      	adds	r5, #3
 800daa8:	1a6d      	subs	r5, r5, r1
 800daaa:	f025 0503 	bic.w	r5, r5, #3
 800daae:	3508      	adds	r5, #8
 800dab0:	2d0c      	cmp	r5, #12
 800dab2:	bf38      	it	cc
 800dab4:	250c      	movcc	r5, #12
 800dab6:	4629      	mov	r1, r5
 800dab8:	4638      	mov	r0, r7
 800daba:	f7ff ffa5 	bl	800da08 <sbrk_aligned>
 800dabe:	3001      	adds	r0, #1
 800dac0:	d02b      	beq.n	800db1a <_malloc_r+0xd2>
 800dac2:	6823      	ldr	r3, [r4, #0]
 800dac4:	442b      	add	r3, r5
 800dac6:	6023      	str	r3, [r4, #0]
 800dac8:	e00e      	b.n	800dae8 <_malloc_r+0xa0>
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	1b52      	subs	r2, r2, r5
 800dace:	d41e      	bmi.n	800db0e <_malloc_r+0xc6>
 800dad0:	2a0b      	cmp	r2, #11
 800dad2:	d916      	bls.n	800db02 <_malloc_r+0xba>
 800dad4:	1961      	adds	r1, r4, r5
 800dad6:	42a3      	cmp	r3, r4
 800dad8:	6025      	str	r5, [r4, #0]
 800dada:	bf18      	it	ne
 800dadc:	6059      	strne	r1, [r3, #4]
 800dade:	6863      	ldr	r3, [r4, #4]
 800dae0:	bf08      	it	eq
 800dae2:	6031      	streq	r1, [r6, #0]
 800dae4:	5162      	str	r2, [r4, r5]
 800dae6:	604b      	str	r3, [r1, #4]
 800dae8:	4638      	mov	r0, r7
 800daea:	f104 060b 	add.w	r6, r4, #11
 800daee:	f001 fb3f 	bl	800f170 <__malloc_unlock>
 800daf2:	f026 0607 	bic.w	r6, r6, #7
 800daf6:	1d23      	adds	r3, r4, #4
 800daf8:	1af2      	subs	r2, r6, r3
 800dafa:	d0b6      	beq.n	800da6a <_malloc_r+0x22>
 800dafc:	1b9b      	subs	r3, r3, r6
 800dafe:	50a3      	str	r3, [r4, r2]
 800db00:	e7b3      	b.n	800da6a <_malloc_r+0x22>
 800db02:	6862      	ldr	r2, [r4, #4]
 800db04:	42a3      	cmp	r3, r4
 800db06:	bf0c      	ite	eq
 800db08:	6032      	streq	r2, [r6, #0]
 800db0a:	605a      	strne	r2, [r3, #4]
 800db0c:	e7ec      	b.n	800dae8 <_malloc_r+0xa0>
 800db0e:	4623      	mov	r3, r4
 800db10:	6864      	ldr	r4, [r4, #4]
 800db12:	e7b2      	b.n	800da7a <_malloc_r+0x32>
 800db14:	4634      	mov	r4, r6
 800db16:	6876      	ldr	r6, [r6, #4]
 800db18:	e7b9      	b.n	800da8e <_malloc_r+0x46>
 800db1a:	230c      	movs	r3, #12
 800db1c:	603b      	str	r3, [r7, #0]
 800db1e:	4638      	mov	r0, r7
 800db20:	f001 fb26 	bl	800f170 <__malloc_unlock>
 800db24:	e7a1      	b.n	800da6a <_malloc_r+0x22>
 800db26:	6025      	str	r5, [r4, #0]
 800db28:	e7de      	b.n	800dae8 <_malloc_r+0xa0>
 800db2a:	bf00      	nop
 800db2c:	2000dc6c 	.word	0x2000dc6c

0800db30 <__cvt>:
 800db30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	ec55 4b10 	vmov	r4, r5, d0
 800db38:	2d00      	cmp	r5, #0
 800db3a:	460e      	mov	r6, r1
 800db3c:	4619      	mov	r1, r3
 800db3e:	462b      	mov	r3, r5
 800db40:	bfbb      	ittet	lt
 800db42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db46:	461d      	movlt	r5, r3
 800db48:	2300      	movge	r3, #0
 800db4a:	232d      	movlt	r3, #45	; 0x2d
 800db4c:	700b      	strb	r3, [r1, #0]
 800db4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db54:	4691      	mov	r9, r2
 800db56:	f023 0820 	bic.w	r8, r3, #32
 800db5a:	bfbc      	itt	lt
 800db5c:	4622      	movlt	r2, r4
 800db5e:	4614      	movlt	r4, r2
 800db60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db64:	d005      	beq.n	800db72 <__cvt+0x42>
 800db66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db6a:	d100      	bne.n	800db6e <__cvt+0x3e>
 800db6c:	3601      	adds	r6, #1
 800db6e:	2102      	movs	r1, #2
 800db70:	e000      	b.n	800db74 <__cvt+0x44>
 800db72:	2103      	movs	r1, #3
 800db74:	ab03      	add	r3, sp, #12
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	ab02      	add	r3, sp, #8
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	ec45 4b10 	vmov	d0, r4, r5
 800db80:	4653      	mov	r3, sl
 800db82:	4632      	mov	r2, r6
 800db84:	f000 fcfc 	bl	800e580 <_dtoa_r>
 800db88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db8c:	4607      	mov	r7, r0
 800db8e:	d102      	bne.n	800db96 <__cvt+0x66>
 800db90:	f019 0f01 	tst.w	r9, #1
 800db94:	d022      	beq.n	800dbdc <__cvt+0xac>
 800db96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db9a:	eb07 0906 	add.w	r9, r7, r6
 800db9e:	d110      	bne.n	800dbc2 <__cvt+0x92>
 800dba0:	783b      	ldrb	r3, [r7, #0]
 800dba2:	2b30      	cmp	r3, #48	; 0x30
 800dba4:	d10a      	bne.n	800dbbc <__cvt+0x8c>
 800dba6:	2200      	movs	r2, #0
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4620      	mov	r0, r4
 800dbac:	4629      	mov	r1, r5
 800dbae:	f7f2 ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 800dbb2:	b918      	cbnz	r0, 800dbbc <__cvt+0x8c>
 800dbb4:	f1c6 0601 	rsb	r6, r6, #1
 800dbb8:	f8ca 6000 	str.w	r6, [sl]
 800dbbc:	f8da 3000 	ldr.w	r3, [sl]
 800dbc0:	4499      	add	r9, r3
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7f2 ff95 	bl	8000af8 <__aeabi_dcmpeq>
 800dbce:	b108      	cbz	r0, 800dbd4 <__cvt+0xa4>
 800dbd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbd4:	2230      	movs	r2, #48	; 0x30
 800dbd6:	9b03      	ldr	r3, [sp, #12]
 800dbd8:	454b      	cmp	r3, r9
 800dbda:	d307      	bcc.n	800dbec <__cvt+0xbc>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbe0:	1bdb      	subs	r3, r3, r7
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	6013      	str	r3, [r2, #0]
 800dbe6:	b004      	add	sp, #16
 800dbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbec:	1c59      	adds	r1, r3, #1
 800dbee:	9103      	str	r1, [sp, #12]
 800dbf0:	701a      	strb	r2, [r3, #0]
 800dbf2:	e7f0      	b.n	800dbd6 <__cvt+0xa6>

0800dbf4 <__exponent>:
 800dbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2900      	cmp	r1, #0
 800dbfa:	bfb8      	it	lt
 800dbfc:	4249      	neglt	r1, r1
 800dbfe:	f803 2b02 	strb.w	r2, [r3], #2
 800dc02:	bfb4      	ite	lt
 800dc04:	222d      	movlt	r2, #45	; 0x2d
 800dc06:	222b      	movge	r2, #43	; 0x2b
 800dc08:	2909      	cmp	r1, #9
 800dc0a:	7042      	strb	r2, [r0, #1]
 800dc0c:	dd2a      	ble.n	800dc64 <__exponent+0x70>
 800dc0e:	f10d 0407 	add.w	r4, sp, #7
 800dc12:	46a4      	mov	ip, r4
 800dc14:	270a      	movs	r7, #10
 800dc16:	46a6      	mov	lr, r4
 800dc18:	460a      	mov	r2, r1
 800dc1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800dc1e:	fb07 1516 	mls	r5, r7, r6, r1
 800dc22:	3530      	adds	r5, #48	; 0x30
 800dc24:	2a63      	cmp	r2, #99	; 0x63
 800dc26:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dc2e:	4631      	mov	r1, r6
 800dc30:	dcf1      	bgt.n	800dc16 <__exponent+0x22>
 800dc32:	3130      	adds	r1, #48	; 0x30
 800dc34:	f1ae 0502 	sub.w	r5, lr, #2
 800dc38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dc3c:	1c44      	adds	r4, r0, #1
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4561      	cmp	r1, ip
 800dc42:	d30a      	bcc.n	800dc5a <__exponent+0x66>
 800dc44:	f10d 0209 	add.w	r2, sp, #9
 800dc48:	eba2 020e 	sub.w	r2, r2, lr
 800dc4c:	4565      	cmp	r5, ip
 800dc4e:	bf88      	it	hi
 800dc50:	2200      	movhi	r2, #0
 800dc52:	4413      	add	r3, r2
 800dc54:	1a18      	subs	r0, r3, r0
 800dc56:	b003      	add	sp, #12
 800dc58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc62:	e7ed      	b.n	800dc40 <__exponent+0x4c>
 800dc64:	2330      	movs	r3, #48	; 0x30
 800dc66:	3130      	adds	r1, #48	; 0x30
 800dc68:	7083      	strb	r3, [r0, #2]
 800dc6a:	70c1      	strb	r1, [r0, #3]
 800dc6c:	1d03      	adds	r3, r0, #4
 800dc6e:	e7f1      	b.n	800dc54 <__exponent+0x60>

0800dc70 <_printf_float>:
 800dc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc74:	ed2d 8b02 	vpush	{d8}
 800dc78:	b08d      	sub	sp, #52	; 0x34
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc80:	4616      	mov	r6, r2
 800dc82:	461f      	mov	r7, r3
 800dc84:	4605      	mov	r5, r0
 800dc86:	f001 fa69 	bl	800f15c <_localeconv_r>
 800dc8a:	f8d0 a000 	ldr.w	sl, [r0]
 800dc8e:	4650      	mov	r0, sl
 800dc90:	f7f2 fab0 	bl	80001f4 <strlen>
 800dc94:	2300      	movs	r3, #0
 800dc96:	930a      	str	r3, [sp, #40]	; 0x28
 800dc98:	6823      	ldr	r3, [r4, #0]
 800dc9a:	9305      	str	r3, [sp, #20]
 800dc9c:	f8d8 3000 	ldr.w	r3, [r8]
 800dca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dca4:	3307      	adds	r3, #7
 800dca6:	f023 0307 	bic.w	r3, r3, #7
 800dcaa:	f103 0208 	add.w	r2, r3, #8
 800dcae:	f8c8 2000 	str.w	r2, [r8]
 800dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dcba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dcbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dcc2:	9307      	str	r3, [sp, #28]
 800dcc4:	f8cd 8018 	str.w	r8, [sp, #24]
 800dcc8:	ee08 0a10 	vmov	s16, r0
 800dccc:	4b9f      	ldr	r3, [pc, #636]	; (800df4c <_printf_float+0x2dc>)
 800dcce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcd6:	f7f2 ff41 	bl	8000b5c <__aeabi_dcmpun>
 800dcda:	bb88      	cbnz	r0, 800dd40 <_printf_float+0xd0>
 800dcdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dce0:	4b9a      	ldr	r3, [pc, #616]	; (800df4c <_printf_float+0x2dc>)
 800dce2:	f04f 32ff 	mov.w	r2, #4294967295
 800dce6:	f7f2 ff1b 	bl	8000b20 <__aeabi_dcmple>
 800dcea:	bb48      	cbnz	r0, 800dd40 <_printf_float+0xd0>
 800dcec:	2200      	movs	r2, #0
 800dcee:	2300      	movs	r3, #0
 800dcf0:	4640      	mov	r0, r8
 800dcf2:	4649      	mov	r1, r9
 800dcf4:	f7f2 ff0a 	bl	8000b0c <__aeabi_dcmplt>
 800dcf8:	b110      	cbz	r0, 800dd00 <_printf_float+0x90>
 800dcfa:	232d      	movs	r3, #45	; 0x2d
 800dcfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd00:	4b93      	ldr	r3, [pc, #588]	; (800df50 <_printf_float+0x2e0>)
 800dd02:	4894      	ldr	r0, [pc, #592]	; (800df54 <_printf_float+0x2e4>)
 800dd04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dd08:	bf94      	ite	ls
 800dd0a:	4698      	movls	r8, r3
 800dd0c:	4680      	movhi	r8, r0
 800dd0e:	2303      	movs	r3, #3
 800dd10:	6123      	str	r3, [r4, #16]
 800dd12:	9b05      	ldr	r3, [sp, #20]
 800dd14:	f023 0204 	bic.w	r2, r3, #4
 800dd18:	6022      	str	r2, [r4, #0]
 800dd1a:	f04f 0900 	mov.w	r9, #0
 800dd1e:	9700      	str	r7, [sp, #0]
 800dd20:	4633      	mov	r3, r6
 800dd22:	aa0b      	add	r2, sp, #44	; 0x2c
 800dd24:	4621      	mov	r1, r4
 800dd26:	4628      	mov	r0, r5
 800dd28:	f000 f9d8 	bl	800e0dc <_printf_common>
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f040 8090 	bne.w	800de52 <_printf_float+0x1e2>
 800dd32:	f04f 30ff 	mov.w	r0, #4294967295
 800dd36:	b00d      	add	sp, #52	; 0x34
 800dd38:	ecbd 8b02 	vpop	{d8}
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	4642      	mov	r2, r8
 800dd42:	464b      	mov	r3, r9
 800dd44:	4640      	mov	r0, r8
 800dd46:	4649      	mov	r1, r9
 800dd48:	f7f2 ff08 	bl	8000b5c <__aeabi_dcmpun>
 800dd4c:	b140      	cbz	r0, 800dd60 <_printf_float+0xf0>
 800dd4e:	464b      	mov	r3, r9
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	bfbc      	itt	lt
 800dd54:	232d      	movlt	r3, #45	; 0x2d
 800dd56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd5a:	487f      	ldr	r0, [pc, #508]	; (800df58 <_printf_float+0x2e8>)
 800dd5c:	4b7f      	ldr	r3, [pc, #508]	; (800df5c <_printf_float+0x2ec>)
 800dd5e:	e7d1      	b.n	800dd04 <_printf_float+0x94>
 800dd60:	6863      	ldr	r3, [r4, #4]
 800dd62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd66:	9206      	str	r2, [sp, #24]
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	d13f      	bne.n	800ddec <_printf_float+0x17c>
 800dd6c:	2306      	movs	r3, #6
 800dd6e:	6063      	str	r3, [r4, #4]
 800dd70:	9b05      	ldr	r3, [sp, #20]
 800dd72:	6861      	ldr	r1, [r4, #4]
 800dd74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd78:	2300      	movs	r3, #0
 800dd7a:	9303      	str	r3, [sp, #12]
 800dd7c:	ab0a      	add	r3, sp, #40	; 0x28
 800dd7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd82:	ab09      	add	r3, sp, #36	; 0x24
 800dd84:	ec49 8b10 	vmov	d0, r8, r9
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	6022      	str	r2, [r4, #0]
 800dd8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd90:	4628      	mov	r0, r5
 800dd92:	f7ff fecd 	bl	800db30 <__cvt>
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd9a:	2b47      	cmp	r3, #71	; 0x47
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	d108      	bne.n	800ddb2 <_printf_float+0x142>
 800dda0:	1cc8      	adds	r0, r1, #3
 800dda2:	db02      	blt.n	800ddaa <_printf_float+0x13a>
 800dda4:	6863      	ldr	r3, [r4, #4]
 800dda6:	4299      	cmp	r1, r3
 800dda8:	dd41      	ble.n	800de2e <_printf_float+0x1be>
 800ddaa:	f1ab 0b02 	sub.w	fp, fp, #2
 800ddae:	fa5f fb8b 	uxtb.w	fp, fp
 800ddb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ddb6:	d820      	bhi.n	800ddfa <_printf_float+0x18a>
 800ddb8:	3901      	subs	r1, #1
 800ddba:	465a      	mov	r2, fp
 800ddbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ddc0:	9109      	str	r1, [sp, #36]	; 0x24
 800ddc2:	f7ff ff17 	bl	800dbf4 <__exponent>
 800ddc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddc8:	1813      	adds	r3, r2, r0
 800ddca:	2a01      	cmp	r2, #1
 800ddcc:	4681      	mov	r9, r0
 800ddce:	6123      	str	r3, [r4, #16]
 800ddd0:	dc02      	bgt.n	800ddd8 <_printf_float+0x168>
 800ddd2:	6822      	ldr	r2, [r4, #0]
 800ddd4:	07d2      	lsls	r2, r2, #31
 800ddd6:	d501      	bpl.n	800dddc <_printf_float+0x16c>
 800ddd8:	3301      	adds	r3, #1
 800ddda:	6123      	str	r3, [r4, #16]
 800dddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d09c      	beq.n	800dd1e <_printf_float+0xae>
 800dde4:	232d      	movs	r3, #45	; 0x2d
 800dde6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddea:	e798      	b.n	800dd1e <_printf_float+0xae>
 800ddec:	9a06      	ldr	r2, [sp, #24]
 800ddee:	2a47      	cmp	r2, #71	; 0x47
 800ddf0:	d1be      	bne.n	800dd70 <_printf_float+0x100>
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1bc      	bne.n	800dd70 <_printf_float+0x100>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e7b9      	b.n	800dd6e <_printf_float+0xfe>
 800ddfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ddfe:	d118      	bne.n	800de32 <_printf_float+0x1c2>
 800de00:	2900      	cmp	r1, #0
 800de02:	6863      	ldr	r3, [r4, #4]
 800de04:	dd0b      	ble.n	800de1e <_printf_float+0x1ae>
 800de06:	6121      	str	r1, [r4, #16]
 800de08:	b913      	cbnz	r3, 800de10 <_printf_float+0x1a0>
 800de0a:	6822      	ldr	r2, [r4, #0]
 800de0c:	07d0      	lsls	r0, r2, #31
 800de0e:	d502      	bpl.n	800de16 <_printf_float+0x1a6>
 800de10:	3301      	adds	r3, #1
 800de12:	440b      	add	r3, r1
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	65a1      	str	r1, [r4, #88]	; 0x58
 800de18:	f04f 0900 	mov.w	r9, #0
 800de1c:	e7de      	b.n	800dddc <_printf_float+0x16c>
 800de1e:	b913      	cbnz	r3, 800de26 <_printf_float+0x1b6>
 800de20:	6822      	ldr	r2, [r4, #0]
 800de22:	07d2      	lsls	r2, r2, #31
 800de24:	d501      	bpl.n	800de2a <_printf_float+0x1ba>
 800de26:	3302      	adds	r3, #2
 800de28:	e7f4      	b.n	800de14 <_printf_float+0x1a4>
 800de2a:	2301      	movs	r3, #1
 800de2c:	e7f2      	b.n	800de14 <_printf_float+0x1a4>
 800de2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800de32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de34:	4299      	cmp	r1, r3
 800de36:	db05      	blt.n	800de44 <_printf_float+0x1d4>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	6121      	str	r1, [r4, #16]
 800de3c:	07d8      	lsls	r0, r3, #31
 800de3e:	d5ea      	bpl.n	800de16 <_printf_float+0x1a6>
 800de40:	1c4b      	adds	r3, r1, #1
 800de42:	e7e7      	b.n	800de14 <_printf_float+0x1a4>
 800de44:	2900      	cmp	r1, #0
 800de46:	bfd4      	ite	le
 800de48:	f1c1 0202 	rsble	r2, r1, #2
 800de4c:	2201      	movgt	r2, #1
 800de4e:	4413      	add	r3, r2
 800de50:	e7e0      	b.n	800de14 <_printf_float+0x1a4>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	055a      	lsls	r2, r3, #21
 800de56:	d407      	bmi.n	800de68 <_printf_float+0x1f8>
 800de58:	6923      	ldr	r3, [r4, #16]
 800de5a:	4642      	mov	r2, r8
 800de5c:	4631      	mov	r1, r6
 800de5e:	4628      	mov	r0, r5
 800de60:	47b8      	blx	r7
 800de62:	3001      	adds	r0, #1
 800de64:	d12c      	bne.n	800dec0 <_printf_float+0x250>
 800de66:	e764      	b.n	800dd32 <_printf_float+0xc2>
 800de68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de6c:	f240 80e0 	bls.w	800e030 <_printf_float+0x3c0>
 800de70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de74:	2200      	movs	r2, #0
 800de76:	2300      	movs	r3, #0
 800de78:	f7f2 fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d034      	beq.n	800deea <_printf_float+0x27a>
 800de80:	4a37      	ldr	r2, [pc, #220]	; (800df60 <_printf_float+0x2f0>)
 800de82:	2301      	movs	r3, #1
 800de84:	4631      	mov	r1, r6
 800de86:	4628      	mov	r0, r5
 800de88:	47b8      	blx	r7
 800de8a:	3001      	adds	r0, #1
 800de8c:	f43f af51 	beq.w	800dd32 <_printf_float+0xc2>
 800de90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de94:	429a      	cmp	r2, r3
 800de96:	db02      	blt.n	800de9e <_printf_float+0x22e>
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	07d8      	lsls	r0, r3, #31
 800de9c:	d510      	bpl.n	800dec0 <_printf_float+0x250>
 800de9e:	ee18 3a10 	vmov	r3, s16
 800dea2:	4652      	mov	r2, sl
 800dea4:	4631      	mov	r1, r6
 800dea6:	4628      	mov	r0, r5
 800dea8:	47b8      	blx	r7
 800deaa:	3001      	adds	r0, #1
 800deac:	f43f af41 	beq.w	800dd32 <_printf_float+0xc2>
 800deb0:	f04f 0800 	mov.w	r8, #0
 800deb4:	f104 091a 	add.w	r9, r4, #26
 800deb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deba:	3b01      	subs	r3, #1
 800debc:	4543      	cmp	r3, r8
 800debe:	dc09      	bgt.n	800ded4 <_printf_float+0x264>
 800dec0:	6823      	ldr	r3, [r4, #0]
 800dec2:	079b      	lsls	r3, r3, #30
 800dec4:	f100 8105 	bmi.w	800e0d2 <_printf_float+0x462>
 800dec8:	68e0      	ldr	r0, [r4, #12]
 800deca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800decc:	4298      	cmp	r0, r3
 800dece:	bfb8      	it	lt
 800ded0:	4618      	movlt	r0, r3
 800ded2:	e730      	b.n	800dd36 <_printf_float+0xc6>
 800ded4:	2301      	movs	r3, #1
 800ded6:	464a      	mov	r2, r9
 800ded8:	4631      	mov	r1, r6
 800deda:	4628      	mov	r0, r5
 800dedc:	47b8      	blx	r7
 800dede:	3001      	adds	r0, #1
 800dee0:	f43f af27 	beq.w	800dd32 <_printf_float+0xc2>
 800dee4:	f108 0801 	add.w	r8, r8, #1
 800dee8:	e7e6      	b.n	800deb8 <_printf_float+0x248>
 800deea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	dc39      	bgt.n	800df64 <_printf_float+0x2f4>
 800def0:	4a1b      	ldr	r2, [pc, #108]	; (800df60 <_printf_float+0x2f0>)
 800def2:	2301      	movs	r3, #1
 800def4:	4631      	mov	r1, r6
 800def6:	4628      	mov	r0, r5
 800def8:	47b8      	blx	r7
 800defa:	3001      	adds	r0, #1
 800defc:	f43f af19 	beq.w	800dd32 <_printf_float+0xc2>
 800df00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df04:	4313      	orrs	r3, r2
 800df06:	d102      	bne.n	800df0e <_printf_float+0x29e>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	07d9      	lsls	r1, r3, #31
 800df0c:	d5d8      	bpl.n	800dec0 <_printf_float+0x250>
 800df0e:	ee18 3a10 	vmov	r3, s16
 800df12:	4652      	mov	r2, sl
 800df14:	4631      	mov	r1, r6
 800df16:	4628      	mov	r0, r5
 800df18:	47b8      	blx	r7
 800df1a:	3001      	adds	r0, #1
 800df1c:	f43f af09 	beq.w	800dd32 <_printf_float+0xc2>
 800df20:	f04f 0900 	mov.w	r9, #0
 800df24:	f104 0a1a 	add.w	sl, r4, #26
 800df28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2a:	425b      	negs	r3, r3
 800df2c:	454b      	cmp	r3, r9
 800df2e:	dc01      	bgt.n	800df34 <_printf_float+0x2c4>
 800df30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df32:	e792      	b.n	800de5a <_printf_float+0x1ea>
 800df34:	2301      	movs	r3, #1
 800df36:	4652      	mov	r2, sl
 800df38:	4631      	mov	r1, r6
 800df3a:	4628      	mov	r0, r5
 800df3c:	47b8      	blx	r7
 800df3e:	3001      	adds	r0, #1
 800df40:	f43f aef7 	beq.w	800dd32 <_printf_float+0xc2>
 800df44:	f109 0901 	add.w	r9, r9, #1
 800df48:	e7ee      	b.n	800df28 <_printf_float+0x2b8>
 800df4a:	bf00      	nop
 800df4c:	7fefffff 	.word	0x7fefffff
 800df50:	08013744 	.word	0x08013744
 800df54:	08013748 	.word	0x08013748
 800df58:	08013750 	.word	0x08013750
 800df5c:	0801374c 	.word	0x0801374c
 800df60:	08013754 	.word	0x08013754
 800df64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df68:	429a      	cmp	r2, r3
 800df6a:	bfa8      	it	ge
 800df6c:	461a      	movge	r2, r3
 800df6e:	2a00      	cmp	r2, #0
 800df70:	4691      	mov	r9, r2
 800df72:	dc37      	bgt.n	800dfe4 <_printf_float+0x374>
 800df74:	f04f 0b00 	mov.w	fp, #0
 800df78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df7c:	f104 021a 	add.w	r2, r4, #26
 800df80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df82:	9305      	str	r3, [sp, #20]
 800df84:	eba3 0309 	sub.w	r3, r3, r9
 800df88:	455b      	cmp	r3, fp
 800df8a:	dc33      	bgt.n	800dff4 <_printf_float+0x384>
 800df8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df90:	429a      	cmp	r2, r3
 800df92:	db3b      	blt.n	800e00c <_printf_float+0x39c>
 800df94:	6823      	ldr	r3, [r4, #0]
 800df96:	07da      	lsls	r2, r3, #31
 800df98:	d438      	bmi.n	800e00c <_printf_float+0x39c>
 800df9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df9c:	9a05      	ldr	r2, [sp, #20]
 800df9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfa0:	1a9a      	subs	r2, r3, r2
 800dfa2:	eba3 0901 	sub.w	r9, r3, r1
 800dfa6:	4591      	cmp	r9, r2
 800dfa8:	bfa8      	it	ge
 800dfaa:	4691      	movge	r9, r2
 800dfac:	f1b9 0f00 	cmp.w	r9, #0
 800dfb0:	dc35      	bgt.n	800e01e <_printf_float+0x3ae>
 800dfb2:	f04f 0800 	mov.w	r8, #0
 800dfb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfba:	f104 0a1a 	add.w	sl, r4, #26
 800dfbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfc2:	1a9b      	subs	r3, r3, r2
 800dfc4:	eba3 0309 	sub.w	r3, r3, r9
 800dfc8:	4543      	cmp	r3, r8
 800dfca:	f77f af79 	ble.w	800dec0 <_printf_float+0x250>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	4652      	mov	r2, sl
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	47b8      	blx	r7
 800dfd8:	3001      	adds	r0, #1
 800dfda:	f43f aeaa 	beq.w	800dd32 <_printf_float+0xc2>
 800dfde:	f108 0801 	add.w	r8, r8, #1
 800dfe2:	e7ec      	b.n	800dfbe <_printf_float+0x34e>
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	4642      	mov	r2, r8
 800dfea:	4628      	mov	r0, r5
 800dfec:	47b8      	blx	r7
 800dfee:	3001      	adds	r0, #1
 800dff0:	d1c0      	bne.n	800df74 <_printf_float+0x304>
 800dff2:	e69e      	b.n	800dd32 <_printf_float+0xc2>
 800dff4:	2301      	movs	r3, #1
 800dff6:	4631      	mov	r1, r6
 800dff8:	4628      	mov	r0, r5
 800dffa:	9205      	str	r2, [sp, #20]
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f43f ae97 	beq.w	800dd32 <_printf_float+0xc2>
 800e004:	9a05      	ldr	r2, [sp, #20]
 800e006:	f10b 0b01 	add.w	fp, fp, #1
 800e00a:	e7b9      	b.n	800df80 <_printf_float+0x310>
 800e00c:	ee18 3a10 	vmov	r3, s16
 800e010:	4652      	mov	r2, sl
 800e012:	4631      	mov	r1, r6
 800e014:	4628      	mov	r0, r5
 800e016:	47b8      	blx	r7
 800e018:	3001      	adds	r0, #1
 800e01a:	d1be      	bne.n	800df9a <_printf_float+0x32a>
 800e01c:	e689      	b.n	800dd32 <_printf_float+0xc2>
 800e01e:	9a05      	ldr	r2, [sp, #20]
 800e020:	464b      	mov	r3, r9
 800e022:	4442      	add	r2, r8
 800e024:	4631      	mov	r1, r6
 800e026:	4628      	mov	r0, r5
 800e028:	47b8      	blx	r7
 800e02a:	3001      	adds	r0, #1
 800e02c:	d1c1      	bne.n	800dfb2 <_printf_float+0x342>
 800e02e:	e680      	b.n	800dd32 <_printf_float+0xc2>
 800e030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e032:	2a01      	cmp	r2, #1
 800e034:	dc01      	bgt.n	800e03a <_printf_float+0x3ca>
 800e036:	07db      	lsls	r3, r3, #31
 800e038:	d538      	bpl.n	800e0ac <_printf_float+0x43c>
 800e03a:	2301      	movs	r3, #1
 800e03c:	4642      	mov	r2, r8
 800e03e:	4631      	mov	r1, r6
 800e040:	4628      	mov	r0, r5
 800e042:	47b8      	blx	r7
 800e044:	3001      	adds	r0, #1
 800e046:	f43f ae74 	beq.w	800dd32 <_printf_float+0xc2>
 800e04a:	ee18 3a10 	vmov	r3, s16
 800e04e:	4652      	mov	r2, sl
 800e050:	4631      	mov	r1, r6
 800e052:	4628      	mov	r0, r5
 800e054:	47b8      	blx	r7
 800e056:	3001      	adds	r0, #1
 800e058:	f43f ae6b 	beq.w	800dd32 <_printf_float+0xc2>
 800e05c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e060:	2200      	movs	r2, #0
 800e062:	2300      	movs	r3, #0
 800e064:	f7f2 fd48 	bl	8000af8 <__aeabi_dcmpeq>
 800e068:	b9d8      	cbnz	r0, 800e0a2 <_printf_float+0x432>
 800e06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e06c:	f108 0201 	add.w	r2, r8, #1
 800e070:	3b01      	subs	r3, #1
 800e072:	4631      	mov	r1, r6
 800e074:	4628      	mov	r0, r5
 800e076:	47b8      	blx	r7
 800e078:	3001      	adds	r0, #1
 800e07a:	d10e      	bne.n	800e09a <_printf_float+0x42a>
 800e07c:	e659      	b.n	800dd32 <_printf_float+0xc2>
 800e07e:	2301      	movs	r3, #1
 800e080:	4652      	mov	r2, sl
 800e082:	4631      	mov	r1, r6
 800e084:	4628      	mov	r0, r5
 800e086:	47b8      	blx	r7
 800e088:	3001      	adds	r0, #1
 800e08a:	f43f ae52 	beq.w	800dd32 <_printf_float+0xc2>
 800e08e:	f108 0801 	add.w	r8, r8, #1
 800e092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e094:	3b01      	subs	r3, #1
 800e096:	4543      	cmp	r3, r8
 800e098:	dcf1      	bgt.n	800e07e <_printf_float+0x40e>
 800e09a:	464b      	mov	r3, r9
 800e09c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e0a0:	e6dc      	b.n	800de5c <_printf_float+0x1ec>
 800e0a2:	f04f 0800 	mov.w	r8, #0
 800e0a6:	f104 0a1a 	add.w	sl, r4, #26
 800e0aa:	e7f2      	b.n	800e092 <_printf_float+0x422>
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	4642      	mov	r2, r8
 800e0b0:	e7df      	b.n	800e072 <_printf_float+0x402>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	464a      	mov	r2, r9
 800e0b6:	4631      	mov	r1, r6
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	47b8      	blx	r7
 800e0bc:	3001      	adds	r0, #1
 800e0be:	f43f ae38 	beq.w	800dd32 <_printf_float+0xc2>
 800e0c2:	f108 0801 	add.w	r8, r8, #1
 800e0c6:	68e3      	ldr	r3, [r4, #12]
 800e0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0ca:	1a5b      	subs	r3, r3, r1
 800e0cc:	4543      	cmp	r3, r8
 800e0ce:	dcf0      	bgt.n	800e0b2 <_printf_float+0x442>
 800e0d0:	e6fa      	b.n	800dec8 <_printf_float+0x258>
 800e0d2:	f04f 0800 	mov.w	r8, #0
 800e0d6:	f104 0919 	add.w	r9, r4, #25
 800e0da:	e7f4      	b.n	800e0c6 <_printf_float+0x456>

0800e0dc <_printf_common>:
 800e0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e0:	4616      	mov	r6, r2
 800e0e2:	4699      	mov	r9, r3
 800e0e4:	688a      	ldr	r2, [r1, #8]
 800e0e6:	690b      	ldr	r3, [r1, #16]
 800e0e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	bfb8      	it	lt
 800e0f0:	4613      	movlt	r3, r2
 800e0f2:	6033      	str	r3, [r6, #0]
 800e0f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0f8:	4607      	mov	r7, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	b10a      	cbz	r2, 800e102 <_printf_common+0x26>
 800e0fe:	3301      	adds	r3, #1
 800e100:	6033      	str	r3, [r6, #0]
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	0699      	lsls	r1, r3, #26
 800e106:	bf42      	ittt	mi
 800e108:	6833      	ldrmi	r3, [r6, #0]
 800e10a:	3302      	addmi	r3, #2
 800e10c:	6033      	strmi	r3, [r6, #0]
 800e10e:	6825      	ldr	r5, [r4, #0]
 800e110:	f015 0506 	ands.w	r5, r5, #6
 800e114:	d106      	bne.n	800e124 <_printf_common+0x48>
 800e116:	f104 0a19 	add.w	sl, r4, #25
 800e11a:	68e3      	ldr	r3, [r4, #12]
 800e11c:	6832      	ldr	r2, [r6, #0]
 800e11e:	1a9b      	subs	r3, r3, r2
 800e120:	42ab      	cmp	r3, r5
 800e122:	dc26      	bgt.n	800e172 <_printf_common+0x96>
 800e124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e128:	1e13      	subs	r3, r2, #0
 800e12a:	6822      	ldr	r2, [r4, #0]
 800e12c:	bf18      	it	ne
 800e12e:	2301      	movne	r3, #1
 800e130:	0692      	lsls	r2, r2, #26
 800e132:	d42b      	bmi.n	800e18c <_printf_common+0xb0>
 800e134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e138:	4649      	mov	r1, r9
 800e13a:	4638      	mov	r0, r7
 800e13c:	47c0      	blx	r8
 800e13e:	3001      	adds	r0, #1
 800e140:	d01e      	beq.n	800e180 <_printf_common+0xa4>
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	68e5      	ldr	r5, [r4, #12]
 800e146:	6832      	ldr	r2, [r6, #0]
 800e148:	f003 0306 	and.w	r3, r3, #6
 800e14c:	2b04      	cmp	r3, #4
 800e14e:	bf08      	it	eq
 800e150:	1aad      	subeq	r5, r5, r2
 800e152:	68a3      	ldr	r3, [r4, #8]
 800e154:	6922      	ldr	r2, [r4, #16]
 800e156:	bf0c      	ite	eq
 800e158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e15c:	2500      	movne	r5, #0
 800e15e:	4293      	cmp	r3, r2
 800e160:	bfc4      	itt	gt
 800e162:	1a9b      	subgt	r3, r3, r2
 800e164:	18ed      	addgt	r5, r5, r3
 800e166:	2600      	movs	r6, #0
 800e168:	341a      	adds	r4, #26
 800e16a:	42b5      	cmp	r5, r6
 800e16c:	d11a      	bne.n	800e1a4 <_printf_common+0xc8>
 800e16e:	2000      	movs	r0, #0
 800e170:	e008      	b.n	800e184 <_printf_common+0xa8>
 800e172:	2301      	movs	r3, #1
 800e174:	4652      	mov	r2, sl
 800e176:	4649      	mov	r1, r9
 800e178:	4638      	mov	r0, r7
 800e17a:	47c0      	blx	r8
 800e17c:	3001      	adds	r0, #1
 800e17e:	d103      	bne.n	800e188 <_printf_common+0xac>
 800e180:	f04f 30ff 	mov.w	r0, #4294967295
 800e184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e188:	3501      	adds	r5, #1
 800e18a:	e7c6      	b.n	800e11a <_printf_common+0x3e>
 800e18c:	18e1      	adds	r1, r4, r3
 800e18e:	1c5a      	adds	r2, r3, #1
 800e190:	2030      	movs	r0, #48	; 0x30
 800e192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e196:	4422      	add	r2, r4
 800e198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e19c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1a0:	3302      	adds	r3, #2
 800e1a2:	e7c7      	b.n	800e134 <_printf_common+0x58>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	4622      	mov	r2, r4
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	47c0      	blx	r8
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	d0e6      	beq.n	800e180 <_printf_common+0xa4>
 800e1b2:	3601      	adds	r6, #1
 800e1b4:	e7d9      	b.n	800e16a <_printf_common+0x8e>
	...

0800e1b8 <_printf_i>:
 800e1b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1bc:	7e0f      	ldrb	r7, [r1, #24]
 800e1be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1c0:	2f78      	cmp	r7, #120	; 0x78
 800e1c2:	4691      	mov	r9, r2
 800e1c4:	4680      	mov	r8, r0
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	469a      	mov	sl, r3
 800e1ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e1ce:	d807      	bhi.n	800e1e0 <_printf_i+0x28>
 800e1d0:	2f62      	cmp	r7, #98	; 0x62
 800e1d2:	d80a      	bhi.n	800e1ea <_printf_i+0x32>
 800e1d4:	2f00      	cmp	r7, #0
 800e1d6:	f000 80d8 	beq.w	800e38a <_printf_i+0x1d2>
 800e1da:	2f58      	cmp	r7, #88	; 0x58
 800e1dc:	f000 80a3 	beq.w	800e326 <_printf_i+0x16e>
 800e1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1e8:	e03a      	b.n	800e260 <_printf_i+0xa8>
 800e1ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1ee:	2b15      	cmp	r3, #21
 800e1f0:	d8f6      	bhi.n	800e1e0 <_printf_i+0x28>
 800e1f2:	a101      	add	r1, pc, #4	; (adr r1, 800e1f8 <_printf_i+0x40>)
 800e1f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1f8:	0800e251 	.word	0x0800e251
 800e1fc:	0800e265 	.word	0x0800e265
 800e200:	0800e1e1 	.word	0x0800e1e1
 800e204:	0800e1e1 	.word	0x0800e1e1
 800e208:	0800e1e1 	.word	0x0800e1e1
 800e20c:	0800e1e1 	.word	0x0800e1e1
 800e210:	0800e265 	.word	0x0800e265
 800e214:	0800e1e1 	.word	0x0800e1e1
 800e218:	0800e1e1 	.word	0x0800e1e1
 800e21c:	0800e1e1 	.word	0x0800e1e1
 800e220:	0800e1e1 	.word	0x0800e1e1
 800e224:	0800e371 	.word	0x0800e371
 800e228:	0800e295 	.word	0x0800e295
 800e22c:	0800e353 	.word	0x0800e353
 800e230:	0800e1e1 	.word	0x0800e1e1
 800e234:	0800e1e1 	.word	0x0800e1e1
 800e238:	0800e393 	.word	0x0800e393
 800e23c:	0800e1e1 	.word	0x0800e1e1
 800e240:	0800e295 	.word	0x0800e295
 800e244:	0800e1e1 	.word	0x0800e1e1
 800e248:	0800e1e1 	.word	0x0800e1e1
 800e24c:	0800e35b 	.word	0x0800e35b
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	1d1a      	adds	r2, r3, #4
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	602a      	str	r2, [r5, #0]
 800e258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e260:	2301      	movs	r3, #1
 800e262:	e0a3      	b.n	800e3ac <_printf_i+0x1f4>
 800e264:	6820      	ldr	r0, [r4, #0]
 800e266:	6829      	ldr	r1, [r5, #0]
 800e268:	0606      	lsls	r6, r0, #24
 800e26a:	f101 0304 	add.w	r3, r1, #4
 800e26e:	d50a      	bpl.n	800e286 <_printf_i+0xce>
 800e270:	680e      	ldr	r6, [r1, #0]
 800e272:	602b      	str	r3, [r5, #0]
 800e274:	2e00      	cmp	r6, #0
 800e276:	da03      	bge.n	800e280 <_printf_i+0xc8>
 800e278:	232d      	movs	r3, #45	; 0x2d
 800e27a:	4276      	negs	r6, r6
 800e27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e280:	485e      	ldr	r0, [pc, #376]	; (800e3fc <_printf_i+0x244>)
 800e282:	230a      	movs	r3, #10
 800e284:	e019      	b.n	800e2ba <_printf_i+0x102>
 800e286:	680e      	ldr	r6, [r1, #0]
 800e288:	602b      	str	r3, [r5, #0]
 800e28a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e28e:	bf18      	it	ne
 800e290:	b236      	sxthne	r6, r6
 800e292:	e7ef      	b.n	800e274 <_printf_i+0xbc>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	6820      	ldr	r0, [r4, #0]
 800e298:	1d19      	adds	r1, r3, #4
 800e29a:	6029      	str	r1, [r5, #0]
 800e29c:	0601      	lsls	r1, r0, #24
 800e29e:	d501      	bpl.n	800e2a4 <_printf_i+0xec>
 800e2a0:	681e      	ldr	r6, [r3, #0]
 800e2a2:	e002      	b.n	800e2aa <_printf_i+0xf2>
 800e2a4:	0646      	lsls	r6, r0, #25
 800e2a6:	d5fb      	bpl.n	800e2a0 <_printf_i+0xe8>
 800e2a8:	881e      	ldrh	r6, [r3, #0]
 800e2aa:	4854      	ldr	r0, [pc, #336]	; (800e3fc <_printf_i+0x244>)
 800e2ac:	2f6f      	cmp	r7, #111	; 0x6f
 800e2ae:	bf0c      	ite	eq
 800e2b0:	2308      	moveq	r3, #8
 800e2b2:	230a      	movne	r3, #10
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2ba:	6865      	ldr	r5, [r4, #4]
 800e2bc:	60a5      	str	r5, [r4, #8]
 800e2be:	2d00      	cmp	r5, #0
 800e2c0:	bfa2      	ittt	ge
 800e2c2:	6821      	ldrge	r1, [r4, #0]
 800e2c4:	f021 0104 	bicge.w	r1, r1, #4
 800e2c8:	6021      	strge	r1, [r4, #0]
 800e2ca:	b90e      	cbnz	r6, 800e2d0 <_printf_i+0x118>
 800e2cc:	2d00      	cmp	r5, #0
 800e2ce:	d04d      	beq.n	800e36c <_printf_i+0x1b4>
 800e2d0:	4615      	mov	r5, r2
 800e2d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e2d6:	fb03 6711 	mls	r7, r3, r1, r6
 800e2da:	5dc7      	ldrb	r7, [r0, r7]
 800e2dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e2e0:	4637      	mov	r7, r6
 800e2e2:	42bb      	cmp	r3, r7
 800e2e4:	460e      	mov	r6, r1
 800e2e6:	d9f4      	bls.n	800e2d2 <_printf_i+0x11a>
 800e2e8:	2b08      	cmp	r3, #8
 800e2ea:	d10b      	bne.n	800e304 <_printf_i+0x14c>
 800e2ec:	6823      	ldr	r3, [r4, #0]
 800e2ee:	07de      	lsls	r6, r3, #31
 800e2f0:	d508      	bpl.n	800e304 <_printf_i+0x14c>
 800e2f2:	6923      	ldr	r3, [r4, #16]
 800e2f4:	6861      	ldr	r1, [r4, #4]
 800e2f6:	4299      	cmp	r1, r3
 800e2f8:	bfde      	ittt	le
 800e2fa:	2330      	movle	r3, #48	; 0x30
 800e2fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e300:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e304:	1b52      	subs	r2, r2, r5
 800e306:	6122      	str	r2, [r4, #16]
 800e308:	f8cd a000 	str.w	sl, [sp]
 800e30c:	464b      	mov	r3, r9
 800e30e:	aa03      	add	r2, sp, #12
 800e310:	4621      	mov	r1, r4
 800e312:	4640      	mov	r0, r8
 800e314:	f7ff fee2 	bl	800e0dc <_printf_common>
 800e318:	3001      	adds	r0, #1
 800e31a:	d14c      	bne.n	800e3b6 <_printf_i+0x1fe>
 800e31c:	f04f 30ff 	mov.w	r0, #4294967295
 800e320:	b004      	add	sp, #16
 800e322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e326:	4835      	ldr	r0, [pc, #212]	; (800e3fc <_printf_i+0x244>)
 800e328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e32c:	6829      	ldr	r1, [r5, #0]
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	f851 6b04 	ldr.w	r6, [r1], #4
 800e334:	6029      	str	r1, [r5, #0]
 800e336:	061d      	lsls	r5, r3, #24
 800e338:	d514      	bpl.n	800e364 <_printf_i+0x1ac>
 800e33a:	07df      	lsls	r7, r3, #31
 800e33c:	bf44      	itt	mi
 800e33e:	f043 0320 	orrmi.w	r3, r3, #32
 800e342:	6023      	strmi	r3, [r4, #0]
 800e344:	b91e      	cbnz	r6, 800e34e <_printf_i+0x196>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	f023 0320 	bic.w	r3, r3, #32
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	2310      	movs	r3, #16
 800e350:	e7b0      	b.n	800e2b4 <_printf_i+0xfc>
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	f043 0320 	orr.w	r3, r3, #32
 800e358:	6023      	str	r3, [r4, #0]
 800e35a:	2378      	movs	r3, #120	; 0x78
 800e35c:	4828      	ldr	r0, [pc, #160]	; (800e400 <_printf_i+0x248>)
 800e35e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e362:	e7e3      	b.n	800e32c <_printf_i+0x174>
 800e364:	0659      	lsls	r1, r3, #25
 800e366:	bf48      	it	mi
 800e368:	b2b6      	uxthmi	r6, r6
 800e36a:	e7e6      	b.n	800e33a <_printf_i+0x182>
 800e36c:	4615      	mov	r5, r2
 800e36e:	e7bb      	b.n	800e2e8 <_printf_i+0x130>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	6826      	ldr	r6, [r4, #0]
 800e374:	6961      	ldr	r1, [r4, #20]
 800e376:	1d18      	adds	r0, r3, #4
 800e378:	6028      	str	r0, [r5, #0]
 800e37a:	0635      	lsls	r5, r6, #24
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	d501      	bpl.n	800e384 <_printf_i+0x1cc>
 800e380:	6019      	str	r1, [r3, #0]
 800e382:	e002      	b.n	800e38a <_printf_i+0x1d2>
 800e384:	0670      	lsls	r0, r6, #25
 800e386:	d5fb      	bpl.n	800e380 <_printf_i+0x1c8>
 800e388:	8019      	strh	r1, [r3, #0]
 800e38a:	2300      	movs	r3, #0
 800e38c:	6123      	str	r3, [r4, #16]
 800e38e:	4615      	mov	r5, r2
 800e390:	e7ba      	b.n	800e308 <_printf_i+0x150>
 800e392:	682b      	ldr	r3, [r5, #0]
 800e394:	1d1a      	adds	r2, r3, #4
 800e396:	602a      	str	r2, [r5, #0]
 800e398:	681d      	ldr	r5, [r3, #0]
 800e39a:	6862      	ldr	r2, [r4, #4]
 800e39c:	2100      	movs	r1, #0
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f7f1 ff36 	bl	8000210 <memchr>
 800e3a4:	b108      	cbz	r0, 800e3aa <_printf_i+0x1f2>
 800e3a6:	1b40      	subs	r0, r0, r5
 800e3a8:	6060      	str	r0, [r4, #4]
 800e3aa:	6863      	ldr	r3, [r4, #4]
 800e3ac:	6123      	str	r3, [r4, #16]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3b4:	e7a8      	b.n	800e308 <_printf_i+0x150>
 800e3b6:	6923      	ldr	r3, [r4, #16]
 800e3b8:	462a      	mov	r2, r5
 800e3ba:	4649      	mov	r1, r9
 800e3bc:	4640      	mov	r0, r8
 800e3be:	47d0      	blx	sl
 800e3c0:	3001      	adds	r0, #1
 800e3c2:	d0ab      	beq.n	800e31c <_printf_i+0x164>
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	079b      	lsls	r3, r3, #30
 800e3c8:	d413      	bmi.n	800e3f2 <_printf_i+0x23a>
 800e3ca:	68e0      	ldr	r0, [r4, #12]
 800e3cc:	9b03      	ldr	r3, [sp, #12]
 800e3ce:	4298      	cmp	r0, r3
 800e3d0:	bfb8      	it	lt
 800e3d2:	4618      	movlt	r0, r3
 800e3d4:	e7a4      	b.n	800e320 <_printf_i+0x168>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	4632      	mov	r2, r6
 800e3da:	4649      	mov	r1, r9
 800e3dc:	4640      	mov	r0, r8
 800e3de:	47d0      	blx	sl
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	d09b      	beq.n	800e31c <_printf_i+0x164>
 800e3e4:	3501      	adds	r5, #1
 800e3e6:	68e3      	ldr	r3, [r4, #12]
 800e3e8:	9903      	ldr	r1, [sp, #12]
 800e3ea:	1a5b      	subs	r3, r3, r1
 800e3ec:	42ab      	cmp	r3, r5
 800e3ee:	dcf2      	bgt.n	800e3d6 <_printf_i+0x21e>
 800e3f0:	e7eb      	b.n	800e3ca <_printf_i+0x212>
 800e3f2:	2500      	movs	r5, #0
 800e3f4:	f104 0619 	add.w	r6, r4, #25
 800e3f8:	e7f5      	b.n	800e3e6 <_printf_i+0x22e>
 800e3fa:	bf00      	nop
 800e3fc:	08013756 	.word	0x08013756
 800e400:	08013767 	.word	0x08013767

0800e404 <_sbrk_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d06      	ldr	r5, [pc, #24]	; (800e420 <_sbrk_r+0x1c>)
 800e408:	2300      	movs	r3, #0
 800e40a:	4604      	mov	r4, r0
 800e40c:	4608      	mov	r0, r1
 800e40e:	602b      	str	r3, [r5, #0]
 800e410:	f004 fe2c 	bl	801306c <_sbrk>
 800e414:	1c43      	adds	r3, r0, #1
 800e416:	d102      	bne.n	800e41e <_sbrk_r+0x1a>
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	b103      	cbz	r3, 800e41e <_sbrk_r+0x1a>
 800e41c:	6023      	str	r3, [r4, #0]
 800e41e:	bd38      	pop	{r3, r4, r5, pc}
 800e420:	2000dc74 	.word	0x2000dc74

0800e424 <siprintf>:
 800e424:	b40e      	push	{r1, r2, r3}
 800e426:	b500      	push	{lr}
 800e428:	b09c      	sub	sp, #112	; 0x70
 800e42a:	ab1d      	add	r3, sp, #116	; 0x74
 800e42c:	9002      	str	r0, [sp, #8]
 800e42e:	9006      	str	r0, [sp, #24]
 800e430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e434:	4809      	ldr	r0, [pc, #36]	; (800e45c <siprintf+0x38>)
 800e436:	9107      	str	r1, [sp, #28]
 800e438:	9104      	str	r1, [sp, #16]
 800e43a:	4909      	ldr	r1, [pc, #36]	; (800e460 <siprintf+0x3c>)
 800e43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e440:	9105      	str	r1, [sp, #20]
 800e442:	6800      	ldr	r0, [r0, #0]
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	a902      	add	r1, sp, #8
 800e448:	f001 fa8e 	bl	800f968 <_svfiprintf_r>
 800e44c:	9b02      	ldr	r3, [sp, #8]
 800e44e:	2200      	movs	r2, #0
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	b01c      	add	sp, #112	; 0x70
 800e454:	f85d eb04 	ldr.w	lr, [sp], #4
 800e458:	b003      	add	sp, #12
 800e45a:	4770      	bx	lr
 800e45c:	20000040 	.word	0x20000040
 800e460:	ffff0208 	.word	0xffff0208

0800e464 <quorem>:
 800e464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e468:	6903      	ldr	r3, [r0, #16]
 800e46a:	690c      	ldr	r4, [r1, #16]
 800e46c:	42a3      	cmp	r3, r4
 800e46e:	4607      	mov	r7, r0
 800e470:	f2c0 8081 	blt.w	800e576 <quorem+0x112>
 800e474:	3c01      	subs	r4, #1
 800e476:	f101 0814 	add.w	r8, r1, #20
 800e47a:	f100 0514 	add.w	r5, r0, #20
 800e47e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e48c:	3301      	adds	r3, #1
 800e48e:	429a      	cmp	r2, r3
 800e490:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e498:	fbb2 f6f3 	udiv	r6, r2, r3
 800e49c:	d331      	bcc.n	800e502 <quorem+0x9e>
 800e49e:	f04f 0e00 	mov.w	lr, #0
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	46ac      	mov	ip, r5
 800e4a6:	46f2      	mov	sl, lr
 800e4a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e4ac:	b293      	uxth	r3, r2
 800e4ae:	fb06 e303 	mla	r3, r6, r3, lr
 800e4b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	ebaa 0303 	sub.w	r3, sl, r3
 800e4bc:	f8dc a000 	ldr.w	sl, [ip]
 800e4c0:	0c12      	lsrs	r2, r2, #16
 800e4c2:	fa13 f38a 	uxtah	r3, r3, sl
 800e4c6:	fb06 e202 	mla	r2, r6, r2, lr
 800e4ca:	9300      	str	r3, [sp, #0]
 800e4cc:	9b00      	ldr	r3, [sp, #0]
 800e4ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e4d2:	b292      	uxth	r2, r2
 800e4d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e4d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e4dc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e4e0:	4581      	cmp	r9, r0
 800e4e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4e6:	f84c 3b04 	str.w	r3, [ip], #4
 800e4ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e4ee:	d2db      	bcs.n	800e4a8 <quorem+0x44>
 800e4f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e4f4:	b92b      	cbnz	r3, 800e502 <quorem+0x9e>
 800e4f6:	9b01      	ldr	r3, [sp, #4]
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	d32e      	bcc.n	800e55e <quorem+0xfa>
 800e500:	613c      	str	r4, [r7, #16]
 800e502:	4638      	mov	r0, r7
 800e504:	f001 f8bc 	bl	800f680 <__mcmp>
 800e508:	2800      	cmp	r0, #0
 800e50a:	db24      	blt.n	800e556 <quorem+0xf2>
 800e50c:	3601      	adds	r6, #1
 800e50e:	4628      	mov	r0, r5
 800e510:	f04f 0c00 	mov.w	ip, #0
 800e514:	f858 2b04 	ldr.w	r2, [r8], #4
 800e518:	f8d0 e000 	ldr.w	lr, [r0]
 800e51c:	b293      	uxth	r3, r2
 800e51e:	ebac 0303 	sub.w	r3, ip, r3
 800e522:	0c12      	lsrs	r2, r2, #16
 800e524:	fa13 f38e 	uxtah	r3, r3, lr
 800e528:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e52c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e530:	b29b      	uxth	r3, r3
 800e532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e536:	45c1      	cmp	r9, r8
 800e538:	f840 3b04 	str.w	r3, [r0], #4
 800e53c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e540:	d2e8      	bcs.n	800e514 <quorem+0xb0>
 800e542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54a:	b922      	cbnz	r2, 800e556 <quorem+0xf2>
 800e54c:	3b04      	subs	r3, #4
 800e54e:	429d      	cmp	r5, r3
 800e550:	461a      	mov	r2, r3
 800e552:	d30a      	bcc.n	800e56a <quorem+0x106>
 800e554:	613c      	str	r4, [r7, #16]
 800e556:	4630      	mov	r0, r6
 800e558:	b003      	add	sp, #12
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55e:	6812      	ldr	r2, [r2, #0]
 800e560:	3b04      	subs	r3, #4
 800e562:	2a00      	cmp	r2, #0
 800e564:	d1cc      	bne.n	800e500 <quorem+0x9c>
 800e566:	3c01      	subs	r4, #1
 800e568:	e7c7      	b.n	800e4fa <quorem+0x96>
 800e56a:	6812      	ldr	r2, [r2, #0]
 800e56c:	3b04      	subs	r3, #4
 800e56e:	2a00      	cmp	r2, #0
 800e570:	d1f0      	bne.n	800e554 <quorem+0xf0>
 800e572:	3c01      	subs	r4, #1
 800e574:	e7eb      	b.n	800e54e <quorem+0xea>
 800e576:	2000      	movs	r0, #0
 800e578:	e7ee      	b.n	800e558 <quorem+0xf4>
 800e57a:	0000      	movs	r0, r0
 800e57c:	0000      	movs	r0, r0
	...

0800e580 <_dtoa_r>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	ed2d 8b04 	vpush	{d8-d9}
 800e588:	ec57 6b10 	vmov	r6, r7, d0
 800e58c:	b093      	sub	sp, #76	; 0x4c
 800e58e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e590:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e594:	9106      	str	r1, [sp, #24]
 800e596:	ee10 aa10 	vmov	sl, s0
 800e59a:	4604      	mov	r4, r0
 800e59c:	9209      	str	r2, [sp, #36]	; 0x24
 800e59e:	930c      	str	r3, [sp, #48]	; 0x30
 800e5a0:	46bb      	mov	fp, r7
 800e5a2:	b975      	cbnz	r5, 800e5c2 <_dtoa_r+0x42>
 800e5a4:	2010      	movs	r0, #16
 800e5a6:	f7ff f9c5 	bl	800d934 <malloc>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	6260      	str	r0, [r4, #36]	; 0x24
 800e5ae:	b920      	cbnz	r0, 800e5ba <_dtoa_r+0x3a>
 800e5b0:	4ba7      	ldr	r3, [pc, #668]	; (800e850 <_dtoa_r+0x2d0>)
 800e5b2:	21ea      	movs	r1, #234	; 0xea
 800e5b4:	48a7      	ldr	r0, [pc, #668]	; (800e854 <_dtoa_r+0x2d4>)
 800e5b6:	f001 fad7 	bl	800fb68 <__assert_func>
 800e5ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e5be:	6005      	str	r5, [r0, #0]
 800e5c0:	60c5      	str	r5, [r0, #12]
 800e5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5c4:	6819      	ldr	r1, [r3, #0]
 800e5c6:	b151      	cbz	r1, 800e5de <_dtoa_r+0x5e>
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	604a      	str	r2, [r1, #4]
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	4093      	lsls	r3, r2
 800e5d0:	608b      	str	r3, [r1, #8]
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f000 fe12 	bl	800f1fc <_Bfree>
 800e5d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5da:	2200      	movs	r2, #0
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	1e3b      	subs	r3, r7, #0
 800e5e0:	bfaa      	itet	ge
 800e5e2:	2300      	movge	r3, #0
 800e5e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e5e8:	f8c8 3000 	strge.w	r3, [r8]
 800e5ec:	4b9a      	ldr	r3, [pc, #616]	; (800e858 <_dtoa_r+0x2d8>)
 800e5ee:	bfbc      	itt	lt
 800e5f0:	2201      	movlt	r2, #1
 800e5f2:	f8c8 2000 	strlt.w	r2, [r8]
 800e5f6:	ea33 030b 	bics.w	r3, r3, fp
 800e5fa:	d11b      	bne.n	800e634 <_dtoa_r+0xb4>
 800e5fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800e602:	6013      	str	r3, [r2, #0]
 800e604:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e608:	4333      	orrs	r3, r6
 800e60a:	f000 8592 	beq.w	800f132 <_dtoa_r+0xbb2>
 800e60e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e610:	b963      	cbnz	r3, 800e62c <_dtoa_r+0xac>
 800e612:	4b92      	ldr	r3, [pc, #584]	; (800e85c <_dtoa_r+0x2dc>)
 800e614:	e022      	b.n	800e65c <_dtoa_r+0xdc>
 800e616:	4b92      	ldr	r3, [pc, #584]	; (800e860 <_dtoa_r+0x2e0>)
 800e618:	9301      	str	r3, [sp, #4]
 800e61a:	3308      	adds	r3, #8
 800e61c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e61e:	6013      	str	r3, [r2, #0]
 800e620:	9801      	ldr	r0, [sp, #4]
 800e622:	b013      	add	sp, #76	; 0x4c
 800e624:	ecbd 8b04 	vpop	{d8-d9}
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	4b8b      	ldr	r3, [pc, #556]	; (800e85c <_dtoa_r+0x2dc>)
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	3303      	adds	r3, #3
 800e632:	e7f3      	b.n	800e61c <_dtoa_r+0x9c>
 800e634:	2200      	movs	r2, #0
 800e636:	2300      	movs	r3, #0
 800e638:	4650      	mov	r0, sl
 800e63a:	4659      	mov	r1, fp
 800e63c:	f7f2 fa5c 	bl	8000af8 <__aeabi_dcmpeq>
 800e640:	ec4b ab19 	vmov	d9, sl, fp
 800e644:	4680      	mov	r8, r0
 800e646:	b158      	cbz	r0, 800e660 <_dtoa_r+0xe0>
 800e648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e64a:	2301      	movs	r3, #1
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 856b 	beq.w	800f12c <_dtoa_r+0xbac>
 800e656:	4883      	ldr	r0, [pc, #524]	; (800e864 <_dtoa_r+0x2e4>)
 800e658:	6018      	str	r0, [r3, #0]
 800e65a:	1e43      	subs	r3, r0, #1
 800e65c:	9301      	str	r3, [sp, #4]
 800e65e:	e7df      	b.n	800e620 <_dtoa_r+0xa0>
 800e660:	ec4b ab10 	vmov	d0, sl, fp
 800e664:	aa10      	add	r2, sp, #64	; 0x40
 800e666:	a911      	add	r1, sp, #68	; 0x44
 800e668:	4620      	mov	r0, r4
 800e66a:	f001 f8af 	bl	800f7cc <__d2b>
 800e66e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e672:	ee08 0a10 	vmov	s16, r0
 800e676:	2d00      	cmp	r5, #0
 800e678:	f000 8084 	beq.w	800e784 <_dtoa_r+0x204>
 800e67c:	ee19 3a90 	vmov	r3, s19
 800e680:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e684:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e688:	4656      	mov	r6, sl
 800e68a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e68e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e692:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e696:	4b74      	ldr	r3, [pc, #464]	; (800e868 <_dtoa_r+0x2e8>)
 800e698:	2200      	movs	r2, #0
 800e69a:	4630      	mov	r0, r6
 800e69c:	4639      	mov	r1, r7
 800e69e:	f7f1 fe0b 	bl	80002b8 <__aeabi_dsub>
 800e6a2:	a365      	add	r3, pc, #404	; (adr r3, 800e838 <_dtoa_r+0x2b8>)
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	f7f1 ffbe 	bl	8000628 <__aeabi_dmul>
 800e6ac:	a364      	add	r3, pc, #400	; (adr r3, 800e840 <_dtoa_r+0x2c0>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	f7f1 fe03 	bl	80002bc <__adddf3>
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	460f      	mov	r7, r1
 800e6bc:	f7f1 ff4a 	bl	8000554 <__aeabi_i2d>
 800e6c0:	a361      	add	r3, pc, #388	; (adr r3, 800e848 <_dtoa_r+0x2c8>)
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c6:	f7f1 ffaf 	bl	8000628 <__aeabi_dmul>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	f7f1 fdf3 	bl	80002bc <__adddf3>
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	460f      	mov	r7, r1
 800e6da:	f7f2 fa55 	bl	8000b88 <__aeabi_d2iz>
 800e6de:	2200      	movs	r2, #0
 800e6e0:	9000      	str	r0, [sp, #0]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	f7f2 fa10 	bl	8000b0c <__aeabi_dcmplt>
 800e6ec:	b150      	cbz	r0, 800e704 <_dtoa_r+0x184>
 800e6ee:	9800      	ldr	r0, [sp, #0]
 800e6f0:	f7f1 ff30 	bl	8000554 <__aeabi_i2d>
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	f7f2 f9fe 	bl	8000af8 <__aeabi_dcmpeq>
 800e6fc:	b910      	cbnz	r0, 800e704 <_dtoa_r+0x184>
 800e6fe:	9b00      	ldr	r3, [sp, #0]
 800e700:	3b01      	subs	r3, #1
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	9b00      	ldr	r3, [sp, #0]
 800e706:	2b16      	cmp	r3, #22
 800e708:	d85a      	bhi.n	800e7c0 <_dtoa_r+0x240>
 800e70a:	9a00      	ldr	r2, [sp, #0]
 800e70c:	4b57      	ldr	r3, [pc, #348]	; (800e86c <_dtoa_r+0x2ec>)
 800e70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	ec51 0b19 	vmov	r0, r1, d9
 800e71a:	f7f2 f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800e71e:	2800      	cmp	r0, #0
 800e720:	d050      	beq.n	800e7c4 <_dtoa_r+0x244>
 800e722:	9b00      	ldr	r3, [sp, #0]
 800e724:	3b01      	subs	r3, #1
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	2300      	movs	r3, #0
 800e72a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e72e:	1b5d      	subs	r5, r3, r5
 800e730:	1e6b      	subs	r3, r5, #1
 800e732:	9305      	str	r3, [sp, #20]
 800e734:	bf45      	ittet	mi
 800e736:	f1c5 0301 	rsbmi	r3, r5, #1
 800e73a:	9304      	strmi	r3, [sp, #16]
 800e73c:	2300      	movpl	r3, #0
 800e73e:	2300      	movmi	r3, #0
 800e740:	bf4c      	ite	mi
 800e742:	9305      	strmi	r3, [sp, #20]
 800e744:	9304      	strpl	r3, [sp, #16]
 800e746:	9b00      	ldr	r3, [sp, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	db3d      	blt.n	800e7c8 <_dtoa_r+0x248>
 800e74c:	9b05      	ldr	r3, [sp, #20]
 800e74e:	9a00      	ldr	r2, [sp, #0]
 800e750:	920a      	str	r2, [sp, #40]	; 0x28
 800e752:	4413      	add	r3, r2
 800e754:	9305      	str	r3, [sp, #20]
 800e756:	2300      	movs	r3, #0
 800e758:	9307      	str	r3, [sp, #28]
 800e75a:	9b06      	ldr	r3, [sp, #24]
 800e75c:	2b09      	cmp	r3, #9
 800e75e:	f200 8089 	bhi.w	800e874 <_dtoa_r+0x2f4>
 800e762:	2b05      	cmp	r3, #5
 800e764:	bfc4      	itt	gt
 800e766:	3b04      	subgt	r3, #4
 800e768:	9306      	strgt	r3, [sp, #24]
 800e76a:	9b06      	ldr	r3, [sp, #24]
 800e76c:	f1a3 0302 	sub.w	r3, r3, #2
 800e770:	bfcc      	ite	gt
 800e772:	2500      	movgt	r5, #0
 800e774:	2501      	movle	r5, #1
 800e776:	2b03      	cmp	r3, #3
 800e778:	f200 8087 	bhi.w	800e88a <_dtoa_r+0x30a>
 800e77c:	e8df f003 	tbb	[pc, r3]
 800e780:	59383a2d 	.word	0x59383a2d
 800e784:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e788:	441d      	add	r5, r3
 800e78a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e78e:	2b20      	cmp	r3, #32
 800e790:	bfc1      	itttt	gt
 800e792:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e796:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e79a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e79e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e7a2:	bfda      	itte	le
 800e7a4:	f1c3 0320 	rsble	r3, r3, #32
 800e7a8:	fa06 f003 	lslle.w	r0, r6, r3
 800e7ac:	4318      	orrgt	r0, r3
 800e7ae:	f7f1 fec1 	bl	8000534 <__aeabi_ui2d>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e7ba:	3d01      	subs	r5, #1
 800e7bc:	930e      	str	r3, [sp, #56]	; 0x38
 800e7be:	e76a      	b.n	800e696 <_dtoa_r+0x116>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e7b2      	b.n	800e72a <_dtoa_r+0x1aa>
 800e7c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e7c6:	e7b1      	b.n	800e72c <_dtoa_r+0x1ac>
 800e7c8:	9b04      	ldr	r3, [sp, #16]
 800e7ca:	9a00      	ldr	r2, [sp, #0]
 800e7cc:	1a9b      	subs	r3, r3, r2
 800e7ce:	9304      	str	r3, [sp, #16]
 800e7d0:	4253      	negs	r3, r2
 800e7d2:	9307      	str	r3, [sp, #28]
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7d8:	e7bf      	b.n	800e75a <_dtoa_r+0x1da>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	9308      	str	r3, [sp, #32]
 800e7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	dc55      	bgt.n	800e890 <_dtoa_r+0x310>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ee:	e00c      	b.n	800e80a <_dtoa_r+0x28a>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e7f3      	b.n	800e7dc <_dtoa_r+0x25c>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7f8:	9308      	str	r3, [sp, #32]
 800e7fa:	9b00      	ldr	r3, [sp, #0]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	9302      	str	r3, [sp, #8]
 800e800:	3301      	adds	r3, #1
 800e802:	2b01      	cmp	r3, #1
 800e804:	9303      	str	r3, [sp, #12]
 800e806:	bfb8      	it	lt
 800e808:	2301      	movlt	r3, #1
 800e80a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e80c:	2200      	movs	r2, #0
 800e80e:	6042      	str	r2, [r0, #4]
 800e810:	2204      	movs	r2, #4
 800e812:	f102 0614 	add.w	r6, r2, #20
 800e816:	429e      	cmp	r6, r3
 800e818:	6841      	ldr	r1, [r0, #4]
 800e81a:	d93d      	bls.n	800e898 <_dtoa_r+0x318>
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fcad 	bl	800f17c <_Balloc>
 800e822:	9001      	str	r0, [sp, #4]
 800e824:	2800      	cmp	r0, #0
 800e826:	d13b      	bne.n	800e8a0 <_dtoa_r+0x320>
 800e828:	4b11      	ldr	r3, [pc, #68]	; (800e870 <_dtoa_r+0x2f0>)
 800e82a:	4602      	mov	r2, r0
 800e82c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e830:	e6c0      	b.n	800e5b4 <_dtoa_r+0x34>
 800e832:	2301      	movs	r3, #1
 800e834:	e7df      	b.n	800e7f6 <_dtoa_r+0x276>
 800e836:	bf00      	nop
 800e838:	636f4361 	.word	0x636f4361
 800e83c:	3fd287a7 	.word	0x3fd287a7
 800e840:	8b60c8b3 	.word	0x8b60c8b3
 800e844:	3fc68a28 	.word	0x3fc68a28
 800e848:	509f79fb 	.word	0x509f79fb
 800e84c:	3fd34413 	.word	0x3fd34413
 800e850:	08013785 	.word	0x08013785
 800e854:	0801379c 	.word	0x0801379c
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	08013781 	.word	0x08013781
 800e860:	08013778 	.word	0x08013778
 800e864:	08013755 	.word	0x08013755
 800e868:	3ff80000 	.word	0x3ff80000
 800e86c:	08013890 	.word	0x08013890
 800e870:	080137f7 	.word	0x080137f7
 800e874:	2501      	movs	r5, #1
 800e876:	2300      	movs	r3, #0
 800e878:	9306      	str	r3, [sp, #24]
 800e87a:	9508      	str	r5, [sp, #32]
 800e87c:	f04f 33ff 	mov.w	r3, #4294967295
 800e880:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e884:	2200      	movs	r2, #0
 800e886:	2312      	movs	r3, #18
 800e888:	e7b0      	b.n	800e7ec <_dtoa_r+0x26c>
 800e88a:	2301      	movs	r3, #1
 800e88c:	9308      	str	r3, [sp, #32]
 800e88e:	e7f5      	b.n	800e87c <_dtoa_r+0x2fc>
 800e890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e892:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e896:	e7b8      	b.n	800e80a <_dtoa_r+0x28a>
 800e898:	3101      	adds	r1, #1
 800e89a:	6041      	str	r1, [r0, #4]
 800e89c:	0052      	lsls	r2, r2, #1
 800e89e:	e7b8      	b.n	800e812 <_dtoa_r+0x292>
 800e8a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8a2:	9a01      	ldr	r2, [sp, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	9b03      	ldr	r3, [sp, #12]
 800e8a8:	2b0e      	cmp	r3, #14
 800e8aa:	f200 809d 	bhi.w	800e9e8 <_dtoa_r+0x468>
 800e8ae:	2d00      	cmp	r5, #0
 800e8b0:	f000 809a 	beq.w	800e9e8 <_dtoa_r+0x468>
 800e8b4:	9b00      	ldr	r3, [sp, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	dd32      	ble.n	800e920 <_dtoa_r+0x3a0>
 800e8ba:	4ab7      	ldr	r2, [pc, #732]	; (800eb98 <_dtoa_r+0x618>)
 800e8bc:	f003 030f 	and.w	r3, r3, #15
 800e8c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e8c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8c8:	9b00      	ldr	r3, [sp, #0]
 800e8ca:	05d8      	lsls	r0, r3, #23
 800e8cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e8d0:	d516      	bpl.n	800e900 <_dtoa_r+0x380>
 800e8d2:	4bb2      	ldr	r3, [pc, #712]	; (800eb9c <_dtoa_r+0x61c>)
 800e8d4:	ec51 0b19 	vmov	r0, r1, d9
 800e8d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8dc:	f7f1 ffce 	bl	800087c <__aeabi_ddiv>
 800e8e0:	f007 070f 	and.w	r7, r7, #15
 800e8e4:	4682      	mov	sl, r0
 800e8e6:	468b      	mov	fp, r1
 800e8e8:	2503      	movs	r5, #3
 800e8ea:	4eac      	ldr	r6, [pc, #688]	; (800eb9c <_dtoa_r+0x61c>)
 800e8ec:	b957      	cbnz	r7, 800e904 <_dtoa_r+0x384>
 800e8ee:	4642      	mov	r2, r8
 800e8f0:	464b      	mov	r3, r9
 800e8f2:	4650      	mov	r0, sl
 800e8f4:	4659      	mov	r1, fp
 800e8f6:	f7f1 ffc1 	bl	800087c <__aeabi_ddiv>
 800e8fa:	4682      	mov	sl, r0
 800e8fc:	468b      	mov	fp, r1
 800e8fe:	e028      	b.n	800e952 <_dtoa_r+0x3d2>
 800e900:	2502      	movs	r5, #2
 800e902:	e7f2      	b.n	800e8ea <_dtoa_r+0x36a>
 800e904:	07f9      	lsls	r1, r7, #31
 800e906:	d508      	bpl.n	800e91a <_dtoa_r+0x39a>
 800e908:	4640      	mov	r0, r8
 800e90a:	4649      	mov	r1, r9
 800e90c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e910:	f7f1 fe8a 	bl	8000628 <__aeabi_dmul>
 800e914:	3501      	adds	r5, #1
 800e916:	4680      	mov	r8, r0
 800e918:	4689      	mov	r9, r1
 800e91a:	107f      	asrs	r7, r7, #1
 800e91c:	3608      	adds	r6, #8
 800e91e:	e7e5      	b.n	800e8ec <_dtoa_r+0x36c>
 800e920:	f000 809b 	beq.w	800ea5a <_dtoa_r+0x4da>
 800e924:	9b00      	ldr	r3, [sp, #0]
 800e926:	4f9d      	ldr	r7, [pc, #628]	; (800eb9c <_dtoa_r+0x61c>)
 800e928:	425e      	negs	r6, r3
 800e92a:	4b9b      	ldr	r3, [pc, #620]	; (800eb98 <_dtoa_r+0x618>)
 800e92c:	f006 020f 	and.w	r2, r6, #15
 800e930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	ec51 0b19 	vmov	r0, r1, d9
 800e93c:	f7f1 fe74 	bl	8000628 <__aeabi_dmul>
 800e940:	1136      	asrs	r6, r6, #4
 800e942:	4682      	mov	sl, r0
 800e944:	468b      	mov	fp, r1
 800e946:	2300      	movs	r3, #0
 800e948:	2502      	movs	r5, #2
 800e94a:	2e00      	cmp	r6, #0
 800e94c:	d17a      	bne.n	800ea44 <_dtoa_r+0x4c4>
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1d3      	bne.n	800e8fa <_dtoa_r+0x37a>
 800e952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 8082 	beq.w	800ea5e <_dtoa_r+0x4de>
 800e95a:	4b91      	ldr	r3, [pc, #580]	; (800eba0 <_dtoa_r+0x620>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	4650      	mov	r0, sl
 800e960:	4659      	mov	r1, fp
 800e962:	f7f2 f8d3 	bl	8000b0c <__aeabi_dcmplt>
 800e966:	2800      	cmp	r0, #0
 800e968:	d079      	beq.n	800ea5e <_dtoa_r+0x4de>
 800e96a:	9b03      	ldr	r3, [sp, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d076      	beq.n	800ea5e <_dtoa_r+0x4de>
 800e970:	9b02      	ldr	r3, [sp, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	dd36      	ble.n	800e9e4 <_dtoa_r+0x464>
 800e976:	9b00      	ldr	r3, [sp, #0]
 800e978:	4650      	mov	r0, sl
 800e97a:	4659      	mov	r1, fp
 800e97c:	1e5f      	subs	r7, r3, #1
 800e97e:	2200      	movs	r2, #0
 800e980:	4b88      	ldr	r3, [pc, #544]	; (800eba4 <_dtoa_r+0x624>)
 800e982:	f7f1 fe51 	bl	8000628 <__aeabi_dmul>
 800e986:	9e02      	ldr	r6, [sp, #8]
 800e988:	4682      	mov	sl, r0
 800e98a:	468b      	mov	fp, r1
 800e98c:	3501      	adds	r5, #1
 800e98e:	4628      	mov	r0, r5
 800e990:	f7f1 fde0 	bl	8000554 <__aeabi_i2d>
 800e994:	4652      	mov	r2, sl
 800e996:	465b      	mov	r3, fp
 800e998:	f7f1 fe46 	bl	8000628 <__aeabi_dmul>
 800e99c:	4b82      	ldr	r3, [pc, #520]	; (800eba8 <_dtoa_r+0x628>)
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f7f1 fc8c 	bl	80002bc <__adddf3>
 800e9a4:	46d0      	mov	r8, sl
 800e9a6:	46d9      	mov	r9, fp
 800e9a8:	4682      	mov	sl, r0
 800e9aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e9ae:	2e00      	cmp	r6, #0
 800e9b0:	d158      	bne.n	800ea64 <_dtoa_r+0x4e4>
 800e9b2:	4b7e      	ldr	r3, [pc, #504]	; (800ebac <_dtoa_r+0x62c>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f1 fc7d 	bl	80002b8 <__aeabi_dsub>
 800e9be:	4652      	mov	r2, sl
 800e9c0:	465b      	mov	r3, fp
 800e9c2:	4680      	mov	r8, r0
 800e9c4:	4689      	mov	r9, r1
 800e9c6:	f7f2 f8bf 	bl	8000b48 <__aeabi_dcmpgt>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	f040 8295 	bne.w	800eefa <_dtoa_r+0x97a>
 800e9d0:	4652      	mov	r2, sl
 800e9d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	4649      	mov	r1, r9
 800e9da:	f7f2 f897 	bl	8000b0c <__aeabi_dcmplt>
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	f040 8289 	bne.w	800eef6 <_dtoa_r+0x976>
 800e9e4:	ec5b ab19 	vmov	sl, fp, d9
 800e9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f2c0 8148 	blt.w	800ec80 <_dtoa_r+0x700>
 800e9f0:	9a00      	ldr	r2, [sp, #0]
 800e9f2:	2a0e      	cmp	r2, #14
 800e9f4:	f300 8144 	bgt.w	800ec80 <_dtoa_r+0x700>
 800e9f8:	4b67      	ldr	r3, [pc, #412]	; (800eb98 <_dtoa_r+0x618>)
 800e9fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f280 80d5 	bge.w	800ebb4 <_dtoa_r+0x634>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f300 80d1 	bgt.w	800ebb4 <_dtoa_r+0x634>
 800ea12:	f040 826f 	bne.w	800eef4 <_dtoa_r+0x974>
 800ea16:	4b65      	ldr	r3, [pc, #404]	; (800ebac <_dtoa_r+0x62c>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	4640      	mov	r0, r8
 800ea1c:	4649      	mov	r1, r9
 800ea1e:	f7f1 fe03 	bl	8000628 <__aeabi_dmul>
 800ea22:	4652      	mov	r2, sl
 800ea24:	465b      	mov	r3, fp
 800ea26:	f7f2 f885 	bl	8000b34 <__aeabi_dcmpge>
 800ea2a:	9e03      	ldr	r6, [sp, #12]
 800ea2c:	4637      	mov	r7, r6
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f040 8245 	bne.w	800eebe <_dtoa_r+0x93e>
 800ea34:	9d01      	ldr	r5, [sp, #4]
 800ea36:	2331      	movs	r3, #49	; 0x31
 800ea38:	f805 3b01 	strb.w	r3, [r5], #1
 800ea3c:	9b00      	ldr	r3, [sp, #0]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	e240      	b.n	800eec6 <_dtoa_r+0x946>
 800ea44:	07f2      	lsls	r2, r6, #31
 800ea46:	d505      	bpl.n	800ea54 <_dtoa_r+0x4d4>
 800ea48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea4c:	f7f1 fdec 	bl	8000628 <__aeabi_dmul>
 800ea50:	3501      	adds	r5, #1
 800ea52:	2301      	movs	r3, #1
 800ea54:	1076      	asrs	r6, r6, #1
 800ea56:	3708      	adds	r7, #8
 800ea58:	e777      	b.n	800e94a <_dtoa_r+0x3ca>
 800ea5a:	2502      	movs	r5, #2
 800ea5c:	e779      	b.n	800e952 <_dtoa_r+0x3d2>
 800ea5e:	9f00      	ldr	r7, [sp, #0]
 800ea60:	9e03      	ldr	r6, [sp, #12]
 800ea62:	e794      	b.n	800e98e <_dtoa_r+0x40e>
 800ea64:	9901      	ldr	r1, [sp, #4]
 800ea66:	4b4c      	ldr	r3, [pc, #304]	; (800eb98 <_dtoa_r+0x618>)
 800ea68:	4431      	add	r1, r6
 800ea6a:	910d      	str	r1, [sp, #52]	; 0x34
 800ea6c:	9908      	ldr	r1, [sp, #32]
 800ea6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea76:	2900      	cmp	r1, #0
 800ea78:	d043      	beq.n	800eb02 <_dtoa_r+0x582>
 800ea7a:	494d      	ldr	r1, [pc, #308]	; (800ebb0 <_dtoa_r+0x630>)
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f7f1 fefd 	bl	800087c <__aeabi_ddiv>
 800ea82:	4652      	mov	r2, sl
 800ea84:	465b      	mov	r3, fp
 800ea86:	f7f1 fc17 	bl	80002b8 <__aeabi_dsub>
 800ea8a:	9d01      	ldr	r5, [sp, #4]
 800ea8c:	4682      	mov	sl, r0
 800ea8e:	468b      	mov	fp, r1
 800ea90:	4649      	mov	r1, r9
 800ea92:	4640      	mov	r0, r8
 800ea94:	f7f2 f878 	bl	8000b88 <__aeabi_d2iz>
 800ea98:	4606      	mov	r6, r0
 800ea9a:	f7f1 fd5b 	bl	8000554 <__aeabi_i2d>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	4649      	mov	r1, r9
 800eaa6:	f7f1 fc07 	bl	80002b8 <__aeabi_dsub>
 800eaaa:	3630      	adds	r6, #48	; 0x30
 800eaac:	f805 6b01 	strb.w	r6, [r5], #1
 800eab0:	4652      	mov	r2, sl
 800eab2:	465b      	mov	r3, fp
 800eab4:	4680      	mov	r8, r0
 800eab6:	4689      	mov	r9, r1
 800eab8:	f7f2 f828 	bl	8000b0c <__aeabi_dcmplt>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d163      	bne.n	800eb88 <_dtoa_r+0x608>
 800eac0:	4642      	mov	r2, r8
 800eac2:	464b      	mov	r3, r9
 800eac4:	4936      	ldr	r1, [pc, #216]	; (800eba0 <_dtoa_r+0x620>)
 800eac6:	2000      	movs	r0, #0
 800eac8:	f7f1 fbf6 	bl	80002b8 <__aeabi_dsub>
 800eacc:	4652      	mov	r2, sl
 800eace:	465b      	mov	r3, fp
 800ead0:	f7f2 f81c 	bl	8000b0c <__aeabi_dcmplt>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f040 80b5 	bne.w	800ec44 <_dtoa_r+0x6c4>
 800eada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eadc:	429d      	cmp	r5, r3
 800eade:	d081      	beq.n	800e9e4 <_dtoa_r+0x464>
 800eae0:	4b30      	ldr	r3, [pc, #192]	; (800eba4 <_dtoa_r+0x624>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	4650      	mov	r0, sl
 800eae6:	4659      	mov	r1, fp
 800eae8:	f7f1 fd9e 	bl	8000628 <__aeabi_dmul>
 800eaec:	4b2d      	ldr	r3, [pc, #180]	; (800eba4 <_dtoa_r+0x624>)
 800eaee:	4682      	mov	sl, r0
 800eaf0:	468b      	mov	fp, r1
 800eaf2:	4640      	mov	r0, r8
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f7f1 fd96 	bl	8000628 <__aeabi_dmul>
 800eafc:	4680      	mov	r8, r0
 800eafe:	4689      	mov	r9, r1
 800eb00:	e7c6      	b.n	800ea90 <_dtoa_r+0x510>
 800eb02:	4650      	mov	r0, sl
 800eb04:	4659      	mov	r1, fp
 800eb06:	f7f1 fd8f 	bl	8000628 <__aeabi_dmul>
 800eb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb0c:	9d01      	ldr	r5, [sp, #4]
 800eb0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb10:	4682      	mov	sl, r0
 800eb12:	468b      	mov	fp, r1
 800eb14:	4649      	mov	r1, r9
 800eb16:	4640      	mov	r0, r8
 800eb18:	f7f2 f836 	bl	8000b88 <__aeabi_d2iz>
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	f7f1 fd19 	bl	8000554 <__aeabi_i2d>
 800eb22:	3630      	adds	r6, #48	; 0x30
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	4640      	mov	r0, r8
 800eb2a:	4649      	mov	r1, r9
 800eb2c:	f7f1 fbc4 	bl	80002b8 <__aeabi_dsub>
 800eb30:	f805 6b01 	strb.w	r6, [r5], #1
 800eb34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb36:	429d      	cmp	r5, r3
 800eb38:	4680      	mov	r8, r0
 800eb3a:	4689      	mov	r9, r1
 800eb3c:	f04f 0200 	mov.w	r2, #0
 800eb40:	d124      	bne.n	800eb8c <_dtoa_r+0x60c>
 800eb42:	4b1b      	ldr	r3, [pc, #108]	; (800ebb0 <_dtoa_r+0x630>)
 800eb44:	4650      	mov	r0, sl
 800eb46:	4659      	mov	r1, fp
 800eb48:	f7f1 fbb8 	bl	80002bc <__adddf3>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	460b      	mov	r3, r1
 800eb50:	4640      	mov	r0, r8
 800eb52:	4649      	mov	r1, r9
 800eb54:	f7f1 fff8 	bl	8000b48 <__aeabi_dcmpgt>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d173      	bne.n	800ec44 <_dtoa_r+0x6c4>
 800eb5c:	4652      	mov	r2, sl
 800eb5e:	465b      	mov	r3, fp
 800eb60:	4913      	ldr	r1, [pc, #76]	; (800ebb0 <_dtoa_r+0x630>)
 800eb62:	2000      	movs	r0, #0
 800eb64:	f7f1 fba8 	bl	80002b8 <__aeabi_dsub>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	4649      	mov	r1, r9
 800eb70:	f7f1 ffcc 	bl	8000b0c <__aeabi_dcmplt>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	f43f af35 	beq.w	800e9e4 <_dtoa_r+0x464>
 800eb7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eb7c:	1e6b      	subs	r3, r5, #1
 800eb7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb84:	2b30      	cmp	r3, #48	; 0x30
 800eb86:	d0f8      	beq.n	800eb7a <_dtoa_r+0x5fa>
 800eb88:	9700      	str	r7, [sp, #0]
 800eb8a:	e049      	b.n	800ec20 <_dtoa_r+0x6a0>
 800eb8c:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <_dtoa_r+0x624>)
 800eb8e:	f7f1 fd4b 	bl	8000628 <__aeabi_dmul>
 800eb92:	4680      	mov	r8, r0
 800eb94:	4689      	mov	r9, r1
 800eb96:	e7bd      	b.n	800eb14 <_dtoa_r+0x594>
 800eb98:	08013890 	.word	0x08013890
 800eb9c:	08013868 	.word	0x08013868
 800eba0:	3ff00000 	.word	0x3ff00000
 800eba4:	40240000 	.word	0x40240000
 800eba8:	401c0000 	.word	0x401c0000
 800ebac:	40140000 	.word	0x40140000
 800ebb0:	3fe00000 	.word	0x3fe00000
 800ebb4:	9d01      	ldr	r5, [sp, #4]
 800ebb6:	4656      	mov	r6, sl
 800ebb8:	465f      	mov	r7, fp
 800ebba:	4642      	mov	r2, r8
 800ebbc:	464b      	mov	r3, r9
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	4639      	mov	r1, r7
 800ebc2:	f7f1 fe5b 	bl	800087c <__aeabi_ddiv>
 800ebc6:	f7f1 ffdf 	bl	8000b88 <__aeabi_d2iz>
 800ebca:	4682      	mov	sl, r0
 800ebcc:	f7f1 fcc2 	bl	8000554 <__aeabi_i2d>
 800ebd0:	4642      	mov	r2, r8
 800ebd2:	464b      	mov	r3, r9
 800ebd4:	f7f1 fd28 	bl	8000628 <__aeabi_dmul>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	4630      	mov	r0, r6
 800ebde:	4639      	mov	r1, r7
 800ebe0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ebe4:	f7f1 fb68 	bl	80002b8 <__aeabi_dsub>
 800ebe8:	f805 6b01 	strb.w	r6, [r5], #1
 800ebec:	9e01      	ldr	r6, [sp, #4]
 800ebee:	9f03      	ldr	r7, [sp, #12]
 800ebf0:	1bae      	subs	r6, r5, r6
 800ebf2:	42b7      	cmp	r7, r6
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	d135      	bne.n	800ec66 <_dtoa_r+0x6e6>
 800ebfa:	f7f1 fb5f 	bl	80002bc <__adddf3>
 800ebfe:	4642      	mov	r2, r8
 800ec00:	464b      	mov	r3, r9
 800ec02:	4606      	mov	r6, r0
 800ec04:	460f      	mov	r7, r1
 800ec06:	f7f1 ff9f 	bl	8000b48 <__aeabi_dcmpgt>
 800ec0a:	b9d0      	cbnz	r0, 800ec42 <_dtoa_r+0x6c2>
 800ec0c:	4642      	mov	r2, r8
 800ec0e:	464b      	mov	r3, r9
 800ec10:	4630      	mov	r0, r6
 800ec12:	4639      	mov	r1, r7
 800ec14:	f7f1 ff70 	bl	8000af8 <__aeabi_dcmpeq>
 800ec18:	b110      	cbz	r0, 800ec20 <_dtoa_r+0x6a0>
 800ec1a:	f01a 0f01 	tst.w	sl, #1
 800ec1e:	d110      	bne.n	800ec42 <_dtoa_r+0x6c2>
 800ec20:	4620      	mov	r0, r4
 800ec22:	ee18 1a10 	vmov	r1, s16
 800ec26:	f000 fae9 	bl	800f1fc <_Bfree>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	9800      	ldr	r0, [sp, #0]
 800ec2e:	702b      	strb	r3, [r5, #0]
 800ec30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec32:	3001      	adds	r0, #1
 800ec34:	6018      	str	r0, [r3, #0]
 800ec36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f43f acf1 	beq.w	800e620 <_dtoa_r+0xa0>
 800ec3e:	601d      	str	r5, [r3, #0]
 800ec40:	e4ee      	b.n	800e620 <_dtoa_r+0xa0>
 800ec42:	9f00      	ldr	r7, [sp, #0]
 800ec44:	462b      	mov	r3, r5
 800ec46:	461d      	mov	r5, r3
 800ec48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec4c:	2a39      	cmp	r2, #57	; 0x39
 800ec4e:	d106      	bne.n	800ec5e <_dtoa_r+0x6de>
 800ec50:	9a01      	ldr	r2, [sp, #4]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d1f7      	bne.n	800ec46 <_dtoa_r+0x6c6>
 800ec56:	9901      	ldr	r1, [sp, #4]
 800ec58:	2230      	movs	r2, #48	; 0x30
 800ec5a:	3701      	adds	r7, #1
 800ec5c:	700a      	strb	r2, [r1, #0]
 800ec5e:	781a      	ldrb	r2, [r3, #0]
 800ec60:	3201      	adds	r2, #1
 800ec62:	701a      	strb	r2, [r3, #0]
 800ec64:	e790      	b.n	800eb88 <_dtoa_r+0x608>
 800ec66:	4ba6      	ldr	r3, [pc, #664]	; (800ef00 <_dtoa_r+0x980>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f7f1 fcdd 	bl	8000628 <__aeabi_dmul>
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2300      	movs	r3, #0
 800ec72:	4606      	mov	r6, r0
 800ec74:	460f      	mov	r7, r1
 800ec76:	f7f1 ff3f 	bl	8000af8 <__aeabi_dcmpeq>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d09d      	beq.n	800ebba <_dtoa_r+0x63a>
 800ec7e:	e7cf      	b.n	800ec20 <_dtoa_r+0x6a0>
 800ec80:	9a08      	ldr	r2, [sp, #32]
 800ec82:	2a00      	cmp	r2, #0
 800ec84:	f000 80d7 	beq.w	800ee36 <_dtoa_r+0x8b6>
 800ec88:	9a06      	ldr	r2, [sp, #24]
 800ec8a:	2a01      	cmp	r2, #1
 800ec8c:	f300 80ba 	bgt.w	800ee04 <_dtoa_r+0x884>
 800ec90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec92:	2a00      	cmp	r2, #0
 800ec94:	f000 80b2 	beq.w	800edfc <_dtoa_r+0x87c>
 800ec98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ec9c:	9e07      	ldr	r6, [sp, #28]
 800ec9e:	9d04      	ldr	r5, [sp, #16]
 800eca0:	9a04      	ldr	r2, [sp, #16]
 800eca2:	441a      	add	r2, r3
 800eca4:	9204      	str	r2, [sp, #16]
 800eca6:	9a05      	ldr	r2, [sp, #20]
 800eca8:	2101      	movs	r1, #1
 800ecaa:	441a      	add	r2, r3
 800ecac:	4620      	mov	r0, r4
 800ecae:	9205      	str	r2, [sp, #20]
 800ecb0:	f000 fb5c 	bl	800f36c <__i2b>
 800ecb4:	4607      	mov	r7, r0
 800ecb6:	2d00      	cmp	r5, #0
 800ecb8:	dd0c      	ble.n	800ecd4 <_dtoa_r+0x754>
 800ecba:	9b05      	ldr	r3, [sp, #20]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd09      	ble.n	800ecd4 <_dtoa_r+0x754>
 800ecc0:	42ab      	cmp	r3, r5
 800ecc2:	9a04      	ldr	r2, [sp, #16]
 800ecc4:	bfa8      	it	ge
 800ecc6:	462b      	movge	r3, r5
 800ecc8:	1ad2      	subs	r2, r2, r3
 800ecca:	9204      	str	r2, [sp, #16]
 800eccc:	9a05      	ldr	r2, [sp, #20]
 800ecce:	1aed      	subs	r5, r5, r3
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	9305      	str	r3, [sp, #20]
 800ecd4:	9b07      	ldr	r3, [sp, #28]
 800ecd6:	b31b      	cbz	r3, 800ed20 <_dtoa_r+0x7a0>
 800ecd8:	9b08      	ldr	r3, [sp, #32]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f000 80af 	beq.w	800ee3e <_dtoa_r+0x8be>
 800ece0:	2e00      	cmp	r6, #0
 800ece2:	dd13      	ble.n	800ed0c <_dtoa_r+0x78c>
 800ece4:	4639      	mov	r1, r7
 800ece6:	4632      	mov	r2, r6
 800ece8:	4620      	mov	r0, r4
 800ecea:	f000 fbff 	bl	800f4ec <__pow5mult>
 800ecee:	ee18 2a10 	vmov	r2, s16
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fb4e 	bl	800f398 <__multiply>
 800ecfc:	ee18 1a10 	vmov	r1, s16
 800ed00:	4680      	mov	r8, r0
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fa7a 	bl	800f1fc <_Bfree>
 800ed08:	ee08 8a10 	vmov	s16, r8
 800ed0c:	9b07      	ldr	r3, [sp, #28]
 800ed0e:	1b9a      	subs	r2, r3, r6
 800ed10:	d006      	beq.n	800ed20 <_dtoa_r+0x7a0>
 800ed12:	ee18 1a10 	vmov	r1, s16
 800ed16:	4620      	mov	r0, r4
 800ed18:	f000 fbe8 	bl	800f4ec <__pow5mult>
 800ed1c:	ee08 0a10 	vmov	s16, r0
 800ed20:	2101      	movs	r1, #1
 800ed22:	4620      	mov	r0, r4
 800ed24:	f000 fb22 	bl	800f36c <__i2b>
 800ed28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	f340 8088 	ble.w	800ee42 <_dtoa_r+0x8c2>
 800ed32:	461a      	mov	r2, r3
 800ed34:	4601      	mov	r1, r0
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 fbd8 	bl	800f4ec <__pow5mult>
 800ed3c:	9b06      	ldr	r3, [sp, #24]
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	4606      	mov	r6, r0
 800ed42:	f340 8081 	ble.w	800ee48 <_dtoa_r+0x8c8>
 800ed46:	f04f 0800 	mov.w	r8, #0
 800ed4a:	6933      	ldr	r3, [r6, #16]
 800ed4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ed50:	6918      	ldr	r0, [r3, #16]
 800ed52:	f000 fabb 	bl	800f2cc <__hi0bits>
 800ed56:	f1c0 0020 	rsb	r0, r0, #32
 800ed5a:	9b05      	ldr	r3, [sp, #20]
 800ed5c:	4418      	add	r0, r3
 800ed5e:	f010 001f 	ands.w	r0, r0, #31
 800ed62:	f000 8092 	beq.w	800ee8a <_dtoa_r+0x90a>
 800ed66:	f1c0 0320 	rsb	r3, r0, #32
 800ed6a:	2b04      	cmp	r3, #4
 800ed6c:	f340 808a 	ble.w	800ee84 <_dtoa_r+0x904>
 800ed70:	f1c0 001c 	rsb	r0, r0, #28
 800ed74:	9b04      	ldr	r3, [sp, #16]
 800ed76:	4403      	add	r3, r0
 800ed78:	9304      	str	r3, [sp, #16]
 800ed7a:	9b05      	ldr	r3, [sp, #20]
 800ed7c:	4403      	add	r3, r0
 800ed7e:	4405      	add	r5, r0
 800ed80:	9305      	str	r3, [sp, #20]
 800ed82:	9b04      	ldr	r3, [sp, #16]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	dd07      	ble.n	800ed98 <_dtoa_r+0x818>
 800ed88:	ee18 1a10 	vmov	r1, s16
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	4620      	mov	r0, r4
 800ed90:	f000 fc06 	bl	800f5a0 <__lshift>
 800ed94:	ee08 0a10 	vmov	s16, r0
 800ed98:	9b05      	ldr	r3, [sp, #20]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	dd05      	ble.n	800edaa <_dtoa_r+0x82a>
 800ed9e:	4631      	mov	r1, r6
 800eda0:	461a      	mov	r2, r3
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 fbfc 	bl	800f5a0 <__lshift>
 800eda8:	4606      	mov	r6, r0
 800edaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edac:	2b00      	cmp	r3, #0
 800edae:	d06e      	beq.n	800ee8e <_dtoa_r+0x90e>
 800edb0:	ee18 0a10 	vmov	r0, s16
 800edb4:	4631      	mov	r1, r6
 800edb6:	f000 fc63 	bl	800f680 <__mcmp>
 800edba:	2800      	cmp	r0, #0
 800edbc:	da67      	bge.n	800ee8e <_dtoa_r+0x90e>
 800edbe:	9b00      	ldr	r3, [sp, #0]
 800edc0:	3b01      	subs	r3, #1
 800edc2:	ee18 1a10 	vmov	r1, s16
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	220a      	movs	r2, #10
 800edca:	2300      	movs	r3, #0
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 fa37 	bl	800f240 <__multadd>
 800edd2:	9b08      	ldr	r3, [sp, #32]
 800edd4:	ee08 0a10 	vmov	s16, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 81b1 	beq.w	800f140 <_dtoa_r+0xbc0>
 800edde:	2300      	movs	r3, #0
 800ede0:	4639      	mov	r1, r7
 800ede2:	220a      	movs	r2, #10
 800ede4:	4620      	mov	r0, r4
 800ede6:	f000 fa2b 	bl	800f240 <__multadd>
 800edea:	9b02      	ldr	r3, [sp, #8]
 800edec:	2b00      	cmp	r3, #0
 800edee:	4607      	mov	r7, r0
 800edf0:	f300 808e 	bgt.w	800ef10 <_dtoa_r+0x990>
 800edf4:	9b06      	ldr	r3, [sp, #24]
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	dc51      	bgt.n	800ee9e <_dtoa_r+0x91e>
 800edfa:	e089      	b.n	800ef10 <_dtoa_r+0x990>
 800edfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee02:	e74b      	b.n	800ec9c <_dtoa_r+0x71c>
 800ee04:	9b03      	ldr	r3, [sp, #12]
 800ee06:	1e5e      	subs	r6, r3, #1
 800ee08:	9b07      	ldr	r3, [sp, #28]
 800ee0a:	42b3      	cmp	r3, r6
 800ee0c:	bfbf      	itttt	lt
 800ee0e:	9b07      	ldrlt	r3, [sp, #28]
 800ee10:	9607      	strlt	r6, [sp, #28]
 800ee12:	1af2      	sublt	r2, r6, r3
 800ee14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ee16:	bfb6      	itet	lt
 800ee18:	189b      	addlt	r3, r3, r2
 800ee1a:	1b9e      	subge	r6, r3, r6
 800ee1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	bfb8      	it	lt
 800ee22:	2600      	movlt	r6, #0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb7      	itett	lt
 800ee28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ee2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ee30:	1a9d      	sublt	r5, r3, r2
 800ee32:	2300      	movlt	r3, #0
 800ee34:	e734      	b.n	800eca0 <_dtoa_r+0x720>
 800ee36:	9e07      	ldr	r6, [sp, #28]
 800ee38:	9d04      	ldr	r5, [sp, #16]
 800ee3a:	9f08      	ldr	r7, [sp, #32]
 800ee3c:	e73b      	b.n	800ecb6 <_dtoa_r+0x736>
 800ee3e:	9a07      	ldr	r2, [sp, #28]
 800ee40:	e767      	b.n	800ed12 <_dtoa_r+0x792>
 800ee42:	9b06      	ldr	r3, [sp, #24]
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	dc18      	bgt.n	800ee7a <_dtoa_r+0x8fa>
 800ee48:	f1ba 0f00 	cmp.w	sl, #0
 800ee4c:	d115      	bne.n	800ee7a <_dtoa_r+0x8fa>
 800ee4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee52:	b993      	cbnz	r3, 800ee7a <_dtoa_r+0x8fa>
 800ee54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee58:	0d1b      	lsrs	r3, r3, #20
 800ee5a:	051b      	lsls	r3, r3, #20
 800ee5c:	b183      	cbz	r3, 800ee80 <_dtoa_r+0x900>
 800ee5e:	9b04      	ldr	r3, [sp, #16]
 800ee60:	3301      	adds	r3, #1
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	9b05      	ldr	r3, [sp, #20]
 800ee66:	3301      	adds	r3, #1
 800ee68:	9305      	str	r3, [sp, #20]
 800ee6a:	f04f 0801 	mov.w	r8, #1
 800ee6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f47f af6a 	bne.w	800ed4a <_dtoa_r+0x7ca>
 800ee76:	2001      	movs	r0, #1
 800ee78:	e76f      	b.n	800ed5a <_dtoa_r+0x7da>
 800ee7a:	f04f 0800 	mov.w	r8, #0
 800ee7e:	e7f6      	b.n	800ee6e <_dtoa_r+0x8ee>
 800ee80:	4698      	mov	r8, r3
 800ee82:	e7f4      	b.n	800ee6e <_dtoa_r+0x8ee>
 800ee84:	f43f af7d 	beq.w	800ed82 <_dtoa_r+0x802>
 800ee88:	4618      	mov	r0, r3
 800ee8a:	301c      	adds	r0, #28
 800ee8c:	e772      	b.n	800ed74 <_dtoa_r+0x7f4>
 800ee8e:	9b03      	ldr	r3, [sp, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dc37      	bgt.n	800ef04 <_dtoa_r+0x984>
 800ee94:	9b06      	ldr	r3, [sp, #24]
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	dd34      	ble.n	800ef04 <_dtoa_r+0x984>
 800ee9a:	9b03      	ldr	r3, [sp, #12]
 800ee9c:	9302      	str	r3, [sp, #8]
 800ee9e:	9b02      	ldr	r3, [sp, #8]
 800eea0:	b96b      	cbnz	r3, 800eebe <_dtoa_r+0x93e>
 800eea2:	4631      	mov	r1, r6
 800eea4:	2205      	movs	r2, #5
 800eea6:	4620      	mov	r0, r4
 800eea8:	f000 f9ca 	bl	800f240 <__multadd>
 800eeac:	4601      	mov	r1, r0
 800eeae:	4606      	mov	r6, r0
 800eeb0:	ee18 0a10 	vmov	r0, s16
 800eeb4:	f000 fbe4 	bl	800f680 <__mcmp>
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	f73f adbb 	bgt.w	800ea34 <_dtoa_r+0x4b4>
 800eebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eec0:	9d01      	ldr	r5, [sp, #4]
 800eec2:	43db      	mvns	r3, r3
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	f04f 0800 	mov.w	r8, #0
 800eeca:	4631      	mov	r1, r6
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 f995 	bl	800f1fc <_Bfree>
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	f43f aea4 	beq.w	800ec20 <_dtoa_r+0x6a0>
 800eed8:	f1b8 0f00 	cmp.w	r8, #0
 800eedc:	d005      	beq.n	800eeea <_dtoa_r+0x96a>
 800eede:	45b8      	cmp	r8, r7
 800eee0:	d003      	beq.n	800eeea <_dtoa_r+0x96a>
 800eee2:	4641      	mov	r1, r8
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 f989 	bl	800f1fc <_Bfree>
 800eeea:	4639      	mov	r1, r7
 800eeec:	4620      	mov	r0, r4
 800eeee:	f000 f985 	bl	800f1fc <_Bfree>
 800eef2:	e695      	b.n	800ec20 <_dtoa_r+0x6a0>
 800eef4:	2600      	movs	r6, #0
 800eef6:	4637      	mov	r7, r6
 800eef8:	e7e1      	b.n	800eebe <_dtoa_r+0x93e>
 800eefa:	9700      	str	r7, [sp, #0]
 800eefc:	4637      	mov	r7, r6
 800eefe:	e599      	b.n	800ea34 <_dtoa_r+0x4b4>
 800ef00:	40240000 	.word	0x40240000
 800ef04:	9b08      	ldr	r3, [sp, #32]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f000 80ca 	beq.w	800f0a0 <_dtoa_r+0xb20>
 800ef0c:	9b03      	ldr	r3, [sp, #12]
 800ef0e:	9302      	str	r3, [sp, #8]
 800ef10:	2d00      	cmp	r5, #0
 800ef12:	dd05      	ble.n	800ef20 <_dtoa_r+0x9a0>
 800ef14:	4639      	mov	r1, r7
 800ef16:	462a      	mov	r2, r5
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 fb41 	bl	800f5a0 <__lshift>
 800ef1e:	4607      	mov	r7, r0
 800ef20:	f1b8 0f00 	cmp.w	r8, #0
 800ef24:	d05b      	beq.n	800efde <_dtoa_r+0xa5e>
 800ef26:	6879      	ldr	r1, [r7, #4]
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 f927 	bl	800f17c <_Balloc>
 800ef2e:	4605      	mov	r5, r0
 800ef30:	b928      	cbnz	r0, 800ef3e <_dtoa_r+0x9be>
 800ef32:	4b87      	ldr	r3, [pc, #540]	; (800f150 <_dtoa_r+0xbd0>)
 800ef34:	4602      	mov	r2, r0
 800ef36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ef3a:	f7ff bb3b 	b.w	800e5b4 <_dtoa_r+0x34>
 800ef3e:	693a      	ldr	r2, [r7, #16]
 800ef40:	3202      	adds	r2, #2
 800ef42:	0092      	lsls	r2, r2, #2
 800ef44:	f107 010c 	add.w	r1, r7, #12
 800ef48:	300c      	adds	r0, #12
 800ef4a:	f7fe fcfb 	bl	800d944 <memcpy>
 800ef4e:	2201      	movs	r2, #1
 800ef50:	4629      	mov	r1, r5
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 fb24 	bl	800f5a0 <__lshift>
 800ef58:	9b01      	ldr	r3, [sp, #4]
 800ef5a:	f103 0901 	add.w	r9, r3, #1
 800ef5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ef62:	4413      	add	r3, r2
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	f00a 0301 	and.w	r3, sl, #1
 800ef6a:	46b8      	mov	r8, r7
 800ef6c:	9304      	str	r3, [sp, #16]
 800ef6e:	4607      	mov	r7, r0
 800ef70:	4631      	mov	r1, r6
 800ef72:	ee18 0a10 	vmov	r0, s16
 800ef76:	f7ff fa75 	bl	800e464 <quorem>
 800ef7a:	4641      	mov	r1, r8
 800ef7c:	9002      	str	r0, [sp, #8]
 800ef7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ef82:	ee18 0a10 	vmov	r0, s16
 800ef86:	f000 fb7b 	bl	800f680 <__mcmp>
 800ef8a:	463a      	mov	r2, r7
 800ef8c:	9003      	str	r0, [sp, #12]
 800ef8e:	4631      	mov	r1, r6
 800ef90:	4620      	mov	r0, r4
 800ef92:	f000 fb91 	bl	800f6b8 <__mdiff>
 800ef96:	68c2      	ldr	r2, [r0, #12]
 800ef98:	f109 3bff 	add.w	fp, r9, #4294967295
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	bb02      	cbnz	r2, 800efe2 <_dtoa_r+0xa62>
 800efa0:	4601      	mov	r1, r0
 800efa2:	ee18 0a10 	vmov	r0, s16
 800efa6:	f000 fb6b 	bl	800f680 <__mcmp>
 800efaa:	4602      	mov	r2, r0
 800efac:	4629      	mov	r1, r5
 800efae:	4620      	mov	r0, r4
 800efb0:	9207      	str	r2, [sp, #28]
 800efb2:	f000 f923 	bl	800f1fc <_Bfree>
 800efb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800efba:	ea43 0102 	orr.w	r1, r3, r2
 800efbe:	9b04      	ldr	r3, [sp, #16]
 800efc0:	430b      	orrs	r3, r1
 800efc2:	464d      	mov	r5, r9
 800efc4:	d10f      	bne.n	800efe6 <_dtoa_r+0xa66>
 800efc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800efca:	d02a      	beq.n	800f022 <_dtoa_r+0xaa2>
 800efcc:	9b03      	ldr	r3, [sp, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	dd02      	ble.n	800efd8 <_dtoa_r+0xa58>
 800efd2:	9b02      	ldr	r3, [sp, #8]
 800efd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800efd8:	f88b a000 	strb.w	sl, [fp]
 800efdc:	e775      	b.n	800eeca <_dtoa_r+0x94a>
 800efde:	4638      	mov	r0, r7
 800efe0:	e7ba      	b.n	800ef58 <_dtoa_r+0x9d8>
 800efe2:	2201      	movs	r2, #1
 800efe4:	e7e2      	b.n	800efac <_dtoa_r+0xa2c>
 800efe6:	9b03      	ldr	r3, [sp, #12]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	db04      	blt.n	800eff6 <_dtoa_r+0xa76>
 800efec:	9906      	ldr	r1, [sp, #24]
 800efee:	430b      	orrs	r3, r1
 800eff0:	9904      	ldr	r1, [sp, #16]
 800eff2:	430b      	orrs	r3, r1
 800eff4:	d122      	bne.n	800f03c <_dtoa_r+0xabc>
 800eff6:	2a00      	cmp	r2, #0
 800eff8:	ddee      	ble.n	800efd8 <_dtoa_r+0xa58>
 800effa:	ee18 1a10 	vmov	r1, s16
 800effe:	2201      	movs	r2, #1
 800f000:	4620      	mov	r0, r4
 800f002:	f000 facd 	bl	800f5a0 <__lshift>
 800f006:	4631      	mov	r1, r6
 800f008:	ee08 0a10 	vmov	s16, r0
 800f00c:	f000 fb38 	bl	800f680 <__mcmp>
 800f010:	2800      	cmp	r0, #0
 800f012:	dc03      	bgt.n	800f01c <_dtoa_r+0xa9c>
 800f014:	d1e0      	bne.n	800efd8 <_dtoa_r+0xa58>
 800f016:	f01a 0f01 	tst.w	sl, #1
 800f01a:	d0dd      	beq.n	800efd8 <_dtoa_r+0xa58>
 800f01c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f020:	d1d7      	bne.n	800efd2 <_dtoa_r+0xa52>
 800f022:	2339      	movs	r3, #57	; 0x39
 800f024:	f88b 3000 	strb.w	r3, [fp]
 800f028:	462b      	mov	r3, r5
 800f02a:	461d      	mov	r5, r3
 800f02c:	3b01      	subs	r3, #1
 800f02e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f032:	2a39      	cmp	r2, #57	; 0x39
 800f034:	d071      	beq.n	800f11a <_dtoa_r+0xb9a>
 800f036:	3201      	adds	r2, #1
 800f038:	701a      	strb	r2, [r3, #0]
 800f03a:	e746      	b.n	800eeca <_dtoa_r+0x94a>
 800f03c:	2a00      	cmp	r2, #0
 800f03e:	dd07      	ble.n	800f050 <_dtoa_r+0xad0>
 800f040:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f044:	d0ed      	beq.n	800f022 <_dtoa_r+0xaa2>
 800f046:	f10a 0301 	add.w	r3, sl, #1
 800f04a:	f88b 3000 	strb.w	r3, [fp]
 800f04e:	e73c      	b.n	800eeca <_dtoa_r+0x94a>
 800f050:	9b05      	ldr	r3, [sp, #20]
 800f052:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f056:	4599      	cmp	r9, r3
 800f058:	d047      	beq.n	800f0ea <_dtoa_r+0xb6a>
 800f05a:	ee18 1a10 	vmov	r1, s16
 800f05e:	2300      	movs	r3, #0
 800f060:	220a      	movs	r2, #10
 800f062:	4620      	mov	r0, r4
 800f064:	f000 f8ec 	bl	800f240 <__multadd>
 800f068:	45b8      	cmp	r8, r7
 800f06a:	ee08 0a10 	vmov	s16, r0
 800f06e:	f04f 0300 	mov.w	r3, #0
 800f072:	f04f 020a 	mov.w	r2, #10
 800f076:	4641      	mov	r1, r8
 800f078:	4620      	mov	r0, r4
 800f07a:	d106      	bne.n	800f08a <_dtoa_r+0xb0a>
 800f07c:	f000 f8e0 	bl	800f240 <__multadd>
 800f080:	4680      	mov	r8, r0
 800f082:	4607      	mov	r7, r0
 800f084:	f109 0901 	add.w	r9, r9, #1
 800f088:	e772      	b.n	800ef70 <_dtoa_r+0x9f0>
 800f08a:	f000 f8d9 	bl	800f240 <__multadd>
 800f08e:	4639      	mov	r1, r7
 800f090:	4680      	mov	r8, r0
 800f092:	2300      	movs	r3, #0
 800f094:	220a      	movs	r2, #10
 800f096:	4620      	mov	r0, r4
 800f098:	f000 f8d2 	bl	800f240 <__multadd>
 800f09c:	4607      	mov	r7, r0
 800f09e:	e7f1      	b.n	800f084 <_dtoa_r+0xb04>
 800f0a0:	9b03      	ldr	r3, [sp, #12]
 800f0a2:	9302      	str	r3, [sp, #8]
 800f0a4:	9d01      	ldr	r5, [sp, #4]
 800f0a6:	ee18 0a10 	vmov	r0, s16
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	f7ff f9da 	bl	800e464 <quorem>
 800f0b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f0b4:	9b01      	ldr	r3, [sp, #4]
 800f0b6:	f805 ab01 	strb.w	sl, [r5], #1
 800f0ba:	1aea      	subs	r2, r5, r3
 800f0bc:	9b02      	ldr	r3, [sp, #8]
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	dd09      	ble.n	800f0d6 <_dtoa_r+0xb56>
 800f0c2:	ee18 1a10 	vmov	r1, s16
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f000 f8b8 	bl	800f240 <__multadd>
 800f0d0:	ee08 0a10 	vmov	s16, r0
 800f0d4:	e7e7      	b.n	800f0a6 <_dtoa_r+0xb26>
 800f0d6:	9b02      	ldr	r3, [sp, #8]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	bfc8      	it	gt
 800f0dc:	461d      	movgt	r5, r3
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	bfd8      	it	le
 800f0e2:	2501      	movle	r5, #1
 800f0e4:	441d      	add	r5, r3
 800f0e6:	f04f 0800 	mov.w	r8, #0
 800f0ea:	ee18 1a10 	vmov	r1, s16
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 fa55 	bl	800f5a0 <__lshift>
 800f0f6:	4631      	mov	r1, r6
 800f0f8:	ee08 0a10 	vmov	s16, r0
 800f0fc:	f000 fac0 	bl	800f680 <__mcmp>
 800f100:	2800      	cmp	r0, #0
 800f102:	dc91      	bgt.n	800f028 <_dtoa_r+0xaa8>
 800f104:	d102      	bne.n	800f10c <_dtoa_r+0xb8c>
 800f106:	f01a 0f01 	tst.w	sl, #1
 800f10a:	d18d      	bne.n	800f028 <_dtoa_r+0xaa8>
 800f10c:	462b      	mov	r3, r5
 800f10e:	461d      	mov	r5, r3
 800f110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f114:	2a30      	cmp	r2, #48	; 0x30
 800f116:	d0fa      	beq.n	800f10e <_dtoa_r+0xb8e>
 800f118:	e6d7      	b.n	800eeca <_dtoa_r+0x94a>
 800f11a:	9a01      	ldr	r2, [sp, #4]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d184      	bne.n	800f02a <_dtoa_r+0xaaa>
 800f120:	9b00      	ldr	r3, [sp, #0]
 800f122:	3301      	adds	r3, #1
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	2331      	movs	r3, #49	; 0x31
 800f128:	7013      	strb	r3, [r2, #0]
 800f12a:	e6ce      	b.n	800eeca <_dtoa_r+0x94a>
 800f12c:	4b09      	ldr	r3, [pc, #36]	; (800f154 <_dtoa_r+0xbd4>)
 800f12e:	f7ff ba95 	b.w	800e65c <_dtoa_r+0xdc>
 800f132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f134:	2b00      	cmp	r3, #0
 800f136:	f47f aa6e 	bne.w	800e616 <_dtoa_r+0x96>
 800f13a:	4b07      	ldr	r3, [pc, #28]	; (800f158 <_dtoa_r+0xbd8>)
 800f13c:	f7ff ba8e 	b.w	800e65c <_dtoa_r+0xdc>
 800f140:	9b02      	ldr	r3, [sp, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	dcae      	bgt.n	800f0a4 <_dtoa_r+0xb24>
 800f146:	9b06      	ldr	r3, [sp, #24]
 800f148:	2b02      	cmp	r3, #2
 800f14a:	f73f aea8 	bgt.w	800ee9e <_dtoa_r+0x91e>
 800f14e:	e7a9      	b.n	800f0a4 <_dtoa_r+0xb24>
 800f150:	080137f7 	.word	0x080137f7
 800f154:	08013754 	.word	0x08013754
 800f158:	08013778 	.word	0x08013778

0800f15c <_localeconv_r>:
 800f15c:	4800      	ldr	r0, [pc, #0]	; (800f160 <_localeconv_r+0x4>)
 800f15e:	4770      	bx	lr
 800f160:	20000194 	.word	0x20000194

0800f164 <__malloc_lock>:
 800f164:	4801      	ldr	r0, [pc, #4]	; (800f16c <__malloc_lock+0x8>)
 800f166:	f000 bd30 	b.w	800fbca <__retarget_lock_acquire_recursive>
 800f16a:	bf00      	nop
 800f16c:	2000dc78 	.word	0x2000dc78

0800f170 <__malloc_unlock>:
 800f170:	4801      	ldr	r0, [pc, #4]	; (800f178 <__malloc_unlock+0x8>)
 800f172:	f000 bd2b 	b.w	800fbcc <__retarget_lock_release_recursive>
 800f176:	bf00      	nop
 800f178:	2000dc78 	.word	0x2000dc78

0800f17c <_Balloc>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f180:	4604      	mov	r4, r0
 800f182:	460d      	mov	r5, r1
 800f184:	b976      	cbnz	r6, 800f1a4 <_Balloc+0x28>
 800f186:	2010      	movs	r0, #16
 800f188:	f7fe fbd4 	bl	800d934 <malloc>
 800f18c:	4602      	mov	r2, r0
 800f18e:	6260      	str	r0, [r4, #36]	; 0x24
 800f190:	b920      	cbnz	r0, 800f19c <_Balloc+0x20>
 800f192:	4b18      	ldr	r3, [pc, #96]	; (800f1f4 <_Balloc+0x78>)
 800f194:	4818      	ldr	r0, [pc, #96]	; (800f1f8 <_Balloc+0x7c>)
 800f196:	2166      	movs	r1, #102	; 0x66
 800f198:	f000 fce6 	bl	800fb68 <__assert_func>
 800f19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1a0:	6006      	str	r6, [r0, #0]
 800f1a2:	60c6      	str	r6, [r0, #12]
 800f1a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f1a6:	68f3      	ldr	r3, [r6, #12]
 800f1a8:	b183      	cbz	r3, 800f1cc <_Balloc+0x50>
 800f1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1b2:	b9b8      	cbnz	r0, 800f1e4 <_Balloc+0x68>
 800f1b4:	2101      	movs	r1, #1
 800f1b6:	fa01 f605 	lsl.w	r6, r1, r5
 800f1ba:	1d72      	adds	r2, r6, #5
 800f1bc:	0092      	lsls	r2, r2, #2
 800f1be:	4620      	mov	r0, r4
 800f1c0:	f000 fb60 	bl	800f884 <_calloc_r>
 800f1c4:	b160      	cbz	r0, 800f1e0 <_Balloc+0x64>
 800f1c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1ca:	e00e      	b.n	800f1ea <_Balloc+0x6e>
 800f1cc:	2221      	movs	r2, #33	; 0x21
 800f1ce:	2104      	movs	r1, #4
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f000 fb57 	bl	800f884 <_calloc_r>
 800f1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1d8:	60f0      	str	r0, [r6, #12]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d1e4      	bne.n	800f1aa <_Balloc+0x2e>
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	6802      	ldr	r2, [r0, #0]
 800f1e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1f0:	e7f7      	b.n	800f1e2 <_Balloc+0x66>
 800f1f2:	bf00      	nop
 800f1f4:	08013785 	.word	0x08013785
 800f1f8:	08013808 	.word	0x08013808

0800f1fc <_Bfree>:
 800f1fc:	b570      	push	{r4, r5, r6, lr}
 800f1fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f200:	4605      	mov	r5, r0
 800f202:	460c      	mov	r4, r1
 800f204:	b976      	cbnz	r6, 800f224 <_Bfree+0x28>
 800f206:	2010      	movs	r0, #16
 800f208:	f7fe fb94 	bl	800d934 <malloc>
 800f20c:	4602      	mov	r2, r0
 800f20e:	6268      	str	r0, [r5, #36]	; 0x24
 800f210:	b920      	cbnz	r0, 800f21c <_Bfree+0x20>
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <_Bfree+0x3c>)
 800f214:	4809      	ldr	r0, [pc, #36]	; (800f23c <_Bfree+0x40>)
 800f216:	218a      	movs	r1, #138	; 0x8a
 800f218:	f000 fca6 	bl	800fb68 <__assert_func>
 800f21c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f220:	6006      	str	r6, [r0, #0]
 800f222:	60c6      	str	r6, [r0, #12]
 800f224:	b13c      	cbz	r4, 800f236 <_Bfree+0x3a>
 800f226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f228:	6862      	ldr	r2, [r4, #4]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f230:	6021      	str	r1, [r4, #0]
 800f232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f236:	bd70      	pop	{r4, r5, r6, pc}
 800f238:	08013785 	.word	0x08013785
 800f23c:	08013808 	.word	0x08013808

0800f240 <__multadd>:
 800f240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f244:	690d      	ldr	r5, [r1, #16]
 800f246:	4607      	mov	r7, r0
 800f248:	460c      	mov	r4, r1
 800f24a:	461e      	mov	r6, r3
 800f24c:	f101 0c14 	add.w	ip, r1, #20
 800f250:	2000      	movs	r0, #0
 800f252:	f8dc 3000 	ldr.w	r3, [ip]
 800f256:	b299      	uxth	r1, r3
 800f258:	fb02 6101 	mla	r1, r2, r1, r6
 800f25c:	0c1e      	lsrs	r6, r3, #16
 800f25e:	0c0b      	lsrs	r3, r1, #16
 800f260:	fb02 3306 	mla	r3, r2, r6, r3
 800f264:	b289      	uxth	r1, r1
 800f266:	3001      	adds	r0, #1
 800f268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f26c:	4285      	cmp	r5, r0
 800f26e:	f84c 1b04 	str.w	r1, [ip], #4
 800f272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f276:	dcec      	bgt.n	800f252 <__multadd+0x12>
 800f278:	b30e      	cbz	r6, 800f2be <__multadd+0x7e>
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	42ab      	cmp	r3, r5
 800f27e:	dc19      	bgt.n	800f2b4 <__multadd+0x74>
 800f280:	6861      	ldr	r1, [r4, #4]
 800f282:	4638      	mov	r0, r7
 800f284:	3101      	adds	r1, #1
 800f286:	f7ff ff79 	bl	800f17c <_Balloc>
 800f28a:	4680      	mov	r8, r0
 800f28c:	b928      	cbnz	r0, 800f29a <__multadd+0x5a>
 800f28e:	4602      	mov	r2, r0
 800f290:	4b0c      	ldr	r3, [pc, #48]	; (800f2c4 <__multadd+0x84>)
 800f292:	480d      	ldr	r0, [pc, #52]	; (800f2c8 <__multadd+0x88>)
 800f294:	21b5      	movs	r1, #181	; 0xb5
 800f296:	f000 fc67 	bl	800fb68 <__assert_func>
 800f29a:	6922      	ldr	r2, [r4, #16]
 800f29c:	3202      	adds	r2, #2
 800f29e:	f104 010c 	add.w	r1, r4, #12
 800f2a2:	0092      	lsls	r2, r2, #2
 800f2a4:	300c      	adds	r0, #12
 800f2a6:	f7fe fb4d 	bl	800d944 <memcpy>
 800f2aa:	4621      	mov	r1, r4
 800f2ac:	4638      	mov	r0, r7
 800f2ae:	f7ff ffa5 	bl	800f1fc <_Bfree>
 800f2b2:	4644      	mov	r4, r8
 800f2b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	615e      	str	r6, [r3, #20]
 800f2bc:	6125      	str	r5, [r4, #16]
 800f2be:	4620      	mov	r0, r4
 800f2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c4:	080137f7 	.word	0x080137f7
 800f2c8:	08013808 	.word	0x08013808

0800f2cc <__hi0bits>:
 800f2cc:	0c03      	lsrs	r3, r0, #16
 800f2ce:	041b      	lsls	r3, r3, #16
 800f2d0:	b9d3      	cbnz	r3, 800f308 <__hi0bits+0x3c>
 800f2d2:	0400      	lsls	r0, r0, #16
 800f2d4:	2310      	movs	r3, #16
 800f2d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f2da:	bf04      	itt	eq
 800f2dc:	0200      	lsleq	r0, r0, #8
 800f2de:	3308      	addeq	r3, #8
 800f2e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f2e4:	bf04      	itt	eq
 800f2e6:	0100      	lsleq	r0, r0, #4
 800f2e8:	3304      	addeq	r3, #4
 800f2ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f2ee:	bf04      	itt	eq
 800f2f0:	0080      	lsleq	r0, r0, #2
 800f2f2:	3302      	addeq	r3, #2
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	db05      	blt.n	800f304 <__hi0bits+0x38>
 800f2f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f2fc:	f103 0301 	add.w	r3, r3, #1
 800f300:	bf08      	it	eq
 800f302:	2320      	moveq	r3, #32
 800f304:	4618      	mov	r0, r3
 800f306:	4770      	bx	lr
 800f308:	2300      	movs	r3, #0
 800f30a:	e7e4      	b.n	800f2d6 <__hi0bits+0xa>

0800f30c <__lo0bits>:
 800f30c:	6803      	ldr	r3, [r0, #0]
 800f30e:	f013 0207 	ands.w	r2, r3, #7
 800f312:	4601      	mov	r1, r0
 800f314:	d00b      	beq.n	800f32e <__lo0bits+0x22>
 800f316:	07da      	lsls	r2, r3, #31
 800f318:	d423      	bmi.n	800f362 <__lo0bits+0x56>
 800f31a:	0798      	lsls	r0, r3, #30
 800f31c:	bf49      	itett	mi
 800f31e:	085b      	lsrmi	r3, r3, #1
 800f320:	089b      	lsrpl	r3, r3, #2
 800f322:	2001      	movmi	r0, #1
 800f324:	600b      	strmi	r3, [r1, #0]
 800f326:	bf5c      	itt	pl
 800f328:	600b      	strpl	r3, [r1, #0]
 800f32a:	2002      	movpl	r0, #2
 800f32c:	4770      	bx	lr
 800f32e:	b298      	uxth	r0, r3
 800f330:	b9a8      	cbnz	r0, 800f35e <__lo0bits+0x52>
 800f332:	0c1b      	lsrs	r3, r3, #16
 800f334:	2010      	movs	r0, #16
 800f336:	b2da      	uxtb	r2, r3
 800f338:	b90a      	cbnz	r2, 800f33e <__lo0bits+0x32>
 800f33a:	3008      	adds	r0, #8
 800f33c:	0a1b      	lsrs	r3, r3, #8
 800f33e:	071a      	lsls	r2, r3, #28
 800f340:	bf04      	itt	eq
 800f342:	091b      	lsreq	r3, r3, #4
 800f344:	3004      	addeq	r0, #4
 800f346:	079a      	lsls	r2, r3, #30
 800f348:	bf04      	itt	eq
 800f34a:	089b      	lsreq	r3, r3, #2
 800f34c:	3002      	addeq	r0, #2
 800f34e:	07da      	lsls	r2, r3, #31
 800f350:	d403      	bmi.n	800f35a <__lo0bits+0x4e>
 800f352:	085b      	lsrs	r3, r3, #1
 800f354:	f100 0001 	add.w	r0, r0, #1
 800f358:	d005      	beq.n	800f366 <__lo0bits+0x5a>
 800f35a:	600b      	str	r3, [r1, #0]
 800f35c:	4770      	bx	lr
 800f35e:	4610      	mov	r0, r2
 800f360:	e7e9      	b.n	800f336 <__lo0bits+0x2a>
 800f362:	2000      	movs	r0, #0
 800f364:	4770      	bx	lr
 800f366:	2020      	movs	r0, #32
 800f368:	4770      	bx	lr
	...

0800f36c <__i2b>:
 800f36c:	b510      	push	{r4, lr}
 800f36e:	460c      	mov	r4, r1
 800f370:	2101      	movs	r1, #1
 800f372:	f7ff ff03 	bl	800f17c <_Balloc>
 800f376:	4602      	mov	r2, r0
 800f378:	b928      	cbnz	r0, 800f386 <__i2b+0x1a>
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <__i2b+0x24>)
 800f37c:	4805      	ldr	r0, [pc, #20]	; (800f394 <__i2b+0x28>)
 800f37e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f382:	f000 fbf1 	bl	800fb68 <__assert_func>
 800f386:	2301      	movs	r3, #1
 800f388:	6144      	str	r4, [r0, #20]
 800f38a:	6103      	str	r3, [r0, #16]
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	bf00      	nop
 800f390:	080137f7 	.word	0x080137f7
 800f394:	08013808 	.word	0x08013808

0800f398 <__multiply>:
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	4691      	mov	r9, r2
 800f39e:	690a      	ldr	r2, [r1, #16]
 800f3a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	bfb8      	it	lt
 800f3a8:	460b      	movlt	r3, r1
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	bfbc      	itt	lt
 800f3ae:	464c      	movlt	r4, r9
 800f3b0:	4699      	movlt	r9, r3
 800f3b2:	6927      	ldr	r7, [r4, #16]
 800f3b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f3b8:	68a3      	ldr	r3, [r4, #8]
 800f3ba:	6861      	ldr	r1, [r4, #4]
 800f3bc:	eb07 060a 	add.w	r6, r7, sl
 800f3c0:	42b3      	cmp	r3, r6
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	bfb8      	it	lt
 800f3c6:	3101      	addlt	r1, #1
 800f3c8:	f7ff fed8 	bl	800f17c <_Balloc>
 800f3cc:	b930      	cbnz	r0, 800f3dc <__multiply+0x44>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	4b44      	ldr	r3, [pc, #272]	; (800f4e4 <__multiply+0x14c>)
 800f3d2:	4845      	ldr	r0, [pc, #276]	; (800f4e8 <__multiply+0x150>)
 800f3d4:	f240 115d 	movw	r1, #349	; 0x15d
 800f3d8:	f000 fbc6 	bl	800fb68 <__assert_func>
 800f3dc:	f100 0514 	add.w	r5, r0, #20
 800f3e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f3e4:	462b      	mov	r3, r5
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	4543      	cmp	r3, r8
 800f3ea:	d321      	bcc.n	800f430 <__multiply+0x98>
 800f3ec:	f104 0314 	add.w	r3, r4, #20
 800f3f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f3f4:	f109 0314 	add.w	r3, r9, #20
 800f3f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f3fc:	9202      	str	r2, [sp, #8]
 800f3fe:	1b3a      	subs	r2, r7, r4
 800f400:	3a15      	subs	r2, #21
 800f402:	f022 0203 	bic.w	r2, r2, #3
 800f406:	3204      	adds	r2, #4
 800f408:	f104 0115 	add.w	r1, r4, #21
 800f40c:	428f      	cmp	r7, r1
 800f40e:	bf38      	it	cc
 800f410:	2204      	movcc	r2, #4
 800f412:	9201      	str	r2, [sp, #4]
 800f414:	9a02      	ldr	r2, [sp, #8]
 800f416:	9303      	str	r3, [sp, #12]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d80c      	bhi.n	800f436 <__multiply+0x9e>
 800f41c:	2e00      	cmp	r6, #0
 800f41e:	dd03      	ble.n	800f428 <__multiply+0x90>
 800f420:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f424:	2b00      	cmp	r3, #0
 800f426:	d05a      	beq.n	800f4de <__multiply+0x146>
 800f428:	6106      	str	r6, [r0, #16]
 800f42a:	b005      	add	sp, #20
 800f42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f430:	f843 2b04 	str.w	r2, [r3], #4
 800f434:	e7d8      	b.n	800f3e8 <__multiply+0x50>
 800f436:	f8b3 a000 	ldrh.w	sl, [r3]
 800f43a:	f1ba 0f00 	cmp.w	sl, #0
 800f43e:	d024      	beq.n	800f48a <__multiply+0xf2>
 800f440:	f104 0e14 	add.w	lr, r4, #20
 800f444:	46a9      	mov	r9, r5
 800f446:	f04f 0c00 	mov.w	ip, #0
 800f44a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f44e:	f8d9 1000 	ldr.w	r1, [r9]
 800f452:	fa1f fb82 	uxth.w	fp, r2
 800f456:	b289      	uxth	r1, r1
 800f458:	fb0a 110b 	mla	r1, sl, fp, r1
 800f45c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f460:	f8d9 2000 	ldr.w	r2, [r9]
 800f464:	4461      	add	r1, ip
 800f466:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f46a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f46e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f472:	b289      	uxth	r1, r1
 800f474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f478:	4577      	cmp	r7, lr
 800f47a:	f849 1b04 	str.w	r1, [r9], #4
 800f47e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f482:	d8e2      	bhi.n	800f44a <__multiply+0xb2>
 800f484:	9a01      	ldr	r2, [sp, #4]
 800f486:	f845 c002 	str.w	ip, [r5, r2]
 800f48a:	9a03      	ldr	r2, [sp, #12]
 800f48c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f490:	3304      	adds	r3, #4
 800f492:	f1b9 0f00 	cmp.w	r9, #0
 800f496:	d020      	beq.n	800f4da <__multiply+0x142>
 800f498:	6829      	ldr	r1, [r5, #0]
 800f49a:	f104 0c14 	add.w	ip, r4, #20
 800f49e:	46ae      	mov	lr, r5
 800f4a0:	f04f 0a00 	mov.w	sl, #0
 800f4a4:	f8bc b000 	ldrh.w	fp, [ip]
 800f4a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f4ac:	fb09 220b 	mla	r2, r9, fp, r2
 800f4b0:	4492      	add	sl, r2
 800f4b2:	b289      	uxth	r1, r1
 800f4b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f4b8:	f84e 1b04 	str.w	r1, [lr], #4
 800f4bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f4c0:	f8be 1000 	ldrh.w	r1, [lr]
 800f4c4:	0c12      	lsrs	r2, r2, #16
 800f4c6:	fb09 1102 	mla	r1, r9, r2, r1
 800f4ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f4ce:	4567      	cmp	r7, ip
 800f4d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f4d4:	d8e6      	bhi.n	800f4a4 <__multiply+0x10c>
 800f4d6:	9a01      	ldr	r2, [sp, #4]
 800f4d8:	50a9      	str	r1, [r5, r2]
 800f4da:	3504      	adds	r5, #4
 800f4dc:	e79a      	b.n	800f414 <__multiply+0x7c>
 800f4de:	3e01      	subs	r6, #1
 800f4e0:	e79c      	b.n	800f41c <__multiply+0x84>
 800f4e2:	bf00      	nop
 800f4e4:	080137f7 	.word	0x080137f7
 800f4e8:	08013808 	.word	0x08013808

0800f4ec <__pow5mult>:
 800f4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f0:	4615      	mov	r5, r2
 800f4f2:	f012 0203 	ands.w	r2, r2, #3
 800f4f6:	4606      	mov	r6, r0
 800f4f8:	460f      	mov	r7, r1
 800f4fa:	d007      	beq.n	800f50c <__pow5mult+0x20>
 800f4fc:	4c25      	ldr	r4, [pc, #148]	; (800f594 <__pow5mult+0xa8>)
 800f4fe:	3a01      	subs	r2, #1
 800f500:	2300      	movs	r3, #0
 800f502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f506:	f7ff fe9b 	bl	800f240 <__multadd>
 800f50a:	4607      	mov	r7, r0
 800f50c:	10ad      	asrs	r5, r5, #2
 800f50e:	d03d      	beq.n	800f58c <__pow5mult+0xa0>
 800f510:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f512:	b97c      	cbnz	r4, 800f534 <__pow5mult+0x48>
 800f514:	2010      	movs	r0, #16
 800f516:	f7fe fa0d 	bl	800d934 <malloc>
 800f51a:	4602      	mov	r2, r0
 800f51c:	6270      	str	r0, [r6, #36]	; 0x24
 800f51e:	b928      	cbnz	r0, 800f52c <__pow5mult+0x40>
 800f520:	4b1d      	ldr	r3, [pc, #116]	; (800f598 <__pow5mult+0xac>)
 800f522:	481e      	ldr	r0, [pc, #120]	; (800f59c <__pow5mult+0xb0>)
 800f524:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f528:	f000 fb1e 	bl	800fb68 <__assert_func>
 800f52c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f530:	6004      	str	r4, [r0, #0]
 800f532:	60c4      	str	r4, [r0, #12]
 800f534:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f53c:	b94c      	cbnz	r4, 800f552 <__pow5mult+0x66>
 800f53e:	f240 2171 	movw	r1, #625	; 0x271
 800f542:	4630      	mov	r0, r6
 800f544:	f7ff ff12 	bl	800f36c <__i2b>
 800f548:	2300      	movs	r3, #0
 800f54a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f54e:	4604      	mov	r4, r0
 800f550:	6003      	str	r3, [r0, #0]
 800f552:	f04f 0900 	mov.w	r9, #0
 800f556:	07eb      	lsls	r3, r5, #31
 800f558:	d50a      	bpl.n	800f570 <__pow5mult+0x84>
 800f55a:	4639      	mov	r1, r7
 800f55c:	4622      	mov	r2, r4
 800f55e:	4630      	mov	r0, r6
 800f560:	f7ff ff1a 	bl	800f398 <__multiply>
 800f564:	4639      	mov	r1, r7
 800f566:	4680      	mov	r8, r0
 800f568:	4630      	mov	r0, r6
 800f56a:	f7ff fe47 	bl	800f1fc <_Bfree>
 800f56e:	4647      	mov	r7, r8
 800f570:	106d      	asrs	r5, r5, #1
 800f572:	d00b      	beq.n	800f58c <__pow5mult+0xa0>
 800f574:	6820      	ldr	r0, [r4, #0]
 800f576:	b938      	cbnz	r0, 800f588 <__pow5mult+0x9c>
 800f578:	4622      	mov	r2, r4
 800f57a:	4621      	mov	r1, r4
 800f57c:	4630      	mov	r0, r6
 800f57e:	f7ff ff0b 	bl	800f398 <__multiply>
 800f582:	6020      	str	r0, [r4, #0]
 800f584:	f8c0 9000 	str.w	r9, [r0]
 800f588:	4604      	mov	r4, r0
 800f58a:	e7e4      	b.n	800f556 <__pow5mult+0x6a>
 800f58c:	4638      	mov	r0, r7
 800f58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f592:	bf00      	nop
 800f594:	08013958 	.word	0x08013958
 800f598:	08013785 	.word	0x08013785
 800f59c:	08013808 	.word	0x08013808

0800f5a0 <__lshift>:
 800f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	6849      	ldr	r1, [r1, #4]
 800f5a8:	6923      	ldr	r3, [r4, #16]
 800f5aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5ae:	68a3      	ldr	r3, [r4, #8]
 800f5b0:	4607      	mov	r7, r0
 800f5b2:	4691      	mov	r9, r2
 800f5b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5b8:	f108 0601 	add.w	r6, r8, #1
 800f5bc:	42b3      	cmp	r3, r6
 800f5be:	db0b      	blt.n	800f5d8 <__lshift+0x38>
 800f5c0:	4638      	mov	r0, r7
 800f5c2:	f7ff fddb 	bl	800f17c <_Balloc>
 800f5c6:	4605      	mov	r5, r0
 800f5c8:	b948      	cbnz	r0, 800f5de <__lshift+0x3e>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	4b2a      	ldr	r3, [pc, #168]	; (800f678 <__lshift+0xd8>)
 800f5ce:	482b      	ldr	r0, [pc, #172]	; (800f67c <__lshift+0xdc>)
 800f5d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f5d4:	f000 fac8 	bl	800fb68 <__assert_func>
 800f5d8:	3101      	adds	r1, #1
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	e7ee      	b.n	800f5bc <__lshift+0x1c>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	f100 0114 	add.w	r1, r0, #20
 800f5e4:	f100 0210 	add.w	r2, r0, #16
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	4553      	cmp	r3, sl
 800f5ec:	db37      	blt.n	800f65e <__lshift+0xbe>
 800f5ee:	6920      	ldr	r0, [r4, #16]
 800f5f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5f4:	f104 0314 	add.w	r3, r4, #20
 800f5f8:	f019 091f 	ands.w	r9, r9, #31
 800f5fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f600:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f604:	d02f      	beq.n	800f666 <__lshift+0xc6>
 800f606:	f1c9 0e20 	rsb	lr, r9, #32
 800f60a:	468a      	mov	sl, r1
 800f60c:	f04f 0c00 	mov.w	ip, #0
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	fa02 f209 	lsl.w	r2, r2, r9
 800f616:	ea42 020c 	orr.w	r2, r2, ip
 800f61a:	f84a 2b04 	str.w	r2, [sl], #4
 800f61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f622:	4298      	cmp	r0, r3
 800f624:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f628:	d8f2      	bhi.n	800f610 <__lshift+0x70>
 800f62a:	1b03      	subs	r3, r0, r4
 800f62c:	3b15      	subs	r3, #21
 800f62e:	f023 0303 	bic.w	r3, r3, #3
 800f632:	3304      	adds	r3, #4
 800f634:	f104 0215 	add.w	r2, r4, #21
 800f638:	4290      	cmp	r0, r2
 800f63a:	bf38      	it	cc
 800f63c:	2304      	movcc	r3, #4
 800f63e:	f841 c003 	str.w	ip, [r1, r3]
 800f642:	f1bc 0f00 	cmp.w	ip, #0
 800f646:	d001      	beq.n	800f64c <__lshift+0xac>
 800f648:	f108 0602 	add.w	r6, r8, #2
 800f64c:	3e01      	subs	r6, #1
 800f64e:	4638      	mov	r0, r7
 800f650:	612e      	str	r6, [r5, #16]
 800f652:	4621      	mov	r1, r4
 800f654:	f7ff fdd2 	bl	800f1fc <_Bfree>
 800f658:	4628      	mov	r0, r5
 800f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f662:	3301      	adds	r3, #1
 800f664:	e7c1      	b.n	800f5ea <__lshift+0x4a>
 800f666:	3904      	subs	r1, #4
 800f668:	f853 2b04 	ldr.w	r2, [r3], #4
 800f66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f670:	4298      	cmp	r0, r3
 800f672:	d8f9      	bhi.n	800f668 <__lshift+0xc8>
 800f674:	e7ea      	b.n	800f64c <__lshift+0xac>
 800f676:	bf00      	nop
 800f678:	080137f7 	.word	0x080137f7
 800f67c:	08013808 	.word	0x08013808

0800f680 <__mcmp>:
 800f680:	b530      	push	{r4, r5, lr}
 800f682:	6902      	ldr	r2, [r0, #16]
 800f684:	690c      	ldr	r4, [r1, #16]
 800f686:	1b12      	subs	r2, r2, r4
 800f688:	d10e      	bne.n	800f6a8 <__mcmp+0x28>
 800f68a:	f100 0314 	add.w	r3, r0, #20
 800f68e:	3114      	adds	r1, #20
 800f690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f69c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f6a0:	42a5      	cmp	r5, r4
 800f6a2:	d003      	beq.n	800f6ac <__mcmp+0x2c>
 800f6a4:	d305      	bcc.n	800f6b2 <__mcmp+0x32>
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	bd30      	pop	{r4, r5, pc}
 800f6ac:	4283      	cmp	r3, r0
 800f6ae:	d3f3      	bcc.n	800f698 <__mcmp+0x18>
 800f6b0:	e7fa      	b.n	800f6a8 <__mcmp+0x28>
 800f6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b6:	e7f7      	b.n	800f6a8 <__mcmp+0x28>

0800f6b8 <__mdiff>:
 800f6b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	460c      	mov	r4, r1
 800f6be:	4606      	mov	r6, r0
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	4690      	mov	r8, r2
 800f6c6:	f7ff ffdb 	bl	800f680 <__mcmp>
 800f6ca:	1e05      	subs	r5, r0, #0
 800f6cc:	d110      	bne.n	800f6f0 <__mdiff+0x38>
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f7ff fd53 	bl	800f17c <_Balloc>
 800f6d6:	b930      	cbnz	r0, 800f6e6 <__mdiff+0x2e>
 800f6d8:	4b3a      	ldr	r3, [pc, #232]	; (800f7c4 <__mdiff+0x10c>)
 800f6da:	4602      	mov	r2, r0
 800f6dc:	f240 2132 	movw	r1, #562	; 0x232
 800f6e0:	4839      	ldr	r0, [pc, #228]	; (800f7c8 <__mdiff+0x110>)
 800f6e2:	f000 fa41 	bl	800fb68 <__assert_func>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f6ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f0:	bfa4      	itt	ge
 800f6f2:	4643      	movge	r3, r8
 800f6f4:	46a0      	movge	r8, r4
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f6fc:	bfa6      	itte	ge
 800f6fe:	461c      	movge	r4, r3
 800f700:	2500      	movge	r5, #0
 800f702:	2501      	movlt	r5, #1
 800f704:	f7ff fd3a 	bl	800f17c <_Balloc>
 800f708:	b920      	cbnz	r0, 800f714 <__mdiff+0x5c>
 800f70a:	4b2e      	ldr	r3, [pc, #184]	; (800f7c4 <__mdiff+0x10c>)
 800f70c:	4602      	mov	r2, r0
 800f70e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f712:	e7e5      	b.n	800f6e0 <__mdiff+0x28>
 800f714:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f718:	6926      	ldr	r6, [r4, #16]
 800f71a:	60c5      	str	r5, [r0, #12]
 800f71c:	f104 0914 	add.w	r9, r4, #20
 800f720:	f108 0514 	add.w	r5, r8, #20
 800f724:	f100 0e14 	add.w	lr, r0, #20
 800f728:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f72c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f730:	f108 0210 	add.w	r2, r8, #16
 800f734:	46f2      	mov	sl, lr
 800f736:	2100      	movs	r1, #0
 800f738:	f859 3b04 	ldr.w	r3, [r9], #4
 800f73c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f740:	fa1f f883 	uxth.w	r8, r3
 800f744:	fa11 f18b 	uxtah	r1, r1, fp
 800f748:	0c1b      	lsrs	r3, r3, #16
 800f74a:	eba1 0808 	sub.w	r8, r1, r8
 800f74e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f752:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f756:	fa1f f888 	uxth.w	r8, r8
 800f75a:	1419      	asrs	r1, r3, #16
 800f75c:	454e      	cmp	r6, r9
 800f75e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f762:	f84a 3b04 	str.w	r3, [sl], #4
 800f766:	d8e7      	bhi.n	800f738 <__mdiff+0x80>
 800f768:	1b33      	subs	r3, r6, r4
 800f76a:	3b15      	subs	r3, #21
 800f76c:	f023 0303 	bic.w	r3, r3, #3
 800f770:	3304      	adds	r3, #4
 800f772:	3415      	adds	r4, #21
 800f774:	42a6      	cmp	r6, r4
 800f776:	bf38      	it	cc
 800f778:	2304      	movcc	r3, #4
 800f77a:	441d      	add	r5, r3
 800f77c:	4473      	add	r3, lr
 800f77e:	469e      	mov	lr, r3
 800f780:	462e      	mov	r6, r5
 800f782:	4566      	cmp	r6, ip
 800f784:	d30e      	bcc.n	800f7a4 <__mdiff+0xec>
 800f786:	f10c 0203 	add.w	r2, ip, #3
 800f78a:	1b52      	subs	r2, r2, r5
 800f78c:	f022 0203 	bic.w	r2, r2, #3
 800f790:	3d03      	subs	r5, #3
 800f792:	45ac      	cmp	ip, r5
 800f794:	bf38      	it	cc
 800f796:	2200      	movcc	r2, #0
 800f798:	441a      	add	r2, r3
 800f79a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f79e:	b17b      	cbz	r3, 800f7c0 <__mdiff+0x108>
 800f7a0:	6107      	str	r7, [r0, #16]
 800f7a2:	e7a3      	b.n	800f6ec <__mdiff+0x34>
 800f7a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800f7a8:	fa11 f288 	uxtah	r2, r1, r8
 800f7ac:	1414      	asrs	r4, r2, #16
 800f7ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f7b2:	b292      	uxth	r2, r2
 800f7b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f7b8:	f84e 2b04 	str.w	r2, [lr], #4
 800f7bc:	1421      	asrs	r1, r4, #16
 800f7be:	e7e0      	b.n	800f782 <__mdiff+0xca>
 800f7c0:	3f01      	subs	r7, #1
 800f7c2:	e7ea      	b.n	800f79a <__mdiff+0xe2>
 800f7c4:	080137f7 	.word	0x080137f7
 800f7c8:	08013808 	.word	0x08013808

0800f7cc <__d2b>:
 800f7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7d0:	4689      	mov	r9, r1
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	ec57 6b10 	vmov	r6, r7, d0
 800f7d8:	4690      	mov	r8, r2
 800f7da:	f7ff fccf 	bl	800f17c <_Balloc>
 800f7de:	4604      	mov	r4, r0
 800f7e0:	b930      	cbnz	r0, 800f7f0 <__d2b+0x24>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	4b25      	ldr	r3, [pc, #148]	; (800f87c <__d2b+0xb0>)
 800f7e6:	4826      	ldr	r0, [pc, #152]	; (800f880 <__d2b+0xb4>)
 800f7e8:	f240 310a 	movw	r1, #778	; 0x30a
 800f7ec:	f000 f9bc 	bl	800fb68 <__assert_func>
 800f7f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f7f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f7f8:	bb35      	cbnz	r5, 800f848 <__d2b+0x7c>
 800f7fa:	2e00      	cmp	r6, #0
 800f7fc:	9301      	str	r3, [sp, #4]
 800f7fe:	d028      	beq.n	800f852 <__d2b+0x86>
 800f800:	4668      	mov	r0, sp
 800f802:	9600      	str	r6, [sp, #0]
 800f804:	f7ff fd82 	bl	800f30c <__lo0bits>
 800f808:	9900      	ldr	r1, [sp, #0]
 800f80a:	b300      	cbz	r0, 800f84e <__d2b+0x82>
 800f80c:	9a01      	ldr	r2, [sp, #4]
 800f80e:	f1c0 0320 	rsb	r3, r0, #32
 800f812:	fa02 f303 	lsl.w	r3, r2, r3
 800f816:	430b      	orrs	r3, r1
 800f818:	40c2      	lsrs	r2, r0
 800f81a:	6163      	str	r3, [r4, #20]
 800f81c:	9201      	str	r2, [sp, #4]
 800f81e:	9b01      	ldr	r3, [sp, #4]
 800f820:	61a3      	str	r3, [r4, #24]
 800f822:	2b00      	cmp	r3, #0
 800f824:	bf14      	ite	ne
 800f826:	2202      	movne	r2, #2
 800f828:	2201      	moveq	r2, #1
 800f82a:	6122      	str	r2, [r4, #16]
 800f82c:	b1d5      	cbz	r5, 800f864 <__d2b+0x98>
 800f82e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f832:	4405      	add	r5, r0
 800f834:	f8c9 5000 	str.w	r5, [r9]
 800f838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f83c:	f8c8 0000 	str.w	r0, [r8]
 800f840:	4620      	mov	r0, r4
 800f842:	b003      	add	sp, #12
 800f844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f84c:	e7d5      	b.n	800f7fa <__d2b+0x2e>
 800f84e:	6161      	str	r1, [r4, #20]
 800f850:	e7e5      	b.n	800f81e <__d2b+0x52>
 800f852:	a801      	add	r0, sp, #4
 800f854:	f7ff fd5a 	bl	800f30c <__lo0bits>
 800f858:	9b01      	ldr	r3, [sp, #4]
 800f85a:	6163      	str	r3, [r4, #20]
 800f85c:	2201      	movs	r2, #1
 800f85e:	6122      	str	r2, [r4, #16]
 800f860:	3020      	adds	r0, #32
 800f862:	e7e3      	b.n	800f82c <__d2b+0x60>
 800f864:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f868:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f86c:	f8c9 0000 	str.w	r0, [r9]
 800f870:	6918      	ldr	r0, [r3, #16]
 800f872:	f7ff fd2b 	bl	800f2cc <__hi0bits>
 800f876:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f87a:	e7df      	b.n	800f83c <__d2b+0x70>
 800f87c:	080137f7 	.word	0x080137f7
 800f880:	08013808 	.word	0x08013808

0800f884 <_calloc_r>:
 800f884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f886:	fba1 2402 	umull	r2, r4, r1, r2
 800f88a:	b94c      	cbnz	r4, 800f8a0 <_calloc_r+0x1c>
 800f88c:	4611      	mov	r1, r2
 800f88e:	9201      	str	r2, [sp, #4]
 800f890:	f7fe f8da 	bl	800da48 <_malloc_r>
 800f894:	9a01      	ldr	r2, [sp, #4]
 800f896:	4605      	mov	r5, r0
 800f898:	b930      	cbnz	r0, 800f8a8 <_calloc_r+0x24>
 800f89a:	4628      	mov	r0, r5
 800f89c:	b003      	add	sp, #12
 800f89e:	bd30      	pop	{r4, r5, pc}
 800f8a0:	220c      	movs	r2, #12
 800f8a2:	6002      	str	r2, [r0, #0]
 800f8a4:	2500      	movs	r5, #0
 800f8a6:	e7f8      	b.n	800f89a <_calloc_r+0x16>
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	f7fe f859 	bl	800d960 <memset>
 800f8ae:	e7f4      	b.n	800f89a <_calloc_r+0x16>

0800f8b0 <__ssputs_r>:
 800f8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b4:	688e      	ldr	r6, [r1, #8]
 800f8b6:	429e      	cmp	r6, r3
 800f8b8:	4682      	mov	sl, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	4690      	mov	r8, r2
 800f8be:	461f      	mov	r7, r3
 800f8c0:	d838      	bhi.n	800f934 <__ssputs_r+0x84>
 800f8c2:	898a      	ldrh	r2, [r1, #12]
 800f8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8c8:	d032      	beq.n	800f930 <__ssputs_r+0x80>
 800f8ca:	6825      	ldr	r5, [r4, #0]
 800f8cc:	6909      	ldr	r1, [r1, #16]
 800f8ce:	eba5 0901 	sub.w	r9, r5, r1
 800f8d2:	6965      	ldr	r5, [r4, #20]
 800f8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8dc:	3301      	adds	r3, #1
 800f8de:	444b      	add	r3, r9
 800f8e0:	106d      	asrs	r5, r5, #1
 800f8e2:	429d      	cmp	r5, r3
 800f8e4:	bf38      	it	cc
 800f8e6:	461d      	movcc	r5, r3
 800f8e8:	0553      	lsls	r3, r2, #21
 800f8ea:	d531      	bpl.n	800f950 <__ssputs_r+0xa0>
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	f7fe f8ab 	bl	800da48 <_malloc_r>
 800f8f2:	4606      	mov	r6, r0
 800f8f4:	b950      	cbnz	r0, 800f90c <__ssputs_r+0x5c>
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	f8ca 3000 	str.w	r3, [sl]
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f902:	81a3      	strh	r3, [r4, #12]
 800f904:	f04f 30ff 	mov.w	r0, #4294967295
 800f908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f90c:	6921      	ldr	r1, [r4, #16]
 800f90e:	464a      	mov	r2, r9
 800f910:	f7fe f818 	bl	800d944 <memcpy>
 800f914:	89a3      	ldrh	r3, [r4, #12]
 800f916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f91e:	81a3      	strh	r3, [r4, #12]
 800f920:	6126      	str	r6, [r4, #16]
 800f922:	6165      	str	r5, [r4, #20]
 800f924:	444e      	add	r6, r9
 800f926:	eba5 0509 	sub.w	r5, r5, r9
 800f92a:	6026      	str	r6, [r4, #0]
 800f92c:	60a5      	str	r5, [r4, #8]
 800f92e:	463e      	mov	r6, r7
 800f930:	42be      	cmp	r6, r7
 800f932:	d900      	bls.n	800f936 <__ssputs_r+0x86>
 800f934:	463e      	mov	r6, r7
 800f936:	6820      	ldr	r0, [r4, #0]
 800f938:	4632      	mov	r2, r6
 800f93a:	4641      	mov	r1, r8
 800f93c:	f000 f959 	bl	800fbf2 <memmove>
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	1b9b      	subs	r3, r3, r6
 800f944:	60a3      	str	r3, [r4, #8]
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	4433      	add	r3, r6
 800f94a:	6023      	str	r3, [r4, #0]
 800f94c:	2000      	movs	r0, #0
 800f94e:	e7db      	b.n	800f908 <__ssputs_r+0x58>
 800f950:	462a      	mov	r2, r5
 800f952:	f000 f968 	bl	800fc26 <_realloc_r>
 800f956:	4606      	mov	r6, r0
 800f958:	2800      	cmp	r0, #0
 800f95a:	d1e1      	bne.n	800f920 <__ssputs_r+0x70>
 800f95c:	6921      	ldr	r1, [r4, #16]
 800f95e:	4650      	mov	r0, sl
 800f960:	f7fe f806 	bl	800d970 <_free_r>
 800f964:	e7c7      	b.n	800f8f6 <__ssputs_r+0x46>
	...

0800f968 <_svfiprintf_r>:
 800f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	4698      	mov	r8, r3
 800f96e:	898b      	ldrh	r3, [r1, #12]
 800f970:	061b      	lsls	r3, r3, #24
 800f972:	b09d      	sub	sp, #116	; 0x74
 800f974:	4607      	mov	r7, r0
 800f976:	460d      	mov	r5, r1
 800f978:	4614      	mov	r4, r2
 800f97a:	d50e      	bpl.n	800f99a <_svfiprintf_r+0x32>
 800f97c:	690b      	ldr	r3, [r1, #16]
 800f97e:	b963      	cbnz	r3, 800f99a <_svfiprintf_r+0x32>
 800f980:	2140      	movs	r1, #64	; 0x40
 800f982:	f7fe f861 	bl	800da48 <_malloc_r>
 800f986:	6028      	str	r0, [r5, #0]
 800f988:	6128      	str	r0, [r5, #16]
 800f98a:	b920      	cbnz	r0, 800f996 <_svfiprintf_r+0x2e>
 800f98c:	230c      	movs	r3, #12
 800f98e:	603b      	str	r3, [r7, #0]
 800f990:	f04f 30ff 	mov.w	r0, #4294967295
 800f994:	e0d1      	b.n	800fb3a <_svfiprintf_r+0x1d2>
 800f996:	2340      	movs	r3, #64	; 0x40
 800f998:	616b      	str	r3, [r5, #20]
 800f99a:	2300      	movs	r3, #0
 800f99c:	9309      	str	r3, [sp, #36]	; 0x24
 800f99e:	2320      	movs	r3, #32
 800f9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9a8:	2330      	movs	r3, #48	; 0x30
 800f9aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb54 <_svfiprintf_r+0x1ec>
 800f9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9b2:	f04f 0901 	mov.w	r9, #1
 800f9b6:	4623      	mov	r3, r4
 800f9b8:	469a      	mov	sl, r3
 800f9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9be:	b10a      	cbz	r2, 800f9c4 <_svfiprintf_r+0x5c>
 800f9c0:	2a25      	cmp	r2, #37	; 0x25
 800f9c2:	d1f9      	bne.n	800f9b8 <_svfiprintf_r+0x50>
 800f9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9c8:	d00b      	beq.n	800f9e2 <_svfiprintf_r+0x7a>
 800f9ca:	465b      	mov	r3, fp
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f7ff ff6d 	bl	800f8b0 <__ssputs_r>
 800f9d6:	3001      	adds	r0, #1
 800f9d8:	f000 80aa 	beq.w	800fb30 <_svfiprintf_r+0x1c8>
 800f9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9de:	445a      	add	r2, fp
 800f9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800f9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 80a2 	beq.w	800fb30 <_svfiprintf_r+0x1c8>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9f6:	f10a 0a01 	add.w	sl, sl, #1
 800f9fa:	9304      	str	r3, [sp, #16]
 800f9fc:	9307      	str	r3, [sp, #28]
 800f9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa02:	931a      	str	r3, [sp, #104]	; 0x68
 800fa04:	4654      	mov	r4, sl
 800fa06:	2205      	movs	r2, #5
 800fa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa0c:	4851      	ldr	r0, [pc, #324]	; (800fb54 <_svfiprintf_r+0x1ec>)
 800fa0e:	f7f0 fbff 	bl	8000210 <memchr>
 800fa12:	9a04      	ldr	r2, [sp, #16]
 800fa14:	b9d8      	cbnz	r0, 800fa4e <_svfiprintf_r+0xe6>
 800fa16:	06d0      	lsls	r0, r2, #27
 800fa18:	bf44      	itt	mi
 800fa1a:	2320      	movmi	r3, #32
 800fa1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa20:	0711      	lsls	r1, r2, #28
 800fa22:	bf44      	itt	mi
 800fa24:	232b      	movmi	r3, #43	; 0x2b
 800fa26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa30:	d015      	beq.n	800fa5e <_svfiprintf_r+0xf6>
 800fa32:	9a07      	ldr	r2, [sp, #28]
 800fa34:	4654      	mov	r4, sl
 800fa36:	2000      	movs	r0, #0
 800fa38:	f04f 0c0a 	mov.w	ip, #10
 800fa3c:	4621      	mov	r1, r4
 800fa3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa42:	3b30      	subs	r3, #48	; 0x30
 800fa44:	2b09      	cmp	r3, #9
 800fa46:	d94e      	bls.n	800fae6 <_svfiprintf_r+0x17e>
 800fa48:	b1b0      	cbz	r0, 800fa78 <_svfiprintf_r+0x110>
 800fa4a:	9207      	str	r2, [sp, #28]
 800fa4c:	e014      	b.n	800fa78 <_svfiprintf_r+0x110>
 800fa4e:	eba0 0308 	sub.w	r3, r0, r8
 800fa52:	fa09 f303 	lsl.w	r3, r9, r3
 800fa56:	4313      	orrs	r3, r2
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	46a2      	mov	sl, r4
 800fa5c:	e7d2      	b.n	800fa04 <_svfiprintf_r+0x9c>
 800fa5e:	9b03      	ldr	r3, [sp, #12]
 800fa60:	1d19      	adds	r1, r3, #4
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	9103      	str	r1, [sp, #12]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	bfbb      	ittet	lt
 800fa6a:	425b      	neglt	r3, r3
 800fa6c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa70:	9307      	strge	r3, [sp, #28]
 800fa72:	9307      	strlt	r3, [sp, #28]
 800fa74:	bfb8      	it	lt
 800fa76:	9204      	strlt	r2, [sp, #16]
 800fa78:	7823      	ldrb	r3, [r4, #0]
 800fa7a:	2b2e      	cmp	r3, #46	; 0x2e
 800fa7c:	d10c      	bne.n	800fa98 <_svfiprintf_r+0x130>
 800fa7e:	7863      	ldrb	r3, [r4, #1]
 800fa80:	2b2a      	cmp	r3, #42	; 0x2a
 800fa82:	d135      	bne.n	800faf0 <_svfiprintf_r+0x188>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	1d1a      	adds	r2, r3, #4
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	9203      	str	r2, [sp, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bfb8      	it	lt
 800fa90:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa94:	3402      	adds	r4, #2
 800fa96:	9305      	str	r3, [sp, #20]
 800fa98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb64 <_svfiprintf_r+0x1fc>
 800fa9c:	7821      	ldrb	r1, [r4, #0]
 800fa9e:	2203      	movs	r2, #3
 800faa0:	4650      	mov	r0, sl
 800faa2:	f7f0 fbb5 	bl	8000210 <memchr>
 800faa6:	b140      	cbz	r0, 800faba <_svfiprintf_r+0x152>
 800faa8:	2340      	movs	r3, #64	; 0x40
 800faaa:	eba0 000a 	sub.w	r0, r0, sl
 800faae:	fa03 f000 	lsl.w	r0, r3, r0
 800fab2:	9b04      	ldr	r3, [sp, #16]
 800fab4:	4303      	orrs	r3, r0
 800fab6:	3401      	adds	r4, #1
 800fab8:	9304      	str	r3, [sp, #16]
 800faba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fabe:	4826      	ldr	r0, [pc, #152]	; (800fb58 <_svfiprintf_r+0x1f0>)
 800fac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fac4:	2206      	movs	r2, #6
 800fac6:	f7f0 fba3 	bl	8000210 <memchr>
 800faca:	2800      	cmp	r0, #0
 800facc:	d038      	beq.n	800fb40 <_svfiprintf_r+0x1d8>
 800face:	4b23      	ldr	r3, [pc, #140]	; (800fb5c <_svfiprintf_r+0x1f4>)
 800fad0:	bb1b      	cbnz	r3, 800fb1a <_svfiprintf_r+0x1b2>
 800fad2:	9b03      	ldr	r3, [sp, #12]
 800fad4:	3307      	adds	r3, #7
 800fad6:	f023 0307 	bic.w	r3, r3, #7
 800fada:	3308      	adds	r3, #8
 800fadc:	9303      	str	r3, [sp, #12]
 800fade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fae0:	4433      	add	r3, r6
 800fae2:	9309      	str	r3, [sp, #36]	; 0x24
 800fae4:	e767      	b.n	800f9b6 <_svfiprintf_r+0x4e>
 800fae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800faea:	460c      	mov	r4, r1
 800faec:	2001      	movs	r0, #1
 800faee:	e7a5      	b.n	800fa3c <_svfiprintf_r+0xd4>
 800faf0:	2300      	movs	r3, #0
 800faf2:	3401      	adds	r4, #1
 800faf4:	9305      	str	r3, [sp, #20]
 800faf6:	4619      	mov	r1, r3
 800faf8:	f04f 0c0a 	mov.w	ip, #10
 800fafc:	4620      	mov	r0, r4
 800fafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb02:	3a30      	subs	r2, #48	; 0x30
 800fb04:	2a09      	cmp	r2, #9
 800fb06:	d903      	bls.n	800fb10 <_svfiprintf_r+0x1a8>
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d0c5      	beq.n	800fa98 <_svfiprintf_r+0x130>
 800fb0c:	9105      	str	r1, [sp, #20]
 800fb0e:	e7c3      	b.n	800fa98 <_svfiprintf_r+0x130>
 800fb10:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb14:	4604      	mov	r4, r0
 800fb16:	2301      	movs	r3, #1
 800fb18:	e7f0      	b.n	800fafc <_svfiprintf_r+0x194>
 800fb1a:	ab03      	add	r3, sp, #12
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	462a      	mov	r2, r5
 800fb20:	4b0f      	ldr	r3, [pc, #60]	; (800fb60 <_svfiprintf_r+0x1f8>)
 800fb22:	a904      	add	r1, sp, #16
 800fb24:	4638      	mov	r0, r7
 800fb26:	f7fe f8a3 	bl	800dc70 <_printf_float>
 800fb2a:	1c42      	adds	r2, r0, #1
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	d1d6      	bne.n	800fade <_svfiprintf_r+0x176>
 800fb30:	89ab      	ldrh	r3, [r5, #12]
 800fb32:	065b      	lsls	r3, r3, #25
 800fb34:	f53f af2c 	bmi.w	800f990 <_svfiprintf_r+0x28>
 800fb38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb3a:	b01d      	add	sp, #116	; 0x74
 800fb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb40:	ab03      	add	r3, sp, #12
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	462a      	mov	r2, r5
 800fb46:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <_svfiprintf_r+0x1f8>)
 800fb48:	a904      	add	r1, sp, #16
 800fb4a:	4638      	mov	r0, r7
 800fb4c:	f7fe fb34 	bl	800e1b8 <_printf_i>
 800fb50:	e7eb      	b.n	800fb2a <_svfiprintf_r+0x1c2>
 800fb52:	bf00      	nop
 800fb54:	08013964 	.word	0x08013964
 800fb58:	0801396e 	.word	0x0801396e
 800fb5c:	0800dc71 	.word	0x0800dc71
 800fb60:	0800f8b1 	.word	0x0800f8b1
 800fb64:	0801396a 	.word	0x0801396a

0800fb68 <__assert_func>:
 800fb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb6a:	4614      	mov	r4, r2
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <__assert_func+0x2c>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4605      	mov	r5, r0
 800fb74:	68d8      	ldr	r0, [r3, #12]
 800fb76:	b14c      	cbz	r4, 800fb8c <__assert_func+0x24>
 800fb78:	4b07      	ldr	r3, [pc, #28]	; (800fb98 <__assert_func+0x30>)
 800fb7a:	9100      	str	r1, [sp, #0]
 800fb7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb80:	4906      	ldr	r1, [pc, #24]	; (800fb9c <__assert_func+0x34>)
 800fb82:	462b      	mov	r3, r5
 800fb84:	f000 f80e 	bl	800fba4 <fiprintf>
 800fb88:	f000 faa4 	bl	80100d4 <abort>
 800fb8c:	4b04      	ldr	r3, [pc, #16]	; (800fba0 <__assert_func+0x38>)
 800fb8e:	461c      	mov	r4, r3
 800fb90:	e7f3      	b.n	800fb7a <__assert_func+0x12>
 800fb92:	bf00      	nop
 800fb94:	20000040 	.word	0x20000040
 800fb98:	08013975 	.word	0x08013975
 800fb9c:	08013982 	.word	0x08013982
 800fba0:	080139b0 	.word	0x080139b0

0800fba4 <fiprintf>:
 800fba4:	b40e      	push	{r1, r2, r3}
 800fba6:	b503      	push	{r0, r1, lr}
 800fba8:	4601      	mov	r1, r0
 800fbaa:	ab03      	add	r3, sp, #12
 800fbac:	4805      	ldr	r0, [pc, #20]	; (800fbc4 <fiprintf+0x20>)
 800fbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbb2:	6800      	ldr	r0, [r0, #0]
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	f000 f88f 	bl	800fcd8 <_vfiprintf_r>
 800fbba:	b002      	add	sp, #8
 800fbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbc0:	b003      	add	sp, #12
 800fbc2:	4770      	bx	lr
 800fbc4:	20000040 	.word	0x20000040

0800fbc8 <__retarget_lock_init_recursive>:
 800fbc8:	4770      	bx	lr

0800fbca <__retarget_lock_acquire_recursive>:
 800fbca:	4770      	bx	lr

0800fbcc <__retarget_lock_release_recursive>:
 800fbcc:	4770      	bx	lr

0800fbce <__ascii_mbtowc>:
 800fbce:	b082      	sub	sp, #8
 800fbd0:	b901      	cbnz	r1, 800fbd4 <__ascii_mbtowc+0x6>
 800fbd2:	a901      	add	r1, sp, #4
 800fbd4:	b142      	cbz	r2, 800fbe8 <__ascii_mbtowc+0x1a>
 800fbd6:	b14b      	cbz	r3, 800fbec <__ascii_mbtowc+0x1e>
 800fbd8:	7813      	ldrb	r3, [r2, #0]
 800fbda:	600b      	str	r3, [r1, #0]
 800fbdc:	7812      	ldrb	r2, [r2, #0]
 800fbde:	1e10      	subs	r0, r2, #0
 800fbe0:	bf18      	it	ne
 800fbe2:	2001      	movne	r0, #1
 800fbe4:	b002      	add	sp, #8
 800fbe6:	4770      	bx	lr
 800fbe8:	4610      	mov	r0, r2
 800fbea:	e7fb      	b.n	800fbe4 <__ascii_mbtowc+0x16>
 800fbec:	f06f 0001 	mvn.w	r0, #1
 800fbf0:	e7f8      	b.n	800fbe4 <__ascii_mbtowc+0x16>

0800fbf2 <memmove>:
 800fbf2:	4288      	cmp	r0, r1
 800fbf4:	b510      	push	{r4, lr}
 800fbf6:	eb01 0402 	add.w	r4, r1, r2
 800fbfa:	d902      	bls.n	800fc02 <memmove+0x10>
 800fbfc:	4284      	cmp	r4, r0
 800fbfe:	4623      	mov	r3, r4
 800fc00:	d807      	bhi.n	800fc12 <memmove+0x20>
 800fc02:	1e43      	subs	r3, r0, #1
 800fc04:	42a1      	cmp	r1, r4
 800fc06:	d008      	beq.n	800fc1a <memmove+0x28>
 800fc08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc10:	e7f8      	b.n	800fc04 <memmove+0x12>
 800fc12:	4402      	add	r2, r0
 800fc14:	4601      	mov	r1, r0
 800fc16:	428a      	cmp	r2, r1
 800fc18:	d100      	bne.n	800fc1c <memmove+0x2a>
 800fc1a:	bd10      	pop	{r4, pc}
 800fc1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc24:	e7f7      	b.n	800fc16 <memmove+0x24>

0800fc26 <_realloc_r>:
 800fc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc2a:	4680      	mov	r8, r0
 800fc2c:	4614      	mov	r4, r2
 800fc2e:	460e      	mov	r6, r1
 800fc30:	b921      	cbnz	r1, 800fc3c <_realloc_r+0x16>
 800fc32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc36:	4611      	mov	r1, r2
 800fc38:	f7fd bf06 	b.w	800da48 <_malloc_r>
 800fc3c:	b92a      	cbnz	r2, 800fc4a <_realloc_r+0x24>
 800fc3e:	f7fd fe97 	bl	800d970 <_free_r>
 800fc42:	4625      	mov	r5, r4
 800fc44:	4628      	mov	r0, r5
 800fc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc4a:	f000 fc67 	bl	801051c <_malloc_usable_size_r>
 800fc4e:	4284      	cmp	r4, r0
 800fc50:	4607      	mov	r7, r0
 800fc52:	d802      	bhi.n	800fc5a <_realloc_r+0x34>
 800fc54:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc58:	d812      	bhi.n	800fc80 <_realloc_r+0x5a>
 800fc5a:	4621      	mov	r1, r4
 800fc5c:	4640      	mov	r0, r8
 800fc5e:	f7fd fef3 	bl	800da48 <_malloc_r>
 800fc62:	4605      	mov	r5, r0
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d0ed      	beq.n	800fc44 <_realloc_r+0x1e>
 800fc68:	42bc      	cmp	r4, r7
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	bf28      	it	cs
 800fc70:	463a      	movcs	r2, r7
 800fc72:	f7fd fe67 	bl	800d944 <memcpy>
 800fc76:	4631      	mov	r1, r6
 800fc78:	4640      	mov	r0, r8
 800fc7a:	f7fd fe79 	bl	800d970 <_free_r>
 800fc7e:	e7e1      	b.n	800fc44 <_realloc_r+0x1e>
 800fc80:	4635      	mov	r5, r6
 800fc82:	e7df      	b.n	800fc44 <_realloc_r+0x1e>

0800fc84 <__sfputc_r>:
 800fc84:	6893      	ldr	r3, [r2, #8]
 800fc86:	3b01      	subs	r3, #1
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	b410      	push	{r4}
 800fc8c:	6093      	str	r3, [r2, #8]
 800fc8e:	da08      	bge.n	800fca2 <__sfputc_r+0x1e>
 800fc90:	6994      	ldr	r4, [r2, #24]
 800fc92:	42a3      	cmp	r3, r4
 800fc94:	db01      	blt.n	800fc9a <__sfputc_r+0x16>
 800fc96:	290a      	cmp	r1, #10
 800fc98:	d103      	bne.n	800fca2 <__sfputc_r+0x1e>
 800fc9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc9e:	f000 b94b 	b.w	800ff38 <__swbuf_r>
 800fca2:	6813      	ldr	r3, [r2, #0]
 800fca4:	1c58      	adds	r0, r3, #1
 800fca6:	6010      	str	r0, [r2, #0]
 800fca8:	7019      	strb	r1, [r3, #0]
 800fcaa:	4608      	mov	r0, r1
 800fcac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <__sfputs_r>:
 800fcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	460f      	mov	r7, r1
 800fcb8:	4614      	mov	r4, r2
 800fcba:	18d5      	adds	r5, r2, r3
 800fcbc:	42ac      	cmp	r4, r5
 800fcbe:	d101      	bne.n	800fcc4 <__sfputs_r+0x12>
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	e007      	b.n	800fcd4 <__sfputs_r+0x22>
 800fcc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcc8:	463a      	mov	r2, r7
 800fcca:	4630      	mov	r0, r6
 800fccc:	f7ff ffda 	bl	800fc84 <__sfputc_r>
 800fcd0:	1c43      	adds	r3, r0, #1
 800fcd2:	d1f3      	bne.n	800fcbc <__sfputs_r+0xa>
 800fcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fcd8 <_vfiprintf_r>:
 800fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcdc:	460d      	mov	r5, r1
 800fcde:	b09d      	sub	sp, #116	; 0x74
 800fce0:	4614      	mov	r4, r2
 800fce2:	4698      	mov	r8, r3
 800fce4:	4606      	mov	r6, r0
 800fce6:	b118      	cbz	r0, 800fcf0 <_vfiprintf_r+0x18>
 800fce8:	6983      	ldr	r3, [r0, #24]
 800fcea:	b90b      	cbnz	r3, 800fcf0 <_vfiprintf_r+0x18>
 800fcec:	f000 fb14 	bl	8010318 <__sinit>
 800fcf0:	4b89      	ldr	r3, [pc, #548]	; (800ff18 <_vfiprintf_r+0x240>)
 800fcf2:	429d      	cmp	r5, r3
 800fcf4:	d11b      	bne.n	800fd2e <_vfiprintf_r+0x56>
 800fcf6:	6875      	ldr	r5, [r6, #4]
 800fcf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcfa:	07d9      	lsls	r1, r3, #31
 800fcfc:	d405      	bmi.n	800fd0a <_vfiprintf_r+0x32>
 800fcfe:	89ab      	ldrh	r3, [r5, #12]
 800fd00:	059a      	lsls	r2, r3, #22
 800fd02:	d402      	bmi.n	800fd0a <_vfiprintf_r+0x32>
 800fd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd06:	f7ff ff60 	bl	800fbca <__retarget_lock_acquire_recursive>
 800fd0a:	89ab      	ldrh	r3, [r5, #12]
 800fd0c:	071b      	lsls	r3, r3, #28
 800fd0e:	d501      	bpl.n	800fd14 <_vfiprintf_r+0x3c>
 800fd10:	692b      	ldr	r3, [r5, #16]
 800fd12:	b9eb      	cbnz	r3, 800fd50 <_vfiprintf_r+0x78>
 800fd14:	4629      	mov	r1, r5
 800fd16:	4630      	mov	r0, r6
 800fd18:	f000 f96e 	bl	800fff8 <__swsetup_r>
 800fd1c:	b1c0      	cbz	r0, 800fd50 <_vfiprintf_r+0x78>
 800fd1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd20:	07dc      	lsls	r4, r3, #31
 800fd22:	d50e      	bpl.n	800fd42 <_vfiprintf_r+0x6a>
 800fd24:	f04f 30ff 	mov.w	r0, #4294967295
 800fd28:	b01d      	add	sp, #116	; 0x74
 800fd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2e:	4b7b      	ldr	r3, [pc, #492]	; (800ff1c <_vfiprintf_r+0x244>)
 800fd30:	429d      	cmp	r5, r3
 800fd32:	d101      	bne.n	800fd38 <_vfiprintf_r+0x60>
 800fd34:	68b5      	ldr	r5, [r6, #8]
 800fd36:	e7df      	b.n	800fcf8 <_vfiprintf_r+0x20>
 800fd38:	4b79      	ldr	r3, [pc, #484]	; (800ff20 <_vfiprintf_r+0x248>)
 800fd3a:	429d      	cmp	r5, r3
 800fd3c:	bf08      	it	eq
 800fd3e:	68f5      	ldreq	r5, [r6, #12]
 800fd40:	e7da      	b.n	800fcf8 <_vfiprintf_r+0x20>
 800fd42:	89ab      	ldrh	r3, [r5, #12]
 800fd44:	0598      	lsls	r0, r3, #22
 800fd46:	d4ed      	bmi.n	800fd24 <_vfiprintf_r+0x4c>
 800fd48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd4a:	f7ff ff3f 	bl	800fbcc <__retarget_lock_release_recursive>
 800fd4e:	e7e9      	b.n	800fd24 <_vfiprintf_r+0x4c>
 800fd50:	2300      	movs	r3, #0
 800fd52:	9309      	str	r3, [sp, #36]	; 0x24
 800fd54:	2320      	movs	r3, #32
 800fd56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd5e:	2330      	movs	r3, #48	; 0x30
 800fd60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ff24 <_vfiprintf_r+0x24c>
 800fd64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd68:	f04f 0901 	mov.w	r9, #1
 800fd6c:	4623      	mov	r3, r4
 800fd6e:	469a      	mov	sl, r3
 800fd70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd74:	b10a      	cbz	r2, 800fd7a <_vfiprintf_r+0xa2>
 800fd76:	2a25      	cmp	r2, #37	; 0x25
 800fd78:	d1f9      	bne.n	800fd6e <_vfiprintf_r+0x96>
 800fd7a:	ebba 0b04 	subs.w	fp, sl, r4
 800fd7e:	d00b      	beq.n	800fd98 <_vfiprintf_r+0xc0>
 800fd80:	465b      	mov	r3, fp
 800fd82:	4622      	mov	r2, r4
 800fd84:	4629      	mov	r1, r5
 800fd86:	4630      	mov	r0, r6
 800fd88:	f7ff ff93 	bl	800fcb2 <__sfputs_r>
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	f000 80aa 	beq.w	800fee6 <_vfiprintf_r+0x20e>
 800fd92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd94:	445a      	add	r2, fp
 800fd96:	9209      	str	r2, [sp, #36]	; 0x24
 800fd98:	f89a 3000 	ldrb.w	r3, [sl]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 80a2 	beq.w	800fee6 <_vfiprintf_r+0x20e>
 800fda2:	2300      	movs	r3, #0
 800fda4:	f04f 32ff 	mov.w	r2, #4294967295
 800fda8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdac:	f10a 0a01 	add.w	sl, sl, #1
 800fdb0:	9304      	str	r3, [sp, #16]
 800fdb2:	9307      	str	r3, [sp, #28]
 800fdb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdb8:	931a      	str	r3, [sp, #104]	; 0x68
 800fdba:	4654      	mov	r4, sl
 800fdbc:	2205      	movs	r2, #5
 800fdbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdc2:	4858      	ldr	r0, [pc, #352]	; (800ff24 <_vfiprintf_r+0x24c>)
 800fdc4:	f7f0 fa24 	bl	8000210 <memchr>
 800fdc8:	9a04      	ldr	r2, [sp, #16]
 800fdca:	b9d8      	cbnz	r0, 800fe04 <_vfiprintf_r+0x12c>
 800fdcc:	06d1      	lsls	r1, r2, #27
 800fdce:	bf44      	itt	mi
 800fdd0:	2320      	movmi	r3, #32
 800fdd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdd6:	0713      	lsls	r3, r2, #28
 800fdd8:	bf44      	itt	mi
 800fdda:	232b      	movmi	r3, #43	; 0x2b
 800fddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fde0:	f89a 3000 	ldrb.w	r3, [sl]
 800fde4:	2b2a      	cmp	r3, #42	; 0x2a
 800fde6:	d015      	beq.n	800fe14 <_vfiprintf_r+0x13c>
 800fde8:	9a07      	ldr	r2, [sp, #28]
 800fdea:	4654      	mov	r4, sl
 800fdec:	2000      	movs	r0, #0
 800fdee:	f04f 0c0a 	mov.w	ip, #10
 800fdf2:	4621      	mov	r1, r4
 800fdf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdf8:	3b30      	subs	r3, #48	; 0x30
 800fdfa:	2b09      	cmp	r3, #9
 800fdfc:	d94e      	bls.n	800fe9c <_vfiprintf_r+0x1c4>
 800fdfe:	b1b0      	cbz	r0, 800fe2e <_vfiprintf_r+0x156>
 800fe00:	9207      	str	r2, [sp, #28]
 800fe02:	e014      	b.n	800fe2e <_vfiprintf_r+0x156>
 800fe04:	eba0 0308 	sub.w	r3, r0, r8
 800fe08:	fa09 f303 	lsl.w	r3, r9, r3
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	9304      	str	r3, [sp, #16]
 800fe10:	46a2      	mov	sl, r4
 800fe12:	e7d2      	b.n	800fdba <_vfiprintf_r+0xe2>
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	1d19      	adds	r1, r3, #4
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	9103      	str	r1, [sp, #12]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	bfbb      	ittet	lt
 800fe20:	425b      	neglt	r3, r3
 800fe22:	f042 0202 	orrlt.w	r2, r2, #2
 800fe26:	9307      	strge	r3, [sp, #28]
 800fe28:	9307      	strlt	r3, [sp, #28]
 800fe2a:	bfb8      	it	lt
 800fe2c:	9204      	strlt	r2, [sp, #16]
 800fe2e:	7823      	ldrb	r3, [r4, #0]
 800fe30:	2b2e      	cmp	r3, #46	; 0x2e
 800fe32:	d10c      	bne.n	800fe4e <_vfiprintf_r+0x176>
 800fe34:	7863      	ldrb	r3, [r4, #1]
 800fe36:	2b2a      	cmp	r3, #42	; 0x2a
 800fe38:	d135      	bne.n	800fea6 <_vfiprintf_r+0x1ce>
 800fe3a:	9b03      	ldr	r3, [sp, #12]
 800fe3c:	1d1a      	adds	r2, r3, #4
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	9203      	str	r2, [sp, #12]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	bfb8      	it	lt
 800fe46:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe4a:	3402      	adds	r4, #2
 800fe4c:	9305      	str	r3, [sp, #20]
 800fe4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ff34 <_vfiprintf_r+0x25c>
 800fe52:	7821      	ldrb	r1, [r4, #0]
 800fe54:	2203      	movs	r2, #3
 800fe56:	4650      	mov	r0, sl
 800fe58:	f7f0 f9da 	bl	8000210 <memchr>
 800fe5c:	b140      	cbz	r0, 800fe70 <_vfiprintf_r+0x198>
 800fe5e:	2340      	movs	r3, #64	; 0x40
 800fe60:	eba0 000a 	sub.w	r0, r0, sl
 800fe64:	fa03 f000 	lsl.w	r0, r3, r0
 800fe68:	9b04      	ldr	r3, [sp, #16]
 800fe6a:	4303      	orrs	r3, r0
 800fe6c:	3401      	adds	r4, #1
 800fe6e:	9304      	str	r3, [sp, #16]
 800fe70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe74:	482c      	ldr	r0, [pc, #176]	; (800ff28 <_vfiprintf_r+0x250>)
 800fe76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe7a:	2206      	movs	r2, #6
 800fe7c:	f7f0 f9c8 	bl	8000210 <memchr>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d03f      	beq.n	800ff04 <_vfiprintf_r+0x22c>
 800fe84:	4b29      	ldr	r3, [pc, #164]	; (800ff2c <_vfiprintf_r+0x254>)
 800fe86:	bb1b      	cbnz	r3, 800fed0 <_vfiprintf_r+0x1f8>
 800fe88:	9b03      	ldr	r3, [sp, #12]
 800fe8a:	3307      	adds	r3, #7
 800fe8c:	f023 0307 	bic.w	r3, r3, #7
 800fe90:	3308      	adds	r3, #8
 800fe92:	9303      	str	r3, [sp, #12]
 800fe94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe96:	443b      	add	r3, r7
 800fe98:	9309      	str	r3, [sp, #36]	; 0x24
 800fe9a:	e767      	b.n	800fd6c <_vfiprintf_r+0x94>
 800fe9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fea0:	460c      	mov	r4, r1
 800fea2:	2001      	movs	r0, #1
 800fea4:	e7a5      	b.n	800fdf2 <_vfiprintf_r+0x11a>
 800fea6:	2300      	movs	r3, #0
 800fea8:	3401      	adds	r4, #1
 800feaa:	9305      	str	r3, [sp, #20]
 800feac:	4619      	mov	r1, r3
 800feae:	f04f 0c0a 	mov.w	ip, #10
 800feb2:	4620      	mov	r0, r4
 800feb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feb8:	3a30      	subs	r2, #48	; 0x30
 800feba:	2a09      	cmp	r2, #9
 800febc:	d903      	bls.n	800fec6 <_vfiprintf_r+0x1ee>
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0c5      	beq.n	800fe4e <_vfiprintf_r+0x176>
 800fec2:	9105      	str	r1, [sp, #20]
 800fec4:	e7c3      	b.n	800fe4e <_vfiprintf_r+0x176>
 800fec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800feca:	4604      	mov	r4, r0
 800fecc:	2301      	movs	r3, #1
 800fece:	e7f0      	b.n	800feb2 <_vfiprintf_r+0x1da>
 800fed0:	ab03      	add	r3, sp, #12
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	462a      	mov	r2, r5
 800fed6:	4b16      	ldr	r3, [pc, #88]	; (800ff30 <_vfiprintf_r+0x258>)
 800fed8:	a904      	add	r1, sp, #16
 800feda:	4630      	mov	r0, r6
 800fedc:	f7fd fec8 	bl	800dc70 <_printf_float>
 800fee0:	4607      	mov	r7, r0
 800fee2:	1c78      	adds	r0, r7, #1
 800fee4:	d1d6      	bne.n	800fe94 <_vfiprintf_r+0x1bc>
 800fee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fee8:	07d9      	lsls	r1, r3, #31
 800feea:	d405      	bmi.n	800fef8 <_vfiprintf_r+0x220>
 800feec:	89ab      	ldrh	r3, [r5, #12]
 800feee:	059a      	lsls	r2, r3, #22
 800fef0:	d402      	bmi.n	800fef8 <_vfiprintf_r+0x220>
 800fef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fef4:	f7ff fe6a 	bl	800fbcc <__retarget_lock_release_recursive>
 800fef8:	89ab      	ldrh	r3, [r5, #12]
 800fefa:	065b      	lsls	r3, r3, #25
 800fefc:	f53f af12 	bmi.w	800fd24 <_vfiprintf_r+0x4c>
 800ff00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff02:	e711      	b.n	800fd28 <_vfiprintf_r+0x50>
 800ff04:	ab03      	add	r3, sp, #12
 800ff06:	9300      	str	r3, [sp, #0]
 800ff08:	462a      	mov	r2, r5
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <_vfiprintf_r+0x258>)
 800ff0c:	a904      	add	r1, sp, #16
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f7fe f952 	bl	800e1b8 <_printf_i>
 800ff14:	e7e4      	b.n	800fee0 <_vfiprintf_r+0x208>
 800ff16:	bf00      	nop
 800ff18:	08013adc 	.word	0x08013adc
 800ff1c:	08013afc 	.word	0x08013afc
 800ff20:	08013abc 	.word	0x08013abc
 800ff24:	08013964 	.word	0x08013964
 800ff28:	0801396e 	.word	0x0801396e
 800ff2c:	0800dc71 	.word	0x0800dc71
 800ff30:	0800fcb3 	.word	0x0800fcb3
 800ff34:	0801396a 	.word	0x0801396a

0800ff38 <__swbuf_r>:
 800ff38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3a:	460e      	mov	r6, r1
 800ff3c:	4614      	mov	r4, r2
 800ff3e:	4605      	mov	r5, r0
 800ff40:	b118      	cbz	r0, 800ff4a <__swbuf_r+0x12>
 800ff42:	6983      	ldr	r3, [r0, #24]
 800ff44:	b90b      	cbnz	r3, 800ff4a <__swbuf_r+0x12>
 800ff46:	f000 f9e7 	bl	8010318 <__sinit>
 800ff4a:	4b21      	ldr	r3, [pc, #132]	; (800ffd0 <__swbuf_r+0x98>)
 800ff4c:	429c      	cmp	r4, r3
 800ff4e:	d12b      	bne.n	800ffa8 <__swbuf_r+0x70>
 800ff50:	686c      	ldr	r4, [r5, #4]
 800ff52:	69a3      	ldr	r3, [r4, #24]
 800ff54:	60a3      	str	r3, [r4, #8]
 800ff56:	89a3      	ldrh	r3, [r4, #12]
 800ff58:	071a      	lsls	r2, r3, #28
 800ff5a:	d52f      	bpl.n	800ffbc <__swbuf_r+0x84>
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	b36b      	cbz	r3, 800ffbc <__swbuf_r+0x84>
 800ff60:	6923      	ldr	r3, [r4, #16]
 800ff62:	6820      	ldr	r0, [r4, #0]
 800ff64:	1ac0      	subs	r0, r0, r3
 800ff66:	6963      	ldr	r3, [r4, #20]
 800ff68:	b2f6      	uxtb	r6, r6
 800ff6a:	4283      	cmp	r3, r0
 800ff6c:	4637      	mov	r7, r6
 800ff6e:	dc04      	bgt.n	800ff7a <__swbuf_r+0x42>
 800ff70:	4621      	mov	r1, r4
 800ff72:	4628      	mov	r0, r5
 800ff74:	f000 f93c 	bl	80101f0 <_fflush_r>
 800ff78:	bb30      	cbnz	r0, 800ffc8 <__swbuf_r+0x90>
 800ff7a:	68a3      	ldr	r3, [r4, #8]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	60a3      	str	r3, [r4, #8]
 800ff80:	6823      	ldr	r3, [r4, #0]
 800ff82:	1c5a      	adds	r2, r3, #1
 800ff84:	6022      	str	r2, [r4, #0]
 800ff86:	701e      	strb	r6, [r3, #0]
 800ff88:	6963      	ldr	r3, [r4, #20]
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	4283      	cmp	r3, r0
 800ff8e:	d004      	beq.n	800ff9a <__swbuf_r+0x62>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	07db      	lsls	r3, r3, #31
 800ff94:	d506      	bpl.n	800ffa4 <__swbuf_r+0x6c>
 800ff96:	2e0a      	cmp	r6, #10
 800ff98:	d104      	bne.n	800ffa4 <__swbuf_r+0x6c>
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	f000 f927 	bl	80101f0 <_fflush_r>
 800ffa2:	b988      	cbnz	r0, 800ffc8 <__swbuf_r+0x90>
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	; (800ffd4 <__swbuf_r+0x9c>)
 800ffaa:	429c      	cmp	r4, r3
 800ffac:	d101      	bne.n	800ffb2 <__swbuf_r+0x7a>
 800ffae:	68ac      	ldr	r4, [r5, #8]
 800ffb0:	e7cf      	b.n	800ff52 <__swbuf_r+0x1a>
 800ffb2:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <__swbuf_r+0xa0>)
 800ffb4:	429c      	cmp	r4, r3
 800ffb6:	bf08      	it	eq
 800ffb8:	68ec      	ldreq	r4, [r5, #12]
 800ffba:	e7ca      	b.n	800ff52 <__swbuf_r+0x1a>
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	f000 f81a 	bl	800fff8 <__swsetup_r>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d0cb      	beq.n	800ff60 <__swbuf_r+0x28>
 800ffc8:	f04f 37ff 	mov.w	r7, #4294967295
 800ffcc:	e7ea      	b.n	800ffa4 <__swbuf_r+0x6c>
 800ffce:	bf00      	nop
 800ffd0:	08013adc 	.word	0x08013adc
 800ffd4:	08013afc 	.word	0x08013afc
 800ffd8:	08013abc 	.word	0x08013abc

0800ffdc <__ascii_wctomb>:
 800ffdc:	b149      	cbz	r1, 800fff2 <__ascii_wctomb+0x16>
 800ffde:	2aff      	cmp	r2, #255	; 0xff
 800ffe0:	bf85      	ittet	hi
 800ffe2:	238a      	movhi	r3, #138	; 0x8a
 800ffe4:	6003      	strhi	r3, [r0, #0]
 800ffe6:	700a      	strbls	r2, [r1, #0]
 800ffe8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffec:	bf98      	it	ls
 800ffee:	2001      	movls	r0, #1
 800fff0:	4770      	bx	lr
 800fff2:	4608      	mov	r0, r1
 800fff4:	4770      	bx	lr
	...

0800fff8 <__swsetup_r>:
 800fff8:	4b32      	ldr	r3, [pc, #200]	; (80100c4 <__swsetup_r+0xcc>)
 800fffa:	b570      	push	{r4, r5, r6, lr}
 800fffc:	681d      	ldr	r5, [r3, #0]
 800fffe:	4606      	mov	r6, r0
 8010000:	460c      	mov	r4, r1
 8010002:	b125      	cbz	r5, 801000e <__swsetup_r+0x16>
 8010004:	69ab      	ldr	r3, [r5, #24]
 8010006:	b913      	cbnz	r3, 801000e <__swsetup_r+0x16>
 8010008:	4628      	mov	r0, r5
 801000a:	f000 f985 	bl	8010318 <__sinit>
 801000e:	4b2e      	ldr	r3, [pc, #184]	; (80100c8 <__swsetup_r+0xd0>)
 8010010:	429c      	cmp	r4, r3
 8010012:	d10f      	bne.n	8010034 <__swsetup_r+0x3c>
 8010014:	686c      	ldr	r4, [r5, #4]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801001c:	0719      	lsls	r1, r3, #28
 801001e:	d42c      	bmi.n	801007a <__swsetup_r+0x82>
 8010020:	06dd      	lsls	r5, r3, #27
 8010022:	d411      	bmi.n	8010048 <__swsetup_r+0x50>
 8010024:	2309      	movs	r3, #9
 8010026:	6033      	str	r3, [r6, #0]
 8010028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801002c:	81a3      	strh	r3, [r4, #12]
 801002e:	f04f 30ff 	mov.w	r0, #4294967295
 8010032:	e03e      	b.n	80100b2 <__swsetup_r+0xba>
 8010034:	4b25      	ldr	r3, [pc, #148]	; (80100cc <__swsetup_r+0xd4>)
 8010036:	429c      	cmp	r4, r3
 8010038:	d101      	bne.n	801003e <__swsetup_r+0x46>
 801003a:	68ac      	ldr	r4, [r5, #8]
 801003c:	e7eb      	b.n	8010016 <__swsetup_r+0x1e>
 801003e:	4b24      	ldr	r3, [pc, #144]	; (80100d0 <__swsetup_r+0xd8>)
 8010040:	429c      	cmp	r4, r3
 8010042:	bf08      	it	eq
 8010044:	68ec      	ldreq	r4, [r5, #12]
 8010046:	e7e6      	b.n	8010016 <__swsetup_r+0x1e>
 8010048:	0758      	lsls	r0, r3, #29
 801004a:	d512      	bpl.n	8010072 <__swsetup_r+0x7a>
 801004c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801004e:	b141      	cbz	r1, 8010062 <__swsetup_r+0x6a>
 8010050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010054:	4299      	cmp	r1, r3
 8010056:	d002      	beq.n	801005e <__swsetup_r+0x66>
 8010058:	4630      	mov	r0, r6
 801005a:	f7fd fc89 	bl	800d970 <_free_r>
 801005e:	2300      	movs	r3, #0
 8010060:	6363      	str	r3, [r4, #52]	; 0x34
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010068:	81a3      	strh	r3, [r4, #12]
 801006a:	2300      	movs	r3, #0
 801006c:	6063      	str	r3, [r4, #4]
 801006e:	6923      	ldr	r3, [r4, #16]
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	f043 0308 	orr.w	r3, r3, #8
 8010078:	81a3      	strh	r3, [r4, #12]
 801007a:	6923      	ldr	r3, [r4, #16]
 801007c:	b94b      	cbnz	r3, 8010092 <__swsetup_r+0x9a>
 801007e:	89a3      	ldrh	r3, [r4, #12]
 8010080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010088:	d003      	beq.n	8010092 <__swsetup_r+0x9a>
 801008a:	4621      	mov	r1, r4
 801008c:	4630      	mov	r0, r6
 801008e:	f000 fa05 	bl	801049c <__smakebuf_r>
 8010092:	89a0      	ldrh	r0, [r4, #12]
 8010094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010098:	f010 0301 	ands.w	r3, r0, #1
 801009c:	d00a      	beq.n	80100b4 <__swsetup_r+0xbc>
 801009e:	2300      	movs	r3, #0
 80100a0:	60a3      	str	r3, [r4, #8]
 80100a2:	6963      	ldr	r3, [r4, #20]
 80100a4:	425b      	negs	r3, r3
 80100a6:	61a3      	str	r3, [r4, #24]
 80100a8:	6923      	ldr	r3, [r4, #16]
 80100aa:	b943      	cbnz	r3, 80100be <__swsetup_r+0xc6>
 80100ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80100b0:	d1ba      	bne.n	8010028 <__swsetup_r+0x30>
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
 80100b4:	0781      	lsls	r1, r0, #30
 80100b6:	bf58      	it	pl
 80100b8:	6963      	ldrpl	r3, [r4, #20]
 80100ba:	60a3      	str	r3, [r4, #8]
 80100bc:	e7f4      	b.n	80100a8 <__swsetup_r+0xb0>
 80100be:	2000      	movs	r0, #0
 80100c0:	e7f7      	b.n	80100b2 <__swsetup_r+0xba>
 80100c2:	bf00      	nop
 80100c4:	20000040 	.word	0x20000040
 80100c8:	08013adc 	.word	0x08013adc
 80100cc:	08013afc 	.word	0x08013afc
 80100d0:	08013abc 	.word	0x08013abc

080100d4 <abort>:
 80100d4:	b508      	push	{r3, lr}
 80100d6:	2006      	movs	r0, #6
 80100d8:	f000 fa50 	bl	801057c <raise>
 80100dc:	2001      	movs	r0, #1
 80100de:	f7f4 f94f 	bl	8004380 <_exit>
	...

080100e4 <__sflush_r>:
 80100e4:	898a      	ldrh	r2, [r1, #12]
 80100e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ea:	4605      	mov	r5, r0
 80100ec:	0710      	lsls	r0, r2, #28
 80100ee:	460c      	mov	r4, r1
 80100f0:	d458      	bmi.n	80101a4 <__sflush_r+0xc0>
 80100f2:	684b      	ldr	r3, [r1, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	dc05      	bgt.n	8010104 <__sflush_r+0x20>
 80100f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	dc02      	bgt.n	8010104 <__sflush_r+0x20>
 80100fe:	2000      	movs	r0, #0
 8010100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010106:	2e00      	cmp	r6, #0
 8010108:	d0f9      	beq.n	80100fe <__sflush_r+0x1a>
 801010a:	2300      	movs	r3, #0
 801010c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010110:	682f      	ldr	r7, [r5, #0]
 8010112:	602b      	str	r3, [r5, #0]
 8010114:	d032      	beq.n	801017c <__sflush_r+0x98>
 8010116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010118:	89a3      	ldrh	r3, [r4, #12]
 801011a:	075a      	lsls	r2, r3, #29
 801011c:	d505      	bpl.n	801012a <__sflush_r+0x46>
 801011e:	6863      	ldr	r3, [r4, #4]
 8010120:	1ac0      	subs	r0, r0, r3
 8010122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010124:	b10b      	cbz	r3, 801012a <__sflush_r+0x46>
 8010126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010128:	1ac0      	subs	r0, r0, r3
 801012a:	2300      	movs	r3, #0
 801012c:	4602      	mov	r2, r0
 801012e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010130:	6a21      	ldr	r1, [r4, #32]
 8010132:	4628      	mov	r0, r5
 8010134:	47b0      	blx	r6
 8010136:	1c43      	adds	r3, r0, #1
 8010138:	89a3      	ldrh	r3, [r4, #12]
 801013a:	d106      	bne.n	801014a <__sflush_r+0x66>
 801013c:	6829      	ldr	r1, [r5, #0]
 801013e:	291d      	cmp	r1, #29
 8010140:	d82c      	bhi.n	801019c <__sflush_r+0xb8>
 8010142:	4a2a      	ldr	r2, [pc, #168]	; (80101ec <__sflush_r+0x108>)
 8010144:	40ca      	lsrs	r2, r1
 8010146:	07d6      	lsls	r6, r2, #31
 8010148:	d528      	bpl.n	801019c <__sflush_r+0xb8>
 801014a:	2200      	movs	r2, #0
 801014c:	6062      	str	r2, [r4, #4]
 801014e:	04d9      	lsls	r1, r3, #19
 8010150:	6922      	ldr	r2, [r4, #16]
 8010152:	6022      	str	r2, [r4, #0]
 8010154:	d504      	bpl.n	8010160 <__sflush_r+0x7c>
 8010156:	1c42      	adds	r2, r0, #1
 8010158:	d101      	bne.n	801015e <__sflush_r+0x7a>
 801015a:	682b      	ldr	r3, [r5, #0]
 801015c:	b903      	cbnz	r3, 8010160 <__sflush_r+0x7c>
 801015e:	6560      	str	r0, [r4, #84]	; 0x54
 8010160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010162:	602f      	str	r7, [r5, #0]
 8010164:	2900      	cmp	r1, #0
 8010166:	d0ca      	beq.n	80100fe <__sflush_r+0x1a>
 8010168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801016c:	4299      	cmp	r1, r3
 801016e:	d002      	beq.n	8010176 <__sflush_r+0x92>
 8010170:	4628      	mov	r0, r5
 8010172:	f7fd fbfd 	bl	800d970 <_free_r>
 8010176:	2000      	movs	r0, #0
 8010178:	6360      	str	r0, [r4, #52]	; 0x34
 801017a:	e7c1      	b.n	8010100 <__sflush_r+0x1c>
 801017c:	6a21      	ldr	r1, [r4, #32]
 801017e:	2301      	movs	r3, #1
 8010180:	4628      	mov	r0, r5
 8010182:	47b0      	blx	r6
 8010184:	1c41      	adds	r1, r0, #1
 8010186:	d1c7      	bne.n	8010118 <__sflush_r+0x34>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d0c4      	beq.n	8010118 <__sflush_r+0x34>
 801018e:	2b1d      	cmp	r3, #29
 8010190:	d001      	beq.n	8010196 <__sflush_r+0xb2>
 8010192:	2b16      	cmp	r3, #22
 8010194:	d101      	bne.n	801019a <__sflush_r+0xb6>
 8010196:	602f      	str	r7, [r5, #0]
 8010198:	e7b1      	b.n	80100fe <__sflush_r+0x1a>
 801019a:	89a3      	ldrh	r3, [r4, #12]
 801019c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101a0:	81a3      	strh	r3, [r4, #12]
 80101a2:	e7ad      	b.n	8010100 <__sflush_r+0x1c>
 80101a4:	690f      	ldr	r7, [r1, #16]
 80101a6:	2f00      	cmp	r7, #0
 80101a8:	d0a9      	beq.n	80100fe <__sflush_r+0x1a>
 80101aa:	0793      	lsls	r3, r2, #30
 80101ac:	680e      	ldr	r6, [r1, #0]
 80101ae:	bf08      	it	eq
 80101b0:	694b      	ldreq	r3, [r1, #20]
 80101b2:	600f      	str	r7, [r1, #0]
 80101b4:	bf18      	it	ne
 80101b6:	2300      	movne	r3, #0
 80101b8:	eba6 0807 	sub.w	r8, r6, r7
 80101bc:	608b      	str	r3, [r1, #8]
 80101be:	f1b8 0f00 	cmp.w	r8, #0
 80101c2:	dd9c      	ble.n	80100fe <__sflush_r+0x1a>
 80101c4:	6a21      	ldr	r1, [r4, #32]
 80101c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101c8:	4643      	mov	r3, r8
 80101ca:	463a      	mov	r2, r7
 80101cc:	4628      	mov	r0, r5
 80101ce:	47b0      	blx	r6
 80101d0:	2800      	cmp	r0, #0
 80101d2:	dc06      	bgt.n	80101e2 <__sflush_r+0xfe>
 80101d4:	89a3      	ldrh	r3, [r4, #12]
 80101d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101da:	81a3      	strh	r3, [r4, #12]
 80101dc:	f04f 30ff 	mov.w	r0, #4294967295
 80101e0:	e78e      	b.n	8010100 <__sflush_r+0x1c>
 80101e2:	4407      	add	r7, r0
 80101e4:	eba8 0800 	sub.w	r8, r8, r0
 80101e8:	e7e9      	b.n	80101be <__sflush_r+0xda>
 80101ea:	bf00      	nop
 80101ec:	20400001 	.word	0x20400001

080101f0 <_fflush_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	690b      	ldr	r3, [r1, #16]
 80101f4:	4605      	mov	r5, r0
 80101f6:	460c      	mov	r4, r1
 80101f8:	b913      	cbnz	r3, 8010200 <_fflush_r+0x10>
 80101fa:	2500      	movs	r5, #0
 80101fc:	4628      	mov	r0, r5
 80101fe:	bd38      	pop	{r3, r4, r5, pc}
 8010200:	b118      	cbz	r0, 801020a <_fflush_r+0x1a>
 8010202:	6983      	ldr	r3, [r0, #24]
 8010204:	b90b      	cbnz	r3, 801020a <_fflush_r+0x1a>
 8010206:	f000 f887 	bl	8010318 <__sinit>
 801020a:	4b14      	ldr	r3, [pc, #80]	; (801025c <_fflush_r+0x6c>)
 801020c:	429c      	cmp	r4, r3
 801020e:	d11b      	bne.n	8010248 <_fflush_r+0x58>
 8010210:	686c      	ldr	r4, [r5, #4]
 8010212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d0ef      	beq.n	80101fa <_fflush_r+0xa>
 801021a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801021c:	07d0      	lsls	r0, r2, #31
 801021e:	d404      	bmi.n	801022a <_fflush_r+0x3a>
 8010220:	0599      	lsls	r1, r3, #22
 8010222:	d402      	bmi.n	801022a <_fflush_r+0x3a>
 8010224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010226:	f7ff fcd0 	bl	800fbca <__retarget_lock_acquire_recursive>
 801022a:	4628      	mov	r0, r5
 801022c:	4621      	mov	r1, r4
 801022e:	f7ff ff59 	bl	80100e4 <__sflush_r>
 8010232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010234:	07da      	lsls	r2, r3, #31
 8010236:	4605      	mov	r5, r0
 8010238:	d4e0      	bmi.n	80101fc <_fflush_r+0xc>
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	059b      	lsls	r3, r3, #22
 801023e:	d4dd      	bmi.n	80101fc <_fflush_r+0xc>
 8010240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010242:	f7ff fcc3 	bl	800fbcc <__retarget_lock_release_recursive>
 8010246:	e7d9      	b.n	80101fc <_fflush_r+0xc>
 8010248:	4b05      	ldr	r3, [pc, #20]	; (8010260 <_fflush_r+0x70>)
 801024a:	429c      	cmp	r4, r3
 801024c:	d101      	bne.n	8010252 <_fflush_r+0x62>
 801024e:	68ac      	ldr	r4, [r5, #8]
 8010250:	e7df      	b.n	8010212 <_fflush_r+0x22>
 8010252:	4b04      	ldr	r3, [pc, #16]	; (8010264 <_fflush_r+0x74>)
 8010254:	429c      	cmp	r4, r3
 8010256:	bf08      	it	eq
 8010258:	68ec      	ldreq	r4, [r5, #12]
 801025a:	e7da      	b.n	8010212 <_fflush_r+0x22>
 801025c:	08013adc 	.word	0x08013adc
 8010260:	08013afc 	.word	0x08013afc
 8010264:	08013abc 	.word	0x08013abc

08010268 <std>:
 8010268:	2300      	movs	r3, #0
 801026a:	b510      	push	{r4, lr}
 801026c:	4604      	mov	r4, r0
 801026e:	e9c0 3300 	strd	r3, r3, [r0]
 8010272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010276:	6083      	str	r3, [r0, #8]
 8010278:	8181      	strh	r1, [r0, #12]
 801027a:	6643      	str	r3, [r0, #100]	; 0x64
 801027c:	81c2      	strh	r2, [r0, #14]
 801027e:	6183      	str	r3, [r0, #24]
 8010280:	4619      	mov	r1, r3
 8010282:	2208      	movs	r2, #8
 8010284:	305c      	adds	r0, #92	; 0x5c
 8010286:	f7fd fb6b 	bl	800d960 <memset>
 801028a:	4b05      	ldr	r3, [pc, #20]	; (80102a0 <std+0x38>)
 801028c:	6263      	str	r3, [r4, #36]	; 0x24
 801028e:	4b05      	ldr	r3, [pc, #20]	; (80102a4 <std+0x3c>)
 8010290:	62a3      	str	r3, [r4, #40]	; 0x28
 8010292:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <std+0x40>)
 8010294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010296:	4b05      	ldr	r3, [pc, #20]	; (80102ac <std+0x44>)
 8010298:	6224      	str	r4, [r4, #32]
 801029a:	6323      	str	r3, [r4, #48]	; 0x30
 801029c:	bd10      	pop	{r4, pc}
 801029e:	bf00      	nop
 80102a0:	080105b5 	.word	0x080105b5
 80102a4:	080105d7 	.word	0x080105d7
 80102a8:	0801060f 	.word	0x0801060f
 80102ac:	08010633 	.word	0x08010633

080102b0 <_cleanup_r>:
 80102b0:	4901      	ldr	r1, [pc, #4]	; (80102b8 <_cleanup_r+0x8>)
 80102b2:	f000 b8af 	b.w	8010414 <_fwalk_reent>
 80102b6:	bf00      	nop
 80102b8:	080101f1 	.word	0x080101f1

080102bc <__sfmoreglue>:
 80102bc:	b570      	push	{r4, r5, r6, lr}
 80102be:	2268      	movs	r2, #104	; 0x68
 80102c0:	1e4d      	subs	r5, r1, #1
 80102c2:	4355      	muls	r5, r2
 80102c4:	460e      	mov	r6, r1
 80102c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80102ca:	f7fd fbbd 	bl	800da48 <_malloc_r>
 80102ce:	4604      	mov	r4, r0
 80102d0:	b140      	cbz	r0, 80102e4 <__sfmoreglue+0x28>
 80102d2:	2100      	movs	r1, #0
 80102d4:	e9c0 1600 	strd	r1, r6, [r0]
 80102d8:	300c      	adds	r0, #12
 80102da:	60a0      	str	r0, [r4, #8]
 80102dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80102e0:	f7fd fb3e 	bl	800d960 <memset>
 80102e4:	4620      	mov	r0, r4
 80102e6:	bd70      	pop	{r4, r5, r6, pc}

080102e8 <__sfp_lock_acquire>:
 80102e8:	4801      	ldr	r0, [pc, #4]	; (80102f0 <__sfp_lock_acquire+0x8>)
 80102ea:	f7ff bc6e 	b.w	800fbca <__retarget_lock_acquire_recursive>
 80102ee:	bf00      	nop
 80102f0:	2000dc79 	.word	0x2000dc79

080102f4 <__sfp_lock_release>:
 80102f4:	4801      	ldr	r0, [pc, #4]	; (80102fc <__sfp_lock_release+0x8>)
 80102f6:	f7ff bc69 	b.w	800fbcc <__retarget_lock_release_recursive>
 80102fa:	bf00      	nop
 80102fc:	2000dc79 	.word	0x2000dc79

08010300 <__sinit_lock_acquire>:
 8010300:	4801      	ldr	r0, [pc, #4]	; (8010308 <__sinit_lock_acquire+0x8>)
 8010302:	f7ff bc62 	b.w	800fbca <__retarget_lock_acquire_recursive>
 8010306:	bf00      	nop
 8010308:	2000dc7a 	.word	0x2000dc7a

0801030c <__sinit_lock_release>:
 801030c:	4801      	ldr	r0, [pc, #4]	; (8010314 <__sinit_lock_release+0x8>)
 801030e:	f7ff bc5d 	b.w	800fbcc <__retarget_lock_release_recursive>
 8010312:	bf00      	nop
 8010314:	2000dc7a 	.word	0x2000dc7a

08010318 <__sinit>:
 8010318:	b510      	push	{r4, lr}
 801031a:	4604      	mov	r4, r0
 801031c:	f7ff fff0 	bl	8010300 <__sinit_lock_acquire>
 8010320:	69a3      	ldr	r3, [r4, #24]
 8010322:	b11b      	cbz	r3, 801032c <__sinit+0x14>
 8010324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010328:	f7ff bff0 	b.w	801030c <__sinit_lock_release>
 801032c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010330:	6523      	str	r3, [r4, #80]	; 0x50
 8010332:	4b13      	ldr	r3, [pc, #76]	; (8010380 <__sinit+0x68>)
 8010334:	4a13      	ldr	r2, [pc, #76]	; (8010384 <__sinit+0x6c>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	62a2      	str	r2, [r4, #40]	; 0x28
 801033a:	42a3      	cmp	r3, r4
 801033c:	bf04      	itt	eq
 801033e:	2301      	moveq	r3, #1
 8010340:	61a3      	streq	r3, [r4, #24]
 8010342:	4620      	mov	r0, r4
 8010344:	f000 f820 	bl	8010388 <__sfp>
 8010348:	6060      	str	r0, [r4, #4]
 801034a:	4620      	mov	r0, r4
 801034c:	f000 f81c 	bl	8010388 <__sfp>
 8010350:	60a0      	str	r0, [r4, #8]
 8010352:	4620      	mov	r0, r4
 8010354:	f000 f818 	bl	8010388 <__sfp>
 8010358:	2200      	movs	r2, #0
 801035a:	60e0      	str	r0, [r4, #12]
 801035c:	2104      	movs	r1, #4
 801035e:	6860      	ldr	r0, [r4, #4]
 8010360:	f7ff ff82 	bl	8010268 <std>
 8010364:	68a0      	ldr	r0, [r4, #8]
 8010366:	2201      	movs	r2, #1
 8010368:	2109      	movs	r1, #9
 801036a:	f7ff ff7d 	bl	8010268 <std>
 801036e:	68e0      	ldr	r0, [r4, #12]
 8010370:	2202      	movs	r2, #2
 8010372:	2112      	movs	r1, #18
 8010374:	f7ff ff78 	bl	8010268 <std>
 8010378:	2301      	movs	r3, #1
 801037a:	61a3      	str	r3, [r4, #24]
 801037c:	e7d2      	b.n	8010324 <__sinit+0xc>
 801037e:	bf00      	nop
 8010380:	08013740 	.word	0x08013740
 8010384:	080102b1 	.word	0x080102b1

08010388 <__sfp>:
 8010388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038a:	4607      	mov	r7, r0
 801038c:	f7ff ffac 	bl	80102e8 <__sfp_lock_acquire>
 8010390:	4b1e      	ldr	r3, [pc, #120]	; (801040c <__sfp+0x84>)
 8010392:	681e      	ldr	r6, [r3, #0]
 8010394:	69b3      	ldr	r3, [r6, #24]
 8010396:	b913      	cbnz	r3, 801039e <__sfp+0x16>
 8010398:	4630      	mov	r0, r6
 801039a:	f7ff ffbd 	bl	8010318 <__sinit>
 801039e:	3648      	adds	r6, #72	; 0x48
 80103a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	d503      	bpl.n	80103b0 <__sfp+0x28>
 80103a8:	6833      	ldr	r3, [r6, #0]
 80103aa:	b30b      	cbz	r3, 80103f0 <__sfp+0x68>
 80103ac:	6836      	ldr	r6, [r6, #0]
 80103ae:	e7f7      	b.n	80103a0 <__sfp+0x18>
 80103b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80103b4:	b9d5      	cbnz	r5, 80103ec <__sfp+0x64>
 80103b6:	4b16      	ldr	r3, [pc, #88]	; (8010410 <__sfp+0x88>)
 80103b8:	60e3      	str	r3, [r4, #12]
 80103ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80103be:	6665      	str	r5, [r4, #100]	; 0x64
 80103c0:	f7ff fc02 	bl	800fbc8 <__retarget_lock_init_recursive>
 80103c4:	f7ff ff96 	bl	80102f4 <__sfp_lock_release>
 80103c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80103cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80103d0:	6025      	str	r5, [r4, #0]
 80103d2:	61a5      	str	r5, [r4, #24]
 80103d4:	2208      	movs	r2, #8
 80103d6:	4629      	mov	r1, r5
 80103d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80103dc:	f7fd fac0 	bl	800d960 <memset>
 80103e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80103e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80103e8:	4620      	mov	r0, r4
 80103ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ec:	3468      	adds	r4, #104	; 0x68
 80103ee:	e7d9      	b.n	80103a4 <__sfp+0x1c>
 80103f0:	2104      	movs	r1, #4
 80103f2:	4638      	mov	r0, r7
 80103f4:	f7ff ff62 	bl	80102bc <__sfmoreglue>
 80103f8:	4604      	mov	r4, r0
 80103fa:	6030      	str	r0, [r6, #0]
 80103fc:	2800      	cmp	r0, #0
 80103fe:	d1d5      	bne.n	80103ac <__sfp+0x24>
 8010400:	f7ff ff78 	bl	80102f4 <__sfp_lock_release>
 8010404:	230c      	movs	r3, #12
 8010406:	603b      	str	r3, [r7, #0]
 8010408:	e7ee      	b.n	80103e8 <__sfp+0x60>
 801040a:	bf00      	nop
 801040c:	08013740 	.word	0x08013740
 8010410:	ffff0001 	.word	0xffff0001

08010414 <_fwalk_reent>:
 8010414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010418:	4606      	mov	r6, r0
 801041a:	4688      	mov	r8, r1
 801041c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010420:	2700      	movs	r7, #0
 8010422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010426:	f1b9 0901 	subs.w	r9, r9, #1
 801042a:	d505      	bpl.n	8010438 <_fwalk_reent+0x24>
 801042c:	6824      	ldr	r4, [r4, #0]
 801042e:	2c00      	cmp	r4, #0
 8010430:	d1f7      	bne.n	8010422 <_fwalk_reent+0xe>
 8010432:	4638      	mov	r0, r7
 8010434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010438:	89ab      	ldrh	r3, [r5, #12]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d907      	bls.n	801044e <_fwalk_reent+0x3a>
 801043e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010442:	3301      	adds	r3, #1
 8010444:	d003      	beq.n	801044e <_fwalk_reent+0x3a>
 8010446:	4629      	mov	r1, r5
 8010448:	4630      	mov	r0, r6
 801044a:	47c0      	blx	r8
 801044c:	4307      	orrs	r7, r0
 801044e:	3568      	adds	r5, #104	; 0x68
 8010450:	e7e9      	b.n	8010426 <_fwalk_reent+0x12>

08010452 <__swhatbuf_r>:
 8010452:	b570      	push	{r4, r5, r6, lr}
 8010454:	460e      	mov	r6, r1
 8010456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801045a:	2900      	cmp	r1, #0
 801045c:	b096      	sub	sp, #88	; 0x58
 801045e:	4614      	mov	r4, r2
 8010460:	461d      	mov	r5, r3
 8010462:	da08      	bge.n	8010476 <__swhatbuf_r+0x24>
 8010464:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010468:	2200      	movs	r2, #0
 801046a:	602a      	str	r2, [r5, #0]
 801046c:	061a      	lsls	r2, r3, #24
 801046e:	d410      	bmi.n	8010492 <__swhatbuf_r+0x40>
 8010470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010474:	e00e      	b.n	8010494 <__swhatbuf_r+0x42>
 8010476:	466a      	mov	r2, sp
 8010478:	f000 f902 	bl	8010680 <_fstat_r>
 801047c:	2800      	cmp	r0, #0
 801047e:	dbf1      	blt.n	8010464 <__swhatbuf_r+0x12>
 8010480:	9a01      	ldr	r2, [sp, #4]
 8010482:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010486:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801048a:	425a      	negs	r2, r3
 801048c:	415a      	adcs	r2, r3
 801048e:	602a      	str	r2, [r5, #0]
 8010490:	e7ee      	b.n	8010470 <__swhatbuf_r+0x1e>
 8010492:	2340      	movs	r3, #64	; 0x40
 8010494:	2000      	movs	r0, #0
 8010496:	6023      	str	r3, [r4, #0]
 8010498:	b016      	add	sp, #88	; 0x58
 801049a:	bd70      	pop	{r4, r5, r6, pc}

0801049c <__smakebuf_r>:
 801049c:	898b      	ldrh	r3, [r1, #12]
 801049e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80104a0:	079d      	lsls	r5, r3, #30
 80104a2:	4606      	mov	r6, r0
 80104a4:	460c      	mov	r4, r1
 80104a6:	d507      	bpl.n	80104b8 <__smakebuf_r+0x1c>
 80104a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80104ac:	6023      	str	r3, [r4, #0]
 80104ae:	6123      	str	r3, [r4, #16]
 80104b0:	2301      	movs	r3, #1
 80104b2:	6163      	str	r3, [r4, #20]
 80104b4:	b002      	add	sp, #8
 80104b6:	bd70      	pop	{r4, r5, r6, pc}
 80104b8:	ab01      	add	r3, sp, #4
 80104ba:	466a      	mov	r2, sp
 80104bc:	f7ff ffc9 	bl	8010452 <__swhatbuf_r>
 80104c0:	9900      	ldr	r1, [sp, #0]
 80104c2:	4605      	mov	r5, r0
 80104c4:	4630      	mov	r0, r6
 80104c6:	f7fd fabf 	bl	800da48 <_malloc_r>
 80104ca:	b948      	cbnz	r0, 80104e0 <__smakebuf_r+0x44>
 80104cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104d0:	059a      	lsls	r2, r3, #22
 80104d2:	d4ef      	bmi.n	80104b4 <__smakebuf_r+0x18>
 80104d4:	f023 0303 	bic.w	r3, r3, #3
 80104d8:	f043 0302 	orr.w	r3, r3, #2
 80104dc:	81a3      	strh	r3, [r4, #12]
 80104de:	e7e3      	b.n	80104a8 <__smakebuf_r+0xc>
 80104e0:	4b0d      	ldr	r3, [pc, #52]	; (8010518 <__smakebuf_r+0x7c>)
 80104e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80104e4:	89a3      	ldrh	r3, [r4, #12]
 80104e6:	6020      	str	r0, [r4, #0]
 80104e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104ec:	81a3      	strh	r3, [r4, #12]
 80104ee:	9b00      	ldr	r3, [sp, #0]
 80104f0:	6163      	str	r3, [r4, #20]
 80104f2:	9b01      	ldr	r3, [sp, #4]
 80104f4:	6120      	str	r0, [r4, #16]
 80104f6:	b15b      	cbz	r3, 8010510 <__smakebuf_r+0x74>
 80104f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104fc:	4630      	mov	r0, r6
 80104fe:	f000 f8d1 	bl	80106a4 <_isatty_r>
 8010502:	b128      	cbz	r0, 8010510 <__smakebuf_r+0x74>
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	f023 0303 	bic.w	r3, r3, #3
 801050a:	f043 0301 	orr.w	r3, r3, #1
 801050e:	81a3      	strh	r3, [r4, #12]
 8010510:	89a0      	ldrh	r0, [r4, #12]
 8010512:	4305      	orrs	r5, r0
 8010514:	81a5      	strh	r5, [r4, #12]
 8010516:	e7cd      	b.n	80104b4 <__smakebuf_r+0x18>
 8010518:	080102b1 	.word	0x080102b1

0801051c <_malloc_usable_size_r>:
 801051c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010520:	1f18      	subs	r0, r3, #4
 8010522:	2b00      	cmp	r3, #0
 8010524:	bfbc      	itt	lt
 8010526:	580b      	ldrlt	r3, [r1, r0]
 8010528:	18c0      	addlt	r0, r0, r3
 801052a:	4770      	bx	lr

0801052c <_raise_r>:
 801052c:	291f      	cmp	r1, #31
 801052e:	b538      	push	{r3, r4, r5, lr}
 8010530:	4604      	mov	r4, r0
 8010532:	460d      	mov	r5, r1
 8010534:	d904      	bls.n	8010540 <_raise_r+0x14>
 8010536:	2316      	movs	r3, #22
 8010538:	6003      	str	r3, [r0, #0]
 801053a:	f04f 30ff 	mov.w	r0, #4294967295
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010542:	b112      	cbz	r2, 801054a <_raise_r+0x1e>
 8010544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010548:	b94b      	cbnz	r3, 801055e <_raise_r+0x32>
 801054a:	4620      	mov	r0, r4
 801054c:	f000 f830 	bl	80105b0 <_getpid_r>
 8010550:	462a      	mov	r2, r5
 8010552:	4601      	mov	r1, r0
 8010554:	4620      	mov	r0, r4
 8010556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801055a:	f000 b817 	b.w	801058c <_kill_r>
 801055e:	2b01      	cmp	r3, #1
 8010560:	d00a      	beq.n	8010578 <_raise_r+0x4c>
 8010562:	1c59      	adds	r1, r3, #1
 8010564:	d103      	bne.n	801056e <_raise_r+0x42>
 8010566:	2316      	movs	r3, #22
 8010568:	6003      	str	r3, [r0, #0]
 801056a:	2001      	movs	r0, #1
 801056c:	e7e7      	b.n	801053e <_raise_r+0x12>
 801056e:	2400      	movs	r4, #0
 8010570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010574:	4628      	mov	r0, r5
 8010576:	4798      	blx	r3
 8010578:	2000      	movs	r0, #0
 801057a:	e7e0      	b.n	801053e <_raise_r+0x12>

0801057c <raise>:
 801057c:	4b02      	ldr	r3, [pc, #8]	; (8010588 <raise+0xc>)
 801057e:	4601      	mov	r1, r0
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	f7ff bfd3 	b.w	801052c <_raise_r>
 8010586:	bf00      	nop
 8010588:	20000040 	.word	0x20000040

0801058c <_kill_r>:
 801058c:	b538      	push	{r3, r4, r5, lr}
 801058e:	4d07      	ldr	r5, [pc, #28]	; (80105ac <_kill_r+0x20>)
 8010590:	2300      	movs	r3, #0
 8010592:	4604      	mov	r4, r0
 8010594:	4608      	mov	r0, r1
 8010596:	4611      	mov	r1, r2
 8010598:	602b      	str	r3, [r5, #0]
 801059a:	f7f3 fee1 	bl	8004360 <_kill>
 801059e:	1c43      	adds	r3, r0, #1
 80105a0:	d102      	bne.n	80105a8 <_kill_r+0x1c>
 80105a2:	682b      	ldr	r3, [r5, #0]
 80105a4:	b103      	cbz	r3, 80105a8 <_kill_r+0x1c>
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	bd38      	pop	{r3, r4, r5, pc}
 80105aa:	bf00      	nop
 80105ac:	2000dc74 	.word	0x2000dc74

080105b0 <_getpid_r>:
 80105b0:	f7f3 bece 	b.w	8004350 <_getpid>

080105b4 <__sread>:
 80105b4:	b510      	push	{r4, lr}
 80105b6:	460c      	mov	r4, r1
 80105b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105bc:	f000 f894 	bl	80106e8 <_read_r>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	bfab      	itete	ge
 80105c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80105c6:	89a3      	ldrhlt	r3, [r4, #12]
 80105c8:	181b      	addge	r3, r3, r0
 80105ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80105ce:	bfac      	ite	ge
 80105d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80105d2:	81a3      	strhlt	r3, [r4, #12]
 80105d4:	bd10      	pop	{r4, pc}

080105d6 <__swrite>:
 80105d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105da:	461f      	mov	r7, r3
 80105dc:	898b      	ldrh	r3, [r1, #12]
 80105de:	05db      	lsls	r3, r3, #23
 80105e0:	4605      	mov	r5, r0
 80105e2:	460c      	mov	r4, r1
 80105e4:	4616      	mov	r6, r2
 80105e6:	d505      	bpl.n	80105f4 <__swrite+0x1e>
 80105e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ec:	2302      	movs	r3, #2
 80105ee:	2200      	movs	r2, #0
 80105f0:	f000 f868 	bl	80106c4 <_lseek_r>
 80105f4:	89a3      	ldrh	r3, [r4, #12]
 80105f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105fe:	81a3      	strh	r3, [r4, #12]
 8010600:	4632      	mov	r2, r6
 8010602:	463b      	mov	r3, r7
 8010604:	4628      	mov	r0, r5
 8010606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801060a:	f000 b817 	b.w	801063c <_write_r>

0801060e <__sseek>:
 801060e:	b510      	push	{r4, lr}
 8010610:	460c      	mov	r4, r1
 8010612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010616:	f000 f855 	bl	80106c4 <_lseek_r>
 801061a:	1c43      	adds	r3, r0, #1
 801061c:	89a3      	ldrh	r3, [r4, #12]
 801061e:	bf15      	itete	ne
 8010620:	6560      	strne	r0, [r4, #84]	; 0x54
 8010622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801062a:	81a3      	strheq	r3, [r4, #12]
 801062c:	bf18      	it	ne
 801062e:	81a3      	strhne	r3, [r4, #12]
 8010630:	bd10      	pop	{r4, pc}

08010632 <__sclose>:
 8010632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010636:	f000 b813 	b.w	8010660 <_close_r>
	...

0801063c <_write_r>:
 801063c:	b538      	push	{r3, r4, r5, lr}
 801063e:	4d07      	ldr	r5, [pc, #28]	; (801065c <_write_r+0x20>)
 8010640:	4604      	mov	r4, r0
 8010642:	4608      	mov	r0, r1
 8010644:	4611      	mov	r1, r2
 8010646:	2200      	movs	r2, #0
 8010648:	602a      	str	r2, [r5, #0]
 801064a:	461a      	mov	r2, r3
 801064c:	f7f3 febf 	bl	80043ce <_write>
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	d102      	bne.n	801065a <_write_r+0x1e>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b103      	cbz	r3, 801065a <_write_r+0x1e>
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	bd38      	pop	{r3, r4, r5, pc}
 801065c:	2000dc74 	.word	0x2000dc74

08010660 <_close_r>:
 8010660:	b538      	push	{r3, r4, r5, lr}
 8010662:	4d06      	ldr	r5, [pc, #24]	; (801067c <_close_r+0x1c>)
 8010664:	2300      	movs	r3, #0
 8010666:	4604      	mov	r4, r0
 8010668:	4608      	mov	r0, r1
 801066a:	602b      	str	r3, [r5, #0]
 801066c:	f7f3 fecb 	bl	8004406 <_close>
 8010670:	1c43      	adds	r3, r0, #1
 8010672:	d102      	bne.n	801067a <_close_r+0x1a>
 8010674:	682b      	ldr	r3, [r5, #0]
 8010676:	b103      	cbz	r3, 801067a <_close_r+0x1a>
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	bd38      	pop	{r3, r4, r5, pc}
 801067c:	2000dc74 	.word	0x2000dc74

08010680 <_fstat_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4d07      	ldr	r5, [pc, #28]	; (80106a0 <_fstat_r+0x20>)
 8010684:	2300      	movs	r3, #0
 8010686:	4604      	mov	r4, r0
 8010688:	4608      	mov	r0, r1
 801068a:	4611      	mov	r1, r2
 801068c:	602b      	str	r3, [r5, #0]
 801068e:	f7f3 fec6 	bl	800441e <_fstat>
 8010692:	1c43      	adds	r3, r0, #1
 8010694:	d102      	bne.n	801069c <_fstat_r+0x1c>
 8010696:	682b      	ldr	r3, [r5, #0]
 8010698:	b103      	cbz	r3, 801069c <_fstat_r+0x1c>
 801069a:	6023      	str	r3, [r4, #0]
 801069c:	bd38      	pop	{r3, r4, r5, pc}
 801069e:	bf00      	nop
 80106a0:	2000dc74 	.word	0x2000dc74

080106a4 <_isatty_r>:
 80106a4:	b538      	push	{r3, r4, r5, lr}
 80106a6:	4d06      	ldr	r5, [pc, #24]	; (80106c0 <_isatty_r+0x1c>)
 80106a8:	2300      	movs	r3, #0
 80106aa:	4604      	mov	r4, r0
 80106ac:	4608      	mov	r0, r1
 80106ae:	602b      	str	r3, [r5, #0]
 80106b0:	f7f3 fec5 	bl	800443e <_isatty>
 80106b4:	1c43      	adds	r3, r0, #1
 80106b6:	d102      	bne.n	80106be <_isatty_r+0x1a>
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	b103      	cbz	r3, 80106be <_isatty_r+0x1a>
 80106bc:	6023      	str	r3, [r4, #0]
 80106be:	bd38      	pop	{r3, r4, r5, pc}
 80106c0:	2000dc74 	.word	0x2000dc74

080106c4 <_lseek_r>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	4d07      	ldr	r5, [pc, #28]	; (80106e4 <_lseek_r+0x20>)
 80106c8:	4604      	mov	r4, r0
 80106ca:	4608      	mov	r0, r1
 80106cc:	4611      	mov	r1, r2
 80106ce:	2200      	movs	r2, #0
 80106d0:	602a      	str	r2, [r5, #0]
 80106d2:	461a      	mov	r2, r3
 80106d4:	f7f3 febe 	bl	8004454 <_lseek>
 80106d8:	1c43      	adds	r3, r0, #1
 80106da:	d102      	bne.n	80106e2 <_lseek_r+0x1e>
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	b103      	cbz	r3, 80106e2 <_lseek_r+0x1e>
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	bd38      	pop	{r3, r4, r5, pc}
 80106e4:	2000dc74 	.word	0x2000dc74

080106e8 <_read_r>:
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	4d07      	ldr	r5, [pc, #28]	; (8010708 <_read_r+0x20>)
 80106ec:	4604      	mov	r4, r0
 80106ee:	4608      	mov	r0, r1
 80106f0:	4611      	mov	r1, r2
 80106f2:	2200      	movs	r2, #0
 80106f4:	602a      	str	r2, [r5, #0]
 80106f6:	461a      	mov	r2, r3
 80106f8:	f7f3 fe4c 	bl	8004394 <_read>
 80106fc:	1c43      	adds	r3, r0, #1
 80106fe:	d102      	bne.n	8010706 <_read_r+0x1e>
 8010700:	682b      	ldr	r3, [r5, #0]
 8010702:	b103      	cbz	r3, 8010706 <_read_r+0x1e>
 8010704:	6023      	str	r3, [r4, #0]
 8010706:	bd38      	pop	{r3, r4, r5, pc}
 8010708:	2000dc74 	.word	0x2000dc74
 801070c:	00000000 	.word	0x00000000

08010710 <cos>:
 8010710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010712:	ec53 2b10 	vmov	r2, r3, d0
 8010716:	4826      	ldr	r0, [pc, #152]	; (80107b0 <cos+0xa0>)
 8010718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801071c:	4281      	cmp	r1, r0
 801071e:	dc06      	bgt.n	801072e <cos+0x1e>
 8010720:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80107a8 <cos+0x98>
 8010724:	b005      	add	sp, #20
 8010726:	f85d eb04 	ldr.w	lr, [sp], #4
 801072a:	f001 bcd5 	b.w	80120d8 <__kernel_cos>
 801072e:	4821      	ldr	r0, [pc, #132]	; (80107b4 <cos+0xa4>)
 8010730:	4281      	cmp	r1, r0
 8010732:	dd09      	ble.n	8010748 <cos+0x38>
 8010734:	ee10 0a10 	vmov	r0, s0
 8010738:	4619      	mov	r1, r3
 801073a:	f7ef fdbd 	bl	80002b8 <__aeabi_dsub>
 801073e:	ec41 0b10 	vmov	d0, r0, r1
 8010742:	b005      	add	sp, #20
 8010744:	f85d fb04 	ldr.w	pc, [sp], #4
 8010748:	4668      	mov	r0, sp
 801074a:	f001 fa05 	bl	8011b58 <__ieee754_rem_pio2>
 801074e:	f000 0003 	and.w	r0, r0, #3
 8010752:	2801      	cmp	r0, #1
 8010754:	d00b      	beq.n	801076e <cos+0x5e>
 8010756:	2802      	cmp	r0, #2
 8010758:	d016      	beq.n	8010788 <cos+0x78>
 801075a:	b9e0      	cbnz	r0, 8010796 <cos+0x86>
 801075c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010760:	ed9d 0b00 	vldr	d0, [sp]
 8010764:	f001 fcb8 	bl	80120d8 <__kernel_cos>
 8010768:	ec51 0b10 	vmov	r0, r1, d0
 801076c:	e7e7      	b.n	801073e <cos+0x2e>
 801076e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010772:	ed9d 0b00 	vldr	d0, [sp]
 8010776:	f002 f8c7 	bl	8012908 <__kernel_sin>
 801077a:	ec53 2b10 	vmov	r2, r3, d0
 801077e:	ee10 0a10 	vmov	r0, s0
 8010782:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010786:	e7da      	b.n	801073e <cos+0x2e>
 8010788:	ed9d 1b02 	vldr	d1, [sp, #8]
 801078c:	ed9d 0b00 	vldr	d0, [sp]
 8010790:	f001 fca2 	bl	80120d8 <__kernel_cos>
 8010794:	e7f1      	b.n	801077a <cos+0x6a>
 8010796:	ed9d 1b02 	vldr	d1, [sp, #8]
 801079a:	ed9d 0b00 	vldr	d0, [sp]
 801079e:	2001      	movs	r0, #1
 80107a0:	f002 f8b2 	bl	8012908 <__kernel_sin>
 80107a4:	e7e0      	b.n	8010768 <cos+0x58>
 80107a6:	bf00      	nop
	...
 80107b0:	3fe921fb 	.word	0x3fe921fb
 80107b4:	7fefffff 	.word	0x7fefffff

080107b8 <round>:
 80107b8:	ec51 0b10 	vmov	r0, r1, d0
 80107bc:	b570      	push	{r4, r5, r6, lr}
 80107be:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80107c2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80107c6:	2c13      	cmp	r4, #19
 80107c8:	ee10 2a10 	vmov	r2, s0
 80107cc:	460b      	mov	r3, r1
 80107ce:	dc19      	bgt.n	8010804 <round+0x4c>
 80107d0:	2c00      	cmp	r4, #0
 80107d2:	da09      	bge.n	80107e8 <round+0x30>
 80107d4:	3401      	adds	r4, #1
 80107d6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80107da:	d103      	bne.n	80107e4 <round+0x2c>
 80107dc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80107e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80107e4:	2200      	movs	r2, #0
 80107e6:	e028      	b.n	801083a <round+0x82>
 80107e8:	4d15      	ldr	r5, [pc, #84]	; (8010840 <round+0x88>)
 80107ea:	4125      	asrs	r5, r4
 80107ec:	ea01 0605 	and.w	r6, r1, r5
 80107f0:	4332      	orrs	r2, r6
 80107f2:	d00e      	beq.n	8010812 <round+0x5a>
 80107f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80107f8:	fa42 f404 	asr.w	r4, r2, r4
 80107fc:	4423      	add	r3, r4
 80107fe:	ea23 0305 	bic.w	r3, r3, r5
 8010802:	e7ef      	b.n	80107e4 <round+0x2c>
 8010804:	2c33      	cmp	r4, #51	; 0x33
 8010806:	dd07      	ble.n	8010818 <round+0x60>
 8010808:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801080c:	d101      	bne.n	8010812 <round+0x5a>
 801080e:	f7ef fd55 	bl	80002bc <__adddf3>
 8010812:	ec41 0b10 	vmov	d0, r0, r1
 8010816:	bd70      	pop	{r4, r5, r6, pc}
 8010818:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801081c:	f04f 35ff 	mov.w	r5, #4294967295
 8010820:	40f5      	lsrs	r5, r6
 8010822:	4228      	tst	r0, r5
 8010824:	d0f5      	beq.n	8010812 <round+0x5a>
 8010826:	2101      	movs	r1, #1
 8010828:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801082c:	fa01 f404 	lsl.w	r4, r1, r4
 8010830:	1912      	adds	r2, r2, r4
 8010832:	bf28      	it	cs
 8010834:	185b      	addcs	r3, r3, r1
 8010836:	ea22 0205 	bic.w	r2, r2, r5
 801083a:	4619      	mov	r1, r3
 801083c:	4610      	mov	r0, r2
 801083e:	e7e8      	b.n	8010812 <round+0x5a>
 8010840:	000fffff 	.word	0x000fffff
 8010844:	00000000 	.word	0x00000000

08010848 <sin>:
 8010848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801084a:	ec53 2b10 	vmov	r2, r3, d0
 801084e:	4828      	ldr	r0, [pc, #160]	; (80108f0 <sin+0xa8>)
 8010850:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010854:	4281      	cmp	r1, r0
 8010856:	dc07      	bgt.n	8010868 <sin+0x20>
 8010858:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80108e8 <sin+0xa0>
 801085c:	2000      	movs	r0, #0
 801085e:	b005      	add	sp, #20
 8010860:	f85d eb04 	ldr.w	lr, [sp], #4
 8010864:	f002 b850 	b.w	8012908 <__kernel_sin>
 8010868:	4822      	ldr	r0, [pc, #136]	; (80108f4 <sin+0xac>)
 801086a:	4281      	cmp	r1, r0
 801086c:	dd09      	ble.n	8010882 <sin+0x3a>
 801086e:	ee10 0a10 	vmov	r0, s0
 8010872:	4619      	mov	r1, r3
 8010874:	f7ef fd20 	bl	80002b8 <__aeabi_dsub>
 8010878:	ec41 0b10 	vmov	d0, r0, r1
 801087c:	b005      	add	sp, #20
 801087e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010882:	4668      	mov	r0, sp
 8010884:	f001 f968 	bl	8011b58 <__ieee754_rem_pio2>
 8010888:	f000 0003 	and.w	r0, r0, #3
 801088c:	2801      	cmp	r0, #1
 801088e:	d00c      	beq.n	80108aa <sin+0x62>
 8010890:	2802      	cmp	r0, #2
 8010892:	d011      	beq.n	80108b8 <sin+0x70>
 8010894:	b9f0      	cbnz	r0, 80108d4 <sin+0x8c>
 8010896:	ed9d 1b02 	vldr	d1, [sp, #8]
 801089a:	ed9d 0b00 	vldr	d0, [sp]
 801089e:	2001      	movs	r0, #1
 80108a0:	f002 f832 	bl	8012908 <__kernel_sin>
 80108a4:	ec51 0b10 	vmov	r0, r1, d0
 80108a8:	e7e6      	b.n	8010878 <sin+0x30>
 80108aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108ae:	ed9d 0b00 	vldr	d0, [sp]
 80108b2:	f001 fc11 	bl	80120d8 <__kernel_cos>
 80108b6:	e7f5      	b.n	80108a4 <sin+0x5c>
 80108b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108bc:	ed9d 0b00 	vldr	d0, [sp]
 80108c0:	2001      	movs	r0, #1
 80108c2:	f002 f821 	bl	8012908 <__kernel_sin>
 80108c6:	ec53 2b10 	vmov	r2, r3, d0
 80108ca:	ee10 0a10 	vmov	r0, s0
 80108ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80108d2:	e7d1      	b.n	8010878 <sin+0x30>
 80108d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80108d8:	ed9d 0b00 	vldr	d0, [sp]
 80108dc:	f001 fbfc 	bl	80120d8 <__kernel_cos>
 80108e0:	e7f1      	b.n	80108c6 <sin+0x7e>
 80108e2:	bf00      	nop
 80108e4:	f3af 8000 	nop.w
	...
 80108f0:	3fe921fb 	.word	0x3fe921fb
 80108f4:	7fefffff 	.word	0x7fefffff

080108f8 <acos>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	ed2d 8b02 	vpush	{d8}
 80108fe:	ec55 4b10 	vmov	r4, r5, d0
 8010902:	f000 f8cd 	bl	8010aa0 <__ieee754_acos>
 8010906:	4622      	mov	r2, r4
 8010908:	462b      	mov	r3, r5
 801090a:	4620      	mov	r0, r4
 801090c:	4629      	mov	r1, r5
 801090e:	eeb0 8a40 	vmov.f32	s16, s0
 8010912:	eef0 8a60 	vmov.f32	s17, s1
 8010916:	f7f0 f921 	bl	8000b5c <__aeabi_dcmpun>
 801091a:	b9a8      	cbnz	r0, 8010948 <acos+0x50>
 801091c:	ec45 4b10 	vmov	d0, r4, r5
 8010920:	f002 fa82 	bl	8012e28 <fabs>
 8010924:	4b0c      	ldr	r3, [pc, #48]	; (8010958 <acos+0x60>)
 8010926:	ec51 0b10 	vmov	r0, r1, d0
 801092a:	2200      	movs	r2, #0
 801092c:	f7f0 f90c 	bl	8000b48 <__aeabi_dcmpgt>
 8010930:	b150      	cbz	r0, 8010948 <acos+0x50>
 8010932:	f7fc ffd5 	bl	800d8e0 <__errno>
 8010936:	ecbd 8b02 	vpop	{d8}
 801093a:	2321      	movs	r3, #33	; 0x21
 801093c:	6003      	str	r3, [r0, #0]
 801093e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010942:	4806      	ldr	r0, [pc, #24]	; (801095c <acos+0x64>)
 8010944:	f002 bb04 	b.w	8012f50 <nan>
 8010948:	eeb0 0a48 	vmov.f32	s0, s16
 801094c:	eef0 0a68 	vmov.f32	s1, s17
 8010950:	ecbd 8b02 	vpop	{d8}
 8010954:	bd38      	pop	{r3, r4, r5, pc}
 8010956:	bf00      	nop
 8010958:	3ff00000 	.word	0x3ff00000
 801095c:	080139b0 	.word	0x080139b0

08010960 <atan2>:
 8010960:	f000 bafe 	b.w	8010f60 <__ieee754_atan2>

08010964 <pow>:
 8010964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010966:	ed2d 8b02 	vpush	{d8}
 801096a:	eeb0 8a40 	vmov.f32	s16, s0
 801096e:	eef0 8a60 	vmov.f32	s17, s1
 8010972:	ec55 4b11 	vmov	r4, r5, d1
 8010976:	f000 fbbf 	bl	80110f8 <__ieee754_pow>
 801097a:	4622      	mov	r2, r4
 801097c:	462b      	mov	r3, r5
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	ec57 6b10 	vmov	r6, r7, d0
 8010986:	f7f0 f8e9 	bl	8000b5c <__aeabi_dcmpun>
 801098a:	2800      	cmp	r0, #0
 801098c:	d13b      	bne.n	8010a06 <pow+0xa2>
 801098e:	ec51 0b18 	vmov	r0, r1, d8
 8010992:	2200      	movs	r2, #0
 8010994:	2300      	movs	r3, #0
 8010996:	f7f0 f8af 	bl	8000af8 <__aeabi_dcmpeq>
 801099a:	b1b8      	cbz	r0, 80109cc <pow+0x68>
 801099c:	2200      	movs	r2, #0
 801099e:	2300      	movs	r3, #0
 80109a0:	4620      	mov	r0, r4
 80109a2:	4629      	mov	r1, r5
 80109a4:	f7f0 f8a8 	bl	8000af8 <__aeabi_dcmpeq>
 80109a8:	2800      	cmp	r0, #0
 80109aa:	d146      	bne.n	8010a3a <pow+0xd6>
 80109ac:	ec45 4b10 	vmov	d0, r4, r5
 80109b0:	f002 fa43 	bl	8012e3a <finite>
 80109b4:	b338      	cbz	r0, 8010a06 <pow+0xa2>
 80109b6:	2200      	movs	r2, #0
 80109b8:	2300      	movs	r3, #0
 80109ba:	4620      	mov	r0, r4
 80109bc:	4629      	mov	r1, r5
 80109be:	f7f0 f8a5 	bl	8000b0c <__aeabi_dcmplt>
 80109c2:	b300      	cbz	r0, 8010a06 <pow+0xa2>
 80109c4:	f7fc ff8c 	bl	800d8e0 <__errno>
 80109c8:	2322      	movs	r3, #34	; 0x22
 80109ca:	e01b      	b.n	8010a04 <pow+0xa0>
 80109cc:	ec47 6b10 	vmov	d0, r6, r7
 80109d0:	f002 fa33 	bl	8012e3a <finite>
 80109d4:	b9e0      	cbnz	r0, 8010a10 <pow+0xac>
 80109d6:	eeb0 0a48 	vmov.f32	s0, s16
 80109da:	eef0 0a68 	vmov.f32	s1, s17
 80109de:	f002 fa2c 	bl	8012e3a <finite>
 80109e2:	b1a8      	cbz	r0, 8010a10 <pow+0xac>
 80109e4:	ec45 4b10 	vmov	d0, r4, r5
 80109e8:	f002 fa27 	bl	8012e3a <finite>
 80109ec:	b180      	cbz	r0, 8010a10 <pow+0xac>
 80109ee:	4632      	mov	r2, r6
 80109f0:	463b      	mov	r3, r7
 80109f2:	4630      	mov	r0, r6
 80109f4:	4639      	mov	r1, r7
 80109f6:	f7f0 f8b1 	bl	8000b5c <__aeabi_dcmpun>
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d0e2      	beq.n	80109c4 <pow+0x60>
 80109fe:	f7fc ff6f 	bl	800d8e0 <__errno>
 8010a02:	2321      	movs	r3, #33	; 0x21
 8010a04:	6003      	str	r3, [r0, #0]
 8010a06:	ecbd 8b02 	vpop	{d8}
 8010a0a:	ec47 6b10 	vmov	d0, r6, r7
 8010a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a10:	2200      	movs	r2, #0
 8010a12:	2300      	movs	r3, #0
 8010a14:	4630      	mov	r0, r6
 8010a16:	4639      	mov	r1, r7
 8010a18:	f7f0 f86e 	bl	8000af8 <__aeabi_dcmpeq>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	d0f2      	beq.n	8010a06 <pow+0xa2>
 8010a20:	eeb0 0a48 	vmov.f32	s0, s16
 8010a24:	eef0 0a68 	vmov.f32	s1, s17
 8010a28:	f002 fa07 	bl	8012e3a <finite>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d0ea      	beq.n	8010a06 <pow+0xa2>
 8010a30:	ec45 4b10 	vmov	d0, r4, r5
 8010a34:	f002 fa01 	bl	8012e3a <finite>
 8010a38:	e7c3      	b.n	80109c2 <pow+0x5e>
 8010a3a:	4f01      	ldr	r7, [pc, #4]	; (8010a40 <pow+0xdc>)
 8010a3c:	2600      	movs	r6, #0
 8010a3e:	e7e2      	b.n	8010a06 <pow+0xa2>
 8010a40:	3ff00000 	.word	0x3ff00000

08010a44 <sqrt>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	ed2d 8b02 	vpush	{d8}
 8010a4a:	ec55 4b10 	vmov	r4, r5, d0
 8010a4e:	f001 fa8f 	bl	8011f70 <__ieee754_sqrt>
 8010a52:	4622      	mov	r2, r4
 8010a54:	462b      	mov	r3, r5
 8010a56:	4620      	mov	r0, r4
 8010a58:	4629      	mov	r1, r5
 8010a5a:	eeb0 8a40 	vmov.f32	s16, s0
 8010a5e:	eef0 8a60 	vmov.f32	s17, s1
 8010a62:	f7f0 f87b 	bl	8000b5c <__aeabi_dcmpun>
 8010a66:	b990      	cbnz	r0, 8010a8e <sqrt+0x4a>
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	4629      	mov	r1, r5
 8010a70:	f7f0 f84c 	bl	8000b0c <__aeabi_dcmplt>
 8010a74:	b158      	cbz	r0, 8010a8e <sqrt+0x4a>
 8010a76:	f7fc ff33 	bl	800d8e0 <__errno>
 8010a7a:	2321      	movs	r3, #33	; 0x21
 8010a7c:	6003      	str	r3, [r0, #0]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2300      	movs	r3, #0
 8010a82:	4610      	mov	r0, r2
 8010a84:	4619      	mov	r1, r3
 8010a86:	f7ef fef9 	bl	800087c <__aeabi_ddiv>
 8010a8a:	ec41 0b18 	vmov	d8, r0, r1
 8010a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8010a92:	eef0 0a68 	vmov.f32	s1, s17
 8010a96:	ecbd 8b02 	vpop	{d8}
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	0000      	movs	r0, r0
	...

08010aa0 <__ieee754_acos>:
 8010aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa4:	ec55 4b10 	vmov	r4, r5, d0
 8010aa8:	49b7      	ldr	r1, [pc, #732]	; (8010d88 <__ieee754_acos+0x2e8>)
 8010aaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010aae:	428b      	cmp	r3, r1
 8010ab0:	dd1b      	ble.n	8010aea <__ieee754_acos+0x4a>
 8010ab2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010ab6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010aba:	4323      	orrs	r3, r4
 8010abc:	d106      	bne.n	8010acc <__ieee754_acos+0x2c>
 8010abe:	2d00      	cmp	r5, #0
 8010ac0:	f300 8211 	bgt.w	8010ee6 <__ieee754_acos+0x446>
 8010ac4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010d20 <__ieee754_acos+0x280>
 8010ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010acc:	ee10 2a10 	vmov	r2, s0
 8010ad0:	462b      	mov	r3, r5
 8010ad2:	ee10 0a10 	vmov	r0, s0
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	f7ef fbee 	bl	80002b8 <__aeabi_dsub>
 8010adc:	4602      	mov	r2, r0
 8010ade:	460b      	mov	r3, r1
 8010ae0:	f7ef fecc 	bl	800087c <__aeabi_ddiv>
 8010ae4:	ec41 0b10 	vmov	d0, r0, r1
 8010ae8:	e7ee      	b.n	8010ac8 <__ieee754_acos+0x28>
 8010aea:	49a8      	ldr	r1, [pc, #672]	; (8010d8c <__ieee754_acos+0x2ec>)
 8010aec:	428b      	cmp	r3, r1
 8010aee:	f300 8087 	bgt.w	8010c00 <__ieee754_acos+0x160>
 8010af2:	4aa7      	ldr	r2, [pc, #668]	; (8010d90 <__ieee754_acos+0x2f0>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	f340 81f9 	ble.w	8010eec <__ieee754_acos+0x44c>
 8010afa:	ee10 2a10 	vmov	r2, s0
 8010afe:	ee10 0a10 	vmov	r0, s0
 8010b02:	462b      	mov	r3, r5
 8010b04:	4629      	mov	r1, r5
 8010b06:	f7ef fd8f 	bl	8000628 <__aeabi_dmul>
 8010b0a:	a387      	add	r3, pc, #540	; (adr r3, 8010d28 <__ieee754_acos+0x288>)
 8010b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b10:	4606      	mov	r6, r0
 8010b12:	460f      	mov	r7, r1
 8010b14:	f7ef fd88 	bl	8000628 <__aeabi_dmul>
 8010b18:	a385      	add	r3, pc, #532	; (adr r3, 8010d30 <__ieee754_acos+0x290>)
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	f7ef fbcd 	bl	80002bc <__adddf3>
 8010b22:	4632      	mov	r2, r6
 8010b24:	463b      	mov	r3, r7
 8010b26:	f7ef fd7f 	bl	8000628 <__aeabi_dmul>
 8010b2a:	a383      	add	r3, pc, #524	; (adr r3, 8010d38 <__ieee754_acos+0x298>)
 8010b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b30:	f7ef fbc2 	bl	80002b8 <__aeabi_dsub>
 8010b34:	4632      	mov	r2, r6
 8010b36:	463b      	mov	r3, r7
 8010b38:	f7ef fd76 	bl	8000628 <__aeabi_dmul>
 8010b3c:	a380      	add	r3, pc, #512	; (adr r3, 8010d40 <__ieee754_acos+0x2a0>)
 8010b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b42:	f7ef fbbb 	bl	80002bc <__adddf3>
 8010b46:	4632      	mov	r2, r6
 8010b48:	463b      	mov	r3, r7
 8010b4a:	f7ef fd6d 	bl	8000628 <__aeabi_dmul>
 8010b4e:	a37e      	add	r3, pc, #504	; (adr r3, 8010d48 <__ieee754_acos+0x2a8>)
 8010b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b54:	f7ef fbb0 	bl	80002b8 <__aeabi_dsub>
 8010b58:	4632      	mov	r2, r6
 8010b5a:	463b      	mov	r3, r7
 8010b5c:	f7ef fd64 	bl	8000628 <__aeabi_dmul>
 8010b60:	a37b      	add	r3, pc, #492	; (adr r3, 8010d50 <__ieee754_acos+0x2b0>)
 8010b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b66:	f7ef fba9 	bl	80002bc <__adddf3>
 8010b6a:	4632      	mov	r2, r6
 8010b6c:	463b      	mov	r3, r7
 8010b6e:	f7ef fd5b 	bl	8000628 <__aeabi_dmul>
 8010b72:	a379      	add	r3, pc, #484	; (adr r3, 8010d58 <__ieee754_acos+0x2b8>)
 8010b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b78:	4680      	mov	r8, r0
 8010b7a:	4689      	mov	r9, r1
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	4639      	mov	r1, r7
 8010b80:	f7ef fd52 	bl	8000628 <__aeabi_dmul>
 8010b84:	a376      	add	r3, pc, #472	; (adr r3, 8010d60 <__ieee754_acos+0x2c0>)
 8010b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8a:	f7ef fb95 	bl	80002b8 <__aeabi_dsub>
 8010b8e:	4632      	mov	r2, r6
 8010b90:	463b      	mov	r3, r7
 8010b92:	f7ef fd49 	bl	8000628 <__aeabi_dmul>
 8010b96:	a374      	add	r3, pc, #464	; (adr r3, 8010d68 <__ieee754_acos+0x2c8>)
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	f7ef fb8e 	bl	80002bc <__adddf3>
 8010ba0:	4632      	mov	r2, r6
 8010ba2:	463b      	mov	r3, r7
 8010ba4:	f7ef fd40 	bl	8000628 <__aeabi_dmul>
 8010ba8:	a371      	add	r3, pc, #452	; (adr r3, 8010d70 <__ieee754_acos+0x2d0>)
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	f7ef fb83 	bl	80002b8 <__aeabi_dsub>
 8010bb2:	4632      	mov	r2, r6
 8010bb4:	463b      	mov	r3, r7
 8010bb6:	f7ef fd37 	bl	8000628 <__aeabi_dmul>
 8010bba:	4b76      	ldr	r3, [pc, #472]	; (8010d94 <__ieee754_acos+0x2f4>)
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f7ef fb7d 	bl	80002bc <__adddf3>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4640      	mov	r0, r8
 8010bc8:	4649      	mov	r1, r9
 8010bca:	f7ef fe57 	bl	800087c <__aeabi_ddiv>
 8010bce:	4622      	mov	r2, r4
 8010bd0:	462b      	mov	r3, r5
 8010bd2:	f7ef fd29 	bl	8000628 <__aeabi_dmul>
 8010bd6:	4602      	mov	r2, r0
 8010bd8:	460b      	mov	r3, r1
 8010bda:	a167      	add	r1, pc, #412	; (adr r1, 8010d78 <__ieee754_acos+0x2d8>)
 8010bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010be0:	f7ef fb6a 	bl	80002b8 <__aeabi_dsub>
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	4620      	mov	r0, r4
 8010bea:	4629      	mov	r1, r5
 8010bec:	f7ef fb64 	bl	80002b8 <__aeabi_dsub>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	a162      	add	r1, pc, #392	; (adr r1, 8010d80 <__ieee754_acos+0x2e0>)
 8010bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bfa:	f7ef fb5d 	bl	80002b8 <__aeabi_dsub>
 8010bfe:	e771      	b.n	8010ae4 <__ieee754_acos+0x44>
 8010c00:	2d00      	cmp	r5, #0
 8010c02:	f280 80cb 	bge.w	8010d9c <__ieee754_acos+0x2fc>
 8010c06:	ee10 0a10 	vmov	r0, s0
 8010c0a:	4b62      	ldr	r3, [pc, #392]	; (8010d94 <__ieee754_acos+0x2f4>)
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	4629      	mov	r1, r5
 8010c10:	f7ef fb54 	bl	80002bc <__adddf3>
 8010c14:	4b60      	ldr	r3, [pc, #384]	; (8010d98 <__ieee754_acos+0x2f8>)
 8010c16:	2200      	movs	r2, #0
 8010c18:	f7ef fd06 	bl	8000628 <__aeabi_dmul>
 8010c1c:	a342      	add	r3, pc, #264	; (adr r3, 8010d28 <__ieee754_acos+0x288>)
 8010c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c22:	4604      	mov	r4, r0
 8010c24:	460d      	mov	r5, r1
 8010c26:	f7ef fcff 	bl	8000628 <__aeabi_dmul>
 8010c2a:	a341      	add	r3, pc, #260	; (adr r3, 8010d30 <__ieee754_acos+0x290>)
 8010c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c30:	f7ef fb44 	bl	80002bc <__adddf3>
 8010c34:	4622      	mov	r2, r4
 8010c36:	462b      	mov	r3, r5
 8010c38:	f7ef fcf6 	bl	8000628 <__aeabi_dmul>
 8010c3c:	a33e      	add	r3, pc, #248	; (adr r3, 8010d38 <__ieee754_acos+0x298>)
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	f7ef fb39 	bl	80002b8 <__aeabi_dsub>
 8010c46:	4622      	mov	r2, r4
 8010c48:	462b      	mov	r3, r5
 8010c4a:	f7ef fced 	bl	8000628 <__aeabi_dmul>
 8010c4e:	a33c      	add	r3, pc, #240	; (adr r3, 8010d40 <__ieee754_acos+0x2a0>)
 8010c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c54:	f7ef fb32 	bl	80002bc <__adddf3>
 8010c58:	4622      	mov	r2, r4
 8010c5a:	462b      	mov	r3, r5
 8010c5c:	f7ef fce4 	bl	8000628 <__aeabi_dmul>
 8010c60:	a339      	add	r3, pc, #228	; (adr r3, 8010d48 <__ieee754_acos+0x2a8>)
 8010c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c66:	f7ef fb27 	bl	80002b8 <__aeabi_dsub>
 8010c6a:	4622      	mov	r2, r4
 8010c6c:	462b      	mov	r3, r5
 8010c6e:	f7ef fcdb 	bl	8000628 <__aeabi_dmul>
 8010c72:	a337      	add	r3, pc, #220	; (adr r3, 8010d50 <__ieee754_acos+0x2b0>)
 8010c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c78:	f7ef fb20 	bl	80002bc <__adddf3>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	462b      	mov	r3, r5
 8010c80:	f7ef fcd2 	bl	8000628 <__aeabi_dmul>
 8010c84:	ec45 4b10 	vmov	d0, r4, r5
 8010c88:	4680      	mov	r8, r0
 8010c8a:	4689      	mov	r9, r1
 8010c8c:	f001 f970 	bl	8011f70 <__ieee754_sqrt>
 8010c90:	a331      	add	r3, pc, #196	; (adr r3, 8010d58 <__ieee754_acos+0x2b8>)
 8010c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	ec57 6b10 	vmov	r6, r7, d0
 8010c9e:	f7ef fcc3 	bl	8000628 <__aeabi_dmul>
 8010ca2:	a32f      	add	r3, pc, #188	; (adr r3, 8010d60 <__ieee754_acos+0x2c0>)
 8010ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca8:	f7ef fb06 	bl	80002b8 <__aeabi_dsub>
 8010cac:	4622      	mov	r2, r4
 8010cae:	462b      	mov	r3, r5
 8010cb0:	f7ef fcba 	bl	8000628 <__aeabi_dmul>
 8010cb4:	a32c      	add	r3, pc, #176	; (adr r3, 8010d68 <__ieee754_acos+0x2c8>)
 8010cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cba:	f7ef faff 	bl	80002bc <__adddf3>
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	462b      	mov	r3, r5
 8010cc2:	f7ef fcb1 	bl	8000628 <__aeabi_dmul>
 8010cc6:	a32a      	add	r3, pc, #168	; (adr r3, 8010d70 <__ieee754_acos+0x2d0>)
 8010cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ccc:	f7ef faf4 	bl	80002b8 <__aeabi_dsub>
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	462b      	mov	r3, r5
 8010cd4:	f7ef fca8 	bl	8000628 <__aeabi_dmul>
 8010cd8:	4b2e      	ldr	r3, [pc, #184]	; (8010d94 <__ieee754_acos+0x2f4>)
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f7ef faee 	bl	80002bc <__adddf3>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	4640      	mov	r0, r8
 8010ce6:	4649      	mov	r1, r9
 8010ce8:	f7ef fdc8 	bl	800087c <__aeabi_ddiv>
 8010cec:	4632      	mov	r2, r6
 8010cee:	463b      	mov	r3, r7
 8010cf0:	f7ef fc9a 	bl	8000628 <__aeabi_dmul>
 8010cf4:	a320      	add	r3, pc, #128	; (adr r3, 8010d78 <__ieee754_acos+0x2d8>)
 8010cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfa:	f7ef fadd 	bl	80002b8 <__aeabi_dsub>
 8010cfe:	4632      	mov	r2, r6
 8010d00:	463b      	mov	r3, r7
 8010d02:	f7ef fadb 	bl	80002bc <__adddf3>
 8010d06:	4602      	mov	r2, r0
 8010d08:	460b      	mov	r3, r1
 8010d0a:	f7ef fad7 	bl	80002bc <__adddf3>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	460b      	mov	r3, r1
 8010d12:	a103      	add	r1, pc, #12	; (adr r1, 8010d20 <__ieee754_acos+0x280>)
 8010d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d18:	e76f      	b.n	8010bfa <__ieee754_acos+0x15a>
 8010d1a:	bf00      	nop
 8010d1c:	f3af 8000 	nop.w
 8010d20:	54442d18 	.word	0x54442d18
 8010d24:	400921fb 	.word	0x400921fb
 8010d28:	0dfdf709 	.word	0x0dfdf709
 8010d2c:	3f023de1 	.word	0x3f023de1
 8010d30:	7501b288 	.word	0x7501b288
 8010d34:	3f49efe0 	.word	0x3f49efe0
 8010d38:	b5688f3b 	.word	0xb5688f3b
 8010d3c:	3fa48228 	.word	0x3fa48228
 8010d40:	0e884455 	.word	0x0e884455
 8010d44:	3fc9c155 	.word	0x3fc9c155
 8010d48:	03eb6f7d 	.word	0x03eb6f7d
 8010d4c:	3fd4d612 	.word	0x3fd4d612
 8010d50:	55555555 	.word	0x55555555
 8010d54:	3fc55555 	.word	0x3fc55555
 8010d58:	b12e9282 	.word	0xb12e9282
 8010d5c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010d60:	1b8d0159 	.word	0x1b8d0159
 8010d64:	3fe6066c 	.word	0x3fe6066c
 8010d68:	9c598ac8 	.word	0x9c598ac8
 8010d6c:	40002ae5 	.word	0x40002ae5
 8010d70:	1c8a2d4b 	.word	0x1c8a2d4b
 8010d74:	40033a27 	.word	0x40033a27
 8010d78:	33145c07 	.word	0x33145c07
 8010d7c:	3c91a626 	.word	0x3c91a626
 8010d80:	54442d18 	.word	0x54442d18
 8010d84:	3ff921fb 	.word	0x3ff921fb
 8010d88:	3fefffff 	.word	0x3fefffff
 8010d8c:	3fdfffff 	.word	0x3fdfffff
 8010d90:	3c600000 	.word	0x3c600000
 8010d94:	3ff00000 	.word	0x3ff00000
 8010d98:	3fe00000 	.word	0x3fe00000
 8010d9c:	ee10 2a10 	vmov	r2, s0
 8010da0:	462b      	mov	r3, r5
 8010da2:	496d      	ldr	r1, [pc, #436]	; (8010f58 <__ieee754_acos+0x4b8>)
 8010da4:	2000      	movs	r0, #0
 8010da6:	f7ef fa87 	bl	80002b8 <__aeabi_dsub>
 8010daa:	4b6c      	ldr	r3, [pc, #432]	; (8010f5c <__ieee754_acos+0x4bc>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	f7ef fc3b 	bl	8000628 <__aeabi_dmul>
 8010db2:	4604      	mov	r4, r0
 8010db4:	460d      	mov	r5, r1
 8010db6:	ec45 4b10 	vmov	d0, r4, r5
 8010dba:	f001 f8d9 	bl	8011f70 <__ieee754_sqrt>
 8010dbe:	a34e      	add	r3, pc, #312	; (adr r3, 8010ef8 <__ieee754_acos+0x458>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	ec59 8b10 	vmov	r8, r9, d0
 8010dcc:	f7ef fc2c 	bl	8000628 <__aeabi_dmul>
 8010dd0:	a34b      	add	r3, pc, #300	; (adr r3, 8010f00 <__ieee754_acos+0x460>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fa71 	bl	80002bc <__adddf3>
 8010dda:	4622      	mov	r2, r4
 8010ddc:	462b      	mov	r3, r5
 8010dde:	f7ef fc23 	bl	8000628 <__aeabi_dmul>
 8010de2:	a349      	add	r3, pc, #292	; (adr r3, 8010f08 <__ieee754_acos+0x468>)
 8010de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de8:	f7ef fa66 	bl	80002b8 <__aeabi_dsub>
 8010dec:	4622      	mov	r2, r4
 8010dee:	462b      	mov	r3, r5
 8010df0:	f7ef fc1a 	bl	8000628 <__aeabi_dmul>
 8010df4:	a346      	add	r3, pc, #280	; (adr r3, 8010f10 <__ieee754_acos+0x470>)
 8010df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfa:	f7ef fa5f 	bl	80002bc <__adddf3>
 8010dfe:	4622      	mov	r2, r4
 8010e00:	462b      	mov	r3, r5
 8010e02:	f7ef fc11 	bl	8000628 <__aeabi_dmul>
 8010e06:	a344      	add	r3, pc, #272	; (adr r3, 8010f18 <__ieee754_acos+0x478>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	f7ef fa54 	bl	80002b8 <__aeabi_dsub>
 8010e10:	4622      	mov	r2, r4
 8010e12:	462b      	mov	r3, r5
 8010e14:	f7ef fc08 	bl	8000628 <__aeabi_dmul>
 8010e18:	a341      	add	r3, pc, #260	; (adr r3, 8010f20 <__ieee754_acos+0x480>)
 8010e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1e:	f7ef fa4d 	bl	80002bc <__adddf3>
 8010e22:	4622      	mov	r2, r4
 8010e24:	462b      	mov	r3, r5
 8010e26:	f7ef fbff 	bl	8000628 <__aeabi_dmul>
 8010e2a:	a33f      	add	r3, pc, #252	; (adr r3, 8010f28 <__ieee754_acos+0x488>)
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	4682      	mov	sl, r0
 8010e32:	468b      	mov	fp, r1
 8010e34:	4620      	mov	r0, r4
 8010e36:	4629      	mov	r1, r5
 8010e38:	f7ef fbf6 	bl	8000628 <__aeabi_dmul>
 8010e3c:	a33c      	add	r3, pc, #240	; (adr r3, 8010f30 <__ieee754_acos+0x490>)
 8010e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e42:	f7ef fa39 	bl	80002b8 <__aeabi_dsub>
 8010e46:	4622      	mov	r2, r4
 8010e48:	462b      	mov	r3, r5
 8010e4a:	f7ef fbed 	bl	8000628 <__aeabi_dmul>
 8010e4e:	a33a      	add	r3, pc, #232	; (adr r3, 8010f38 <__ieee754_acos+0x498>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	f7ef fa32 	bl	80002bc <__adddf3>
 8010e58:	4622      	mov	r2, r4
 8010e5a:	462b      	mov	r3, r5
 8010e5c:	f7ef fbe4 	bl	8000628 <__aeabi_dmul>
 8010e60:	a337      	add	r3, pc, #220	; (adr r3, 8010f40 <__ieee754_acos+0x4a0>)
 8010e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e66:	f7ef fa27 	bl	80002b8 <__aeabi_dsub>
 8010e6a:	4622      	mov	r2, r4
 8010e6c:	462b      	mov	r3, r5
 8010e6e:	f7ef fbdb 	bl	8000628 <__aeabi_dmul>
 8010e72:	4b39      	ldr	r3, [pc, #228]	; (8010f58 <__ieee754_acos+0x4b8>)
 8010e74:	2200      	movs	r2, #0
 8010e76:	f7ef fa21 	bl	80002bc <__adddf3>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	4650      	mov	r0, sl
 8010e80:	4659      	mov	r1, fp
 8010e82:	f7ef fcfb 	bl	800087c <__aeabi_ddiv>
 8010e86:	4642      	mov	r2, r8
 8010e88:	464b      	mov	r3, r9
 8010e8a:	f7ef fbcd 	bl	8000628 <__aeabi_dmul>
 8010e8e:	2600      	movs	r6, #0
 8010e90:	4682      	mov	sl, r0
 8010e92:	468b      	mov	fp, r1
 8010e94:	4632      	mov	r2, r6
 8010e96:	464b      	mov	r3, r9
 8010e98:	4630      	mov	r0, r6
 8010e9a:	4649      	mov	r1, r9
 8010e9c:	f7ef fbc4 	bl	8000628 <__aeabi_dmul>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	4629      	mov	r1, r5
 8010ea8:	f7ef fa06 	bl	80002b8 <__aeabi_dsub>
 8010eac:	4632      	mov	r2, r6
 8010eae:	4604      	mov	r4, r0
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	464b      	mov	r3, r9
 8010eb4:	4640      	mov	r0, r8
 8010eb6:	4649      	mov	r1, r9
 8010eb8:	f7ef fa00 	bl	80002bc <__adddf3>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	4629      	mov	r1, r5
 8010ec4:	f7ef fcda 	bl	800087c <__aeabi_ddiv>
 8010ec8:	4602      	mov	r2, r0
 8010eca:	460b      	mov	r3, r1
 8010ecc:	4650      	mov	r0, sl
 8010ece:	4659      	mov	r1, fp
 8010ed0:	f7ef f9f4 	bl	80002bc <__adddf3>
 8010ed4:	4632      	mov	r2, r6
 8010ed6:	464b      	mov	r3, r9
 8010ed8:	f7ef f9f0 	bl	80002bc <__adddf3>
 8010edc:	4602      	mov	r2, r0
 8010ede:	460b      	mov	r3, r1
 8010ee0:	f7ef f9ec 	bl	80002bc <__adddf3>
 8010ee4:	e5fe      	b.n	8010ae4 <__ieee754_acos+0x44>
 8010ee6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010f48 <__ieee754_acos+0x4a8>
 8010eea:	e5ed      	b.n	8010ac8 <__ieee754_acos+0x28>
 8010eec:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010f50 <__ieee754_acos+0x4b0>
 8010ef0:	e5ea      	b.n	8010ac8 <__ieee754_acos+0x28>
 8010ef2:	bf00      	nop
 8010ef4:	f3af 8000 	nop.w
 8010ef8:	0dfdf709 	.word	0x0dfdf709
 8010efc:	3f023de1 	.word	0x3f023de1
 8010f00:	7501b288 	.word	0x7501b288
 8010f04:	3f49efe0 	.word	0x3f49efe0
 8010f08:	b5688f3b 	.word	0xb5688f3b
 8010f0c:	3fa48228 	.word	0x3fa48228
 8010f10:	0e884455 	.word	0x0e884455
 8010f14:	3fc9c155 	.word	0x3fc9c155
 8010f18:	03eb6f7d 	.word	0x03eb6f7d
 8010f1c:	3fd4d612 	.word	0x3fd4d612
 8010f20:	55555555 	.word	0x55555555
 8010f24:	3fc55555 	.word	0x3fc55555
 8010f28:	b12e9282 	.word	0xb12e9282
 8010f2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010f30:	1b8d0159 	.word	0x1b8d0159
 8010f34:	3fe6066c 	.word	0x3fe6066c
 8010f38:	9c598ac8 	.word	0x9c598ac8
 8010f3c:	40002ae5 	.word	0x40002ae5
 8010f40:	1c8a2d4b 	.word	0x1c8a2d4b
 8010f44:	40033a27 	.word	0x40033a27
	...
 8010f50:	54442d18 	.word	0x54442d18
 8010f54:	3ff921fb 	.word	0x3ff921fb
 8010f58:	3ff00000 	.word	0x3ff00000
 8010f5c:	3fe00000 	.word	0x3fe00000

08010f60 <__ieee754_atan2>:
 8010f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f64:	ec57 6b11 	vmov	r6, r7, d1
 8010f68:	4273      	negs	r3, r6
 8010f6a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80110f0 <__ieee754_atan2+0x190>
 8010f6e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010f72:	4333      	orrs	r3, r6
 8010f74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010f78:	4573      	cmp	r3, lr
 8010f7a:	ec51 0b10 	vmov	r0, r1, d0
 8010f7e:	ee11 8a10 	vmov	r8, s2
 8010f82:	d80a      	bhi.n	8010f9a <__ieee754_atan2+0x3a>
 8010f84:	4244      	negs	r4, r0
 8010f86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f8a:	4304      	orrs	r4, r0
 8010f8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010f90:	4574      	cmp	r4, lr
 8010f92:	ee10 9a10 	vmov	r9, s0
 8010f96:	468c      	mov	ip, r1
 8010f98:	d907      	bls.n	8010faa <__ieee754_atan2+0x4a>
 8010f9a:	4632      	mov	r2, r6
 8010f9c:	463b      	mov	r3, r7
 8010f9e:	f7ef f98d 	bl	80002bc <__adddf3>
 8010fa2:	ec41 0b10 	vmov	d0, r0, r1
 8010fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010faa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010fae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010fb2:	4334      	orrs	r4, r6
 8010fb4:	d103      	bne.n	8010fbe <__ieee754_atan2+0x5e>
 8010fb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fba:	f001 bd95 	b.w	8012ae8 <atan>
 8010fbe:	17bc      	asrs	r4, r7, #30
 8010fc0:	f004 0402 	and.w	r4, r4, #2
 8010fc4:	ea53 0909 	orrs.w	r9, r3, r9
 8010fc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010fcc:	d107      	bne.n	8010fde <__ieee754_atan2+0x7e>
 8010fce:	2c02      	cmp	r4, #2
 8010fd0:	d060      	beq.n	8011094 <__ieee754_atan2+0x134>
 8010fd2:	2c03      	cmp	r4, #3
 8010fd4:	d1e5      	bne.n	8010fa2 <__ieee754_atan2+0x42>
 8010fd6:	a142      	add	r1, pc, #264	; (adr r1, 80110e0 <__ieee754_atan2+0x180>)
 8010fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fdc:	e7e1      	b.n	8010fa2 <__ieee754_atan2+0x42>
 8010fde:	ea52 0808 	orrs.w	r8, r2, r8
 8010fe2:	d106      	bne.n	8010ff2 <__ieee754_atan2+0x92>
 8010fe4:	f1bc 0f00 	cmp.w	ip, #0
 8010fe8:	da5f      	bge.n	80110aa <__ieee754_atan2+0x14a>
 8010fea:	a13f      	add	r1, pc, #252	; (adr r1, 80110e8 <__ieee754_atan2+0x188>)
 8010fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ff0:	e7d7      	b.n	8010fa2 <__ieee754_atan2+0x42>
 8010ff2:	4572      	cmp	r2, lr
 8010ff4:	d10f      	bne.n	8011016 <__ieee754_atan2+0xb6>
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	f104 34ff 	add.w	r4, r4, #4294967295
 8010ffc:	d107      	bne.n	801100e <__ieee754_atan2+0xae>
 8010ffe:	2c02      	cmp	r4, #2
 8011000:	d84c      	bhi.n	801109c <__ieee754_atan2+0x13c>
 8011002:	4b35      	ldr	r3, [pc, #212]	; (80110d8 <__ieee754_atan2+0x178>)
 8011004:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011008:	e9d4 0100 	ldrd	r0, r1, [r4]
 801100c:	e7c9      	b.n	8010fa2 <__ieee754_atan2+0x42>
 801100e:	2c02      	cmp	r4, #2
 8011010:	d848      	bhi.n	80110a4 <__ieee754_atan2+0x144>
 8011012:	4b32      	ldr	r3, [pc, #200]	; (80110dc <__ieee754_atan2+0x17c>)
 8011014:	e7f6      	b.n	8011004 <__ieee754_atan2+0xa4>
 8011016:	4573      	cmp	r3, lr
 8011018:	d0e4      	beq.n	8010fe4 <__ieee754_atan2+0x84>
 801101a:	1a9b      	subs	r3, r3, r2
 801101c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011020:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011024:	da1e      	bge.n	8011064 <__ieee754_atan2+0x104>
 8011026:	2f00      	cmp	r7, #0
 8011028:	da01      	bge.n	801102e <__ieee754_atan2+0xce>
 801102a:	323c      	adds	r2, #60	; 0x3c
 801102c:	db1e      	blt.n	801106c <__ieee754_atan2+0x10c>
 801102e:	4632      	mov	r2, r6
 8011030:	463b      	mov	r3, r7
 8011032:	f7ef fc23 	bl	800087c <__aeabi_ddiv>
 8011036:	ec41 0b10 	vmov	d0, r0, r1
 801103a:	f001 fef5 	bl	8012e28 <fabs>
 801103e:	f001 fd53 	bl	8012ae8 <atan>
 8011042:	ec51 0b10 	vmov	r0, r1, d0
 8011046:	2c01      	cmp	r4, #1
 8011048:	d013      	beq.n	8011072 <__ieee754_atan2+0x112>
 801104a:	2c02      	cmp	r4, #2
 801104c:	d015      	beq.n	801107a <__ieee754_atan2+0x11a>
 801104e:	2c00      	cmp	r4, #0
 8011050:	d0a7      	beq.n	8010fa2 <__ieee754_atan2+0x42>
 8011052:	a319      	add	r3, pc, #100	; (adr r3, 80110b8 <__ieee754_atan2+0x158>)
 8011054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011058:	f7ef f92e 	bl	80002b8 <__aeabi_dsub>
 801105c:	a318      	add	r3, pc, #96	; (adr r3, 80110c0 <__ieee754_atan2+0x160>)
 801105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011062:	e014      	b.n	801108e <__ieee754_atan2+0x12e>
 8011064:	a118      	add	r1, pc, #96	; (adr r1, 80110c8 <__ieee754_atan2+0x168>)
 8011066:	e9d1 0100 	ldrd	r0, r1, [r1]
 801106a:	e7ec      	b.n	8011046 <__ieee754_atan2+0xe6>
 801106c:	2000      	movs	r0, #0
 801106e:	2100      	movs	r1, #0
 8011070:	e7e9      	b.n	8011046 <__ieee754_atan2+0xe6>
 8011072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011076:	4619      	mov	r1, r3
 8011078:	e793      	b.n	8010fa2 <__ieee754_atan2+0x42>
 801107a:	a30f      	add	r3, pc, #60	; (adr r3, 80110b8 <__ieee754_atan2+0x158>)
 801107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011080:	f7ef f91a 	bl	80002b8 <__aeabi_dsub>
 8011084:	4602      	mov	r2, r0
 8011086:	460b      	mov	r3, r1
 8011088:	a10d      	add	r1, pc, #52	; (adr r1, 80110c0 <__ieee754_atan2+0x160>)
 801108a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801108e:	f7ef f913 	bl	80002b8 <__aeabi_dsub>
 8011092:	e786      	b.n	8010fa2 <__ieee754_atan2+0x42>
 8011094:	a10a      	add	r1, pc, #40	; (adr r1, 80110c0 <__ieee754_atan2+0x160>)
 8011096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801109a:	e782      	b.n	8010fa2 <__ieee754_atan2+0x42>
 801109c:	a10c      	add	r1, pc, #48	; (adr r1, 80110d0 <__ieee754_atan2+0x170>)
 801109e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110a2:	e77e      	b.n	8010fa2 <__ieee754_atan2+0x42>
 80110a4:	2000      	movs	r0, #0
 80110a6:	2100      	movs	r1, #0
 80110a8:	e77b      	b.n	8010fa2 <__ieee754_atan2+0x42>
 80110aa:	a107      	add	r1, pc, #28	; (adr r1, 80110c8 <__ieee754_atan2+0x168>)
 80110ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110b0:	e777      	b.n	8010fa2 <__ieee754_atan2+0x42>
 80110b2:	bf00      	nop
 80110b4:	f3af 8000 	nop.w
 80110b8:	33145c07 	.word	0x33145c07
 80110bc:	3ca1a626 	.word	0x3ca1a626
 80110c0:	54442d18 	.word	0x54442d18
 80110c4:	400921fb 	.word	0x400921fb
 80110c8:	54442d18 	.word	0x54442d18
 80110cc:	3ff921fb 	.word	0x3ff921fb
 80110d0:	54442d18 	.word	0x54442d18
 80110d4:	3fe921fb 	.word	0x3fe921fb
 80110d8:	08013b20 	.word	0x08013b20
 80110dc:	08013b38 	.word	0x08013b38
 80110e0:	54442d18 	.word	0x54442d18
 80110e4:	c00921fb 	.word	0xc00921fb
 80110e8:	54442d18 	.word	0x54442d18
 80110ec:	bff921fb 	.word	0xbff921fb
 80110f0:	7ff00000 	.word	0x7ff00000
 80110f4:	00000000 	.word	0x00000000

080110f8 <__ieee754_pow>:
 80110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fc:	ed2d 8b06 	vpush	{d8-d10}
 8011100:	b089      	sub	sp, #36	; 0x24
 8011102:	ed8d 1b00 	vstr	d1, [sp]
 8011106:	e9dd 2900 	ldrd	r2, r9, [sp]
 801110a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801110e:	ea58 0102 	orrs.w	r1, r8, r2
 8011112:	ec57 6b10 	vmov	r6, r7, d0
 8011116:	d115      	bne.n	8011144 <__ieee754_pow+0x4c>
 8011118:	19b3      	adds	r3, r6, r6
 801111a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801111e:	4152      	adcs	r2, r2
 8011120:	4299      	cmp	r1, r3
 8011122:	4b89      	ldr	r3, [pc, #548]	; (8011348 <__ieee754_pow+0x250>)
 8011124:	4193      	sbcs	r3, r2
 8011126:	f080 84d2 	bcs.w	8011ace <__ieee754_pow+0x9d6>
 801112a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801112e:	4630      	mov	r0, r6
 8011130:	4639      	mov	r1, r7
 8011132:	f7ef f8c3 	bl	80002bc <__adddf3>
 8011136:	ec41 0b10 	vmov	d0, r0, r1
 801113a:	b009      	add	sp, #36	; 0x24
 801113c:	ecbd 8b06 	vpop	{d8-d10}
 8011140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011144:	4b81      	ldr	r3, [pc, #516]	; (801134c <__ieee754_pow+0x254>)
 8011146:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801114a:	429c      	cmp	r4, r3
 801114c:	ee10 aa10 	vmov	sl, s0
 8011150:	463d      	mov	r5, r7
 8011152:	dc06      	bgt.n	8011162 <__ieee754_pow+0x6a>
 8011154:	d101      	bne.n	801115a <__ieee754_pow+0x62>
 8011156:	2e00      	cmp	r6, #0
 8011158:	d1e7      	bne.n	801112a <__ieee754_pow+0x32>
 801115a:	4598      	cmp	r8, r3
 801115c:	dc01      	bgt.n	8011162 <__ieee754_pow+0x6a>
 801115e:	d10f      	bne.n	8011180 <__ieee754_pow+0x88>
 8011160:	b172      	cbz	r2, 8011180 <__ieee754_pow+0x88>
 8011162:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011166:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801116a:	ea55 050a 	orrs.w	r5, r5, sl
 801116e:	d1dc      	bne.n	801112a <__ieee754_pow+0x32>
 8011170:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011174:	18db      	adds	r3, r3, r3
 8011176:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801117a:	4152      	adcs	r2, r2
 801117c:	429d      	cmp	r5, r3
 801117e:	e7d0      	b.n	8011122 <__ieee754_pow+0x2a>
 8011180:	2d00      	cmp	r5, #0
 8011182:	da3b      	bge.n	80111fc <__ieee754_pow+0x104>
 8011184:	4b72      	ldr	r3, [pc, #456]	; (8011350 <__ieee754_pow+0x258>)
 8011186:	4598      	cmp	r8, r3
 8011188:	dc51      	bgt.n	801122e <__ieee754_pow+0x136>
 801118a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801118e:	4598      	cmp	r8, r3
 8011190:	f340 84ac 	ble.w	8011aec <__ieee754_pow+0x9f4>
 8011194:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011198:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801119c:	2b14      	cmp	r3, #20
 801119e:	dd0f      	ble.n	80111c0 <__ieee754_pow+0xc8>
 80111a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80111a4:	fa22 f103 	lsr.w	r1, r2, r3
 80111a8:	fa01 f303 	lsl.w	r3, r1, r3
 80111ac:	4293      	cmp	r3, r2
 80111ae:	f040 849d 	bne.w	8011aec <__ieee754_pow+0x9f4>
 80111b2:	f001 0101 	and.w	r1, r1, #1
 80111b6:	f1c1 0302 	rsb	r3, r1, #2
 80111ba:	9304      	str	r3, [sp, #16]
 80111bc:	b182      	cbz	r2, 80111e0 <__ieee754_pow+0xe8>
 80111be:	e05f      	b.n	8011280 <__ieee754_pow+0x188>
 80111c0:	2a00      	cmp	r2, #0
 80111c2:	d15b      	bne.n	801127c <__ieee754_pow+0x184>
 80111c4:	f1c3 0314 	rsb	r3, r3, #20
 80111c8:	fa48 f103 	asr.w	r1, r8, r3
 80111cc:	fa01 f303 	lsl.w	r3, r1, r3
 80111d0:	4543      	cmp	r3, r8
 80111d2:	f040 8488 	bne.w	8011ae6 <__ieee754_pow+0x9ee>
 80111d6:	f001 0101 	and.w	r1, r1, #1
 80111da:	f1c1 0302 	rsb	r3, r1, #2
 80111de:	9304      	str	r3, [sp, #16]
 80111e0:	4b5c      	ldr	r3, [pc, #368]	; (8011354 <__ieee754_pow+0x25c>)
 80111e2:	4598      	cmp	r8, r3
 80111e4:	d132      	bne.n	801124c <__ieee754_pow+0x154>
 80111e6:	f1b9 0f00 	cmp.w	r9, #0
 80111ea:	f280 8478 	bge.w	8011ade <__ieee754_pow+0x9e6>
 80111ee:	4959      	ldr	r1, [pc, #356]	; (8011354 <__ieee754_pow+0x25c>)
 80111f0:	4632      	mov	r2, r6
 80111f2:	463b      	mov	r3, r7
 80111f4:	2000      	movs	r0, #0
 80111f6:	f7ef fb41 	bl	800087c <__aeabi_ddiv>
 80111fa:	e79c      	b.n	8011136 <__ieee754_pow+0x3e>
 80111fc:	2300      	movs	r3, #0
 80111fe:	9304      	str	r3, [sp, #16]
 8011200:	2a00      	cmp	r2, #0
 8011202:	d13d      	bne.n	8011280 <__ieee754_pow+0x188>
 8011204:	4b51      	ldr	r3, [pc, #324]	; (801134c <__ieee754_pow+0x254>)
 8011206:	4598      	cmp	r8, r3
 8011208:	d1ea      	bne.n	80111e0 <__ieee754_pow+0xe8>
 801120a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801120e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011212:	ea53 030a 	orrs.w	r3, r3, sl
 8011216:	f000 845a 	beq.w	8011ace <__ieee754_pow+0x9d6>
 801121a:	4b4f      	ldr	r3, [pc, #316]	; (8011358 <__ieee754_pow+0x260>)
 801121c:	429c      	cmp	r4, r3
 801121e:	dd08      	ble.n	8011232 <__ieee754_pow+0x13a>
 8011220:	f1b9 0f00 	cmp.w	r9, #0
 8011224:	f2c0 8457 	blt.w	8011ad6 <__ieee754_pow+0x9de>
 8011228:	e9dd 0100 	ldrd	r0, r1, [sp]
 801122c:	e783      	b.n	8011136 <__ieee754_pow+0x3e>
 801122e:	2302      	movs	r3, #2
 8011230:	e7e5      	b.n	80111fe <__ieee754_pow+0x106>
 8011232:	f1b9 0f00 	cmp.w	r9, #0
 8011236:	f04f 0000 	mov.w	r0, #0
 801123a:	f04f 0100 	mov.w	r1, #0
 801123e:	f6bf af7a 	bge.w	8011136 <__ieee754_pow+0x3e>
 8011242:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011246:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801124a:	e774      	b.n	8011136 <__ieee754_pow+0x3e>
 801124c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011250:	d106      	bne.n	8011260 <__ieee754_pow+0x168>
 8011252:	4632      	mov	r2, r6
 8011254:	463b      	mov	r3, r7
 8011256:	4630      	mov	r0, r6
 8011258:	4639      	mov	r1, r7
 801125a:	f7ef f9e5 	bl	8000628 <__aeabi_dmul>
 801125e:	e76a      	b.n	8011136 <__ieee754_pow+0x3e>
 8011260:	4b3e      	ldr	r3, [pc, #248]	; (801135c <__ieee754_pow+0x264>)
 8011262:	4599      	cmp	r9, r3
 8011264:	d10c      	bne.n	8011280 <__ieee754_pow+0x188>
 8011266:	2d00      	cmp	r5, #0
 8011268:	db0a      	blt.n	8011280 <__ieee754_pow+0x188>
 801126a:	ec47 6b10 	vmov	d0, r6, r7
 801126e:	b009      	add	sp, #36	; 0x24
 8011270:	ecbd 8b06 	vpop	{d8-d10}
 8011274:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011278:	f000 be7a 	b.w	8011f70 <__ieee754_sqrt>
 801127c:	2300      	movs	r3, #0
 801127e:	9304      	str	r3, [sp, #16]
 8011280:	ec47 6b10 	vmov	d0, r6, r7
 8011284:	f001 fdd0 	bl	8012e28 <fabs>
 8011288:	ec51 0b10 	vmov	r0, r1, d0
 801128c:	f1ba 0f00 	cmp.w	sl, #0
 8011290:	d129      	bne.n	80112e6 <__ieee754_pow+0x1ee>
 8011292:	b124      	cbz	r4, 801129e <__ieee754_pow+0x1a6>
 8011294:	4b2f      	ldr	r3, [pc, #188]	; (8011354 <__ieee754_pow+0x25c>)
 8011296:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801129a:	429a      	cmp	r2, r3
 801129c:	d123      	bne.n	80112e6 <__ieee754_pow+0x1ee>
 801129e:	f1b9 0f00 	cmp.w	r9, #0
 80112a2:	da05      	bge.n	80112b0 <__ieee754_pow+0x1b8>
 80112a4:	4602      	mov	r2, r0
 80112a6:	460b      	mov	r3, r1
 80112a8:	2000      	movs	r0, #0
 80112aa:	492a      	ldr	r1, [pc, #168]	; (8011354 <__ieee754_pow+0x25c>)
 80112ac:	f7ef fae6 	bl	800087c <__aeabi_ddiv>
 80112b0:	2d00      	cmp	r5, #0
 80112b2:	f6bf af40 	bge.w	8011136 <__ieee754_pow+0x3e>
 80112b6:	9b04      	ldr	r3, [sp, #16]
 80112b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80112bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80112c0:	4323      	orrs	r3, r4
 80112c2:	d108      	bne.n	80112d6 <__ieee754_pow+0x1de>
 80112c4:	4602      	mov	r2, r0
 80112c6:	460b      	mov	r3, r1
 80112c8:	4610      	mov	r0, r2
 80112ca:	4619      	mov	r1, r3
 80112cc:	f7ee fff4 	bl	80002b8 <__aeabi_dsub>
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	e78f      	b.n	80111f6 <__ieee754_pow+0xfe>
 80112d6:	9b04      	ldr	r3, [sp, #16]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	f47f af2c 	bne.w	8011136 <__ieee754_pow+0x3e>
 80112de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112e2:	4619      	mov	r1, r3
 80112e4:	e727      	b.n	8011136 <__ieee754_pow+0x3e>
 80112e6:	0feb      	lsrs	r3, r5, #31
 80112e8:	3b01      	subs	r3, #1
 80112ea:	9306      	str	r3, [sp, #24]
 80112ec:	9a06      	ldr	r2, [sp, #24]
 80112ee:	9b04      	ldr	r3, [sp, #16]
 80112f0:	4313      	orrs	r3, r2
 80112f2:	d102      	bne.n	80112fa <__ieee754_pow+0x202>
 80112f4:	4632      	mov	r2, r6
 80112f6:	463b      	mov	r3, r7
 80112f8:	e7e6      	b.n	80112c8 <__ieee754_pow+0x1d0>
 80112fa:	4b19      	ldr	r3, [pc, #100]	; (8011360 <__ieee754_pow+0x268>)
 80112fc:	4598      	cmp	r8, r3
 80112fe:	f340 80fb 	ble.w	80114f8 <__ieee754_pow+0x400>
 8011302:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011306:	4598      	cmp	r8, r3
 8011308:	4b13      	ldr	r3, [pc, #76]	; (8011358 <__ieee754_pow+0x260>)
 801130a:	dd0c      	ble.n	8011326 <__ieee754_pow+0x22e>
 801130c:	429c      	cmp	r4, r3
 801130e:	dc0f      	bgt.n	8011330 <__ieee754_pow+0x238>
 8011310:	f1b9 0f00 	cmp.w	r9, #0
 8011314:	da0f      	bge.n	8011336 <__ieee754_pow+0x23e>
 8011316:	2000      	movs	r0, #0
 8011318:	b009      	add	sp, #36	; 0x24
 801131a:	ecbd 8b06 	vpop	{d8-d10}
 801131e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011322:	f001 bbd6 	b.w	8012ad2 <__math_oflow>
 8011326:	429c      	cmp	r4, r3
 8011328:	dbf2      	blt.n	8011310 <__ieee754_pow+0x218>
 801132a:	4b0a      	ldr	r3, [pc, #40]	; (8011354 <__ieee754_pow+0x25c>)
 801132c:	429c      	cmp	r4, r3
 801132e:	dd19      	ble.n	8011364 <__ieee754_pow+0x26c>
 8011330:	f1b9 0f00 	cmp.w	r9, #0
 8011334:	dcef      	bgt.n	8011316 <__ieee754_pow+0x21e>
 8011336:	2000      	movs	r0, #0
 8011338:	b009      	add	sp, #36	; 0x24
 801133a:	ecbd 8b06 	vpop	{d8-d10}
 801133e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011342:	f001 bbbd 	b.w	8012ac0 <__math_uflow>
 8011346:	bf00      	nop
 8011348:	fff00000 	.word	0xfff00000
 801134c:	7ff00000 	.word	0x7ff00000
 8011350:	433fffff 	.word	0x433fffff
 8011354:	3ff00000 	.word	0x3ff00000
 8011358:	3fefffff 	.word	0x3fefffff
 801135c:	3fe00000 	.word	0x3fe00000
 8011360:	41e00000 	.word	0x41e00000
 8011364:	4b60      	ldr	r3, [pc, #384]	; (80114e8 <__ieee754_pow+0x3f0>)
 8011366:	2200      	movs	r2, #0
 8011368:	f7ee ffa6 	bl	80002b8 <__aeabi_dsub>
 801136c:	a354      	add	r3, pc, #336	; (adr r3, 80114c0 <__ieee754_pow+0x3c8>)
 801136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011372:	4604      	mov	r4, r0
 8011374:	460d      	mov	r5, r1
 8011376:	f7ef f957 	bl	8000628 <__aeabi_dmul>
 801137a:	a353      	add	r3, pc, #332	; (adr r3, 80114c8 <__ieee754_pow+0x3d0>)
 801137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011380:	4606      	mov	r6, r0
 8011382:	460f      	mov	r7, r1
 8011384:	4620      	mov	r0, r4
 8011386:	4629      	mov	r1, r5
 8011388:	f7ef f94e 	bl	8000628 <__aeabi_dmul>
 801138c:	4b57      	ldr	r3, [pc, #348]	; (80114ec <__ieee754_pow+0x3f4>)
 801138e:	4682      	mov	sl, r0
 8011390:	468b      	mov	fp, r1
 8011392:	2200      	movs	r2, #0
 8011394:	4620      	mov	r0, r4
 8011396:	4629      	mov	r1, r5
 8011398:	f7ef f946 	bl	8000628 <__aeabi_dmul>
 801139c:	4602      	mov	r2, r0
 801139e:	460b      	mov	r3, r1
 80113a0:	a14b      	add	r1, pc, #300	; (adr r1, 80114d0 <__ieee754_pow+0x3d8>)
 80113a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113a6:	f7ee ff87 	bl	80002b8 <__aeabi_dsub>
 80113aa:	4622      	mov	r2, r4
 80113ac:	462b      	mov	r3, r5
 80113ae:	f7ef f93b 	bl	8000628 <__aeabi_dmul>
 80113b2:	4602      	mov	r2, r0
 80113b4:	460b      	mov	r3, r1
 80113b6:	2000      	movs	r0, #0
 80113b8:	494d      	ldr	r1, [pc, #308]	; (80114f0 <__ieee754_pow+0x3f8>)
 80113ba:	f7ee ff7d 	bl	80002b8 <__aeabi_dsub>
 80113be:	4622      	mov	r2, r4
 80113c0:	4680      	mov	r8, r0
 80113c2:	4689      	mov	r9, r1
 80113c4:	462b      	mov	r3, r5
 80113c6:	4620      	mov	r0, r4
 80113c8:	4629      	mov	r1, r5
 80113ca:	f7ef f92d 	bl	8000628 <__aeabi_dmul>
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	4640      	mov	r0, r8
 80113d4:	4649      	mov	r1, r9
 80113d6:	f7ef f927 	bl	8000628 <__aeabi_dmul>
 80113da:	a33f      	add	r3, pc, #252	; (adr r3, 80114d8 <__ieee754_pow+0x3e0>)
 80113dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e0:	f7ef f922 	bl	8000628 <__aeabi_dmul>
 80113e4:	4602      	mov	r2, r0
 80113e6:	460b      	mov	r3, r1
 80113e8:	4650      	mov	r0, sl
 80113ea:	4659      	mov	r1, fp
 80113ec:	f7ee ff64 	bl	80002b8 <__aeabi_dsub>
 80113f0:	4602      	mov	r2, r0
 80113f2:	460b      	mov	r3, r1
 80113f4:	4680      	mov	r8, r0
 80113f6:	4689      	mov	r9, r1
 80113f8:	4630      	mov	r0, r6
 80113fa:	4639      	mov	r1, r7
 80113fc:	f7ee ff5e 	bl	80002bc <__adddf3>
 8011400:	2000      	movs	r0, #0
 8011402:	4632      	mov	r2, r6
 8011404:	463b      	mov	r3, r7
 8011406:	4604      	mov	r4, r0
 8011408:	460d      	mov	r5, r1
 801140a:	f7ee ff55 	bl	80002b8 <__aeabi_dsub>
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	4640      	mov	r0, r8
 8011414:	4649      	mov	r1, r9
 8011416:	f7ee ff4f 	bl	80002b8 <__aeabi_dsub>
 801141a:	9b04      	ldr	r3, [sp, #16]
 801141c:	9a06      	ldr	r2, [sp, #24]
 801141e:	3b01      	subs	r3, #1
 8011420:	4313      	orrs	r3, r2
 8011422:	4682      	mov	sl, r0
 8011424:	468b      	mov	fp, r1
 8011426:	f040 81e7 	bne.w	80117f8 <__ieee754_pow+0x700>
 801142a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80114e0 <__ieee754_pow+0x3e8>
 801142e:	eeb0 8a47 	vmov.f32	s16, s14
 8011432:	eef0 8a67 	vmov.f32	s17, s15
 8011436:	e9dd 6700 	ldrd	r6, r7, [sp]
 801143a:	2600      	movs	r6, #0
 801143c:	4632      	mov	r2, r6
 801143e:	463b      	mov	r3, r7
 8011440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011444:	f7ee ff38 	bl	80002b8 <__aeabi_dsub>
 8011448:	4622      	mov	r2, r4
 801144a:	462b      	mov	r3, r5
 801144c:	f7ef f8ec 	bl	8000628 <__aeabi_dmul>
 8011450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011454:	4680      	mov	r8, r0
 8011456:	4689      	mov	r9, r1
 8011458:	4650      	mov	r0, sl
 801145a:	4659      	mov	r1, fp
 801145c:	f7ef f8e4 	bl	8000628 <__aeabi_dmul>
 8011460:	4602      	mov	r2, r0
 8011462:	460b      	mov	r3, r1
 8011464:	4640      	mov	r0, r8
 8011466:	4649      	mov	r1, r9
 8011468:	f7ee ff28 	bl	80002bc <__adddf3>
 801146c:	4632      	mov	r2, r6
 801146e:	463b      	mov	r3, r7
 8011470:	4680      	mov	r8, r0
 8011472:	4689      	mov	r9, r1
 8011474:	4620      	mov	r0, r4
 8011476:	4629      	mov	r1, r5
 8011478:	f7ef f8d6 	bl	8000628 <__aeabi_dmul>
 801147c:	460b      	mov	r3, r1
 801147e:	4604      	mov	r4, r0
 8011480:	460d      	mov	r5, r1
 8011482:	4602      	mov	r2, r0
 8011484:	4649      	mov	r1, r9
 8011486:	4640      	mov	r0, r8
 8011488:	f7ee ff18 	bl	80002bc <__adddf3>
 801148c:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <__ieee754_pow+0x3fc>)
 801148e:	4299      	cmp	r1, r3
 8011490:	ec45 4b19 	vmov	d9, r4, r5
 8011494:	4606      	mov	r6, r0
 8011496:	460f      	mov	r7, r1
 8011498:	468b      	mov	fp, r1
 801149a:	f340 82f1 	ble.w	8011a80 <__ieee754_pow+0x988>
 801149e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80114a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80114a6:	4303      	orrs	r3, r0
 80114a8:	f000 81e4 	beq.w	8011874 <__ieee754_pow+0x77c>
 80114ac:	ec51 0b18 	vmov	r0, r1, d8
 80114b0:	2200      	movs	r2, #0
 80114b2:	2300      	movs	r3, #0
 80114b4:	f7ef fb2a 	bl	8000b0c <__aeabi_dcmplt>
 80114b8:	3800      	subs	r0, #0
 80114ba:	bf18      	it	ne
 80114bc:	2001      	movne	r0, #1
 80114be:	e72b      	b.n	8011318 <__ieee754_pow+0x220>
 80114c0:	60000000 	.word	0x60000000
 80114c4:	3ff71547 	.word	0x3ff71547
 80114c8:	f85ddf44 	.word	0xf85ddf44
 80114cc:	3e54ae0b 	.word	0x3e54ae0b
 80114d0:	55555555 	.word	0x55555555
 80114d4:	3fd55555 	.word	0x3fd55555
 80114d8:	652b82fe 	.word	0x652b82fe
 80114dc:	3ff71547 	.word	0x3ff71547
 80114e0:	00000000 	.word	0x00000000
 80114e4:	bff00000 	.word	0xbff00000
 80114e8:	3ff00000 	.word	0x3ff00000
 80114ec:	3fd00000 	.word	0x3fd00000
 80114f0:	3fe00000 	.word	0x3fe00000
 80114f4:	408fffff 	.word	0x408fffff
 80114f8:	4bd5      	ldr	r3, [pc, #852]	; (8011850 <__ieee754_pow+0x758>)
 80114fa:	402b      	ands	r3, r5
 80114fc:	2200      	movs	r2, #0
 80114fe:	b92b      	cbnz	r3, 801150c <__ieee754_pow+0x414>
 8011500:	4bd4      	ldr	r3, [pc, #848]	; (8011854 <__ieee754_pow+0x75c>)
 8011502:	f7ef f891 	bl	8000628 <__aeabi_dmul>
 8011506:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801150a:	460c      	mov	r4, r1
 801150c:	1523      	asrs	r3, r4, #20
 801150e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011512:	4413      	add	r3, r2
 8011514:	9305      	str	r3, [sp, #20]
 8011516:	4bd0      	ldr	r3, [pc, #832]	; (8011858 <__ieee754_pow+0x760>)
 8011518:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801151c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011520:	429c      	cmp	r4, r3
 8011522:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011526:	dd08      	ble.n	801153a <__ieee754_pow+0x442>
 8011528:	4bcc      	ldr	r3, [pc, #816]	; (801185c <__ieee754_pow+0x764>)
 801152a:	429c      	cmp	r4, r3
 801152c:	f340 8162 	ble.w	80117f4 <__ieee754_pow+0x6fc>
 8011530:	9b05      	ldr	r3, [sp, #20]
 8011532:	3301      	adds	r3, #1
 8011534:	9305      	str	r3, [sp, #20]
 8011536:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801153a:	2400      	movs	r4, #0
 801153c:	00e3      	lsls	r3, r4, #3
 801153e:	9307      	str	r3, [sp, #28]
 8011540:	4bc7      	ldr	r3, [pc, #796]	; (8011860 <__ieee754_pow+0x768>)
 8011542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011546:	ed93 7b00 	vldr	d7, [r3]
 801154a:	4629      	mov	r1, r5
 801154c:	ec53 2b17 	vmov	r2, r3, d7
 8011550:	eeb0 9a47 	vmov.f32	s18, s14
 8011554:	eef0 9a67 	vmov.f32	s19, s15
 8011558:	4682      	mov	sl, r0
 801155a:	f7ee fead 	bl	80002b8 <__aeabi_dsub>
 801155e:	4652      	mov	r2, sl
 8011560:	4606      	mov	r6, r0
 8011562:	460f      	mov	r7, r1
 8011564:	462b      	mov	r3, r5
 8011566:	ec51 0b19 	vmov	r0, r1, d9
 801156a:	f7ee fea7 	bl	80002bc <__adddf3>
 801156e:	4602      	mov	r2, r0
 8011570:	460b      	mov	r3, r1
 8011572:	2000      	movs	r0, #0
 8011574:	49bb      	ldr	r1, [pc, #748]	; (8011864 <__ieee754_pow+0x76c>)
 8011576:	f7ef f981 	bl	800087c <__aeabi_ddiv>
 801157a:	ec41 0b1a 	vmov	d10, r0, r1
 801157e:	4602      	mov	r2, r0
 8011580:	460b      	mov	r3, r1
 8011582:	4630      	mov	r0, r6
 8011584:	4639      	mov	r1, r7
 8011586:	f7ef f84f 	bl	8000628 <__aeabi_dmul>
 801158a:	2300      	movs	r3, #0
 801158c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011590:	9302      	str	r3, [sp, #8]
 8011592:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011596:	46ab      	mov	fp, r5
 8011598:	106d      	asrs	r5, r5, #1
 801159a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801159e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80115a2:	ec41 0b18 	vmov	d8, r0, r1
 80115a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80115aa:	2200      	movs	r2, #0
 80115ac:	4640      	mov	r0, r8
 80115ae:	4649      	mov	r1, r9
 80115b0:	4614      	mov	r4, r2
 80115b2:	461d      	mov	r5, r3
 80115b4:	f7ef f838 	bl	8000628 <__aeabi_dmul>
 80115b8:	4602      	mov	r2, r0
 80115ba:	460b      	mov	r3, r1
 80115bc:	4630      	mov	r0, r6
 80115be:	4639      	mov	r1, r7
 80115c0:	f7ee fe7a 	bl	80002b8 <__aeabi_dsub>
 80115c4:	ec53 2b19 	vmov	r2, r3, d9
 80115c8:	4606      	mov	r6, r0
 80115ca:	460f      	mov	r7, r1
 80115cc:	4620      	mov	r0, r4
 80115ce:	4629      	mov	r1, r5
 80115d0:	f7ee fe72 	bl	80002b8 <__aeabi_dsub>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	4650      	mov	r0, sl
 80115da:	4659      	mov	r1, fp
 80115dc:	f7ee fe6c 	bl	80002b8 <__aeabi_dsub>
 80115e0:	4642      	mov	r2, r8
 80115e2:	464b      	mov	r3, r9
 80115e4:	f7ef f820 	bl	8000628 <__aeabi_dmul>
 80115e8:	4602      	mov	r2, r0
 80115ea:	460b      	mov	r3, r1
 80115ec:	4630      	mov	r0, r6
 80115ee:	4639      	mov	r1, r7
 80115f0:	f7ee fe62 	bl	80002b8 <__aeabi_dsub>
 80115f4:	ec53 2b1a 	vmov	r2, r3, d10
 80115f8:	f7ef f816 	bl	8000628 <__aeabi_dmul>
 80115fc:	ec53 2b18 	vmov	r2, r3, d8
 8011600:	ec41 0b19 	vmov	d9, r0, r1
 8011604:	ec51 0b18 	vmov	r0, r1, d8
 8011608:	f7ef f80e 	bl	8000628 <__aeabi_dmul>
 801160c:	a37c      	add	r3, pc, #496	; (adr r3, 8011800 <__ieee754_pow+0x708>)
 801160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011612:	4604      	mov	r4, r0
 8011614:	460d      	mov	r5, r1
 8011616:	f7ef f807 	bl	8000628 <__aeabi_dmul>
 801161a:	a37b      	add	r3, pc, #492	; (adr r3, 8011808 <__ieee754_pow+0x710>)
 801161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011620:	f7ee fe4c 	bl	80002bc <__adddf3>
 8011624:	4622      	mov	r2, r4
 8011626:	462b      	mov	r3, r5
 8011628:	f7ee fffe 	bl	8000628 <__aeabi_dmul>
 801162c:	a378      	add	r3, pc, #480	; (adr r3, 8011810 <__ieee754_pow+0x718>)
 801162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011632:	f7ee fe43 	bl	80002bc <__adddf3>
 8011636:	4622      	mov	r2, r4
 8011638:	462b      	mov	r3, r5
 801163a:	f7ee fff5 	bl	8000628 <__aeabi_dmul>
 801163e:	a376      	add	r3, pc, #472	; (adr r3, 8011818 <__ieee754_pow+0x720>)
 8011640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011644:	f7ee fe3a 	bl	80002bc <__adddf3>
 8011648:	4622      	mov	r2, r4
 801164a:	462b      	mov	r3, r5
 801164c:	f7ee ffec 	bl	8000628 <__aeabi_dmul>
 8011650:	a373      	add	r3, pc, #460	; (adr r3, 8011820 <__ieee754_pow+0x728>)
 8011652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011656:	f7ee fe31 	bl	80002bc <__adddf3>
 801165a:	4622      	mov	r2, r4
 801165c:	462b      	mov	r3, r5
 801165e:	f7ee ffe3 	bl	8000628 <__aeabi_dmul>
 8011662:	a371      	add	r3, pc, #452	; (adr r3, 8011828 <__ieee754_pow+0x730>)
 8011664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011668:	f7ee fe28 	bl	80002bc <__adddf3>
 801166c:	4622      	mov	r2, r4
 801166e:	4606      	mov	r6, r0
 8011670:	460f      	mov	r7, r1
 8011672:	462b      	mov	r3, r5
 8011674:	4620      	mov	r0, r4
 8011676:	4629      	mov	r1, r5
 8011678:	f7ee ffd6 	bl	8000628 <__aeabi_dmul>
 801167c:	4602      	mov	r2, r0
 801167e:	460b      	mov	r3, r1
 8011680:	4630      	mov	r0, r6
 8011682:	4639      	mov	r1, r7
 8011684:	f7ee ffd0 	bl	8000628 <__aeabi_dmul>
 8011688:	4642      	mov	r2, r8
 801168a:	4604      	mov	r4, r0
 801168c:	460d      	mov	r5, r1
 801168e:	464b      	mov	r3, r9
 8011690:	ec51 0b18 	vmov	r0, r1, d8
 8011694:	f7ee fe12 	bl	80002bc <__adddf3>
 8011698:	ec53 2b19 	vmov	r2, r3, d9
 801169c:	f7ee ffc4 	bl	8000628 <__aeabi_dmul>
 80116a0:	4622      	mov	r2, r4
 80116a2:	462b      	mov	r3, r5
 80116a4:	f7ee fe0a 	bl	80002bc <__adddf3>
 80116a8:	4642      	mov	r2, r8
 80116aa:	4682      	mov	sl, r0
 80116ac:	468b      	mov	fp, r1
 80116ae:	464b      	mov	r3, r9
 80116b0:	4640      	mov	r0, r8
 80116b2:	4649      	mov	r1, r9
 80116b4:	f7ee ffb8 	bl	8000628 <__aeabi_dmul>
 80116b8:	4b6b      	ldr	r3, [pc, #428]	; (8011868 <__ieee754_pow+0x770>)
 80116ba:	2200      	movs	r2, #0
 80116bc:	4606      	mov	r6, r0
 80116be:	460f      	mov	r7, r1
 80116c0:	f7ee fdfc 	bl	80002bc <__adddf3>
 80116c4:	4652      	mov	r2, sl
 80116c6:	465b      	mov	r3, fp
 80116c8:	f7ee fdf8 	bl	80002bc <__adddf3>
 80116cc:	2000      	movs	r0, #0
 80116ce:	4604      	mov	r4, r0
 80116d0:	460d      	mov	r5, r1
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	4640      	mov	r0, r8
 80116d8:	4649      	mov	r1, r9
 80116da:	f7ee ffa5 	bl	8000628 <__aeabi_dmul>
 80116de:	4b62      	ldr	r3, [pc, #392]	; (8011868 <__ieee754_pow+0x770>)
 80116e0:	4680      	mov	r8, r0
 80116e2:	4689      	mov	r9, r1
 80116e4:	2200      	movs	r2, #0
 80116e6:	4620      	mov	r0, r4
 80116e8:	4629      	mov	r1, r5
 80116ea:	f7ee fde5 	bl	80002b8 <__aeabi_dsub>
 80116ee:	4632      	mov	r2, r6
 80116f0:	463b      	mov	r3, r7
 80116f2:	f7ee fde1 	bl	80002b8 <__aeabi_dsub>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	4650      	mov	r0, sl
 80116fc:	4659      	mov	r1, fp
 80116fe:	f7ee fddb 	bl	80002b8 <__aeabi_dsub>
 8011702:	ec53 2b18 	vmov	r2, r3, d8
 8011706:	f7ee ff8f 	bl	8000628 <__aeabi_dmul>
 801170a:	4622      	mov	r2, r4
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	462b      	mov	r3, r5
 8011712:	ec51 0b19 	vmov	r0, r1, d9
 8011716:	f7ee ff87 	bl	8000628 <__aeabi_dmul>
 801171a:	4602      	mov	r2, r0
 801171c:	460b      	mov	r3, r1
 801171e:	4630      	mov	r0, r6
 8011720:	4639      	mov	r1, r7
 8011722:	f7ee fdcb 	bl	80002bc <__adddf3>
 8011726:	4606      	mov	r6, r0
 8011728:	460f      	mov	r7, r1
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	4640      	mov	r0, r8
 8011730:	4649      	mov	r1, r9
 8011732:	f7ee fdc3 	bl	80002bc <__adddf3>
 8011736:	a33e      	add	r3, pc, #248	; (adr r3, 8011830 <__ieee754_pow+0x738>)
 8011738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173c:	2000      	movs	r0, #0
 801173e:	4604      	mov	r4, r0
 8011740:	460d      	mov	r5, r1
 8011742:	f7ee ff71 	bl	8000628 <__aeabi_dmul>
 8011746:	4642      	mov	r2, r8
 8011748:	ec41 0b18 	vmov	d8, r0, r1
 801174c:	464b      	mov	r3, r9
 801174e:	4620      	mov	r0, r4
 8011750:	4629      	mov	r1, r5
 8011752:	f7ee fdb1 	bl	80002b8 <__aeabi_dsub>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	4630      	mov	r0, r6
 801175c:	4639      	mov	r1, r7
 801175e:	f7ee fdab 	bl	80002b8 <__aeabi_dsub>
 8011762:	a335      	add	r3, pc, #212	; (adr r3, 8011838 <__ieee754_pow+0x740>)
 8011764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011768:	f7ee ff5e 	bl	8000628 <__aeabi_dmul>
 801176c:	a334      	add	r3, pc, #208	; (adr r3, 8011840 <__ieee754_pow+0x748>)
 801176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011772:	4606      	mov	r6, r0
 8011774:	460f      	mov	r7, r1
 8011776:	4620      	mov	r0, r4
 8011778:	4629      	mov	r1, r5
 801177a:	f7ee ff55 	bl	8000628 <__aeabi_dmul>
 801177e:	4602      	mov	r2, r0
 8011780:	460b      	mov	r3, r1
 8011782:	4630      	mov	r0, r6
 8011784:	4639      	mov	r1, r7
 8011786:	f7ee fd99 	bl	80002bc <__adddf3>
 801178a:	9a07      	ldr	r2, [sp, #28]
 801178c:	4b37      	ldr	r3, [pc, #220]	; (801186c <__ieee754_pow+0x774>)
 801178e:	4413      	add	r3, r2
 8011790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011794:	f7ee fd92 	bl	80002bc <__adddf3>
 8011798:	4682      	mov	sl, r0
 801179a:	9805      	ldr	r0, [sp, #20]
 801179c:	468b      	mov	fp, r1
 801179e:	f7ee fed9 	bl	8000554 <__aeabi_i2d>
 80117a2:	9a07      	ldr	r2, [sp, #28]
 80117a4:	4b32      	ldr	r3, [pc, #200]	; (8011870 <__ieee754_pow+0x778>)
 80117a6:	4413      	add	r3, r2
 80117a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117ac:	4606      	mov	r6, r0
 80117ae:	460f      	mov	r7, r1
 80117b0:	4652      	mov	r2, sl
 80117b2:	465b      	mov	r3, fp
 80117b4:	ec51 0b18 	vmov	r0, r1, d8
 80117b8:	f7ee fd80 	bl	80002bc <__adddf3>
 80117bc:	4642      	mov	r2, r8
 80117be:	464b      	mov	r3, r9
 80117c0:	f7ee fd7c 	bl	80002bc <__adddf3>
 80117c4:	4632      	mov	r2, r6
 80117c6:	463b      	mov	r3, r7
 80117c8:	f7ee fd78 	bl	80002bc <__adddf3>
 80117cc:	2000      	movs	r0, #0
 80117ce:	4632      	mov	r2, r6
 80117d0:	463b      	mov	r3, r7
 80117d2:	4604      	mov	r4, r0
 80117d4:	460d      	mov	r5, r1
 80117d6:	f7ee fd6f 	bl	80002b8 <__aeabi_dsub>
 80117da:	4642      	mov	r2, r8
 80117dc:	464b      	mov	r3, r9
 80117de:	f7ee fd6b 	bl	80002b8 <__aeabi_dsub>
 80117e2:	ec53 2b18 	vmov	r2, r3, d8
 80117e6:	f7ee fd67 	bl	80002b8 <__aeabi_dsub>
 80117ea:	4602      	mov	r2, r0
 80117ec:	460b      	mov	r3, r1
 80117ee:	4650      	mov	r0, sl
 80117f0:	4659      	mov	r1, fp
 80117f2:	e610      	b.n	8011416 <__ieee754_pow+0x31e>
 80117f4:	2401      	movs	r4, #1
 80117f6:	e6a1      	b.n	801153c <__ieee754_pow+0x444>
 80117f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011848 <__ieee754_pow+0x750>
 80117fc:	e617      	b.n	801142e <__ieee754_pow+0x336>
 80117fe:	bf00      	nop
 8011800:	4a454eef 	.word	0x4a454eef
 8011804:	3fca7e28 	.word	0x3fca7e28
 8011808:	93c9db65 	.word	0x93c9db65
 801180c:	3fcd864a 	.word	0x3fcd864a
 8011810:	a91d4101 	.word	0xa91d4101
 8011814:	3fd17460 	.word	0x3fd17460
 8011818:	518f264d 	.word	0x518f264d
 801181c:	3fd55555 	.word	0x3fd55555
 8011820:	db6fabff 	.word	0xdb6fabff
 8011824:	3fdb6db6 	.word	0x3fdb6db6
 8011828:	33333303 	.word	0x33333303
 801182c:	3fe33333 	.word	0x3fe33333
 8011830:	e0000000 	.word	0xe0000000
 8011834:	3feec709 	.word	0x3feec709
 8011838:	dc3a03fd 	.word	0xdc3a03fd
 801183c:	3feec709 	.word	0x3feec709
 8011840:	145b01f5 	.word	0x145b01f5
 8011844:	be3e2fe0 	.word	0xbe3e2fe0
 8011848:	00000000 	.word	0x00000000
 801184c:	3ff00000 	.word	0x3ff00000
 8011850:	7ff00000 	.word	0x7ff00000
 8011854:	43400000 	.word	0x43400000
 8011858:	0003988e 	.word	0x0003988e
 801185c:	000bb679 	.word	0x000bb679
 8011860:	08013b50 	.word	0x08013b50
 8011864:	3ff00000 	.word	0x3ff00000
 8011868:	40080000 	.word	0x40080000
 801186c:	08013b70 	.word	0x08013b70
 8011870:	08013b60 	.word	0x08013b60
 8011874:	a3b5      	add	r3, pc, #724	; (adr r3, 8011b4c <__ieee754_pow+0xa54>)
 8011876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187a:	4640      	mov	r0, r8
 801187c:	4649      	mov	r1, r9
 801187e:	f7ee fd1d 	bl	80002bc <__adddf3>
 8011882:	4622      	mov	r2, r4
 8011884:	ec41 0b1a 	vmov	d10, r0, r1
 8011888:	462b      	mov	r3, r5
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7ee fd13 	bl	80002b8 <__aeabi_dsub>
 8011892:	4602      	mov	r2, r0
 8011894:	460b      	mov	r3, r1
 8011896:	ec51 0b1a 	vmov	r0, r1, d10
 801189a:	f7ef f955 	bl	8000b48 <__aeabi_dcmpgt>
 801189e:	2800      	cmp	r0, #0
 80118a0:	f47f ae04 	bne.w	80114ac <__ieee754_pow+0x3b4>
 80118a4:	4aa4      	ldr	r2, [pc, #656]	; (8011b38 <__ieee754_pow+0xa40>)
 80118a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118aa:	4293      	cmp	r3, r2
 80118ac:	f340 8108 	ble.w	8011ac0 <__ieee754_pow+0x9c8>
 80118b0:	151b      	asrs	r3, r3, #20
 80118b2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80118b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80118ba:	fa4a f303 	asr.w	r3, sl, r3
 80118be:	445b      	add	r3, fp
 80118c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80118c4:	4e9d      	ldr	r6, [pc, #628]	; (8011b3c <__ieee754_pow+0xa44>)
 80118c6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80118ca:	4116      	asrs	r6, r2
 80118cc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80118d0:	2000      	movs	r0, #0
 80118d2:	ea23 0106 	bic.w	r1, r3, r6
 80118d6:	f1c2 0214 	rsb	r2, r2, #20
 80118da:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80118de:	fa4a fa02 	asr.w	sl, sl, r2
 80118e2:	f1bb 0f00 	cmp.w	fp, #0
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	4620      	mov	r0, r4
 80118ec:	4629      	mov	r1, r5
 80118ee:	bfb8      	it	lt
 80118f0:	f1ca 0a00 	rsblt	sl, sl, #0
 80118f4:	f7ee fce0 	bl	80002b8 <__aeabi_dsub>
 80118f8:	ec41 0b19 	vmov	d9, r0, r1
 80118fc:	4642      	mov	r2, r8
 80118fe:	464b      	mov	r3, r9
 8011900:	ec51 0b19 	vmov	r0, r1, d9
 8011904:	f7ee fcda 	bl	80002bc <__adddf3>
 8011908:	a37b      	add	r3, pc, #492	; (adr r3, 8011af8 <__ieee754_pow+0xa00>)
 801190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190e:	2000      	movs	r0, #0
 8011910:	4604      	mov	r4, r0
 8011912:	460d      	mov	r5, r1
 8011914:	f7ee fe88 	bl	8000628 <__aeabi_dmul>
 8011918:	ec53 2b19 	vmov	r2, r3, d9
 801191c:	4606      	mov	r6, r0
 801191e:	460f      	mov	r7, r1
 8011920:	4620      	mov	r0, r4
 8011922:	4629      	mov	r1, r5
 8011924:	f7ee fcc8 	bl	80002b8 <__aeabi_dsub>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	4640      	mov	r0, r8
 801192e:	4649      	mov	r1, r9
 8011930:	f7ee fcc2 	bl	80002b8 <__aeabi_dsub>
 8011934:	a372      	add	r3, pc, #456	; (adr r3, 8011b00 <__ieee754_pow+0xa08>)
 8011936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193a:	f7ee fe75 	bl	8000628 <__aeabi_dmul>
 801193e:	a372      	add	r3, pc, #456	; (adr r3, 8011b08 <__ieee754_pow+0xa10>)
 8011940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011944:	4680      	mov	r8, r0
 8011946:	4689      	mov	r9, r1
 8011948:	4620      	mov	r0, r4
 801194a:	4629      	mov	r1, r5
 801194c:	f7ee fe6c 	bl	8000628 <__aeabi_dmul>
 8011950:	4602      	mov	r2, r0
 8011952:	460b      	mov	r3, r1
 8011954:	4640      	mov	r0, r8
 8011956:	4649      	mov	r1, r9
 8011958:	f7ee fcb0 	bl	80002bc <__adddf3>
 801195c:	4604      	mov	r4, r0
 801195e:	460d      	mov	r5, r1
 8011960:	4602      	mov	r2, r0
 8011962:	460b      	mov	r3, r1
 8011964:	4630      	mov	r0, r6
 8011966:	4639      	mov	r1, r7
 8011968:	f7ee fca8 	bl	80002bc <__adddf3>
 801196c:	4632      	mov	r2, r6
 801196e:	463b      	mov	r3, r7
 8011970:	4680      	mov	r8, r0
 8011972:	4689      	mov	r9, r1
 8011974:	f7ee fca0 	bl	80002b8 <__aeabi_dsub>
 8011978:	4602      	mov	r2, r0
 801197a:	460b      	mov	r3, r1
 801197c:	4620      	mov	r0, r4
 801197e:	4629      	mov	r1, r5
 8011980:	f7ee fc9a 	bl	80002b8 <__aeabi_dsub>
 8011984:	4642      	mov	r2, r8
 8011986:	4606      	mov	r6, r0
 8011988:	460f      	mov	r7, r1
 801198a:	464b      	mov	r3, r9
 801198c:	4640      	mov	r0, r8
 801198e:	4649      	mov	r1, r9
 8011990:	f7ee fe4a 	bl	8000628 <__aeabi_dmul>
 8011994:	a35e      	add	r3, pc, #376	; (adr r3, 8011b10 <__ieee754_pow+0xa18>)
 8011996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199a:	4604      	mov	r4, r0
 801199c:	460d      	mov	r5, r1
 801199e:	f7ee fe43 	bl	8000628 <__aeabi_dmul>
 80119a2:	a35d      	add	r3, pc, #372	; (adr r3, 8011b18 <__ieee754_pow+0xa20>)
 80119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a8:	f7ee fc86 	bl	80002b8 <__aeabi_dsub>
 80119ac:	4622      	mov	r2, r4
 80119ae:	462b      	mov	r3, r5
 80119b0:	f7ee fe3a 	bl	8000628 <__aeabi_dmul>
 80119b4:	a35a      	add	r3, pc, #360	; (adr r3, 8011b20 <__ieee754_pow+0xa28>)
 80119b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ba:	f7ee fc7f 	bl	80002bc <__adddf3>
 80119be:	4622      	mov	r2, r4
 80119c0:	462b      	mov	r3, r5
 80119c2:	f7ee fe31 	bl	8000628 <__aeabi_dmul>
 80119c6:	a358      	add	r3, pc, #352	; (adr r3, 8011b28 <__ieee754_pow+0xa30>)
 80119c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119cc:	f7ee fc74 	bl	80002b8 <__aeabi_dsub>
 80119d0:	4622      	mov	r2, r4
 80119d2:	462b      	mov	r3, r5
 80119d4:	f7ee fe28 	bl	8000628 <__aeabi_dmul>
 80119d8:	a355      	add	r3, pc, #340	; (adr r3, 8011b30 <__ieee754_pow+0xa38>)
 80119da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119de:	f7ee fc6d 	bl	80002bc <__adddf3>
 80119e2:	4622      	mov	r2, r4
 80119e4:	462b      	mov	r3, r5
 80119e6:	f7ee fe1f 	bl	8000628 <__aeabi_dmul>
 80119ea:	4602      	mov	r2, r0
 80119ec:	460b      	mov	r3, r1
 80119ee:	4640      	mov	r0, r8
 80119f0:	4649      	mov	r1, r9
 80119f2:	f7ee fc61 	bl	80002b8 <__aeabi_dsub>
 80119f6:	4604      	mov	r4, r0
 80119f8:	460d      	mov	r5, r1
 80119fa:	4602      	mov	r2, r0
 80119fc:	460b      	mov	r3, r1
 80119fe:	4640      	mov	r0, r8
 8011a00:	4649      	mov	r1, r9
 8011a02:	f7ee fe11 	bl	8000628 <__aeabi_dmul>
 8011a06:	2200      	movs	r2, #0
 8011a08:	ec41 0b19 	vmov	d9, r0, r1
 8011a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a10:	4620      	mov	r0, r4
 8011a12:	4629      	mov	r1, r5
 8011a14:	f7ee fc50 	bl	80002b8 <__aeabi_dsub>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	ec51 0b19 	vmov	r0, r1, d9
 8011a20:	f7ee ff2c 	bl	800087c <__aeabi_ddiv>
 8011a24:	4632      	mov	r2, r6
 8011a26:	4604      	mov	r4, r0
 8011a28:	460d      	mov	r5, r1
 8011a2a:	463b      	mov	r3, r7
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	4649      	mov	r1, r9
 8011a30:	f7ee fdfa 	bl	8000628 <__aeabi_dmul>
 8011a34:	4632      	mov	r2, r6
 8011a36:	463b      	mov	r3, r7
 8011a38:	f7ee fc40 	bl	80002bc <__adddf3>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	460b      	mov	r3, r1
 8011a40:	4620      	mov	r0, r4
 8011a42:	4629      	mov	r1, r5
 8011a44:	f7ee fc38 	bl	80002b8 <__aeabi_dsub>
 8011a48:	4642      	mov	r2, r8
 8011a4a:	464b      	mov	r3, r9
 8011a4c:	f7ee fc34 	bl	80002b8 <__aeabi_dsub>
 8011a50:	460b      	mov	r3, r1
 8011a52:	4602      	mov	r2, r0
 8011a54:	493a      	ldr	r1, [pc, #232]	; (8011b40 <__ieee754_pow+0xa48>)
 8011a56:	2000      	movs	r0, #0
 8011a58:	f7ee fc2e 	bl	80002b8 <__aeabi_dsub>
 8011a5c:	ec41 0b10 	vmov	d0, r0, r1
 8011a60:	ee10 3a90 	vmov	r3, s1
 8011a64:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a6c:	da2b      	bge.n	8011ac6 <__ieee754_pow+0x9ce>
 8011a6e:	4650      	mov	r0, sl
 8011a70:	f001 fa76 	bl	8012f60 <scalbn>
 8011a74:	ec51 0b10 	vmov	r0, r1, d0
 8011a78:	ec53 2b18 	vmov	r2, r3, d8
 8011a7c:	f7ff bbed 	b.w	801125a <__ieee754_pow+0x162>
 8011a80:	4b30      	ldr	r3, [pc, #192]	; (8011b44 <__ieee754_pow+0xa4c>)
 8011a82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011a86:	429e      	cmp	r6, r3
 8011a88:	f77f af0c 	ble.w	80118a4 <__ieee754_pow+0x7ac>
 8011a8c:	4b2e      	ldr	r3, [pc, #184]	; (8011b48 <__ieee754_pow+0xa50>)
 8011a8e:	440b      	add	r3, r1
 8011a90:	4303      	orrs	r3, r0
 8011a92:	d009      	beq.n	8011aa8 <__ieee754_pow+0x9b0>
 8011a94:	ec51 0b18 	vmov	r0, r1, d8
 8011a98:	2200      	movs	r2, #0
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	f7ef f836 	bl	8000b0c <__aeabi_dcmplt>
 8011aa0:	3800      	subs	r0, #0
 8011aa2:	bf18      	it	ne
 8011aa4:	2001      	movne	r0, #1
 8011aa6:	e447      	b.n	8011338 <__ieee754_pow+0x240>
 8011aa8:	4622      	mov	r2, r4
 8011aaa:	462b      	mov	r3, r5
 8011aac:	f7ee fc04 	bl	80002b8 <__aeabi_dsub>
 8011ab0:	4642      	mov	r2, r8
 8011ab2:	464b      	mov	r3, r9
 8011ab4:	f7ef f83e 	bl	8000b34 <__aeabi_dcmpge>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	f43f aef3 	beq.w	80118a4 <__ieee754_pow+0x7ac>
 8011abe:	e7e9      	b.n	8011a94 <__ieee754_pow+0x99c>
 8011ac0:	f04f 0a00 	mov.w	sl, #0
 8011ac4:	e71a      	b.n	80118fc <__ieee754_pow+0x804>
 8011ac6:	ec51 0b10 	vmov	r0, r1, d0
 8011aca:	4619      	mov	r1, r3
 8011acc:	e7d4      	b.n	8011a78 <__ieee754_pow+0x980>
 8011ace:	491c      	ldr	r1, [pc, #112]	; (8011b40 <__ieee754_pow+0xa48>)
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	f7ff bb30 	b.w	8011136 <__ieee754_pow+0x3e>
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	2100      	movs	r1, #0
 8011ada:	f7ff bb2c 	b.w	8011136 <__ieee754_pow+0x3e>
 8011ade:	4630      	mov	r0, r6
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	f7ff bb28 	b.w	8011136 <__ieee754_pow+0x3e>
 8011ae6:	9204      	str	r2, [sp, #16]
 8011ae8:	f7ff bb7a 	b.w	80111e0 <__ieee754_pow+0xe8>
 8011aec:	2300      	movs	r3, #0
 8011aee:	f7ff bb64 	b.w	80111ba <__ieee754_pow+0xc2>
 8011af2:	bf00      	nop
 8011af4:	f3af 8000 	nop.w
 8011af8:	00000000 	.word	0x00000000
 8011afc:	3fe62e43 	.word	0x3fe62e43
 8011b00:	fefa39ef 	.word	0xfefa39ef
 8011b04:	3fe62e42 	.word	0x3fe62e42
 8011b08:	0ca86c39 	.word	0x0ca86c39
 8011b0c:	be205c61 	.word	0xbe205c61
 8011b10:	72bea4d0 	.word	0x72bea4d0
 8011b14:	3e663769 	.word	0x3e663769
 8011b18:	c5d26bf1 	.word	0xc5d26bf1
 8011b1c:	3ebbbd41 	.word	0x3ebbbd41
 8011b20:	af25de2c 	.word	0xaf25de2c
 8011b24:	3f11566a 	.word	0x3f11566a
 8011b28:	16bebd93 	.word	0x16bebd93
 8011b2c:	3f66c16c 	.word	0x3f66c16c
 8011b30:	5555553e 	.word	0x5555553e
 8011b34:	3fc55555 	.word	0x3fc55555
 8011b38:	3fe00000 	.word	0x3fe00000
 8011b3c:	000fffff 	.word	0x000fffff
 8011b40:	3ff00000 	.word	0x3ff00000
 8011b44:	4090cbff 	.word	0x4090cbff
 8011b48:	3f6f3400 	.word	0x3f6f3400
 8011b4c:	652b82fe 	.word	0x652b82fe
 8011b50:	3c971547 	.word	0x3c971547
 8011b54:	00000000 	.word	0x00000000

08011b58 <__ieee754_rem_pio2>:
 8011b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	ed2d 8b02 	vpush	{d8}
 8011b60:	ec55 4b10 	vmov	r4, r5, d0
 8011b64:	4bca      	ldr	r3, [pc, #808]	; (8011e90 <__ieee754_rem_pio2+0x338>)
 8011b66:	b08b      	sub	sp, #44	; 0x2c
 8011b68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011b6c:	4598      	cmp	r8, r3
 8011b6e:	4682      	mov	sl, r0
 8011b70:	9502      	str	r5, [sp, #8]
 8011b72:	dc08      	bgt.n	8011b86 <__ieee754_rem_pio2+0x2e>
 8011b74:	2200      	movs	r2, #0
 8011b76:	2300      	movs	r3, #0
 8011b78:	ed80 0b00 	vstr	d0, [r0]
 8011b7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011b80:	f04f 0b00 	mov.w	fp, #0
 8011b84:	e028      	b.n	8011bd8 <__ieee754_rem_pio2+0x80>
 8011b86:	4bc3      	ldr	r3, [pc, #780]	; (8011e94 <__ieee754_rem_pio2+0x33c>)
 8011b88:	4598      	cmp	r8, r3
 8011b8a:	dc78      	bgt.n	8011c7e <__ieee754_rem_pio2+0x126>
 8011b8c:	9b02      	ldr	r3, [sp, #8]
 8011b8e:	4ec2      	ldr	r6, [pc, #776]	; (8011e98 <__ieee754_rem_pio2+0x340>)
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	ee10 0a10 	vmov	r0, s0
 8011b96:	a3b0      	add	r3, pc, #704	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x300>)
 8011b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9c:	4629      	mov	r1, r5
 8011b9e:	dd39      	ble.n	8011c14 <__ieee754_rem_pio2+0xbc>
 8011ba0:	f7ee fb8a 	bl	80002b8 <__aeabi_dsub>
 8011ba4:	45b0      	cmp	r8, r6
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	460d      	mov	r5, r1
 8011baa:	d01b      	beq.n	8011be4 <__ieee754_rem_pio2+0x8c>
 8011bac:	a3ac      	add	r3, pc, #688	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x308>)
 8011bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb2:	f7ee fb81 	bl	80002b8 <__aeabi_dsub>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	460b      	mov	r3, r1
 8011bba:	e9ca 2300 	strd	r2, r3, [sl]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	4629      	mov	r1, r5
 8011bc2:	f7ee fb79 	bl	80002b8 <__aeabi_dsub>
 8011bc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x308>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	f7ee fb74 	bl	80002b8 <__aeabi_dsub>
 8011bd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011bd4:	f04f 0b01 	mov.w	fp, #1
 8011bd8:	4658      	mov	r0, fp
 8011bda:	b00b      	add	sp, #44	; 0x2c
 8011bdc:	ecbd 8b02 	vpop	{d8}
 8011be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be4:	a3a0      	add	r3, pc, #640	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x310>)
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	f7ee fb65 	bl	80002b8 <__aeabi_dsub>
 8011bee:	a3a0      	add	r3, pc, #640	; (adr r3, 8011e70 <__ieee754_rem_pio2+0x318>)
 8011bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	460d      	mov	r5, r1
 8011bf8:	f7ee fb5e 	bl	80002b8 <__aeabi_dsub>
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	460b      	mov	r3, r1
 8011c00:	e9ca 2300 	strd	r2, r3, [sl]
 8011c04:	4620      	mov	r0, r4
 8011c06:	4629      	mov	r1, r5
 8011c08:	f7ee fb56 	bl	80002b8 <__aeabi_dsub>
 8011c0c:	a398      	add	r3, pc, #608	; (adr r3, 8011e70 <__ieee754_rem_pio2+0x318>)
 8011c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c12:	e7db      	b.n	8011bcc <__ieee754_rem_pio2+0x74>
 8011c14:	f7ee fb52 	bl	80002bc <__adddf3>
 8011c18:	45b0      	cmp	r8, r6
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	d016      	beq.n	8011c4e <__ieee754_rem_pio2+0xf6>
 8011c20:	a38f      	add	r3, pc, #572	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x308>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fb49 	bl	80002bc <__adddf3>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	e9ca 2300 	strd	r2, r3, [sl]
 8011c32:	4620      	mov	r0, r4
 8011c34:	4629      	mov	r1, r5
 8011c36:	f7ee fb3f 	bl	80002b8 <__aeabi_dsub>
 8011c3a:	a389      	add	r3, pc, #548	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x308>)
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	f7ee fb3c 	bl	80002bc <__adddf3>
 8011c44:	f04f 3bff 	mov.w	fp, #4294967295
 8011c48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011c4c:	e7c4      	b.n	8011bd8 <__ieee754_rem_pio2+0x80>
 8011c4e:	a386      	add	r3, pc, #536	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x310>)
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	f7ee fb32 	bl	80002bc <__adddf3>
 8011c58:	a385      	add	r3, pc, #532	; (adr r3, 8011e70 <__ieee754_rem_pio2+0x318>)
 8011c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5e:	4604      	mov	r4, r0
 8011c60:	460d      	mov	r5, r1
 8011c62:	f7ee fb2b 	bl	80002bc <__adddf3>
 8011c66:	4602      	mov	r2, r0
 8011c68:	460b      	mov	r3, r1
 8011c6a:	e9ca 2300 	strd	r2, r3, [sl]
 8011c6e:	4620      	mov	r0, r4
 8011c70:	4629      	mov	r1, r5
 8011c72:	f7ee fb21 	bl	80002b8 <__aeabi_dsub>
 8011c76:	a37e      	add	r3, pc, #504	; (adr r3, 8011e70 <__ieee754_rem_pio2+0x318>)
 8011c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7c:	e7e0      	b.n	8011c40 <__ieee754_rem_pio2+0xe8>
 8011c7e:	4b87      	ldr	r3, [pc, #540]	; (8011e9c <__ieee754_rem_pio2+0x344>)
 8011c80:	4598      	cmp	r8, r3
 8011c82:	f300 80d9 	bgt.w	8011e38 <__ieee754_rem_pio2+0x2e0>
 8011c86:	f001 f8cf 	bl	8012e28 <fabs>
 8011c8a:	ec55 4b10 	vmov	r4, r5, d0
 8011c8e:	ee10 0a10 	vmov	r0, s0
 8011c92:	a379      	add	r3, pc, #484	; (adr r3, 8011e78 <__ieee754_rem_pio2+0x320>)
 8011c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c98:	4629      	mov	r1, r5
 8011c9a:	f7ee fcc5 	bl	8000628 <__aeabi_dmul>
 8011c9e:	4b80      	ldr	r3, [pc, #512]	; (8011ea0 <__ieee754_rem_pio2+0x348>)
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f7ee fb0b 	bl	80002bc <__adddf3>
 8011ca6:	f7ee ff6f 	bl	8000b88 <__aeabi_d2iz>
 8011caa:	4683      	mov	fp, r0
 8011cac:	f7ee fc52 	bl	8000554 <__aeabi_i2d>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	ec43 2b18 	vmov	d8, r2, r3
 8011cb8:	a367      	add	r3, pc, #412	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x300>)
 8011cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbe:	f7ee fcb3 	bl	8000628 <__aeabi_dmul>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	460b      	mov	r3, r1
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4629      	mov	r1, r5
 8011cca:	f7ee faf5 	bl	80002b8 <__aeabi_dsub>
 8011cce:	a364      	add	r3, pc, #400	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x308>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	ec51 0b18 	vmov	r0, r1, d8
 8011cdc:	f7ee fca4 	bl	8000628 <__aeabi_dmul>
 8011ce0:	f1bb 0f1f 	cmp.w	fp, #31
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	dc0d      	bgt.n	8011d06 <__ieee754_rem_pio2+0x1ae>
 8011cea:	4b6e      	ldr	r3, [pc, #440]	; (8011ea4 <__ieee754_rem_pio2+0x34c>)
 8011cec:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cf4:	4543      	cmp	r3, r8
 8011cf6:	d006      	beq.n	8011d06 <__ieee754_rem_pio2+0x1ae>
 8011cf8:	4622      	mov	r2, r4
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	4630      	mov	r0, r6
 8011cfe:	4639      	mov	r1, r7
 8011d00:	f7ee fada 	bl	80002b8 <__aeabi_dsub>
 8011d04:	e00f      	b.n	8011d26 <__ieee754_rem_pio2+0x1ce>
 8011d06:	462b      	mov	r3, r5
 8011d08:	4622      	mov	r2, r4
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	4639      	mov	r1, r7
 8011d0e:	f7ee fad3 	bl	80002b8 <__aeabi_dsub>
 8011d12:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d16:	9303      	str	r3, [sp, #12]
 8011d18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011d20:	f1b8 0f10 	cmp.w	r8, #16
 8011d24:	dc02      	bgt.n	8011d2c <__ieee754_rem_pio2+0x1d4>
 8011d26:	e9ca 0100 	strd	r0, r1, [sl]
 8011d2a:	e039      	b.n	8011da0 <__ieee754_rem_pio2+0x248>
 8011d2c:	a34e      	add	r3, pc, #312	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x310>)
 8011d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d32:	ec51 0b18 	vmov	r0, r1, d8
 8011d36:	f7ee fc77 	bl	8000628 <__aeabi_dmul>
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	460d      	mov	r5, r1
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	4630      	mov	r0, r6
 8011d44:	4639      	mov	r1, r7
 8011d46:	f7ee fab7 	bl	80002b8 <__aeabi_dsub>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	4680      	mov	r8, r0
 8011d50:	4689      	mov	r9, r1
 8011d52:	4630      	mov	r0, r6
 8011d54:	4639      	mov	r1, r7
 8011d56:	f7ee faaf 	bl	80002b8 <__aeabi_dsub>
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	462b      	mov	r3, r5
 8011d5e:	f7ee faab 	bl	80002b8 <__aeabi_dsub>
 8011d62:	a343      	add	r3, pc, #268	; (adr r3, 8011e70 <__ieee754_rem_pio2+0x318>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	4604      	mov	r4, r0
 8011d6a:	460d      	mov	r5, r1
 8011d6c:	ec51 0b18 	vmov	r0, r1, d8
 8011d70:	f7ee fc5a 	bl	8000628 <__aeabi_dmul>
 8011d74:	4622      	mov	r2, r4
 8011d76:	462b      	mov	r3, r5
 8011d78:	f7ee fa9e 	bl	80002b8 <__aeabi_dsub>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	4604      	mov	r4, r0
 8011d82:	460d      	mov	r5, r1
 8011d84:	4640      	mov	r0, r8
 8011d86:	4649      	mov	r1, r9
 8011d88:	f7ee fa96 	bl	80002b8 <__aeabi_dsub>
 8011d8c:	9a03      	ldr	r2, [sp, #12]
 8011d8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	2b31      	cmp	r3, #49	; 0x31
 8011d96:	dc24      	bgt.n	8011de2 <__ieee754_rem_pio2+0x28a>
 8011d98:	e9ca 0100 	strd	r0, r1, [sl]
 8011d9c:	4646      	mov	r6, r8
 8011d9e:	464f      	mov	r7, r9
 8011da0:	e9da 8900 	ldrd	r8, r9, [sl]
 8011da4:	4630      	mov	r0, r6
 8011da6:	4642      	mov	r2, r8
 8011da8:	464b      	mov	r3, r9
 8011daa:	4639      	mov	r1, r7
 8011dac:	f7ee fa84 	bl	80002b8 <__aeabi_dsub>
 8011db0:	462b      	mov	r3, r5
 8011db2:	4622      	mov	r2, r4
 8011db4:	f7ee fa80 	bl	80002b8 <__aeabi_dsub>
 8011db8:	9b02      	ldr	r3, [sp, #8]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011dc0:	f6bf af0a 	bge.w	8011bd8 <__ieee754_rem_pio2+0x80>
 8011dc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011dc8:	f8ca 3004 	str.w	r3, [sl, #4]
 8011dcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dd0:	f8ca 8000 	str.w	r8, [sl]
 8011dd4:	f8ca 0008 	str.w	r0, [sl, #8]
 8011dd8:	f8ca 300c 	str.w	r3, [sl, #12]
 8011ddc:	f1cb 0b00 	rsb	fp, fp, #0
 8011de0:	e6fa      	b.n	8011bd8 <__ieee754_rem_pio2+0x80>
 8011de2:	a327      	add	r3, pc, #156	; (adr r3, 8011e80 <__ieee754_rem_pio2+0x328>)
 8011de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de8:	ec51 0b18 	vmov	r0, r1, d8
 8011dec:	f7ee fc1c 	bl	8000628 <__aeabi_dmul>
 8011df0:	4604      	mov	r4, r0
 8011df2:	460d      	mov	r5, r1
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	4640      	mov	r0, r8
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	f7ee fa5c 	bl	80002b8 <__aeabi_dsub>
 8011e00:	4602      	mov	r2, r0
 8011e02:	460b      	mov	r3, r1
 8011e04:	4606      	mov	r6, r0
 8011e06:	460f      	mov	r7, r1
 8011e08:	4640      	mov	r0, r8
 8011e0a:	4649      	mov	r1, r9
 8011e0c:	f7ee fa54 	bl	80002b8 <__aeabi_dsub>
 8011e10:	4622      	mov	r2, r4
 8011e12:	462b      	mov	r3, r5
 8011e14:	f7ee fa50 	bl	80002b8 <__aeabi_dsub>
 8011e18:	a31b      	add	r3, pc, #108	; (adr r3, 8011e88 <__ieee754_rem_pio2+0x330>)
 8011e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1e:	4604      	mov	r4, r0
 8011e20:	460d      	mov	r5, r1
 8011e22:	ec51 0b18 	vmov	r0, r1, d8
 8011e26:	f7ee fbff 	bl	8000628 <__aeabi_dmul>
 8011e2a:	4622      	mov	r2, r4
 8011e2c:	462b      	mov	r3, r5
 8011e2e:	f7ee fa43 	bl	80002b8 <__aeabi_dsub>
 8011e32:	4604      	mov	r4, r0
 8011e34:	460d      	mov	r5, r1
 8011e36:	e75f      	b.n	8011cf8 <__ieee754_rem_pio2+0x1a0>
 8011e38:	4b1b      	ldr	r3, [pc, #108]	; (8011ea8 <__ieee754_rem_pio2+0x350>)
 8011e3a:	4598      	cmp	r8, r3
 8011e3c:	dd36      	ble.n	8011eac <__ieee754_rem_pio2+0x354>
 8011e3e:	ee10 2a10 	vmov	r2, s0
 8011e42:	462b      	mov	r3, r5
 8011e44:	4620      	mov	r0, r4
 8011e46:	4629      	mov	r1, r5
 8011e48:	f7ee fa36 	bl	80002b8 <__aeabi_dsub>
 8011e4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e50:	e9ca 0100 	strd	r0, r1, [sl]
 8011e54:	e694      	b.n	8011b80 <__ieee754_rem_pio2+0x28>
 8011e56:	bf00      	nop
 8011e58:	54400000 	.word	0x54400000
 8011e5c:	3ff921fb 	.word	0x3ff921fb
 8011e60:	1a626331 	.word	0x1a626331
 8011e64:	3dd0b461 	.word	0x3dd0b461
 8011e68:	1a600000 	.word	0x1a600000
 8011e6c:	3dd0b461 	.word	0x3dd0b461
 8011e70:	2e037073 	.word	0x2e037073
 8011e74:	3ba3198a 	.word	0x3ba3198a
 8011e78:	6dc9c883 	.word	0x6dc9c883
 8011e7c:	3fe45f30 	.word	0x3fe45f30
 8011e80:	2e000000 	.word	0x2e000000
 8011e84:	3ba3198a 	.word	0x3ba3198a
 8011e88:	252049c1 	.word	0x252049c1
 8011e8c:	397b839a 	.word	0x397b839a
 8011e90:	3fe921fb 	.word	0x3fe921fb
 8011e94:	4002d97b 	.word	0x4002d97b
 8011e98:	3ff921fb 	.word	0x3ff921fb
 8011e9c:	413921fb 	.word	0x413921fb
 8011ea0:	3fe00000 	.word	0x3fe00000
 8011ea4:	08013b80 	.word	0x08013b80
 8011ea8:	7fefffff 	.word	0x7fefffff
 8011eac:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011eb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011eb4:	ee10 0a10 	vmov	r0, s0
 8011eb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011ebc:	ee10 6a10 	vmov	r6, s0
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	f7ee fe61 	bl	8000b88 <__aeabi_d2iz>
 8011ec6:	f7ee fb45 	bl	8000554 <__aeabi_i2d>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	460b      	mov	r3, r1
 8011ece:	4630      	mov	r0, r6
 8011ed0:	4639      	mov	r1, r7
 8011ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ed6:	f7ee f9ef 	bl	80002b8 <__aeabi_dsub>
 8011eda:	4b23      	ldr	r3, [pc, #140]	; (8011f68 <__ieee754_rem_pio2+0x410>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	f7ee fba3 	bl	8000628 <__aeabi_dmul>
 8011ee2:	460f      	mov	r7, r1
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	f7ee fe4f 	bl	8000b88 <__aeabi_d2iz>
 8011eea:	f7ee fb33 	bl	8000554 <__aeabi_i2d>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	4639      	mov	r1, r7
 8011ef6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011efa:	f7ee f9dd 	bl	80002b8 <__aeabi_dsub>
 8011efe:	4b1a      	ldr	r3, [pc, #104]	; (8011f68 <__ieee754_rem_pio2+0x410>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	f7ee fb91 	bl	8000628 <__aeabi_dmul>
 8011f06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f0a:	ad04      	add	r5, sp, #16
 8011f0c:	f04f 0803 	mov.w	r8, #3
 8011f10:	46a9      	mov	r9, r5
 8011f12:	2600      	movs	r6, #0
 8011f14:	2700      	movs	r7, #0
 8011f16:	4632      	mov	r2, r6
 8011f18:	463b      	mov	r3, r7
 8011f1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011f1e:	46c3      	mov	fp, r8
 8011f20:	3d08      	subs	r5, #8
 8011f22:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f26:	f7ee fde7 	bl	8000af8 <__aeabi_dcmpeq>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d1f3      	bne.n	8011f16 <__ieee754_rem_pio2+0x3be>
 8011f2e:	4b0f      	ldr	r3, [pc, #60]	; (8011f6c <__ieee754_rem_pio2+0x414>)
 8011f30:	9301      	str	r3, [sp, #4]
 8011f32:	2302      	movs	r3, #2
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	4622      	mov	r2, r4
 8011f38:	465b      	mov	r3, fp
 8011f3a:	4651      	mov	r1, sl
 8011f3c:	4648      	mov	r0, r9
 8011f3e:	f000 f993 	bl	8012268 <__kernel_rem_pio2>
 8011f42:	9b02      	ldr	r3, [sp, #8]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	4683      	mov	fp, r0
 8011f48:	f6bf ae46 	bge.w	8011bd8 <__ieee754_rem_pio2+0x80>
 8011f4c:	e9da 2100 	ldrd	r2, r1, [sl]
 8011f50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f54:	e9ca 2300 	strd	r2, r3, [sl]
 8011f58:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011f5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f60:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011f64:	e73a      	b.n	8011ddc <__ieee754_rem_pio2+0x284>
 8011f66:	bf00      	nop
 8011f68:	41700000 	.word	0x41700000
 8011f6c:	08013c00 	.word	0x08013c00

08011f70 <__ieee754_sqrt>:
 8011f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f74:	ec55 4b10 	vmov	r4, r5, d0
 8011f78:	4e55      	ldr	r6, [pc, #340]	; (80120d0 <__ieee754_sqrt+0x160>)
 8011f7a:	43ae      	bics	r6, r5
 8011f7c:	ee10 0a10 	vmov	r0, s0
 8011f80:	ee10 3a10 	vmov	r3, s0
 8011f84:	462a      	mov	r2, r5
 8011f86:	4629      	mov	r1, r5
 8011f88:	d110      	bne.n	8011fac <__ieee754_sqrt+0x3c>
 8011f8a:	ee10 2a10 	vmov	r2, s0
 8011f8e:	462b      	mov	r3, r5
 8011f90:	f7ee fb4a 	bl	8000628 <__aeabi_dmul>
 8011f94:	4602      	mov	r2, r0
 8011f96:	460b      	mov	r3, r1
 8011f98:	4620      	mov	r0, r4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	f7ee f98e 	bl	80002bc <__adddf3>
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	460d      	mov	r5, r1
 8011fa4:	ec45 4b10 	vmov	d0, r4, r5
 8011fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fac:	2d00      	cmp	r5, #0
 8011fae:	dc10      	bgt.n	8011fd2 <__ieee754_sqrt+0x62>
 8011fb0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011fb4:	4330      	orrs	r0, r6
 8011fb6:	d0f5      	beq.n	8011fa4 <__ieee754_sqrt+0x34>
 8011fb8:	b15d      	cbz	r5, 8011fd2 <__ieee754_sqrt+0x62>
 8011fba:	ee10 2a10 	vmov	r2, s0
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	ee10 0a10 	vmov	r0, s0
 8011fc4:	f7ee f978 	bl	80002b8 <__aeabi_dsub>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	460b      	mov	r3, r1
 8011fcc:	f7ee fc56 	bl	800087c <__aeabi_ddiv>
 8011fd0:	e7e6      	b.n	8011fa0 <__ieee754_sqrt+0x30>
 8011fd2:	1512      	asrs	r2, r2, #20
 8011fd4:	d074      	beq.n	80120c0 <__ieee754_sqrt+0x150>
 8011fd6:	07d4      	lsls	r4, r2, #31
 8011fd8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011fdc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011fe0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011fe4:	bf5e      	ittt	pl
 8011fe6:	0fda      	lsrpl	r2, r3, #31
 8011fe8:	005b      	lslpl	r3, r3, #1
 8011fea:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011fee:	2400      	movs	r4, #0
 8011ff0:	0fda      	lsrs	r2, r3, #31
 8011ff2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011ff6:	107f      	asrs	r7, r7, #1
 8011ff8:	005b      	lsls	r3, r3, #1
 8011ffa:	2516      	movs	r5, #22
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012002:	1886      	adds	r6, r0, r2
 8012004:	428e      	cmp	r6, r1
 8012006:	bfde      	ittt	le
 8012008:	1b89      	suble	r1, r1, r6
 801200a:	18b0      	addle	r0, r6, r2
 801200c:	18a4      	addle	r4, r4, r2
 801200e:	0049      	lsls	r1, r1, #1
 8012010:	3d01      	subs	r5, #1
 8012012:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012016:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801201a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801201e:	d1f0      	bne.n	8012002 <__ieee754_sqrt+0x92>
 8012020:	462a      	mov	r2, r5
 8012022:	f04f 0e20 	mov.w	lr, #32
 8012026:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801202a:	4281      	cmp	r1, r0
 801202c:	eb06 0c05 	add.w	ip, r6, r5
 8012030:	dc02      	bgt.n	8012038 <__ieee754_sqrt+0xc8>
 8012032:	d113      	bne.n	801205c <__ieee754_sqrt+0xec>
 8012034:	459c      	cmp	ip, r3
 8012036:	d811      	bhi.n	801205c <__ieee754_sqrt+0xec>
 8012038:	f1bc 0f00 	cmp.w	ip, #0
 801203c:	eb0c 0506 	add.w	r5, ip, r6
 8012040:	da43      	bge.n	80120ca <__ieee754_sqrt+0x15a>
 8012042:	2d00      	cmp	r5, #0
 8012044:	db41      	blt.n	80120ca <__ieee754_sqrt+0x15a>
 8012046:	f100 0801 	add.w	r8, r0, #1
 801204a:	1a09      	subs	r1, r1, r0
 801204c:	459c      	cmp	ip, r3
 801204e:	bf88      	it	hi
 8012050:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012054:	eba3 030c 	sub.w	r3, r3, ip
 8012058:	4432      	add	r2, r6
 801205a:	4640      	mov	r0, r8
 801205c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012060:	f1be 0e01 	subs.w	lr, lr, #1
 8012064:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012068:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801206c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012070:	d1db      	bne.n	801202a <__ieee754_sqrt+0xba>
 8012072:	430b      	orrs	r3, r1
 8012074:	d006      	beq.n	8012084 <__ieee754_sqrt+0x114>
 8012076:	1c50      	adds	r0, r2, #1
 8012078:	bf13      	iteet	ne
 801207a:	3201      	addne	r2, #1
 801207c:	3401      	addeq	r4, #1
 801207e:	4672      	moveq	r2, lr
 8012080:	f022 0201 	bicne.w	r2, r2, #1
 8012084:	1063      	asrs	r3, r4, #1
 8012086:	0852      	lsrs	r2, r2, #1
 8012088:	07e1      	lsls	r1, r4, #31
 801208a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801208e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012092:	bf48      	it	mi
 8012094:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012098:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801209c:	4614      	mov	r4, r2
 801209e:	e781      	b.n	8011fa4 <__ieee754_sqrt+0x34>
 80120a0:	0ad9      	lsrs	r1, r3, #11
 80120a2:	3815      	subs	r0, #21
 80120a4:	055b      	lsls	r3, r3, #21
 80120a6:	2900      	cmp	r1, #0
 80120a8:	d0fa      	beq.n	80120a0 <__ieee754_sqrt+0x130>
 80120aa:	02cd      	lsls	r5, r1, #11
 80120ac:	d50a      	bpl.n	80120c4 <__ieee754_sqrt+0x154>
 80120ae:	f1c2 0420 	rsb	r4, r2, #32
 80120b2:	fa23 f404 	lsr.w	r4, r3, r4
 80120b6:	1e55      	subs	r5, r2, #1
 80120b8:	4093      	lsls	r3, r2
 80120ba:	4321      	orrs	r1, r4
 80120bc:	1b42      	subs	r2, r0, r5
 80120be:	e78a      	b.n	8011fd6 <__ieee754_sqrt+0x66>
 80120c0:	4610      	mov	r0, r2
 80120c2:	e7f0      	b.n	80120a6 <__ieee754_sqrt+0x136>
 80120c4:	0049      	lsls	r1, r1, #1
 80120c6:	3201      	adds	r2, #1
 80120c8:	e7ef      	b.n	80120aa <__ieee754_sqrt+0x13a>
 80120ca:	4680      	mov	r8, r0
 80120cc:	e7bd      	b.n	801204a <__ieee754_sqrt+0xda>
 80120ce:	bf00      	nop
 80120d0:	7ff00000 	.word	0x7ff00000
 80120d4:	00000000 	.word	0x00000000

080120d8 <__kernel_cos>:
 80120d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	ec57 6b10 	vmov	r6, r7, d0
 80120e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80120e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80120e8:	ed8d 1b00 	vstr	d1, [sp]
 80120ec:	da07      	bge.n	80120fe <__kernel_cos+0x26>
 80120ee:	ee10 0a10 	vmov	r0, s0
 80120f2:	4639      	mov	r1, r7
 80120f4:	f7ee fd48 	bl	8000b88 <__aeabi_d2iz>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	f000 8088 	beq.w	801220e <__kernel_cos+0x136>
 80120fe:	4632      	mov	r2, r6
 8012100:	463b      	mov	r3, r7
 8012102:	4630      	mov	r0, r6
 8012104:	4639      	mov	r1, r7
 8012106:	f7ee fa8f 	bl	8000628 <__aeabi_dmul>
 801210a:	4b51      	ldr	r3, [pc, #324]	; (8012250 <__kernel_cos+0x178>)
 801210c:	2200      	movs	r2, #0
 801210e:	4604      	mov	r4, r0
 8012110:	460d      	mov	r5, r1
 8012112:	f7ee fa89 	bl	8000628 <__aeabi_dmul>
 8012116:	a340      	add	r3, pc, #256	; (adr r3, 8012218 <__kernel_cos+0x140>)
 8012118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211c:	4682      	mov	sl, r0
 801211e:	468b      	mov	fp, r1
 8012120:	4620      	mov	r0, r4
 8012122:	4629      	mov	r1, r5
 8012124:	f7ee fa80 	bl	8000628 <__aeabi_dmul>
 8012128:	a33d      	add	r3, pc, #244	; (adr r3, 8012220 <__kernel_cos+0x148>)
 801212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212e:	f7ee f8c5 	bl	80002bc <__adddf3>
 8012132:	4622      	mov	r2, r4
 8012134:	462b      	mov	r3, r5
 8012136:	f7ee fa77 	bl	8000628 <__aeabi_dmul>
 801213a:	a33b      	add	r3, pc, #236	; (adr r3, 8012228 <__kernel_cos+0x150>)
 801213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012140:	f7ee f8ba 	bl	80002b8 <__aeabi_dsub>
 8012144:	4622      	mov	r2, r4
 8012146:	462b      	mov	r3, r5
 8012148:	f7ee fa6e 	bl	8000628 <__aeabi_dmul>
 801214c:	a338      	add	r3, pc, #224	; (adr r3, 8012230 <__kernel_cos+0x158>)
 801214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012152:	f7ee f8b3 	bl	80002bc <__adddf3>
 8012156:	4622      	mov	r2, r4
 8012158:	462b      	mov	r3, r5
 801215a:	f7ee fa65 	bl	8000628 <__aeabi_dmul>
 801215e:	a336      	add	r3, pc, #216	; (adr r3, 8012238 <__kernel_cos+0x160>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee f8a8 	bl	80002b8 <__aeabi_dsub>
 8012168:	4622      	mov	r2, r4
 801216a:	462b      	mov	r3, r5
 801216c:	f7ee fa5c 	bl	8000628 <__aeabi_dmul>
 8012170:	a333      	add	r3, pc, #204	; (adr r3, 8012240 <__kernel_cos+0x168>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	f7ee f8a1 	bl	80002bc <__adddf3>
 801217a:	4622      	mov	r2, r4
 801217c:	462b      	mov	r3, r5
 801217e:	f7ee fa53 	bl	8000628 <__aeabi_dmul>
 8012182:	4622      	mov	r2, r4
 8012184:	462b      	mov	r3, r5
 8012186:	f7ee fa4f 	bl	8000628 <__aeabi_dmul>
 801218a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801218e:	4604      	mov	r4, r0
 8012190:	460d      	mov	r5, r1
 8012192:	4630      	mov	r0, r6
 8012194:	4639      	mov	r1, r7
 8012196:	f7ee fa47 	bl	8000628 <__aeabi_dmul>
 801219a:	460b      	mov	r3, r1
 801219c:	4602      	mov	r2, r0
 801219e:	4629      	mov	r1, r5
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ee f889 	bl	80002b8 <__aeabi_dsub>
 80121a6:	4b2b      	ldr	r3, [pc, #172]	; (8012254 <__kernel_cos+0x17c>)
 80121a8:	4598      	cmp	r8, r3
 80121aa:	4606      	mov	r6, r0
 80121ac:	460f      	mov	r7, r1
 80121ae:	dc10      	bgt.n	80121d2 <__kernel_cos+0xfa>
 80121b0:	4602      	mov	r2, r0
 80121b2:	460b      	mov	r3, r1
 80121b4:	4650      	mov	r0, sl
 80121b6:	4659      	mov	r1, fp
 80121b8:	f7ee f87e 	bl	80002b8 <__aeabi_dsub>
 80121bc:	460b      	mov	r3, r1
 80121be:	4926      	ldr	r1, [pc, #152]	; (8012258 <__kernel_cos+0x180>)
 80121c0:	4602      	mov	r2, r0
 80121c2:	2000      	movs	r0, #0
 80121c4:	f7ee f878 	bl	80002b8 <__aeabi_dsub>
 80121c8:	ec41 0b10 	vmov	d0, r0, r1
 80121cc:	b003      	add	sp, #12
 80121ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d2:	4b22      	ldr	r3, [pc, #136]	; (801225c <__kernel_cos+0x184>)
 80121d4:	4920      	ldr	r1, [pc, #128]	; (8012258 <__kernel_cos+0x180>)
 80121d6:	4598      	cmp	r8, r3
 80121d8:	bfcc      	ite	gt
 80121da:	4d21      	ldrgt	r5, [pc, #132]	; (8012260 <__kernel_cos+0x188>)
 80121dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80121e0:	2400      	movs	r4, #0
 80121e2:	4622      	mov	r2, r4
 80121e4:	462b      	mov	r3, r5
 80121e6:	2000      	movs	r0, #0
 80121e8:	f7ee f866 	bl	80002b8 <__aeabi_dsub>
 80121ec:	4622      	mov	r2, r4
 80121ee:	4680      	mov	r8, r0
 80121f0:	4689      	mov	r9, r1
 80121f2:	462b      	mov	r3, r5
 80121f4:	4650      	mov	r0, sl
 80121f6:	4659      	mov	r1, fp
 80121f8:	f7ee f85e 	bl	80002b8 <__aeabi_dsub>
 80121fc:	4632      	mov	r2, r6
 80121fe:	463b      	mov	r3, r7
 8012200:	f7ee f85a 	bl	80002b8 <__aeabi_dsub>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	4640      	mov	r0, r8
 801220a:	4649      	mov	r1, r9
 801220c:	e7da      	b.n	80121c4 <__kernel_cos+0xec>
 801220e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012248 <__kernel_cos+0x170>
 8012212:	e7db      	b.n	80121cc <__kernel_cos+0xf4>
 8012214:	f3af 8000 	nop.w
 8012218:	be8838d4 	.word	0xbe8838d4
 801221c:	bda8fae9 	.word	0xbda8fae9
 8012220:	bdb4b1c4 	.word	0xbdb4b1c4
 8012224:	3e21ee9e 	.word	0x3e21ee9e
 8012228:	809c52ad 	.word	0x809c52ad
 801222c:	3e927e4f 	.word	0x3e927e4f
 8012230:	19cb1590 	.word	0x19cb1590
 8012234:	3efa01a0 	.word	0x3efa01a0
 8012238:	16c15177 	.word	0x16c15177
 801223c:	3f56c16c 	.word	0x3f56c16c
 8012240:	5555554c 	.word	0x5555554c
 8012244:	3fa55555 	.word	0x3fa55555
 8012248:	00000000 	.word	0x00000000
 801224c:	3ff00000 	.word	0x3ff00000
 8012250:	3fe00000 	.word	0x3fe00000
 8012254:	3fd33332 	.word	0x3fd33332
 8012258:	3ff00000 	.word	0x3ff00000
 801225c:	3fe90000 	.word	0x3fe90000
 8012260:	3fd20000 	.word	0x3fd20000
 8012264:	00000000 	.word	0x00000000

08012268 <__kernel_rem_pio2>:
 8012268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226c:	ed2d 8b02 	vpush	{d8}
 8012270:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012274:	f112 0f14 	cmn.w	r2, #20
 8012278:	9308      	str	r3, [sp, #32]
 801227a:	9101      	str	r1, [sp, #4]
 801227c:	4bc4      	ldr	r3, [pc, #784]	; (8012590 <__kernel_rem_pio2+0x328>)
 801227e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012280:	900b      	str	r0, [sp, #44]	; 0x2c
 8012282:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012286:	9302      	str	r3, [sp, #8]
 8012288:	9b08      	ldr	r3, [sp, #32]
 801228a:	f103 33ff 	add.w	r3, r3, #4294967295
 801228e:	bfa8      	it	ge
 8012290:	1ed4      	subge	r4, r2, #3
 8012292:	9306      	str	r3, [sp, #24]
 8012294:	bfb2      	itee	lt
 8012296:	2400      	movlt	r4, #0
 8012298:	2318      	movge	r3, #24
 801229a:	fb94 f4f3 	sdivge	r4, r4, r3
 801229e:	f06f 0317 	mvn.w	r3, #23
 80122a2:	fb04 3303 	mla	r3, r4, r3, r3
 80122a6:	eb03 0a02 	add.w	sl, r3, r2
 80122aa:	9b02      	ldr	r3, [sp, #8]
 80122ac:	9a06      	ldr	r2, [sp, #24]
 80122ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012580 <__kernel_rem_pio2+0x318>
 80122b2:	eb03 0802 	add.w	r8, r3, r2
 80122b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80122b8:	1aa7      	subs	r7, r4, r2
 80122ba:	ae22      	add	r6, sp, #136	; 0x88
 80122bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80122c0:	2500      	movs	r5, #0
 80122c2:	4545      	cmp	r5, r8
 80122c4:	dd13      	ble.n	80122ee <__kernel_rem_pio2+0x86>
 80122c6:	9b08      	ldr	r3, [sp, #32]
 80122c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012580 <__kernel_rem_pio2+0x318>
 80122cc:	aa22      	add	r2, sp, #136	; 0x88
 80122ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80122d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80122d6:	f04f 0800 	mov.w	r8, #0
 80122da:	9b02      	ldr	r3, [sp, #8]
 80122dc:	4598      	cmp	r8, r3
 80122de:	dc2f      	bgt.n	8012340 <__kernel_rem_pio2+0xd8>
 80122e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80122e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80122e8:	462f      	mov	r7, r5
 80122ea:	2600      	movs	r6, #0
 80122ec:	e01b      	b.n	8012326 <__kernel_rem_pio2+0xbe>
 80122ee:	42ef      	cmn	r7, r5
 80122f0:	d407      	bmi.n	8012302 <__kernel_rem_pio2+0x9a>
 80122f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80122f6:	f7ee f92d 	bl	8000554 <__aeabi_i2d>
 80122fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80122fe:	3501      	adds	r5, #1
 8012300:	e7df      	b.n	80122c2 <__kernel_rem_pio2+0x5a>
 8012302:	ec51 0b18 	vmov	r0, r1, d8
 8012306:	e7f8      	b.n	80122fa <__kernel_rem_pio2+0x92>
 8012308:	e9d7 2300 	ldrd	r2, r3, [r7]
 801230c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012310:	f7ee f98a 	bl	8000628 <__aeabi_dmul>
 8012314:	4602      	mov	r2, r0
 8012316:	460b      	mov	r3, r1
 8012318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801231c:	f7ed ffce 	bl	80002bc <__adddf3>
 8012320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012324:	3601      	adds	r6, #1
 8012326:	9b06      	ldr	r3, [sp, #24]
 8012328:	429e      	cmp	r6, r3
 801232a:	f1a7 0708 	sub.w	r7, r7, #8
 801232e:	ddeb      	ble.n	8012308 <__kernel_rem_pio2+0xa0>
 8012330:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012334:	f108 0801 	add.w	r8, r8, #1
 8012338:	ecab 7b02 	vstmia	fp!, {d7}
 801233c:	3508      	adds	r5, #8
 801233e:	e7cc      	b.n	80122da <__kernel_rem_pio2+0x72>
 8012340:	9b02      	ldr	r3, [sp, #8]
 8012342:	aa0e      	add	r2, sp, #56	; 0x38
 8012344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012348:	930d      	str	r3, [sp, #52]	; 0x34
 801234a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801234c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012350:	9c02      	ldr	r4, [sp, #8]
 8012352:	930c      	str	r3, [sp, #48]	; 0x30
 8012354:	00e3      	lsls	r3, r4, #3
 8012356:	930a      	str	r3, [sp, #40]	; 0x28
 8012358:	ab9a      	add	r3, sp, #616	; 0x268
 801235a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801235e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012362:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012366:	ab72      	add	r3, sp, #456	; 0x1c8
 8012368:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801236c:	46c3      	mov	fp, r8
 801236e:	46a1      	mov	r9, r4
 8012370:	f1b9 0f00 	cmp.w	r9, #0
 8012374:	f1a5 0508 	sub.w	r5, r5, #8
 8012378:	dc77      	bgt.n	801246a <__kernel_rem_pio2+0x202>
 801237a:	ec47 6b10 	vmov	d0, r6, r7
 801237e:	4650      	mov	r0, sl
 8012380:	f000 fdee 	bl	8012f60 <scalbn>
 8012384:	ec57 6b10 	vmov	r6, r7, d0
 8012388:	2200      	movs	r2, #0
 801238a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801238e:	ee10 0a10 	vmov	r0, s0
 8012392:	4639      	mov	r1, r7
 8012394:	f7ee f948 	bl	8000628 <__aeabi_dmul>
 8012398:	ec41 0b10 	vmov	d0, r0, r1
 801239c:	f000 fd58 	bl	8012e50 <floor>
 80123a0:	4b7c      	ldr	r3, [pc, #496]	; (8012594 <__kernel_rem_pio2+0x32c>)
 80123a2:	ec51 0b10 	vmov	r0, r1, d0
 80123a6:	2200      	movs	r2, #0
 80123a8:	f7ee f93e 	bl	8000628 <__aeabi_dmul>
 80123ac:	4602      	mov	r2, r0
 80123ae:	460b      	mov	r3, r1
 80123b0:	4630      	mov	r0, r6
 80123b2:	4639      	mov	r1, r7
 80123b4:	f7ed ff80 	bl	80002b8 <__aeabi_dsub>
 80123b8:	460f      	mov	r7, r1
 80123ba:	4606      	mov	r6, r0
 80123bc:	f7ee fbe4 	bl	8000b88 <__aeabi_d2iz>
 80123c0:	9004      	str	r0, [sp, #16]
 80123c2:	f7ee f8c7 	bl	8000554 <__aeabi_i2d>
 80123c6:	4602      	mov	r2, r0
 80123c8:	460b      	mov	r3, r1
 80123ca:	4630      	mov	r0, r6
 80123cc:	4639      	mov	r1, r7
 80123ce:	f7ed ff73 	bl	80002b8 <__aeabi_dsub>
 80123d2:	f1ba 0f00 	cmp.w	sl, #0
 80123d6:	4606      	mov	r6, r0
 80123d8:	460f      	mov	r7, r1
 80123da:	dd6d      	ble.n	80124b8 <__kernel_rem_pio2+0x250>
 80123dc:	1e62      	subs	r2, r4, #1
 80123de:	ab0e      	add	r3, sp, #56	; 0x38
 80123e0:	9d04      	ldr	r5, [sp, #16]
 80123e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80123e6:	f1ca 0118 	rsb	r1, sl, #24
 80123ea:	fa40 f301 	asr.w	r3, r0, r1
 80123ee:	441d      	add	r5, r3
 80123f0:	408b      	lsls	r3, r1
 80123f2:	1ac0      	subs	r0, r0, r3
 80123f4:	ab0e      	add	r3, sp, #56	; 0x38
 80123f6:	9504      	str	r5, [sp, #16]
 80123f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80123fc:	f1ca 0317 	rsb	r3, sl, #23
 8012400:	fa40 fb03 	asr.w	fp, r0, r3
 8012404:	f1bb 0f00 	cmp.w	fp, #0
 8012408:	dd65      	ble.n	80124d6 <__kernel_rem_pio2+0x26e>
 801240a:	9b04      	ldr	r3, [sp, #16]
 801240c:	2200      	movs	r2, #0
 801240e:	3301      	adds	r3, #1
 8012410:	9304      	str	r3, [sp, #16]
 8012412:	4615      	mov	r5, r2
 8012414:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012418:	4294      	cmp	r4, r2
 801241a:	f300 809c 	bgt.w	8012556 <__kernel_rem_pio2+0x2ee>
 801241e:	f1ba 0f00 	cmp.w	sl, #0
 8012422:	dd07      	ble.n	8012434 <__kernel_rem_pio2+0x1cc>
 8012424:	f1ba 0f01 	cmp.w	sl, #1
 8012428:	f000 80c0 	beq.w	80125ac <__kernel_rem_pio2+0x344>
 801242c:	f1ba 0f02 	cmp.w	sl, #2
 8012430:	f000 80c6 	beq.w	80125c0 <__kernel_rem_pio2+0x358>
 8012434:	f1bb 0f02 	cmp.w	fp, #2
 8012438:	d14d      	bne.n	80124d6 <__kernel_rem_pio2+0x26e>
 801243a:	4632      	mov	r2, r6
 801243c:	463b      	mov	r3, r7
 801243e:	4956      	ldr	r1, [pc, #344]	; (8012598 <__kernel_rem_pio2+0x330>)
 8012440:	2000      	movs	r0, #0
 8012442:	f7ed ff39 	bl	80002b8 <__aeabi_dsub>
 8012446:	4606      	mov	r6, r0
 8012448:	460f      	mov	r7, r1
 801244a:	2d00      	cmp	r5, #0
 801244c:	d043      	beq.n	80124d6 <__kernel_rem_pio2+0x26e>
 801244e:	4650      	mov	r0, sl
 8012450:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012588 <__kernel_rem_pio2+0x320>
 8012454:	f000 fd84 	bl	8012f60 <scalbn>
 8012458:	4630      	mov	r0, r6
 801245a:	4639      	mov	r1, r7
 801245c:	ec53 2b10 	vmov	r2, r3, d0
 8012460:	f7ed ff2a 	bl	80002b8 <__aeabi_dsub>
 8012464:	4606      	mov	r6, r0
 8012466:	460f      	mov	r7, r1
 8012468:	e035      	b.n	80124d6 <__kernel_rem_pio2+0x26e>
 801246a:	4b4c      	ldr	r3, [pc, #304]	; (801259c <__kernel_rem_pio2+0x334>)
 801246c:	2200      	movs	r2, #0
 801246e:	4630      	mov	r0, r6
 8012470:	4639      	mov	r1, r7
 8012472:	f7ee f8d9 	bl	8000628 <__aeabi_dmul>
 8012476:	f7ee fb87 	bl	8000b88 <__aeabi_d2iz>
 801247a:	f7ee f86b 	bl	8000554 <__aeabi_i2d>
 801247e:	4602      	mov	r2, r0
 8012480:	460b      	mov	r3, r1
 8012482:	ec43 2b18 	vmov	d8, r2, r3
 8012486:	4b46      	ldr	r3, [pc, #280]	; (80125a0 <__kernel_rem_pio2+0x338>)
 8012488:	2200      	movs	r2, #0
 801248a:	f7ee f8cd 	bl	8000628 <__aeabi_dmul>
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4630      	mov	r0, r6
 8012494:	4639      	mov	r1, r7
 8012496:	f7ed ff0f 	bl	80002b8 <__aeabi_dsub>
 801249a:	f7ee fb75 	bl	8000b88 <__aeabi_d2iz>
 801249e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124a2:	f84b 0b04 	str.w	r0, [fp], #4
 80124a6:	ec51 0b18 	vmov	r0, r1, d8
 80124aa:	f7ed ff07 	bl	80002bc <__adddf3>
 80124ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	e75b      	b.n	8012370 <__kernel_rem_pio2+0x108>
 80124b8:	d106      	bne.n	80124c8 <__kernel_rem_pio2+0x260>
 80124ba:	1e63      	subs	r3, r4, #1
 80124bc:	aa0e      	add	r2, sp, #56	; 0x38
 80124be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80124c2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80124c6:	e79d      	b.n	8012404 <__kernel_rem_pio2+0x19c>
 80124c8:	4b36      	ldr	r3, [pc, #216]	; (80125a4 <__kernel_rem_pio2+0x33c>)
 80124ca:	2200      	movs	r2, #0
 80124cc:	f7ee fb32 	bl	8000b34 <__aeabi_dcmpge>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d13d      	bne.n	8012550 <__kernel_rem_pio2+0x2e8>
 80124d4:	4683      	mov	fp, r0
 80124d6:	2200      	movs	r2, #0
 80124d8:	2300      	movs	r3, #0
 80124da:	4630      	mov	r0, r6
 80124dc:	4639      	mov	r1, r7
 80124de:	f7ee fb0b 	bl	8000af8 <__aeabi_dcmpeq>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	f000 80c0 	beq.w	8012668 <__kernel_rem_pio2+0x400>
 80124e8:	1e65      	subs	r5, r4, #1
 80124ea:	462b      	mov	r3, r5
 80124ec:	2200      	movs	r2, #0
 80124ee:	9902      	ldr	r1, [sp, #8]
 80124f0:	428b      	cmp	r3, r1
 80124f2:	da6c      	bge.n	80125ce <__kernel_rem_pio2+0x366>
 80124f4:	2a00      	cmp	r2, #0
 80124f6:	f000 8089 	beq.w	801260c <__kernel_rem_pio2+0x3a4>
 80124fa:	ab0e      	add	r3, sp, #56	; 0x38
 80124fc:	f1aa 0a18 	sub.w	sl, sl, #24
 8012500:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 80ad 	beq.w	8012664 <__kernel_rem_pio2+0x3fc>
 801250a:	4650      	mov	r0, sl
 801250c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012588 <__kernel_rem_pio2+0x320>
 8012510:	f000 fd26 	bl	8012f60 <scalbn>
 8012514:	ab9a      	add	r3, sp, #616	; 0x268
 8012516:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801251a:	ec57 6b10 	vmov	r6, r7, d0
 801251e:	00ec      	lsls	r4, r5, #3
 8012520:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012524:	46aa      	mov	sl, r5
 8012526:	f1ba 0f00 	cmp.w	sl, #0
 801252a:	f280 80d6 	bge.w	80126da <__kernel_rem_pio2+0x472>
 801252e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012580 <__kernel_rem_pio2+0x318>
 8012532:	462e      	mov	r6, r5
 8012534:	2e00      	cmp	r6, #0
 8012536:	f2c0 8104 	blt.w	8012742 <__kernel_rem_pio2+0x4da>
 801253a:	ab72      	add	r3, sp, #456	; 0x1c8
 801253c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012540:	f8df a064 	ldr.w	sl, [pc, #100]	; 80125a8 <__kernel_rem_pio2+0x340>
 8012544:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012548:	f04f 0800 	mov.w	r8, #0
 801254c:	1baf      	subs	r7, r5, r6
 801254e:	e0ea      	b.n	8012726 <__kernel_rem_pio2+0x4be>
 8012550:	f04f 0b02 	mov.w	fp, #2
 8012554:	e759      	b.n	801240a <__kernel_rem_pio2+0x1a2>
 8012556:	f8d8 3000 	ldr.w	r3, [r8]
 801255a:	b955      	cbnz	r5, 8012572 <__kernel_rem_pio2+0x30a>
 801255c:	b123      	cbz	r3, 8012568 <__kernel_rem_pio2+0x300>
 801255e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012562:	f8c8 3000 	str.w	r3, [r8]
 8012566:	2301      	movs	r3, #1
 8012568:	3201      	adds	r2, #1
 801256a:	f108 0804 	add.w	r8, r8, #4
 801256e:	461d      	mov	r5, r3
 8012570:	e752      	b.n	8012418 <__kernel_rem_pio2+0x1b0>
 8012572:	1acb      	subs	r3, r1, r3
 8012574:	f8c8 3000 	str.w	r3, [r8]
 8012578:	462b      	mov	r3, r5
 801257a:	e7f5      	b.n	8012568 <__kernel_rem_pio2+0x300>
 801257c:	f3af 8000 	nop.w
	...
 801258c:	3ff00000 	.word	0x3ff00000
 8012590:	08013d48 	.word	0x08013d48
 8012594:	40200000 	.word	0x40200000
 8012598:	3ff00000 	.word	0x3ff00000
 801259c:	3e700000 	.word	0x3e700000
 80125a0:	41700000 	.word	0x41700000
 80125a4:	3fe00000 	.word	0x3fe00000
 80125a8:	08013d08 	.word	0x08013d08
 80125ac:	1e62      	subs	r2, r4, #1
 80125ae:	ab0e      	add	r3, sp, #56	; 0x38
 80125b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80125b8:	a90e      	add	r1, sp, #56	; 0x38
 80125ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80125be:	e739      	b.n	8012434 <__kernel_rem_pio2+0x1cc>
 80125c0:	1e62      	subs	r2, r4, #1
 80125c2:	ab0e      	add	r3, sp, #56	; 0x38
 80125c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80125cc:	e7f4      	b.n	80125b8 <__kernel_rem_pio2+0x350>
 80125ce:	a90e      	add	r1, sp, #56	; 0x38
 80125d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80125d4:	3b01      	subs	r3, #1
 80125d6:	430a      	orrs	r2, r1
 80125d8:	e789      	b.n	80124ee <__kernel_rem_pio2+0x286>
 80125da:	3301      	adds	r3, #1
 80125dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80125e0:	2900      	cmp	r1, #0
 80125e2:	d0fa      	beq.n	80125da <__kernel_rem_pio2+0x372>
 80125e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125e6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80125ea:	446a      	add	r2, sp
 80125ec:	3a98      	subs	r2, #152	; 0x98
 80125ee:	920a      	str	r2, [sp, #40]	; 0x28
 80125f0:	9a08      	ldr	r2, [sp, #32]
 80125f2:	18e3      	adds	r3, r4, r3
 80125f4:	18a5      	adds	r5, r4, r2
 80125f6:	aa22      	add	r2, sp, #136	; 0x88
 80125f8:	f104 0801 	add.w	r8, r4, #1
 80125fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012600:	9304      	str	r3, [sp, #16]
 8012602:	9b04      	ldr	r3, [sp, #16]
 8012604:	4543      	cmp	r3, r8
 8012606:	da04      	bge.n	8012612 <__kernel_rem_pio2+0x3aa>
 8012608:	461c      	mov	r4, r3
 801260a:	e6a3      	b.n	8012354 <__kernel_rem_pio2+0xec>
 801260c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801260e:	2301      	movs	r3, #1
 8012610:	e7e4      	b.n	80125dc <__kernel_rem_pio2+0x374>
 8012612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012614:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012618:	f7ed ff9c 	bl	8000554 <__aeabi_i2d>
 801261c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012622:	46ab      	mov	fp, r5
 8012624:	461c      	mov	r4, r3
 8012626:	f04f 0900 	mov.w	r9, #0
 801262a:	2600      	movs	r6, #0
 801262c:	2700      	movs	r7, #0
 801262e:	9b06      	ldr	r3, [sp, #24]
 8012630:	4599      	cmp	r9, r3
 8012632:	dd06      	ble.n	8012642 <__kernel_rem_pio2+0x3da>
 8012634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012636:	e8e3 6702 	strd	r6, r7, [r3], #8
 801263a:	f108 0801 	add.w	r8, r8, #1
 801263e:	930a      	str	r3, [sp, #40]	; 0x28
 8012640:	e7df      	b.n	8012602 <__kernel_rem_pio2+0x39a>
 8012642:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012646:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801264a:	f7ed ffed 	bl	8000628 <__aeabi_dmul>
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
 8012652:	4630      	mov	r0, r6
 8012654:	4639      	mov	r1, r7
 8012656:	f7ed fe31 	bl	80002bc <__adddf3>
 801265a:	f109 0901 	add.w	r9, r9, #1
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	e7e4      	b.n	801262e <__kernel_rem_pio2+0x3c6>
 8012664:	3d01      	subs	r5, #1
 8012666:	e748      	b.n	80124fa <__kernel_rem_pio2+0x292>
 8012668:	ec47 6b10 	vmov	d0, r6, r7
 801266c:	f1ca 0000 	rsb	r0, sl, #0
 8012670:	f000 fc76 	bl	8012f60 <scalbn>
 8012674:	ec57 6b10 	vmov	r6, r7, d0
 8012678:	4ba0      	ldr	r3, [pc, #640]	; (80128fc <__kernel_rem_pio2+0x694>)
 801267a:	ee10 0a10 	vmov	r0, s0
 801267e:	2200      	movs	r2, #0
 8012680:	4639      	mov	r1, r7
 8012682:	f7ee fa57 	bl	8000b34 <__aeabi_dcmpge>
 8012686:	b1f8      	cbz	r0, 80126c8 <__kernel_rem_pio2+0x460>
 8012688:	4b9d      	ldr	r3, [pc, #628]	; (8012900 <__kernel_rem_pio2+0x698>)
 801268a:	2200      	movs	r2, #0
 801268c:	4630      	mov	r0, r6
 801268e:	4639      	mov	r1, r7
 8012690:	f7ed ffca 	bl	8000628 <__aeabi_dmul>
 8012694:	f7ee fa78 	bl	8000b88 <__aeabi_d2iz>
 8012698:	4680      	mov	r8, r0
 801269a:	f7ed ff5b 	bl	8000554 <__aeabi_i2d>
 801269e:	4b97      	ldr	r3, [pc, #604]	; (80128fc <__kernel_rem_pio2+0x694>)
 80126a0:	2200      	movs	r2, #0
 80126a2:	f7ed ffc1 	bl	8000628 <__aeabi_dmul>
 80126a6:	460b      	mov	r3, r1
 80126a8:	4602      	mov	r2, r0
 80126aa:	4639      	mov	r1, r7
 80126ac:	4630      	mov	r0, r6
 80126ae:	f7ed fe03 	bl	80002b8 <__aeabi_dsub>
 80126b2:	f7ee fa69 	bl	8000b88 <__aeabi_d2iz>
 80126b6:	1c65      	adds	r5, r4, #1
 80126b8:	ab0e      	add	r3, sp, #56	; 0x38
 80126ba:	f10a 0a18 	add.w	sl, sl, #24
 80126be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80126c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80126c6:	e720      	b.n	801250a <__kernel_rem_pio2+0x2a2>
 80126c8:	4630      	mov	r0, r6
 80126ca:	4639      	mov	r1, r7
 80126cc:	f7ee fa5c 	bl	8000b88 <__aeabi_d2iz>
 80126d0:	ab0e      	add	r3, sp, #56	; 0x38
 80126d2:	4625      	mov	r5, r4
 80126d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80126d8:	e717      	b.n	801250a <__kernel_rem_pio2+0x2a2>
 80126da:	ab0e      	add	r3, sp, #56	; 0x38
 80126dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80126e0:	f7ed ff38 	bl	8000554 <__aeabi_i2d>
 80126e4:	4632      	mov	r2, r6
 80126e6:	463b      	mov	r3, r7
 80126e8:	f7ed ff9e 	bl	8000628 <__aeabi_dmul>
 80126ec:	4b84      	ldr	r3, [pc, #528]	; (8012900 <__kernel_rem_pio2+0x698>)
 80126ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80126f2:	2200      	movs	r2, #0
 80126f4:	4630      	mov	r0, r6
 80126f6:	4639      	mov	r1, r7
 80126f8:	f7ed ff96 	bl	8000628 <__aeabi_dmul>
 80126fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012700:	4606      	mov	r6, r0
 8012702:	460f      	mov	r7, r1
 8012704:	e70f      	b.n	8012526 <__kernel_rem_pio2+0x2be>
 8012706:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801270a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801270e:	f7ed ff8b 	bl	8000628 <__aeabi_dmul>
 8012712:	4602      	mov	r2, r0
 8012714:	460b      	mov	r3, r1
 8012716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801271a:	f7ed fdcf 	bl	80002bc <__adddf3>
 801271e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012722:	f108 0801 	add.w	r8, r8, #1
 8012726:	9b02      	ldr	r3, [sp, #8]
 8012728:	4598      	cmp	r8, r3
 801272a:	dc01      	bgt.n	8012730 <__kernel_rem_pio2+0x4c8>
 801272c:	45b8      	cmp	r8, r7
 801272e:	ddea      	ble.n	8012706 <__kernel_rem_pio2+0x49e>
 8012730:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012734:	ab4a      	add	r3, sp, #296	; 0x128
 8012736:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801273a:	ed87 7b00 	vstr	d7, [r7]
 801273e:	3e01      	subs	r6, #1
 8012740:	e6f8      	b.n	8012534 <__kernel_rem_pio2+0x2cc>
 8012742:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012744:	2b02      	cmp	r3, #2
 8012746:	dc0b      	bgt.n	8012760 <__kernel_rem_pio2+0x4f8>
 8012748:	2b00      	cmp	r3, #0
 801274a:	dc35      	bgt.n	80127b8 <__kernel_rem_pio2+0x550>
 801274c:	d059      	beq.n	8012802 <__kernel_rem_pio2+0x59a>
 801274e:	9b04      	ldr	r3, [sp, #16]
 8012750:	f003 0007 	and.w	r0, r3, #7
 8012754:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012758:	ecbd 8b02 	vpop	{d8}
 801275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012760:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012762:	2b03      	cmp	r3, #3
 8012764:	d1f3      	bne.n	801274e <__kernel_rem_pio2+0x4e6>
 8012766:	ab4a      	add	r3, sp, #296	; 0x128
 8012768:	4423      	add	r3, r4
 801276a:	9306      	str	r3, [sp, #24]
 801276c:	461c      	mov	r4, r3
 801276e:	469a      	mov	sl, r3
 8012770:	9502      	str	r5, [sp, #8]
 8012772:	9b02      	ldr	r3, [sp, #8]
 8012774:	2b00      	cmp	r3, #0
 8012776:	f1aa 0a08 	sub.w	sl, sl, #8
 801277a:	dc6b      	bgt.n	8012854 <__kernel_rem_pio2+0x5ec>
 801277c:	46aa      	mov	sl, r5
 801277e:	f1ba 0f01 	cmp.w	sl, #1
 8012782:	f1a4 0408 	sub.w	r4, r4, #8
 8012786:	f300 8085 	bgt.w	8012894 <__kernel_rem_pio2+0x62c>
 801278a:	9c06      	ldr	r4, [sp, #24]
 801278c:	2000      	movs	r0, #0
 801278e:	3408      	adds	r4, #8
 8012790:	2100      	movs	r1, #0
 8012792:	2d01      	cmp	r5, #1
 8012794:	f300 809d 	bgt.w	80128d2 <__kernel_rem_pio2+0x66a>
 8012798:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801279c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80127a0:	f1bb 0f00 	cmp.w	fp, #0
 80127a4:	f040 809b 	bne.w	80128de <__kernel_rem_pio2+0x676>
 80127a8:	9b01      	ldr	r3, [sp, #4]
 80127aa:	e9c3 5600 	strd	r5, r6, [r3]
 80127ae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80127b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80127b6:	e7ca      	b.n	801274e <__kernel_rem_pio2+0x4e6>
 80127b8:	3408      	adds	r4, #8
 80127ba:	ab4a      	add	r3, sp, #296	; 0x128
 80127bc:	441c      	add	r4, r3
 80127be:	462e      	mov	r6, r5
 80127c0:	2000      	movs	r0, #0
 80127c2:	2100      	movs	r1, #0
 80127c4:	2e00      	cmp	r6, #0
 80127c6:	da36      	bge.n	8012836 <__kernel_rem_pio2+0x5ce>
 80127c8:	f1bb 0f00 	cmp.w	fp, #0
 80127cc:	d039      	beq.n	8012842 <__kernel_rem_pio2+0x5da>
 80127ce:	4602      	mov	r2, r0
 80127d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127d4:	9c01      	ldr	r4, [sp, #4]
 80127d6:	e9c4 2300 	strd	r2, r3, [r4]
 80127da:	4602      	mov	r2, r0
 80127dc:	460b      	mov	r3, r1
 80127de:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80127e2:	f7ed fd69 	bl	80002b8 <__aeabi_dsub>
 80127e6:	ae4c      	add	r6, sp, #304	; 0x130
 80127e8:	2401      	movs	r4, #1
 80127ea:	42a5      	cmp	r5, r4
 80127ec:	da2c      	bge.n	8012848 <__kernel_rem_pio2+0x5e0>
 80127ee:	f1bb 0f00 	cmp.w	fp, #0
 80127f2:	d002      	beq.n	80127fa <__kernel_rem_pio2+0x592>
 80127f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127f8:	4619      	mov	r1, r3
 80127fa:	9b01      	ldr	r3, [sp, #4]
 80127fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012800:	e7a5      	b.n	801274e <__kernel_rem_pio2+0x4e6>
 8012802:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012806:	eb0d 0403 	add.w	r4, sp, r3
 801280a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801280e:	2000      	movs	r0, #0
 8012810:	2100      	movs	r1, #0
 8012812:	2d00      	cmp	r5, #0
 8012814:	da09      	bge.n	801282a <__kernel_rem_pio2+0x5c2>
 8012816:	f1bb 0f00 	cmp.w	fp, #0
 801281a:	d002      	beq.n	8012822 <__kernel_rem_pio2+0x5ba>
 801281c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012820:	4619      	mov	r1, r3
 8012822:	9b01      	ldr	r3, [sp, #4]
 8012824:	e9c3 0100 	strd	r0, r1, [r3]
 8012828:	e791      	b.n	801274e <__kernel_rem_pio2+0x4e6>
 801282a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801282e:	f7ed fd45 	bl	80002bc <__adddf3>
 8012832:	3d01      	subs	r5, #1
 8012834:	e7ed      	b.n	8012812 <__kernel_rem_pio2+0x5aa>
 8012836:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801283a:	f7ed fd3f 	bl	80002bc <__adddf3>
 801283e:	3e01      	subs	r6, #1
 8012840:	e7c0      	b.n	80127c4 <__kernel_rem_pio2+0x55c>
 8012842:	4602      	mov	r2, r0
 8012844:	460b      	mov	r3, r1
 8012846:	e7c5      	b.n	80127d4 <__kernel_rem_pio2+0x56c>
 8012848:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801284c:	f7ed fd36 	bl	80002bc <__adddf3>
 8012850:	3401      	adds	r4, #1
 8012852:	e7ca      	b.n	80127ea <__kernel_rem_pio2+0x582>
 8012854:	e9da 8900 	ldrd	r8, r9, [sl]
 8012858:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801285c:	9b02      	ldr	r3, [sp, #8]
 801285e:	3b01      	subs	r3, #1
 8012860:	9302      	str	r3, [sp, #8]
 8012862:	4632      	mov	r2, r6
 8012864:	463b      	mov	r3, r7
 8012866:	4640      	mov	r0, r8
 8012868:	4649      	mov	r1, r9
 801286a:	f7ed fd27 	bl	80002bc <__adddf3>
 801286e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012872:	4602      	mov	r2, r0
 8012874:	460b      	mov	r3, r1
 8012876:	4640      	mov	r0, r8
 8012878:	4649      	mov	r1, r9
 801287a:	f7ed fd1d 	bl	80002b8 <__aeabi_dsub>
 801287e:	4632      	mov	r2, r6
 8012880:	463b      	mov	r3, r7
 8012882:	f7ed fd1b 	bl	80002bc <__adddf3>
 8012886:	ed9d 7b08 	vldr	d7, [sp, #32]
 801288a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801288e:	ed8a 7b00 	vstr	d7, [sl]
 8012892:	e76e      	b.n	8012772 <__kernel_rem_pio2+0x50a>
 8012894:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012898:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801289c:	4640      	mov	r0, r8
 801289e:	4632      	mov	r2, r6
 80128a0:	463b      	mov	r3, r7
 80128a2:	4649      	mov	r1, r9
 80128a4:	f7ed fd0a 	bl	80002bc <__adddf3>
 80128a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128ac:	4602      	mov	r2, r0
 80128ae:	460b      	mov	r3, r1
 80128b0:	4640      	mov	r0, r8
 80128b2:	4649      	mov	r1, r9
 80128b4:	f7ed fd00 	bl	80002b8 <__aeabi_dsub>
 80128b8:	4632      	mov	r2, r6
 80128ba:	463b      	mov	r3, r7
 80128bc:	f7ed fcfe 	bl	80002bc <__adddf3>
 80128c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80128c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80128c8:	ed84 7b00 	vstr	d7, [r4]
 80128cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128d0:	e755      	b.n	801277e <__kernel_rem_pio2+0x516>
 80128d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80128d6:	f7ed fcf1 	bl	80002bc <__adddf3>
 80128da:	3d01      	subs	r5, #1
 80128dc:	e759      	b.n	8012792 <__kernel_rem_pio2+0x52a>
 80128de:	9b01      	ldr	r3, [sp, #4]
 80128e0:	9a01      	ldr	r2, [sp, #4]
 80128e2:	601d      	str	r5, [r3, #0]
 80128e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80128e8:	605c      	str	r4, [r3, #4]
 80128ea:	609f      	str	r7, [r3, #8]
 80128ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80128f0:	60d3      	str	r3, [r2, #12]
 80128f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128f6:	6110      	str	r0, [r2, #16]
 80128f8:	6153      	str	r3, [r2, #20]
 80128fa:	e728      	b.n	801274e <__kernel_rem_pio2+0x4e6>
 80128fc:	41700000 	.word	0x41700000
 8012900:	3e700000 	.word	0x3e700000
 8012904:	00000000 	.word	0x00000000

08012908 <__kernel_sin>:
 8012908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801290c:	ed2d 8b04 	vpush	{d8-d9}
 8012910:	eeb0 8a41 	vmov.f32	s16, s2
 8012914:	eef0 8a61 	vmov.f32	s17, s3
 8012918:	ec55 4b10 	vmov	r4, r5, d0
 801291c:	b083      	sub	sp, #12
 801291e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012922:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012926:	9001      	str	r0, [sp, #4]
 8012928:	da06      	bge.n	8012938 <__kernel_sin+0x30>
 801292a:	ee10 0a10 	vmov	r0, s0
 801292e:	4629      	mov	r1, r5
 8012930:	f7ee f92a 	bl	8000b88 <__aeabi_d2iz>
 8012934:	2800      	cmp	r0, #0
 8012936:	d051      	beq.n	80129dc <__kernel_sin+0xd4>
 8012938:	4622      	mov	r2, r4
 801293a:	462b      	mov	r3, r5
 801293c:	4620      	mov	r0, r4
 801293e:	4629      	mov	r1, r5
 8012940:	f7ed fe72 	bl	8000628 <__aeabi_dmul>
 8012944:	4682      	mov	sl, r0
 8012946:	468b      	mov	fp, r1
 8012948:	4602      	mov	r2, r0
 801294a:	460b      	mov	r3, r1
 801294c:	4620      	mov	r0, r4
 801294e:	4629      	mov	r1, r5
 8012950:	f7ed fe6a 	bl	8000628 <__aeabi_dmul>
 8012954:	a341      	add	r3, pc, #260	; (adr r3, 8012a5c <__kernel_sin+0x154>)
 8012956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295a:	4680      	mov	r8, r0
 801295c:	4689      	mov	r9, r1
 801295e:	4650      	mov	r0, sl
 8012960:	4659      	mov	r1, fp
 8012962:	f7ed fe61 	bl	8000628 <__aeabi_dmul>
 8012966:	a33f      	add	r3, pc, #252	; (adr r3, 8012a64 <__kernel_sin+0x15c>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	f7ed fca4 	bl	80002b8 <__aeabi_dsub>
 8012970:	4652      	mov	r2, sl
 8012972:	465b      	mov	r3, fp
 8012974:	f7ed fe58 	bl	8000628 <__aeabi_dmul>
 8012978:	a33c      	add	r3, pc, #240	; (adr r3, 8012a6c <__kernel_sin+0x164>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	f7ed fc9d 	bl	80002bc <__adddf3>
 8012982:	4652      	mov	r2, sl
 8012984:	465b      	mov	r3, fp
 8012986:	f7ed fe4f 	bl	8000628 <__aeabi_dmul>
 801298a:	a33a      	add	r3, pc, #232	; (adr r3, 8012a74 <__kernel_sin+0x16c>)
 801298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012990:	f7ed fc92 	bl	80002b8 <__aeabi_dsub>
 8012994:	4652      	mov	r2, sl
 8012996:	465b      	mov	r3, fp
 8012998:	f7ed fe46 	bl	8000628 <__aeabi_dmul>
 801299c:	a337      	add	r3, pc, #220	; (adr r3, 8012a7c <__kernel_sin+0x174>)
 801299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a2:	f7ed fc8b 	bl	80002bc <__adddf3>
 80129a6:	9b01      	ldr	r3, [sp, #4]
 80129a8:	4606      	mov	r6, r0
 80129aa:	460f      	mov	r7, r1
 80129ac:	b9eb      	cbnz	r3, 80129ea <__kernel_sin+0xe2>
 80129ae:	4602      	mov	r2, r0
 80129b0:	460b      	mov	r3, r1
 80129b2:	4650      	mov	r0, sl
 80129b4:	4659      	mov	r1, fp
 80129b6:	f7ed fe37 	bl	8000628 <__aeabi_dmul>
 80129ba:	a325      	add	r3, pc, #148	; (adr r3, 8012a50 <__kernel_sin+0x148>)
 80129bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c0:	f7ed fc7a 	bl	80002b8 <__aeabi_dsub>
 80129c4:	4642      	mov	r2, r8
 80129c6:	464b      	mov	r3, r9
 80129c8:	f7ed fe2e 	bl	8000628 <__aeabi_dmul>
 80129cc:	4602      	mov	r2, r0
 80129ce:	460b      	mov	r3, r1
 80129d0:	4620      	mov	r0, r4
 80129d2:	4629      	mov	r1, r5
 80129d4:	f7ed fc72 	bl	80002bc <__adddf3>
 80129d8:	4604      	mov	r4, r0
 80129da:	460d      	mov	r5, r1
 80129dc:	ec45 4b10 	vmov	d0, r4, r5
 80129e0:	b003      	add	sp, #12
 80129e2:	ecbd 8b04 	vpop	{d8-d9}
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ea:	4b1b      	ldr	r3, [pc, #108]	; (8012a58 <__kernel_sin+0x150>)
 80129ec:	ec51 0b18 	vmov	r0, r1, d8
 80129f0:	2200      	movs	r2, #0
 80129f2:	f7ed fe19 	bl	8000628 <__aeabi_dmul>
 80129f6:	4632      	mov	r2, r6
 80129f8:	ec41 0b19 	vmov	d9, r0, r1
 80129fc:	463b      	mov	r3, r7
 80129fe:	4640      	mov	r0, r8
 8012a00:	4649      	mov	r1, r9
 8012a02:	f7ed fe11 	bl	8000628 <__aeabi_dmul>
 8012a06:	4602      	mov	r2, r0
 8012a08:	460b      	mov	r3, r1
 8012a0a:	ec51 0b19 	vmov	r0, r1, d9
 8012a0e:	f7ed fc53 	bl	80002b8 <__aeabi_dsub>
 8012a12:	4652      	mov	r2, sl
 8012a14:	465b      	mov	r3, fp
 8012a16:	f7ed fe07 	bl	8000628 <__aeabi_dmul>
 8012a1a:	ec53 2b18 	vmov	r2, r3, d8
 8012a1e:	f7ed fc4b 	bl	80002b8 <__aeabi_dsub>
 8012a22:	a30b      	add	r3, pc, #44	; (adr r3, 8012a50 <__kernel_sin+0x148>)
 8012a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a28:	4606      	mov	r6, r0
 8012a2a:	460f      	mov	r7, r1
 8012a2c:	4640      	mov	r0, r8
 8012a2e:	4649      	mov	r1, r9
 8012a30:	f7ed fdfa 	bl	8000628 <__aeabi_dmul>
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	4630      	mov	r0, r6
 8012a3a:	4639      	mov	r1, r7
 8012a3c:	f7ed fc3e 	bl	80002bc <__adddf3>
 8012a40:	4602      	mov	r2, r0
 8012a42:	460b      	mov	r3, r1
 8012a44:	4620      	mov	r0, r4
 8012a46:	4629      	mov	r1, r5
 8012a48:	f7ed fc36 	bl	80002b8 <__aeabi_dsub>
 8012a4c:	e7c4      	b.n	80129d8 <__kernel_sin+0xd0>
 8012a4e:	bf00      	nop
 8012a50:	55555549 	.word	0x55555549
 8012a54:	3fc55555 	.word	0x3fc55555
 8012a58:	3fe00000 	.word	0x3fe00000
 8012a5c:	5acfd57c 	.word	0x5acfd57c
 8012a60:	3de5d93a 	.word	0x3de5d93a
 8012a64:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a68:	3e5ae5e6 	.word	0x3e5ae5e6
 8012a6c:	57b1fe7d 	.word	0x57b1fe7d
 8012a70:	3ec71de3 	.word	0x3ec71de3
 8012a74:	19c161d5 	.word	0x19c161d5
 8012a78:	3f2a01a0 	.word	0x3f2a01a0
 8012a7c:	1110f8a6 	.word	0x1110f8a6
 8012a80:	3f811111 	.word	0x3f811111

08012a84 <with_errno>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	4604      	mov	r4, r0
 8012a88:	460d      	mov	r5, r1
 8012a8a:	4616      	mov	r6, r2
 8012a8c:	f7fa ff28 	bl	800d8e0 <__errno>
 8012a90:	4629      	mov	r1, r5
 8012a92:	6006      	str	r6, [r0, #0]
 8012a94:	4620      	mov	r0, r4
 8012a96:	bd70      	pop	{r4, r5, r6, pc}

08012a98 <xflow>:
 8012a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a9a:	4614      	mov	r4, r2
 8012a9c:	461d      	mov	r5, r3
 8012a9e:	b108      	cbz	r0, 8012aa4 <xflow+0xc>
 8012aa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012aa4:	e9cd 2300 	strd	r2, r3, [sp]
 8012aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012aac:	4620      	mov	r0, r4
 8012aae:	4629      	mov	r1, r5
 8012ab0:	f7ed fdba 	bl	8000628 <__aeabi_dmul>
 8012ab4:	2222      	movs	r2, #34	; 0x22
 8012ab6:	b003      	add	sp, #12
 8012ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012abc:	f7ff bfe2 	b.w	8012a84 <with_errno>

08012ac0 <__math_uflow>:
 8012ac0:	b508      	push	{r3, lr}
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012ac8:	f7ff ffe6 	bl	8012a98 <xflow>
 8012acc:	ec41 0b10 	vmov	d0, r0, r1
 8012ad0:	bd08      	pop	{r3, pc}

08012ad2 <__math_oflow>:
 8012ad2:	b508      	push	{r3, lr}
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012ada:	f7ff ffdd 	bl	8012a98 <xflow>
 8012ade:	ec41 0b10 	vmov	d0, r0, r1
 8012ae2:	bd08      	pop	{r3, pc}
 8012ae4:	0000      	movs	r0, r0
	...

08012ae8 <atan>:
 8012ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aec:	ec55 4b10 	vmov	r4, r5, d0
 8012af0:	4bc3      	ldr	r3, [pc, #780]	; (8012e00 <atan+0x318>)
 8012af2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012af6:	429e      	cmp	r6, r3
 8012af8:	46ab      	mov	fp, r5
 8012afa:	dd18      	ble.n	8012b2e <atan+0x46>
 8012afc:	4bc1      	ldr	r3, [pc, #772]	; (8012e04 <atan+0x31c>)
 8012afe:	429e      	cmp	r6, r3
 8012b00:	dc01      	bgt.n	8012b06 <atan+0x1e>
 8012b02:	d109      	bne.n	8012b18 <atan+0x30>
 8012b04:	b144      	cbz	r4, 8012b18 <atan+0x30>
 8012b06:	4622      	mov	r2, r4
 8012b08:	462b      	mov	r3, r5
 8012b0a:	4620      	mov	r0, r4
 8012b0c:	4629      	mov	r1, r5
 8012b0e:	f7ed fbd5 	bl	80002bc <__adddf3>
 8012b12:	4604      	mov	r4, r0
 8012b14:	460d      	mov	r5, r1
 8012b16:	e006      	b.n	8012b26 <atan+0x3e>
 8012b18:	f1bb 0f00 	cmp.w	fp, #0
 8012b1c:	f300 8131 	bgt.w	8012d82 <atan+0x29a>
 8012b20:	a59b      	add	r5, pc, #620	; (adr r5, 8012d90 <atan+0x2a8>)
 8012b22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012b26:	ec45 4b10 	vmov	d0, r4, r5
 8012b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b2e:	4bb6      	ldr	r3, [pc, #728]	; (8012e08 <atan+0x320>)
 8012b30:	429e      	cmp	r6, r3
 8012b32:	dc14      	bgt.n	8012b5e <atan+0x76>
 8012b34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012b38:	429e      	cmp	r6, r3
 8012b3a:	dc0d      	bgt.n	8012b58 <atan+0x70>
 8012b3c:	a396      	add	r3, pc, #600	; (adr r3, 8012d98 <atan+0x2b0>)
 8012b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b42:	ee10 0a10 	vmov	r0, s0
 8012b46:	4629      	mov	r1, r5
 8012b48:	f7ed fbb8 	bl	80002bc <__adddf3>
 8012b4c:	4baf      	ldr	r3, [pc, #700]	; (8012e0c <atan+0x324>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	f7ed fffa 	bl	8000b48 <__aeabi_dcmpgt>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	d1e6      	bne.n	8012b26 <atan+0x3e>
 8012b58:	f04f 3aff 	mov.w	sl, #4294967295
 8012b5c:	e02b      	b.n	8012bb6 <atan+0xce>
 8012b5e:	f000 f963 	bl	8012e28 <fabs>
 8012b62:	4bab      	ldr	r3, [pc, #684]	; (8012e10 <atan+0x328>)
 8012b64:	429e      	cmp	r6, r3
 8012b66:	ec55 4b10 	vmov	r4, r5, d0
 8012b6a:	f300 80bf 	bgt.w	8012cec <atan+0x204>
 8012b6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012b72:	429e      	cmp	r6, r3
 8012b74:	f300 80a0 	bgt.w	8012cb8 <atan+0x1d0>
 8012b78:	ee10 2a10 	vmov	r2, s0
 8012b7c:	ee10 0a10 	vmov	r0, s0
 8012b80:	462b      	mov	r3, r5
 8012b82:	4629      	mov	r1, r5
 8012b84:	f7ed fb9a 	bl	80002bc <__adddf3>
 8012b88:	4ba0      	ldr	r3, [pc, #640]	; (8012e0c <atan+0x324>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f7ed fb94 	bl	80002b8 <__aeabi_dsub>
 8012b90:	2200      	movs	r2, #0
 8012b92:	4606      	mov	r6, r0
 8012b94:	460f      	mov	r7, r1
 8012b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	f7ed fb8d 	bl	80002bc <__adddf3>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	4639      	mov	r1, r7
 8012baa:	f7ed fe67 	bl	800087c <__aeabi_ddiv>
 8012bae:	f04f 0a00 	mov.w	sl, #0
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	460d      	mov	r5, r1
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	462b      	mov	r3, r5
 8012bba:	4620      	mov	r0, r4
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	f7ed fd33 	bl	8000628 <__aeabi_dmul>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	4680      	mov	r8, r0
 8012bc8:	4689      	mov	r9, r1
 8012bca:	f7ed fd2d 	bl	8000628 <__aeabi_dmul>
 8012bce:	a374      	add	r3, pc, #464	; (adr r3, 8012da0 <atan+0x2b8>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	460f      	mov	r7, r1
 8012bd8:	f7ed fd26 	bl	8000628 <__aeabi_dmul>
 8012bdc:	a372      	add	r3, pc, #456	; (adr r3, 8012da8 <atan+0x2c0>)
 8012bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be2:	f7ed fb6b 	bl	80002bc <__adddf3>
 8012be6:	4632      	mov	r2, r6
 8012be8:	463b      	mov	r3, r7
 8012bea:	f7ed fd1d 	bl	8000628 <__aeabi_dmul>
 8012bee:	a370      	add	r3, pc, #448	; (adr r3, 8012db0 <atan+0x2c8>)
 8012bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf4:	f7ed fb62 	bl	80002bc <__adddf3>
 8012bf8:	4632      	mov	r2, r6
 8012bfa:	463b      	mov	r3, r7
 8012bfc:	f7ed fd14 	bl	8000628 <__aeabi_dmul>
 8012c00:	a36d      	add	r3, pc, #436	; (adr r3, 8012db8 <atan+0x2d0>)
 8012c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c06:	f7ed fb59 	bl	80002bc <__adddf3>
 8012c0a:	4632      	mov	r2, r6
 8012c0c:	463b      	mov	r3, r7
 8012c0e:	f7ed fd0b 	bl	8000628 <__aeabi_dmul>
 8012c12:	a36b      	add	r3, pc, #428	; (adr r3, 8012dc0 <atan+0x2d8>)
 8012c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c18:	f7ed fb50 	bl	80002bc <__adddf3>
 8012c1c:	4632      	mov	r2, r6
 8012c1e:	463b      	mov	r3, r7
 8012c20:	f7ed fd02 	bl	8000628 <__aeabi_dmul>
 8012c24:	a368      	add	r3, pc, #416	; (adr r3, 8012dc8 <atan+0x2e0>)
 8012c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2a:	f7ed fb47 	bl	80002bc <__adddf3>
 8012c2e:	4642      	mov	r2, r8
 8012c30:	464b      	mov	r3, r9
 8012c32:	f7ed fcf9 	bl	8000628 <__aeabi_dmul>
 8012c36:	a366      	add	r3, pc, #408	; (adr r3, 8012dd0 <atan+0x2e8>)
 8012c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3c:	4680      	mov	r8, r0
 8012c3e:	4689      	mov	r9, r1
 8012c40:	4630      	mov	r0, r6
 8012c42:	4639      	mov	r1, r7
 8012c44:	f7ed fcf0 	bl	8000628 <__aeabi_dmul>
 8012c48:	a363      	add	r3, pc, #396	; (adr r3, 8012dd8 <atan+0x2f0>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4e:	f7ed fb33 	bl	80002b8 <__aeabi_dsub>
 8012c52:	4632      	mov	r2, r6
 8012c54:	463b      	mov	r3, r7
 8012c56:	f7ed fce7 	bl	8000628 <__aeabi_dmul>
 8012c5a:	a361      	add	r3, pc, #388	; (adr r3, 8012de0 <atan+0x2f8>)
 8012c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c60:	f7ed fb2a 	bl	80002b8 <__aeabi_dsub>
 8012c64:	4632      	mov	r2, r6
 8012c66:	463b      	mov	r3, r7
 8012c68:	f7ed fcde 	bl	8000628 <__aeabi_dmul>
 8012c6c:	a35e      	add	r3, pc, #376	; (adr r3, 8012de8 <atan+0x300>)
 8012c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c72:	f7ed fb21 	bl	80002b8 <__aeabi_dsub>
 8012c76:	4632      	mov	r2, r6
 8012c78:	463b      	mov	r3, r7
 8012c7a:	f7ed fcd5 	bl	8000628 <__aeabi_dmul>
 8012c7e:	a35c      	add	r3, pc, #368	; (adr r3, 8012df0 <atan+0x308>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	f7ed fb18 	bl	80002b8 <__aeabi_dsub>
 8012c88:	4632      	mov	r2, r6
 8012c8a:	463b      	mov	r3, r7
 8012c8c:	f7ed fccc 	bl	8000628 <__aeabi_dmul>
 8012c90:	4602      	mov	r2, r0
 8012c92:	460b      	mov	r3, r1
 8012c94:	4640      	mov	r0, r8
 8012c96:	4649      	mov	r1, r9
 8012c98:	f7ed fb10 	bl	80002bc <__adddf3>
 8012c9c:	4622      	mov	r2, r4
 8012c9e:	462b      	mov	r3, r5
 8012ca0:	f7ed fcc2 	bl	8000628 <__aeabi_dmul>
 8012ca4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012ca8:	4602      	mov	r2, r0
 8012caa:	460b      	mov	r3, r1
 8012cac:	d14b      	bne.n	8012d46 <atan+0x25e>
 8012cae:	4620      	mov	r0, r4
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	f7ed fb01 	bl	80002b8 <__aeabi_dsub>
 8012cb6:	e72c      	b.n	8012b12 <atan+0x2a>
 8012cb8:	ee10 0a10 	vmov	r0, s0
 8012cbc:	4b53      	ldr	r3, [pc, #332]	; (8012e0c <atan+0x324>)
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	f7ed faf9 	bl	80002b8 <__aeabi_dsub>
 8012cc6:	4b51      	ldr	r3, [pc, #324]	; (8012e0c <atan+0x324>)
 8012cc8:	4606      	mov	r6, r0
 8012cca:	460f      	mov	r7, r1
 8012ccc:	2200      	movs	r2, #0
 8012cce:	4620      	mov	r0, r4
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	f7ed faf3 	bl	80002bc <__adddf3>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	460b      	mov	r3, r1
 8012cda:	4630      	mov	r0, r6
 8012cdc:	4639      	mov	r1, r7
 8012cde:	f7ed fdcd 	bl	800087c <__aeabi_ddiv>
 8012ce2:	f04f 0a01 	mov.w	sl, #1
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	460d      	mov	r5, r1
 8012cea:	e764      	b.n	8012bb6 <atan+0xce>
 8012cec:	4b49      	ldr	r3, [pc, #292]	; (8012e14 <atan+0x32c>)
 8012cee:	429e      	cmp	r6, r3
 8012cf0:	da1d      	bge.n	8012d2e <atan+0x246>
 8012cf2:	ee10 0a10 	vmov	r0, s0
 8012cf6:	4b48      	ldr	r3, [pc, #288]	; (8012e18 <atan+0x330>)
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	f7ed fadc 	bl	80002b8 <__aeabi_dsub>
 8012d00:	4b45      	ldr	r3, [pc, #276]	; (8012e18 <atan+0x330>)
 8012d02:	4606      	mov	r6, r0
 8012d04:	460f      	mov	r7, r1
 8012d06:	2200      	movs	r2, #0
 8012d08:	4620      	mov	r0, r4
 8012d0a:	4629      	mov	r1, r5
 8012d0c:	f7ed fc8c 	bl	8000628 <__aeabi_dmul>
 8012d10:	4b3e      	ldr	r3, [pc, #248]	; (8012e0c <atan+0x324>)
 8012d12:	2200      	movs	r2, #0
 8012d14:	f7ed fad2 	bl	80002bc <__adddf3>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	460b      	mov	r3, r1
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	4639      	mov	r1, r7
 8012d20:	f7ed fdac 	bl	800087c <__aeabi_ddiv>
 8012d24:	f04f 0a02 	mov.w	sl, #2
 8012d28:	4604      	mov	r4, r0
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	e743      	b.n	8012bb6 <atan+0xce>
 8012d2e:	462b      	mov	r3, r5
 8012d30:	ee10 2a10 	vmov	r2, s0
 8012d34:	4939      	ldr	r1, [pc, #228]	; (8012e1c <atan+0x334>)
 8012d36:	2000      	movs	r0, #0
 8012d38:	f7ed fda0 	bl	800087c <__aeabi_ddiv>
 8012d3c:	f04f 0a03 	mov.w	sl, #3
 8012d40:	4604      	mov	r4, r0
 8012d42:	460d      	mov	r5, r1
 8012d44:	e737      	b.n	8012bb6 <atan+0xce>
 8012d46:	4b36      	ldr	r3, [pc, #216]	; (8012e20 <atan+0x338>)
 8012d48:	4e36      	ldr	r6, [pc, #216]	; (8012e24 <atan+0x33c>)
 8012d4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012d4e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012d52:	e9da 2300 	ldrd	r2, r3, [sl]
 8012d56:	f7ed faaf 	bl	80002b8 <__aeabi_dsub>
 8012d5a:	4622      	mov	r2, r4
 8012d5c:	462b      	mov	r3, r5
 8012d5e:	f7ed faab 	bl	80002b8 <__aeabi_dsub>
 8012d62:	4602      	mov	r2, r0
 8012d64:	460b      	mov	r3, r1
 8012d66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012d6a:	f7ed faa5 	bl	80002b8 <__aeabi_dsub>
 8012d6e:	f1bb 0f00 	cmp.w	fp, #0
 8012d72:	4604      	mov	r4, r0
 8012d74:	460d      	mov	r5, r1
 8012d76:	f6bf aed6 	bge.w	8012b26 <atan+0x3e>
 8012d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d7e:	461d      	mov	r5, r3
 8012d80:	e6d1      	b.n	8012b26 <atan+0x3e>
 8012d82:	a51d      	add	r5, pc, #116	; (adr r5, 8012df8 <atan+0x310>)
 8012d84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012d88:	e6cd      	b.n	8012b26 <atan+0x3e>
 8012d8a:	bf00      	nop
 8012d8c:	f3af 8000 	nop.w
 8012d90:	54442d18 	.word	0x54442d18
 8012d94:	bff921fb 	.word	0xbff921fb
 8012d98:	8800759c 	.word	0x8800759c
 8012d9c:	7e37e43c 	.word	0x7e37e43c
 8012da0:	e322da11 	.word	0xe322da11
 8012da4:	3f90ad3a 	.word	0x3f90ad3a
 8012da8:	24760deb 	.word	0x24760deb
 8012dac:	3fa97b4b 	.word	0x3fa97b4b
 8012db0:	a0d03d51 	.word	0xa0d03d51
 8012db4:	3fb10d66 	.word	0x3fb10d66
 8012db8:	c54c206e 	.word	0xc54c206e
 8012dbc:	3fb745cd 	.word	0x3fb745cd
 8012dc0:	920083ff 	.word	0x920083ff
 8012dc4:	3fc24924 	.word	0x3fc24924
 8012dc8:	5555550d 	.word	0x5555550d
 8012dcc:	3fd55555 	.word	0x3fd55555
 8012dd0:	2c6a6c2f 	.word	0x2c6a6c2f
 8012dd4:	bfa2b444 	.word	0xbfa2b444
 8012dd8:	52defd9a 	.word	0x52defd9a
 8012ddc:	3fadde2d 	.word	0x3fadde2d
 8012de0:	af749a6d 	.word	0xaf749a6d
 8012de4:	3fb3b0f2 	.word	0x3fb3b0f2
 8012de8:	fe231671 	.word	0xfe231671
 8012dec:	3fbc71c6 	.word	0x3fbc71c6
 8012df0:	9998ebc4 	.word	0x9998ebc4
 8012df4:	3fc99999 	.word	0x3fc99999
 8012df8:	54442d18 	.word	0x54442d18
 8012dfc:	3ff921fb 	.word	0x3ff921fb
 8012e00:	440fffff 	.word	0x440fffff
 8012e04:	7ff00000 	.word	0x7ff00000
 8012e08:	3fdbffff 	.word	0x3fdbffff
 8012e0c:	3ff00000 	.word	0x3ff00000
 8012e10:	3ff2ffff 	.word	0x3ff2ffff
 8012e14:	40038000 	.word	0x40038000
 8012e18:	3ff80000 	.word	0x3ff80000
 8012e1c:	bff00000 	.word	0xbff00000
 8012e20:	08013d78 	.word	0x08013d78
 8012e24:	08013d58 	.word	0x08013d58

08012e28 <fabs>:
 8012e28:	ec51 0b10 	vmov	r0, r1, d0
 8012e2c:	ee10 2a10 	vmov	r2, s0
 8012e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e34:	ec43 2b10 	vmov	d0, r2, r3
 8012e38:	4770      	bx	lr

08012e3a <finite>:
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	ed8d 0b00 	vstr	d0, [sp]
 8012e40:	9801      	ldr	r0, [sp, #4]
 8012e42:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012e46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012e4a:	0fc0      	lsrs	r0, r0, #31
 8012e4c:	b002      	add	sp, #8
 8012e4e:	4770      	bx	lr

08012e50 <floor>:
 8012e50:	ec51 0b10 	vmov	r0, r1, d0
 8012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012e5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012e60:	2e13      	cmp	r6, #19
 8012e62:	ee10 5a10 	vmov	r5, s0
 8012e66:	ee10 8a10 	vmov	r8, s0
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	dc32      	bgt.n	8012ed4 <floor+0x84>
 8012e6e:	2e00      	cmp	r6, #0
 8012e70:	da14      	bge.n	8012e9c <floor+0x4c>
 8012e72:	a333      	add	r3, pc, #204	; (adr r3, 8012f40 <floor+0xf0>)
 8012e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e78:	f7ed fa20 	bl	80002bc <__adddf3>
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	2300      	movs	r3, #0
 8012e80:	f7ed fe62 	bl	8000b48 <__aeabi_dcmpgt>
 8012e84:	b138      	cbz	r0, 8012e96 <floor+0x46>
 8012e86:	2c00      	cmp	r4, #0
 8012e88:	da57      	bge.n	8012f3a <floor+0xea>
 8012e8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012e8e:	431d      	orrs	r5, r3
 8012e90:	d001      	beq.n	8012e96 <floor+0x46>
 8012e92:	4c2d      	ldr	r4, [pc, #180]	; (8012f48 <floor+0xf8>)
 8012e94:	2500      	movs	r5, #0
 8012e96:	4621      	mov	r1, r4
 8012e98:	4628      	mov	r0, r5
 8012e9a:	e025      	b.n	8012ee8 <floor+0x98>
 8012e9c:	4f2b      	ldr	r7, [pc, #172]	; (8012f4c <floor+0xfc>)
 8012e9e:	4137      	asrs	r7, r6
 8012ea0:	ea01 0307 	and.w	r3, r1, r7
 8012ea4:	4303      	orrs	r3, r0
 8012ea6:	d01f      	beq.n	8012ee8 <floor+0x98>
 8012ea8:	a325      	add	r3, pc, #148	; (adr r3, 8012f40 <floor+0xf0>)
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f7ed fa05 	bl	80002bc <__adddf3>
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	f7ed fe47 	bl	8000b48 <__aeabi_dcmpgt>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d0eb      	beq.n	8012e96 <floor+0x46>
 8012ebe:	2c00      	cmp	r4, #0
 8012ec0:	bfbe      	ittt	lt
 8012ec2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012ec6:	fa43 f606 	asrlt.w	r6, r3, r6
 8012eca:	19a4      	addlt	r4, r4, r6
 8012ecc:	ea24 0407 	bic.w	r4, r4, r7
 8012ed0:	2500      	movs	r5, #0
 8012ed2:	e7e0      	b.n	8012e96 <floor+0x46>
 8012ed4:	2e33      	cmp	r6, #51	; 0x33
 8012ed6:	dd0b      	ble.n	8012ef0 <floor+0xa0>
 8012ed8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012edc:	d104      	bne.n	8012ee8 <floor+0x98>
 8012ede:	ee10 2a10 	vmov	r2, s0
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	f7ed f9ea 	bl	80002bc <__adddf3>
 8012ee8:	ec41 0b10 	vmov	d0, r0, r1
 8012eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ef8:	fa23 f707 	lsr.w	r7, r3, r7
 8012efc:	4207      	tst	r7, r0
 8012efe:	d0f3      	beq.n	8012ee8 <floor+0x98>
 8012f00:	a30f      	add	r3, pc, #60	; (adr r3, 8012f40 <floor+0xf0>)
 8012f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f06:	f7ed f9d9 	bl	80002bc <__adddf3>
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	f7ed fe1b 	bl	8000b48 <__aeabi_dcmpgt>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d0bf      	beq.n	8012e96 <floor+0x46>
 8012f16:	2c00      	cmp	r4, #0
 8012f18:	da02      	bge.n	8012f20 <floor+0xd0>
 8012f1a:	2e14      	cmp	r6, #20
 8012f1c:	d103      	bne.n	8012f26 <floor+0xd6>
 8012f1e:	3401      	adds	r4, #1
 8012f20:	ea25 0507 	bic.w	r5, r5, r7
 8012f24:	e7b7      	b.n	8012e96 <floor+0x46>
 8012f26:	2301      	movs	r3, #1
 8012f28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012f2c:	fa03 f606 	lsl.w	r6, r3, r6
 8012f30:	4435      	add	r5, r6
 8012f32:	4545      	cmp	r5, r8
 8012f34:	bf38      	it	cc
 8012f36:	18e4      	addcc	r4, r4, r3
 8012f38:	e7f2      	b.n	8012f20 <floor+0xd0>
 8012f3a:	2500      	movs	r5, #0
 8012f3c:	462c      	mov	r4, r5
 8012f3e:	e7aa      	b.n	8012e96 <floor+0x46>
 8012f40:	8800759c 	.word	0x8800759c
 8012f44:	7e37e43c 	.word	0x7e37e43c
 8012f48:	bff00000 	.word	0xbff00000
 8012f4c:	000fffff 	.word	0x000fffff

08012f50 <nan>:
 8012f50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012f58 <nan+0x8>
 8012f54:	4770      	bx	lr
 8012f56:	bf00      	nop
 8012f58:	00000000 	.word	0x00000000
 8012f5c:	7ff80000 	.word	0x7ff80000

08012f60 <scalbn>:
 8012f60:	b570      	push	{r4, r5, r6, lr}
 8012f62:	ec55 4b10 	vmov	r4, r5, d0
 8012f66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	462b      	mov	r3, r5
 8012f6e:	b99a      	cbnz	r2, 8012f98 <scalbn+0x38>
 8012f70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f74:	4323      	orrs	r3, r4
 8012f76:	d036      	beq.n	8012fe6 <scalbn+0x86>
 8012f78:	4b39      	ldr	r3, [pc, #228]	; (8013060 <scalbn+0x100>)
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	ee10 0a10 	vmov	r0, s0
 8012f80:	2200      	movs	r2, #0
 8012f82:	f7ed fb51 	bl	8000628 <__aeabi_dmul>
 8012f86:	4b37      	ldr	r3, [pc, #220]	; (8013064 <scalbn+0x104>)
 8012f88:	429e      	cmp	r6, r3
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	460d      	mov	r5, r1
 8012f8e:	da10      	bge.n	8012fb2 <scalbn+0x52>
 8012f90:	a32b      	add	r3, pc, #172	; (adr r3, 8013040 <scalbn+0xe0>)
 8012f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f96:	e03a      	b.n	801300e <scalbn+0xae>
 8012f98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012f9c:	428a      	cmp	r2, r1
 8012f9e:	d10c      	bne.n	8012fba <scalbn+0x5a>
 8012fa0:	ee10 2a10 	vmov	r2, s0
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	f7ed f988 	bl	80002bc <__adddf3>
 8012fac:	4604      	mov	r4, r0
 8012fae:	460d      	mov	r5, r1
 8012fb0:	e019      	b.n	8012fe6 <scalbn+0x86>
 8012fb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	3a36      	subs	r2, #54	; 0x36
 8012fba:	4432      	add	r2, r6
 8012fbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012fc0:	428a      	cmp	r2, r1
 8012fc2:	dd08      	ble.n	8012fd6 <scalbn+0x76>
 8012fc4:	2d00      	cmp	r5, #0
 8012fc6:	a120      	add	r1, pc, #128	; (adr r1, 8013048 <scalbn+0xe8>)
 8012fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fcc:	da1c      	bge.n	8013008 <scalbn+0xa8>
 8012fce:	a120      	add	r1, pc, #128	; (adr r1, 8013050 <scalbn+0xf0>)
 8012fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fd4:	e018      	b.n	8013008 <scalbn+0xa8>
 8012fd6:	2a00      	cmp	r2, #0
 8012fd8:	dd08      	ble.n	8012fec <scalbn+0x8c>
 8012fda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012fde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012fe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fe6:	ec45 4b10 	vmov	d0, r4, r5
 8012fea:	bd70      	pop	{r4, r5, r6, pc}
 8012fec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012ff0:	da19      	bge.n	8013026 <scalbn+0xc6>
 8012ff2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012ff6:	429e      	cmp	r6, r3
 8012ff8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012ffc:	dd0a      	ble.n	8013014 <scalbn+0xb4>
 8012ffe:	a112      	add	r1, pc, #72	; (adr r1, 8013048 <scalbn+0xe8>)
 8013000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d1e2      	bne.n	8012fce <scalbn+0x6e>
 8013008:	a30f      	add	r3, pc, #60	; (adr r3, 8013048 <scalbn+0xe8>)
 801300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300e:	f7ed fb0b 	bl	8000628 <__aeabi_dmul>
 8013012:	e7cb      	b.n	8012fac <scalbn+0x4c>
 8013014:	a10a      	add	r1, pc, #40	; (adr r1, 8013040 <scalbn+0xe0>)
 8013016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d0b8      	beq.n	8012f90 <scalbn+0x30>
 801301e:	a10e      	add	r1, pc, #56	; (adr r1, 8013058 <scalbn+0xf8>)
 8013020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013024:	e7b4      	b.n	8012f90 <scalbn+0x30>
 8013026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801302a:	3236      	adds	r2, #54	; 0x36
 801302c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013030:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013034:	4620      	mov	r0, r4
 8013036:	4b0c      	ldr	r3, [pc, #48]	; (8013068 <scalbn+0x108>)
 8013038:	2200      	movs	r2, #0
 801303a:	e7e8      	b.n	801300e <scalbn+0xae>
 801303c:	f3af 8000 	nop.w
 8013040:	c2f8f359 	.word	0xc2f8f359
 8013044:	01a56e1f 	.word	0x01a56e1f
 8013048:	8800759c 	.word	0x8800759c
 801304c:	7e37e43c 	.word	0x7e37e43c
 8013050:	8800759c 	.word	0x8800759c
 8013054:	fe37e43c 	.word	0xfe37e43c
 8013058:	c2f8f359 	.word	0xc2f8f359
 801305c:	81a56e1f 	.word	0x81a56e1f
 8013060:	43500000 	.word	0x43500000
 8013064:	ffff3cb0 	.word	0xffff3cb0
 8013068:	3c900000 	.word	0x3c900000

0801306c <_sbrk>:
 801306c:	4a04      	ldr	r2, [pc, #16]	; (8013080 <_sbrk+0x14>)
 801306e:	6811      	ldr	r1, [r2, #0]
 8013070:	4603      	mov	r3, r0
 8013072:	b909      	cbnz	r1, 8013078 <_sbrk+0xc>
 8013074:	4903      	ldr	r1, [pc, #12]	; (8013084 <_sbrk+0x18>)
 8013076:	6011      	str	r1, [r2, #0]
 8013078:	6810      	ldr	r0, [r2, #0]
 801307a:	4403      	add	r3, r0
 801307c:	6013      	str	r3, [r2, #0]
 801307e:	4770      	bx	lr
 8013080:	2000dc7c 	.word	0x2000dc7c
 8013084:	20000625 	.word	0x20000625

08013088 <_init>:
 8013088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308a:	bf00      	nop
 801308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801308e:	bc08      	pop	{r3}
 8013090:	469e      	mov	lr, r3
 8013092:	4770      	bx	lr

08013094 <_fini>:
 8013094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013096:	bf00      	nop
 8013098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801309a:	bc08      	pop	{r3}
 801309c:	469e      	mov	lr, r3
 801309e:	4770      	bx	lr
