
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f450  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800f5f0  0800f5f0  0001f5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe68  0800fe68  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fe68  0800fe68  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fe68  0800fe68  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe68  0800fe68  0001fe68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe6c  0800fe6c  0001fe6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800fe70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131e8  200001f8  08010068  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200133e0  08010068  000233e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da73  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002635  00000000  00000000  0002dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000302d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00030ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012817  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e975  00000000  00000000  0004420f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000625d3  00000000  00000000  00052b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b5157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  000b51a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f5d8 	.word	0x0800f5d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800f5d8 	.word	0x0800f5d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b89      	ldr	r3, [pc, #548]	; (8000ee4 <main+0x22c>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a87      	ldr	r2, [pc, #540]	; (8000ee4 <main+0x22c>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <main+0x230>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a85      	ldr	r2, [pc, #532]	; (8000ee8 <main+0x230>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	/* Primero configuramos */
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();

   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f008 f82a 	bl	8008d34 <RCC_enableMaxFrequencies>
	inSystem ();
 8000ce0:	f000 f938 	bl	8000f54 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4881      	ldr	r0, [pc, #516]	; (8000eec <main+0x234>)
 8000ce8:	f000 fdfe 	bl	80018e8 <calibracionGyros>
 8000cec:	ee10 3a10 	vmov	r3, s0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc41 	bl	8000578 <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	497d      	ldr	r1, [pc, #500]	; (8000ef0 <main+0x238>)
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]


	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000d00:	4b7c      	ldr	r3, [pc, #496]	; (8000ef4 <main+0x23c>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2303      	movs	r3, #3
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	22c8      	movs	r2, #200	; 0xc8
 8000d0c:	497a      	ldr	r1, [pc, #488]	; (8000ef8 <main+0x240>)
 8000d0e:	487b      	ldr	r0, [pc, #492]	; (8000efc <main+0x244>)
 8000d10:	f002 ffde 	bl	8003cd0 <xTaskCreate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a7a      	ldr	r2, [pc, #488]	; (8000f00 <main+0x248>)
 8000d18:	6013      	str	r3, [r2, #0]
					NULL,                   // parametro pasado a la tarea
					3,                      // Prioridad de la tarea
					&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d1a:	4b79      	ldr	r3, [pc, #484]	; (8000f00 <main+0x248>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00a      	beq.n	8000d38 <main+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <main+0x7e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d38:	4b72      	ldr	r3, [pc, #456]	; (8000f04 <main+0x24c>)
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	22c8      	movs	r2, #200	; 0xc8
 8000d44:	4970      	ldr	r1, [pc, #448]	; (8000f08 <main+0x250>)
 8000d46:	4871      	ldr	r0, [pc, #452]	; (8000f0c <main+0x254>)
 8000d48:	f002 ffc2 	bl	8003cd0 <xTaskCreate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a6c      	ldr	r2, [pc, #432]	; (8000f00 <main+0x248>)
 8000d50:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <main+0x248>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00a      	beq.n	8000d70 <main+0xb8>
        __asm volatile
 8000d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	61bb      	str	r3, [r7, #24]
    }
 8000d6c:	bf00      	nop
 8000d6e:	e7fe      	b.n	8000d6e <main+0xb6>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d70:	4b67      	ldr	r3, [pc, #412]	; (8000f10 <main+0x258>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2303      	movs	r3, #3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	4965      	ldr	r1, [pc, #404]	; (8000f14 <main+0x25c>)
 8000d7e:	4866      	ldr	r0, [pc, #408]	; (8000f18 <main+0x260>)
 8000d80:	f002 ffa6 	bl	8003cd0 <xTaskCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a5e      	ldr	r2, [pc, #376]	; (8000f00 <main+0x248>)
 8000d88:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <main+0x248>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <main+0xf0>
        __asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	617b      	str	r3, [r7, #20]
    }
 8000da4:	bf00      	nop
 8000da6:	e7fe      	b.n	8000da6 <main+0xee>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <main+0x264>)
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2303      	movs	r3, #3
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	22c8      	movs	r2, #200	; 0xc8
 8000db4:	495a      	ldr	r1, [pc, #360]	; (8000f20 <main+0x268>)
 8000db6:	485b      	ldr	r0, [pc, #364]	; (8000f24 <main+0x26c>)
 8000db8:	f002 ff8a 	bl	8003cd0 <xTaskCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a50      	ldr	r2, [pc, #320]	; (8000f00 <main+0x248>)
 8000dc0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <main+0x248>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00a      	beq.n	8000de0 <main+0x128>
        __asm volatile
 8000dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	613b      	str	r3, [r7, #16]
    }
 8000ddc:	bf00      	nop
 8000dde:	e7fe      	b.n	8000dde <main+0x126>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <main+0x270>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2303      	movs	r3, #3
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	22c8      	movs	r2, #200	; 0xc8
 8000dec:	494f      	ldr	r1, [pc, #316]	; (8000f2c <main+0x274>)
 8000dee:	4850      	ldr	r0, [pc, #320]	; (8000f30 <main+0x278>)
 8000df0:	f002 ff6e 	bl	8003cd0 <xTaskCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <main+0x248>)
 8000df8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dfa:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <main+0x248>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d00a      	beq.n	8000e18 <main+0x160>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	60fb      	str	r3, [r7, #12]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <main+0x15e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000e18:	4b46      	ldr	r3, [pc, #280]	; (8000f34 <main+0x27c>)
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	22c8      	movs	r2, #200	; 0xc8
 8000e24:	4944      	ldr	r1, [pc, #272]	; (8000f38 <main+0x280>)
 8000e26:	4845      	ldr	r0, [pc, #276]	; (8000f3c <main+0x284>)
 8000e28:	f002 ff52 	bl	8003cd0 <xTaskCreate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a34      	ldr	r2, [pc, #208]	; (8000f00 <main+0x248>)
 8000e30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <main+0x248>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00a      	beq.n	8000e50 <main+0x198>
        __asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	60bb      	str	r3, [r7, #8]
    }
 8000e4c:	bf00      	nop
 8000e4e:	e7fe      	b.n	8000e4e <main+0x196>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	2014      	movs	r0, #20
 8000e56:	f002 f9ef 	bl	8003238 <xQueueGenericCreate>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a38      	ldr	r2, [pc, #224]	; (8000f40 <main+0x288>)
 8000e5e:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000e60:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <main+0x288>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <main+0x1c6>
        __asm volatile
 8000e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6c:	f383 8811 	msr	BASEPRI, r3
 8000e70:	f3bf 8f6f 	isb	sy
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	607b      	str	r3, [r7, #4]
    }
 8000e7a:	bf00      	nop
 8000e7c:	e7fe      	b.n	8000e7c <main+0x1c4>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2104      	movs	r1, #4
 8000e82:	200a      	movs	r0, #10
 8000e84:	f002 f9d8 	bl	8003238 <xQueueGenericCreate>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <main+0x28c>)
 8000e8c:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <main+0x28c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <main+0x1f4>
        __asm volatile
 8000e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e9a:	f383 8811 	msr	BASEPRI, r3
 8000e9e:	f3bf 8f6f 	isb	sy
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	603b      	str	r3, [r7, #0]
    }
 8000ea8:	bf00      	nop
 8000eaa:	e7fe      	b.n	8000eaa <main+0x1f2>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <main+0x290>)
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <main+0x294>)
 8000eba:	f003 ffdf 	bl	8004e7c <xTimerCreate>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a23      	ldr	r2, [pc, #140]	; (8000f50 <main+0x298>)
 8000ec2:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <main+0x298>)
 8000ec6:	681c      	ldr	r4, [r3, #0]
 8000ec8:	f003 f944 	bl	8004154 <xTaskGetTickCount>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f004 f82b 	bl	8004f34 <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000ede:	f003 f83d 	bl	8003f5c <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000ee2:	e7fe      	b.n	8000ee2 <main+0x22a>
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	e0001000 	.word	0xe0001000
 8000eec:	200003e0 	.word	0x200003e0
 8000ef0:	200005f0 	.word	0x200005f0
 8000ef4:	20000218 	.word	0x20000218
 8000ef8:	0800f6d4 	.word	0x0800f6d4
 8000efc:	080013e1 	.word	0x080013e1
 8000f00:	20000214 	.word	0x20000214
 8000f04:	2000021c 	.word	0x2000021c
 8000f08:	0800f6e0 	.word	0x0800f6e0
 8000f0c:	08001675 	.word	0x08001675
 8000f10:	20000220 	.word	0x20000220
 8000f14:	0800f6ec 	.word	0x0800f6ec
 8000f18:	08001505 	.word	0x08001505
 8000f1c:	20000224 	.word	0x20000224
 8000f20:	0800f6fc 	.word	0x0800f6fc
 8000f24:	08001545 	.word	0x08001545
 8000f28:	20000228 	.word	0x20000228
 8000f2c:	0800f708 	.word	0x0800f708
 8000f30:	0800159d 	.word	0x0800159d
 8000f34:	2000022c 	.word	0x2000022c
 8000f38:	0800f710 	.word	0x0800f710
 8000f3c:	080015f5 	.word	0x080015f5
 8000f40:	20000234 	.word	0x20000234
 8000f44:	20000230 	.word	0x20000230
 8000f48:	08002e21 	.word	0x08002e21
 8000f4c:	0800f720 	.word	0x0800f720
 8000f50:	20000238 	.word	0x20000238

08000f54 <inSystem>:

	}
}


void inSystem (void){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000f58:	4baf      	ldr	r3, [pc, #700]	; (8001218 <inSystem+0x2c4>)
 8000f5a:	4ab0      	ldr	r2, [pc, #704]	; (800121c <inSystem+0x2c8>)
 8000f5c:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000f5e:	4bae      	ldr	r3, [pc, #696]	; (8001218 <inSystem+0x2c4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000f64:	4bac      	ldr	r3, [pc, #688]	; (8001218 <inSystem+0x2c4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000f6a:	4bab      	ldr	r3, [pc, #684]	; (8001218 <inSystem+0x2c4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000f70:	4ba9      	ldr	r3, [pc, #676]	; (8001218 <inSystem+0x2c4>)
 8000f72:	2205      	movs	r2, #5
 8000f74:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f76:	4ba8      	ldr	r3, [pc, #672]	; (8001218 <inSystem+0x2c4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000f7c:	4ba6      	ldr	r3, [pc, #664]	; (8001218 <inSystem+0x2c4>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000f82:	48a5      	ldr	r0, [pc, #660]	; (8001218 <inSystem+0x2c4>)
 8000f84:	f006 fce6 	bl	8007954 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000f88:	2101      	movs	r1, #1
 8000f8a:	48a3      	ldr	r0, [pc, #652]	; (8001218 <inSystem+0x2c4>)
 8000f8c:	f006 fe0c 	bl	8007ba8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000f90:	f004 ff4a 	bl	8005e28 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8000f94:	4ba2      	ldr	r3, [pc, #648]	; (8001220 <inSystem+0x2cc>)
 8000f96:	4aa3      	ldr	r2, [pc, #652]	; (8001224 <inSystem+0x2d0>)
 8000f98:	49a3      	ldr	r1, [pc, #652]	; (8001228 <inSystem+0x2d4>)
 8000f9a:	48a4      	ldr	r0, [pc, #656]	; (800122c <inSystem+0x2d8>)
 8000f9c:	f001 fa64 	bl	8002468 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000fa0:	4ba3      	ldr	r3, [pc, #652]	; (8001230 <inSystem+0x2dc>)
 8000fa2:	4a9e      	ldr	r2, [pc, #632]	; (800121c <inSystem+0x2c8>)
 8000fa4:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fa6:	4ba2      	ldr	r3, [pc, #648]	; (8001230 <inSystem+0x2dc>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000fac:	4ba0      	ldr	r3, [pc, #640]	; (8001230 <inSystem+0x2dc>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fb2:	4b9f      	ldr	r3, [pc, #636]	; (8001230 <inSystem+0x2dc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000fb8:	4b9d      	ldr	r3, [pc, #628]	; (8001230 <inSystem+0x2dc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fbe:	4b9c      	ldr	r3, [pc, #624]	; (8001230 <inSystem+0x2dc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fc4:	4b9a      	ldr	r3, [pc, #616]	; (8001230 <inSystem+0x2dc>)
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8000fca:	4899      	ldr	r0, [pc, #612]	; (8001230 <inSystem+0x2dc>)
 8000fcc:	f006 fcc2 	bl	8007954 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8000fd0:	4b98      	ldr	r3, [pc, #608]	; (8001234 <inSystem+0x2e0>)
 8000fd2:	4a99      	ldr	r2, [pc, #612]	; (8001238 <inSystem+0x2e4>)
 8000fd4:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000fd6:	4b97      	ldr	r3, [pc, #604]	; (8001234 <inSystem+0x2e0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000fdc:	4b95      	ldr	r3, [pc, #596]	; (8001234 <inSystem+0x2e0>)
 8000fde:	4a97      	ldr	r2, [pc, #604]	; (800123c <inSystem+0x2e8>)
 8000fe0:	611a      	str	r2, [r3, #16]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8000fe2:	4b94      	ldr	r3, [pc, #592]	; (8001234 <inSystem+0x2e0>)
 8000fe4:	2221      	movs	r2, #33	; 0x21
 8000fe6:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000fe8:	4b92      	ldr	r3, [pc, #584]	; (8001234 <inSystem+0x2e0>)
 8000fea:	2264      	movs	r2, #100	; 0x64
 8000fec:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000fee:	4b91      	ldr	r3, [pc, #580]	; (8001234 <inSystem+0x2e0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000ff4:	4b8f      	ldr	r3, [pc, #572]	; (8001234 <inSystem+0x2e0>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 8000ffa:	488e      	ldr	r0, [pc, #568]	; (8001234 <inSystem+0x2e0>)
 8000ffc:	f007 f9c6 	bl	800838c <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001000:	488c      	ldr	r0, [pc, #560]	; (8001234 <inSystem+0x2e0>)
 8001002:	f007 faad 	bl	8008560 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 8001006:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <inSystem+0x2ec>)
 8001008:	4a84      	ldr	r2, [pc, #528]	; (800121c <inSystem+0x2c8>)
 800100a:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 800100c:	4b8c      	ldr	r3, [pc, #560]	; (8001240 <inSystem+0x2ec>)
 800100e:	2202      	movs	r2, #2
 8001010:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001012:	4b8b      	ldr	r3, [pc, #556]	; (8001240 <inSystem+0x2ec>)
 8001014:	2202      	movs	r2, #2
 8001016:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001018:	4b89      	ldr	r3, [pc, #548]	; (8001240 <inSystem+0x2ec>)
 800101a:	2200      	movs	r2, #0
 800101c:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800101e:	4b88      	ldr	r3, [pc, #544]	; (8001240 <inSystem+0x2ec>)
 8001020:	2201      	movs	r2, #1
 8001022:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001024:	4b86      	ldr	r3, [pc, #536]	; (8001240 <inSystem+0x2ec>)
 8001026:	2200      	movs	r2, #0
 8001028:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800102a:	4b85      	ldr	r3, [pc, #532]	; (8001240 <inSystem+0x2ec>)
 800102c:	2202      	movs	r2, #2
 800102e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8001030:	4883      	ldr	r0, [pc, #524]	; (8001240 <inSystem+0x2ec>)
 8001032:	f006 fc8f 	bl	8007954 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 8001036:	4b83      	ldr	r3, [pc, #524]	; (8001244 <inSystem+0x2f0>)
 8001038:	4a7f      	ldr	r2, [pc, #508]	; (8001238 <inSystem+0x2e4>)
 800103a:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 800103c:	4b81      	ldr	r3, [pc, #516]	; (8001244 <inSystem+0x2f0>)
 800103e:	2201      	movs	r2, #1
 8001040:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <inSystem+0x2f0>)
 8001044:	4a7d      	ldr	r2, [pc, #500]	; (800123c <inSystem+0x2e8>)
 8001046:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001048:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <inSystem+0x2f0>)
 800104a:	2221      	movs	r2, #33	; 0x21
 800104c:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <inSystem+0x2f0>)
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <inSystem+0x2f0>)
 8001056:	2201      	movs	r2, #1
 8001058:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800105a:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <inSystem+0x2f0>)
 800105c:	2201      	movs	r2, #1
 800105e:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 8001060:	4878      	ldr	r0, [pc, #480]	; (8001244 <inSystem+0x2f0>)
 8001062:	f007 f993 	bl	800838c <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 8001066:	4877      	ldr	r0, [pc, #476]	; (8001244 <inSystem+0x2f0>)
 8001068:	f007 fa7a 	bl	8008560 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 800106c:	4b76      	ldr	r3, [pc, #472]	; (8001248 <inSystem+0x2f4>)
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <inSystem+0x2f8>)
 8001070:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001072:	4b75      	ldr	r3, [pc, #468]	; (8001248 <inSystem+0x2f4>)
 8001074:	2200      	movs	r2, #0
 8001076:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001078:	4b73      	ldr	r3, [pc, #460]	; (8001248 <inSystem+0x2f4>)
 800107a:	2201      	movs	r2, #1
 800107c:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800107e:	4b72      	ldr	r3, [pc, #456]	; (8001248 <inSystem+0x2f4>)
 8001080:	220a      	movs	r2, #10
 8001082:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <inSystem+0x2f4>)
 8001086:	2200      	movs	r2, #0
 8001088:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800108a:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <inSystem+0x2f4>)
 800108c:	2200      	movs	r2, #0
 800108e:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <inSystem+0x2f4>)
 8001092:	2202      	movs	r2, #2
 8001094:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001096:	486c      	ldr	r0, [pc, #432]	; (8001248 <inSystem+0x2f4>)
 8001098:	f006 fc5c 	bl	8007954 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 800109c:	2100      	movs	r1, #0
 800109e:	486a      	ldr	r0, [pc, #424]	; (8001248 <inSystem+0x2f4>)
 80010a0:	f006 fdad 	bl	8007bfe <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80010a4:	4b6a      	ldr	r3, [pc, #424]	; (8001250 <inSystem+0x2fc>)
 80010a6:	4a69      	ldr	r2, [pc, #420]	; (800124c <inSystem+0x2f8>)
 80010a8:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010aa:	4b69      	ldr	r3, [pc, #420]	; (8001250 <inSystem+0x2fc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <inSystem+0x2fc>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80010b6:	4b66      	ldr	r3, [pc, #408]	; (8001250 <inSystem+0x2fc>)
 80010b8:	220b      	movs	r2, #11
 80010ba:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010bc:	4b64      	ldr	r3, [pc, #400]	; (8001250 <inSystem+0x2fc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010c2:	4b63      	ldr	r3, [pc, #396]	; (8001250 <inSystem+0x2fc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010c8:	4b61      	ldr	r3, [pc, #388]	; (8001250 <inSystem+0x2fc>)
 80010ca:	2202      	movs	r2, #2
 80010cc:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 80010ce:	4860      	ldr	r0, [pc, #384]	; (8001250 <inSystem+0x2fc>)
 80010d0:	f006 fc40 	bl	8007954 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 80010d4:	2100      	movs	r1, #0
 80010d6:	485e      	ldr	r0, [pc, #376]	; (8001250 <inSystem+0x2fc>)
 80010d8:	f006 fd91 	bl	8007bfe <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 80010dc:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <inSystem+0x300>)
 80010de:	4a5b      	ldr	r2, [pc, #364]	; (800124c <inSystem+0x2f8>)
 80010e0:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <inSystem+0x300>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010e8:	4b5a      	ldr	r3, [pc, #360]	; (8001254 <inSystem+0x300>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 80010ee:	4b59      	ldr	r3, [pc, #356]	; (8001254 <inSystem+0x300>)
 80010f0:	220c      	movs	r2, #12
 80010f2:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010f4:	4b57      	ldr	r3, [pc, #348]	; (8001254 <inSystem+0x300>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <inSystem+0x300>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001100:	4b54      	ldr	r3, [pc, #336]	; (8001254 <inSystem+0x300>)
 8001102:	2202      	movs	r2, #2
 8001104:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001106:	4853      	ldr	r0, [pc, #332]	; (8001254 <inSystem+0x300>)
 8001108:	f006 fc24 	bl	8007954 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 800110c:	2100      	movs	r1, #0
 800110e:	4851      	ldr	r0, [pc, #324]	; (8001254 <inSystem+0x300>)
 8001110:	f006 fd75 	bl	8007bfe <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <inSystem+0x2d8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2201      	movs	r2, #1
 800111a:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <inSystem+0x304>)
 800111e:	4a4f      	ldr	r2, [pc, #316]	; (800125c <inSystem+0x308>)
 8001120:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <inSystem+0x304>)
 8001124:	2200      	movs	r2, #0
 8001126:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <inSystem+0x304>)
 800112a:	2201      	movs	r2, #1
 800112c:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <inSystem+0x304>)
 8001130:	2202      	movs	r2, #2
 8001132:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <inSystem+0x304>)
 8001136:	2200      	movs	r2, #0
 8001138:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <inSystem+0x304>)
 800113c:	2200      	movs	r2, #0
 800113e:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <inSystem+0x304>)
 8001142:	2202      	movs	r2, #2
 8001144:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 8001146:	4844      	ldr	r0, [pc, #272]	; (8001258 <inSystem+0x304>)
 8001148:	f006 fc04 	bl	8007954 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 800114c:	2100      	movs	r1, #0
 800114e:	4842      	ldr	r0, [pc, #264]	; (8001258 <inSystem+0x304>)
 8001150:	f006 fd55 	bl	8007bfe <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <inSystem+0x2d8>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <inSystem+0x30c>)
 800115e:	4a3b      	ldr	r2, [pc, #236]	; (800124c <inSystem+0x2f8>)
 8001160:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <inSystem+0x30c>)
 8001164:	2200      	movs	r2, #0
 8001166:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <inSystem+0x30c>)
 800116a:	2200      	movs	r2, #0
 800116c:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800116e:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <inSystem+0x30c>)
 8001170:	2201      	movs	r2, #1
 8001172:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001174:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <inSystem+0x30c>)
 8001176:	2200      	movs	r2, #0
 8001178:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <inSystem+0x30c>)
 800117c:	2200      	movs	r2, #0
 800117e:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <inSystem+0x30c>)
 8001182:	2202      	movs	r2, #2
 8001184:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <inSystem+0x310>)
 8001188:	4a35      	ldr	r2, [pc, #212]	; (8001260 <inSystem+0x30c>)
 800118a:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <inSystem+0x310>)
 800118e:	2202      	movs	r2, #2
 8001190:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 8001192:	4834      	ldr	r0, [pc, #208]	; (8001264 <inSystem+0x310>)
 8001194:	f005 fb16 	bl	80067c4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001198:	2106      	movs	r1, #6
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <inSystem+0x310>)
 800119c:	f006 f9ba 	bl	8007514 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <inSystem+0x314>)
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <inSystem+0x2f8>)
 80011a4:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <inSystem+0x314>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <inSystem+0x314>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <inSystem+0x314>)
 80011b4:	2203      	movs	r2, #3
 80011b6:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <inSystem+0x314>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <inSystem+0x314>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <inSystem+0x314>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <inSystem+0x318>)
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <inSystem+0x314>)
 80011ce:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <inSystem+0x318>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 80011d6:	4825      	ldr	r0, [pc, #148]	; (800126c <inSystem+0x318>)
 80011d8:	f005 faf4 	bl	80067c4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 80011dc:	2106      	movs	r1, #6
 80011de:	4823      	ldr	r0, [pc, #140]	; (800126c <inSystem+0x318>)
 80011e0:	f006 f998 	bl	8007514 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <inSystem+0x31c>)
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <inSystem+0x2c8>)
 80011e8:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <inSystem+0x31c>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <inSystem+0x31c>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <inSystem+0x31c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <inSystem+0x31c>)
 80011fe:	2209      	movs	r2, #9
 8001200:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <inSystem+0x31c>)
 8001204:	2200      	movs	r2, #0
 8001206:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <inSystem+0x31c>)
 800120a:	2203      	movs	r2, #3
 800120c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <inSystem+0x31c>)
 8001210:	f006 fba0 	bl	8007954 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <inSystem+0x320>)
 8001216:	e02f      	b.n	8001278 <inSystem+0x324>
 8001218:	2000023c 	.word	0x2000023c
 800121c:	40020000 	.word	0x40020000
 8001220:	20000518 	.word	0x20000518
 8001224:	20000538 	.word	0x20000538
 8001228:	200005a0 	.word	0x200005a0
 800122c:	200003f0 	.word	0x200003f0
 8001230:	20000248 	.word	0x20000248
 8001234:	20000310 	.word	0x20000310
 8001238:	40000c00 	.word	0x40000c00
 800123c:	41e00000 	.word	0x41e00000
 8001240:	20000254 	.word	0x20000254
 8001244:	20000328 	.word	0x20000328
 8001248:	20000284 	.word	0x20000284
 800124c:	40020800 	.word	0x40020800
 8001250:	20000278 	.word	0x20000278
 8001254:	2000029c 	.word	0x2000029c
 8001258:	20000290 	.word	0x20000290
 800125c:	40020c00 	.word	0x40020c00
 8001260:	200002a8 	.word	0x200002a8
 8001264:	200002d8 	.word	0x200002d8
 8001268:	200002b4 	.word	0x200002b4
 800126c:	200002e0 	.word	0x200002e0
 8001270:	2000026c 	.word	0x2000026c
 8001274:	20000260 	.word	0x20000260
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <inSystem+0x45c>)
 800127a:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <inSystem+0x460>)
 800127e:	2207      	movs	r2, #7
 8001280:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001282:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <inSystem+0x460>)
 8001284:	2202      	movs	r2, #2
 8001286:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <inSystem+0x460>)
 800128a:	2200      	movs	r2, #0
 800128c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <inSystem+0x460>)
 8001290:	220a      	movs	r2, #10
 8001292:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <inSystem+0x460>)
 8001296:	2200      	movs	r2, #0
 8001298:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800129a:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <inSystem+0x460>)
 800129c:	2203      	movs	r2, #3
 800129e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80012a0:	4844      	ldr	r0, [pc, #272]	; (80013b4 <inSystem+0x460>)
 80012a2:	f006 fb57 	bl	8007954 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <inSystem+0x464>)
 80012a8:	4a44      	ldr	r2, [pc, #272]	; (80013bc <inSystem+0x468>)
 80012aa:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <inSystem+0x464>)
 80012ae:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <inSystem+0x46c>)
 80012b0:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <inSystem+0x464>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80012b8:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <inSystem+0x464>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <inSystem+0x464>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 80012c4:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <inSystem+0x464>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <inSystem+0x464>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <inSystem+0x464>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <inSystem+0x464>)
 80012d8:	2200      	movs	r2, #0
 80012da:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 80012dc:	4836      	ldr	r0, [pc, #216]	; (80013b8 <inSystem+0x464>)
 80012de:	f008 f8a5 	bl	800942c <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 80012e2:	2106      	movs	r1, #6
 80012e4:	4834      	ldr	r0, [pc, #208]	; (80013b8 <inSystem+0x464>)
 80012e6:	f008 fd53 	bl	8009d90 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <inSystem+0x470>)
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f0:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <inSystem+0x470>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <inSystem+0x470>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <inSystem+0x470>)
 8001300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001304:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <inSystem+0x470>)
 8001308:	2210      	movs	r2, #16
 800130a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800130c:	482d      	ldr	r0, [pc, #180]	; (80013c4 <inSystem+0x470>)
 800130e:	f004 fda7 	bl	8005e60 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001312:	2106      	movs	r1, #6
 8001314:	482b      	ldr	r0, [pc, #172]	; (80013c4 <inSystem+0x470>)
 8001316:	f004 ff61 	bl	80061dc <TIM_SetPriority>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <inSystem+0x474>)
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <inSystem+0x478>)
 800131e:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <inSystem+0x474>)
 8001322:	2204      	movs	r2, #4
 8001324:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <inSystem+0x474>)
 8001328:	2202      	movs	r2, #2
 800132a:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <inSystem+0x474>)
 800132e:	2208      	movs	r2, #8
 8001330:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <inSystem+0x474>)
 8001334:	2201      	movs	r2, #1
 8001336:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <inSystem+0x474>)
 800133a:	2200      	movs	r2, #0
 800133c:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <inSystem+0x474>)
 8001340:	2202      	movs	r2, #2
 8001342:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <inSystem+0x47c>)
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <inSystem+0x478>)
 8001348:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <inSystem+0x47c>)
 800134c:	2204      	movs	r2, #4
 800134e:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <inSystem+0x47c>)
 8001352:	2202      	movs	r2, #2
 8001354:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <inSystem+0x47c>)
 8001358:	2209      	movs	r2, #9
 800135a:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <inSystem+0x47c>)
 800135e:	2201      	movs	r2, #1
 8001360:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <inSystem+0x47c>)
 8001364:	2200      	movs	r2, #0
 8001366:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <inSystem+0x47c>)
 800136a:	2202      	movs	r2, #2
 800136c:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <inSystem+0x480>)
 8001370:	4a19      	ldr	r2, [pc, #100]	; (80013d8 <inSystem+0x484>)
 8001372:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <inSystem+0x480>)
 8001376:	2232      	movs	r2, #50	; 0x32
 8001378:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <inSystem+0x480>)
 800137c:	2268      	movs	r2, #104	; 0x68
 800137e:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <inSystem+0x480>)
 8001382:	2201      	movs	r2, #1
 8001384:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <inSystem+0x488>)
 8001388:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <inSystem+0x474>)
 800138a:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <inSystem+0x488>)
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <inSystem+0x47c>)
 8001390:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <inSystem+0x488>)
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <inSystem+0x480>)
 8001396:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <inSystem+0x488>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <inSystem+0x488>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <inSystem+0x488>)
 80013a6:	f006 fc8d 	bl	8007cc4 <configMPUAccel>

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40020000 	.word	0x40020000
 80013b4:	20000260 	.word	0x20000260
 80013b8:	20000340 	.word	0x20000340
 80013bc:	40011000 	.word	0x40011000
 80013c0:	05f5e100 	.word	0x05f5e100
 80013c4:	200002e8 	.word	0x200002e8
 80013c8:	200002c0 	.word	0x200002c0
 80013cc:	40020400 	.word	0x40020400
 80013d0:	200002cc 	.word	0x200002cc
 80013d4:	200003d4 	.word	0x200003d4
 80013d8:	40005400 	.word	0x40005400
 80013dc:	200003e0 	.word	0x200003e0

080013e0 <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <vTask_Menu+0x100>)
 80013ea:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80013ec:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <vTask_Menu+0x104>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	f107 010c 	add.w	r1, r7, #12
 80013f4:	2300      	movs	r3, #0
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	f001 ff9f 	bl	800333c <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	f04f 32ff 	mov.w	r2, #4294967295
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2000      	movs	r0, #0
 800140e:	f003 fa3b 	bl	8004888 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	617b      	str	r3, [r7, #20]

		// El comando recibido solo tener el largo de 1 caracter
		if(cmd->functionType != -1){
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141e:	d052      	beq.n	80014c6 <vTask_Menu+0xe6>

			switch (cmd->functionType) {
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2b03      	cmp	r3, #3
 8001426:	d030      	beq.n	800148a <vTask_Menu+0xaa>
 8001428:	2b03      	cmp	r3, #3
 800142a:	dc43      	bgt.n	80014b4 <vTask_Menu+0xd4>
 800142c:	2b01      	cmp	r3, #1
 800142e:	d002      	beq.n	8001436 <vTask_Menu+0x56>
 8001430:	2b02      	cmp	r3, #2
 8001432:	d015      	beq.n	8001460 <vTask_Menu+0x80>
 8001434:	e03e      	b.n	80014b4 <vTask_Menu+0xd4>
				case 1:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <vTask_Menu+0x104>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	4929      	ldr	r1, [pc, #164]	; (80014e8 <vTask_Menu+0x108>)
 8001442:	f001 ff7b 	bl	800333c <xQueueGenericSend>
					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <vTask_Menu+0x10c>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <vTask_Menu+0x110>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	f003 fa95 	bl	8004988 <xTaskGenericNotify>


					break;
 800145e:	e03d      	b.n	80014dc <vTask_Menu+0xfc>
				}case 2:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <vTask_Menu+0x104>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	2300      	movs	r3, #0
 8001466:	f04f 32ff 	mov.w	r2, #4294967295
 800146a:	491f      	ldr	r1, [pc, #124]	; (80014e8 <vTask_Menu+0x108>)
 800146c:	f001 ff66 	bl	800333c <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <vTask_Menu+0x10c>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <vTask_Menu+0x114>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	f003 fa80 	bl	8004988 <xTaskGenericNotify>


					break;
 8001488:	e028      	b.n	80014dc <vTask_Menu+0xfc>
				}case 3:{
					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <vTask_Menu+0x104>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	4918      	ldr	r1, [pc, #96]	; (80014f8 <vTask_Menu+0x118>)
 8001496:	f001 ff51 	bl	800333c <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sMainMenu;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <vTask_Menu+0x10c>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <vTask_Menu+0x114>)
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	f003 fa6b 	bl	8004988 <xTaskGenericNotify>



					break;
 80014b2:	e013      	b.n	80014dc <vTask_Menu+0xfc>
				}
				default:{
					xQueueSend(xQueue_Print, &msg_option_n , portMAX_DELAY);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <vTask_Menu+0x104>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	490f      	ldr	r1, [pc, #60]	; (80014fc <vTask_Menu+0x11c>)
 80014c0:	f001 ff3c 	bl	800333c <xQueueGenericSend>
					continue;
 80014c4:	e00a      	b.n	80014dc <vTask_Menu+0xfc>

				}
			}

		}else{
			xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <vTask_Menu+0x104>)
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	490b      	ldr	r1, [pc, #44]	; (8001500 <vTask_Menu+0x120>)
 80014d2:	f001 ff33 	bl	800333c <xQueueGenericSend>
			//Aca se deberia notificar cambiar la variable next_state y notificar
			next_state = sMainMenu;
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <vTask_Menu+0x10c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80014dc:	e786      	b.n	80013ec <vTask_Menu+0xc>
 80014de:	bf00      	nop
 80014e0:	0800f72c 	.word	0x0800f72c
 80014e4:	20000230 	.word	0x20000230
 80014e8:	20000004 	.word	0x20000004
 80014ec:	20000506 	.word	0x20000506
 80014f0:	20000228 	.word	0x20000228
 80014f4:	20000218 	.word	0x20000218
 80014f8:	20000008 	.word	0x20000008
 80014fc:	2000000c 	.word	0x2000000c
 8001500:	20000000 	.word	0x20000000

08001504 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 8001504:	b580      	push	{r7, lr}
 8001506:	b096      	sub	sp, #88	; 0x58
 8001508:	af02      	add	r7, sp, #8
 800150a:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
	command_t cmd = {0};
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2244      	movs	r2, #68	; 0x44
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f008 ff93 	bl	800a444 <memset>

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	f003 f9ac 	bl	8004888 <xTaskGenericNotifyWait>
 8001530:	64f8      	str	r0, [r7, #76]	; 0x4c

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 8001532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d1f2      	bne.n	800151e <vTask_Commands+0x1a>

		   process_command(&cmd);
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f8b1 	bl	80016a4 <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001542:	e7ec      	b.n	800151e <vTask_Commands+0x1a>

08001544 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2000      	movs	r0, #0
 800155a:	f003 f995 	bl	8004888 <xTaskGenericNotifyWait>


		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <vTask_Stop+0x40>)
 8001560:	f000 ff5d 	bl	800241e <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <vTask_Stop+0x44>)
 8001566:	f005 f8d3 	bl	8006710 <stopTimer>

		// Bajamos las banderas de movimiento alguno
		flag_Go_Straigh   = RESET;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <vTask_Stop+0x48>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <vTask_Stop+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <vTask_Stop+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <vTask_Stop+0x54>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001582:	e7e3      	b.n	800154c <vTask_Stop+0x8>
 8001584:	200003f0 	.word	0x200003f0
 8001588:	200002e8 	.word	0x200002e8
 800158c:	20000509 	.word	0x20000509
 8001590:	2000050a 	.word	0x2000050a
 8001594:	2000050c 	.word	0x2000050c
 8001598:	2000050d 	.word	0x2000050d

0800159c <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f003 f969 	bl	8004888 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <vTask_Go+0x44>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <vTask_Go+0x48>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <vTask_Go+0x44>)
 80015c4:	705a      	strb	r2, [r3, #1]

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <vTask_Go+0x44>)
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <vTask_Go+0x4c>)
 80015cc:	f000 fe3c 	bl	8002248 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <vTask_Go+0x50>)
 80015d2:	f005 f88b 	bl	80066ec <startTimer>

		// Levantamos la bandera correspondiente a este comando

		flag_Go_Straigh = SET;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <vTask_Go+0x54>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015dc:	e7e2      	b.n	80015a4 <vTask_Go+0x8>
 80015de:	bf00      	nop
 80015e0:	20000504 	.word	0x20000504
 80015e4:	20000478 	.word	0x20000478
 80015e8:	200003f0 	.word	0x200003f0
 80015ec:	200002e8 	.word	0x200002e8
 80015f0:	20000509 	.word	0x20000509

080015f4 <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af06      	add	r7, sp, #24
 80015fa:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2000      	movs	r0, #0
 800160a:	f003 f93d 	bl	8004888 <xTaskGenericNotifyWait>

		go(handler_Motor_Array,
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <vTask_Control+0x54>)
 8001610:	ed93 7b00 	vldr	d7, [r3]
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <vTask_Control+0x58>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	f8ad 3014 	strh.w	r3, [sp, #20]
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <vTask_Control+0x5c>)
 800161e:	9304      	str	r3, [sp, #16]
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <vTask_Control+0x60>)
 8001622:	9303      	str	r3, [sp, #12]
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <vTask_Control+0x64>)
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <vTask_Control+0x68>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <vTask_Control+0x6c>)
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	eeb0 0a47 	vmov.f32	s0, s14
 8001634:	eef0 0a67 	vmov.f32	s1, s15
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <vTask_Control+0x70>)
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <vTask_Control+0x74>)
 800163c:	490b      	ldr	r1, [pc, #44]	; (800166c <vTask_Control+0x78>)
 800163e:	480c      	ldr	r0, [pc, #48]	; (8001670 <vTask_Control+0x7c>)
 8001640:	f001 f996 	bl	8002970 <go>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001644:	e7da      	b.n	80015fc <vTask_Control+0x8>
 8001646:	bf00      	nop
 8001648:	200005f0 	.word	0x200005f0
 800164c:	20000504 	.word	0x20000504
 8001650:	200004c4 	.word	0x200004c4
 8001654:	2000050b 	.word	0x2000050b
 8001658:	20000508 	.word	0x20000508
 800165c:	20000507 	.word	0x20000507
 8001660:	20000518 	.word	0x20000518
 8001664:	20000538 	.word	0x20000538
 8001668:	200005a0 	.word	0x200005a0
 800166c:	200003e0 	.word	0x200003e0
 8001670:	200003f0 	.word	0x200003f0

08001674 <vTask_Print>:

////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Print( void * pvParameters ){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <vTask_Print+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f107 010c 	add.w	r1, r7, #12
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	4618      	mov	r0, r3
 800168a:	f001 ffff 	bl	800368c <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4619      	mov	r1, r3
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <vTask_Print+0x2c>)
 8001694:	f008 fab6 	bl	8009c04 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001698:	e7f0      	b.n	800167c <vTask_Print+0x8>
 800169a:	bf00      	nop
 800169c:	20000230 	.word	0x20000230
 80016a0:	20000340 	.word	0x20000340

080016a4 <process_command>:
   }
}

void process_command (command_t *cmd){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f815 	bl	80016dc <extract_command>


	if (next_state == sMainMenu){
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <process_command+0x30>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <process_command+0x28>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <process_command+0x34>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2303      	movs	r3, #3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f003 f95e 	bl	8004988 <xTaskGenericNotify>
//		//Notificamos a la tarea en el estado de parada.
//		xTaskNotify(xHandleTask_Stop,0, eNoAction);
	}


}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000506 	.word	0x20000506
 80016d8:	20000218 	.word	0x20000218

080016dc <extract_command>:


int extract_command (command_t *cmd){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <extract_command+0xa0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 f93c 	bl	800396a <uxQueueMessagesWaiting>
 80016f2:	4603      	mov	r3, r0
 80016f4:	613b      	str	r3, [r7, #16]
	if (status == 0){
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <extract_command+0x26>
		return -1;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	e037      	b.n	8001772 <extract_command+0x96>
	}

	do{
		// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
		status = xQueueReceive(xQueue_InputData, &item,0);
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <extract_command+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f107 010f 	add.w	r1, r7, #15
 800170a:	2200      	movs	r2, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f001 ffbd 	bl	800368c <xQueueReceive>
 8001712:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE){
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d106      	bne.n	8001728 <extract_command+0x4c>

			//vamos llenando el arreglo del comando
			cmd->payload[counter_j++] = item;
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	75fa      	strb	r2, [r7, #23]
 8001720:	461a      	mov	r2, r3
 8001722:	7bf9      	ldrb	r1, [r7, #15]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	5499      	strb	r1, [r3, r2]

		}
	}while(item != '#');
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b23      	cmp	r3, #35	; 0x23
 800172c:	d1e9      	bne.n	8001702 <extract_command+0x26>

	cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	2100      	movs	r1, #0
 8001734:	54d1      	strb	r1, [r2, r3]

	// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//	sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

	extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <extract_command+0xa4>)
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <extract_command+0xa8>)
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <extract_command+0xac>)
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <extract_command+0xb0>)
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <extract_command+0xb4>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <extract_command+0xb8>)
 800174a:	4913      	ldr	r1, [pc, #76]	; (8001798 <extract_command+0xbc>)
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f001 f9bb 	bl	8002ac8 <extract_info>

	if (strcmp(data, "sGo") == 0){
 8001752:	4912      	ldr	r1, [pc, #72]	; (800179c <extract_command+0xc0>)
 8001754:	4810      	ldr	r0, [pc, #64]	; (8001798 <extract_command+0xbc>)
 8001756:	f7fe fd43 	bl	80001e0 <strcmp>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <extract_command+0x8c>
		cmd->functionType = 1;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	e003      	b.n	8001770 <extract_command+0x94>
	}else{
		cmd->functionType = -1; // Si se llega aca es porque se mando el comando incorrecto
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 32ff 	mov.w	r2, #4294967295
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
	}

	return 0;
 8001770:	2300      	movs	r3, #0

}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000234 	.word	0x20000234
 8001780:	20000480 	.word	0x20000480
 8001784:	2000047c 	.word	0x2000047c
 8001788:	20000478 	.word	0x20000478
 800178c:	2000046c 	.word	0x2000046c
 8001790:	20000460 	.word	0x20000460
 8001794:	20000454 	.word	0x20000454
 8001798:	20000484 	.word	0x20000484
 800179c:	0800f7d8 	.word	0x0800f7d8

080017a0 <callback_extInt1>:

// INTERRUPCIONES DE EXTI
void callback_extInt1(void){
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <callback_extInt1+0x1c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	791a      	ldrb	r2, [r3, #4]
 80017aa:	3201      	adds	r2, #1
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	711a      	strb	r2, [r3, #4]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200003f0 	.word	0x200003f0

080017c0 <callback_extInt3>:

void callback_extInt3(void){
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <callback_extInt3+0x1c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	791a      	ldrb	r2, [r3, #4]
 80017ca:	3201      	adds	r2, #1
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	711a      	strb	r2, [r3, #4]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200003f0 	.word	0x200003f0

080017e0 <usart1Rx_Callback>:




//Interripcion USART2
void usart1Rx_Callback(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af02      	add	r7, sp, #8

	rxData = getRxData();
 80017e6:	f008 fa35 	bl	8009c54 <getRxData>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <usart1Rx_Callback+0x94>)
 80017f0:	701a      	strb	r2, [r3, #0]
	writeChar(&handlerUSART, rxData);
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <usart1Rx_Callback+0x94>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	481f      	ldr	r0, [pc, #124]	; (8001878 <usart1Rx_Callback+0x98>)
 80017fa:	f008 f9eb 	bl	8009bd4 <writeChar>
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <usart1Rx_Callback+0x9c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f002 f9dd 	bl	8003bc6 <xQueueIsQueueFullFromISR>
 800180c:	4603      	mov	r3, r0
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <usart1Rx_Callback+0xa0>)
 8001810:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <usart1Rx_Callback+0xa0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d007      	beq.n	800182a <usart1Rx_Callback+0x4a>

		xQueueSendToBackFromISR(xQueue_InputData,
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <usart1Rx_Callback+0x9c>)
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	2200      	movs	r2, #0
 8001822:	4914      	ldr	r1, [pc, #80]	; (8001874 <usart1Rx_Callback+0x94>)
 8001824:	f001 fe88 	bl	8003538 <xQueueGenericSendFromISR>
 8001828:	e011      	b.n	800184e <usart1Rx_Callback+0x6e>
								NULL);

	}else{


		if (rxData == '#'){
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <usart1Rx_Callback+0x94>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b23      	cmp	r3, #35	; 0x23
 8001830:	d10d      	bne.n	800184e <usart1Rx_Callback+0x6e>

			xQueueReceiveFromISR(xQueue_InputData,
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <usart1Rx_Callback+0x9c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	490e      	ldr	r1, [pc, #56]	; (8001874 <usart1Rx_Callback+0x94>)
 800183a:	4618      	mov	r0, r3
 800183c:	f002 f806 	bl	800384c <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <usart1Rx_Callback+0x9c>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	2200      	movs	r2, #0
 8001848:	490a      	ldr	r1, [pc, #40]	; (8001874 <usart1Rx_Callback+0x94>)
 800184a:	f001 fe75 	bl	8003538 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#'){
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <usart1Rx_Callback+0x94>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b23      	cmp	r3, #35	; 0x23
 8001854:	d10a      	bne.n	800186c <usart1Rx_Callback+0x8c>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <usart1Rx_Callback+0xa4>)
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2300      	movs	r3, #0
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2300      	movs	r3, #0
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	f003 f96e 	bl	8004b48 <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000450 	.word	0x20000450
 8001878:	20000340 	.word	0x20000340
 800187c:	20000234 	.word	0x20000234
 8001880:	20000214 	.word	0x20000214
 8001884:	20000220 	.word	0x20000220

08001888 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <BasicTimer2_Callback+0x4c>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <BasicTimer2_Callback+0x50>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <BasicTimer2_Callback+0x54>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d803      	bhi.n	80018aa <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <BasicTimer2_Callback+0x58>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e005      	b.n	80018b6 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <BasicTimer2_Callback+0x54>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <BasicTimer2_Callback+0x54>)
 80018b4:	801a      	strh	r2, [r3, #0]
	xTaskNotifyFromISR(xHandleTask_Control,
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <BasicTimer2_Callback+0x5c>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2200      	movs	r2, #0
 80018c6:	2100      	movs	r1, #0
 80018c8:	f003 f93e 	bl	8004b48 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000507 	.word	0x20000507
 80018d8:	20000010 	.word	0x20000010
 80018dc:	20000510 	.word	0x20000510
 80018e0:	20000508 	.word	0x20000508
 80018e4:	2000022c 	.word	0x2000022c

080018e8 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 80018f4:	23c8      	movs	r3, #200	; 0xc8
 80018f6:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

	switch (axis) {
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d061      	beq.n	80019d8 <calibracionGyros+0xf0>
 8001914:	2b02      	cmp	r3, #2
 8001916:	dc70      	bgt.n	80019fa <calibracionGyros+0x112>
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <calibracionGyros+0x60>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d037      	beq.n	8001990 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001920:	e06b      	b.n	80019fa <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f006 fb58 	bl	8007fd8 <readGyro_X>
 8001928:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 800192c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 800193c:	7efb      	ldrb	r3, [r7, #27]
 800193e:	3301      	adds	r3, #1
 8001940:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001942:	2001      	movs	r0, #1
 8001944:	f004 fc12 	bl	800616c <delay_ms>
			while (contador < numMedidas){
 8001948:	7efb      	ldrb	r3, [r7, #27]
 800194a:	b29b      	uxth	r3, r3
 800194c:	8a7a      	ldrh	r2, [r7, #18]
 800194e:	429a      	cmp	r2, r3
 8001950:	d8e7      	bhi.n	8001922 <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001952:	8a7b      	ldrh	r3, [r7, #18]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001964:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001968:	e048      	b.n	80019fc <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f006 fbbc 	bl	80080e8 <readGyro_Y>
 8001970:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001974:	ed97 7a07 	vldr	s14, [r7, #28]
 8001978:	edd7 7a03 	vldr	s15, [r7, #12]
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001984:	7efb      	ldrb	r3, [r7, #27]
 8001986:	3301      	adds	r3, #1
 8001988:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 800198a:	2001      	movs	r0, #1
 800198c:	f004 fbee 	bl	800616c <delay_ms>
			while (contador < numMedidas){
 8001990:	7efb      	ldrb	r3, [r7, #27]
 8001992:	b29b      	uxth	r3, r3
 8001994:	8a7a      	ldrh	r2, [r7, #18]
 8001996:	429a      	cmp	r2, r3
 8001998:	d8e7      	bhi.n	800196a <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 800199a:	8a7b      	ldrh	r3, [r7, #18]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80019a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ac:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80019b0:	e024      	b.n	80019fc <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f006 fc20 	bl	80081f8 <readGyro_Z>
 80019b8:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 80019bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80019c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 80019cc:	7efb      	ldrb	r3, [r7, #27]
 80019ce:	3301      	adds	r3, #1
 80019d0:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 80019d2:	2001      	movs	r0, #1
 80019d4:	f004 fbca 	bl	800616c <delay_ms>
			while (contador < numMedidas){
 80019d8:	7efb      	ldrb	r3, [r7, #27]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	8a7a      	ldrh	r2, [r7, #18]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d8e7      	bhi.n	80019b2 <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 80019e2:	8a7b      	ldrh	r3, [r7, #18]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80019f8:	e000      	b.n	80019fc <calibracionGyros+0x114>
			break;
 80019fa:	bf00      	nop
		}
	}


	return promedio;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	ee07 3a90 	vmov	s15, r3
}
 8001a02:	eeb0 0a67 	vmov.f32	s0, s15
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6178      	str	r0, [r7, #20]
 8001a14:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a18:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a1c:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f006 fbea 	bl	80081f8 <readGyro_Z>
 8001a24:	ee10 3a10 	vmov	r3, s0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fda5 	bl	8000578 <__aeabi_f2d>
 8001a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a32:	f7fe fc41 	bl	80002b8 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8eb 	bl	8000c18 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001a46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a4a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a52:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001ab8 <getAngle+0xac>
 8001a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001a66:	69b8      	ldr	r0, [r7, #24]
 8001a68:	f7fe fd86 	bl	8000578 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <getAngle+0xb0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd7c 	bl	8000578 <__aeabi_f2d>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fc19 	bl	80002bc <__adddf3>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f8c1 	bl	8000c18 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <getAngle+0xb0>)
 8001a9a:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <getAngle+0xb4>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <getAngle+0xb8>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <getAngle+0xb8>)
 8001aac:	801a      	strh	r2, [r3, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	447a0000 	.word	0x447a0000
 8001abc:	200005f8 	.word	0x200005f8
 8001ac0:	200002e8 	.word	0x200002e8
 8001ac4:	2000050e 	.word	0x2000050e

08001ac8 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	ed2d 8b02 	vpush	{d8}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001ad8:	793b      	ldrb	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 81d4 	bne.w	8001e88 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001ae0:	4bab      	ldr	r3, [pc, #684]	; (8001d90 <get_measuremets_parameters+0x2c8>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4bab      	ldr	r3, [pc, #684]	; (8001d94 <get_measuremets_parameters+0x2cc>)
 8001ae8:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001aea:	4bab      	ldr	r3, [pc, #684]	; (8001d98 <get_measuremets_parameters+0x2d0>)
 8001aec:	edd3 6a00 	vldr	s13, [r3]
 8001af0:	4baa      	ldr	r3, [pc, #680]	; (8001d9c <get_measuremets_parameters+0x2d4>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b00:	4ba7      	ldr	r3, [pc, #668]	; (8001da0 <get_measuremets_parameters+0x2d8>)
 8001b02:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001b06:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <get_measuremets_parameters+0x2d8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd34 	bl	8000578 <__aeabi_f2d>
 8001b10:	a39b      	add	r3, pc, #620	; (adr r3, 8001d80 <get_measuremets_parameters+0x2b8>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd87 	bl	8000628 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <get_measuremets_parameters+0x2dc>)
 8001b28:	f7fe fea8 	bl	800087c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001b36:	4b98      	ldr	r3, [pc, #608]	; (8001d98 <get_measuremets_parameters+0x2d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd1c 	bl	8000578 <__aeabi_f2d>
 8001b40:	a38f      	add	r3, pc, #572	; (adr r3, 8001d80 <get_measuremets_parameters+0x2b8>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd6f 	bl	8000628 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b93      	ldr	r3, [pc, #588]	; (8001da4 <get_measuremets_parameters+0x2dc>)
 8001b58:	f7fe fe90 	bl	800087c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	ec43 2b17 	vmov	d7, r2, r3
 8001b64:	eeb0 0a47 	vmov.f32	s0, s14
 8001b68:	eef0 0a67 	vmov.f32	s1, s15
 8001b6c:	f00b fbdc 	bl	800d328 <sin>
 8001b70:	eeb0 8a40 	vmov.f32	s16, s0
 8001b74:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001b78:	4b87      	ldr	r3, [pc, #540]	; (8001d98 <get_measuremets_parameters+0x2d0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcfb 	bl	8000578 <__aeabi_f2d>
 8001b82:	a37f      	add	r3, pc, #508	; (adr r3, 8001d80 <get_measuremets_parameters+0x2b8>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fd4e 	bl	8000628 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b82      	ldr	r3, [pc, #520]	; (8001da4 <get_measuremets_parameters+0x2dc>)
 8001b9a:	f7fe fe6f 	bl	800087c <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	ec43 2b17 	vmov	d7, r2, r3
 8001ba6:	eeb0 0a47 	vmov.f32	s0, s14
 8001baa:	eef0 0a67 	vmov.f32	s1, s15
 8001bae:	f00b fb1f 	bl	800d1f0 <cos>
 8001bb2:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb6:	eef0 7a60 	vmov.f32	s15, s1
 8001bba:	eeb0 1a47 	vmov.f32	s2, s14
 8001bbe:	eef0 1a67 	vmov.f32	s3, s15
 8001bc2:	eeb0 0a48 	vmov.f32	s0, s16
 8001bc6:	eef0 0a68 	vmov.f32	s1, s17
 8001bca:	f00b fc05 	bl	800d3d8 <atan2>
 8001bce:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001bd2:	a36d      	add	r3, pc, #436	; (adr r3, 8001d88 <get_measuremets_parameters+0x2c0>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fd26 	bl	8000628 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bea:	f7fe fb67 	bl	80002bc <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001bfe:	a360      	add	r3, pc, #384	; (adr r3, 8001d80 <get_measuremets_parameters+0x2b8>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fd10 	bl	8000628 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <get_measuremets_parameters+0x2dc>)
 8001c16:	f7fe fe31 	bl	800087c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	ec43 2b17 	vmov	d7, r2, r3
 8001c22:	eeb0 0a47 	vmov.f32	s0, s14
 8001c26:	eef0 0a67 	vmov.f32	s1, s15
 8001c2a:	f00b fb7d 	bl	800d328 <sin>
 8001c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8001c32:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c3c:	a350      	add	r3, pc, #320	; (adr r3, 8001d80 <get_measuremets_parameters+0x2b8>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fcf1 	bl	8000628 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <get_measuremets_parameters+0x2dc>)
 8001c54:	f7fe fe12 	bl	800087c <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	ec43 2b17 	vmov	d7, r2, r3
 8001c60:	eeb0 0a47 	vmov.f32	s0, s14
 8001c64:	eef0 0a67 	vmov.f32	s1, s15
 8001c68:	f00b fac2 	bl	800d1f0 <cos>
 8001c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c70:	eef0 7a60 	vmov.f32	s15, s1
 8001c74:	eeb0 1a47 	vmov.f32	s2, s14
 8001c78:	eef0 1a67 	vmov.f32	s3, s15
 8001c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8001c80:	eef0 0a68 	vmov.f32	s1, s17
 8001c84:	f00b fba8 	bl	800d3d8 <atan2>
 8001c88:	eeb0 7a40 	vmov.f32	s14, s0
 8001c8c:	eef0 7a60 	vmov.f32	s15, s1
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	ed93 7b02 	vldr	d7, [r3, #8]
 8001c9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca0:	eef0 0a67 	vmov.f32	s1, s15
 8001ca4:	f00b fb40 	bl	800d328 <sin>
 8001ca8:	eeb0 8a40 	vmov.f32	s16, s0
 8001cac:	eef0 8a60 	vmov.f32	s17, s1
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	ed93 7b02 	vldr	d7, [r3, #8]
 8001cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001cba:	eef0 0a67 	vmov.f32	s1, s15
 8001cbe:	f00b fa97 	bl	800d1f0 <cos>
 8001cc2:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc6:	eef0 7a60 	vmov.f32	s15, s1
 8001cca:	eeb0 1a47 	vmov.f32	s2, s14
 8001cce:	eef0 1a67 	vmov.f32	s3, s15
 8001cd2:	eeb0 0a48 	vmov.f32	s0, s16
 8001cd6:	eef0 0a68 	vmov.f32	s1, s17
 8001cda:	f00b fb7d 	bl	800d3d8 <atan2>
 8001cde:	eeb0 7a40 	vmov.f32	s14, s0
 8001ce2:	eef0 7a60 	vmov.f32	s15, s1
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8001cec:	797b      	ldrb	r3, [r7, #5]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d15e      	bne.n	8001db0 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <get_measuremets_parameters+0x2e0>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <get_measuremets_parameters+0x2e4>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d32:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <get_measuremets_parameters+0x2cc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d52:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <get_measuremets_parameters+0x2cc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d76:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d7a:	e065      	b.n	8001e48 <get_measuremets_parameters+0x380>
 8001d7c:	f3af 8000 	nop.w
 8001d80:	54442d18 	.word	0x54442d18
 8001d84:	400921fb 	.word	0x400921fb
 8001d88:	1a63c1f8 	.word	0x1a63c1f8
 8001d8c:	404ca5dc 	.word	0x404ca5dc
 8001d90:	2000050e 	.word	0x2000050e
 8001d94:	20000514 	.word	0x20000514
 8001d98:	200005f8 	.word	0x200005f8
 8001d9c:	20000510 	.word	0x20000510
 8001da0:	200005fc 	.word	0x200005fc
 8001da4:	40668000 	.word	0x40668000
 8001da8:	20000014 	.word	0x20000014
 8001dac:	20000018 	.word	0x20000018

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	791b      	ldrb	r3, [r3, #4]
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <get_measuremets_parameters+0x3a8>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	eef1 7a67 	vneg.f32	s15, s15
 8001dd0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	791b      	ldrb	r3, [r3, #4]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <get_measuremets_parameters+0x3ac>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	eef1 7a67 	vneg.f32	s15, s15
 8001df8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e04:	eef1 6a67 	vneg.f32	s13, s15
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <get_measuremets_parameters+0x3b0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e1c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3304      	adds	r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e2a:	eef1 6a67 	vneg.f32	s13, s15
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <get_measuremets_parameters+0x3b0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e44:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <get_measuremets_parameters+0x3b4>)
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <get_measuremets_parameters+0x3b8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <get_measuremets_parameters+0x3bc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 8001e6e:	e1d8      	b.n	8002222 <get_measuremets_parameters+0x75a>
 8001e70:	20000014 	.word	0x20000014
 8001e74:	20000018 	.word	0x20000018
 8001e78:	20000514 	.word	0x20000514
 8001e7c:	200005f8 	.word	0x200005f8
 8001e80:	2000050e 	.word	0x2000050e
 8001e84:	20000510 	.word	0x20000510
	else if(operation_mode_dir.Mode == Roll)
 8001e88:	793b      	ldrb	r3, [r7, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f040 81c8 	bne.w	8002220 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 8001e90:	4bad      	ldr	r3, [pc, #692]	; (8002148 <get_measuremets_parameters+0x680>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4bad      	ldr	r3, [pc, #692]	; (800214c <get_measuremets_parameters+0x684>)
 8001e98:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 8001e9a:	4bad      	ldr	r3, [pc, #692]	; (8002150 <get_measuremets_parameters+0x688>)
 8001e9c:	edd3 6a00 	vldr	s13, [r3]
 8001ea0:	4bac      	ldr	r3, [pc, #688]	; (8002154 <get_measuremets_parameters+0x68c>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb0:	4ba9      	ldr	r3, [pc, #676]	; (8002158 <get_measuremets_parameters+0x690>)
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001eb6:	4ba8      	ldr	r3, [pc, #672]	; (8002158 <get_measuremets_parameters+0x690>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb5c 	bl	8000578 <__aeabi_f2d>
 8001ec0:	a39d      	add	r3, pc, #628	; (adr r3, 8002138 <get_measuremets_parameters+0x670>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f7fe fbaf 	bl	8000628 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	4ba1      	ldr	r3, [pc, #644]	; (800215c <get_measuremets_parameters+0x694>)
 8001ed8:	f7fe fcd0 	bl	800087c <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001ee6:	4b9a      	ldr	r3, [pc, #616]	; (8002150 <get_measuremets_parameters+0x688>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb44 	bl	8000578 <__aeabi_f2d>
 8001ef0:	a391      	add	r3, pc, #580	; (adr r3, 8002138 <get_measuremets_parameters+0x670>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fb97 	bl	8000628 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b95      	ldr	r3, [pc, #596]	; (800215c <get_measuremets_parameters+0x694>)
 8001f08:	f7fe fcb8 	bl	800087c <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b17 	vmov	d7, r2, r3
 8001f14:	eeb0 0a47 	vmov.f32	s0, s14
 8001f18:	eef0 0a67 	vmov.f32	s1, s15
 8001f1c:	f00b fa04 	bl	800d328 <sin>
 8001f20:	eeb0 8a40 	vmov.f32	s16, s0
 8001f24:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f28:	4b89      	ldr	r3, [pc, #548]	; (8002150 <get_measuremets_parameters+0x688>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb23 	bl	8000578 <__aeabi_f2d>
 8001f32:	a381      	add	r3, pc, #516	; (adr r3, 8002138 <get_measuremets_parameters+0x670>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb76 	bl	8000628 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4b84      	ldr	r3, [pc, #528]	; (800215c <get_measuremets_parameters+0x694>)
 8001f4a:	f7fe fc97 	bl	800087c <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	ec43 2b17 	vmov	d7, r2, r3
 8001f56:	eeb0 0a47 	vmov.f32	s0, s14
 8001f5a:	eef0 0a67 	vmov.f32	s1, s15
 8001f5e:	f00b f947 	bl	800d1f0 <cos>
 8001f62:	eeb0 7a40 	vmov.f32	s14, s0
 8001f66:	eef0 7a60 	vmov.f32	s15, s1
 8001f6a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f6e:	eef0 1a67 	vmov.f32	s3, s15
 8001f72:	eeb0 0a48 	vmov.f32	s0, s16
 8001f76:	eef0 0a68 	vmov.f32	s1, s17
 8001f7a:	f00b fa2d 	bl	800d3d8 <atan2>
 8001f7e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f82:	a36f      	add	r3, pc, #444	; (adr r3, 8002140 <get_measuremets_parameters+0x678>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb4e 	bl	8000628 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f9a:	f7fe f98f 	bl	80002bc <__adddf3>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fae:	a362      	add	r3, pc, #392	; (adr r3, 8002138 <get_measuremets_parameters+0x670>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fb38 	bl	8000628 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <get_measuremets_parameters+0x694>)
 8001fc6:	f7fe fc59 	bl	800087c <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	ec43 2b17 	vmov	d7, r2, r3
 8001fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd6:	eef0 0a67 	vmov.f32	s1, s15
 8001fda:	f00b f9a5 	bl	800d328 <sin>
 8001fde:	eeb0 8a40 	vmov.f32	s16, s0
 8001fe2:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fec:	a352      	add	r3, pc, #328	; (adr r3, 8002138 <get_measuremets_parameters+0x670>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe fb19 	bl	8000628 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <get_measuremets_parameters+0x694>)
 8002004:	f7fe fc3a 	bl	800087c <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b17 	vmov	d7, r2, r3
 8002010:	eeb0 0a47 	vmov.f32	s0, s14
 8002014:	eef0 0a67 	vmov.f32	s1, s15
 8002018:	f00b f8ea 	bl	800d1f0 <cos>
 800201c:	eeb0 7a40 	vmov.f32	s14, s0
 8002020:	eef0 7a60 	vmov.f32	s15, s1
 8002024:	eeb0 1a47 	vmov.f32	s2, s14
 8002028:	eef0 1a67 	vmov.f32	s3, s15
 800202c:	eeb0 0a48 	vmov.f32	s0, s16
 8002030:	eef0 0a68 	vmov.f32	s1, s17
 8002034:	f00b f9d0 	bl	800d3d8 <atan2>
 8002038:	eeb0 7a40 	vmov.f32	s14, s0
 800203c:	eef0 7a60 	vmov.f32	s15, s1
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	ed93 7b02 	vldr	d7, [r3, #8]
 800204c:	eeb0 0a47 	vmov.f32	s0, s14
 8002050:	eef0 0a67 	vmov.f32	s1, s15
 8002054:	f00b f968 	bl	800d328 <sin>
 8002058:	eeb0 8a40 	vmov.f32	s16, s0
 800205c:	eef0 8a60 	vmov.f32	s17, s1
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	ed93 7b02 	vldr	d7, [r3, #8]
 8002066:	eeb0 0a47 	vmov.f32	s0, s14
 800206a:	eef0 0a67 	vmov.f32	s1, s15
 800206e:	f00b f8bf 	bl	800d1f0 <cos>
 8002072:	eeb0 7a40 	vmov.f32	s14, s0
 8002076:	eef0 7a60 	vmov.f32	s15, s1
 800207a:	eeb0 1a47 	vmov.f32	s2, s14
 800207e:	eef0 1a67 	vmov.f32	s3, s15
 8002082:	eeb0 0a48 	vmov.f32	s0, s16
 8002086:	eef0 0a68 	vmov.f32	s1, s17
 800208a:	f00b f9a5 	bl	800d3d8 <atan2>
 800208e:	eeb0 7a40 	vmov.f32	s14, s0
 8002092:	eef0 7a60 	vmov.f32	s15, s1
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 800209c:	797b      	ldrb	r3, [r7, #5]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d162      	bne.n	8002168 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	791b      	ldrb	r3, [r3, #4]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <get_measuremets_parameters+0x698>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3304      	adds	r3, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <get_measuremets_parameters+0x69c>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3304      	adds	r3, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	eef1 7a67 	vneg.f32	s15, s15
 80020e6:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	edd3 6a03 	vldr	s13, [r3, #12]
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <get_measuremets_parameters+0x684>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002106:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	edd3 7a03 	vldr	s15, [r3, #12]
 8002114:	eef1 6a67 	vneg.f32	s13, s15
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <get_measuremets_parameters+0x684>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3304      	adds	r3, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002132:	e061      	b.n	80021f8 <get_measuremets_parameters+0x730>
 8002134:	f3af 8000 	nop.w
 8002138:	54442d18 	.word	0x54442d18
 800213c:	400921fb 	.word	0x400921fb
 8002140:	1a63c1f8 	.word	0x1a63c1f8
 8002144:	404ca5dc 	.word	0x404ca5dc
 8002148:	2000050e 	.word	0x2000050e
 800214c:	20000514 	.word	0x20000514
 8002150:	200005f8 	.word	0x200005f8
 8002154:	20000510 	.word	0x20000510
 8002158:	200005fc 	.word	0x200005fc
 800215c:	40668000 	.word	0x40668000
 8002160:	20000014 	.word	0x20000014
 8002164:	20000018 	.word	0x20000018
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <get_measuremets_parameters+0x768>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	eef1 7a67 	vneg.f32	s15, s15
 8002188:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3304      	adds	r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <get_measuremets_parameters+0x76c>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3304      	adds	r3, #4
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80021b8:	eef1 6a67 	vneg.f32	s13, s15
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <get_measuremets_parameters+0x770>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d0:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3304      	adds	r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	edd3 6a03 	vldr	s13, [r3, #12]
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <get_measuremets_parameters+0x770>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3304      	adds	r3, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f4:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3304      	adds	r3, #4
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <get_measuremets_parameters+0x774>)
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <get_measuremets_parameters+0x778>)
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <get_measuremets_parameters+0x77c>)
 800221a:	2200      	movs	r2, #0
 800221c:	801a      	strh	r2, [r3, #0]
}
 800221e:	e000      	b.n	8002222 <get_measuremets_parameters+0x75a>
	else{  __NOP(); }
 8002220:	bf00      	nop
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	ecbd 8b02 	vpop	{d8}
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000014 	.word	0x20000014
 8002234:	20000018 	.word	0x20000018
 8002238:	20000514 	.word	0x20000514
 800223c:	200005f8 	.word	0x200005f8
 8002240:	2000050e 	.word	0x2000050e
 8002244:	20000510 	.word	0x20000510

08002248 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 8002252:	783b      	ldrb	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d120      	bne.n	800229a <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f844 	bl	80022e8 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	4618      	mov	r0, r3
 8002268:	f006 f98c 	bl	8008584 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f005 fcc2 	bl	8007bfe <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	4618      	mov	r0, r3
 8002284:	f006 f97e 	bl	8008584 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f005 fcb3 	bl	8007bfe <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8002298:	e022      	b.n	80022e0 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 800229a:	783b      	ldrb	r3, [r7, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11f      	bne.n	80022e0 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f820 	bl	80022e8 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	4618      	mov	r0, r3
 80022b0:	f006 f968 	bl	8008584 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2101      	movs	r1, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 fc9e 	bl	8007bfe <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4618      	mov	r0, r3
 80022cc:	f006 f95a 	bl	8008584 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f005 fc8f 	bl	8007bfe <GPIO_WritePin_Afopt>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 80022f2:	783b      	ldrb	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d143      	bne.n	8002380 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	7f1a      	ldrb	r2, [r3, #28]
 80022fe:	787b      	ldrb	r3, [r7, #1]
 8002300:	429a      	cmp	r2, r3
 8002302:	d018      	beq.n	8002336 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	787a      	ldrb	r2, [r7, #1]
 800230a:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	7f1b      	ldrb	r3, [r3, #28]
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4619      	mov	r1, r3
 8002324:	4610      	mov	r0, r2
 8002326:	f005 fc6a 	bl	8007bfe <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	4618      	mov	r0, r3
 8002332:	f006 fcbf 	bl	8008cb4 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	7f1a      	ldrb	r2, [r3, #28]
 800233e:	787b      	ldrb	r3, [r7, #1]
 8002340:	429a      	cmp	r2, r3
 8002342:	d068      	beq.n	8002416 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	787a      	ldrb	r2, [r7, #1]
 800234c:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	7f1b      	ldrb	r3, [r3, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f005 fc47 	bl	8007bfe <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	4618      	mov	r0, r3
 800237a:	f006 fc9b 	bl	8008cb4 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 800237e:	e04a      	b.n	8002416 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 8002380:	783b      	ldrb	r3, [r7, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d147      	bne.n	8002416 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	7f1a      	ldrb	r2, [r3, #28]
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	429a      	cmp	r2, r3
 8002390:	d11d      	bne.n	80023ce <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 8002392:	787b      	ldrb	r3, [r7, #1]
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	7f1b      	ldrb	r3, [r3, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f005 fc1e 	bl	8007bfe <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	4618      	mov	r0, r3
 80023ca:	f006 fc73 	bl	8008cb4 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	7f1a      	ldrb	r2, [r3, #28]
 80023d6:	787b      	ldrb	r3, [r7, #1]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d01c      	beq.n	8002416 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3304      	adds	r3, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	787a      	ldrb	r2, [r7, #1]
 80023e4:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	7f1b      	ldrb	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f005 fbfb 	bl	8007bfe <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	4618      	mov	r0, r3
 8002412:	f006 fc4f 	bl	8008cb4 <PWMx_Toggle>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	4618      	mov	r0, r3
 800242e:	f006 fc01 	bl	8008c34 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f005 fbdf 	bl	8007bfe <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3304      	adds	r3, #4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	4618      	mov	r0, r3
 800244a:	f006 fbf3 	bl	8008c34 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f005 fbd0 	bl	8007bfe <GPIO_WritePin_Afopt>


}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a82      	ldr	r2, [pc, #520]	; (8002684 <int_Config_Motor+0x21c>)
 800247a:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a81      	ldr	r2, [pc, #516]	; (8002688 <int_Config_Motor+0x220>)
 8002482:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a80      	ldr	r2, [pc, #512]	; (800268c <int_Config_Motor+0x224>)
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <int_Config_Motor+0x228>)
 8002492:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7e      	ldr	r2, [pc, #504]	; (8002694 <int_Config_Motor+0x22c>)
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a71      	ldr	r2, [pc, #452]	; (8002698 <int_Config_Motor+0x230>)
 80024d4:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a6c      	ldr	r2, [pc, #432]	; (800269c <int_Config_Motor+0x234>)
 80024ea:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4a6b      	ldr	r2, [pc, #428]	; (80026a0 <int_Config_Motor+0x238>)
 80024f2:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3304      	adds	r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a63      	ldr	r2, [pc, #396]	; (8002688 <int_Config_Motor+0x220>)
 80024fc:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3304      	adds	r3, #4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a67      	ldr	r2, [pc, #412]	; (80026a4 <int_Config_Motor+0x23c>)
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <int_Config_Motor+0x240>)
 8002510:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3304      	adds	r3, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a64      	ldr	r2, [pc, #400]	; (80026ac <int_Config_Motor+0x244>)
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3304      	adds	r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3304      	adds	r3, #4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3304      	adds	r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3304      	adds	r3, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3304      	adds	r3, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a4e      	ldr	r2, [pc, #312]	; (8002698 <int_Config_Motor+0x230>)
 800255e:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3304      	adds	r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3304      	adds	r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a49      	ldr	r2, [pc, #292]	; (800269c <int_Config_Motor+0x234>)
 8002578:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025a0:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4a42      	ldr	r2, [pc, #264]	; (80026b0 <int_Config_Motor+0x248>)
 80025a6:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <int_Config_Motor+0x24c>)
 80025ac:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	200003f8 	.word	0x200003f8
 8002688:	41e00000 	.word	0x41e00000
 800268c:	20000284 	.word	0x20000284
 8002690:	2000029c 	.word	0x2000029c
 8002694:	20000310 	.word	0x20000310
 8002698:	437a0000 	.word	0x437a0000
 800269c:	42c80000 	.word	0x42c80000
 80026a0:	20000424 	.word	0x20000424
 80026a4:	20000278 	.word	0x20000278
 80026a8:	20000290 	.word	0x20000290
 80026ac:	20000328 	.word	0x20000328
 80026b0:	3dcccccd 	.word	0x3dcccccd
 80026b4:	3f4ccccd 	.word	0x3f4ccccd

080026b8 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <PID_control+0x1cc>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a6f      	ldr	r2, [pc, #444]	; (8002888 <PID_control+0x1d0>)
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026da:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800288c <PID_control+0x1d4>
 80026de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e2:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80026f2:	eeb0 1a46 	vmov.f32	s2, s12
 80026f6:	eef0 1a66 	vmov.f32	s3, s13
 80026fa:	eeb0 0a47 	vmov.f32	s0, s14
 80026fe:	eef0 0a67 	vmov.f32	s1, s15
 8002702:	68b8      	ldr	r0, [r7, #8]
 8002704:	f005 fdfe 	bl	8008304 <distance_to_straight_line>
 8002708:	ec51 0b10 	vmov	r0, r1, d0
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4b5f      	ldr	r3, [pc, #380]	; (8002890 <PID_control+0x1d8>)
 8002712:	f7fe f8b3 	bl	800087c <__aeabi_ddiv>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fa7b 	bl	8000c18 <__aeabi_d2f>
 8002722:	4603      	mov	r3, r0
 8002724:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8002726:	ed97 1a04 	vldr	s2, [r7, #16]
 800272a:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002894 <PID_control+0x1dc>
 800272e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002732:	6838      	ldr	r0, [r7, #0]
 8002734:	f000 f8bc 	bl	80028b0 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002738:	4b57      	ldr	r3, [pc, #348]	; (8002898 <PID_control+0x1e0>)
 800273a:	ed93 7a00 	vldr	s14, [r3]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002748:	4b54      	ldr	r3, [pc, #336]	; (800289c <PID_control+0x1e4>)
 800274a:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <PID_control+0x1e0>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <PID_control+0x1e8>)
 8002760:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <PID_control+0x1e4>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	ed93 7a02 	vldr	s14, [r3, #8]
 8002778:	eeb0 1a47 	vmov.f32	s2, s14
 800277c:	eef0 0a67 	vmov.f32	s1, s15
 8002780:	ed97 0a05 	vldr	s0, [r7, #20]
 8002784:	4610      	mov	r0, r2
 8002786:	f000 f893 	bl	80028b0 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3304      	adds	r3, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <PID_control+0x1e8>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3304      	adds	r3, #4
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	ed93 7a02 	vldr	s14, [r3, #8]
 80027a2:	eeb0 1a47 	vmov.f32	s2, s14
 80027a6:	eef0 0a67 	vmov.f32	s1, s15
 80027aa:	ed97 0a05 	vldr	s0, [r7, #20]
 80027ae:	4610      	mov	r0, r2
 80027b0:	f000 f87e 	bl	80028b0 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ce:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3304      	adds	r3, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3304      	adds	r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80027fe:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80028a4 <PID_control+0x1ec>
 8002802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280a:	db04      	blt.n	8002816 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <PID_control+0x1f0>)
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	e00e      	b.n	8002834 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	edd3 7a05 	vldr	s15, [r3, #20]
 800281e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282a:	d803      	bhi.n	8002834 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <PID_control+0x1f4>)
 8002832:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3304      	adds	r3, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	edd3 7a05 	vldr	s15, [r3, #20]
 800283e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80028a4 <PID_control+0x1ec>
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	db05      	blt.n	8002858 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3304      	adds	r3, #4
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <PID_control+0x1f0>)
 8002854:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002856:	e011      	b.n	800287c <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3304      	adds	r3, #4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002862:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d900      	bls.n	8002872 <PID_control+0x1ba>
}
 8002870:	e004      	b.n	800287c <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <PID_control+0x1f4>)
 800287a:	615a      	str	r2, [r3, #20]
}
 800287c:	bf00      	nop
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200002e8 	.word	0x200002e8
 8002888:	20000010 	.word	0x20000010
 800288c:	447a0000 	.word	0x447a0000
 8002890:	408f4000 	.word	0x408f4000
 8002894:	00000000 	.word	0x00000000
 8002898:	20000600 	.word	0x20000600
 800289c:	20000604 	.word	0x20000604
 80028a0:	20000608 	.word	0x20000608
 80028a4:	42700000 	.word	0x42700000
 80028a8:	42700000 	.word	0x42700000
 80028ac:	41b80000 	.word	0x41b80000

080028b0 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80028bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80028c0:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 80028c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80028c8:	edd7 7a00 	vldr	s15, [r7]
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80028f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	ed93 7a05 	vldr	s14, [r3, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	edd3 7a02 	vldr	s15, [r3, #8]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	edd3 6a01 	vldr	s13, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	edd3 7a03 	vldr	s15, [r3, #12]
 800292e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002932:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002936:	ed97 7a02 	vldr	s14, [r7, #8]
 800293a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800293e:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8002942:	ed97 7a07 	vldr	s14, [r7, #28]
 8002946:	edd7 7a06 	vldr	s15, [r7, #24]
 800294a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800294e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	60da      	str	r2, [r3, #12]
}
 8002964:	bf00      	nop
 8002966:	3724      	adds	r7, #36	; 0x24
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	6178      	str	r0, [r7, #20]
 8002978:	6139      	str	r1, [r7, #16]
 800297a:	60fa      	str	r2, [r7, #12]
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	ed97 1b00 	vldr	d1, [r7]
 8002990:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8002ab8 <go+0x148>
 8002994:	6938      	ldr	r0, [r7, #16]
 8002996:	f7ff f839 	bl	8001a0c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 80029a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	6978      	ldr	r0, [r7, #20]
 80029ae:	f7ff f88b 	bl	8001ac8 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d073      	beq.n	8002aae <go+0x13e>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3304      	adds	r3, #4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80029d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80029e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029e4:	ee16 0a90 	vmov	r0, s13
 80029e8:	f7fd fdc6 	bl	8000578 <__aeabi_f2d>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	ed93 7b04 	vldr	d7, [r3, #16]
 80029fa:	eeb0 0a47 	vmov.f32	s0, s14
 80029fe:	eef0 0a67 	vmov.f32	s1, s15
 8002a02:	f00a fbf5 	bl	800d1f0 <cos>
 8002a06:	ec51 0b10 	vmov	r0, r1, d0
 8002a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0e:	f7fd fe0b 	bl	8000628 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	68f9      	ldr	r1, [r7, #12]
 8002a18:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002a22:	eeb0 0a47 	vmov.f32	s0, s14
 8002a26:	eef0 0a67 	vmov.f32	s1, s15
 8002a2a:	f00a fc7d 	bl	800d328 <sin>
 8002a2e:	ec51 0b10 	vmov	r0, r1, d0
 8002a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a36:	f7fd fdf7 	bl	8000628 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a50:	f7fd fc34 	bl	80002bc <__adddf3>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	68f9      	ldr	r1, [r7, #12]
 8002a5a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a6a:	f7fd fc27 	bl	80002bc <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		//Convertimos el valor y imprimimos en la terminal
		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002a84:	e9cd 2300 	strd	r2, r3, [sp]
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	490b      	ldr	r1, [pc, #44]	; (8002abc <go+0x14c>)
 8002a8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a90:	f008 fa3a 	bl	800af08 <siprintf>

		writeMsg(&handlerUSART, buff);
 8002a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a96:	480a      	ldr	r0, [pc, #40]	; (8002ac0 <go+0x150>)
 8002a98:	f007 f8b4 	bl	8009c04 <writeMsg>

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff fe08 	bl	80026b8 <PID_control>

		*fcontrol = RESET;
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
	}
}
 8002aae:	bf00      	nop
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	0800f7dc 	.word	0x0800f7dc
 8002ac0:	20000340 	.word	0x20000340
 8002ac4:	00000000 	.word	0x00000000

08002ac8 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]

	int counter = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	767b      	strb	r3, [r7, #25]

	while (1){

		while (cmd->payload[counter] != ' '){
 8002af2:	e00a      	b.n	8002b0a <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4413      	add	r3, r2
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	440a      	add	r2, r1
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	701a      	strb	r2, [r3, #0]

			counter++;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d1ee      	bne.n	8002af4 <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	3301      	adds	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b23      	cmp	r3, #35	; 0x23
 8002b30:	f000 8088 	beq.w	8002c44 <extract_info+0x17c>
			break;
		}

		count_f = counter;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8002b38:	e00d      	b.n	8002b56 <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8002b3a:	7e3b      	ldrb	r3, [r7, #24]
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	440a      	add	r2, r1
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	701a      	strb	r2, [r3, #0]

			counter++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d1eb      	bne.n	8002b3a <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	7e3b      	ldrb	r3, [r7, #24]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8002b6c:	7e3b      	ldrb	r3, [r7, #24]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b23      	cmp	r3, #35	; 0x23
 8002b8c:	d05c      	beq.n	8002c48 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 8002b92:	e00d      	b.n	8002bb0 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	68f9      	ldr	r1, [r7, #12]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	440a      	add	r2, r1
 8002ba6:	7812      	ldrb	r2, [r2, #0]
 8002ba8:	701a      	strb	r2, [r3, #0]

			counter++;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3301      	adds	r3, #1
 8002bae:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d1eb      	bne.n	8002b94 <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b23      	cmp	r3, #35	; 0x23
 8002be6:	d031      	beq.n	8002c4c <extract_info+0x184>
			break;
		}

		count_t = counter;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 8002bec:	e00d      	b.n	8002c0a <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 8002bee:	7dbb      	ldrb	r3, [r7, #22]
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	4413      	add	r3, r2
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	440a      	add	r2, r1
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]

			counter++;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	3301      	adds	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d1eb      	bne.n	8002bee <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	7dbb      	ldrb	r3, [r7, #22]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8002c20:	7dbb      	ldrb	r3, [r7, #22]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	4413      	add	r3, r2
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b23      	cmp	r3, #35	; 0x23
 8002c40:	d006      	beq.n	8002c50 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 8002c42:	e762      	b.n	8002b0a <extract_info+0x42>
			break;
 8002c44:	bf00      	nop
 8002c46:	e004      	b.n	8002c52 <extract_info+0x18a>
			break;
 8002c48:	bf00      	nop
 8002c4a:	e002      	b.n	8002c52 <extract_info+0x18a>
			break;
 8002c4c:	bf00      	nop
 8002c4e:	e000      	b.n	8002c52 <extract_info+0x18a>
			break;
 8002c50:	bf00      	nop
		}
	}

	counter = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 8002c56:	7efb      	ldrb	r3, [r7, #27]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d6      	b.n	8002e0e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8002c60:	7efb      	ldrb	r3, [r7, #27]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e03c      	b.n	8002ce2 <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8002c68:	7efb      	ldrb	r3, [r7, #27]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bfb8      	it	lt
 8002c74:	425b      	neglt	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	3b30      	subs	r3, #48	; 0x30
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc67 	bl	8000554 <__aeabi_i2d>
 8002c86:	4604      	mov	r4, r0
 8002c88:	460d      	mov	r5, r1
 8002c8a:	69f8      	ldr	r0, [r7, #28]
 8002c8c:	f7fd fc62 	bl	8000554 <__aeabi_i2d>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	ec43 2b11 	vmov	d1, r2, r3
 8002c98:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8002e18 <extract_info+0x350>
 8002c9c:	f00a fb9e 	bl	800d3dc <pow>
 8002ca0:	ec53 2b10 	vmov	r2, r3, d0
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	f7fd fcbe 	bl	8000628 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4614      	mov	r4, r2
 8002cb2:	461d      	mov	r5, r3
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc3b 	bl	8000534 <__aeabi_ui2d>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	f7fd faf9 	bl	80002bc <__adddf3>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff81 	bl	8000bd8 <__aeabi_d2uiz>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dabf      	bge.n	8002c68 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 8002ce8:	7ebb      	ldrb	r3, [r7, #26]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e08d      	b.n	8002e0e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 8002cf2:	7ebb      	ldrb	r3, [r7, #26]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	e03c      	b.n	8002d74 <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 8002cfa:	7ebb      	ldrb	r3, [r7, #26]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bfb8      	it	lt
 8002d06:	425b      	neglt	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3b30      	subs	r3, #48	; 0x30
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc1e 	bl	8000554 <__aeabi_i2d>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	69f8      	ldr	r0, [r7, #28]
 8002d1e:	f7fd fc19 	bl	8000554 <__aeabi_i2d>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	ec43 2b11 	vmov	d1, r2, r3
 8002d2a:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8002e18 <extract_info+0x350>
 8002d2e:	f00a fb55 	bl	800d3dc <pow>
 8002d32:	ec53 2b10 	vmov	r2, r3, d0
 8002d36:	4620      	mov	r0, r4
 8002d38:	4629      	mov	r1, r5
 8002d3a:	f7fd fc75 	bl	8000628 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4614      	mov	r4, r2
 8002d44:	461d      	mov	r5, r3
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbf2 	bl	8000534 <__aeabi_ui2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fab0 	bl	80002bc <__adddf3>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7fd ff38 	bl	8000bd8 <__aeabi_d2uiz>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6c:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dabf      	bge.n	8002cfa <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 8002d7a:	7e7b      	ldrb	r3, [r7, #25]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 8002d80:	2303      	movs	r3, #3
 8002d82:	e044      	b.n	8002e0e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 8002d84:	7e7b      	ldrb	r3, [r7, #25]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e03c      	b.n	8002e06 <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 8002d8c:	7e7b      	ldrb	r3, [r7, #25]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bfb8      	it	lt
 8002d98:	425b      	neglt	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	3b30      	subs	r3, #48	; 0x30
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fbd5 	bl	8000554 <__aeabi_i2d>
 8002daa:	4604      	mov	r4, r0
 8002dac:	460d      	mov	r5, r1
 8002dae:	69f8      	ldr	r0, [r7, #28]
 8002db0:	f7fd fbd0 	bl	8000554 <__aeabi_i2d>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	ec43 2b11 	vmov	d1, r2, r3
 8002dbc:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002e18 <extract_info+0x350>
 8002dc0:	f00a fb0c 	bl	800d3dc <pow>
 8002dc4:	ec53 2b10 	vmov	r2, r3, d0
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fc2c 	bl	8000628 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	461d      	mov	r5, r3
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fba9 	bl	8000534 <__aeabi_ui2d>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa67 	bl	80002bc <__adddf3>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd feef 	bl	8000bd8 <__aeabi_d2uiz>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	dabf      	bge.n	8002d8c <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bdb0      	pop	{r4, r5, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	40240000 	.word	0x40240000

08002e20 <led_state_callback>:




void led_state_callback (TimerHandle_t xTimer){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8002e28:	4803      	ldr	r0, [pc, #12]	; (8002e38 <led_state_callback+0x18>)
 8002e2a:	f004 ff34 	bl	8007c96 <GPIOxTooglePin>

}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000023c 	.word	0x2000023c

08002e3c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <ITM_SendChar+0x48>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <ITM_SendChar+0x48>)
 8002e4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e50:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <ITM_SendChar+0x4c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <ITM_SendChar+0x4c>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002e5e:	bf00      	nop
 8002e60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f8      	beq.n	8002e60 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002e6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	6013      	str	r3, [r2, #0]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000edfc 	.word	0xe000edfc
 8002e88:	e0000e00 	.word	0xe0000e00

08002e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
	return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_kill>:

int _kill(int pid, int sig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ea6:	f007 fa8d 	bl	800a3c4 <__errno>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2216      	movs	r2, #22
 8002eae:	601a      	str	r2, [r3, #0]
	return -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_exit>:

void _exit (int status)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ffe7 	bl	8002e9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ece:	e7fe      	b.n	8002ece <_exit+0x12>

08002ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e00a      	b.n	8002ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ee2:	f3af 8000 	nop.w
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	60ba      	str	r2, [r7, #8]
 8002eee:	b2ca      	uxtb	r2, r1
 8002ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	dbf0      	blt.n	8002ee2 <_read+0x12>
	}

return len;
 8002f00:	687b      	ldr	r3, [r7, #4]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e009      	b.n	8002f30 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	60ba      	str	r2, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff89 	bl	8002e3c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dbf1      	blt.n	8002f1c <_write+0x12>
	}
	return len;
 8002f38:	687b      	ldr	r3, [r7, #4]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_close>:

int _close(int file)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
	return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <_isatty>:

int _isatty(int file)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
	return 1;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fac:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fb0:	f006 ff24 	bl	8009dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fb4:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fb6:	490d      	ldr	r1, [pc, #52]	; (8002fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <LoopForever+0xe>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fbc:	e002      	b.n	8002fc4 <LoopCopyDataInit>

08002fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc2:	3304      	adds	r3, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc8:	d3f9      	bcc.n	8002fbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fcc:	4c0a      	ldr	r4, [pc, #40]	; (8002ff8 <LoopForever+0x16>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd0:	e001      	b.n	8002fd6 <LoopFillZerobss>

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd4:	3204      	adds	r2, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fda:	f007 f9f9 	bl	800a3d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fde:	f7fd fe6b 	bl	8000cb8 <main>

08002fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fe2:	e7fe      	b.n	8002fe2 <LoopForever>
  ldr   r0, =_estack
 8002fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002ff0:	0800fe70 	.word	0x0800fe70
  ldr r2, =_sbss
 8002ff4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ff8:	200133e0 	.word	0x200133e0

08002ffc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ffc:	e7fe      	b.n	8002ffc <ADC_IRQHandler>

08002ffe <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 0208 	add.w	r2, r3, #8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f04f 32ff 	mov.w	r2, #4294967295
 8003016:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0208 	add.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f103 0208 	add.w	r2, r3, #8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d103      	bne.n	80030c0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e00c      	b.n	80030da <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3308      	adds	r3, #8
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e002      	b.n	80030ce <vListInsert+0x2e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d2f6      	bcs.n	80030c8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6892      	ldr	r2, [r2, #8]
 8003128:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6852      	ldr	r2, [r2, #4]
 8003132:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d103      	bne.n	8003146 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <xQueueGenericReset+0x2a>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	60bb      	str	r3, [r7, #8]
    }
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003192:	f002 fae1 	bl	8005758 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	441a      	add	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	3b01      	subs	r3, #1
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d114      	bne.n	8003212 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01a      	beq.n	8003226 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3310      	adds	r3, #16
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f913 	bl	8004420 <xTaskRemoveFromEventList>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <xQueueGenericReset+0xcc>)
 8003202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	e009      	b.n	8003226 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3310      	adds	r3, #16
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fef1 	bl	8002ffe <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff feec 	bl	8002ffe <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003226:	f002 fac7 	bl	80057b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800322a:	2301      	movs	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueGenericCreate+0x2a>
        __asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61bb      	str	r3, [r7, #24]
    }
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <xQueueGenericCreate+0x48>
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	429a      	cmp	r2, r3
 800327e:	d101      	bne.n	8003284 <xQueueGenericCreate+0x4c>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <xQueueGenericCreate+0x4e>
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <xQueueGenericCreate+0x68>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	617b      	str	r3, [r7, #20]
    }
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80032a6:	d90a      	bls.n	80032be <xQueueGenericCreate+0x86>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	613b      	str	r3, [r7, #16]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3350      	adds	r3, #80	; 0x50
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fb6a 	bl	800599c <pvPortMalloc>
 80032c8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3350      	adds	r3, #80	; 0x50
 80032d8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032da:	79fa      	ldrb	r2, [r7, #7]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f805 	bl	80032f6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
    }
 80032ee:	4618      	mov	r0, r3
 80032f0:	3728      	adds	r7, #40	; 0x28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e002      	b.n	8003318 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003324:	2101      	movs	r1, #1
 8003326:	69b8      	ldr	r0, [r7, #24]
 8003328:	f7ff ff1e 	bl	8003168 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08e      	sub	sp, #56	; 0x38
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800334a:	2300      	movs	r3, #0
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <xQueueGenericSend+0x32>
        __asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d103      	bne.n	800337c <xQueueGenericSend+0x40>
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <xQueueGenericSend+0x44>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <xQueueGenericSend+0x46>
 8003380:	2300      	movs	r3, #0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <xQueueGenericSend+0x60>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d103      	bne.n	80033aa <xQueueGenericSend+0x6e>
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <xQueueGenericSend+0x72>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <xQueueGenericSend+0x74>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <xQueueGenericSend+0x8e>
        __asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	623b      	str	r3, [r7, #32]
    }
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ca:	f001 f9c5 	bl	8004758 <xTaskGetSchedulerState>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <xQueueGenericSend+0x9e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <xQueueGenericSend+0xa2>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <xQueueGenericSend+0xa4>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <xQueueGenericSend+0xbe>
        __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61fb      	str	r3, [r7, #28]
    }
 80033f6:	bf00      	nop
 80033f8:	e7fe      	b.n	80033f8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033fa:	f002 f9ad 	bl	8005758 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <xQueueGenericSend+0xd4>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d129      	bne.n	8003464 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003416:	f000 fac6 	bl	80039a6 <prvCopyDataToQueue>
 800341a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d010      	beq.n	8003446 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fff9 	bl	8004420 <xTaskRemoveFromEventList>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003434:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <xQueueGenericSend+0x1f8>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	e00a      	b.n	800345c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <xQueueGenericSend+0x1f8>)
 800344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800345c:	f002 f9ac 	bl	80057b8 <vPortExitCritical>
                return pdPASS;
 8003460:	2301      	movs	r3, #1
 8003462:	e063      	b.n	800352c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800346a:	f002 f9a5 	bl	80057b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800346e:	2300      	movs	r3, #0
 8003470:	e05c      	b.n	800352c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f831 	bl	80044e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003482:	2301      	movs	r3, #1
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003486:	f002 f997 	bl	80057b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800348a:	f000 fdb9 	bl	8004000 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800348e:	f002 f963 	bl	8005758 <vPortEnterCritical>
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003498:	b25b      	sxtb	r3, r3
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d103      	bne.n	80034a8 <xQueueGenericSend+0x16c>
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d103      	bne.n	80034be <xQueueGenericSend+0x182>
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034be:	f002 f97b 	bl	80057b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034c2:	1d3a      	adds	r2, r7, #4
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f820 	bl	8004510 <xTaskCheckForTimeOut>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d124      	bne.n	8003520 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d8:	f000 fb5d 	bl	8003b96 <prvIsQueueFull>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	3310      	adds	r3, #16
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 ff48 	bl	8004380 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80034f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f2:	f000 fae8 	bl	8003ac6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80034f6:	f000 fd91 	bl	800401c <xTaskResumeAll>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f af7c 	bne.w	80033fa <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <xQueueGenericSend+0x1f8>)
 8003504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	e772      	b.n	80033fa <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003516:	f000 fad6 	bl	8003ac6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800351a:	f000 fd7f 	bl	800401c <xTaskResumeAll>
 800351e:	e76c      	b.n	80033fa <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003522:	f000 fad0 	bl	8003ac6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003526:	f000 fd79 	bl	800401c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800352a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800352c:	4618      	mov	r0, r3
 800352e:	3738      	adds	r7, #56	; 0x38
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b090      	sub	sp, #64	; 0x40
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d103      	bne.n	8003574 <xQueueGenericSendFromISR+0x3c>
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <xQueueGenericSendFromISR+0x40>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <xQueueGenericSendFromISR+0x42>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003590:	bf00      	nop
 8003592:	e7fe      	b.n	8003592 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d103      	bne.n	80035a2 <xQueueGenericSendFromISR+0x6a>
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <xQueueGenericSendFromISR+0x6e>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <xQueueGenericSendFromISR+0x70>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	623b      	str	r3, [r7, #32]
    }
 80035be:	bf00      	nop
 80035c0:	e7fe      	b.n	80035c0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035c2:	f002 f9ab 	bl	800591c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80035c6:	f3ef 8211 	mrs	r2, BASEPRI
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	61fa      	str	r2, [r7, #28]
 80035dc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80035de:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <xQueueGenericSendFromISR+0xbc>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d13e      	bne.n	8003672 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800360a:	f000 f9cc 	bl	80039a6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800360e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d112      	bne.n	800363e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d025      	beq.n	800366c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	3324      	adds	r3, #36	; 0x24
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fefb 	bl	8004420 <xTaskRemoveFromEventList>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01d      	beq.n	800366c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01a      	beq.n	800366c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e016      	b.n	800366c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800363e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003642:	2b7f      	cmp	r3, #127	; 0x7f
 8003644:	d10a      	bne.n	800365c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	617b      	str	r3, [r7, #20]
    }
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800365c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003660:	3301      	adds	r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	b25a      	sxtb	r2, r3
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800366c:	2301      	movs	r3, #1
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003670:	e001      	b.n	8003676 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003672:	2300      	movs	r3, #0
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003678:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003680:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003684:	4618      	mov	r0, r3
 8003686:	3740      	adds	r7, #64	; 0x40
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08c      	sub	sp, #48	; 0x30
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003698:	2300      	movs	r3, #0
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <xQueueReceive+0x30>
        __asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	623b      	str	r3, [r7, #32]
    }
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <xQueueReceive+0x3e>
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <xQueueReceive+0x42>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <xQueueReceive+0x44>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <xQueueReceive+0x5e>
        __asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	61fb      	str	r3, [r7, #28]
    }
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036ea:	f001 f835 	bl	8004758 <xTaskGetSchedulerState>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <xQueueReceive+0x6e>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xQueueReceive+0x72>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueReceive+0x74>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueReceive+0x8e>
        __asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61bb      	str	r3, [r7, #24]
    }
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800371a:	f002 f81d 	bl	8005758 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d01f      	beq.n	800376a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800372e:	f000 f9a4 	bl	8003a7a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1e5a      	subs	r2, r3, #1
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00f      	beq.n	8003762 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	3310      	adds	r3, #16
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fe6a 	bl	8004420 <xTaskRemoveFromEventList>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <xQueueReceive+0x1bc>)
 8003754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003762:	f002 f829 	bl	80057b8 <vPortExitCritical>
                return pdPASS;
 8003766:	2301      	movs	r3, #1
 8003768:	e069      	b.n	800383e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003770:	f002 f822 	bl	80057b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003774:	2300      	movs	r3, #0
 8003776:	e062      	b.n	800383e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800377e:	f107 0310 	add.w	r3, r7, #16
 8003782:	4618      	mov	r0, r3
 8003784:	f000 feae 	bl	80044e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800378c:	f002 f814 	bl	80057b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003790:	f000 fc36 	bl	8004000 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003794:	f001 ffe0 	bl	8005758 <vPortEnterCritical>
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800379e:	b25b      	sxtb	r3, r3
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d103      	bne.n	80037ae <xQueueReceive+0x122>
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0x138>
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c4:	f001 fff8 	bl	80057b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037c8:	1d3a      	adds	r2, r7, #4
 80037ca:	f107 0310 	add.w	r3, r7, #16
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fe9d 	bl	8004510 <xTaskCheckForTimeOut>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d123      	bne.n	8003824 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037de:	f000 f9c4 	bl	8003b6a <prvIsQueueEmpty>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	3324      	adds	r3, #36	; 0x24
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fdc5 	bl	8004380 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80037f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f8:	f000 f965 	bl	8003ac6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80037fc:	f000 fc0e 	bl	800401c <xTaskResumeAll>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d189      	bne.n	800371a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <xQueueReceive+0x1bc>)
 8003808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	e780      	b.n	800371a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381a:	f000 f954 	bl	8003ac6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800381e:	f000 fbfd 	bl	800401c <xTaskResumeAll>
 8003822:	e77a      	b.n	800371a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003826:	f000 f94e 	bl	8003ac6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800382a:	f000 fbf7 	bl	800401c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800382e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003830:	f000 f99b 	bl	8003b6a <prvIsQueueEmpty>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f43f af6f 	beq.w	800371a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800383c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800383e:	4618      	mov	r0, r3
 8003840:	3730      	adds	r7, #48	; 0x30
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b090      	sub	sp, #64	; 0x40
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <xQueueReceiveFromISR+0x3a>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <xQueueReceiveFromISR+0x3e>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <xQueueReceiveFromISR+0x40>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038a6:	f002 f839 	bl	800591c <vPortValidateInterruptPriority>
        __asm volatile
 80038aa:	f3ef 8211 	mrs	r2, BASEPRI
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	623a      	str	r2, [r7, #32]
 80038c0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80038c2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03e      	beq.n	8003950 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038e0:	f000 f8cb 	bl	8003a7a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80038ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d112      	bne.n	800391c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d025      	beq.n	800394a <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	3310      	adds	r3, #16
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fd8c 	bl	8004420 <xTaskRemoveFromEventList>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01d      	beq.n	800394a <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e016      	b.n	800394a <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800391c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003920:	2b7f      	cmp	r3, #127	; 0x7f
 8003922:	d10a      	bne.n	800393a <xQueueReceiveFromISR+0xee>
        __asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	61bb      	str	r3, [r7, #24]
    }
 8003936:	bf00      	nop
 8003938:	e7fe      	b.n	8003938 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800393a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800393e:	3301      	adds	r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	b25a      	sxtb	r2, r3
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800394a:	2301      	movs	r3, #1
 800394c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394e:	e001      	b.n	8003954 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8003950:	2300      	movs	r3, #0
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003956:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f383 8811 	msr	BASEPRI, r3
    }
 800395e:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003962:	4618      	mov	r0, r3
 8003964:	3740      	adds	r7, #64	; 0x40
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	60bb      	str	r3, [r7, #8]
    }
 800398a:	bf00      	nop
 800398c:	e7fe      	b.n	800398c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800398e:	f001 fee3 	bl	8005758 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003998:	f001 ff0e 	bl	80057b8 <vPortExitCritical>

    return uxReturn;
 800399c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d14d      	bne.n	8003a68 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fedf 	bl	8004794 <xTaskPriorityDisinherit>
 80039d6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	e043      	b.n	8003a68 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d119      	bne.n	8003a1a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6858      	ldr	r0, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	461a      	mov	r2, r3
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	f006 fd19 	bl	800a428 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	441a      	add	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d32b      	bcc.n	8003a68 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	605a      	str	r2, [r3, #4]
 8003a18:	e026      	b.n	8003a68 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68d8      	ldr	r0, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	461a      	mov	r2, r3
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	f006 fcff 	bl	800a428 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	425b      	negs	r3, r3
 8003a34:	441a      	add	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d207      	bcs.n	8003a56 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	425b      	negs	r3, r3
 8003a50:	441a      	add	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d105      	bne.n	8003a68 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003a70:	697b      	ldr	r3, [r7, #20]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d018      	beq.n	8003abe <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	441a      	add	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d303      	bcc.n	8003aae <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68d9      	ldr	r1, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f006 fcb5 	bl	800a428 <memcpy>
    }
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003ace:	f001 fe43 	bl	8005758 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ad8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ada:	e011      	b.n	8003b00 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d012      	beq.n	8003b0a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fc99 	bl	8004420 <xTaskRemoveFromEventList>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003af4:	f000 fd72 	bl	80045dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	dce9      	bgt.n	8003adc <prvUnlockQueue+0x16>
 8003b08:	e000      	b.n	8003b0c <prvUnlockQueue+0x46>
                        break;
 8003b0a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	22ff      	movs	r2, #255	; 0xff
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003b14:	f001 fe50 	bl	80057b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003b18:	f001 fe1e 	bl	8005758 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b22:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b24:	e011      	b.n	8003b4a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3310      	adds	r3, #16
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fc74 	bl	8004420 <xTaskRemoveFromEventList>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003b3e:	f000 fd4d 	bl	80045dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003b42:	7bbb      	ldrb	r3, [r7, #14]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	dce9      	bgt.n	8003b26 <prvUnlockQueue+0x60>
 8003b52:	e000      	b.n	8003b56 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003b54:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	22ff      	movs	r2, #255	; 0xff
 8003b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003b5e:	f001 fe2b 	bl	80057b8 <vPortExitCritical>
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b72:	f001 fdf1 	bl	8005758 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e001      	b.n	8003b88 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003b88:	f001 fe16 	bl	80057b8 <vPortExitCritical>

    return xReturn;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003b9e:	f001 fddb 	bl	8005758 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d102      	bne.n	8003bb4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e001      	b.n	8003bb8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003bb8:	f001 fdfe 	bl	80057b8 <vPortExitCritical>

    return xReturn;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b087      	sub	sp, #28
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
    }
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d102      	bne.n	8003c00 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e001      	b.n	8003c04 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003c04:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003c06:	4618      	mov	r0, r3
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e014      	b.n	8003c4e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c24:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <vQueueAddToRegistry+0x50>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c30:	490c      	ldr	r1, [pc, #48]	; (8003c64 <vQueueAddToRegistry+0x50>)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <vQueueAddToRegistry+0x50>)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003c46:	e006      	b.n	8003c56 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	d9e7      	bls.n	8003c24 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2000060c 	.word	0x2000060c

08003c68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003c78:	f001 fd6e 	bl	8005758 <vPortEnterCritical>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <vQueueWaitForMessageRestricted+0x2a>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c98:	b25b      	sxtb	r3, r3
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d103      	bne.n	8003ca8 <vQueueWaitForMessageRestricted+0x40>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca8:	f001 fd86 	bl	80057b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fb83 	bl	80043c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff feff 	bl	8003ac6 <prvUnlockQueue>
    }
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fe59 	bl	800599c <pvPortMalloc>
 8003cea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00e      	beq.n	8003d10 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cf2:	2058      	movs	r0, #88	; 0x58
 8003cf4:	f001 fe52 	bl	800599c <pvPortMalloc>
 8003cf8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
 8003d06:	e005      	b.n	8003d14 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003d08:	6978      	ldr	r0, [r7, #20]
 8003d0a:	f001 ff27 	bl	8005b5c <vPortFree>
 8003d0e:	e001      	b.n	8003d14 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d013      	beq.n	8003d42 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	9302      	str	r3, [sp, #8]
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f80e 	bl	8003d52 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003d36:	69f8      	ldr	r0, [r7, #28]
 8003d38:	f000 f8a2 	bl	8003e80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e002      	b.n	8003d48 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003d48:	69bb      	ldr	r3, [r7, #24]
    }
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b088      	sub	sp, #32
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	461a      	mov	r2, r3
 8003d6a:	21a5      	movs	r1, #165	; 0xa5
 8003d6c:	f006 fb6a 	bl	800a444 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f023 0307 	bic.w	r3, r3, #7
 8003d88:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <prvInitialiseNewTask+0x58>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	617b      	str	r3, [r7, #20]
    }
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01f      	beq.n	8003df0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e012      	b.n	8003ddc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	7819      	ldrb	r1, [r3, #0]
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3334      	adds	r3, #52	; 0x34
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b09      	cmp	r3, #9
 8003de0:	d9e9      	bls.n	8003db6 <prvInitialiseNewTask+0x64>
 8003de2:	e000      	b.n	8003de6 <prvInitialiseNewTask+0x94>
            {
                break;
 8003de4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dee:	e003      	b.n	8003df8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d901      	bls.n	8003e02 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dfe:	2304      	movs	r3, #4
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	2200      	movs	r2, #0
 8003e12:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	3304      	adds	r3, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f910 	bl	800303e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	3318      	adds	r3, #24
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f90b 	bl	800303e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	f1c3 0205 	rsb	r2, r3, #5
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	3350      	adds	r3, #80	; 0x50
 8003e42:	2204      	movs	r2, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f006 fafc 	bl	800a444 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	3354      	adds	r3, #84	; 0x54
 8003e50:	2201      	movs	r2, #1
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f006 faf5 	bl	800a444 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	69b8      	ldr	r0, [r7, #24]
 8003e60:	f001 fb48 	bl	80054f4 <pxPortInitialiseStack>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e76:	bf00      	nop
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003e88:	f001 fc66 	bl	8005758 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003e8c:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <prvAddNewTaskToReadyList+0xc0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3301      	adds	r3, #1
 8003e92:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <prvAddNewTaskToReadyList+0xc0>)
 8003e94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003e96:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003e9e:	4a29      	ldr	r2, [pc, #164]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <prvAddNewTaskToReadyList+0xc0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d110      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003eac:	f000 fbba 	bl	8004624 <prvInitialiseTaskLists>
 8003eb0:	e00d      	b.n	8003ece <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003eb2:	4b25      	ldr	r3, [pc, #148]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003eba:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d802      	bhi.n	8003ece <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003ec8:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003ece:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <prvAddNewTaskToReadyList+0xcc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <prvAddNewTaskToReadyList+0xcc>)
 8003ed6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <prvAddNewTaskToReadyList+0xcc>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <prvAddNewTaskToReadyList+0xd0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <prvAddNewTaskToReadyList+0xd0>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <prvAddNewTaskToReadyList+0xd4>)
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7ff f8a5 	bl	8003058 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003f0e:	f001 fc53 	bl	80057b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <prvAddNewTaskToReadyList+0xc8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00e      	beq.n	8003f38 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <prvAddNewTaskToReadyList+0xc4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d207      	bcs.n	8003f38 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <prvAddNewTaskToReadyList+0xd8>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000724 	.word	0x20000724
 8003f44:	2000064c 	.word	0x2000064c
 8003f48:	20000730 	.word	0x20000730
 8003f4c:	20000740 	.word	0x20000740
 8003f50:	2000072c 	.word	0x2000072c
 8003f54:	20000650 	.word	0x20000650
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <vTaskStartScheduler+0x88>)
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2282      	movs	r2, #130	; 0x82
 8003f6e:	491e      	ldr	r1, [pc, #120]	; (8003fe8 <vTaskStartScheduler+0x8c>)
 8003f70:	481e      	ldr	r0, [pc, #120]	; (8003fec <vTaskStartScheduler+0x90>)
 8003f72:	f7ff fead 	bl	8003cd0 <xTaskCreate>
 8003f76:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003f7e:	f000 ff4b 	bl	8004e18 <xTimerCreateTimerTask>
 8003f82:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d116      	bne.n	8003fb8 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
    }
 8003f9c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <vTaskStartScheduler+0x94>)
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <vTaskStartScheduler+0x98>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <vTaskStartScheduler+0x9c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003fb2:	f001 fb2f 	bl	8005614 <xPortStartScheduler>
 8003fb6:	e00e      	b.n	8003fd6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d10a      	bne.n	8003fd6 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	607b      	str	r3, [r7, #4]
    }
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <vTaskStartScheduler+0xa0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000748 	.word	0x20000748
 8003fe8:	0800f7ec 	.word	0x0800f7ec
 8003fec:	080045f5 	.word	0x080045f5
 8003ff0:	20000744 	.word	0x20000744
 8003ff4:	20000730 	.word	0x20000730
 8003ff8:	20000728 	.word	0x20000728
 8003ffc:	2000001c 	.word	0x2000001c

08004000 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <vTaskSuspendAll+0x18>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	4a03      	ldr	r2, [pc, #12]	; (8004018 <vTaskSuspendAll+0x18>)
 800400c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	2000074c 	.word	0x2000074c

0800401c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <xTaskResumeAll+0x114>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <xTaskResumeAll+0x2c>
        __asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	603b      	str	r3, [r7, #0]
    }
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004048:	f001 fb86 	bl	8005758 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800404c:	4b38      	ldr	r3, [pc, #224]	; (8004130 <xTaskResumeAll+0x114>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3b01      	subs	r3, #1
 8004052:	4a37      	ldr	r2, [pc, #220]	; (8004130 <xTaskResumeAll+0x114>)
 8004054:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <xTaskResumeAll+0x114>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d161      	bne.n	8004122 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800405e:	4b35      	ldr	r3, [pc, #212]	; (8004134 <xTaskResumeAll+0x118>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d05d      	beq.n	8004122 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004066:	e02e      	b.n	80040c6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004068:	4b33      	ldr	r3, [pc, #204]	; (8004138 <xTaskResumeAll+0x11c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3318      	adds	r3, #24
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff f84c 	bl	8003112 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f847 	bl	8003112 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	2201      	movs	r2, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	4b2b      	ldr	r3, [pc, #172]	; (800413c <xTaskResumeAll+0x120>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	4a2a      	ldr	r2, [pc, #168]	; (800413c <xTaskResumeAll+0x120>)
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a27      	ldr	r2, [pc, #156]	; (8004140 <xTaskResumeAll+0x124>)
 80040a4:	441a      	add	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe ffd3 	bl	8003058 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <xTaskResumeAll+0x128>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <xTaskResumeAll+0x12c>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040c6:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <xTaskResumeAll+0x11c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1cc      	bne.n	8004068 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80040d4:	f000 fb24 	bl	8004720 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040d8:	4b1c      	ldr	r3, [pc, #112]	; (800414c <xTaskResumeAll+0x130>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80040e4:	f000 f846 	bl	8004174 <xTaskIncrementTick>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <xTaskResumeAll+0x12c>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f1      	bne.n	80040e4 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <xTaskResumeAll+0x130>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <xTaskResumeAll+0x12c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800410e:	2301      	movs	r3, #1
 8004110:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <xTaskResumeAll+0x134>)
 8004114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004122:	f001 fb49 	bl	80057b8 <vPortExitCritical>

    return xAlreadyYielded;
 8004126:	68bb      	ldr	r3, [r7, #8]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2000074c 	.word	0x2000074c
 8004134:	20000724 	.word	0x20000724
 8004138:	200006e4 	.word	0x200006e4
 800413c:	2000072c 	.word	0x2000072c
 8004140:	20000650 	.word	0x20000650
 8004144:	2000064c 	.word	0x2000064c
 8004148:	20000738 	.word	0x20000738
 800414c:	20000734 	.word	0x20000734
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <xTaskGetTickCount+0x1c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004160:	687b      	ldr	r3, [r7, #4]
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000728 	.word	0x20000728

08004174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <xTaskIncrementTick+0x128>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d17f      	bne.n	8004286 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004186:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <xTaskIncrementTick+0x12c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800418e:	4a44      	ldr	r2, [pc, #272]	; (80042a0 <xTaskIncrementTick+0x12c>)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d120      	bne.n	80041dc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800419a:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <xTaskIncrementTick+0x130>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <xTaskIncrementTick+0x46>
        __asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	603b      	str	r3, [r7, #0]
    }
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTaskIncrementTick+0x44>
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <xTaskIncrementTick+0x130>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <xTaskIncrementTick+0x134>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a37      	ldr	r2, [pc, #220]	; (80042a4 <xTaskIncrementTick+0x130>)
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4a37      	ldr	r2, [pc, #220]	; (80042a8 <xTaskIncrementTick+0x134>)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <xTaskIncrementTick+0x138>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	4a35      	ldr	r2, [pc, #212]	; (80042ac <xTaskIncrementTick+0x138>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	f000 faa2 	bl	8004720 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <xTaskIncrementTick+0x13c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d348      	bcc.n	8004278 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e6:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <xTaskIncrementTick+0x130>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f0:	4b2f      	ldr	r3, [pc, #188]	; (80042b0 <xTaskIncrementTick+0x13c>)
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	601a      	str	r2, [r3, #0]
                    break;
 80041f8:	e03e      	b.n	8004278 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <xTaskIncrementTick+0x130>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d203      	bcs.n	800421a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004212:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <xTaskIncrementTick+0x13c>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004218:	e02e      	b.n	8004278 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe ff77 	bl	8003112 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3318      	adds	r3, #24
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe ff6e 	bl	8003112 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	2201      	movs	r2, #1
 800423c:	409a      	lsls	r2, r3
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <xTaskIncrementTick+0x140>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4313      	orrs	r3, r2
 8004244:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <xTaskIncrementTick+0x140>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <xTaskIncrementTick+0x144>)
 8004256:	441a      	add	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7fe fefa 	bl	8003058 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <xTaskIncrementTick+0x148>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b9      	bcc.n	80041e6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004276:	e7b6      	b.n	80041e6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <xTaskIncrementTick+0x14c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8004280:	2301      	movs	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e004      	b.n	8004290 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <xTaskIncrementTick+0x150>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <xTaskIncrementTick+0x150>)
 800428e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004290:	697b      	ldr	r3, [r7, #20]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	2000074c 	.word	0x2000074c
 80042a0:	20000728 	.word	0x20000728
 80042a4:	200006dc 	.word	0x200006dc
 80042a8:	200006e0 	.word	0x200006e0
 80042ac:	2000073c 	.word	0x2000073c
 80042b0:	20000744 	.word	0x20000744
 80042b4:	2000072c 	.word	0x2000072c
 80042b8:	20000650 	.word	0x20000650
 80042bc:	2000064c 	.word	0x2000064c
 80042c0:	20000738 	.word	0x20000738
 80042c4:	20000734 	.word	0x20000734

080042c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <vTaskSwitchContext+0xa4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <vTaskSwitchContext+0xa8>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80042dc:	e03f      	b.n	800435e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <vTaskSwitchContext+0xa8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <vTaskSwitchContext+0xac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80042f2:	7afb      	ldrb	r3, [r7, #11]
 80042f4:	f1c3 031f 	rsb	r3, r3, #31
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	491f      	ldr	r1, [pc, #124]	; (8004378 <vTaskSwitchContext+0xb0>)
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <vTaskSwitchContext+0x5c>
        __asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
    }
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <vTaskSwitchContext+0x5a>
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <vTaskSwitchContext+0xb0>)
 8004330:	4413      	add	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3308      	adds	r3, #8
 8004346:	429a      	cmp	r2, r3
 8004348:	d104      	bne.n	8004354 <vTaskSwitchContext+0x8c>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4a08      	ldr	r2, [pc, #32]	; (800437c <vTaskSwitchContext+0xb4>)
 800435c:	6013      	str	r3, [r2, #0]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2000074c 	.word	0x2000074c
 8004370:	20000738 	.word	0x20000738
 8004374:	2000072c 	.word	0x2000072c
 8004378:	20000650 	.word	0x20000650
 800437c:	2000064c 	.word	0x2000064c

08004380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	60fb      	str	r3, [r7, #12]
    }
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a6:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <vTaskPlaceOnEventList+0x44>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3318      	adds	r3, #24
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fe76 	bl	80030a0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b4:	2101      	movs	r1, #1
 80043b6:	6838      	ldr	r0, [r7, #0]
 80043b8:	f000 fcc8 	bl	8004d4c <prvAddCurrentTaskToDelayedList>
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000064c 	.word	0x2000064c

080043c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	617b      	str	r3, [r7, #20]
    }
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <vTaskPlaceOnEventListRestricted+0x54>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3318      	adds	r3, #24
 80043f6:	4619      	mov	r1, r3
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7fe fe2d 	bl	8003058 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f000 fc9d 	bl	8004d4c <prvAddCurrentTaskToDelayedList>
    }
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000064c 	.word	0x2000064c

08004420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60fb      	str	r3, [r7, #12]
    }
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	3318      	adds	r3, #24
 8004450:	4618      	mov	r0, r3
 8004452:	f7fe fe5e 	bl	8003112 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <xTaskRemoveFromEventList+0xac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11c      	bne.n	8004498 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fe55 	bl	8003112 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	2201      	movs	r2, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <xTaskRemoveFromEventList+0xb0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4313      	orrs	r3, r2
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <xTaskRemoveFromEventList+0xb0>)
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <xTaskRemoveFromEventList+0xb4>)
 8004488:	441a      	add	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe fde1 	bl	8003058 <vListInsertEnd>
 8004496:	e005      	b.n	80044a4 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	3318      	adds	r3, #24
 800449c:	4619      	mov	r1, r3
 800449e:	480e      	ldr	r0, [pc, #56]	; (80044d8 <xTaskRemoveFromEventList+0xb8>)
 80044a0:	f7fe fdda 	bl	8003058 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <xTaskRemoveFromEventList+0xbc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d905      	bls.n	80044be <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044b2:	2301      	movs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <xTaskRemoveFromEventList+0xc0>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e001      	b.n	80044c2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80044c2:	697b      	ldr	r3, [r7, #20]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	2000074c 	.word	0x2000074c
 80044d0:	2000072c 	.word	0x2000072c
 80044d4:	20000650 	.word	0x20000650
 80044d8:	200006e4 	.word	0x200006e4
 80044dc:	2000064c 	.word	0x2000064c
 80044e0:	20000738 	.word	0x20000738

080044e4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <vTaskInternalSetTimeOutState+0x24>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <vTaskInternalSetTimeOutState+0x28>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	2000073c 	.word	0x2000073c
 800450c:	20000728 	.word	0x20000728

08004510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	613b      	str	r3, [r7, #16]
    }
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60fb      	str	r3, [r7, #12]
    }
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004552:	f001 f901 	bl	8005758 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004556:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <xTaskCheckForTimeOut+0xc4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d102      	bne.n	8004576 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	e026      	b.n	80045c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <xTaskCheckForTimeOut+0xc8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d00a      	beq.n	8004598 <xTaskCheckForTimeOut+0x88>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	429a      	cmp	r2, r3
 800458a:	d305      	bcc.n	8004598 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e015      	b.n	80045c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d20b      	bcs.n	80045ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad2      	subs	r2, r2, r3
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff ff98 	bl	80044e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	e004      	b.n	80045c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045c4:	f001 f8f8 	bl	80057b8 <vPortExitCritical>

    return xReturn;
 80045c8:	69fb      	ldr	r3, [r7, #28]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000728 	.word	0x20000728
 80045d8:	2000073c 	.word	0x2000073c

080045dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <vTaskMissedYield+0x14>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000738 	.word	0x20000738

080045f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045fc:	f000 f852 	bl	80046a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <prvIdleTask+0x28>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d9f9      	bls.n	80045fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <prvIdleTask+0x2c>)
 800460a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004618:	e7f0      	b.n	80045fc <prvIdleTask+0x8>
 800461a:	bf00      	nop
 800461c:	20000650 	.word	0x20000650
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
 800462e:	e00c      	b.n	800464a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <prvInitialiseTaskLists+0x60>)
 800463c:	4413      	add	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fcdd 	bl	8002ffe <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3301      	adds	r3, #1
 8004648:	607b      	str	r3, [r7, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d9ef      	bls.n	8004630 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <prvInitialiseTaskLists+0x64>)
 8004652:	f7fe fcd4 	bl	8002ffe <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004656:	480d      	ldr	r0, [pc, #52]	; (800468c <prvInitialiseTaskLists+0x68>)
 8004658:	f7fe fcd1 	bl	8002ffe <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800465c:	480c      	ldr	r0, [pc, #48]	; (8004690 <prvInitialiseTaskLists+0x6c>)
 800465e:	f7fe fcce 	bl	8002ffe <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004662:	480c      	ldr	r0, [pc, #48]	; (8004694 <prvInitialiseTaskLists+0x70>)
 8004664:	f7fe fccb 	bl	8002ffe <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <prvInitialiseTaskLists+0x74>)
 800466a:	f7fe fcc8 	bl	8002ffe <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <prvInitialiseTaskLists+0x78>)
 8004670:	4a05      	ldr	r2, [pc, #20]	; (8004688 <prvInitialiseTaskLists+0x64>)
 8004672:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <prvInitialiseTaskLists+0x7c>)
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <prvInitialiseTaskLists+0x68>)
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000650 	.word	0x20000650
 8004688:	200006b4 	.word	0x200006b4
 800468c:	200006c8 	.word	0x200006c8
 8004690:	200006e4 	.word	0x200006e4
 8004694:	200006f8 	.word	0x200006f8
 8004698:	20000710 	.word	0x20000710
 800469c:	200006dc 	.word	0x200006dc
 80046a0:	200006e0 	.word	0x200006e0

080046a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046aa:	e019      	b.n	80046e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80046ac:	f001 f854 	bl	8005758 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <prvCheckTasksWaitingTermination+0x50>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fd28 	bl	8003112 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <prvCheckTasksWaitingTermination+0x54>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	4a0b      	ldr	r2, [pc, #44]	; (80046f8 <prvCheckTasksWaitingTermination+0x54>)
 80046ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80046d6:	f001 f86f 	bl	80057b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f810 	bl	8004700 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <prvCheckTasksWaitingTermination+0x58>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e1      	bne.n	80046ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200006f8 	.word	0x200006f8
 80046f8:	20000724 	.word	0x20000724
 80046fc:	2000070c 	.word	0x2000070c

08004700 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4618      	mov	r0, r3
 800470e:	f001 fa25 	bl	8005b5c <vPortFree>
                vPortFree( pxTCB );
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fa22 	bl	8005b5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <prvResetNextTaskUnblockTime+0x30>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <prvResetNextTaskUnblockTime+0x34>)
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004736:	e005      	b.n	8004744 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <prvResetNextTaskUnblockTime+0x30>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <prvResetNextTaskUnblockTime+0x34>)
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	200006dc 	.word	0x200006dc
 8004754:	20000744 	.word	0x20000744

08004758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <xTaskGetSchedulerState+0x34>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004766:	2301      	movs	r3, #1
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	e008      	b.n	800477e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <xTaskGetSchedulerState+0x38>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004774:	2302      	movs	r3, #2
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	e001      	b.n	800477e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800477e:	687b      	ldr	r3, [r7, #4]
    }
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000730 	.word	0x20000730
 8004790:	2000074c 	.word	0x2000074c

08004794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <xTaskPriorityDisinherit+0xe8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d00a      	beq.n	80047ca <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60fb      	str	r3, [r7, #12]
    }
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60bb      	str	r3, [r7, #8]
    }
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d039      	beq.n	8004872 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d135      	bne.n	8004872 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3304      	adds	r3, #4
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe fc81 	bl	8003112 <uxListRemove>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	2201      	movs	r2, #1
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43da      	mvns	r2, r3
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <xTaskPriorityDisinherit+0xec>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4013      	ands	r3, r2
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <xTaskPriorityDisinherit+0xec>)
 800482a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	f1c3 0205 	rsb	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <xTaskPriorityDisinherit+0xec>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	4a0c      	ldr	r2, [pc, #48]	; (8004880 <xTaskPriorityDisinherit+0xec>)
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <xTaskPriorityDisinherit+0xf0>)
 8004860:	441a      	add	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f7fe fbf5 	bl	8003058 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004872:	697b      	ldr	r3, [r7, #20]
    }
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	2000064c 	.word	0x2000064c
 8004880:	2000072c 	.word	0x2000072c
 8004884:	20000650 	.word	0x20000650

08004888 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	613b      	str	r3, [r7, #16]
    }
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80048b2:	f000 ff51 	bl	8005758 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80048b6:	4b32      	ldr	r3, [pc, #200]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	3354      	adds	r3, #84	; 0x54
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d022      	beq.n	800490e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80048c8:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	3214      	adds	r2, #20
 80048d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	43d2      	mvns	r2, r2
 80048d8:	4011      	ands	r1, r2
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	3214      	adds	r2, #20
 80048de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	3354      	adds	r3, #84	; 0x54
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048f6:	2101      	movs	r1, #1
 80048f8:	6a38      	ldr	r0, [r7, #32]
 80048fa:	f000 fa27 	bl	8004d4c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <xTaskGenericNotifyWait+0xfc>)
 8004900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800490e:	f000 ff53 	bl	80057b8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004912:	f000 ff21 	bl	8005758 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800491c:	4b18      	ldr	r3, [pc, #96]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	3214      	adds	r2, #20
 8004924:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	3354      	adds	r3, #84	; 0x54
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d002      	beq.n	8004944 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e00e      	b.n	8004962 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004944:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	3214      	adds	r2, #20
 800494c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	43d2      	mvns	r2, r2
 8004954:	4011      	ands	r1, r2
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	3214      	adds	r2, #20
 800495a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800495e:	2301      	movs	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <xTaskGenericNotifyWait+0xf8>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	3354      	adds	r3, #84	; 0x54
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004970:	f000 ff22 	bl	80057b8 <vPortExitCritical>

        return xReturn;
 8004974:	697b      	ldr	r3, [r7, #20]
    }
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000064c 	.word	0x2000064c
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004996:	2301      	movs	r3, #1
 8004998:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	623b      	str	r3, [r7, #32]
    }
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	61fb      	str	r3, [r7, #28]
    }
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80049d6:	f000 febf 	bl	8005758 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d006      	beq.n	80049ee <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	3214      	adds	r2, #20
 80049e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80049ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4413      	add	r3, r2
 80049f4:	3354      	adds	r3, #84	; 0x54
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80049fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4413      	add	r3, r2
 8004a02:	3354      	adds	r3, #84	; 0x54
 8004a04:	2202      	movs	r2, #2
 8004a06:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d83b      	bhi.n	8004a86 <xTaskGenericNotify+0xfe>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <xTaskGenericNotify+0x8c>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004aa5 	.word	0x08004aa5
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a5d 	.word	0x08004a5d
 8004a24:	08004a6b 	.word	0x08004a6b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	3214      	adds	r2, #20
 8004a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	3214      	adds	r2, #20
 8004a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a42:	e032      	b.n	8004aaa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	3214      	adds	r2, #20
 8004a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	3214      	adds	r2, #20
 8004a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a5a:	e026      	b.n	8004aaa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	3214      	adds	r2, #20
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004a68:	e01f      	b.n	8004aaa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d006      	beq.n	8004a80 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	3214      	adds	r2, #20
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004a7e:	e014      	b.n	8004aaa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004a84:	e011      	b.n	8004aaa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004a86:	4b2b      	ldr	r3, [pc, #172]	; (8004b34 <xTaskGenericNotify+0x1ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00c      	beq.n	8004aa8 <xTaskGenericNotify+0x120>
        __asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	61bb      	str	r3, [r7, #24]
    }
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <xTaskGenericNotify+0x11a>
                    break;
 8004aa4:	bf00      	nop
 8004aa6:	e000      	b.n	8004aaa <xTaskGenericNotify+0x122>

                    break;
 8004aa8:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d139      	bne.n	8004b26 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fb2b 	bl	8003112 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <xTaskGenericNotify+0x1b0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <xTaskGenericNotify+0x1b0>)
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <xTaskGenericNotify+0x1b4>)
 8004adc:	441a      	add	r2, r3
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f7fe fab7 	bl	8003058 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <xTaskGenericNotify+0x180>
        __asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	617b      	str	r3, [r7, #20]
    }
 8004b04:	bf00      	nop
 8004b06:	e7fe      	b.n	8004b06 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <xTaskGenericNotify+0x1b8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d907      	bls.n	8004b26 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <xTaskGenericNotify+0x1bc>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b26:	f000 fe47 	bl	80057b8 <vPortExitCritical>

        return xReturn;
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3730      	adds	r7, #48	; 0x30
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000728 	.word	0x20000728
 8004b38:	2000072c 	.word	0x2000072c
 8004b3c:	20000650 	.word	0x20000650
 8004b40:	2000064c 	.word	0x2000064c
 8004b44:	e000ed04 	.word	0xe000ed04

08004b48 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b090      	sub	sp, #64	; 0x40
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004b56:	2301      	movs	r3, #1
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b92:	f000 fec3 	bl	800591c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8004b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	627a      	str	r2, [r7, #36]	; 0x24
 8004bb0:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d006      	beq.n	8004bca <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	3214      	adds	r2, #20
 8004bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4413      	add	r3, r2
 8004bd0:	3354      	adds	r3, #84	; 0x54
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3354      	adds	r3, #84	; 0x54
 8004be0:	2202      	movs	r2, #2
 8004be2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d83b      	bhi.n	8004c62 <xTaskGenericNotifyFromISR+0x11a>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <xTaskGenericNotifyFromISR+0xa8>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c81 	.word	0x08004c81
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c21 	.word	0x08004c21
 8004bfc:	08004c39 	.word	0x08004c39
 8004c00:	08004c47 	.word	0x08004c47
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	3214      	adds	r2, #20
 8004c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	ea42 0103 	orr.w	r1, r2, r3
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	3214      	adds	r2, #20
 8004c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004c1e:	e032      	b.n	8004c86 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	3214      	adds	r2, #20
 8004c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	3214      	adds	r2, #20
 8004c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004c36:	e026      	b.n	8004c86 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	3214      	adds	r2, #20
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004c44:	e01f      	b.n	8004c86 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004c46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d006      	beq.n	8004c5c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	3214      	adds	r2, #20
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004c5a:	e014      	b.n	8004c86 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004c60:	e011      	b.n	8004c86 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004c62:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <xTaskGenericNotifyFromISR+0x1e8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	61fb      	str	r3, [r7, #28]
    }
 8004c7c:	bf00      	nop
 8004c7e:	e7fe      	b.n	8004c7e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004c84:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004c86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d145      	bne.n	8004d1a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	61bb      	str	r3, [r7, #24]
    }
 8004ca8:	bf00      	nop
 8004caa:	e7fe      	b.n	8004caa <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <xTaskGenericNotifyFromISR+0x1ec>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11c      	bne.n	8004cee <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fa2a 	bl	8003112 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <xTaskGenericNotifyFromISR+0x1f0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <xTaskGenericNotifyFromISR+0x1f0>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <xTaskGenericNotifyFromISR+0x1f4>)
 8004cde:	441a      	add	r2, r3
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fe f9b6 	bl	8003058 <vListInsertEnd>
 8004cec:	e005      	b.n	8004cfa <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	3318      	adds	r3, #24
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4812      	ldr	r0, [pc, #72]	; (8004d40 <xTaskGenericNotifyFromISR+0x1f8>)
 8004cf6:	f7fe f9af 	bl	8003058 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <xTaskGenericNotifyFromISR+0x1fc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d908      	bls.n	8004d1a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <xTaskGenericNotifyFromISR+0x200>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f383 8811 	msr	BASEPRI, r3
    }
 8004d24:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8004d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3740      	adds	r7, #64	; 0x40
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000728 	.word	0x20000728
 8004d34:	2000074c 	.word	0x2000074c
 8004d38:	2000072c 	.word	0x2000072c
 8004d3c:	20000650 	.word	0x20000650
 8004d40:	200006e4 	.word	0x200006e4
 8004d44:	2000064c 	.word	0x2000064c
 8004d48:	20000738 	.word	0x20000738

08004d4c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004d56:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5c:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f9d5 	bl	8003112 <uxListRemove>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	2201      	movs	r2, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4013      	ands	r3, r2
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d84:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d10a      	bne.n	8004da4 <prvAddCurrentTaskToDelayedList+0x58>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d94:	4b1a      	ldr	r3, [pc, #104]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	481a      	ldr	r0, [pc, #104]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d9e:	f7fe f95b 	bl	8003058 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004da2:	e026      	b.n	8004df2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d209      	bcs.n	8004dd0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fe f969 	bl	80030a0 <vListInsert>
}
 8004dce:	e010      	b.n	8004df2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fe f95f 	bl	80030a0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004de2:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d202      	bcs.n	8004df2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004dec:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	6013      	str	r3, [r2, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000728 	.word	0x20000728
 8004e00:	2000064c 	.word	0x2000064c
 8004e04:	2000072c 	.word	0x2000072c
 8004e08:	20000710 	.word	0x20000710
 8004e0c:	200006e0 	.word	0x200006e0
 8004e10:	200006dc 	.word	0x200006dc
 8004e14:	20000744 	.word	0x20000744

08004e18 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004e22:	f000 fb31 	bl	8005488 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004e26:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <xTimerCreateTimerTask+0x54>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <xTimerCreateTimerTask+0x58>)
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	2302      	movs	r3, #2
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	2300      	movs	r3, #0
 8004e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e3c:	490d      	ldr	r1, [pc, #52]	; (8004e74 <xTimerCreateTimerTask+0x5c>)
 8004e3e:	480e      	ldr	r0, [pc, #56]	; (8004e78 <xTimerCreateTimerTask+0x60>)
 8004e40:	f7fe ff46 	bl	8003cd0 <xTaskCreate>
 8004e44:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	603b      	str	r3, [r7, #0]
    }
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004e62:	687b      	ldr	r3, [r7, #4]
    }
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000780 	.word	0x20000780
 8004e70:	20000784 	.word	0x20000784
 8004e74:	0800f7f4 	.word	0x0800f7f4
 8004e78:	08005069 	.word	0x08005069

08004e7c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004e8a:	202c      	movs	r0, #44	; 0x2c
 8004e8c:	f000 fd86 	bl	800599c <pvPortMalloc>
 8004e90:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f805 	bl	8004ebe <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004eb4:	697b      	ldr	r3, [r7, #20]
        }
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	617b      	str	r3, [r7, #20]
    }
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01e      	beq.n	8004f2c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8004eee:	f000 facb 	bl	8005488 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe f895 	bl	800303e <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f20:	f043 0304 	orr.w	r3, r3, #4
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8004f2c:	bf00      	nop
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	623b      	str	r3, [r7, #32]
    }
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <xTimerGenericCommand+0x98>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d02a      	beq.n	8004fc0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	dc18      	bgt.n	8004fae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f7c:	f7ff fbec 	bl	8004758 <xTaskGetSchedulerState>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d109      	bne.n	8004f9a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f86:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <xTimerGenericCommand+0x98>)
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f107 0114 	add.w	r1, r7, #20
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f92:	f7fe f9d3 	bl	800333c <xQueueGenericSend>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24
 8004f98:	e012      	b.n	8004fc0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <xTimerGenericCommand+0x98>)
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f107 0114 	add.w	r1, r7, #20
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f7fe f9c9 	bl	800333c <xQueueGenericSend>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24
 8004fac:	e008      	b.n	8004fc0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <xTimerGenericCommand+0x98>)
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f107 0114 	add.w	r1, r7, #20
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	f7fe fabd 	bl	8003538 <xQueueGenericSendFromISR>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000780 	.word	0x20000780

08004fd0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fda:	4b22      	ldr	r3, [pc, #136]	; (8005064 <prvProcessExpiredTimer+0x94>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe f892 	bl	8003112 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d022      	beq.n	8005042 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	18d1      	adds	r1, r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	6978      	ldr	r0, [r7, #20]
 800500a:	f000 f8d1 	bl	80051b0 <prvInsertTimerInActiveList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01f      	beq.n	8005054 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005014:	2300      	movs	r3, #0
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	2100      	movs	r1, #0
 800501e:	6978      	ldr	r0, [r7, #20]
 8005020:	f7ff ff88 	bl	8004f34 <xTimerGenericCommand>
 8005024:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d113      	bne.n	8005054 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60fb      	str	r3, [r7, #12]
    }
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	b2da      	uxtb	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	4798      	blx	r3
    }
 800505c:	bf00      	nop
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000778 	.word	0x20000778

08005068 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005070:	f107 0308 	add.w	r3, r7, #8
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f857 	bl	8005128 <prvGetNextExpireTime>
 800507a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4619      	mov	r1, r3
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f803 	bl	800508c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005086:	f000 f8d5 	bl	8005234 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800508a:	e7f1      	b.n	8005070 <prvTimerTask+0x8>

0800508c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005096:	f7fe ffb3 	bl	8004000 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800509a:	f107 0308 	add.w	r3, r7, #8
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f866 	bl	8005170 <prvSampleTimeNow>
 80050a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d130      	bne.n	800510e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <prvProcessTimerOrBlockTask+0x3c>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d806      	bhi.n	80050c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80050ba:	f7fe ffaf 	bl	800401c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff85 	bl	8004fd0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80050c6:	e024      	b.n	8005112 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <prvProcessTimerOrBlockTask+0x90>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <prvProcessTimerOrBlockTask+0x50>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <prvProcessTimerOrBlockTask+0x52>
 80050dc:	2300      	movs	r3, #0
 80050de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <prvProcessTimerOrBlockTask+0x94>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	4619      	mov	r1, r3
 80050ee:	f7fe fdbb 	bl	8003c68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80050f2:	f7fe ff93 	bl	800401c <xTaskResumeAll>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <prvProcessTimerOrBlockTask+0x98>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
    }
 800510c:	e001      	b.n	8005112 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800510e:	f7fe ff85 	bl	800401c <xTaskResumeAll>
    }
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	2000077c 	.word	0x2000077c
 8005120:	20000780 	.word	0x20000780
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <prvGetNextExpireTime+0x44>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <prvGetNextExpireTime+0x16>
 800513a:	2201      	movs	r2, #1
 800513c:	e000      	b.n	8005140 <prvGetNextExpireTime+0x18>
 800513e:	2200      	movs	r2, #0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800514c:	4b07      	ldr	r3, [pc, #28]	; (800516c <prvGetNextExpireTime+0x44>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e001      	b.n	800515c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800515c:	68fb      	ldr	r3, [r7, #12]
    }
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	20000778 	.word	0x20000778

08005170 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005178:	f7fe ffec 	bl	8004154 <xTaskGetTickCount>
 800517c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <prvSampleTimeNow+0x3c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	429a      	cmp	r2, r3
 8005186:	d205      	bcs.n	8005194 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005188:	f000 f91a 	bl	80053c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e002      	b.n	800519a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800519a:	4a04      	ldr	r2, [pc, #16]	; (80051ac <prvSampleTimeNow+0x3c>)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80051a0:	68fb      	ldr	r3, [r7, #12]
    }
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000788 	.word	0x20000788

080051b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d812      	bhi.n	80051fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d302      	bcc.n	80051ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80051e4:	2301      	movs	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e01b      	b.n	8005222 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <prvInsertTimerInActiveList+0x7c>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fd ff53 	bl	80030a0 <vListInsert>
 80051fa:	e012      	b.n	8005222 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d206      	bcs.n	8005212 <prvInsertTimerInActiveList+0x62>
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d302      	bcc.n	8005212 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e007      	b.n	8005222 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <prvInsertTimerInActiveList+0x80>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7fd ff3f 	bl	80030a0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005222:	697b      	ldr	r3, [r7, #20]
    }
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	2000077c 	.word	0x2000077c
 8005230:	20000778 	.word	0x20000778

08005234 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	; 0x30
 8005238:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800523a:	e0ae      	b.n	800539a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f2c0 80aa 	blt.w	8005398 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	3304      	adds	r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7fd ff5c 	bl	8003112 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff87 	bl	8005170 <prvSampleTimeNow>
 8005262:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b09      	cmp	r3, #9
 8005268:	f200 8097 	bhi.w	800539a <prvProcessReceivedCommands+0x166>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <prvProcessReceivedCommands+0x40>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	0800529d 	.word	0x0800529d
 8005278:	0800529d 	.word	0x0800529d
 800527c:	0800529d 	.word	0x0800529d
 8005280:	08005311 	.word	0x08005311
 8005284:	08005325 	.word	0x08005325
 8005288:	0800536f 	.word	0x0800536f
 800528c:	0800529d 	.word	0x0800529d
 8005290:	0800529d 	.word	0x0800529d
 8005294:	08005311 	.word	0x08005311
 8005298:	08005325 	.word	0x08005325
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	18d1      	adds	r1, r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052bc:	f7ff ff78 	bl	80051b0 <prvInsertTimerInActiveList>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d069      	beq.n	800539a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052cc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05e      	beq.n	800539a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	441a      	add	r2, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2300      	movs	r3, #0
 80052ea:	2100      	movs	r1, #0
 80052ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ee:	f7ff fe21 	bl	8004f34 <xTimerGenericCommand>
 80052f2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d14f      	bne.n	800539a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61bb      	str	r3, [r7, #24]
    }
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	b2da      	uxtb	r2, r3
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005322:	e03a      	b.n	800539a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	617b      	str	r3, [r7, #20]
    }
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	18d1      	adds	r1, r2, r3
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005368:	f7ff ff22 	bl	80051b0 <prvInsertTimerInActiveList>
                        break;
 800536c:	e015      	b.n	800539a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800537c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800537e:	f000 fbed 	bl	8005b5c <vPortFree>
 8005382:	e00a      	b.n	800539a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005396:	e000      	b.n	800539a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005398:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <prvProcessReceivedCommands+0x188>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f107 0108 	add.w	r1, r7, #8
 80053a2:	2200      	movs	r2, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe f971 	bl	800368c <xQueueReceive>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f47f af45 	bne.w	800523c <prvProcessReceivedCommands+0x8>
        }
    }
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	3728      	adds	r7, #40	; 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000780 	.word	0x20000780

080053c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053c6:	e048      	b.n	800545a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053c8:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <prvSwitchTimerLists+0xc0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d2:	4b2b      	ldr	r3, [pc, #172]	; (8005480 <prvSwitchTimerLists+0xc0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3304      	adds	r3, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fd fe96 	bl	8003112 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d02e      	beq.n	800545a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	429a      	cmp	r2, r3
 800540c:	d90e      	bls.n	800542c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800541a:	4b19      	ldr	r3, [pc, #100]	; (8005480 <prvSwitchTimerLists+0xc0>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f7fd fe3b 	bl	80030a0 <vListInsert>
 800542a:	e016      	b.n	800545a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800542c:	2300      	movs	r3, #0
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	2100      	movs	r1, #0
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff fd7c 	bl	8004f34 <xTimerGenericCommand>
 800543c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	603b      	str	r3, [r7, #0]
    }
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <prvSwitchTimerLists+0xc0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1b1      	bne.n	80053c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <prvSwitchTimerLists+0xc0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800546a:	4b06      	ldr	r3, [pc, #24]	; (8005484 <prvSwitchTimerLists+0xc4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <prvSwitchTimerLists+0xc0>)
 8005470:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005472:	4a04      	ldr	r2, [pc, #16]	; (8005484 <prvSwitchTimerLists+0xc4>)
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	6013      	str	r3, [r2, #0]
    }
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000778 	.word	0x20000778
 8005484:	2000077c 	.word	0x2000077c

08005488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800548c:	f000 f964 	bl	8005758 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <prvCheckForValidListAndQueue+0x54>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11d      	bne.n	80054d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005498:	4811      	ldr	r0, [pc, #68]	; (80054e0 <prvCheckForValidListAndQueue+0x58>)
 800549a:	f7fd fdb0 	bl	8002ffe <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800549e:	4811      	ldr	r0, [pc, #68]	; (80054e4 <prvCheckForValidListAndQueue+0x5c>)
 80054a0:	f7fd fdad 	bl	8002ffe <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <prvCheckForValidListAndQueue+0x60>)
 80054a6:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <prvCheckForValidListAndQueue+0x58>)
 80054a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80054aa:	4b10      	ldr	r3, [pc, #64]	; (80054ec <prvCheckForValidListAndQueue+0x64>)
 80054ac:	4a0d      	ldr	r2, [pc, #52]	; (80054e4 <prvCheckForValidListAndQueue+0x5c>)
 80054ae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80054b0:	2200      	movs	r2, #0
 80054b2:	210c      	movs	r1, #12
 80054b4:	200a      	movs	r0, #10
 80054b6:	f7fd febf 	bl	8003238 <xQueueGenericCreate>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4a07      	ldr	r2, [pc, #28]	; (80054dc <prvCheckForValidListAndQueue+0x54>)
 80054be:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <prvCheckForValidListAndQueue+0x54>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <prvCheckForValidListAndQueue+0x54>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4908      	ldr	r1, [pc, #32]	; (80054f0 <prvCheckForValidListAndQueue+0x68>)
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fba0 	bl	8003c14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80054d4:	f000 f970 	bl	80057b8 <vPortExitCritical>
    }
 80054d8:	bf00      	nop
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000780 	.word	0x20000780
 80054e0:	20000750 	.word	0x20000750
 80054e4:	20000764 	.word	0x20000764
 80054e8:	20000778 	.word	0x20000778
 80054ec:	2000077c 	.word	0x2000077c
 80054f0:	0800f7fc 	.word	0x0800f7fc

080054f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3b04      	subs	r3, #4
 8005504:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800550c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3b04      	subs	r3, #4
 8005512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3b04      	subs	r3, #4
 8005522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005524:	4a0c      	ldr	r2, [pc, #48]	; (8005558 <pxPortInitialiseStack+0x64>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3b14      	subs	r3, #20
 800552e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3b04      	subs	r3, #4
 800553a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f06f 0202 	mvn.w	r2, #2
 8005542:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b20      	subs	r3, #32
 8005548:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	0800555d 	.word	0x0800555d

0800555c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005566:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <prvTaskExitError+0x54>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d00a      	beq.n	8005586 <prvTaskExitError+0x2a>
        __asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	60fb      	str	r3, [r7, #12]
    }
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <prvTaskExitError+0x28>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
    }
 8005598:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800559a:	bf00      	nop
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0fc      	beq.n	800559c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000020 	.word	0x20000020
	...

080055c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <pxCurrentTCBConst2>)
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	6808      	ldr	r0, [r1, #0]
 80055c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	f380 8809 	msr	PSP, r0
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8811 	msr	BASEPRI, r0
 80055da:	4770      	bx	lr
 80055dc:	f3af 8000 	nop.w

080055e0 <pxCurrentTCBConst2>:
 80055e0:	2000064c 	.word	0x2000064c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop

080055e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80055e8:	4808      	ldr	r0, [pc, #32]	; (800560c <prvPortStartFirstTask+0x24>)
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	6800      	ldr	r0, [r0, #0]
 80055ee:	f380 8808 	msr	MSP, r0
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8814 	msr	CONTROL, r0
 80055fa:	b662      	cpsie	i
 80055fc:	b661      	cpsie	f
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	df00      	svc	0
 8005608:	bf00      	nop
 800560a:	0000      	.short	0x0000
 800560c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop

08005614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800561a:	4b46      	ldr	r3, [pc, #280]	; (8005734 <xPortStartScheduler+0x120>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a46      	ldr	r2, [pc, #280]	; (8005738 <xPortStartScheduler+0x124>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10a      	bne.n	800563a <xPortStartScheduler+0x26>
        __asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
    }
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800563a:	4b3e      	ldr	r3, [pc, #248]	; (8005734 <xPortStartScheduler+0x120>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a3f      	ldr	r2, [pc, #252]	; (800573c <xPortStartScheduler+0x128>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10a      	bne.n	800565a <xPortStartScheduler+0x46>
        __asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
    }
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800565a:	4b39      	ldr	r3, [pc, #228]	; (8005740 <xPortStartScheduler+0x12c>)
 800565c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <xPortStartScheduler+0x130>)
 8005680:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005682:	4b31      	ldr	r3, [pc, #196]	; (8005748 <xPortStartScheduler+0x134>)
 8005684:	2207      	movs	r2, #7
 8005686:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005688:	e009      	b.n	800569e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800568a:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <xPortStartScheduler+0x134>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3b01      	subs	r3, #1
 8005690:	4a2d      	ldr	r2, [pc, #180]	; (8005748 <xPortStartScheduler+0x134>)
 8005692:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d0ef      	beq.n	800568a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056aa:	4b27      	ldr	r3, [pc, #156]	; (8005748 <xPortStartScheduler+0x134>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1c3 0307 	rsb	r3, r3, #7
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d00a      	beq.n	80056cc <xPortStartScheduler+0xb8>
        __asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	60bb      	str	r3, [r7, #8]
    }
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056cc:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <xPortStartScheduler+0x134>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	021b      	lsls	r3, r3, #8
 80056d2:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <xPortStartScheduler+0x134>)
 80056d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <xPortStartScheduler+0x134>)
 80056e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80056ea:	4b18      	ldr	r3, [pc, #96]	; (800574c <xPortStartScheduler+0x138>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a17      	ldr	r2, [pc, #92]	; (800574c <xPortStartScheduler+0x138>)
 80056f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <xPortStartScheduler+0x138>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a14      	ldr	r2, [pc, #80]	; (800574c <xPortStartScheduler+0x138>)
 80056fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005702:	f000 f8db 	bl	80058bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <xPortStartScheduler+0x13c>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800570c:	f000 f8fa 	bl	8005904 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <xPortStartScheduler+0x140>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <xPortStartScheduler+0x140>)
 8005716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800571a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800571c:	f7ff ff64 	bl	80055e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005720:	f7fe fdd2 	bl	80042c8 <vTaskSwitchContext>
    prvTaskExitError();
 8005724:	f7ff ff1a 	bl	800555c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	e000ed00 	.word	0xe000ed00
 8005738:	410fc271 	.word	0x410fc271
 800573c:	410fc270 	.word	0x410fc270
 8005740:	e000e400 	.word	0xe000e400
 8005744:	2000078c 	.word	0x2000078c
 8005748:	20000790 	.word	0x20000790
 800574c:	e000ed20 	.word	0xe000ed20
 8005750:	20000020 	.word	0x20000020
 8005754:	e000ef34 	.word	0xe000ef34

08005758 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
        __asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
    }
 8005770:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <vPortEnterCritical+0x58>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <vPortEnterCritical+0x58>)
 800577a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <vPortEnterCritical+0x58>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10f      	bne.n	80057a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <vPortEnterCritical+0x5c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	603b      	str	r3, [r7, #0]
    }
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <vPortEnterCritical+0x4a>
    }
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000020 	.word	0x20000020
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <vPortExitCritical+0x50>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <vPortExitCritical+0x24>
        __asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	607b      	str	r3, [r7, #4]
    }
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <vPortExitCritical+0x50>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <vPortExitCritical+0x50>)
 80057e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80057e6:	4b08      	ldr	r3, [pc, #32]	; (8005808 <vPortExitCritical+0x50>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <vPortExitCritical+0x42>
 80057ee:	2300      	movs	r3, #0
 80057f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f383 8811 	msr	BASEPRI, r3
    }
 80057f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000020 	.word	0x20000020
 800580c:	00000000 	.word	0x00000000

08005810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005810:	f3ef 8009 	mrs	r0, PSP
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <pxCurrentTCBConst>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	f01e 0f10 	tst.w	lr, #16
 8005820:	bf08      	it	eq
 8005822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582a:	6010      	str	r0, [r2, #0]
 800582c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005834:	f380 8811 	msr	BASEPRI, r0
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f7fe fd42 	bl	80042c8 <vTaskSwitchContext>
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	f380 8811 	msr	BASEPRI, r0
 800584c:	bc09      	pop	{r0, r3}
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	6808      	ldr	r0, [r1, #0]
 8005852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005856:	f01e 0f10 	tst.w	lr, #16
 800585a:	bf08      	it	eq
 800585c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005860:	f380 8809 	msr	PSP, r0
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	f3af 8000 	nop.w

08005870 <pxCurrentTCBConst>:
 8005870:	2000064c 	.word	0x2000064c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop

08005878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
        __asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	607b      	str	r3, [r7, #4]
    }
 8005890:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005892:	f7fe fc6f 	bl	8004174 <xTaskIncrementTick>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800589c:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <SysTick_Handler+0x40>)
 800589e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f383 8811 	msr	BASEPRI, r3
    }
 80058ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <vPortSetupTimerInterrupt+0x34>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <vPortSetupTimerInterrupt+0x38>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <vPortSetupTimerInterrupt+0x3c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <vPortSetupTimerInterrupt+0x40>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	4a09      	ldr	r2, [pc, #36]	; (8005900 <vPortSetupTimerInterrupt+0x44>)
 80058da:	3b01      	subs	r3, #1
 80058dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <vPortSetupTimerInterrupt+0x34>)
 80058e0:	2207      	movs	r2, #7
 80058e2:	601a      	str	r2, [r3, #0]
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000e010 	.word	0xe000e010
 80058f4:	e000e018 	.word	0xe000e018
 80058f8:	20000024 	.word	0x20000024
 80058fc:	10624dd3 	.word	0x10624dd3
 8005900:	e000e014 	.word	0xe000e014

08005904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005914 <vPortEnableVFP+0x10>
 8005908:	6801      	ldr	r1, [r0, #0]
 800590a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800590e:	6001      	str	r1, [r0, #0]
 8005910:	4770      	bx	lr
 8005912:	0000      	.short	0x0000
 8005914:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop

0800591c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005922:	f3ef 8305 	mrs	r3, IPSR
 8005926:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b0f      	cmp	r3, #15
 800592c:	d914      	bls.n	8005958 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <vPortValidateInterruptPriority+0x70>)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005938:	4b15      	ldr	r3, [pc, #84]	; (8005990 <vPortValidateInterruptPriority+0x74>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	7afa      	ldrb	r2, [r7, #11]
 800593e:	429a      	cmp	r2, r3
 8005940:	d20a      	bcs.n	8005958 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	607b      	str	r3, [r7, #4]
    }
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005958:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <vPortValidateInterruptPriority+0x78>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <vPortValidateInterruptPriority+0x7c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d90a      	bls.n	800597e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	603b      	str	r3, [r7, #0]
    }
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <vPortValidateInterruptPriority+0x60>
    }
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	e000e3f0 	.word	0xe000e3f0
 8005990:	2000078c 	.word	0x2000078c
 8005994:	e000ed0c 	.word	0xe000ed0c
 8005998:	20000790 	.word	0x20000790

0800599c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80059a8:	f7fe fb2a 	bl	8004000 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80059ac:	4b65      	ldr	r3, [pc, #404]	; (8005b44 <pvPortMalloc+0x1a8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80059b4:	f000 f934 	bl	8005c20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059b8:	4b63      	ldr	r3, [pc, #396]	; (8005b48 <pvPortMalloc+0x1ac>)
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 80a7 	bne.w	8005b14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02d      	beq.n	8005a28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80059cc:	2208      	movs	r2, #8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d227      	bcs.n	8005a28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80059d8:	2208      	movs	r2, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d021      	beq.n	8005a2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f023 0307 	bic.w	r3, r3, #7
 80059f0:	3308      	adds	r3, #8
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d214      	bcs.n	8005a22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	3308      	adds	r3, #8
 8005a00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d010      	beq.n	8005a2e <pvPortMalloc+0x92>
        __asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	617b      	str	r3, [r7, #20]
    }
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a26:	e002      	b.n	8005a2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	e000      	b.n	8005a30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d06e      	beq.n	8005b14 <pvPortMalloc+0x178>
 8005a36:	4b45      	ldr	r3, [pc, #276]	; (8005b4c <pvPortMalloc+0x1b0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d869      	bhi.n	8005b14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005a40:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <pvPortMalloc+0x1b4>)
 8005a42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005a44:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <pvPortMalloc+0x1b4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a4a:	e004      	b.n	8005a56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d903      	bls.n	8005a68 <pvPortMalloc+0xcc>
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f1      	bne.n	8005a4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005a68:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <pvPortMalloc+0x1a8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d050      	beq.n	8005b14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2208      	movs	r2, #8
 8005a78:	4413      	add	r3, r2
 8005a7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d91f      	bls.n	8005ad4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <pvPortMalloc+0x120>
        __asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	613b      	str	r3, [r7, #16]
    }
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ace:	69b8      	ldr	r0, [r7, #24]
 8005ad0:	f000 f908 	bl	8005ce4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <pvPortMalloc+0x1b0>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <pvPortMalloc+0x1b0>)
 8005ae0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ae2:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <pvPortMalloc+0x1b0>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <pvPortMalloc+0x1b8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d203      	bcs.n	8005af6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <pvPortMalloc+0x1b0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <pvPortMalloc+0x1b8>)
 8005af4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <pvPortMalloc+0x1ac>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <pvPortMalloc+0x1bc>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <pvPortMalloc+0x1bc>)
 8005b12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005b14:	f7fe fa82 	bl	800401c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <pvPortMalloc+0x19c>
        __asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	60fb      	str	r3, [r7, #12]
    }
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <pvPortMalloc+0x19a>
    return pvReturn;
 8005b38:	69fb      	ldr	r3, [r7, #28]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3728      	adds	r7, #40	; 0x28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2001339c 	.word	0x2001339c
 8005b48:	200133b0 	.word	0x200133b0
 8005b4c:	200133a0 	.word	0x200133a0
 8005b50:	20013394 	.word	0x20013394
 8005b54:	200133a4 	.word	0x200133a4
 8005b58:	200133a8 	.word	0x200133a8

08005b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d04d      	beq.n	8005c0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005b6e:	2308      	movs	r3, #8
 8005b70:	425b      	negs	r3, r3
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <vPortFree+0xb8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4013      	ands	r3, r2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <vPortFree+0x44>
        __asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
    }
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <vPortFree+0x62>
        __asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60bb      	str	r3, [r7, #8]
    }
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <vPortFree+0xb8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01e      	beq.n	8005c0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d11a      	bne.n	8005c0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <vPortFree+0xb8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	401a      	ands	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005be4:	f7fe fa0c 	bl	8004000 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <vPortFree+0xbc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <vPortFree+0xbc>)
 8005bf4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bf6:	6938      	ldr	r0, [r7, #16]
 8005bf8:	f000 f874 	bl	8005ce4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <vPortFree+0xc0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	4a06      	ldr	r2, [pc, #24]	; (8005c1c <vPortFree+0xc0>)
 8005c04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005c06:	f7fe fa09 	bl	800401c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200133b0 	.word	0x200133b0
 8005c18:	200133a0 	.word	0x200133a0
 8005c1c:	200133ac 	.word	0x200133ac

08005c20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005c2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005c2c:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <prvHeapInit+0xac>)
 8005c2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3307      	adds	r3, #7
 8005c3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0307 	bic.w	r3, r3, #7
 8005c46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ccc <prvHeapInit+0xac>)
 8005c50:	4413      	add	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c58:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <prvHeapInit+0xb0>)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005c5e:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <prvHeapInit+0xb0>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	4413      	add	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <prvHeapInit+0xb4>)
 8005c80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <prvHeapInit+0xb4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005c8a:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <prvHeapInit+0xb4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <prvHeapInit+0xb4>)
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <prvHeapInit+0xb8>)
 8005cae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <prvHeapInit+0xbc>)
 8005cb6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <prvHeapInit+0xc0>)
 8005cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000794 	.word	0x20000794
 8005cd0:	20013394 	.word	0x20013394
 8005cd4:	2001339c 	.word	0x2001339c
 8005cd8:	200133a4 	.word	0x200133a4
 8005cdc:	200133a0 	.word	0x200133a0
 8005ce0:	200133b0 	.word	0x200133b0

08005ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cec:	4b28      	ldr	r3, [pc, #160]	; (8005d90 <prvInsertBlockIntoFreeList+0xac>)
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e002      	b.n	8005cf8 <prvInsertBlockIntoFreeList+0x14>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d8f7      	bhi.n	8005cf2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d108      	bne.n	8005d26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	441a      	add	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	441a      	add	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d118      	bne.n	8005d6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <prvInsertBlockIntoFreeList+0xb0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d00d      	beq.n	8005d62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	441a      	add	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e008      	b.n	8005d74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <prvInsertBlockIntoFreeList+0xb0>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e003      	b.n	8005d74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d002      	beq.n	8005d82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20013394 	.word	0x20013394
 8005d94:	2001339c 	.word	0x2001339c

08005d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	db0b      	blt.n	8005dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	f003 021f 	and.w	r2, r3, #31
 8005db0:	4907      	ldr	r1, [pc, #28]	; (8005dd0 <__NVIC_EnableIRQ+0x38>)
 8005db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	2001      	movs	r0, #1
 8005dba:	fa00 f202 	lsl.w	r2, r0, r2
 8005dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	e000e100 	.word	0xe000e100

08005dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	6039      	str	r1, [r7, #0]
 8005dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	db0a      	blt.n	8005dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	490c      	ldr	r1, [pc, #48]	; (8005e20 <__NVIC_SetPriority+0x4c>)
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	0112      	lsls	r2, r2, #4
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	440b      	add	r3, r1
 8005df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dfc:	e00a      	b.n	8005e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	4908      	ldr	r1, [pc, #32]	; (8005e24 <__NVIC_SetPriority+0x50>)
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	3b04      	subs	r3, #4
 8005e0c:	0112      	lsls	r2, r2, #4
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	440b      	add	r3, r1
 8005e12:	761a      	strb	r2, [r3, #24]
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	e000e100 	.word	0xe000e100
 8005e24:	e000ed00 	.word	0xe000ed00

08005e28 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <inTIM4+0x30>)
 8005e2e:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <inTIM4+0x34>)
 8005e30:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <inTIM4+0x30>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <inTIM4+0x30>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <inTIM4+0x30>)
 8005e40:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e44:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <inTIM4+0x30>)
 8005e48:	220a      	movs	r2, #10
 8005e4a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 8005e4c:	4802      	ldr	r0, [pc, #8]	; (8005e58 <inTIM4+0x30>)
 8005e4e:	f000 f807 	bl	8005e60 <BasicTimer_Config>

}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200002fc 	.word	0x200002fc
 8005e5c:	40000800 	.word	0x40000800

08005e60 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e70:	b672      	cpsid	i
}
 8005e72:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a85      	ldr	r2, [pc, #532]	; (8006090 <BasicTimer_Config+0x230>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d106      	bne.n	8005e8c <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005e7e:	4b85      	ldr	r3, [pc, #532]	; (8006094 <BasicTimer_Config+0x234>)
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	4a84      	ldr	r2, [pc, #528]	; (8006094 <BasicTimer_Config+0x234>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6453      	str	r3, [r2, #68]	; 0x44
 8005e8a:	e030      	b.n	8005eee <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d106      	bne.n	8005ea4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005e96:	4b7f      	ldr	r3, [pc, #508]	; (8006094 <BasicTimer_Config+0x234>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	4a7e      	ldr	r2, [pc, #504]	; (8006094 <BasicTimer_Config+0x234>)
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea2:	e024      	b.n	8005eee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a7b      	ldr	r2, [pc, #492]	; (8006098 <BasicTimer_Config+0x238>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d106      	bne.n	8005ebc <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005eae:	4b79      	ldr	r3, [pc, #484]	; (8006094 <BasicTimer_Config+0x234>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	4a78      	ldr	r2, [pc, #480]	; (8006094 <BasicTimer_Config+0x234>)
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eba:	e018      	b.n	8005eee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a76      	ldr	r2, [pc, #472]	; (800609c <BasicTimer_Config+0x23c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d106      	bne.n	8005ed4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8005ec6:	4b73      	ldr	r3, [pc, #460]	; (8006094 <BasicTimer_Config+0x234>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	4a72      	ldr	r2, [pc, #456]	; (8006094 <BasicTimer_Config+0x234>)
 8005ecc:	f043 0304 	orr.w	r3, r3, #4
 8005ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ed2:	e00c      	b.n	8005eee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a71      	ldr	r2, [pc, #452]	; (80060a0 <BasicTimer_Config+0x240>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d106      	bne.n	8005eec <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005ede:	4b6d      	ldr	r3, [pc, #436]	; (8006094 <BasicTimer_Config+0x234>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	4a6c      	ldr	r2, [pc, #432]	; (8006094 <BasicTimer_Config+0x234>)
 8005ee4:	f043 0308 	orr.w	r3, r3, #8
 8005ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eea:	e000      	b.n	8005eee <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8005eec:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005efc:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6892      	ldr	r2, [r2, #8]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	791b      	ldrb	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 80d3 	bne.w	80060b8 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0210 	bic.w	r2, r2, #16
 8005f20:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2ba0      	cmp	r3, #160	; 0xa0
 8005f2c:	d022      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2bc8      	cmp	r3, #200	; 0xc8
 8005f32:	d01f      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005f3a:	d01b      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005f42:	d017      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f4a:	d013      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005f52:	d00f      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005f5a:	d00b      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8005f62:	d007      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8005f6a:	d003      	beq.n	8005f74 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f72:	d10b      	bne.n	8005f8c <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2264      	movs	r2, #100	; 0x64
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	3a01      	subs	r2, #1
 8005f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f8a:	e07c      	b.n	8006086 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f92:	d029      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f9a:	d025      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d020      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005fac:	d01c      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d017      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f241 7270 	movw	r2, #6000	; 0x1770
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d012      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00d      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005fd2:	d009      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f242 3228 	movw	r2, #9000	; 0x2328
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d10c      	bne.n	8006002 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	3a01      	subs	r2, #1
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006000:	e041      	b.n	8006086 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006008:	d028      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006010:	4293      	cmp	r3, r2
 8006012:	d023      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f247 5230 	movw	r2, #30000	; 0x7530
 800601a:	4293      	cmp	r3, r2
 800601c:	d01e      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f649 4240 	movw	r2, #40000	; 0x9c40
 8006024:	4293      	cmp	r3, r2
 8006026:	d019      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800602e:	4293      	cmp	r3, r2
 8006030:	d014      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006038:	4293      	cmp	r3, r2
 800603a:	d00f      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4a19      	ldr	r2, [pc, #100]	; (80060a4 <BasicTimer_Config+0x244>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a18      	ldr	r2, [pc, #96]	; (80060a8 <BasicTimer_Config+0x248>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4a17      	ldr	r2, [pc, #92]	; (80060ac <BasicTimer_Config+0x24c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4a16      	ldr	r2, [pc, #88]	; (80060b0 <BasicTimer_Config+0x250>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	3a01      	subs	r2, #1
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
 800606c:	e00b      	b.n	8006086 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <BasicTimer_Config+0x254>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	08db      	lsrs	r3, r3, #3
 800607a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	3a01      	subs	r2, #1
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
 800608e:	e027      	b.n	80060e0 <BasicTimer_Config+0x280>
 8006090:	40010000 	.word	0x40010000
 8006094:	40023800 	.word	0x40023800
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	00011170 	.word	0x00011170
 80060a8:	00013880 	.word	0x00013880
 80060ac:	00015f90 	.word	0x00015f90
 80060b0:	000186a0 	.word	0x000186a0
 80060b4:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0210 	orr.w	r2, r2, #16
 80060c6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3a01      	subs	r2, #1
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3a01      	subs	r2, #1
 80060de:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d12d      	bne.n	8006144 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d103      	bne.n	800610a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8006102:	201c      	movs	r0, #28
 8006104:	f7ff fe48 	bl	8005d98 <__NVIC_EnableIRQ>
 8006108:	e024      	b.n	8006154 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a14      	ldr	r2, [pc, #80]	; (8006160 <BasicTimer_Config+0x300>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8006114:	201d      	movs	r0, #29
 8006116:	f7ff fe3f 	bl	8005d98 <__NVIC_EnableIRQ>
 800611a:	e01b      	b.n	8006154 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a10      	ldr	r2, [pc, #64]	; (8006164 <BasicTimer_Config+0x304>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d103      	bne.n	800612e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8006126:	201e      	movs	r0, #30
 8006128:	f7ff fe36 	bl	8005d98 <__NVIC_EnableIRQ>
 800612c:	e012      	b.n	8006154 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0d      	ldr	r2, [pc, #52]	; (8006168 <BasicTimer_Config+0x308>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d103      	bne.n	8006140 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8006138:	2032      	movs	r0, #50	; 0x32
 800613a:	f7ff fe2d 	bl	8005d98 <__NVIC_EnableIRQ>
 800613e:	e009      	b.n	8006154 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8006140:	bf00      	nop
 8006142:	e007      	b.n	8006154 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0201 	bic.w	r2, r2, #1
 8006152:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8006154:	b662      	cpsie	i
}
 8006156:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00

0800616c <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8006176:	4818      	ldr	r0, [pc, #96]	; (80061d8 <delay_ms+0x6c>)
 8006178:	f000 fab8 	bl	80066ec <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	461a      	mov	r2, r3
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	4413      	add	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8006190:	e016      	b.n	80061c0 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <delay_ms+0x6c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00f      	beq.n	80061c0 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <delay_ms+0x6c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	3301      	adds	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	89fb      	ldrh	r3, [r7, #14]
 80061ac:	4413      	add	r3, r2
 80061ae:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <delay_ms+0x6c>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <delay_ms+0x6c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 80061c0:	89fa      	ldrh	r2, [r7, #14]
 80061c2:	89bb      	ldrh	r3, [r7, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d3e4      	bcc.n	8006192 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 80061c8:	4803      	ldr	r0, [pc, #12]	; (80061d8 <delay_ms+0x6c>)
 80061ca:	f000 faa1 	bl	8006710 <stopTimer>
}
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200002fc 	.word	0x200002fc

080061dc <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80061e8:	b672      	cpsid	i
}
 80061ea:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d105      	bne.n	8006202 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	4619      	mov	r1, r3
 80061fa:	201c      	movs	r0, #28
 80061fc:	f7ff fdea 	bl	8005dd4 <__NVIC_SetPriority>
 8006200:	e021      	b.n	8006246 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a13      	ldr	r2, [pc, #76]	; (8006254 <TIM_SetPriority+0x78>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d105      	bne.n	8006218 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	4619      	mov	r1, r3
 8006210:	201d      	movs	r0, #29
 8006212:	f7ff fddf 	bl	8005dd4 <__NVIC_SetPriority>
 8006216:	e016      	b.n	8006246 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <TIM_SetPriority+0x7c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d105      	bne.n	800622e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	4619      	mov	r1, r3
 8006226:	201e      	movs	r0, #30
 8006228:	f7ff fdd4 	bl	8005dd4 <__NVIC_SetPriority>
 800622c:	e00b      	b.n	8006246 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <TIM_SetPriority+0x80>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d105      	bne.n	8006244 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	4619      	mov	r1, r3
 800623c:	2032      	movs	r0, #50	; 0x32
 800623e:	f7ff fdc9 	bl	8005dd4 <__NVIC_SetPriority>
 8006242:	e000      	b.n	8006246 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8006244:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006246:	b662      	cpsie	i
}
 8006248:	bf00      	nop
	}

	__enable_irq();

}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40000400 	.word	0x40000400
 8006258:	40000800 	.word	0x40000800
 800625c:	40000c00 	.word	0x40000c00

08006260 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006264:	bf00      	nop
}
 8006266:	bf00      	nop
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006274:	bf00      	nop
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006284:	bf00      	nop
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006294:	bf00      	nop
}
 8006296:	bf00      	nop
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80062a4:	bf00      	nop
}
 80062a6:	bf00      	nop
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80062b4:	bf00      	nop
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80062c4:	bf00      	nop
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80062d4:	bf00      	nop
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80062e4:	bf00      	nop
}
 80062e6:	bf00      	nop
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80062f4:	bf00      	nop
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006304:	bf00      	nop
}
 8006306:	bf00      	nop
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006314:	bf00      	nop
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006324:	bf00      	nop
}
 8006326:	bf00      	nop
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006334:	bf00      	nop
}
 8006336:	bf00      	nop
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006344:	bf00      	nop
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006354:	bf00      	nop
}
 8006356:	bf00      	nop
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006364:	bf00      	nop
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006374:	bf00      	nop
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8006384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8006392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80063a2:	f7fb fa71 	bl	8001888 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80063a6:	e066      	b.n	8006476 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80063a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d012      	beq.n	80063dc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80063b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063c0:	f023 0302 	bic.w	r3, r3, #2
 80063c4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80063c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063d4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80063d6:	f7ff ff5b 	bl	8006290 <Capture_TIM2_Ch1_Callback>
}
 80063da:	e04c      	b.n	8006476 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80063dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d012      	beq.n	8006410 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80063ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80063f4:	f023 0304 	bic.w	r3, r3, #4
 80063f8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80063fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006408:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800640a:	f7ff ff49 	bl	80062a0 <Capture_TIM2_Ch2_Callback>
}
 800640e:	e032      	b.n	8006476 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8006410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d012      	beq.n	8006444 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800641e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006428:	f023 0308 	bic.w	r3, r3, #8
 800642c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800642e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800643c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800643e:	f7ff ff37 	bl	80062b0 <Capture_TIM2_Ch3_Callback>
}
 8006442:	e018      	b.n	8006476 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8006444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b00      	cmp	r3, #0
 8006450:	d011      	beq.n	8006476 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8006452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800645c:	f023 0310 	bic.w	r3, r3, #16
 8006460:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8006462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800646c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006470:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8006472:	f7ff ff25 	bl	80062c0 <Capture_TIM2_Ch4_Callback>
}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8006480:	4b31      	ldr	r3, [pc, #196]	; (8006548 <TIM3_IRQHandler+0xcc>)
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800648c:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <TIM3_IRQHandler+0xcc>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	4a2d      	ldr	r2, [pc, #180]	; (8006548 <TIM3_IRQHandler+0xcc>)
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8006498:	f7ff fee2 	bl	8006260 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800649c:	e052      	b.n	8006544 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00e      	beq.n	80064c8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80064aa:	4b27      	ldr	r3, [pc, #156]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4a26      	ldr	r2, [pc, #152]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064b0:	f023 0302 	bic.w	r3, r3, #2
 80064b4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80064b6:	4b24      	ldr	r3, [pc, #144]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	4a23      	ldr	r2, [pc, #140]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80064c2:	f7ff ff05 	bl	80062d0 <Capture_TIM3_Ch1_Callback>
}
 80064c6:	e03d      	b.n	8006544 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80064c8:	4b1f      	ldr	r3, [pc, #124]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80064d4:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064da:	f023 0304 	bic.w	r3, r3, #4
 80064de:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	4a18      	ldr	r2, [pc, #96]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ea:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80064ec:	f7ff fef8 	bl	80062e0 <Capture_TIM3_Ch2_Callback>
}
 80064f0:	e028      	b.n	8006544 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <TIM3_IRQHandler+0xcc>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00e      	beq.n	800651c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <TIM3_IRQHandler+0xcc>)
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	4a11      	ldr	r2, [pc, #68]	; (8006548 <TIM3_IRQHandler+0xcc>)
 8006504:	f023 0308 	bic.w	r3, r3, #8
 8006508:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800650a:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <TIM3_IRQHandler+0xcc>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	4a0e      	ldr	r2, [pc, #56]	; (8006548 <TIM3_IRQHandler+0xcc>)
 8006510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006514:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8006516:	f7ff feeb 	bl	80062f0 <Capture_TIM3_Ch3_Callback>
}
 800651a:	e013      	b.n	8006544 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <TIM3_IRQHandler+0xcc>)
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00d      	beq.n	8006544 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <TIM3_IRQHandler+0xcc>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	4a06      	ldr	r2, [pc, #24]	; (8006548 <TIM3_IRQHandler+0xcc>)
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <TIM3_IRQHandler+0xcc>)
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	4a03      	ldr	r2, [pc, #12]	; (8006548 <TIM3_IRQHandler+0xcc>)
 800653a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800653e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8006540:	f7ff fede 	bl	8006300 <Capture_TIM3_Ch4_Callback>
}
 8006544:	bf00      	nop
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40000400 	.word	0x40000400

0800654c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8006550:	4b31      	ldr	r3, [pc, #196]	; (8006618 <TIM4_IRQHandler+0xcc>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d008      	beq.n	800656e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800655c:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <TIM4_IRQHandler+0xcc>)
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	4a2d      	ldr	r2, [pc, #180]	; (8006618 <TIM4_IRQHandler+0xcc>)
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8006568:	f7ff fe82 	bl	8006270 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800656c:	e052      	b.n	8006614 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <TIM4_IRQHandler+0xcc>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <TIM4_IRQHandler+0xcc>)
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	4a26      	ldr	r2, [pc, #152]	; (8006618 <TIM4_IRQHandler+0xcc>)
 8006580:	f023 0302 	bic.w	r3, r3, #2
 8006584:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <TIM4_IRQHandler+0xcc>)
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	4a23      	ldr	r2, [pc, #140]	; (8006618 <TIM4_IRQHandler+0xcc>)
 800658c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006590:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8006592:	f7ff febd 	bl	8006310 <Capture_TIM4_Ch1_Callback>
}
 8006596:	e03d      	b.n	8006614 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8006598:	4b1f      	ldr	r3, [pc, #124]	; (8006618 <TIM4_IRQHandler+0xcc>)
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00e      	beq.n	80065c2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80065a4:	4b1c      	ldr	r3, [pc, #112]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065aa:	f023 0304 	bic.w	r3, r3, #4
 80065ae:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80065b0:	4b19      	ldr	r3, [pc, #100]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	4a18      	ldr	r2, [pc, #96]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ba:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80065bc:	f7ff fec8 	bl	8006350 <Capture_TIM5_Ch2_Callback>
}
 80065c0:	e028      	b.n	8006614 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	4a11      	ldr	r2, [pc, #68]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065d4:	f023 0308 	bic.w	r3, r3, #8
 80065d8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80065e6:	f7ff fe9b 	bl	8006320 <Capture_TIM4_Ch3_Callback>
}
 80065ea:	e013      	b.n	8006614 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00d      	beq.n	8006614 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80065f8:	4b07      	ldr	r3, [pc, #28]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	4a06      	ldr	r2, [pc, #24]	; (8006618 <TIM4_IRQHandler+0xcc>)
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <TIM4_IRQHandler+0xcc>)
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	4a03      	ldr	r2, [pc, #12]	; (8006618 <TIM4_IRQHandler+0xcc>)
 800660a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8006610:	f7ff fe8e 	bl	8006330 <Capture_TIM4_Ch4_Callback>
}
 8006614:	bf00      	nop
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40000800 	.word	0x40000800

0800661c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8006620:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800662c:	4b2e      	ldr	r3, [pc, #184]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	4a2d      	ldr	r2, [pc, #180]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006638:	f7ff fe22 	bl	8006280 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800663c:	e052      	b.n	80066e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800663e:	4b2a      	ldr	r3, [pc, #168]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800664a:	4b27      	ldr	r3, [pc, #156]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	4a26      	ldr	r2, [pc, #152]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006650:	f023 0302 	bic.w	r3, r3, #2
 8006654:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 800665c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006660:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8006662:	f7ff fe6d 	bl	8006340 <Capture_TIM5_Ch1_Callback>
}
 8006666:	e03d      	b.n	80066e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8006668:	4b1f      	ldr	r3, [pc, #124]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8006674:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 800667a:	f023 0304 	bic.w	r3, r3, #4
 800667e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800668c:	f7ff fe60 	bl	8006350 <Capture_TIM5_Ch2_Callback>
}
 8006690:	e028      	b.n	80066e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	4a11      	ldr	r2, [pc, #68]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066a4:	f023 0308 	bic.w	r3, r3, #8
 80066a8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066b4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80066b6:	f7ff fe53 	bl	8006360 <Capture_TIM5_Ch3_Callback>
}
 80066ba:	e013      	b.n	80066e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00d      	beq.n	80066e4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	4a06      	ldr	r2, [pc, #24]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066ce:	f023 0310 	bic.w	r3, r3, #16
 80066d2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	4a03      	ldr	r2, [pc, #12]	; (80066e8 <TIM5_IRQHandler+0xcc>)
 80066da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066de:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80066e0:	f7ff fe46 	bl	8006370 <Capture_TIM5_Ch4_Callback>
}
 80066e4:	bf00      	nop
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40000c00 	.word	0x40000c00

080066ec <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <__NVIC_EnableIRQ>:
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800673e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006742:	2b00      	cmp	r3, #0
 8006744:	db0b      	blt.n	800675e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	f003 021f 	and.w	r2, r3, #31
 800674c:	4907      	ldr	r1, [pc, #28]	; (800676c <__NVIC_EnableIRQ+0x38>)
 800674e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	2001      	movs	r0, #1
 8006756:	fa00 f202 	lsl.w	r2, r0, r2
 800675a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	e000e100 	.word	0xe000e100

08006770 <__NVIC_SetPriority>:
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800677c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006780:	2b00      	cmp	r3, #0
 8006782:	db0a      	blt.n	800679a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	490c      	ldr	r1, [pc, #48]	; (80067bc <__NVIC_SetPriority+0x4c>)
 800678a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678e:	0112      	lsls	r2, r2, #4
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	440b      	add	r3, r1
 8006794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006798:	e00a      	b.n	80067b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	4908      	ldr	r1, [pc, #32]	; (80067c0 <__NVIC_SetPriority+0x50>)
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	3b04      	subs	r3, #4
 80067a8:	0112      	lsls	r2, r2, #4
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	440b      	add	r3, r1
 80067ae:	761a      	strb	r2, [r3, #24]
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	e000e100 	.word	0xe000e100
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 f8bf 	bl	8007954 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80067d6:	4b96      	ldr	r3, [pc, #600]	; (8006a30 <extInt_Config+0x26c>)
 80067d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	791b      	ldrb	r3, [r3, #4]
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	f200 85cd 	bhi.w	8007384 <extInt_Config+0xbc0>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <extInt_Config+0x2c>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006831 	.word	0x08006831
 80067f4:	080068e7 	.word	0x080068e7
 80067f8:	0800699d 	.word	0x0800699d
 80067fc:	08006a73 	.word	0x08006a73
 8006800:	08006b29 	.word	0x08006b29
 8006804:	08006bd7 	.word	0x08006bd7
 8006808:	08006c9d 	.word	0x08006c9d
 800680c:	08006d45 	.word	0x08006d45
 8006810:	08006ded 	.word	0x08006ded
 8006814:	08006e95 	.word	0x08006e95
 8006818:	08006f5b 	.word	0x08006f5b
 800681c:	08007003 	.word	0x08007003
 8006820:	080070ab 	.word	0x080070ab
 8006824:	08007171 	.word	0x08007171
 8006828:	08007217 	.word	0x08007217
 800682c:	080072bf 	.word	0x080072bf
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8006830:	4b80      	ldr	r3, [pc, #512]	; (8006a34 <extInt_Config+0x270>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a7f      	ldr	r2, [pc, #508]	; (8006a34 <extInt_Config+0x270>)
 8006836:	f023 030f 	bic.w	r3, r3, #15
 800683a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7d      	ldr	r2, [pc, #500]	; (8006a38 <extInt_Config+0x274>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d105      	bne.n	8006854 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8006848:	4b7a      	ldr	r3, [pc, #488]	; (8006a34 <extInt_Config+0x270>)
 800684a:	4a7a      	ldr	r2, [pc, #488]	; (8006a34 <extInt_Config+0x270>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006850:	f000 bd9a 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a78      	ldr	r2, [pc, #480]	; (8006a3c <extInt_Config+0x278>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d107      	bne.n	8006870 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8006860:	4b74      	ldr	r3, [pc, #464]	; (8006a34 <extInt_Config+0x270>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4a73      	ldr	r2, [pc, #460]	; (8006a34 <extInt_Config+0x270>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6093      	str	r3, [r2, #8]
					break;
 800686c:	f000 bd8c 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a72      	ldr	r2, [pc, #456]	; (8006a40 <extInt_Config+0x27c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d107      	bne.n	800688c <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800687c:	4b6d      	ldr	r3, [pc, #436]	; (8006a34 <extInt_Config+0x270>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4a6c      	ldr	r2, [pc, #432]	; (8006a34 <extInt_Config+0x270>)
 8006882:	f043 0302 	orr.w	r3, r3, #2
 8006886:	6093      	str	r3, [r2, #8]
					break;
 8006888:	f000 bd7e 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6c      	ldr	r2, [pc, #432]	; (8006a44 <extInt_Config+0x280>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d107      	bne.n	80068a8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8006898:	4b66      	ldr	r3, [pc, #408]	; (8006a34 <extInt_Config+0x270>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	4a65      	ldr	r2, [pc, #404]	; (8006a34 <extInt_Config+0x270>)
 800689e:	f043 0303 	orr.w	r3, r3, #3
 80068a2:	6093      	str	r3, [r2, #8]
					break;
 80068a4:	f000 bd70 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a66      	ldr	r2, [pc, #408]	; (8006a48 <extInt_Config+0x284>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d107      	bne.n	80068c4 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80068b4:	4b5f      	ldr	r3, [pc, #380]	; (8006a34 <extInt_Config+0x270>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a5e      	ldr	r2, [pc, #376]	; (8006a34 <extInt_Config+0x270>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	6093      	str	r3, [r2, #8]
					break;
 80068c0:	f000 bd62 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a60      	ldr	r2, [pc, #384]	; (8006a4c <extInt_Config+0x288>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d107      	bne.n	80068e0 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80068d0:	4b58      	ldr	r3, [pc, #352]	; (8006a34 <extInt_Config+0x270>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	4a57      	ldr	r2, [pc, #348]	; (8006a34 <extInt_Config+0x270>)
 80068d6:	f043 0307 	orr.w	r3, r3, #7
 80068da:	6093      	str	r3, [r2, #8]
					break;
 80068dc:	f000 bd54 	b.w	8007388 <extInt_Config+0xbc4>
						__NOP();
 80068e0:	bf00      	nop
					break;
 80068e2:	f000 bd51 	b.w	8007388 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 80068e6:	4b53      	ldr	r3, [pc, #332]	; (8006a34 <extInt_Config+0x270>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4a52      	ldr	r2, [pc, #328]	; (8006a34 <extInt_Config+0x270>)
 80068ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f0:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a4f      	ldr	r2, [pc, #316]	; (8006a38 <extInt_Config+0x274>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d105      	bne.n	800690a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80068fe:	4b4d      	ldr	r3, [pc, #308]	; (8006a34 <extInt_Config+0x270>)
 8006900:	4a4c      	ldr	r2, [pc, #304]	; (8006a34 <extInt_Config+0x270>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006906:	f000 bd3f 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a4a      	ldr	r2, [pc, #296]	; (8006a3c <extInt_Config+0x278>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d107      	bne.n	8006926 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006916:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <extInt_Config+0x270>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4a46      	ldr	r2, [pc, #280]	; (8006a34 <extInt_Config+0x270>)
 800691c:	f043 0310 	orr.w	r3, r3, #16
 8006920:	6093      	str	r3, [r2, #8]
					break;
 8006922:	f000 bd31 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a44      	ldr	r2, [pc, #272]	; (8006a40 <extInt_Config+0x27c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d107      	bne.n	8006942 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8006932:	4b40      	ldr	r3, [pc, #256]	; (8006a34 <extInt_Config+0x270>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	4a3f      	ldr	r2, [pc, #252]	; (8006a34 <extInt_Config+0x270>)
 8006938:	f043 0320 	orr.w	r3, r3, #32
 800693c:	6093      	str	r3, [r2, #8]
					break;
 800693e:	f000 bd23 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a3e      	ldr	r2, [pc, #248]	; (8006a44 <extInt_Config+0x280>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d107      	bne.n	800695e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800694e:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <extInt_Config+0x270>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4a38      	ldr	r2, [pc, #224]	; (8006a34 <extInt_Config+0x270>)
 8006954:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006958:	6093      	str	r3, [r2, #8]
					break;
 800695a:	f000 bd15 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a38      	ldr	r2, [pc, #224]	; (8006a48 <extInt_Config+0x284>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d107      	bne.n	800697a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800696a:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <extInt_Config+0x270>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	4a31      	ldr	r2, [pc, #196]	; (8006a34 <extInt_Config+0x270>)
 8006970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006974:	6093      	str	r3, [r2, #8]
					break;
 8006976:	f000 bd07 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a32      	ldr	r2, [pc, #200]	; (8006a4c <extInt_Config+0x288>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d107      	bne.n	8006996 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <extInt_Config+0x270>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	4a2a      	ldr	r2, [pc, #168]	; (8006a34 <extInt_Config+0x270>)
 800698c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006990:	6093      	str	r3, [r2, #8]
					break;
 8006992:	f000 bcf9 	b.w	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006996:	bf00      	nop
					break;
 8006998:	f000 bcf6 	b.w	8007388 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 800699c:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <extInt_Config+0x270>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a24      	ldr	r2, [pc, #144]	; (8006a34 <extInt_Config+0x270>)
 80069a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069a6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <extInt_Config+0x274>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d105      	bne.n	80069c0 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80069b4:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <extInt_Config+0x270>)
 80069b6:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <extInt_Config+0x270>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80069bc:	f000 bce4 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <extInt_Config+0x278>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d107      	bne.n	80069dc <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <extInt_Config+0x270>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4a18      	ldr	r2, [pc, #96]	; (8006a34 <extInt_Config+0x270>)
 80069d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d6:	6093      	str	r3, [r2, #8]
					break;
 80069d8:	f000 bcd6 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <extInt_Config+0x27c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d107      	bne.n	80069f8 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <extInt_Config+0x270>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4a11      	ldr	r2, [pc, #68]	; (8006a34 <extInt_Config+0x270>)
 80069ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069f2:	6093      	str	r3, [r2, #8]
					break;
 80069f4:	f000 bcc8 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a11      	ldr	r2, [pc, #68]	; (8006a44 <extInt_Config+0x280>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d107      	bne.n	8006a14 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <extInt_Config+0x270>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <extInt_Config+0x270>)
 8006a0a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a0e:	6093      	str	r3, [r2, #8]
					break;
 8006a10:	f000 bcba 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a0b      	ldr	r2, [pc, #44]	; (8006a48 <extInt_Config+0x284>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d117      	bne.n	8006a50 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <extInt_Config+0x270>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	4a03      	ldr	r2, [pc, #12]	; (8006a34 <extInt_Config+0x270>)
 8006a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a2a:	6093      	str	r3, [r2, #8]
					break;
 8006a2c:	f000 bcac 	b.w	8007388 <extInt_Config+0xbc4>
 8006a30:	40023800 	.word	0x40023800
 8006a34:	40013800 	.word	0x40013800
 8006a38:	40020000 	.word	0x40020000
 8006a3c:	40020400 	.word	0x40020400
 8006a40:	40020800 	.word	0x40020800
 8006a44:	40020c00 	.word	0x40020c00
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a8a      	ldr	r2, [pc, #552]	; (8006c80 <extInt_Config+0x4bc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d107      	bne.n	8006a6c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8006a5c:	4b89      	ldr	r3, [pc, #548]	; (8006c84 <extInt_Config+0x4c0>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	4a88      	ldr	r2, [pc, #544]	; (8006c84 <extInt_Config+0x4c0>)
 8006a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a66:	6093      	str	r3, [r2, #8]
					break;
 8006a68:	f000 bc8e 	b.w	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006a6c:	bf00      	nop
					break;
 8006a6e:	f000 bc8b 	b.w	8007388 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8006a72:	4b84      	ldr	r3, [pc, #528]	; (8006c84 <extInt_Config+0x4c0>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4a83      	ldr	r2, [pc, #524]	; (8006c84 <extInt_Config+0x4c0>)
 8006a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a7c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a80      	ldr	r2, [pc, #512]	; (8006c88 <extInt_Config+0x4c4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d105      	bne.n	8006a96 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8006a8a:	4b7e      	ldr	r3, [pc, #504]	; (8006c84 <extInt_Config+0x4c0>)
 8006a8c:	4a7d      	ldr	r2, [pc, #500]	; (8006c84 <extInt_Config+0x4c0>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006a92:	f000 bc79 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7b      	ldr	r2, [pc, #492]	; (8006c8c <extInt_Config+0x4c8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d107      	bne.n	8006ab2 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8006aa2:	4b78      	ldr	r3, [pc, #480]	; (8006c84 <extInt_Config+0x4c0>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4a77      	ldr	r2, [pc, #476]	; (8006c84 <extInt_Config+0x4c0>)
 8006aa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006aac:	6093      	str	r3, [r2, #8]
					break;
 8006aae:	f000 bc6b 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a75      	ldr	r2, [pc, #468]	; (8006c90 <extInt_Config+0x4cc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d107      	bne.n	8006ace <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8006abe:	4b71      	ldr	r3, [pc, #452]	; (8006c84 <extInt_Config+0x4c0>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	4a70      	ldr	r2, [pc, #448]	; (8006c84 <extInt_Config+0x4c0>)
 8006ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ac8:	6093      	str	r3, [r2, #8]
					break;
 8006aca:	f000 bc5d 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a6f      	ldr	r2, [pc, #444]	; (8006c94 <extInt_Config+0x4d0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d107      	bne.n	8006aea <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8006ada:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <extInt_Config+0x4c0>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	4a69      	ldr	r2, [pc, #420]	; (8006c84 <extInt_Config+0x4c0>)
 8006ae0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006ae4:	6093      	str	r3, [r2, #8]
					break;
 8006ae6:	f000 bc4f 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a69      	ldr	r2, [pc, #420]	; (8006c98 <extInt_Config+0x4d4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d107      	bne.n	8006b06 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8006af6:	4b63      	ldr	r3, [pc, #396]	; (8006c84 <extInt_Config+0x4c0>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	4a62      	ldr	r2, [pc, #392]	; (8006c84 <extInt_Config+0x4c0>)
 8006afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b00:	6093      	str	r3, [r2, #8]
					break;
 8006b02:	f000 bc41 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5c      	ldr	r2, [pc, #368]	; (8006c80 <extInt_Config+0x4bc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d107      	bne.n	8006b22 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8006b12:	4b5c      	ldr	r3, [pc, #368]	; (8006c84 <extInt_Config+0x4c0>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	4a5b      	ldr	r2, [pc, #364]	; (8006c84 <extInt_Config+0x4c0>)
 8006b18:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006b1c:	6093      	str	r3, [r2, #8]
					break;
 8006b1e:	f000 bc33 	b.w	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006b22:	bf00      	nop
					break;
 8006b24:	f000 bc30 	b.w	8007388 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8006b28:	4b56      	ldr	r3, [pc, #344]	; (8006c84 <extInt_Config+0x4c0>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	4a55      	ldr	r2, [pc, #340]	; (8006c84 <extInt_Config+0x4c0>)
 8006b2e:	f023 030f 	bic.w	r3, r3, #15
 8006b32:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a53      	ldr	r2, [pc, #332]	; (8006c88 <extInt_Config+0x4c4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d105      	bne.n	8006b4c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8006b40:	4b50      	ldr	r3, [pc, #320]	; (8006c84 <extInt_Config+0x4c0>)
 8006b42:	4a50      	ldr	r2, [pc, #320]	; (8006c84 <extInt_Config+0x4c0>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006b48:	f000 bc1e 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a4e      	ldr	r2, [pc, #312]	; (8006c8c <extInt_Config+0x4c8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d107      	bne.n	8006b68 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8006b58:	4b4a      	ldr	r3, [pc, #296]	; (8006c84 <extInt_Config+0x4c0>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4a49      	ldr	r2, [pc, #292]	; (8006c84 <extInt_Config+0x4c0>)
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	60d3      	str	r3, [r2, #12]
					break;
 8006b64:	f000 bc10 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a48      	ldr	r2, [pc, #288]	; (8006c90 <extInt_Config+0x4cc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d107      	bne.n	8006b84 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <extInt_Config+0x4c0>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4a42      	ldr	r2, [pc, #264]	; (8006c84 <extInt_Config+0x4c0>)
 8006b7a:	f043 0302 	orr.w	r3, r3, #2
 8006b7e:	60d3      	str	r3, [r2, #12]
					break;
 8006b80:	f000 bc02 	b.w	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a42      	ldr	r2, [pc, #264]	; (8006c94 <extInt_Config+0x4d0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d106      	bne.n	8006b9e <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006b90:	4b3c      	ldr	r3, [pc, #240]	; (8006c84 <extInt_Config+0x4c0>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <extInt_Config+0x4c0>)
 8006b96:	f043 0303 	orr.w	r3, r3, #3
 8006b9a:	60d3      	str	r3, [r2, #12]
					break;
 8006b9c:	e3f4      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a3c      	ldr	r2, [pc, #240]	; (8006c98 <extInt_Config+0x4d4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d106      	bne.n	8006bb8 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8006baa:	4b36      	ldr	r3, [pc, #216]	; (8006c84 <extInt_Config+0x4c0>)
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4a35      	ldr	r2, [pc, #212]	; (8006c84 <extInt_Config+0x4c0>)
 8006bb0:	f043 0304 	orr.w	r3, r3, #4
 8006bb4:	60d3      	str	r3, [r2, #12]
					break;
 8006bb6:	e3e7      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a30      	ldr	r2, [pc, #192]	; (8006c80 <extInt_Config+0x4bc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d106      	bne.n	8006bd2 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006bc4:	4b2f      	ldr	r3, [pc, #188]	; (8006c84 <extInt_Config+0x4c0>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4a2e      	ldr	r2, [pc, #184]	; (8006c84 <extInt_Config+0x4c0>)
 8006bca:	f043 0307 	orr.w	r3, r3, #7
 8006bce:	60d3      	str	r3, [r2, #12]
					break;
 8006bd0:	e3da      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006bd2:	bf00      	nop
					break;
 8006bd4:	e3d8      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <extInt_Config+0x4c0>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <extInt_Config+0x4c0>)
 8006bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006be0:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a27      	ldr	r2, [pc, #156]	; (8006c88 <extInt_Config+0x4c4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d104      	bne.n	8006bf8 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8006bee:	4b25      	ldr	r3, [pc, #148]	; (8006c84 <extInt_Config+0x4c0>)
 8006bf0:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <extInt_Config+0x4c0>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006bf6:	e3c7      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <extInt_Config+0x4c8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d106      	bne.n	8006c12 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006c04:	4b1f      	ldr	r3, [pc, #124]	; (8006c84 <extInt_Config+0x4c0>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a1e      	ldr	r2, [pc, #120]	; (8006c84 <extInt_Config+0x4c0>)
 8006c0a:	f043 0310 	orr.w	r3, r3, #16
 8006c0e:	60d3      	str	r3, [r2, #12]
					break;
 8006c10:	e3ba      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1d      	ldr	r2, [pc, #116]	; (8006c90 <extInt_Config+0x4cc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d106      	bne.n	8006c2c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <extInt_Config+0x4c0>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	4a18      	ldr	r2, [pc, #96]	; (8006c84 <extInt_Config+0x4c0>)
 8006c24:	f043 0320 	orr.w	r3, r3, #32
 8006c28:	60d3      	str	r3, [r2, #12]
					break;
 8006c2a:	e3ad      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a18      	ldr	r2, [pc, #96]	; (8006c94 <extInt_Config+0x4d0>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d106      	bne.n	8006c46 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <extInt_Config+0x4c0>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a11      	ldr	r2, [pc, #68]	; (8006c84 <extInt_Config+0x4c0>)
 8006c3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006c42:	60d3      	str	r3, [r2, #12]
					break;
 8006c44:	e3a0      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a12      	ldr	r2, [pc, #72]	; (8006c98 <extInt_Config+0x4d4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d106      	bne.n	8006c60 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <extInt_Config+0x4c0>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a0b      	ldr	r2, [pc, #44]	; (8006c84 <extInt_Config+0x4c0>)
 8006c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5c:	60d3      	str	r3, [r2, #12]
					break;
 8006c5e:	e393      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <extInt_Config+0x4bc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d106      	bne.n	8006c7a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <extInt_Config+0x4c0>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a04      	ldr	r2, [pc, #16]	; (8006c84 <extInt_Config+0x4c0>)
 8006c72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006c76:	60d3      	str	r3, [r2, #12]
					break;
 8006c78:	e386      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006c7a:	bf00      	nop
					break;
 8006c7c:	e384      	b.n	8007388 <extInt_Config+0xbc4>
 8006c7e:	bf00      	nop
 8006c80:	40021c00 	.word	0x40021c00
 8006c84:	40013800 	.word	0x40013800
 8006c88:	40020000 	.word	0x40020000
 8006c8c:	40020400 	.word	0x40020400
 8006c90:	40020800 	.word	0x40020800
 8006c94:	40020c00 	.word	0x40020c00
 8006c98:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8006c9c:	4b86      	ldr	r3, [pc, #536]	; (8006eb8 <extInt_Config+0x6f4>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	4a85      	ldr	r2, [pc, #532]	; (8006eb8 <extInt_Config+0x6f4>)
 8006ca2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ca6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a83      	ldr	r2, [pc, #524]	; (8006ebc <extInt_Config+0x6f8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d104      	bne.n	8006cbe <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8006cb4:	4b80      	ldr	r3, [pc, #512]	; (8006eb8 <extInt_Config+0x6f4>)
 8006cb6:	4a80      	ldr	r2, [pc, #512]	; (8006eb8 <extInt_Config+0x6f4>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006cbc:	e364      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a7e      	ldr	r2, [pc, #504]	; (8006ec0 <extInt_Config+0x6fc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d106      	bne.n	8006cd8 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8006cca:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <extInt_Config+0x6f4>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	4a7a      	ldr	r2, [pc, #488]	; (8006eb8 <extInt_Config+0x6f4>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	60d3      	str	r3, [r2, #12]
					break;
 8006cd6:	e357      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a79      	ldr	r2, [pc, #484]	; (8006ec4 <extInt_Config+0x700>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d106      	bne.n	8006cf2 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8006ce4:	4b74      	ldr	r3, [pc, #464]	; (8006eb8 <extInt_Config+0x6f4>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a73      	ldr	r2, [pc, #460]	; (8006eb8 <extInt_Config+0x6f4>)
 8006cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cee:	60d3      	str	r3, [r2, #12]
					break;
 8006cf0:	e34a      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a73      	ldr	r2, [pc, #460]	; (8006ec8 <extInt_Config+0x704>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d106      	bne.n	8006d0c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8006cfe:	4b6e      	ldr	r3, [pc, #440]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	4a6d      	ldr	r2, [pc, #436]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d08:	60d3      	str	r3, [r2, #12]
					break;
 8006d0a:	e33d      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a6e      	ldr	r2, [pc, #440]	; (8006ecc <extInt_Config+0x708>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d106      	bne.n	8006d26 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8006d18:	4b67      	ldr	r3, [pc, #412]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a66      	ldr	r2, [pc, #408]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d22:	60d3      	str	r3, [r2, #12]
					break;
 8006d24:	e330      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a68      	ldr	r2, [pc, #416]	; (8006ed0 <extInt_Config+0x70c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d106      	bne.n	8006d40 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8006d32:	4b61      	ldr	r3, [pc, #388]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	4a60      	ldr	r2, [pc, #384]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d38:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d3c:	60d3      	str	r3, [r2, #12]
					break;
 8006d3e:	e323      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006d40:	bf00      	nop
					break;
 8006d42:	e321      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8006d44:	4b5c      	ldr	r3, [pc, #368]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a5b      	ldr	r2, [pc, #364]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d4e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a59      	ldr	r2, [pc, #356]	; (8006ebc <extInt_Config+0x6f8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d104      	bne.n	8006d66 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8006d5c:	4b56      	ldr	r3, [pc, #344]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d5e:	4a56      	ldr	r2, [pc, #344]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006d64:	e310      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a54      	ldr	r2, [pc, #336]	; (8006ec0 <extInt_Config+0x6fc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d106      	bne.n	8006d80 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8006d72:	4b51      	ldr	r3, [pc, #324]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4a50      	ldr	r2, [pc, #320]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d7c:	60d3      	str	r3, [r2, #12]
					break;
 8006d7e:	e303      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a4f      	ldr	r2, [pc, #316]	; (8006ec4 <extInt_Config+0x700>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d106      	bne.n	8006d9a <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8006d8c:	4b4a      	ldr	r3, [pc, #296]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	4a49      	ldr	r2, [pc, #292]	; (8006eb8 <extInt_Config+0x6f4>)
 8006d92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d96:	60d3      	str	r3, [r2, #12]
					break;
 8006d98:	e2f6      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a49      	ldr	r2, [pc, #292]	; (8006ec8 <extInt_Config+0x704>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d106      	bne.n	8006db4 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8006da6:	4b44      	ldr	r3, [pc, #272]	; (8006eb8 <extInt_Config+0x6f4>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a43      	ldr	r2, [pc, #268]	; (8006eb8 <extInt_Config+0x6f4>)
 8006dac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006db0:	60d3      	str	r3, [r2, #12]
					break;
 8006db2:	e2e9      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a44      	ldr	r2, [pc, #272]	; (8006ecc <extInt_Config+0x708>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d106      	bne.n	8006dce <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8006dc0:	4b3d      	ldr	r3, [pc, #244]	; (8006eb8 <extInt_Config+0x6f4>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4a3c      	ldr	r2, [pc, #240]	; (8006eb8 <extInt_Config+0x6f4>)
 8006dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dca:	60d3      	str	r3, [r2, #12]
					break;
 8006dcc:	e2dc      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a3e      	ldr	r2, [pc, #248]	; (8006ed0 <extInt_Config+0x70c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d106      	bne.n	8006de8 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8006dda:	4b37      	ldr	r3, [pc, #220]	; (8006eb8 <extInt_Config+0x6f4>)
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4a36      	ldr	r2, [pc, #216]	; (8006eb8 <extInt_Config+0x6f4>)
 8006de0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006de4:	60d3      	str	r3, [r2, #12]
					break;
 8006de6:	e2cf      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006de8:	bf00      	nop
					break;
 8006dea:	e2cd      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8006dec:	4b32      	ldr	r3, [pc, #200]	; (8006eb8 <extInt_Config+0x6f4>)
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	4a31      	ldr	r2, [pc, #196]	; (8006eb8 <extInt_Config+0x6f4>)
 8006df2:	f023 030f 	bic.w	r3, r3, #15
 8006df6:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2f      	ldr	r2, [pc, #188]	; (8006ebc <extInt_Config+0x6f8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d104      	bne.n	8006e0e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8006e04:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e06:	4a2c      	ldr	r2, [pc, #176]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006e0c:	e2bc      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <extInt_Config+0x6fc>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d106      	bne.n	8006e28 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	4a26      	ldr	r2, [pc, #152]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6113      	str	r3, [r2, #16]
					break;
 8006e26:	e2af      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a25      	ldr	r2, [pc, #148]	; (8006ec4 <extInt_Config+0x700>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d106      	bne.n	8006e42 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8006e34:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e3a:	f043 0302 	orr.w	r3, r3, #2
 8006e3e:	6113      	str	r3, [r2, #16]
					break;
 8006e40:	e2a2      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1f      	ldr	r2, [pc, #124]	; (8006ec8 <extInt_Config+0x704>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d106      	bne.n	8006e5c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e54:	f043 0303 	orr.w	r3, r3, #3
 8006e58:	6113      	str	r3, [r2, #16]
					break;
 8006e5a:	e295      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1a      	ldr	r2, [pc, #104]	; (8006ecc <extInt_Config+0x708>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d106      	bne.n	8006e76 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8006e68:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e6e:	f043 0304 	orr.w	r3, r3, #4
 8006e72:	6113      	str	r3, [r2, #16]
					break;
 8006e74:	e288      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <extInt_Config+0x70c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d106      	bne.n	8006e90 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8006e82:	4b0d      	ldr	r3, [pc, #52]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	4a0c      	ldr	r2, [pc, #48]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e88:	f043 0307 	orr.w	r3, r3, #7
 8006e8c:	6113      	str	r3, [r2, #16]
					break;
 8006e8e:	e27b      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006e90:	bf00      	nop
					break;
 8006e92:	e279      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <extInt_Config+0x6f4>)
 8006e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a05      	ldr	r2, [pc, #20]	; (8006ebc <extInt_Config+0x6f8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d113      	bne.n	8006ed4 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8006eac:	4b02      	ldr	r3, [pc, #8]	; (8006eb8 <extInt_Config+0x6f4>)
 8006eae:	4a02      	ldr	r2, [pc, #8]	; (8006eb8 <extInt_Config+0x6f4>)
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006eb4:	e268      	b.n	8007388 <extInt_Config+0xbc4>
 8006eb6:	bf00      	nop
 8006eb8:	40013800 	.word	0x40013800
 8006ebc:	40020000 	.word	0x40020000
 8006ec0:	40020400 	.word	0x40020400
 8006ec4:	40020800 	.word	0x40020800
 8006ec8:	40020c00 	.word	0x40020c00
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a83      	ldr	r2, [pc, #524]	; (80070e8 <extInt_Config+0x924>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d106      	bne.n	8006eee <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8006ee0:	4b82      	ldr	r3, [pc, #520]	; (80070ec <extInt_Config+0x928>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	4a81      	ldr	r2, [pc, #516]	; (80070ec <extInt_Config+0x928>)
 8006ee6:	f043 0310 	orr.w	r3, r3, #16
 8006eea:	6113      	str	r3, [r2, #16]
					break;
 8006eec:	e24c      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a7e      	ldr	r2, [pc, #504]	; (80070f0 <extInt_Config+0x92c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d106      	bne.n	8006f08 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8006efa:	4b7c      	ldr	r3, [pc, #496]	; (80070ec <extInt_Config+0x928>)
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	4a7b      	ldr	r2, [pc, #492]	; (80070ec <extInt_Config+0x928>)
 8006f00:	f043 0320 	orr.w	r3, r3, #32
 8006f04:	6113      	str	r3, [r2, #16]
					break;
 8006f06:	e23f      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a79      	ldr	r2, [pc, #484]	; (80070f4 <extInt_Config+0x930>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d106      	bne.n	8006f22 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8006f14:	4b75      	ldr	r3, [pc, #468]	; (80070ec <extInt_Config+0x928>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	4a74      	ldr	r2, [pc, #464]	; (80070ec <extInt_Config+0x928>)
 8006f1a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006f1e:	6113      	str	r3, [r2, #16]
					break;
 8006f20:	e232      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a73      	ldr	r2, [pc, #460]	; (80070f8 <extInt_Config+0x934>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d106      	bne.n	8006f3c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8006f2e:	4b6f      	ldr	r3, [pc, #444]	; (80070ec <extInt_Config+0x928>)
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	4a6e      	ldr	r2, [pc, #440]	; (80070ec <extInt_Config+0x928>)
 8006f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f38:	6113      	str	r3, [r2, #16]
					break;
 8006f3a:	e225      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a6e      	ldr	r2, [pc, #440]	; (80070fc <extInt_Config+0x938>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d106      	bne.n	8006f56 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8006f48:	4b68      	ldr	r3, [pc, #416]	; (80070ec <extInt_Config+0x928>)
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	4a67      	ldr	r2, [pc, #412]	; (80070ec <extInt_Config+0x928>)
 8006f4e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006f52:	6113      	str	r3, [r2, #16]
					break;
 8006f54:	e218      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006f56:	bf00      	nop
					break;
 8006f58:	e216      	b.n	8007388 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8006f5a:	4b64      	ldr	r3, [pc, #400]	; (80070ec <extInt_Config+0x928>)
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	4a63      	ldr	r2, [pc, #396]	; (80070ec <extInt_Config+0x928>)
 8006f60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f64:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a64      	ldr	r2, [pc, #400]	; (8007100 <extInt_Config+0x93c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d104      	bne.n	8006f7c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8006f72:	4b5e      	ldr	r3, [pc, #376]	; (80070ec <extInt_Config+0x928>)
 8006f74:	4a5d      	ldr	r2, [pc, #372]	; (80070ec <extInt_Config+0x928>)
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8006f7a:	e205      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a59      	ldr	r2, [pc, #356]	; (80070e8 <extInt_Config+0x924>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d106      	bne.n	8006f96 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8006f88:	4b58      	ldr	r3, [pc, #352]	; (80070ec <extInt_Config+0x928>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	4a57      	ldr	r2, [pc, #348]	; (80070ec <extInt_Config+0x928>)
 8006f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f92:	6113      	str	r3, [r2, #16]
					break;
 8006f94:	e1f8      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a54      	ldr	r2, [pc, #336]	; (80070f0 <extInt_Config+0x92c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d106      	bne.n	8006fb0 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8006fa2:	4b52      	ldr	r3, [pc, #328]	; (80070ec <extInt_Config+0x928>)
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	4a51      	ldr	r2, [pc, #324]	; (80070ec <extInt_Config+0x928>)
 8006fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fac:	6113      	str	r3, [r2, #16]
					break;
 8006fae:	e1eb      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a4f      	ldr	r2, [pc, #316]	; (80070f4 <extInt_Config+0x930>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d106      	bne.n	8006fca <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8006fbc:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <extInt_Config+0x928>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	4a4a      	ldr	r2, [pc, #296]	; (80070ec <extInt_Config+0x928>)
 8006fc2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006fc6:	6113      	str	r3, [r2, #16]
					break;
 8006fc8:	e1de      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a49      	ldr	r2, [pc, #292]	; (80070f8 <extInt_Config+0x934>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d106      	bne.n	8006fe4 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8006fd6:	4b45      	ldr	r3, [pc, #276]	; (80070ec <extInt_Config+0x928>)
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	4a44      	ldr	r2, [pc, #272]	; (80070ec <extInt_Config+0x928>)
 8006fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fe0:	6113      	str	r3, [r2, #16]
					break;
 8006fe2:	e1d1      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a44      	ldr	r2, [pc, #272]	; (80070fc <extInt_Config+0x938>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d106      	bne.n	8006ffe <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8006ff0:	4b3e      	ldr	r3, [pc, #248]	; (80070ec <extInt_Config+0x928>)
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	4a3d      	ldr	r2, [pc, #244]	; (80070ec <extInt_Config+0x928>)
 8006ff6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ffa:	6113      	str	r3, [r2, #16]
					break;
 8006ffc:	e1c4      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 8006ffe:	bf00      	nop
					break;
 8007000:	e1c2      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8007002:	4b3a      	ldr	r3, [pc, #232]	; (80070ec <extInt_Config+0x928>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	4a39      	ldr	r2, [pc, #228]	; (80070ec <extInt_Config+0x928>)
 8007008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800700c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a3a      	ldr	r2, [pc, #232]	; (8007100 <extInt_Config+0x93c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d104      	bne.n	8007024 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800701a:	4b34      	ldr	r3, [pc, #208]	; (80070ec <extInt_Config+0x928>)
 800701c:	4a33      	ldr	r2, [pc, #204]	; (80070ec <extInt_Config+0x928>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8007022:	e1b1      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2f      	ldr	r2, [pc, #188]	; (80070e8 <extInt_Config+0x924>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d106      	bne.n	800703e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8007030:	4b2e      	ldr	r3, [pc, #184]	; (80070ec <extInt_Config+0x928>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	4a2d      	ldr	r2, [pc, #180]	; (80070ec <extInt_Config+0x928>)
 8007036:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800703a:	6113      	str	r3, [r2, #16]
					break;
 800703c:	e1a4      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <extInt_Config+0x92c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d106      	bne.n	8007058 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800704a:	4b28      	ldr	r3, [pc, #160]	; (80070ec <extInt_Config+0x928>)
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	4a27      	ldr	r2, [pc, #156]	; (80070ec <extInt_Config+0x928>)
 8007050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007054:	6113      	str	r3, [r2, #16]
					break;
 8007056:	e197      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a25      	ldr	r2, [pc, #148]	; (80070f4 <extInt_Config+0x930>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d106      	bne.n	8007072 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8007064:	4b21      	ldr	r3, [pc, #132]	; (80070ec <extInt_Config+0x928>)
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4a20      	ldr	r2, [pc, #128]	; (80070ec <extInt_Config+0x928>)
 800706a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800706e:	6113      	str	r3, [r2, #16]
					break;
 8007070:	e18a      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <extInt_Config+0x934>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d106      	bne.n	800708c <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800707e:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <extInt_Config+0x928>)
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	4a1a      	ldr	r2, [pc, #104]	; (80070ec <extInt_Config+0x928>)
 8007084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007088:	6113      	str	r3, [r2, #16]
					break;
 800708a:	e17d      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <extInt_Config+0x938>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d106      	bne.n	80070a6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8007098:	4b14      	ldr	r3, [pc, #80]	; (80070ec <extInt_Config+0x928>)
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	4a13      	ldr	r2, [pc, #76]	; (80070ec <extInt_Config+0x928>)
 800709e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80070a2:	6113      	str	r3, [r2, #16]
					break;
 80070a4:	e170      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 80070a6:	bf00      	nop
					break;
 80070a8:	e16e      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <extInt_Config+0x928>)
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	4a0f      	ldr	r2, [pc, #60]	; (80070ec <extInt_Config+0x928>)
 80070b0:	f023 030f 	bic.w	r3, r3, #15
 80070b4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a10      	ldr	r2, [pc, #64]	; (8007100 <extInt_Config+0x93c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d104      	bne.n	80070cc <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <extInt_Config+0x928>)
 80070c4:	4a09      	ldr	r2, [pc, #36]	; (80070ec <extInt_Config+0x928>)
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 80070ca:	e15d      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a05      	ldr	r2, [pc, #20]	; (80070e8 <extInt_Config+0x924>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d115      	bne.n	8007104 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <extInt_Config+0x928>)
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	4a03      	ldr	r2, [pc, #12]	; (80070ec <extInt_Config+0x928>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6153      	str	r3, [r2, #20]
					break;
 80070e4:	e150      	b.n	8007388 <extInt_Config+0xbc4>
 80070e6:	bf00      	nop
 80070e8:	40020400 	.word	0x40020400
 80070ec:	40013800 	.word	0x40013800
 80070f0:	40020800 	.word	0x40020800
 80070f4:	40020c00 	.word	0x40020c00
 80070f8:	40021000 	.word	0x40021000
 80070fc:	40021c00 	.word	0x40021c00
 8007100:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a89      	ldr	r2, [pc, #548]	; (8007330 <extInt_Config+0xb6c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d106      	bne.n	800711e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8007110:	4b88      	ldr	r3, [pc, #544]	; (8007334 <extInt_Config+0xb70>)
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	4a87      	ldr	r2, [pc, #540]	; (8007334 <extInt_Config+0xb70>)
 8007116:	f043 0302 	orr.w	r3, r3, #2
 800711a:	6153      	str	r3, [r2, #20]
					break;
 800711c:	e134      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a84      	ldr	r2, [pc, #528]	; (8007338 <extInt_Config+0xb74>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d106      	bne.n	8007138 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800712a:	4b82      	ldr	r3, [pc, #520]	; (8007334 <extInt_Config+0xb70>)
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	4a81      	ldr	r2, [pc, #516]	; (8007334 <extInt_Config+0xb70>)
 8007130:	f043 0303 	orr.w	r3, r3, #3
 8007134:	6153      	str	r3, [r2, #20]
					break;
 8007136:	e127      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7f      	ldr	r2, [pc, #508]	; (800733c <extInt_Config+0xb78>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d106      	bne.n	8007152 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8007144:	4b7b      	ldr	r3, [pc, #492]	; (8007334 <extInt_Config+0xb70>)
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	4a7a      	ldr	r2, [pc, #488]	; (8007334 <extInt_Config+0xb70>)
 800714a:	f043 0304 	orr.w	r3, r3, #4
 800714e:	6153      	str	r3, [r2, #20]
					break;
 8007150:	e11a      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a79      	ldr	r2, [pc, #484]	; (8007340 <extInt_Config+0xb7c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d106      	bne.n	800716c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800715e:	4b75      	ldr	r3, [pc, #468]	; (8007334 <extInt_Config+0xb70>)
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4a74      	ldr	r2, [pc, #464]	; (8007334 <extInt_Config+0xb70>)
 8007164:	f043 0307 	orr.w	r3, r3, #7
 8007168:	6153      	str	r3, [r2, #20]
					break;
 800716a:	e10d      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 800716c:	bf00      	nop
					break;
 800716e:	e10b      	b.n	8007388 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8007170:	4b70      	ldr	r3, [pc, #448]	; (8007334 <extInt_Config+0xb70>)
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	4a6f      	ldr	r2, [pc, #444]	; (8007334 <extInt_Config+0xb70>)
 8007176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800717a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a70      	ldr	r2, [pc, #448]	; (8007344 <extInt_Config+0xb80>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d104      	bne.n	8007192 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8007188:	4b6a      	ldr	r3, [pc, #424]	; (8007334 <extInt_Config+0xb70>)
 800718a:	4a6a      	ldr	r2, [pc, #424]	; (8007334 <extInt_Config+0xb70>)
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	6153      	str	r3, [r2, #20]
 8007190:	e041      	b.n	8007216 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a6b      	ldr	r2, [pc, #428]	; (8007348 <extInt_Config+0xb84>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d106      	bne.n	80071ac <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800719e:	4b65      	ldr	r3, [pc, #404]	; (8007334 <extInt_Config+0xb70>)
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4a64      	ldr	r2, [pc, #400]	; (8007334 <extInt_Config+0xb70>)
 80071a4:	f043 0310 	orr.w	r3, r3, #16
 80071a8:	6153      	str	r3, [r2, #20]
 80071aa:	e034      	b.n	8007216 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a5f      	ldr	r2, [pc, #380]	; (8007330 <extInt_Config+0xb6c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d106      	bne.n	80071c6 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 80071b8:	4b5e      	ldr	r3, [pc, #376]	; (8007334 <extInt_Config+0xb70>)
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	4a5d      	ldr	r2, [pc, #372]	; (8007334 <extInt_Config+0xb70>)
 80071be:	f043 0320 	orr.w	r3, r3, #32
 80071c2:	6153      	str	r3, [r2, #20]
 80071c4:	e027      	b.n	8007216 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5a      	ldr	r2, [pc, #360]	; (8007338 <extInt_Config+0xb74>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d106      	bne.n	80071e0 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 80071d2:	4b58      	ldr	r3, [pc, #352]	; (8007334 <extInt_Config+0xb70>)
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4a57      	ldr	r2, [pc, #348]	; (8007334 <extInt_Config+0xb70>)
 80071d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80071dc:	6153      	str	r3, [r2, #20]
 80071de:	e01a      	b.n	8007216 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a55      	ldr	r2, [pc, #340]	; (800733c <extInt_Config+0xb78>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d106      	bne.n	80071fa <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 80071ec:	4b51      	ldr	r3, [pc, #324]	; (8007334 <extInt_Config+0xb70>)
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	4a50      	ldr	r2, [pc, #320]	; (8007334 <extInt_Config+0xb70>)
 80071f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f6:	6153      	str	r3, [r2, #20]
 80071f8:	e00d      	b.n	8007216 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a4f      	ldr	r2, [pc, #316]	; (8007340 <extInt_Config+0xb7c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d106      	bne.n	8007214 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8007206:	4b4b      	ldr	r3, [pc, #300]	; (8007334 <extInt_Config+0xb70>)
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	4a4a      	ldr	r2, [pc, #296]	; (8007334 <extInt_Config+0xb70>)
 800720c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007210:	6153      	str	r3, [r2, #20]
 8007212:	e000      	b.n	8007216 <extInt_Config+0xa52>

					} else {
						__NOP();
 8007214:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8007216:	4b47      	ldr	r3, [pc, #284]	; (8007334 <extInt_Config+0xb70>)
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	4a46      	ldr	r2, [pc, #280]	; (8007334 <extInt_Config+0xb70>)
 800721c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007220:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a46      	ldr	r2, [pc, #280]	; (8007344 <extInt_Config+0xb80>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d104      	bne.n	8007238 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800722e:	4b41      	ldr	r3, [pc, #260]	; (8007334 <extInt_Config+0xb70>)
 8007230:	4a40      	ldr	r2, [pc, #256]	; (8007334 <extInt_Config+0xb70>)
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8007236:	e0a7      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a42      	ldr	r2, [pc, #264]	; (8007348 <extInt_Config+0xb84>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d106      	bne.n	8007252 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8007244:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <extInt_Config+0xb70>)
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	4a3a      	ldr	r2, [pc, #232]	; (8007334 <extInt_Config+0xb70>)
 800724a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724e:	6153      	str	r3, [r2, #20]
					break;
 8007250:	e09a      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a35      	ldr	r2, [pc, #212]	; (8007330 <extInt_Config+0xb6c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d106      	bne.n	800726c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800725e:	4b35      	ldr	r3, [pc, #212]	; (8007334 <extInt_Config+0xb70>)
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	4a34      	ldr	r2, [pc, #208]	; (8007334 <extInt_Config+0xb70>)
 8007264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007268:	6153      	str	r3, [r2, #20]
					break;
 800726a:	e08d      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a31      	ldr	r2, [pc, #196]	; (8007338 <extInt_Config+0xb74>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d106      	bne.n	8007286 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8007278:	4b2e      	ldr	r3, [pc, #184]	; (8007334 <extInt_Config+0xb70>)
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	4a2d      	ldr	r2, [pc, #180]	; (8007334 <extInt_Config+0xb70>)
 800727e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007282:	6153      	str	r3, [r2, #20]
					break;
 8007284:	e080      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2b      	ldr	r2, [pc, #172]	; (800733c <extInt_Config+0xb78>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d106      	bne.n	80072a0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8007292:	4b28      	ldr	r3, [pc, #160]	; (8007334 <extInt_Config+0xb70>)
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	4a27      	ldr	r2, [pc, #156]	; (8007334 <extInt_Config+0xb70>)
 8007298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800729c:	6153      	str	r3, [r2, #20]
					break;
 800729e:	e073      	b.n	8007388 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <extInt_Config+0xb7c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d106      	bne.n	80072ba <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80072ac:	4b21      	ldr	r3, [pc, #132]	; (8007334 <extInt_Config+0xb70>)
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	4a20      	ldr	r2, [pc, #128]	; (8007334 <extInt_Config+0xb70>)
 80072b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072b6:	6153      	str	r3, [r2, #20]
					break;
 80072b8:	e066      	b.n	8007388 <extInt_Config+0xbc4>
						__NOP();
 80072ba:	bf00      	nop
					break;
 80072bc:	e064      	b.n	8007388 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 80072be:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <extInt_Config+0xb70>)
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <extInt_Config+0xb70>)
 80072c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072c8:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <extInt_Config+0xb80>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d104      	bne.n	80072e0 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80072d6:	4b17      	ldr	r3, [pc, #92]	; (8007334 <extInt_Config+0xb70>)
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <extInt_Config+0xb70>)
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 80072de:	e053      	b.n	8007388 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a18      	ldr	r2, [pc, #96]	; (8007348 <extInt_Config+0xb84>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d106      	bne.n	80072fa <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 80072ec:	4b11      	ldr	r3, [pc, #68]	; (8007334 <extInt_Config+0xb70>)
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	4a10      	ldr	r2, [pc, #64]	; (8007334 <extInt_Config+0xb70>)
 80072f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072f6:	6153      	str	r3, [r2, #20]
						break;
 80072f8:	e046      	b.n	8007388 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a0b      	ldr	r2, [pc, #44]	; (8007330 <extInt_Config+0xb6c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d106      	bne.n	8007314 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <extInt_Config+0xb70>)
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	4a0a      	ldr	r2, [pc, #40]	; (8007334 <extInt_Config+0xb70>)
 800730c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007310:	6153      	str	r3, [r2, #20]
						break;
 8007312:	e039      	b.n	8007388 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a07      	ldr	r2, [pc, #28]	; (8007338 <extInt_Config+0xb74>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d115      	bne.n	800734c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8007320:	4b04      	ldr	r3, [pc, #16]	; (8007334 <extInt_Config+0xb70>)
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	4a03      	ldr	r2, [pc, #12]	; (8007334 <extInt_Config+0xb70>)
 8007326:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800732a:	6153      	str	r3, [r2, #20]
						break;
 800732c:	e02c      	b.n	8007388 <extInt_Config+0xbc4>
 800732e:	bf00      	nop
 8007330:	40020800 	.word	0x40020800
 8007334:	40013800 	.word	0x40013800
 8007338:	40020c00 	.word	0x40020c00
 800733c:	40021000 	.word	0x40021000
 8007340:	40021c00 	.word	0x40021c00
 8007344:	40020000 	.word	0x40020000
 8007348:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a6c      	ldr	r2, [pc, #432]	; (8007504 <extInt_Config+0xd40>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d106      	bne.n	8007366 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8007358:	4b6b      	ldr	r3, [pc, #428]	; (8007508 <extInt_Config+0xd44>)
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	4a6a      	ldr	r2, [pc, #424]	; (8007508 <extInt_Config+0xd44>)
 800735e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007362:	6153      	str	r3, [r2, #20]
						break;
 8007364:	e010      	b.n	8007388 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a67      	ldr	r2, [pc, #412]	; (800750c <extInt_Config+0xd48>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d106      	bne.n	8007380 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8007372:	4b65      	ldr	r3, [pc, #404]	; (8007508 <extInt_Config+0xd44>)
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	4a64      	ldr	r2, [pc, #400]	; (8007508 <extInt_Config+0xd44>)
 8007378:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800737c:	6153      	str	r3, [r2, #20]
						break;
 800737e:	e003      	b.n	8007388 <extInt_Config+0xbc4>
							__NOP();
 8007380:	bf00      	nop
						break;
 8007382:	e001      	b.n	8007388 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8007384:	bf00      	nop
						break;
 8007386:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	791b      	ldrb	r3, [r3, #4]
 800738c:	2b02      	cmp	r3, #2
 800738e:	d020      	beq.n	80073d2 <extInt_Config+0xc0e>
 8007390:	2b02      	cmp	r3, #2
 8007392:	dc37      	bgt.n	8007404 <extInt_Config+0xc40>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <extInt_Config+0xbda>
 8007398:	2b01      	cmp	r3, #1
 800739a:	d00d      	beq.n	80073b8 <extInt_Config+0xbf4>
 800739c:	e032      	b.n	8007404 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800739e:	4b5c      	ldr	r3, [pc, #368]	; (8007510 <extInt_Config+0xd4c>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	7912      	ldrb	r2, [r2, #4]
 80073a8:	4611      	mov	r1, r2
 80073aa:	2201      	movs	r2, #1
 80073ac:	408a      	lsls	r2, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	4a57      	ldr	r2, [pc, #348]	; (8007510 <extInt_Config+0xd4c>)
 80073b2:	430b      	orrs	r3, r1
 80073b4:	60d3      	str	r3, [r2, #12]

		break;
 80073b6:	e027      	b.n	8007408 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80073b8:	4b55      	ldr	r3, [pc, #340]	; (8007510 <extInt_Config+0xd4c>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	7912      	ldrb	r2, [r2, #4]
 80073c2:	4611      	mov	r1, r2
 80073c4:	2201      	movs	r2, #1
 80073c6:	408a      	lsls	r2, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	4a51      	ldr	r2, [pc, #324]	; (8007510 <extInt_Config+0xd4c>)
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6093      	str	r3, [r2, #8]

		break;
 80073d0:	e01a      	b.n	8007408 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80073d2:	4b4f      	ldr	r3, [pc, #316]	; (8007510 <extInt_Config+0xd4c>)
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	7912      	ldrb	r2, [r2, #4]
 80073dc:	4611      	mov	r1, r2
 80073de:	2201      	movs	r2, #1
 80073e0:	408a      	lsls	r2, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	4a4a      	ldr	r2, [pc, #296]	; (8007510 <extInt_Config+0xd4c>)
 80073e6:	430b      	orrs	r3, r1
 80073e8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80073ea:	4b49      	ldr	r3, [pc, #292]	; (8007510 <extInt_Config+0xd4c>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6812      	ldr	r2, [r2, #0]
 80073f2:	7912      	ldrb	r2, [r2, #4]
 80073f4:	4611      	mov	r1, r2
 80073f6:	2201      	movs	r2, #1
 80073f8:	408a      	lsls	r2, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4a44      	ldr	r2, [pc, #272]	; (8007510 <extInt_Config+0xd4c>)
 80073fe:	430b      	orrs	r3, r1
 8007400:	6093      	str	r3, [r2, #8]

		break;
 8007402:	e001      	b.n	8007408 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8007404:	bf00      	nop
		break;
 8007406:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007408:	b672      	cpsid	i
}
 800740a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <extInt_Config+0xd4c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	7912      	ldrb	r2, [r2, #4]
 8007416:	4611      	mov	r1, r2
 8007418:	2201      	movs	r2, #1
 800741a:	408a      	lsls	r2, r1
 800741c:	4611      	mov	r1, r2
 800741e:	4a3c      	ldr	r2, [pc, #240]	; (8007510 <extInt_Config+0xd4c>)
 8007420:	430b      	orrs	r3, r1
 8007422:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d862      	bhi.n	80074f4 <extInt_Config+0xd30>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <extInt_Config+0xc70>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007475 	.word	0x08007475
 8007438:	0800747d 	.word	0x0800747d
 800743c:	08007485 	.word	0x08007485
 8007440:	0800748d 	.word	0x0800748d
 8007444:	08007495 	.word	0x08007495
 8007448:	0800749d 	.word	0x0800749d
 800744c:	080074a5 	.word	0x080074a5
 8007450:	080074ad 	.word	0x080074ad
 8007454:	080074b5 	.word	0x080074b5
 8007458:	080074bd 	.word	0x080074bd
 800745c:	080074c5 	.word	0x080074c5
 8007460:	080074cd 	.word	0x080074cd
 8007464:	080074d5 	.word	0x080074d5
 8007468:	080074dd 	.word	0x080074dd
 800746c:	080074e5 	.word	0x080074e5
 8007470:	080074ed 	.word	0x080074ed
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8007474:	2006      	movs	r0, #6
 8007476:	f7ff f95d 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 800747a:	e03d      	b.n	80074f8 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800747c:	2007      	movs	r0, #7
 800747e:	f7ff f959 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 8007482:	e039      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8007484:	2008      	movs	r0, #8
 8007486:	f7ff f955 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 800748a:	e035      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800748c:	2009      	movs	r0, #9
 800748e:	f7ff f951 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 8007492:	e031      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8007494:	200a      	movs	r0, #10
 8007496:	f7ff f94d 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 800749a:	e02d      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800749c:	2017      	movs	r0, #23
 800749e:	f7ff f949 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074a2:	e029      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80074a4:	2017      	movs	r0, #23
 80074a6:	f7ff f945 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074aa:	e025      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80074ac:	2017      	movs	r0, #23
 80074ae:	f7ff f941 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074b2:	e021      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80074b4:	2017      	movs	r0, #23
 80074b6:	f7ff f93d 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074ba:	e01d      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80074bc:	2017      	movs	r0, #23
 80074be:	f7ff f939 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074c2:	e019      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074c4:	2028      	movs	r0, #40	; 0x28
 80074c6:	f7ff f935 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074ca:	e015      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074cc:	2028      	movs	r0, #40	; 0x28
 80074ce:	f7ff f931 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074d2:	e011      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074d4:	2028      	movs	r0, #40	; 0x28
 80074d6:	f7ff f92d 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074da:	e00d      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074dc:	2028      	movs	r0, #40	; 0x28
 80074de:	f7ff f929 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074e2:	e009      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074e4:	2028      	movs	r0, #40	; 0x28
 80074e6:	f7ff f925 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074ea:	e005      	b.n	80074f8 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074ec:	2028      	movs	r0, #40	; 0x28
 80074ee:	f7ff f921 	bl	8006734 <__NVIC_EnableIRQ>
			break;
 80074f2:	e001      	b.n	80074f8 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 80074f4:	bf00      	nop
			break;
 80074f6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80074f8:	b662      	cpsie	i
}
 80074fa:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40021000 	.word	0x40021000
 8007508:	40013800 	.word	0x40013800
 800750c:	40021c00 	.word	0x40021c00
 8007510:	40013c00 	.word	0x40013c00

08007514 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8007520:	b672      	cpsid	i
}
 8007522:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	2b0f      	cmp	r3, #15
 800752c:	f200 8084 	bhi.w	8007638 <exti_Set_Priority+0x124>
 8007530:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <exti_Set_Priority+0x24>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	08007579 	.word	0x08007579
 800753c:	08007585 	.word	0x08007585
 8007540:	08007591 	.word	0x08007591
 8007544:	0800759d 	.word	0x0800759d
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075b5 	.word	0x080075b5
 8007550:	080075c1 	.word	0x080075c1
 8007554:	080075cd 	.word	0x080075cd
 8007558:	080075d9 	.word	0x080075d9
 800755c:	080075e5 	.word	0x080075e5
 8007560:	080075f1 	.word	0x080075f1
 8007564:	080075fd 	.word	0x080075fd
 8007568:	08007609 	.word	0x08007609
 800756c:	08007615 	.word	0x08007615
 8007570:	08007621 	.word	0x08007621
 8007574:	0800762d 	.word	0x0800762d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	4619      	mov	r1, r3
 800757c:	2006      	movs	r0, #6
 800757e:	f7ff f8f7 	bl	8006770 <__NVIC_SetPriority>
				break;
 8007582:	e05b      	b.n	800763c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	4619      	mov	r1, r3
 8007588:	2007      	movs	r0, #7
 800758a:	f7ff f8f1 	bl	8006770 <__NVIC_SetPriority>
				break;
 800758e:	e055      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	4619      	mov	r1, r3
 8007594:	2008      	movs	r0, #8
 8007596:	f7ff f8eb 	bl	8006770 <__NVIC_SetPriority>
				break;
 800759a:	e04f      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	4619      	mov	r1, r3
 80075a0:	2009      	movs	r0, #9
 80075a2:	f7ff f8e5 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075a6:	e049      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	4619      	mov	r1, r3
 80075ac:	200a      	movs	r0, #10
 80075ae:	f7ff f8df 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075b2:	e043      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	4619      	mov	r1, r3
 80075b8:	2017      	movs	r0, #23
 80075ba:	f7ff f8d9 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075be:	e03d      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	4619      	mov	r1, r3
 80075c4:	2017      	movs	r0, #23
 80075c6:	f7ff f8d3 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075ca:	e037      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	4619      	mov	r1, r3
 80075d0:	2017      	movs	r0, #23
 80075d2:	f7ff f8cd 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075d6:	e031      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	4619      	mov	r1, r3
 80075dc:	2017      	movs	r0, #23
 80075de:	f7ff f8c7 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075e2:	e02b      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 80075e4:	78fb      	ldrb	r3, [r7, #3]
 80075e6:	4619      	mov	r1, r3
 80075e8:	2017      	movs	r0, #23
 80075ea:	f7ff f8c1 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075ee:	e025      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	4619      	mov	r1, r3
 80075f4:	2028      	movs	r0, #40	; 0x28
 80075f6:	f7ff f8bb 	bl	8006770 <__NVIC_SetPriority>
				break;
 80075fa:	e01f      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	4619      	mov	r1, r3
 8007600:	2028      	movs	r0, #40	; 0x28
 8007602:	f7ff f8b5 	bl	8006770 <__NVIC_SetPriority>
				break;
 8007606:	e019      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	4619      	mov	r1, r3
 800760c:	2028      	movs	r0, #40	; 0x28
 800760e:	f7ff f8af 	bl	8006770 <__NVIC_SetPriority>
				break;
 8007612:	e013      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	4619      	mov	r1, r3
 8007618:	2028      	movs	r0, #40	; 0x28
 800761a:	f7ff f8a9 	bl	8006770 <__NVIC_SetPriority>
				break;
 800761e:	e00d      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	4619      	mov	r1, r3
 8007624:	2028      	movs	r0, #40	; 0x28
 8007626:	f7ff f8a3 	bl	8006770 <__NVIC_SetPriority>
				break;
 800762a:	e007      	b.n	800763c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800762c:	78fb      	ldrb	r3, [r7, #3]
 800762e:	4619      	mov	r1, r3
 8007630:	2028      	movs	r0, #40	; 0x28
 8007632:	f7ff f89d 	bl	8006770 <__NVIC_SetPriority>
				break;
 8007636:	e001      	b.n	800763c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 8007638:	bf00      	nop
				break;
 800763a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800763c:	b662      	cpsie	i
}
 800763e:	bf00      	nop

		}

	__enable_irq();

}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
	__NOP();
 800764c:	bf00      	nop
}
 800764e:	bf00      	nop
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
	__NOP();
 800765c:	bf00      	nop
}
 800765e:	bf00      	nop
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
	__NOP();
 800766c:	bf00      	nop
}
 800766e:	bf00      	nop
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
	__NOP();
 800767c:	bf00      	nop
}
 800767e:	bf00      	nop
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
	__NOP();
 800768c:	bf00      	nop
}
 800768e:	bf00      	nop
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
	__NOP();
 800769c:	bf00      	nop
}
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
	__NOP();
 80076ac:	bf00      	nop
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
	__NOP();
 80076bc:	bf00      	nop
}
 80076be:	bf00      	nop
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
	__NOP();
 80076cc:	bf00      	nop
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
	__NOP();
 80076dc:	bf00      	nop
}
 80076de:	bf00      	nop
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
	__NOP();
 80076ec:	bf00      	nop
}
 80076ee:	bf00      	nop
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
	__NOP();
 80076fc:	bf00      	nop
}
 80076fe:	bf00      	nop
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
	__NOP();
 800770c:	bf00      	nop
}
 800770e:	bf00      	nop
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
	__NOP();
 800771c:	bf00      	nop
}
 800771e:	bf00      	nop
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <EXTI0_IRQHandler+0x24>)
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007738:	4b04      	ldr	r3, [pc, #16]	; (800774c <EXTI0_IRQHandler+0x24>)
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	4a03      	ldr	r2, [pc, #12]	; (800774c <EXTI0_IRQHandler+0x24>)
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8007744:	f7ff ff80 	bl	8007648 <callback_extInt0>
	}
}
 8007748:	bf00      	nop
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40013c00 	.word	0x40013c00

08007750 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8007754:	4b07      	ldr	r3, [pc, #28]	; (8007774 <EXTI1_IRQHandler+0x24>)
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <EXTI1_IRQHandler+0x24>)
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	4a03      	ldr	r2, [pc, #12]	; (8007774 <EXTI1_IRQHandler+0x24>)
 8007766:	f043 0302 	orr.w	r3, r3, #2
 800776a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800776c:	f7fa f818 	bl	80017a0 <callback_extInt1>
	}
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40013c00 	.word	0x40013c00

08007778 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800777c:	4b07      	ldr	r3, [pc, #28]	; (800779c <EXTI2_IRQHandler+0x24>)
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <EXTI2_IRQHandler+0x24>)
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	4a03      	ldr	r2, [pc, #12]	; (800779c <EXTI2_IRQHandler+0x24>)
 800778e:	f043 0304 	orr.w	r3, r3, #4
 8007792:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8007794:	f7ff ff60 	bl	8007658 <callback_extInt2>
	}
}
 8007798:	bf00      	nop
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40013c00 	.word	0x40013c00

080077a0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <EXTI3_IRQHandler+0x24>)
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 80077b0:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <EXTI3_IRQHandler+0x24>)
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	4a03      	ldr	r2, [pc, #12]	; (80077c4 <EXTI3_IRQHandler+0x24>)
 80077b6:	f043 0308 	orr.w	r3, r3, #8
 80077ba:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 80077bc:	f7fa f800 	bl	80017c0 <callback_extInt3>
	}
}
 80077c0:	bf00      	nop
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40013c00 	.word	0x40013c00

080077c8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <EXTI4_IRQHandler+0x24>)
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <EXTI4_IRQHandler+0x24>)
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	4a03      	ldr	r2, [pc, #12]	; (80077ec <EXTI4_IRQHandler+0x24>)
 80077de:	f043 0310 	orr.w	r3, r3, #16
 80077e2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 80077e4:	f7ff ff40 	bl	8007668 <callback_extInt4>
	}
}
 80077e8:	bf00      	nop
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40013c00 	.word	0x40013c00

080077f0 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 80077f4:	4b26      	ldr	r3, [pc, #152]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8007800:	4b23      	ldr	r3, [pc, #140]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	4a22      	ldr	r2, [pc, #136]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007806:	f043 0320 	orr.w	r3, r3, #32
 800780a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800780c:	f7ff ff34 	bl	8007678 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8007810:	e03c      	b.n	800788c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8007812:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d008      	beq.n	8007830 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800781e:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007828:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800782a:	f7ff ff2d 	bl	8007688 <callback_extInt6>
}
 800782e:	e02d      	b.n	800788c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007830:	4b17      	ldr	r3, [pc, #92]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800783c:	4b14      	ldr	r3, [pc, #80]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007846:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007848:	f7ff ff26 	bl	8007698 <callback_extInt7>
}
 800784c:	e01e      	b.n	800788c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007856:	2b00      	cmp	r3, #0
 8007858:	d008      	beq.n	800786c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 8007860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007864:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8007866:	f7ff ff1f 	bl	80076a8 <callback_extInt8>
}
 800786a:	e00f      	b.n	800788c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800786c:	4b08      	ldr	r3, [pc, #32]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	4a04      	ldr	r2, [pc, #16]	; (8007890 <EXTI9_5_IRQHandler+0xa0>)
 800787e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007882:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8007884:	f7ff ff18 	bl	80076b8 <callback_extInt9>
}
 8007888:	e000      	b.n	800788c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800788a:	bf00      	nop
}
 800788c:	bf00      	nop
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40013c00 	.word	0x40013c00

08007894 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8007898:	4b2d      	ldr	r3, [pc, #180]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d008      	beq.n	80078b6 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 80078a4:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	4a29      	ldr	r2, [pc, #164]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078ae:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 80078b0:	f7ff ff0a 	bl	80076c8 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 80078b4:	e049      	b.n	800794a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 80078b6:	4b26      	ldr	r3, [pc, #152]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d008      	beq.n	80078d4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 80078c2:	4b23      	ldr	r3, [pc, #140]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4a22      	ldr	r2, [pc, #136]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078cc:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 80078ce:	f7ff ff03 	bl	80076d8 <callback_extInt11>
}
 80078d2:	e03a      	b.n	800794a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 80078d4:	4b1e      	ldr	r3, [pc, #120]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 80078e0:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	4a1a      	ldr	r2, [pc, #104]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078ea:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 80078ec:	f7ff fefc 	bl	80076e8 <callback_extInt12>
}
 80078f0:	e02b      	b.n	800794a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 80078f2:	4b17      	ldr	r3, [pc, #92]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 80078fe:	4b14      	ldr	r3, [pc, #80]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	4a13      	ldr	r2, [pc, #76]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 8007904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007908:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800790a:	f7ff fef5 	bl	80076f8 <callback_extInt13>
}
 800790e:	e01c      	b.n	800794a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	4a0b      	ldr	r2, [pc, #44]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 8007922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007926:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8007928:	f7ff feee 	bl	8007708 <callback_extInt14>
}
 800792c:	e00d      	b.n	800794a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800792e:	4b08      	ldr	r3, [pc, #32]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4a04      	ldr	r2, [pc, #16]	; (8007950 <EXTI15_10_IRQHandler+0xbc>)
 8007940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007944:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8007946:	f7ff fee7 	bl	8007718 <callback_extInt15>
}
 800794a:	bf00      	nop
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40013c00 	.word	0x40013c00

08007954 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a88      	ldr	r2, [pc, #544]	; (8007b8c <GPIO_Config+0x238>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d106      	bne.n	800797c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800796e:	4b88      	ldr	r3, [pc, #544]	; (8007b90 <GPIO_Config+0x23c>)
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	4a87      	ldr	r2, [pc, #540]	; (8007b90 <GPIO_Config+0x23c>)
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	6313      	str	r3, [r2, #48]	; 0x30
 800797a:	e03a      	b.n	80079f2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a84      	ldr	r2, [pc, #528]	; (8007b94 <GPIO_Config+0x240>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d106      	bne.n	8007994 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8007986:	4b82      	ldr	r3, [pc, #520]	; (8007b90 <GPIO_Config+0x23c>)
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	4a81      	ldr	r2, [pc, #516]	; (8007b90 <GPIO_Config+0x23c>)
 800798c:	f043 0302 	orr.w	r3, r3, #2
 8007990:	6313      	str	r3, [r2, #48]	; 0x30
 8007992:	e02e      	b.n	80079f2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a7f      	ldr	r2, [pc, #508]	; (8007b98 <GPIO_Config+0x244>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d106      	bne.n	80079ac <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800799e:	4b7c      	ldr	r3, [pc, #496]	; (8007b90 <GPIO_Config+0x23c>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	4a7b      	ldr	r2, [pc, #492]	; (8007b90 <GPIO_Config+0x23c>)
 80079a4:	f043 0304 	orr.w	r3, r3, #4
 80079a8:	6313      	str	r3, [r2, #48]	; 0x30
 80079aa:	e022      	b.n	80079f2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a7a      	ldr	r2, [pc, #488]	; (8007b9c <GPIO_Config+0x248>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d106      	bne.n	80079c4 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 80079b6:	4b76      	ldr	r3, [pc, #472]	; (8007b90 <GPIO_Config+0x23c>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	4a75      	ldr	r2, [pc, #468]	; (8007b90 <GPIO_Config+0x23c>)
 80079bc:	f043 0308 	orr.w	r3, r3, #8
 80079c0:	6313      	str	r3, [r2, #48]	; 0x30
 80079c2:	e016      	b.n	80079f2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a75      	ldr	r2, [pc, #468]	; (8007ba0 <GPIO_Config+0x24c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d106      	bne.n	80079dc <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 80079ce:	4b70      	ldr	r3, [pc, #448]	; (8007b90 <GPIO_Config+0x23c>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	4a6f      	ldr	r2, [pc, #444]	; (8007b90 <GPIO_Config+0x23c>)
 80079d4:	f043 0310 	orr.w	r3, r3, #16
 80079d8:	6313      	str	r3, [r2, #48]	; 0x30
 80079da:	e00a      	b.n	80079f2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a70      	ldr	r2, [pc, #448]	; (8007ba4 <GPIO_Config+0x250>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d105      	bne.n	80079f2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 80079e6:	4b6a      	ldr	r3, [pc, #424]	; (8007b90 <GPIO_Config+0x23c>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	4a69      	ldr	r2, [pc, #420]	; (8007b90 <GPIO_Config+0x23c>)
 80079ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f0:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	795b      	ldrb	r3, [r3, #5]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d143      	bne.n	8007a82 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	2b07      	cmp	r3, #7
 8007a00:	d81f      	bhi.n	8007a42 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	791b      	ldrb	r3, [r3, #4]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	210f      	movs	r1, #15
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	400a      	ands	r2, r1
 8007a22:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6a1a      	ldr	r2, [r3, #32]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	7a5b      	ldrb	r3, [r3, #9]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	fa01 f303 	lsl.w	r3, r1, r3
 8007a36:	4619      	mov	r1, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	621a      	str	r2, [r3, #32]
 8007a40:	e01f      	b.n	8007a82 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	791b      	ldrb	r3, [r3, #4]
 8007a46:	3b08      	subs	r3, #8
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a52:	210f      	movs	r1, #15
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	400a      	ands	r2, r1
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7a5b      	ldrb	r3, [r3, #9]
 8007a70:	4619      	mov	r1, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	795b      	ldrb	r3, [r3, #5]
 8007a86:	461a      	mov	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	791b      	ldrb	r3, [r3, #4]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	791b      	ldrb	r3, [r3, #4]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	2103      	movs	r1, #3
 8007aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	400a      	ands	r2, r1
 8007ab0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6819      	ldr	r1, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7a1b      	ldrb	r3, [r3, #8]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	791b      	ldrb	r3, [r3, #4]
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	4619      	mov	r1, r3
 8007ade:	2301      	movs	r3, #1
 8007ae0:	408b      	lsls	r3, r1
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	400a      	ands	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6859      	ldr	r1, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	799b      	ldrb	r3, [r3, #6]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	791b      	ldrb	r3, [r3, #4]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	2103      	movs	r1, #3
 8007b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b22:	43db      	mvns	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	400a      	ands	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6899      	ldr	r1, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	79db      	ldrb	r3, [r3, #7]
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	791b      	ldrb	r3, [r3, #4]
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	2103      	movs	r1, #3
 8007b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b62:	43db      	mvns	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	400a      	ands	r2, r1
 8007b6c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68d9      	ldr	r1, [r3, #12]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40020000 	.word	0x40020000
 8007b90:	40023800 	.word	0x40023800
 8007b94:	40020400 	.word	0x40020400
 8007b98:	40020800 	.word	0x40020800
 8007b9c:	40020c00 	.word	0x40020c00
 8007ba0:	40021000 	.word	0x40021000
 8007ba4:	40021c00 	.word	0x40021c00

08007ba8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10d      	bne.n	8007bd6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	791b      	ldrb	r3, [r3, #4]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	408b      	lsls	r3, r1
 8007bca:	4619      	mov	r1, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8007bd4:	e00d      	b.n	8007bf2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699a      	ldr	r2, [r3, #24]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	791b      	ldrb	r3, [r3, #4]
 8007be0:	3310      	adds	r3, #16
 8007be2:	2101      	movs	r1, #1
 8007be4:	fa01 f303 	lsl.w	r3, r1, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	619a      	str	r2, [r3, #24]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10d      	bne.n	8007c2c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	791b      	ldrb	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	408b      	lsls	r3, r1
 8007c20:	4619      	mov	r1, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8007c2a:	e00d      	b.n	8007c48 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	791b      	ldrb	r3, [r3, #4]
 8007c36:	3310      	adds	r3, #16
 8007c38:	2101      	movs	r1, #1
 8007c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3e:	4619      	mov	r1, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	619a      	str	r2, [r3, #24]
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	791b      	ldrb	r3, [r3, #4]
 8007c64:	461a      	mov	r2, r3
 8007c66:	2301      	movs	r3, #1
 8007c68:	4093      	lsls	r3, r2
 8007c6a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8007c74:	897b      	ldrh	r3, [r7, #10]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	791b      	ldrb	r3, [r3, #4]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	40d3      	lsrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff ffd8 	bl	8007c54 <GPIO_ReadPin>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf0c      	ite	eq
 8007cae:	2301      	moveq	r3, #1
 8007cb0:	2300      	movne	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff ff76 	bl	8007ba8 <GPIO_WritePin>
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff fe3b 	bl	8007954 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fe36 	bl	8007954 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f002 f917 	bl	8009f20 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8007cf2:	e004      	b.n	8007cfe <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f94f 	bl	8007f98 <WHOIAM>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f7      	beq.n	8007cf4 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8007d04:	216b      	movs	r1, #107	; 0x6b
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8f1 	bl	8007eee <readData>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	461a      	mov	r2, r3
 8007d18:	216b      	movs	r1, #107	; 0x6b
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f89c 	bl	8007e58 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8007d20:	216b      	movs	r1, #107	; 0x6b
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f8e3 	bl	8007eee <readData>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 8007d2c:	211c      	movs	r1, #28
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f8dd 	bl	8007eee <readData>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	f023 0318 	bic.w	r3, r3, #24
 8007d3e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d833      	bhi.n	8007db0 <configMPUAccel+0xec>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <configMPUAccel+0x8c>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d6f 	.word	0x08007d6f
 8007d58:	08007d85 	.word	0x08007d85
 8007d5c:	08007d9b 	.word	0x08007d9b
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	461a      	mov	r2, r3
 8007d64:	211c      	movs	r1, #28
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f876 	bl	8007e58 <writeData>


				break;
 8007d6c:	e021      	b.n	8007db2 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	f043 0308 	orr.w	r3, r3, #8
 8007d74:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007d76:	7bbb      	ldrb	r3, [r7, #14]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	211c      	movs	r1, #28
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f86b 	bl	8007e58 <writeData>


				break;
 8007d82:	e016      	b.n	8007db2 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	f043 0310 	orr.w	r3, r3, #16
 8007d8a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	211c      	movs	r1, #28
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f860 	bl	8007e58 <writeData>


				break;
 8007d98:	e00b      	b.n	8007db2 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	f043 0318 	orr.w	r3, r3, #24
 8007da0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	461a      	mov	r2, r3
 8007da6:	211c      	movs	r1, #28
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f855 	bl	8007e58 <writeData>


				break;
 8007dae:	e000      	b.n	8007db2 <configMPUAccel+0xee>
			}default:{
				break;
 8007db0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8007db2:	211c      	movs	r1, #28
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f89a 	bl	8007eee <readData>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8007dbe:	211b      	movs	r1, #27
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f894 	bl	8007eee <readData>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	f023 0318 	bic.w	r3, r3, #24
 8007dd0:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d832      	bhi.n	8007e40 <configMPUAccel+0x17c>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <configMPUAccel+0x11c>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007df1 	.word	0x08007df1
 8007de4:	08007dff 	.word	0x08007dff
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	08007e2b 	.word	0x08007e2b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	461a      	mov	r2, r3
 8007df4:	211b      	movs	r1, #27
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f82e 	bl	8007e58 <writeData>


				break;
 8007dfc:	e021      	b.n	8007e42 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	211b      	movs	r1, #27
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f823 	bl	8007e58 <writeData>


				break;
 8007e12:	e016      	b.n	8007e42 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	f043 0310 	orr.w	r3, r3, #16
 8007e1a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	211b      	movs	r1, #27
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f818 	bl	8007e58 <writeData>


				break;
 8007e28:	e00b      	b.n	8007e42 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	f043 0318 	orr.w	r3, r3, #24
 8007e30:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8007e32:	7bbb      	ldrb	r3, [r7, #14]
 8007e34:	461a      	mov	r2, r3
 8007e36:	211b      	movs	r1, #27
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f80d 	bl	8007e58 <writeData>


				break;
 8007e3e:	e000      	b.n	8007e42 <configMPUAccel+0x17e>
			}default:{
				break;
 8007e40:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8007e42:	211b      	movs	r1, #27
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f852 	bl	8007eee <readData>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]


}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop

08007e58 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
 8007e64:	4613      	mov	r3, r2
 8007e66:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695a      	ldr	r2, [r3, #20]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e7a:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f002 f9bd 	bl	800a200 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68d8      	ldr	r0, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	4619      	mov	r1, r3
 8007e94:	f002 fa1f 	bl	800a2d6 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f002 fa40 	bl	800a326 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007ea6:	e000      	b.n	8007eaa <writeData+0x52>
		__NOP();
 8007ea8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f6      	bne.n	8007ea8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	78ba      	ldrb	r2, [r7, #2]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 fa49 	bl	800a35a <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007ec8:	e000      	b.n	8007ecc <writeData+0x74>
		__NOP();
 8007eca:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f6      	bne.n	8007eca <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 f97b 	bl	800a1dc <i2c_stopTransaction>



}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f10:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f002 f972 	bl	800a200 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68d8      	ldr	r0, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	791b      	ldrb	r3, [r3, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	4619      	mov	r1, r3
 8007f2a:	f002 f9d4 	bl	800a2d6 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f002 f9f5 	bl	800a326 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007f3c:	e000      	b.n	8007f40 <readData+0x52>
		__NOP();
 8007f3e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f6      	bne.n	8007f3e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 f984 	bl	800a262 <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68d8      	ldr	r0, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	791b      	ldrb	r3, [r3, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	4619      	mov	r1, r3
 8007f68:	f002 f9b5 	bl	800a2d6 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 f99e 	bl	800a2b2 <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f002 f92e 	bl	800a1dc <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f002 fa02 	bl	800a38e <i2c_readDataByte>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8007fa8:	2175      	movs	r1, #117	; 0x75
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff ff9f 	bl	8007eee <readData>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007fba:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bf14      	ite	ne
 8007fc6:	2301      	movne	r3, #1
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8007fce:	7bbb      	ldrb	r3, [r7, #14]

}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8007ff8:	2143      	movs	r1, #67	; 0x43
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff ff77 	bl	8007eee <readData>
 8008000:	4603      	mov	r3, r0
 8008002:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8008004:	2144      	movs	r1, #68	; 0x44
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff ff71 	bl	8007eee <readData>
 800800c:	4603      	mov	r3, r0
 800800e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8008010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	b21a      	sxth	r2, r3
 8008018:	89bb      	ldrh	r3, [r7, #12]
 800801a:	4313      	orrs	r3, r2
 800801c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b03      	cmp	r3, #3
 8008024:	d846      	bhi.n	80080b4 <readGyro_X+0xdc>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <readGyro_X+0x54>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800803d 	.word	0x0800803d
 8008030:	0800805b 	.word	0x0800805b
 8008034:	08008079 	.word	0x08008079
 8008038:	08008097 	.word	0x08008097
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800803c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008040:	4618      	mov	r0, r3
 8008042:	f7f8 fa87 	bl	8000554 <__aeabi_i2d>
 8008046:	a325      	add	r3, pc, #148	; (adr r3, 80080dc <readGyro_X+0x104>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f7f8 fc16 	bl	800087c <__aeabi_ddiv>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008058:	e02d      	b.n	80080b6 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 800805a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800805e:	4618      	mov	r0, r3
 8008060:	f7f8 fa78 	bl	8000554 <__aeabi_i2d>
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	4b19      	ldr	r3, [pc, #100]	; (80080d0 <readGyro_X+0xf8>)
 800806a:	f7f8 fc07 	bl	800087c <__aeabi_ddiv>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008076:	e01e      	b.n	80080b6 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8008078:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800807c:	4618      	mov	r0, r3
 800807e:	f7f8 fa69 	bl	8000554 <__aeabi_i2d>
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <readGyro_X+0xfc>)
 8008088:	f7f8 fbf8 	bl	800087c <__aeabi_ddiv>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008094:	e00f      	b.n	80080b6 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8008096:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800809a:	4618      	mov	r0, r3
 800809c:	f7f8 fa5a 	bl	8000554 <__aeabi_i2d>
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <readGyro_X+0x100>)
 80080a6:	f7f8 fbe9 	bl	800087c <__aeabi_ddiv>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80080b2:	e000      	b.n	80080b6 <readGyro_X+0xde>
		}default:{
			break;
 80080b4:	bf00      	nop
		}

	}

	return GYROX_R;
 80080b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080ba:	f7f8 fdad 	bl	8000c18 <__aeabi_d2f>
 80080be:	4603      	mov	r3, r0
 80080c0:	ee07 3a90 	vmov	s15, r3

}
 80080c4:	eeb0 0a67 	vmov.f32	s0, s15
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40508000 	.word	0x40508000
 80080d4:	40408000 	.word	0x40408000
 80080d8:	40300000 	.word	0x40300000
 80080dc:	00000000 	.word	0x00000000
 80080e0:	40606000 	.word	0x40606000
 80080e4:	00000000 	.word	0x00000000

080080e8 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8008108:	2145      	movs	r1, #69	; 0x45
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff feef 	bl	8007eee <readData>
 8008110:	4603      	mov	r3, r0
 8008112:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8008114:	2146      	movs	r1, #70	; 0x46
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fee9 	bl	8007eee <readData>
 800811c:	4603      	mov	r3, r0
 800811e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8008120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	b21a      	sxth	r2, r3
 8008128:	89bb      	ldrh	r3, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b03      	cmp	r3, #3
 8008134:	d846      	bhi.n	80081c4 <readGyro_Y+0xdc>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <readGyro_Y+0x54>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	0800814d 	.word	0x0800814d
 8008140:	0800816b 	.word	0x0800816b
 8008144:	08008189 	.word	0x08008189
 8008148:	080081a7 	.word	0x080081a7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800814c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008150:	4618      	mov	r0, r3
 8008152:	f7f8 f9ff 	bl	8000554 <__aeabi_i2d>
 8008156:	a325      	add	r3, pc, #148	; (adr r3, 80081ec <readGyro_Y+0x104>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 fb8e 	bl	800087c <__aeabi_ddiv>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008168:	e02d      	b.n	80081c6 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 800816a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800816e:	4618      	mov	r0, r3
 8008170:	f7f8 f9f0 	bl	8000554 <__aeabi_i2d>
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <readGyro_Y+0xf8>)
 800817a:	f7f8 fb7f 	bl	800087c <__aeabi_ddiv>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008186:	e01e      	b.n	80081c6 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8008188:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800818c:	4618      	mov	r0, r3
 800818e:	f7f8 f9e1 	bl	8000554 <__aeabi_i2d>
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <readGyro_Y+0xfc>)
 8008198:	f7f8 fb70 	bl	800087c <__aeabi_ddiv>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80081a4:	e00f      	b.n	80081c6 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 80081a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7f8 f9d2 	bl	8000554 <__aeabi_i2d>
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <readGyro_Y+0x100>)
 80081b6:	f7f8 fb61 	bl	800087c <__aeabi_ddiv>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80081c2:	e000      	b.n	80081c6 <readGyro_Y+0xde>
		}default:{
			break;
 80081c4:	bf00      	nop
		}

	}

	return GYROY_R;
 80081c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081ca:	f7f8 fd25 	bl	8000c18 <__aeabi_d2f>
 80081ce:	4603      	mov	r3, r0
 80081d0:	ee07 3a90 	vmov	s15, r3

}
 80081d4:	eeb0 0a67 	vmov.f32	s0, s15
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40508000 	.word	0x40508000
 80081e4:	40408000 	.word	0x40408000
 80081e8:	40300000 	.word	0x40300000
 80081ec:	00000000 	.word	0x00000000
 80081f0:	40606000 	.word	0x40606000
 80081f4:	00000000 	.word	0x00000000

080081f8 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8008218:	2147      	movs	r1, #71	; 0x47
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fe67 	bl	8007eee <readData>
 8008220:	4603      	mov	r3, r0
 8008222:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8008224:	2148      	movs	r1, #72	; 0x48
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fe61 	bl	8007eee <readData>
 800822c:	4603      	mov	r3, r0
 800822e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8008230:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008234:	021b      	lsls	r3, r3, #8
 8008236:	b21a      	sxth	r2, r3
 8008238:	89bb      	ldrh	r3, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	2b03      	cmp	r3, #3
 8008244:	d846      	bhi.n	80082d4 <readGyro_Z+0xdc>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <readGyro_Z+0x54>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	0800825d 	.word	0x0800825d
 8008250:	0800827b 	.word	0x0800827b
 8008254:	08008299 	.word	0x08008299
 8008258:	080082b7 	.word	0x080082b7
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800825c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008260:	4618      	mov	r0, r3
 8008262:	f7f8 f977 	bl	8000554 <__aeabi_i2d>
 8008266:	a325      	add	r3, pc, #148	; (adr r3, 80082fc <readGyro_Z+0x104>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f8 fb06 	bl	800087c <__aeabi_ddiv>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008278:	e02d      	b.n	80082d6 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800827a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800827e:	4618      	mov	r0, r3
 8008280:	f7f8 f968 	bl	8000554 <__aeabi_i2d>
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	4b19      	ldr	r3, [pc, #100]	; (80082f0 <readGyro_Z+0xf8>)
 800828a:	f7f8 faf7 	bl	800087c <__aeabi_ddiv>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008296:	e01e      	b.n	80082d6 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8008298:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800829c:	4618      	mov	r0, r3
 800829e:	f7f8 f959 	bl	8000554 <__aeabi_i2d>
 80082a2:	f04f 0200 	mov.w	r2, #0
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <readGyro_Z+0xfc>)
 80082a8:	f7f8 fae8 	bl	800087c <__aeabi_ddiv>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80082b4:	e00f      	b.n	80082d6 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 80082b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7f8 f94a 	bl	8000554 <__aeabi_i2d>
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <readGyro_Z+0x100>)
 80082c6:	f7f8 fad9 	bl	800087c <__aeabi_ddiv>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80082d2:	e000      	b.n	80082d6 <readGyro_Z+0xde>
		}default:{
			break;
 80082d4:	bf00      	nop
		}

	}

	return GYROZ_R;
 80082d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80082da:	f7f8 fc9d 	bl	8000c18 <__aeabi_d2f>
 80082de:	4603      	mov	r3, r0
 80082e0:	ee07 3a90 	vmov	s15, r3

}
 80082e4:	eeb0 0a67 	vmov.f32	s0, s15
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40508000 	.word	0x40508000
 80082f4:	40408000 	.word	0x40408000
 80082f8:	40300000 	.word	0x40300000
 80082fc:	00000000 	.word	0x00000000
 8008300:	40606000 	.word	0x40606000

08008304 <distance_to_straight_line>:
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
}

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008304:	b5b0      	push	{r4, r5, r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6178      	str	r0, [r7, #20]
 800830c:	ed87 0b02 	vstr	d0, [r7, #8]
 8008310:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800831a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800831e:	f7f8 f983 	bl	8000628 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4614      	mov	r4, r2
 8008328:	461d      	mov	r5, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008334:	f7f8 f978 	bl	8000628 <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f7 ffbc 	bl	80002bc <__adddf3>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4610      	mov	r0, r2
 800834a:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008352:	f7f7 ffb3 	bl	80002bc <__adddf3>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4610      	mov	r0, r2
 800835c:	4619      	mov	r1, r3
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f8 fa8a 	bl	800087c <__aeabi_ddiv>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800836c:	4611      	mov	r1, r2
 800836e:	61b9      	str	r1, [r7, #24]
 8008370:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008374:	61fb      	str	r3, [r7, #28]

	return distance;
 8008376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800837a:	ec43 2b17 	vmov	d7, r2, r3
}
 800837e:	eeb0 0a47 	vmov.f32	s0, s14
 8008382:	eef0 0a67 	vmov.f32	s1, s15
 8008386:	3720      	adds	r7, #32
 8008388:	46bd      	mov	sp, r7
 800838a:	bdb0      	pop	{r4, r5, r7, pc}

0800838c <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a6c      	ldr	r2, [pc, #432]	; (800854c <pwm_Config+0x1c0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d106      	bne.n	80083ac <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800839e:	4b6c      	ldr	r3, [pc, #432]	; (8008550 <pwm_Config+0x1c4>)
 80083a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a2:	4a6b      	ldr	r2, [pc, #428]	; (8008550 <pwm_Config+0x1c4>)
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	6453      	str	r3, [r2, #68]	; 0x44
 80083aa:	e030      	b.n	800840e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b4:	d106      	bne.n	80083c4 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80083b6:	4b66      	ldr	r3, [pc, #408]	; (8008550 <pwm_Config+0x1c4>)
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	4a65      	ldr	r2, [pc, #404]	; (8008550 <pwm_Config+0x1c4>)
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	6413      	str	r3, [r2, #64]	; 0x40
 80083c2:	e024      	b.n	800840e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a62      	ldr	r2, [pc, #392]	; (8008554 <pwm_Config+0x1c8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d106      	bne.n	80083dc <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80083ce:	4b60      	ldr	r3, [pc, #384]	; (8008550 <pwm_Config+0x1c4>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	4a5f      	ldr	r2, [pc, #380]	; (8008550 <pwm_Config+0x1c4>)
 80083d4:	f043 0302 	orr.w	r3, r3, #2
 80083d8:	6413      	str	r3, [r2, #64]	; 0x40
 80083da:	e018      	b.n	800840e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5d      	ldr	r2, [pc, #372]	; (8008558 <pwm_Config+0x1cc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d106      	bne.n	80083f4 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80083e6:	4b5a      	ldr	r3, [pc, #360]	; (8008550 <pwm_Config+0x1c4>)
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	4a59      	ldr	r2, [pc, #356]	; (8008550 <pwm_Config+0x1c4>)
 80083ec:	f043 0304 	orr.w	r3, r3, #4
 80083f0:	6413      	str	r3, [r2, #64]	; 0x40
 80083f2:	e00c      	b.n	800840e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a58      	ldr	r2, [pc, #352]	; (800855c <pwm_Config+0x1d0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d106      	bne.n	800840c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80083fe:	4b54      	ldr	r3, [pc, #336]	; (8008550 <pwm_Config+0x1c4>)
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	4a53      	ldr	r2, [pc, #332]	; (8008550 <pwm_Config+0x1c4>)
 8008404:	f043 0308 	orr.w	r3, r3, #8
 8008408:	6413      	str	r3, [r2, #64]	; 0x40
 800840a:	e000      	b.n	800840e <pwm_Config+0x82>
	}
	else{
		__NOP();
 800840c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800841c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	7d5b      	ldrb	r3, [r3, #21]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f930 	bl	800868c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fa3f 	bl	80088b0 <setDuttyCycle>
 8008432:	e005      	b.n	8008440 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f929 	bl	800868c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb10 	bl	8008a60 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 0210 	bic.w	r2, r2, #16
 800844e:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2200      	movs	r2, #0
 8008456:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	791b      	ldrb	r3, [r3, #4]
 800845c:	2b03      	cmp	r3, #3
 800845e:	d86f      	bhi.n	8008540 <pwm_Config+0x1b4>
 8008460:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <pwm_Config+0xdc>)
 8008462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008466:	bf00      	nop
 8008468:	08008479 	.word	0x08008479
 800846c:	080084ab 	.word	0x080084ab
 8008470:	080084dd 	.word	0x080084dd
 8008474:	0800850f 	.word	0x0800850f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0203 	bic.w	r2, r2, #3
 8008486:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008496:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0208 	orr.w	r2, r2, #8
 80084a6:	619a      	str	r2, [r3, #24]


		break;
 80084a8:	e04b      	b.n	8008542 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699a      	ldr	r2, [r3, #24]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80084b8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699a      	ldr	r2, [r3, #24]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80084c8:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699a      	ldr	r2, [r3, #24]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d8:	619a      	str	r2, [r3, #24]

		break;
 80084da:	e032      	b.n	8008542 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69da      	ldr	r2, [r3, #28]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0203 	bic.w	r2, r2, #3
 80084ea:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69da      	ldr	r2, [r3, #28]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80084fa:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69da      	ldr	r2, [r3, #28]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0208 	orr.w	r2, r2, #8
 800850a:	61da      	str	r2, [r3, #28]

		break;
 800850c:	e019      	b.n	8008542 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69da      	ldr	r2, [r3, #28]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800851c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800852c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800853c:	61da      	str	r2, [r3, #28]

		break;
 800853e:	e000      	b.n	8008542 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8008540:	bf00      	nop
	}// fin del switch-case




}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	40010000 	.word	0x40010000
 8008550:	40023800 	.word	0x40023800
 8008554:	40000400 	.word	0x40000400
 8008558:	40000800 	.word	0x40000800
 800855c:	40000c00 	.word	0x40000c00

08008560 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f042 0201 	orr.w	r2, r2, #1
 8008576:	601a      	str	r2, [r3, #0]

}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a3d      	ldr	r2, [pc, #244]	; (8008688 <enableOutput+0x104>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d13a      	bne.n	800860c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085a4:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	791b      	ldrb	r3, [r3, #4]
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d862      	bhi.n	8008674 <enableOutput+0xf0>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <enableOutput+0x30>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085c5 	.word	0x080085c5
 80085b8:	080085d7 	.word	0x080085d7
 80085bc:	080085e9 	.word	0x080085e9
 80085c0:	080085fb 	.word	0x080085fb
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6a1a      	ldr	r2, [r3, #32]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	621a      	str	r2, [r3, #32]

				break;
 80085d4:	e051      	b.n	800867a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0210 	orr.w	r2, r2, #16
 80085e4:	621a      	str	r2, [r3, #32]

				break;
 80085e6:	e048      	b.n	800867a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6a1a      	ldr	r2, [r3, #32]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085f6:	621a      	str	r2, [r3, #32]

				break;
 80085f8:	e03f      	b.n	800867a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	6a1a      	ldr	r2, [r3, #32]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008608:	621a      	str	r2, [r3, #32]

				break;
 800860a:	e036      	b.n	800867a <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	791b      	ldrb	r3, [r3, #4]
 8008610:	2b03      	cmp	r3, #3
 8008612:	d831      	bhi.n	8008678 <enableOutput+0xf4>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <enableOutput+0x98>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	0800862d 	.word	0x0800862d
 8008620:	0800863f 	.word	0x0800863f
 8008624:	08008651 	.word	0x08008651
 8008628:	08008663 	.word	0x08008663
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a1a      	ldr	r2, [r3, #32]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	621a      	str	r2, [r3, #32]

				break;
 800863c:	e01d      	b.n	800867a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0210 	orr.w	r2, r2, #16
 800864c:	621a      	str	r2, [r3, #32]

				break;
 800864e:	e014      	b.n	800867a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6a1a      	ldr	r2, [r3, #32]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800865e:	621a      	str	r2, [r3, #32]

				break;
 8008660:	e00b      	b.n	800867a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6a1a      	ldr	r2, [r3, #32]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008670:	621a      	str	r2, [r3, #32]

				break;
 8008672:	e002      	b.n	800867a <enableOutput+0xf6>
				break;
 8008674:	bf00      	nop
 8008676:	e000      	b.n	800867a <enableOutput+0xf6>
			}

			default: {
				break;
 8008678:	bf00      	nop
			}

		}
	}
	return SET;
 800867a:	2301      	movs	r3, #1
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	40010000 	.word	0x40010000

0800868c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6892      	ldr	r2, [r2, #8]
 80086a0:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d01a      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b14      	cmp	r3, #20
 80086b2:	d017      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b1e      	cmp	r3, #30
 80086b8:	d014      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b28      	cmp	r3, #40	; 0x28
 80086be:	d011      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b32      	cmp	r3, #50	; 0x32
 80086c4:	d00e      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b3c      	cmp	r3, #60	; 0x3c
 80086ca:	d00b      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b46      	cmp	r3, #70	; 0x46
 80086d0:	d008      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b50      	cmp	r3, #80	; 0x50
 80086d6:	d005      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b5a      	cmp	r3, #90	; 0x5a
 80086dc:	d002      	beq.n	80086e4 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b64      	cmp	r3, #100	; 0x64
 80086e2:	d111      	bne.n	8008708 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	899b      	ldrh	r3, [r3, #12]
 80086e8:	461a      	mov	r2, r3
 80086ea:	0152      	lsls	r2, r2, #5
 80086ec:	1ad2      	subs	r2, r2, r3
 80086ee:	0092      	lsls	r2, r2, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	4b68      	ldr	r3, [pc, #416]	; (8008898 <setFrequency+0x20c>)
 80086f8:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80086fa:	4b67      	ldr	r3, [pc, #412]	; (8008898 <setFrequency+0x20c>)
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	1e5a      	subs	r2, r3, #1
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	62da      	str	r2, [r3, #44]	; 0x2c
 8008706:	e0c0      	b.n	800888a <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2ba0      	cmp	r3, #160	; 0xa0
 800870c:	d022      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2bc8      	cmp	r3, #200	; 0xc8
 8008712:	d01f      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800871a:	d01b      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008722:	d017      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800872a:	d013      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008732:	d00f      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800873a:	d00b      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008742:	d007      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800874a:	d003      	beq.n	8008754 <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008752:	d114      	bne.n	800877e <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	899b      	ldrh	r3, [r3, #12]
 8008758:	461a      	mov	r2, r3
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	4413      	add	r3, r2
 800875e:	461a      	mov	r2, r3
 8008760:	0091      	lsls	r1, r2, #2
 8008762:	461a      	mov	r2, r3
 8008764:	460b      	mov	r3, r1
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	b29a      	uxth	r2, r3
 800876c:	4b4a      	ldr	r3, [pc, #296]	; (8008898 <setFrequency+0x20c>)
 800876e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008770:	4b49      	ldr	r3, [pc, #292]	; (8008898 <setFrequency+0x20c>)
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	62da      	str	r2, [r3, #44]	; 0x2c
 800877c:	e085      	b.n	800888a <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008784:	d029      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800878c:	d025      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008794:	4293      	cmp	r3, r2
 8008796:	d020      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800879e:	d01c      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d017      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f241 7270 	movw	r2, #6000	; 0x1770
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d012      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00d      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80087c4:	d009      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f242 3228 	movw	r2, #9000	; 0x2328
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d10f      	bne.n	80087fa <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	899b      	ldrh	r3, [r3, #12]
 80087de:	461a      	mov	r2, r3
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	4b2b      	ldr	r3, [pc, #172]	; (8008898 <setFrequency+0x20c>)
 80087ea:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80087ec:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <setFrequency+0x20c>)
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	1e5a      	subs	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80087f8:	e047      	b.n	800888a <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008800:	d028      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008808:	4293      	cmp	r3, r2
 800880a:	d023      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f247 5230 	movw	r2, #30000	; 0x7530
 8008812:	4293      	cmp	r3, r2
 8008814:	d01e      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f649 4240 	movw	r2, #40000	; 0x9c40
 800881c:	4293      	cmp	r3, r2
 800881e:	d019      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008826:	4293      	cmp	r3, r2
 8008828:	d014      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008830:	4293      	cmp	r3, r2
 8008832:	d00f      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4a19      	ldr	r2, [pc, #100]	; (800889c <setFrequency+0x210>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00b      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <setFrequency+0x214>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d007      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4a17      	ldr	r2, [pc, #92]	; (80088a4 <setFrequency+0x218>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d003      	beq.n	8008854 <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <setFrequency+0x21c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d10a      	bne.n	800886a <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	899a      	ldrh	r2, [r3, #12]
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <setFrequency+0x20c>)
 800885a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800885c:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <setFrequency+0x20c>)
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	1e5a      	subs	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	62da      	str	r2, [r3, #44]	; 0x2c
 8008868:	e00f      	b.n	800888a <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	899b      	ldrh	r3, [r3, #12]
 800886e:	4a0f      	ldr	r2, [pc, #60]	; (80088ac <setFrequency+0x220>)
 8008870:	fba2 2303 	umull	r2, r3, r2, r3
 8008874:	091b      	lsrs	r3, r3, #4
 8008876:	b29a      	uxth	r2, r3
 8008878:	4b07      	ldr	r3, [pc, #28]	; (8008898 <setFrequency+0x20c>)
 800887a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <setFrequency+0x20c>)
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	1e5a      	subs	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	200133b4 	.word	0x200133b4
 800889c:	00011170 	.word	0x00011170
 80088a0:	00013880 	.word	0x00013880
 80088a4:	00015f90 	.word	0x00015f90
 80088a8:	000186a0 	.word	0x000186a0
 80088ac:	cccccccd 	.word	0xcccccccd

080088b0 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b08b      	sub	sp, #44	; 0x2c
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	791b      	ldrb	r3, [r3, #4]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	f200 80c3 	bhi.w	8008a48 <setDuttyCycle+0x198>
 80088c2:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <setDuttyCycle+0x18>)
 80088c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c8:	080088d9 	.word	0x080088d9
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008991 	.word	0x08008991
 80088d4:	080089ed 	.word	0x080089ed
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	ed93 7a04 	vldr	s14, [r3, #16]
 80088de:	4b5d      	ldr	r3, [pc, #372]	; (8008a54 <setDuttyCycle+0x1a4>)
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ee:	ee17 0a90 	vmov	r0, s15
 80088f2:	f7f7 fe41 	bl	8000578 <__aeabi_f2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 80088fe:	f04f 0200 	mov.w	r2, #0
 8008902:	4b55      	ldr	r3, [pc, #340]	; (8008a58 <setDuttyCycle+0x1a8>)
 8008904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008908:	f7f7 ffb8 	bl	800087c <__aeabi_ddiv>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	4b50      	ldr	r3, [pc, #320]	; (8008a5c <setDuttyCycle+0x1ac>)
 800891a:	f7f7 fccd 	bl	80002b8 <__aeabi_dsub>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4610      	mov	r0, r2
 8008924:	4619      	mov	r1, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681c      	ldr	r4, [r3, #0]
 800892a:	f7f8 f955 	bl	8000bd8 <__aeabi_d2uiz>
 800892e:	4603      	mov	r3, r0
 8008930:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008932:	e08a      	b.n	8008a4a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	ed93 7a04 	vldr	s14, [r3, #16]
 800893a:	4b46      	ldr	r3, [pc, #280]	; (8008a54 <setDuttyCycle+0x1a4>)
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894a:	ee17 0a90 	vmov	r0, s15
 800894e:	f7f7 fe13 	bl	8000578 <__aeabi_f2d>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	4b3e      	ldr	r3, [pc, #248]	; (8008a58 <setDuttyCycle+0x1a8>)
 8008960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008964:	f7f7 ff8a 	bl	800087c <__aeabi_ddiv>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4610      	mov	r0, r2
 800896e:	4619      	mov	r1, r3
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	4b39      	ldr	r3, [pc, #228]	; (8008a5c <setDuttyCycle+0x1ac>)
 8008976:	f7f7 fc9f 	bl	80002b8 <__aeabi_dsub>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4610      	mov	r0, r2
 8008980:	4619      	mov	r1, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681c      	ldr	r4, [r3, #0]
 8008986:	f7f8 f927 	bl	8000bd8 <__aeabi_d2uiz>
 800898a:	4603      	mov	r3, r0
 800898c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800898e:	e05c      	b.n	8008a4a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	ed93 7a04 	vldr	s14, [r3, #16]
 8008996:	4b2f      	ldr	r3, [pc, #188]	; (8008a54 <setDuttyCycle+0x1a4>)
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a6:	ee17 0a90 	vmov	r0, s15
 80089aa:	f7f7 fde5 	bl	8000578 <__aeabi_f2d>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	4b27      	ldr	r3, [pc, #156]	; (8008a58 <setDuttyCycle+0x1a8>)
 80089bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089c0:	f7f7 ff5c 	bl	800087c <__aeabi_ddiv>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4610      	mov	r0, r2
 80089ca:	4619      	mov	r1, r3
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <setDuttyCycle+0x1ac>)
 80089d2:	f7f7 fc71 	bl	80002b8 <__aeabi_dsub>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4610      	mov	r0, r2
 80089dc:	4619      	mov	r1, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681c      	ldr	r4, [r3, #0]
 80089e2:	f7f8 f8f9 	bl	8000bd8 <__aeabi_d2uiz>
 80089e6:	4603      	mov	r3, r0
 80089e8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80089ea:	e02e      	b.n	8008a4a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80089f2:	4b18      	ldr	r3, [pc, #96]	; (8008a54 <setDuttyCycle+0x1a4>)
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a02:	ee17 0a90 	vmov	r0, s15
 8008a06:	f7f7 fdb7 	bl	8000578 <__aeabi_f2d>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	4b10      	ldr	r3, [pc, #64]	; (8008a58 <setDuttyCycle+0x1a8>)
 8008a18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a1c:	f7f7 ff2e 	bl	800087c <__aeabi_ddiv>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4610      	mov	r0, r2
 8008a26:	4619      	mov	r1, r3
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <setDuttyCycle+0x1ac>)
 8008a2e:	f7f7 fc43 	bl	80002b8 <__aeabi_dsub>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4610      	mov	r0, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681c      	ldr	r4, [r3, #0]
 8008a3e:	f7f8 f8cb 	bl	8000bd8 <__aeabi_d2uiz>
 8008a42:	4603      	mov	r3, r0
 8008a44:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008a46:	e000      	b.n	8008a4a <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008a48:	bf00      	nop
	}

	}// fin del switch-case

}
 8008a4a:	bf00      	nop
 8008a4c:	372c      	adds	r7, #44	; 0x2c
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd90      	pop	{r4, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200133b4 	.word	0x200133b4
 8008a58:	40590000 	.word	0x40590000
 8008a5c:	3ff00000 	.word	0x3ff00000

08008a60 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b08b      	sub	sp, #44	; 0x2c
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	791b      	ldrb	r3, [r3, #4]
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	f200 80d3 	bhi.w	8008c18 <setDuttyCycleAfOpt+0x1b8>
 8008a72:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <setDuttyCycleAfOpt+0x18>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008a89 	.word	0x08008a89
 8008a7c:	08008aed 	.word	0x08008aed
 8008a80:	08008b51 	.word	0x08008b51
 8008a84:	08008bb5 	.word	0x08008bb5
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8008a8e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008c24 <setDuttyCycleAfOpt+0x1c4>
 8008a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a96:	4b64      	ldr	r3, [pc, #400]	; (8008c28 <setDuttyCycleAfOpt+0x1c8>)
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa6:	ee17 0a90 	vmov	r0, s15
 8008aaa:	f7f7 fd65 	bl	8000578 <__aeabi_f2d>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	4b5c      	ldr	r3, [pc, #368]	; (8008c2c <setDuttyCycleAfOpt+0x1cc>)
 8008abc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ac0:	f7f7 fedc 	bl	800087c <__aeabi_ddiv>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4619      	mov	r1, r3
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	4b57      	ldr	r3, [pc, #348]	; (8008c30 <setDuttyCycleAfOpt+0x1d0>)
 8008ad2:	f7f7 fbf1 	bl	80002b8 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4610      	mov	r0, r2
 8008adc:	4619      	mov	r1, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681c      	ldr	r4, [r3, #0]
 8008ae2:	f7f8 f879 	bl	8000bd8 <__aeabi_d2uiz>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008aea:	e096      	b.n	8008c1a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	edd3 7a04 	vldr	s15, [r3, #16]
 8008af2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008c24 <setDuttyCycleAfOpt+0x1c4>
 8008af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008afa:	4b4b      	ldr	r3, [pc, #300]	; (8008c28 <setDuttyCycleAfOpt+0x1c8>)
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	ee17 0a90 	vmov	r0, s15
 8008b0e:	f7f7 fd33 	bl	8000578 <__aeabi_f2d>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	4b43      	ldr	r3, [pc, #268]	; (8008c2c <setDuttyCycleAfOpt+0x1cc>)
 8008b20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b24:	f7f7 feaa 	bl	800087c <__aeabi_ddiv>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	f04f 0200 	mov.w	r2, #0
 8008b34:	4b3e      	ldr	r3, [pc, #248]	; (8008c30 <setDuttyCycleAfOpt+0x1d0>)
 8008b36:	f7f7 fbbf 	bl	80002b8 <__aeabi_dsub>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681c      	ldr	r4, [r3, #0]
 8008b46:	f7f8 f847 	bl	8000bd8 <__aeabi_d2uiz>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008b4e:	e064      	b.n	8008c1a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	edd3 7a04 	vldr	s15, [r3, #16]
 8008b56:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008c24 <setDuttyCycleAfOpt+0x1c4>
 8008b5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b5e:	4b32      	ldr	r3, [pc, #200]	; (8008c28 <setDuttyCycleAfOpt+0x1c8>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6e:	ee17 0a90 	vmov	r0, s15
 8008b72:	f7f7 fd01 	bl	8000578 <__aeabi_f2d>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	4b2a      	ldr	r3, [pc, #168]	; (8008c2c <setDuttyCycleAfOpt+0x1cc>)
 8008b84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b88:	f7f7 fe78 	bl	800087c <__aeabi_ddiv>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4610      	mov	r0, r2
 8008b92:	4619      	mov	r1, r3
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <setDuttyCycleAfOpt+0x1d0>)
 8008b9a:	f7f7 fb8d 	bl	80002b8 <__aeabi_dsub>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681c      	ldr	r4, [r3, #0]
 8008baa:	f7f8 f815 	bl	8000bd8 <__aeabi_d2uiz>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008bb2:	e032      	b.n	8008c1a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8008bba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008c24 <setDuttyCycleAfOpt+0x1c4>
 8008bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bc2:	4b19      	ldr	r3, [pc, #100]	; (8008c28 <setDuttyCycleAfOpt+0x1c8>)
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	ee17 0a90 	vmov	r0, s15
 8008bd6:	f7f7 fccf 	bl	8000578 <__aeabi_f2d>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <setDuttyCycleAfOpt+0x1cc>)
 8008be8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bec:	f7f7 fe46 	bl	800087c <__aeabi_ddiv>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <setDuttyCycleAfOpt+0x1d0>)
 8008bfe:	f7f7 fb5b 	bl	80002b8 <__aeabi_dsub>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681c      	ldr	r4, [r3, #0]
 8008c0e:	f7f7 ffe3 	bl	8000bd8 <__aeabi_d2uiz>
 8008c12:	4603      	mov	r3, r0
 8008c14:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008c16:	e000      	b.n	8008c1a <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8008c18:	bf00      	nop
	}

	}// fin del switch-case


}
 8008c1a:	bf00      	nop
 8008c1c:	372c      	adds	r7, #44	; 0x2c
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd90      	pop	{r4, r7, pc}
 8008c22:	bf00      	nop
 8008c24:	42c80000 	.word	0x42c80000
 8008c28:	200133b4 	.word	0x200133b4
 8008c2c:	40590000 	.word	0x40590000
 8008c30:	3ff00000 	.word	0x3ff00000

08008c34 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	791b      	ldrb	r3, [r3, #4]
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d82f      	bhi.n	8008ca4 <disableOutput+0x70>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <disableOutput+0x18>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008c6f 	.word	0x08008c6f
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	08008c93 	.word	0x08008c93
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6a1a      	ldr	r2, [r3, #32]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0201 	bic.w	r2, r2, #1
 8008c6a:	621a      	str	r2, [r3, #32]

			break;
 8008c6c:	e01b      	b.n	8008ca6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0210 	bic.w	r2, r2, #16
 8008c7c:	621a      	str	r2, [r3, #32]

			break;
 8008c7e:	e012      	b.n	8008ca6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a1a      	ldr	r2, [r3, #32]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c8e:	621a      	str	r2, [r3, #32]

			break;
 8008c90:	e009      	b.n	8008ca6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6a1a      	ldr	r2, [r3, #32]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ca0:	621a      	str	r2, [r3, #32]

			break;
 8008ca2:	e000      	b.n	8008ca6 <disableOutput+0x72>
		}

		default: {
			break;
 8008ca4:	bf00      	nop
		}
		}

	return RESET;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	791b      	ldrb	r3, [r3, #4]
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d82f      	bhi.n	8008d24 <PWMx_Toggle+0x70>
 8008cc4:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <PWMx_Toggle+0x18>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008cef 	.word	0x08008cef
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d13 	.word	0x08008d13
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a1a      	ldr	r2, [r3, #32]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f082 0202 	eor.w	r2, r2, #2
 8008cea:	621a      	str	r2, [r3, #32]

				break;
 8008cec:	e01b      	b.n	8008d26 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6a1a      	ldr	r2, [r3, #32]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f082 0220 	eor.w	r2, r2, #32
 8008cfc:	621a      	str	r2, [r3, #32]

				break;
 8008cfe:	e012      	b.n	8008d26 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8008d0e:	621a      	str	r2, [r3, #32]

				break;
 8008d10:	e009      	b.n	8008d26 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6a1a      	ldr	r2, [r3, #32]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8008d20:	621a      	str	r2, [r3, #32]

				break;
 8008d22:	e000      	b.n	8008d26 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 8008d24:	bf00      	nop
			}
			}


}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8008d3e:	4b92      	ldr	r3, [pc, #584]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a91      	ldr	r2, [pc, #580]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d48:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8008d4a:	4b8f      	ldr	r3, [pc, #572]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d50:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 8008d52:	4b8e      	ldr	r3, [pc, #568]	; (8008f8c <RCC_enableMaxFrequencies+0x258>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a8d      	ldr	r2, [pc, #564]	; (8008f8c <RCC_enableMaxFrequencies+0x258>)
 8008d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d5c:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8008d5e:	4b8a      	ldr	r3, [pc, #552]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	4a89      	ldr	r2, [pc, #548]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008d64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008d68:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	f200 82fc 	bhi.w	800936a <RCC_enableMaxFrequencies+0x636>
 8008d72:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <RCC_enableMaxFrequencies+0x44>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008d9d 	.word	0x08008d9d
 8008d7c:	08008e3f 	.word	0x08008e3f
 8008d80:	08008ee1 	.word	0x08008ee1
 8008d84:	08008f95 	.word	0x08008f95
 8008d88:	08009037 	.word	0x08009037
 8008d8c:	080090d9 	.word	0x080090d9
 8008d90:	08009185 	.word	0x08009185
 8008d94:	08009227 	.word	0x08009227
 8008d98:	080092c9 	.word	0x080092c9
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008d9c:	4b7a      	ldr	r3, [pc, #488]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	4a79      	ldr	r2, [pc, #484]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008da6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008da8:	4b77      	ldr	r3, [pc, #476]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4a76      	ldr	r2, [pc, #472]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dae:	f043 0310 	orr.w	r3, r3, #16
 8008db2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008db4:	4b74      	ldr	r3, [pc, #464]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4a73      	ldr	r2, [pc, #460]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008dc4:	4b70      	ldr	r3, [pc, #448]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	4a6f      	ldr	r2, [pc, #444]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dca:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008dce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008dd0:	4b6d      	ldr	r3, [pc, #436]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	4a6c      	ldr	r2, [pc, #432]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008dda:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008ddc:	4b6a      	ldr	r3, [pc, #424]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	4a69      	ldr	r2, [pc, #420]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008de6:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008de8:	4b67      	ldr	r3, [pc, #412]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	4a66      	ldr	r2, [pc, #408]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008df4:	4b64      	ldr	r3, [pc, #400]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	4a63      	ldr	r2, [pc, #396]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008dfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dfe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008e00:	4b61      	ldr	r3, [pc, #388]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	4a60      	ldr	r2, [pc, #384]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e0a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008e0c:	4b5e      	ldr	r3, [pc, #376]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a5d      	ldr	r2, [pc, #372]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e16:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008e18:	e000      	b.n	8008e1c <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8008e1a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008e1c:	4b5a      	ldr	r3, [pc, #360]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0f8      	beq.n	8008e1a <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008e28:	4b59      	ldr	r3, [pc, #356]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a58      	ldr	r2, [pc, #352]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008e2e:	f023 030f 	bic.w	r3, r3, #15
 8008e32:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008e34:	4b56      	ldr	r3, [pc, #344]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008e36:	4a56      	ldr	r2, [pc, #344]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6013      	str	r3, [r2, #0]

			break;
 8008e3c:	e296      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008e3e:	4b52      	ldr	r3, [pc, #328]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	4a51      	ldr	r2, [pc, #324]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e48:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008e4a:	4b4f      	ldr	r3, [pc, #316]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4a4e      	ldr	r2, [pc, #312]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e50:	f043 0310 	orr.w	r3, r3, #16
 8008e54:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008e56:	4b4c      	ldr	r3, [pc, #304]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	4a4b      	ldr	r2, [pc, #300]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e64:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8008e66:	4b48      	ldr	r3, [pc, #288]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4a47      	ldr	r2, [pc, #284]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e6c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8008e70:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008e72:	4b45      	ldr	r3, [pc, #276]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4a44      	ldr	r2, [pc, #272]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008e7c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 8008e7e:	4b42      	ldr	r3, [pc, #264]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	4a41      	ldr	r2, [pc, #260]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e88:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008e8a:	4b3f      	ldr	r3, [pc, #252]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	4a3e      	ldr	r2, [pc, #248]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e94:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008e96:	4b3c      	ldr	r3, [pc, #240]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	4a3b      	ldr	r2, [pc, #236]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008e9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ea0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008ea2:	4b39      	ldr	r3, [pc, #228]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4a38      	ldr	r2, [pc, #224]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eac:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a35      	ldr	r2, [pc, #212]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eb8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008eba:	e000      	b.n	8008ebe <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 8008ebc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008ebe:	4b32      	ldr	r3, [pc, #200]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f8      	beq.n	8008ebc <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008eca:	4b31      	ldr	r3, [pc, #196]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a30      	ldr	r2, [pc, #192]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008ed0:	f023 030f 	bic.w	r3, r3, #15
 8008ed4:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8008ed6:	4b2e      	ldr	r3, [pc, #184]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008ed8:	4a2d      	ldr	r2, [pc, #180]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6013      	str	r3, [r2, #0]

			break;
 8008ede:	e245      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008ee0:	4b29      	ldr	r3, [pc, #164]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4a28      	ldr	r2, [pc, #160]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008eea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008eec:	4b26      	ldr	r3, [pc, #152]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4a25      	ldr	r2, [pc, #148]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008ef2:	f043 0310 	orr.w	r3, r3, #16
 8008ef6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008ef8:	4b23      	ldr	r3, [pc, #140]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4a22      	ldr	r2, [pc, #136]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008efe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8008f08:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f0e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8008f12:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008f14:	4b1c      	ldr	r3, [pc, #112]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008f1e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8008f20:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	4a18      	ldr	r2, [pc, #96]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f2a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008f2c:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f36:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008f38:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	4a12      	ldr	r2, [pc, #72]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f42:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008f44:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	4a0f      	ldr	r2, [pc, #60]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f4e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8008f50:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0c      	ldr	r2, [pc, #48]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f5a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f5c:	e000      	b.n	8008f60 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8008f5e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8008f60:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <RCC_enableMaxFrequencies+0x254>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0f8      	beq.n	8008f5e <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8008f6c:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a07      	ldr	r2, [pc, #28]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008f72:	f023 030f 	bic.w	r3, r3, #15
 8008f76:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a04      	ldr	r2, [pc, #16]	; (8008f90 <RCC_enableMaxFrequencies+0x25c>)
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	6013      	str	r3, [r2, #0]


			break;
 8008f84:	e1f2      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
 8008f86:	bf00      	nop
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	40007000 	.word	0x40007000
 8008f90:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8008f94:	4b79      	ldr	r3, [pc, #484]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a78      	ldr	r2, [pc, #480]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f9e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8008fa0:	4b76      	ldr	r3, [pc, #472]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4a75      	ldr	r2, [pc, #468]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fa6:	f043 0310 	orr.w	r3, r3, #16
 8008faa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8008fac:	4b73      	ldr	r3, [pc, #460]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a72      	ldr	r2, [pc, #456]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8008fbc:	4b6f      	ldr	r3, [pc, #444]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a6e      	ldr	r2, [pc, #440]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fc2:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8008fc6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8008fc8:	4b6c      	ldr	r3, [pc, #432]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4a6b      	ldr	r2, [pc, #428]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008fd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8008fd4:	4b69      	ldr	r3, [pc, #420]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fd6:	4a69      	ldr	r2, [pc, #420]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8008fdc:	4b67      	ldr	r3, [pc, #412]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	4a66      	ldr	r2, [pc, #408]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8008fe8:	4b64      	ldr	r3, [pc, #400]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	4a63      	ldr	r2, [pc, #396]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ff2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8008ff4:	4b61      	ldr	r3, [pc, #388]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	4a60      	ldr	r2, [pc, #384]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8008ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ffe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009000:	4b5e      	ldr	r3, [pc, #376]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a5d      	ldr	r2, [pc, #372]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800900a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800900c:	e000      	b.n	8009010 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800900e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009010:	4b5a      	ldr	r3, [pc, #360]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0f8      	beq.n	800900e <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800901c:	4b58      	ldr	r3, [pc, #352]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a57      	ldr	r2, [pc, #348]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 8009022:	f023 030f 	bic.w	r3, r3, #15
 8009026:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009028:	4b55      	ldr	r3, [pc, #340]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a54      	ldr	r2, [pc, #336]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	6013      	str	r3, [r2, #0]

			break;
 8009034:	e19a      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009036:	4b51      	ldr	r3, [pc, #324]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	4a50      	ldr	r2, [pc, #320]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800903c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009040:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009042:	4b4e      	ldr	r3, [pc, #312]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4a4d      	ldr	r2, [pc, #308]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009048:	f043 0310 	orr.w	r3, r3, #16
 800904c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800904e:	4b4b      	ldr	r3, [pc, #300]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	4a4a      	ldr	r2, [pc, #296]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009054:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800905e:	4b47      	ldr	r3, [pc, #284]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	4a46      	ldr	r2, [pc, #280]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009064:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8009068:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800906a:	4b44      	ldr	r3, [pc, #272]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	4a43      	ldr	r2, [pc, #268]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009070:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009074:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009076:	4b41      	ldr	r3, [pc, #260]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009078:	4a40      	ldr	r2, [pc, #256]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800907e:	4b3f      	ldr	r3, [pc, #252]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	4a3e      	ldr	r2, [pc, #248]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009088:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800908a:	4b3c      	ldr	r3, [pc, #240]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	4a3b      	ldr	r2, [pc, #236]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009090:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009094:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009096:	4b39      	ldr	r3, [pc, #228]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	4a38      	ldr	r2, [pc, #224]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800909c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090a0:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80090a2:	4b36      	ldr	r3, [pc, #216]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a35      	ldr	r2, [pc, #212]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090ac:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80090ae:	e000      	b.n	80090b2 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 80090b0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80090b2:	4b32      	ldr	r3, [pc, #200]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0f8      	beq.n	80090b0 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80090be:	4b30      	ldr	r3, [pc, #192]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a2f      	ldr	r2, [pc, #188]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 80090c4:	f023 030f 	bic.w	r3, r3, #15
 80090c8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80090ca:	4b2d      	ldr	r3, [pc, #180]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a2c      	ldr	r2, [pc, #176]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6013      	str	r3, [r2, #0]

			break;
 80090d6:	e149      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80090d8:	4b28      	ldr	r3, [pc, #160]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a27      	ldr	r2, [pc, #156]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80090e4:	4b25      	ldr	r3, [pc, #148]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a24      	ldr	r2, [pc, #144]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090ea:	f043 0310 	orr.w	r3, r3, #16
 80090ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80090f0:	4b22      	ldr	r3, [pc, #136]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4a21      	ldr	r2, [pc, #132]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 80090f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80090fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fe:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8009100:	4b1e      	ldr	r3, [pc, #120]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4a1d      	ldr	r2, [pc, #116]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009106:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800910a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a1a      	ldr	r2, [pc, #104]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009112:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009116:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009118:	4b18      	ldr	r3, [pc, #96]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800911a:	4a18      	ldr	r2, [pc, #96]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009120:	4b16      	ldr	r3, [pc, #88]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4a15      	ldr	r2, [pc, #84]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800912a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800912c:	4b13      	ldr	r3, [pc, #76]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	4a12      	ldr	r2, [pc, #72]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009136:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009138:	4b10      	ldr	r3, [pc, #64]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	4a0f      	ldr	r2, [pc, #60]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800913e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009142:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009144:	4b0d      	ldr	r3, [pc, #52]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a0c      	ldr	r2, [pc, #48]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 800914a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800914e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009150:	e000      	b.n	8009154 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8009152:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009154:	4b09      	ldr	r3, [pc, #36]	; (800917c <RCC_enableMaxFrequencies+0x448>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f8      	beq.n	8009152 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009160:	4b07      	ldr	r3, [pc, #28]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a06      	ldr	r2, [pc, #24]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 8009166:	f023 030f 	bic.w	r3, r3, #15
 800916a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a03      	ldr	r2, [pc, #12]	; (8009180 <RCC_enableMaxFrequencies+0x44c>)
 8009172:	f043 0302 	orr.w	r3, r3, #2
 8009176:	6013      	str	r3, [r2, #0]

			break;
 8009178:	e0f8      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
 800917a:	bf00      	nop
 800917c:	40023800 	.word	0x40023800
 8009180:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009184:	4b83      	ldr	r3, [pc, #524]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	4a82      	ldr	r2, [pc, #520]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800918a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800918e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009190:	4b80      	ldr	r3, [pc, #512]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	4a7f      	ldr	r2, [pc, #508]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009196:	f043 0310 	orr.w	r3, r3, #16
 800919a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800919c:	4b7d      	ldr	r3, [pc, #500]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4a7c      	ldr	r2, [pc, #496]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80091a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091aa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 80091ac:	4b79      	ldr	r3, [pc, #484]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	4a78      	ldr	r2, [pc, #480]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091b2:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80091b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80091b8:	4b76      	ldr	r3, [pc, #472]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	4a75      	ldr	r2, [pc, #468]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80091c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80091c4:	4b73      	ldr	r3, [pc, #460]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091c6:	4a73      	ldr	r2, [pc, #460]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80091cc:	4b71      	ldr	r3, [pc, #452]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	4a70      	ldr	r2, [pc, #448]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80091d8:	4b6e      	ldr	r3, [pc, #440]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	4a6d      	ldr	r2, [pc, #436]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091e2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80091e4:	4b6b      	ldr	r3, [pc, #428]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	4a6a      	ldr	r2, [pc, #424]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091ee:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80091f0:	4b68      	ldr	r3, [pc, #416]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a67      	ldr	r2, [pc, #412]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80091f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091fa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80091fc:	e000      	b.n	8009200 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 80091fe:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009200:	4b64      	ldr	r3, [pc, #400]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0f8      	beq.n	80091fe <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800920c:	4b62      	ldr	r3, [pc, #392]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a61      	ldr	r2, [pc, #388]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 8009212:	f023 030f 	bic.w	r3, r3, #15
 8009216:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009218:	4b5f      	ldr	r3, [pc, #380]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a5e      	ldr	r2, [pc, #376]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 800921e:	f043 0302 	orr.w	r3, r3, #2
 8009222:	6013      	str	r3, [r2, #0]

			break;
 8009224:	e0a2      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009226:	4b5b      	ldr	r3, [pc, #364]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	4a5a      	ldr	r2, [pc, #360]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800922c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009230:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009232:	4b58      	ldr	r3, [pc, #352]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	4a57      	ldr	r2, [pc, #348]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009238:	f043 0310 	orr.w	r3, r3, #16
 800923c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800923e:	4b55      	ldr	r3, [pc, #340]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	4a54      	ldr	r2, [pc, #336]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009244:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800924c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800924e:	4b51      	ldr	r3, [pc, #324]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4a50      	ldr	r2, [pc, #320]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009254:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8009258:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800925a:	4b4e      	ldr	r3, [pc, #312]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	4a4d      	ldr	r2, [pc, #308]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009260:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009264:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009266:	4b4b      	ldr	r3, [pc, #300]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009268:	4a4a      	ldr	r2, [pc, #296]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800926e:	4b49      	ldr	r3, [pc, #292]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	4a48      	ldr	r2, [pc, #288]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009278:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800927a:	4b46      	ldr	r3, [pc, #280]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	4a45      	ldr	r2, [pc, #276]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009284:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009286:	4b43      	ldr	r3, [pc, #268]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	4a42      	ldr	r2, [pc, #264]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800928c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009290:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009292:	4b40      	ldr	r3, [pc, #256]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a3f      	ldr	r2, [pc, #252]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800929c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800929e:	e000      	b.n	80092a2 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80092a0:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80092a2:	4b3c      	ldr	r3, [pc, #240]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f8      	beq.n	80092a0 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80092ae:	4b3a      	ldr	r3, [pc, #232]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a39      	ldr	r2, [pc, #228]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 80092b4:	f023 030f 	bic.w	r3, r3, #15
 80092b8:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80092ba:	4b37      	ldr	r3, [pc, #220]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a36      	ldr	r2, [pc, #216]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 80092c0:	f043 0302 	orr.w	r3, r3, #2
 80092c4:	6013      	str	r3, [r2, #0]

			break;
 80092c6:	e051      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80092c8:	4b32      	ldr	r3, [pc, #200]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	4a31      	ldr	r2, [pc, #196]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 80092d4:	4b2f      	ldr	r3, [pc, #188]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	4a2e      	ldr	r2, [pc, #184]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092da:	f043 0308 	orr.w	r3, r3, #8
 80092de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80092e0:	4b2c      	ldr	r3, [pc, #176]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a2b      	ldr	r2, [pc, #172]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80092f0:	4b28      	ldr	r3, [pc, #160]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4a27      	ldr	r2, [pc, #156]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092f6:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80092fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80092fc:	4b25      	ldr	r3, [pc, #148]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4a24      	ldr	r2, [pc, #144]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009302:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009306:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009308:	4b22      	ldr	r3, [pc, #136]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800930a:	4a22      	ldr	r2, [pc, #136]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009310:	4b20      	ldr	r3, [pc, #128]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	4a1f      	ldr	r2, [pc, #124]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800931a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800931c:	4b1d      	ldr	r3, [pc, #116]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	4a1c      	ldr	r2, [pc, #112]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009326:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009328:	4b1a      	ldr	r3, [pc, #104]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	4a19      	ldr	r2, [pc, #100]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800932e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009332:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009334:	4b17      	ldr	r3, [pc, #92]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a16      	ldr	r2, [pc, #88]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800933a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800933e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009340:	e000      	b.n	8009344 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8009342:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009344:	4b13      	ldr	r3, [pc, #76]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f8      	beq.n	8009342 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a10      	ldr	r2, [pc, #64]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 8009356:	f023 030f 	bic.w	r3, r3, #15
 800935a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800935c:	4b0e      	ldr	r3, [pc, #56]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a0d      	ldr	r2, [pc, #52]	; (8009398 <RCC_enableMaxFrequencies+0x664>)
 8009362:	f043 0303 	orr.w	r3, r3, #3
 8009366:	6013      	str	r3, [r2, #0]

			break;
 8009368:	e000      	b.n	800936c <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800936a:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800936c:	4b09      	ldr	r3, [pc, #36]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	4a08      	ldr	r2, [pc, #32]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 8009372:	f043 0302 	orr.w	r3, r3, #2
 8009376:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8009378:	e000      	b.n	800937c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800937a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <RCC_enableMaxFrequencies+0x660>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0f8      	beq.n	800937a <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8009388:	f000 fd4a 	bl	8009e20 <SystemCoreClockUpdate>

}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40023800 	.word	0x40023800
 8009398:	40023c00 	.word	0x40023c00

0800939c <__NVIC_EnableIRQ>:
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	db0b      	blt.n	80093c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	f003 021f 	and.w	r2, r3, #31
 80093b4:	4907      	ldr	r1, [pc, #28]	; (80093d4 <__NVIC_EnableIRQ+0x38>)
 80093b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ba:	095b      	lsrs	r3, r3, #5
 80093bc:	2001      	movs	r0, #1
 80093be:	fa00 f202 	lsl.w	r2, r0, r2
 80093c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	e000e100 	.word	0xe000e100

080093d8 <__NVIC_SetPriority>:
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	db0a      	blt.n	8009402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	490c      	ldr	r1, [pc, #48]	; (8009424 <__NVIC_SetPriority+0x4c>)
 80093f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093f6:	0112      	lsls	r2, r2, #4
 80093f8:	b2d2      	uxtb	r2, r2
 80093fa:	440b      	add	r3, r1
 80093fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009400:	e00a      	b.n	8009418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	b2da      	uxtb	r2, r3
 8009406:	4908      	ldr	r1, [pc, #32]	; (8009428 <__NVIC_SetPriority+0x50>)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	3b04      	subs	r3, #4
 8009410:	0112      	lsls	r2, r2, #4
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	440b      	add	r3, r1
 8009416:	761a      	strb	r2, [r3, #24]
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	e000e100 	.word	0xe000e100
 8009428:	e000ed00 	.word	0xe000ed00

0800942c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009434:	b672      	cpsid	i
}
 8009436:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a91      	ldr	r2, [pc, #580]	; (8009684 <USART_Config+0x258>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d106      	bne.n	8009450 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8009442:	4b91      	ldr	r3, [pc, #580]	; (8009688 <USART_Config+0x25c>)
 8009444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009446:	4a90      	ldr	r2, [pc, #576]	; (8009688 <USART_Config+0x25c>)
 8009448:	f043 0310 	orr.w	r3, r3, #16
 800944c:	6453      	str	r3, [r2, #68]	; 0x44
 800944e:	e018      	b.n	8009482 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a8d      	ldr	r2, [pc, #564]	; (800968c <USART_Config+0x260>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d106      	bne.n	8009468 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800945a:	4b8b      	ldr	r3, [pc, #556]	; (8009688 <USART_Config+0x25c>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	4a8a      	ldr	r2, [pc, #552]	; (8009688 <USART_Config+0x25c>)
 8009460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009464:	6413      	str	r3, [r2, #64]	; 0x40
 8009466:	e00c      	b.n	8009482 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a88      	ldr	r2, [pc, #544]	; (8009690 <USART_Config+0x264>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d106      	bne.n	8009480 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8009472:	4b85      	ldr	r3, [pc, #532]	; (8009688 <USART_Config+0x25c>)
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	4a84      	ldr	r2, [pc, #528]	; (8009688 <USART_Config+0x25c>)
 8009478:	f043 0320 	orr.w	r3, r3, #32
 800947c:	6453      	str	r3, [r2, #68]	; 0x44
 800947e:	e000      	b.n	8009482 <USART_Config+0x56>
	}
	else{
		__NOP();
 8009480:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7a5b      	ldrb	r3, [r3, #9]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d025      	beq.n	80094e6 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7a5b      	ldrb	r3, [r3, #9]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d110      	bne.n	80094c4 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094b0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	e018      	b.n	80094f6 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094d2:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e2:	60da      	str	r2, [r3, #12]
 80094e4:	e007      	b.n	80094f6 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68da      	ldr	r2, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	7a1b      	ldrb	r3, [r3, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d108      	bne.n	8009510 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	e007      	b.n	8009520 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800951e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7a9b      	ldrb	r3, [r3, #10]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d82f      	bhi.n	8009588 <USART_Config+0x15c>
 8009528:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <USART_Config+0x104>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	08009541 	.word	0x08009541
 8009534:	08009553 	.word	0x08009553
 8009538:	08009565 	.word	0x08009565
 800953c:	08009577 	.word	0x08009577
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800954e:	611a      	str	r2, [r3, #16]
			break;
 8009550:	e023      	b.n	800959a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	691a      	ldr	r2, [r3, #16]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009560:	611a      	str	r2, [r3, #16]
			break;
 8009562:	e01a      	b.n	800959a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691a      	ldr	r2, [r3, #16]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009572:	611a      	str	r2, [r3, #16]
			break;
 8009574:	e011      	b.n	800959a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009584:	611a      	str	r2, [r3, #16]
			break;
 8009586:	e008      	b.n	800959a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009596:	611a      	str	r2, [r3, #16]
			break;
 8009598:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681c      	ldr	r4, [r3, #0]
 80095a2:	4611      	mov	r1, r2
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f8d7 	bl	8009758 <brrCalculus>
 80095aa:	4603      	mov	r3, r0
 80095ac:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	799b      	ldrb	r3, [r3, #6]
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d82e      	bhi.n	8009614 <USART_Config+0x1e8>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <USART_Config+0x190>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095cd 	.word	0x080095cd
 80095c0:	080095df 	.word	0x080095df
 80095c4:	080095f1 	.word	0x080095f1
 80095c8:	08009603 	.word	0x08009603
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0208 	orr.w	r2, r2, #8
 80095da:	60da      	str	r2, [r3, #12]
			break;
 80095dc:	e023      	b.n	8009626 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0204 	orr.w	r2, r2, #4
 80095ec:	60da      	str	r2, [r3, #12]
			break;
 80095ee:	e01a      	b.n	8009626 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 020c 	orr.w	r2, r2, #12
 80095fe:	60da      	str	r2, [r3, #12]
			break;
 8009600:	e011      	b.n	8009626 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f022 020c 	bic.w	r2, r2, #12
 8009610:	60da      	str	r2, [r3, #12]
			break;
 8009612:	e008      	b.n	8009626 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 020c 	bic.w	r2, r2, #12
 8009622:	60da      	str	r2, [r3, #12]
			break;
 8009624:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	799b      	ldrb	r3, [r3, #6]
 800962a:	2b03      	cmp	r3, #3
 800962c:	d008      	beq.n	8009640 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800963c:	60da      	str	r2, [r3, #12]
 800963e:	e007      	b.n	8009650 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800964e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	795b      	ldrb	r3, [r3, #5]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d139      	bne.n	80096cc <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0220 	orr.w	r2, r2, #32
 8009666:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a05      	ldr	r2, [pc, #20]	; (8009684 <USART_Config+0x258>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d110      	bne.n	8009694 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009672:	2025      	movs	r0, #37	; 0x25
 8009674:	f7ff fe92 	bl	800939c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8009678:	2101      	movs	r1, #1
 800967a:	2025      	movs	r0, #37	; 0x25
 800967c:	f7ff feac 	bl	80093d8 <__NVIC_SetPriority>
 8009680:	e02c      	b.n	80096dc <USART_Config+0x2b0>
 8009682:	bf00      	nop
 8009684:	40011000 	.word	0x40011000
 8009688:	40023800 	.word	0x40023800
 800968c:	40004400 	.word	0x40004400
 8009690:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a2c      	ldr	r2, [pc, #176]	; (800974c <USART_Config+0x320>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d107      	bne.n	80096ae <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800969e:	2026      	movs	r0, #38	; 0x26
 80096a0:	f7ff fe7c 	bl	800939c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 80096a4:	2101      	movs	r1, #1
 80096a6:	2026      	movs	r0, #38	; 0x26
 80096a8:	f7ff fe96 	bl	80093d8 <__NVIC_SetPriority>
 80096ac:	e016      	b.n	80096dc <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a27      	ldr	r2, [pc, #156]	; (8009750 <USART_Config+0x324>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d107      	bne.n	80096c8 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 80096b8:	2047      	movs	r0, #71	; 0x47
 80096ba:	f7ff fe6f 	bl	800939c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 80096be:	2101      	movs	r1, #1
 80096c0:	2047      	movs	r0, #71	; 0x47
 80096c2:	f7ff fe89 	bl	80093d8 <__NVIC_SetPriority>
 80096c6:	e009      	b.n	80096dc <USART_Config+0x2b0>
		}
		else{
				__NOP();
 80096c8:	bf00      	nop
 80096ca:	e007      	b.n	80096dc <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0220 	bic.w	r2, r2, #32
 80096da:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	791b      	ldrb	r3, [r3, #4]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d124      	bne.n	800972e <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096f2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a16      	ldr	r2, [pc, #88]	; (8009754 <USART_Config+0x328>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d103      	bne.n	8009706 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 80096fe:	2025      	movs	r0, #37	; 0x25
 8009700:	f7ff fe4c 	bl	800939c <__NVIC_EnableIRQ>
 8009704:	e01b      	b.n	800973e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a10      	ldr	r2, [pc, #64]	; (800974c <USART_Config+0x320>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d103      	bne.n	8009718 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009710:	2026      	movs	r0, #38	; 0x26
 8009712:	f7ff fe43 	bl	800939c <__NVIC_EnableIRQ>
 8009716:	e012      	b.n	800973e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a0c      	ldr	r2, [pc, #48]	; (8009750 <USART_Config+0x324>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d103      	bne.n	800972a <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8009722:	2047      	movs	r0, #71	; 0x47
 8009724:	f7ff fe3a 	bl	800939c <__NVIC_EnableIRQ>
 8009728:	e009      	b.n	800973e <USART_Config+0x312>
		}
		else{
				__NOP();
 800972a:	bf00      	nop
 800972c:	e007      	b.n	800973e <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800973c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800973e:	b662      	cpsie	i
}
 8009740:	bf00      	nop
	}

	__enable_irq();
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	bd90      	pop	{r4, r7, pc}
 800974a:	bf00      	nop
 800974c:	40004400 	.word	0x40004400
 8009750:	40011400 	.word	0x40011400
 8009754:	40011000 	.word	0x40011000

08009758 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009758:	b5b0      	push	{r4, r5, r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	79db      	ldrb	r3, [r3, #7]
 8009766:	2b03      	cmp	r3, #3
 8009768:	f200 8217 	bhi.w	8009b9a <brrCalculus+0x442>
 800976c:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <brrCalculus+0x1c>)
 800976e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009772:	bf00      	nop
 8009774:	08009785 	.word	0x08009785
 8009778:	0800987f 	.word	0x0800987f
 800977c:	08009999 	.word	0x08009999
 8009780:	08009aa1 	.word	0x08009aa1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8009784:	4980      	ldr	r1, [pc, #512]	; (8009988 <brrCalculus+0x230>)
 8009786:	a37c      	add	r3, pc, #496	; (adr r3, 8009978 <brrCalculus+0x220>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	ee17 0a90 	vmov	r0, s15
 800979e:	f7f6 feeb 	bl	8000578 <__aeabi_f2d>
 80097a2:	4b79      	ldr	r3, [pc, #484]	; (8009988 <brrCalculus+0x230>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 ff3e 	bl	8000628 <__aeabi_dmul>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4975      	ldr	r1, [pc, #468]	; (8009988 <brrCalculus+0x230>)
 80097b2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80097b6:	4b74      	ldr	r3, [pc, #464]	; (8009988 <brrCalculus+0x230>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	4610      	mov	r0, r2
 80097be:	4619      	mov	r1, r3
 80097c0:	f7f7 f9e2 	bl	8000b88 <__aeabi_d2iz>
 80097c4:	4603      	mov	r3, r0
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	4b70      	ldr	r3, [pc, #448]	; (800998c <brrCalculus+0x234>)
 80097ca:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80097cc:	4b6e      	ldr	r3, [pc, #440]	; (8009988 <brrCalculus+0x230>)
 80097ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 80097d2:	4b6d      	ldr	r3, [pc, #436]	; (8009988 <brrCalculus+0x230>)
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	4610      	mov	r0, r2
 80097da:	4619      	mov	r1, r3
 80097dc:	f7f7 f9d4 	bl	8000b88 <__aeabi_d2iz>
 80097e0:	4603      	mov	r3, r0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f6 feb6 	bl	8000554 <__aeabi_i2d>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4620      	mov	r0, r4
 80097ee:	4629      	mov	r1, r5
 80097f0:	f7f6 fd62 	bl	80002b8 <__aeabi_dsub>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4610      	mov	r0, r2
 80097fa:	4619      	mov	r1, r3
 80097fc:	f7f7 fa0c 	bl	8000c18 <__aeabi_d2f>
 8009800:	4603      	mov	r3, r0
 8009802:	4a63      	ldr	r2, [pc, #396]	; (8009990 <brrCalculus+0x238>)
 8009804:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009806:	4b62      	ldr	r3, [pc, #392]	; (8009990 <brrCalculus+0x238>)
 8009808:	edd3 7a00 	vldr	s15, [r3]
 800980c:	2004      	movs	r0, #4
 800980e:	eeb0 0a67 	vmov.f32	s0, s15
 8009812:	f000 fa6d 	bl	8009cf0 <roundToNDecimals>
 8009816:	eef0 7a40 	vmov.f32	s15, s0
 800981a:	4b5d      	ldr	r3, [pc, #372]	; (8009990 <brrCalculus+0x238>)
 800981c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009820:	4b5b      	ldr	r3, [pc, #364]	; (8009990 <brrCalculus+0x238>)
 8009822:	edd3 7a00 	vldr	s15, [r3]
 8009826:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800982a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800982e:	4b58      	ldr	r3, [pc, #352]	; (8009990 <brrCalculus+0x238>)
 8009830:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009834:	4b56      	ldr	r3, [pc, #344]	; (8009990 <brrCalculus+0x238>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f7f6 fe9d 	bl	8000578 <__aeabi_f2d>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	ec43 2b10 	vmov	d0, r2, r3
 8009846:	f003 fd27 	bl	800d298 <round>
 800984a:	ec53 2b10 	vmov	r2, r3, d0
 800984e:	4610      	mov	r0, r2
 8009850:	4619      	mov	r1, r3
 8009852:	f7f7 f9e1 	bl	8000c18 <__aeabi_d2f>
 8009856:	4603      	mov	r3, r0
 8009858:	4a4d      	ldr	r2, [pc, #308]	; (8009990 <brrCalculus+0x238>)
 800985a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800985c:	4b4b      	ldr	r3, [pc, #300]	; (800998c <brrCalculus+0x234>)
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	b29a      	uxth	r2, r3
 8009864:	4b4a      	ldr	r3, [pc, #296]	; (8009990 <brrCalculus+0x238>)
 8009866:	edd3 7a00 	vldr	s15, [r3]
 800986a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800986e:	ee17 3a90 	vmov	r3, s15
 8009872:	b29b      	uxth	r3, r3
 8009874:	4313      	orrs	r3, r2
 8009876:	b29a      	uxth	r2, r3
 8009878:	4b46      	ldr	r3, [pc, #280]	; (8009994 <brrCalculus+0x23c>)
 800987a:	801a      	strh	r2, [r3, #0]


		break;
 800987c:	e18f      	b.n	8009b9e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800987e:	4942      	ldr	r1, [pc, #264]	; (8009988 <brrCalculus+0x230>)
 8009880:	a33f      	add	r3, pc, #252	; (adr r3, 8009980 <brrCalculus+0x228>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	ee17 0a90 	vmov	r0, s15
 8009898:	f7f6 fe6e 	bl	8000578 <__aeabi_f2d>
 800989c:	4b3a      	ldr	r3, [pc, #232]	; (8009988 <brrCalculus+0x230>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	f7f6 fec1 	bl	8000628 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4937      	ldr	r1, [pc, #220]	; (8009988 <brrCalculus+0x230>)
 80098ac:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80098b0:	4b35      	ldr	r3, [pc, #212]	; (8009988 <brrCalculus+0x230>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7f7 f965 	bl	8000b88 <__aeabi_d2iz>
 80098be:	4603      	mov	r3, r0
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	4b32      	ldr	r3, [pc, #200]	; (800998c <brrCalculus+0x234>)
 80098c4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80098c6:	4b30      	ldr	r3, [pc, #192]	; (8009988 <brrCalculus+0x230>)
 80098c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80098cc:	4b2e      	ldr	r3, [pc, #184]	; (8009988 <brrCalculus+0x230>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4610      	mov	r0, r2
 80098d4:	4619      	mov	r1, r3
 80098d6:	f7f7 f957 	bl	8000b88 <__aeabi_d2iz>
 80098da:	4603      	mov	r3, r0
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f6 fe39 	bl	8000554 <__aeabi_i2d>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 fce5 	bl	80002b8 <__aeabi_dsub>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4610      	mov	r0, r2
 80098f4:	4619      	mov	r1, r3
 80098f6:	f7f7 f98f 	bl	8000c18 <__aeabi_d2f>
 80098fa:	4603      	mov	r3, r0
 80098fc:	4a24      	ldr	r2, [pc, #144]	; (8009990 <brrCalculus+0x238>)
 80098fe:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009900:	4b23      	ldr	r3, [pc, #140]	; (8009990 <brrCalculus+0x238>)
 8009902:	edd3 7a00 	vldr	s15, [r3]
 8009906:	2004      	movs	r0, #4
 8009908:	eeb0 0a67 	vmov.f32	s0, s15
 800990c:	f000 f9f0 	bl	8009cf0 <roundToNDecimals>
 8009910:	eef0 7a40 	vmov.f32	s15, s0
 8009914:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <brrCalculus+0x238>)
 8009916:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800991a:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <brrCalculus+0x238>)
 800991c:	edd3 7a00 	vldr	s15, [r3]
 8009920:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009928:	4b19      	ldr	r3, [pc, #100]	; (8009990 <brrCalculus+0x238>)
 800992a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800992e:	4b18      	ldr	r3, [pc, #96]	; (8009990 <brrCalculus+0x238>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f7f6 fe20 	bl	8000578 <__aeabi_f2d>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	ec43 2b10 	vmov	d0, r2, r3
 8009940:	f003 fcaa 	bl	800d298 <round>
 8009944:	ec53 2b10 	vmov	r2, r3, d0
 8009948:	4610      	mov	r0, r2
 800994a:	4619      	mov	r1, r3
 800994c:	f7f7 f964 	bl	8000c18 <__aeabi_d2f>
 8009950:	4603      	mov	r3, r0
 8009952:	4a0f      	ldr	r2, [pc, #60]	; (8009990 <brrCalculus+0x238>)
 8009954:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009956:	4b0d      	ldr	r3, [pc, #52]	; (800998c <brrCalculus+0x234>)
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	b29a      	uxth	r2, r3
 800995e:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <brrCalculus+0x238>)
 8009960:	edd3 7a00 	vldr	s15, [r3]
 8009964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009968:	ee17 3a90 	vmov	r3, s15
 800996c:	b29b      	uxth	r3, r3
 800996e:	4313      	orrs	r3, r2
 8009970:	b29a      	uxth	r2, r3
 8009972:	4b08      	ldr	r3, [pc, #32]	; (8009994 <brrCalculus+0x23c>)
 8009974:	801a      	strh	r2, [r3, #0]


		break;
 8009976:	e112      	b.n	8009b9e <brrCalculus+0x446>
 8009978:	b4e81b4f 	.word	0xb4e81b4f
 800997c:	3edb4e81 	.word	0x3edb4e81
 8009980:	b4e81b4f 	.word	0xb4e81b4f
 8009984:	3ecb4e81 	.word	0x3ecb4e81
 8009988:	200133c0 	.word	0x200133c0
 800998c:	200133b8 	.word	0x200133b8
 8009990:	200133bc 	.word	0x200133bc
 8009994:	200133b6 	.word	0x200133b6
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009998:	4989      	ldr	r1, [pc, #548]	; (8009bc0 <brrCalculus+0x468>)
 800999a:	a385      	add	r3, pc, #532	; (adr r3, 8009bb0 <brrCalculus+0x458>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	ee17 0a90 	vmov	r0, s15
 80099b2:	f7f6 fde1 	bl	8000578 <__aeabi_f2d>
 80099b6:	4b82      	ldr	r3, [pc, #520]	; (8009bc0 <brrCalculus+0x468>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f6 fe34 	bl	8000628 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	497e      	ldr	r1, [pc, #504]	; (8009bc0 <brrCalculus+0x468>)
 80099c6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 80099ca:	4b7d      	ldr	r3, [pc, #500]	; (8009bc0 <brrCalculus+0x468>)
 80099cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d0:	4610      	mov	r0, r2
 80099d2:	4619      	mov	r1, r3
 80099d4:	f7f7 f8d8 	bl	8000b88 <__aeabi_d2iz>
 80099d8:	4603      	mov	r3, r0
 80099da:	b29a      	uxth	r2, r3
 80099dc:	4b79      	ldr	r3, [pc, #484]	; (8009bc4 <brrCalculus+0x46c>)
 80099de:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 80099e0:	4b77      	ldr	r3, [pc, #476]	; (8009bc0 <brrCalculus+0x468>)
 80099e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80099e6:	4b76      	ldr	r3, [pc, #472]	; (8009bc0 <brrCalculus+0x468>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	4610      	mov	r0, r2
 80099ee:	4619      	mov	r1, r3
 80099f0:	f7f7 f8ca 	bl	8000b88 <__aeabi_d2iz>
 80099f4:	4603      	mov	r3, r0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f6 fdac 	bl	8000554 <__aeabi_i2d>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4620      	mov	r0, r4
 8009a02:	4629      	mov	r1, r5
 8009a04:	f7f6 fc58 	bl	80002b8 <__aeabi_dsub>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f7f7 f902 	bl	8000c18 <__aeabi_d2f>
 8009a14:	4603      	mov	r3, r0
 8009a16:	4a6c      	ldr	r2, [pc, #432]	; (8009bc8 <brrCalculus+0x470>)
 8009a18:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009a1a:	4b6b      	ldr	r3, [pc, #428]	; (8009bc8 <brrCalculus+0x470>)
 8009a1c:	edd3 7a00 	vldr	s15, [r3]
 8009a20:	2004      	movs	r0, #4
 8009a22:	eeb0 0a67 	vmov.f32	s0, s15
 8009a26:	f000 f963 	bl	8009cf0 <roundToNDecimals>
 8009a2a:	eef0 7a40 	vmov.f32	s15, s0
 8009a2e:	4b66      	ldr	r3, [pc, #408]	; (8009bc8 <brrCalculus+0x470>)
 8009a30:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009a34:	4b64      	ldr	r3, [pc, #400]	; (8009bc8 <brrCalculus+0x470>)
 8009a36:	edd3 7a00 	vldr	s15, [r3]
 8009a3a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a42:	4b61      	ldr	r3, [pc, #388]	; (8009bc8 <brrCalculus+0x470>)
 8009a44:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009a48:	4b5f      	ldr	r3, [pc, #380]	; (8009bc8 <brrCalculus+0x470>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f6 fd93 	bl	8000578 <__aeabi_f2d>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	ec43 2b10 	vmov	d0, r2, r3
 8009a5a:	f003 fc1d 	bl	800d298 <round>
 8009a5e:	ec51 0b10 	vmov	r0, r1, d0
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	4b59      	ldr	r3, [pc, #356]	; (8009bcc <brrCalculus+0x474>)
 8009a68:	f7f6 fc28 	bl	80002bc <__adddf3>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4610      	mov	r0, r2
 8009a72:	4619      	mov	r1, r3
 8009a74:	f7f7 f8d0 	bl	8000c18 <__aeabi_d2f>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	4a53      	ldr	r2, [pc, #332]	; (8009bc8 <brrCalculus+0x470>)
 8009a7c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009a7e:	4b51      	ldr	r3, [pc, #324]	; (8009bc4 <brrCalculus+0x46c>)
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	011b      	lsls	r3, r3, #4
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	4b50      	ldr	r3, [pc, #320]	; (8009bc8 <brrCalculus+0x470>)
 8009a88:	edd3 7a00 	vldr	s15, [r3]
 8009a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a90:	ee17 3a90 	vmov	r3, s15
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	4b4d      	ldr	r3, [pc, #308]	; (8009bd0 <brrCalculus+0x478>)
 8009a9c:	801a      	strh	r2, [r3, #0]


		break;
 8009a9e:	e07e      	b.n	8009b9e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009aa0:	4947      	ldr	r1, [pc, #284]	; (8009bc0 <brrCalculus+0x468>)
 8009aa2:	a345      	add	r3, pc, #276	; (adr r3, 8009bb8 <brrCalculus+0x460>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	ee17 0a90 	vmov	r0, s15
 8009aba:	f7f6 fd5d 	bl	8000578 <__aeabi_f2d>
 8009abe:	4b40      	ldr	r3, [pc, #256]	; (8009bc0 <brrCalculus+0x468>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fdb0 	bl	8000628 <__aeabi_dmul>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	493c      	ldr	r1, [pc, #240]	; (8009bc0 <brrCalculus+0x468>)
 8009ace:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009ad2:	4b3b      	ldr	r3, [pc, #236]	; (8009bc0 <brrCalculus+0x468>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	4610      	mov	r0, r2
 8009ada:	4619      	mov	r1, r3
 8009adc:	f7f7 f854 	bl	8000b88 <__aeabi_d2iz>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	4b37      	ldr	r3, [pc, #220]	; (8009bc4 <brrCalculus+0x46c>)
 8009ae6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009ae8:	4b35      	ldr	r3, [pc, #212]	; (8009bc0 <brrCalculus+0x468>)
 8009aea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009aee:	4b34      	ldr	r3, [pc, #208]	; (8009bc0 <brrCalculus+0x468>)
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	f7f7 f846 	bl	8000b88 <__aeabi_d2iz>
 8009afc:	4603      	mov	r3, r0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7f6 fd28 	bl	8000554 <__aeabi_i2d>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4620      	mov	r0, r4
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7f6 fbd4 	bl	80002b8 <__aeabi_dsub>
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4610      	mov	r0, r2
 8009b16:	4619      	mov	r1, r3
 8009b18:	f7f7 f87e 	bl	8000c18 <__aeabi_d2f>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	4a2a      	ldr	r2, [pc, #168]	; (8009bc8 <brrCalculus+0x470>)
 8009b20:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009b22:	4b29      	ldr	r3, [pc, #164]	; (8009bc8 <brrCalculus+0x470>)
 8009b24:	edd3 7a00 	vldr	s15, [r3]
 8009b28:	2004      	movs	r0, #4
 8009b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b2e:	f000 f8df 	bl	8009cf0 <roundToNDecimals>
 8009b32:	eef0 7a40 	vmov.f32	s15, s0
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <brrCalculus+0x470>)
 8009b38:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009b3c:	4b22      	ldr	r3, [pc, #136]	; (8009bc8 <brrCalculus+0x470>)
 8009b3e:	edd3 7a00 	vldr	s15, [r3]
 8009b42:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b4a:	4b1f      	ldr	r3, [pc, #124]	; (8009bc8 <brrCalculus+0x470>)
 8009b4c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009b50:	4b1d      	ldr	r3, [pc, #116]	; (8009bc8 <brrCalculus+0x470>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f6 fd0f 	bl	8000578 <__aeabi_f2d>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	ec43 2b10 	vmov	d0, r2, r3
 8009b62:	f003 fb99 	bl	800d298 <round>
 8009b66:	ec53 2b10 	vmov	r2, r3, d0
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f7f7 f853 	bl	8000c18 <__aeabi_d2f>
 8009b72:	4603      	mov	r3, r0
 8009b74:	4a14      	ldr	r2, [pc, #80]	; (8009bc8 <brrCalculus+0x470>)
 8009b76:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009b78:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <brrCalculus+0x46c>)
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <brrCalculus+0x470>)
 8009b82:	edd3 7a00 	vldr	s15, [r3]
 8009b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b8a:	ee17 3a90 	vmov	r3, s15
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	4313      	orrs	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <brrCalculus+0x478>)
 8009b96:	801a      	strh	r2, [r3, #0]


		break;
 8009b98:	e001      	b.n	8009b9e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8009b9a:	bf00      	nop
		break;
 8009b9c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <brrCalculus+0x478>)
 8009ba0:	881b      	ldrh	r3, [r3, #0]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
 8009bb0:	789abcdf 	.word	0x789abcdf
 8009bb4:	3ec23456 	.word	0x3ec23456
 8009bb8:	789abcdf 	.word	0x789abcdf
 8009bbc:	3ea23456 	.word	0x3ea23456
 8009bc0:	200133c0 	.word	0x200133c0
 8009bc4:	200133b8 	.word	0x200133b8
 8009bc8:	200133bc 	.word	0x200133bc
 8009bcc:	3ff00000 	.word	0x3ff00000
 8009bd0:	200133b6 	.word	0x200133b6

08009bd4 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009bde:	e000      	b.n	8009be2 <writeChar+0xe>
		__NOP();
 8009be0:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f7      	beq.n	8009be0 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]

}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8009c0e:	e008      	b.n	8009c22 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff ffdc 	bl	8009bd4 <writeChar>
		msgToSend ++ ;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f2      	bne.n	8009c10 <writeMsg+0xc>
	}
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
	__NOP();
 8009c38:	bf00      	nop
}
 8009c3a:	bf00      	nop
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
	__NOP();
 8009c48:	bf00      	nop
}
 8009c4a:	bf00      	nop
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 8009c54:	b480      	push	{r7}
 8009c56:	af00      	add	r7, sp, #0
	return auxRxData;
 8009c58:	4b03      	ldr	r3, [pc, #12]	; (8009c68 <getRxData+0x14>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	200133c8 	.word	0x200133c8

08009c6c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <USART2_IRQHandler+0x24>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <USART2_IRQHandler+0x24>)
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4b04      	ldr	r3, [pc, #16]	; (8009c94 <USART2_IRQHandler+0x28>)
 8009c84:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8009c86:	f7ff ffd5 	bl	8009c34 <usart2Rx_Callback>
	}

}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	40004400 	.word	0x40004400
 8009c94:	200133c8 	.word	0x200133c8

08009c98 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8009c9c:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <USART1_IRQHandler+0x24>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0320 	and.w	r3, r3, #32
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <USART1_IRQHandler+0x24>)
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <USART1_IRQHandler+0x28>)
 8009cb0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 8009cb2:	f7f7 fd95 	bl	80017e0 <usart1Rx_Callback>
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	40011000 	.word	0x40011000
 8009cc0:	200133c8 	.word	0x200133c8

08009cc4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <USART6_IRQHandler+0x24>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0320 	and.w	r3, r3, #32
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d006      	beq.n	8009ce2 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 8009cd4:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <USART6_IRQHandler+0x24>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	4b04      	ldr	r3, [pc, #16]	; (8009cec <USART6_IRQHandler+0x28>)
 8009cdc:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8009cde:	f7ff ffb1 	bl	8009c44 <usart6Rx_Callback>
	}

}
 8009ce2:	bf00      	nop
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	40011400 	.word	0x40011400
 8009cec:	200133c8 	.word	0x200133c8

08009cf0 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	ed87 0a01 	vstr	s0, [r7, #4]
 8009cfa:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8009cfc:	6838      	ldr	r0, [r7, #0]
 8009cfe:	f7f6 fc29 	bl	8000554 <__aeabi_i2d>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	ec43 2b11 	vmov	d1, r2, r3
 8009d0a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009d88 <roundToNDecimals+0x98>
 8009d0e:	f003 fb65 	bl	800d3dc <pow>
 8009d12:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7f6 fc2e 	bl	8000578 <__aeabi_f2d>
 8009d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d20:	f7f6 fc82 	bl	8000628 <__aeabi_dmul>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	f7f6 ff74 	bl	8000c18 <__aeabi_d2f>
 8009d30:	4603      	mov	r3, r0
 8009d32:	607b      	str	r3, [r7, #4]

    number = round(number);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7f6 fc1f 	bl	8000578 <__aeabi_f2d>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	ec43 2b10 	vmov	d0, r2, r3
 8009d42:	f003 faa9 	bl	800d298 <round>
 8009d46:	ec53 2b10 	vmov	r2, r3, d0
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f7f6 ff63 	bl	8000c18 <__aeabi_d2f>
 8009d52:	4603      	mov	r3, r0
 8009d54:	607b      	str	r3, [r7, #4]

    number /= factor;
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7f6 fc0e 	bl	8000578 <__aeabi_f2d>
 8009d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d60:	f7f6 fd8c 	bl	800087c <__aeabi_ddiv>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f7f6 ff54 	bl	8000c18 <__aeabi_d2f>
 8009d70:	4603      	mov	r3, r0
 8009d72:	607b      	str	r3, [r7, #4]

    return number;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	ee07 3a90 	vmov	s15, r3
}
 8009d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	f3af 8000 	nop.w
 8009d88:	00000000 	.word	0x00000000
 8009d8c:	40240000 	.word	0x40240000

08009d90 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d9c:	b672      	cpsid	i
}
 8009d9e:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a12      	ldr	r2, [pc, #72]	; (8009df0 <usart_Set_Priority+0x60>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d105      	bne.n	8009db6 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	4619      	mov	r1, r3
 8009dae:	2025      	movs	r0, #37	; 0x25
 8009db0:	f7ff fb12 	bl	80093d8 <__NVIC_SetPriority>
 8009db4:	e016      	b.n	8009de4 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a0e      	ldr	r2, [pc, #56]	; (8009df4 <usart_Set_Priority+0x64>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d105      	bne.n	8009dcc <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	2026      	movs	r0, #38	; 0x26
 8009dc6:	f7ff fb07 	bl	80093d8 <__NVIC_SetPriority>
 8009dca:	e00b      	b.n	8009de4 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a09      	ldr	r2, [pc, #36]	; (8009df8 <usart_Set_Priority+0x68>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d105      	bne.n	8009de2 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	2047      	movs	r0, #71	; 0x47
 8009ddc:	f7ff fafc 	bl	80093d8 <__NVIC_SetPriority>
 8009de0:	e000      	b.n	8009de4 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 8009de2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009de4:	b662      	cpsie	i
}
 8009de6:	bf00      	nop



	__enable_irq();

}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	40011000 	.word	0x40011000
 8009df4:	40004400 	.word	0x40004400
 8009df8:	40011400 	.word	0x40011400

08009dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <SystemInit+0x20>)
 8009e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e06:	4a05      	ldr	r2, [pc, #20]	; (8009e1c <SystemInit+0x20>)
 8009e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009e10:	bf00      	nop
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	e000ed00 	.word	0xe000ed00

08009e20 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009e26:	2300      	movs	r3, #0
 8009e28:	613b      	str	r3, [r7, #16]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	2302      	movs	r3, #2
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	2302      	movs	r3, #2
 8009e38:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009e3a:	4b34      	ldr	r3, [pc, #208]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f003 030c 	and.w	r3, r3, #12
 8009e42:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d011      	beq.n	8009e6e <SystemCoreClockUpdate+0x4e>
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d844      	bhi.n	8009eda <SystemCoreClockUpdate+0xba>
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <SystemCoreClockUpdate+0x3e>
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d004      	beq.n	8009e66 <SystemCoreClockUpdate+0x46>
 8009e5c:	e03d      	b.n	8009eda <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8009e5e:	4b2c      	ldr	r3, [pc, #176]	; (8009f10 <SystemCoreClockUpdate+0xf0>)
 8009e60:	4a2c      	ldr	r2, [pc, #176]	; (8009f14 <SystemCoreClockUpdate+0xf4>)
 8009e62:	601a      	str	r2, [r3, #0]
      break;
 8009e64:	e03d      	b.n	8009ee2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8009e66:	4b2a      	ldr	r3, [pc, #168]	; (8009f10 <SystemCoreClockUpdate+0xf0>)
 8009e68:	4a2b      	ldr	r2, [pc, #172]	; (8009f18 <SystemCoreClockUpdate+0xf8>)
 8009e6a:	601a      	str	r2, [r3, #0]
      break;
 8009e6c:	e039      	b.n	8009ee2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8009e6e:	4b27      	ldr	r3, [pc, #156]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	0d9b      	lsrs	r3, r3, #22
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e7a:	4b24      	ldr	r3, [pc, #144]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e82:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00c      	beq.n	8009ea4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009e8a:	4a23      	ldr	r2, [pc, #140]	; (8009f18 <SystemCoreClockUpdate+0xf8>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e92:	4a1e      	ldr	r2, [pc, #120]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009e94:	6852      	ldr	r2, [r2, #4]
 8009e96:	0992      	lsrs	r2, r2, #6
 8009e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	617b      	str	r3, [r7, #20]
 8009ea2:	e00b      	b.n	8009ebc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009ea4:	4a1b      	ldr	r2, [pc, #108]	; (8009f14 <SystemCoreClockUpdate+0xf4>)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eac:	4a17      	ldr	r2, [pc, #92]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009eae:	6852      	ldr	r2, [r2, #4]
 8009eb0:	0992      	lsrs	r2, r2, #6
 8009eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
 8009eba:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8009ebc:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	0c1b      	lsrs	r3, r3, #16
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed4:	4a0e      	ldr	r2, [pc, #56]	; (8009f10 <SystemCoreClockUpdate+0xf0>)
 8009ed6:	6013      	str	r3, [r2, #0]
      break;
 8009ed8:	e003      	b.n	8009ee2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8009eda:	4b0d      	ldr	r3, [pc, #52]	; (8009f10 <SystemCoreClockUpdate+0xf0>)
 8009edc:	4a0d      	ldr	r2, [pc, #52]	; (8009f14 <SystemCoreClockUpdate+0xf4>)
 8009ede:	601a      	str	r2, [r3, #0]
      break;
 8009ee0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <SystemCoreClockUpdate+0xec>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	091b      	lsrs	r3, r3, #4
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <SystemCoreClockUpdate+0xfc>)
 8009eee:	5cd3      	ldrb	r3, [r2, r3]
 8009ef0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8009ef2:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <SystemCoreClockUpdate+0xf0>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8009efc:	4a04      	ldr	r2, [pc, #16]	; (8009f10 <SystemCoreClockUpdate+0xf0>)
 8009efe:	6013      	str	r3, [r2, #0]
}
 8009f00:	bf00      	nop
 8009f02:	371c      	adds	r7, #28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	40023800 	.word	0x40023800
 8009f10:	20000024 	.word	0x20000024
 8009f14:	00f42400 	.word	0x00f42400
 8009f18:	017d7840 	.word	0x017d7840
 8009f1c:	0800f804 	.word	0x0800f804

08009f20 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a89      	ldr	r2, [pc, #548]	; (800a154 <i2c_config+0x234>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d106      	bne.n	8009f40 <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8009f32:	4b89      	ldr	r3, [pc, #548]	; (800a158 <i2c_config+0x238>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	4a88      	ldr	r2, [pc, #544]	; (800a158 <i2c_config+0x238>)
 8009f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f3e:	e016      	b.n	8009f6e <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a85      	ldr	r2, [pc, #532]	; (800a15c <i2c_config+0x23c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d106      	bne.n	8009f58 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 8009f4a:	4b83      	ldr	r3, [pc, #524]	; (800a158 <i2c_config+0x238>)
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	4a82      	ldr	r2, [pc, #520]	; (800a158 <i2c_config+0x238>)
 8009f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f54:	6413      	str	r3, [r2, #64]	; 0x40
 8009f56:	e00a      	b.n	8009f6e <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a80      	ldr	r2, [pc, #512]	; (800a160 <i2c_config+0x240>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d105      	bne.n	8009f6e <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8009f62:	4b7d      	ldr	r3, [pc, #500]	; (800a158 <i2c_config+0x238>)
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	4a7c      	ldr	r2, [pc, #496]	; (800a158 <i2c_config+0x238>)
 8009f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f6c:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f022 0201 	bic.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009f7e:	e000      	b.n	8009f82 <i2c_config+0x62>
		__NOP();
 8009f80:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1f7      	bne.n	8009f80 <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f9e:	601a      	str	r2, [r3, #0]

	__NOP();
 8009fa0:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fb0:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8009fc0:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	79db      	ldrb	r3, [r3, #7]
 8009fc6:	2b10      	cmp	r3, #16
 8009fc8:	d108      	bne.n	8009fdc <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f042 0210 	orr.w	r2, r2, #16
 8009fd8:	605a      	str	r2, [r3, #4]
 8009fda:	e018      	b.n	800a00e <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	79db      	ldrb	r3, [r3, #7]
 8009fe0:	2b19      	cmp	r3, #25
 8009fe2:	d108      	bne.n	8009ff6 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f042 0219 	orr.w	r2, r2, #25
 8009ff2:	605a      	str	r2, [r3, #4]
 8009ff4:	e00b      	b.n	800a00e <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	79db      	ldrb	r3, [r3, #7]
 8009ffa:	2b32      	cmp	r3, #50	; 0x32
 8009ffc:	d107      	bne.n	800a00e <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800a00c:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	795b      	ldrb	r3, [r3, #5]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d15c      	bne.n	800a0e0 <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	69da      	ldr	r2, [r3, #28]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a034:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	79db      	ldrb	r3, [r3, #7]
 800a03a:	2b32      	cmp	r3, #50	; 0x32
 800a03c:	d03f      	beq.n	800a0be <i2c_config+0x19e>
 800a03e:	2b32      	cmp	r3, #50	; 0x32
 800a040:	f300 80b2 	bgt.w	800a1a8 <i2c_config+0x288>
 800a044:	2b19      	cmp	r3, #25
 800a046:	d029      	beq.n	800a09c <i2c_config+0x17c>
 800a048:	2b19      	cmp	r3, #25
 800a04a:	f300 80ad 	bgt.w	800a1a8 <i2c_config+0x288>
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d002      	beq.n	800a058 <i2c_config+0x138>
 800a052:	2b10      	cmp	r3, #16
 800a054:	d011      	beq.n	800a07a <i2c_config+0x15a>


				break;
			}default:{

				break;
 800a056:	e0a7      	b.n	800a1a8 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	69da      	ldr	r2, [r3, #28]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f042 0214 	orr.w	r2, r2, #20
 800a066:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6a1a      	ldr	r2, [r3, #32]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f042 0205 	orr.w	r2, r2, #5
 800a076:	621a      	str	r2, [r3, #32]
				break;
 800a078:	e099      	b.n	800a1ae <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	69da      	ldr	r2, [r3, #28]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a088:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6a1a      	ldr	r2, [r3, #32]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f042 0211 	orr.w	r2, r2, #17
 800a098:	621a      	str	r2, [r3, #32]
				break;
 800a09a:	e088      	b.n	800a1ae <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69da      	ldr	r2, [r3, #28]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800a0aa:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 0215 	orr.w	r2, r2, #21
 800a0ba:	621a      	str	r2, [r3, #32]
				break;
 800a0bc:	e077      	b.n	800a1ae <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	69da      	ldr	r2, [r3, #28]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800a0cc:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6a1a      	ldr	r2, [r3, #32]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800a0dc:	621a      	str	r2, [r3, #32]
				break;
 800a0de:	e066      	b.n	800a1ae <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	69da      	ldr	r2, [r3, #28]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0ee:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	79db      	ldrb	r3, [r3, #7]
 800a0f4:	2b32      	cmp	r3, #50	; 0x32
 800a0f6:	d046      	beq.n	800a186 <i2c_config+0x266>
 800a0f8:	2b32      	cmp	r3, #50	; 0x32
 800a0fa:	dc57      	bgt.n	800a1ac <i2c_config+0x28c>
 800a0fc:	2b19      	cmp	r3, #25
 800a0fe:	d031      	beq.n	800a164 <i2c_config+0x244>
 800a100:	2b19      	cmp	r3, #25
 800a102:	dc53      	bgt.n	800a1ac <i2c_config+0x28c>
 800a104:	2b04      	cmp	r3, #4
 800a106:	d002      	beq.n	800a10e <i2c_config+0x1ee>
 800a108:	2b10      	cmp	r3, #16
 800a10a:	d011      	beq.n	800a130 <i2c_config+0x210>


				break;
			}default:{

				break;
 800a10c:	e04e      	b.n	800a1ac <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f042 0203 	orr.w	r2, r2, #3
 800a11c:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a1a      	ldr	r2, [r3, #32]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0202 	orr.w	r2, r2, #2
 800a12c:	621a      	str	r2, [r3, #32]
				break;
 800a12e:	e03e      	b.n	800a1ae <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	69da      	ldr	r2, [r3, #28]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 020d 	orr.w	r2, r2, #13
 800a13e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6a1a      	ldr	r2, [r3, #32]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 0206 	orr.w	r2, r2, #6
 800a14e:	621a      	str	r2, [r3, #32]
				break;
 800a150:	e02d      	b.n	800a1ae <i2c_config+0x28e>
 800a152:	bf00      	nop
 800a154:	40005400 	.word	0x40005400
 800a158:	40023800 	.word	0x40023800
 800a15c:	40005800 	.word	0x40005800
 800a160:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	69da      	ldr	r2, [r3, #28]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0215 	orr.w	r2, r2, #21
 800a172:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6a1a      	ldr	r2, [r3, #32]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f042 0208 	orr.w	r2, r2, #8
 800a182:	621a      	str	r2, [r3, #32]
				break;
 800a184:	e013      	b.n	800a1ae <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800a194:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6a1a      	ldr	r2, [r3, #32]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f042 0210 	orr.w	r2, r2, #16
 800a1a4:	621a      	str	r2, [r3, #32]
				break;
 800a1a6:	e002      	b.n	800a1ae <i2c_config+0x28e>
				break;
 800a1a8:	bf00      	nop
 800a1aa:	e002      	b.n	800a1b2 <i2c_config+0x292>
				break;
 800a1ac:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a1ae:	e000      	b.n	800a1b2 <i2c_config+0x292>
		__NOP();
 800a1b0:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	f003 0302 	and.w	r3, r3, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1f7      	bne.n	800a1b0 <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]


}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1f2:	601a      	str	r2, [r3, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7a1b      	ldrb	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a21e:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a220:	e000      	b.n	800a224 <i2c_startTransaction+0x24>
		__NOP();
 800a222:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f7      	bne.n	800a222 <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a240:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a242:	e000      	b.n	800a246 <i2c_startTransaction+0x46>
		__NOP();
 800a244:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0f7      	beq.n	800a244 <i2c_startTransaction+0x44>
	}
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	7a1b      	ldrb	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d007      	beq.n	800a282 <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a280:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a290:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a292:	e000      	b.n	800a296 <i2c_reStartTransaction+0x34>
		__NOP();
 800a294:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0f7      	beq.n	800a294 <i2c_reStartTransaction+0x32>
	}
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2c8:	601a      	str	r2, [r3, #0]
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	70fb      	strb	r3, [r7, #3]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	005a      	lsls	r2, r3, #1
 800a2ee:	78bb      	ldrb	r3, [r7, #2]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a2f8:	e000      	b.n	800a2fc <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800a2fa:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0f7      	beq.n	800a2fa <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	73fb      	strb	r3, [r7, #15]

}
 800a31a:	bf00      	nop
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	78fa      	ldrb	r2, [r7, #3]
 800a338:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a33a:	e000      	b.n	800a33e <i2c_sendMemoryAddress+0x18>
		__NOP();
 800a33c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0f7      	beq.n	800a33c <i2c_sendMemoryAddress+0x16>
	}
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	78fa      	ldrb	r2, [r7, #3]
 800a36c:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a36e:	e000      	b.n	800a372 <i2c_sendDataByte+0x18>
		__NOP();
 800a370:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0f7      	beq.n	800a370 <i2c_sendDataByte+0x16>
	}
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a396:	e000      	b.n	800a39a <i2c_readDataByte+0xc>
		__NOP();
 800a398:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0f7      	beq.n	800a398 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	799b      	ldrb	r3, [r3, #6]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <__errno>:
 800a3c4:	4b01      	ldr	r3, [pc, #4]	; (800a3cc <__errno+0x8>)
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000028 	.word	0x20000028

0800a3d0 <__libc_init_array>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	4d0d      	ldr	r5, [pc, #52]	; (800a408 <__libc_init_array+0x38>)
 800a3d4:	4c0d      	ldr	r4, [pc, #52]	; (800a40c <__libc_init_array+0x3c>)
 800a3d6:	1b64      	subs	r4, r4, r5
 800a3d8:	10a4      	asrs	r4, r4, #2
 800a3da:	2600      	movs	r6, #0
 800a3dc:	42a6      	cmp	r6, r4
 800a3de:	d109      	bne.n	800a3f4 <__libc_init_array+0x24>
 800a3e0:	4d0b      	ldr	r5, [pc, #44]	; (800a410 <__libc_init_array+0x40>)
 800a3e2:	4c0c      	ldr	r4, [pc, #48]	; (800a414 <__libc_init_array+0x44>)
 800a3e4:	f005 f8f8 	bl	800f5d8 <_init>
 800a3e8:	1b64      	subs	r4, r4, r5
 800a3ea:	10a4      	asrs	r4, r4, #2
 800a3ec:	2600      	movs	r6, #0
 800a3ee:	42a6      	cmp	r6, r4
 800a3f0:	d105      	bne.n	800a3fe <__libc_init_array+0x2e>
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f8:	4798      	blx	r3
 800a3fa:	3601      	adds	r6, #1
 800a3fc:	e7ee      	b.n	800a3dc <__libc_init_array+0xc>
 800a3fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a402:	4798      	blx	r3
 800a404:	3601      	adds	r6, #1
 800a406:	e7f2      	b.n	800a3ee <__libc_init_array+0x1e>
 800a408:	0800fe68 	.word	0x0800fe68
 800a40c:	0800fe68 	.word	0x0800fe68
 800a410:	0800fe68 	.word	0x0800fe68
 800a414:	0800fe6c 	.word	0x0800fe6c

0800a418 <malloc>:
 800a418:	4b02      	ldr	r3, [pc, #8]	; (800a424 <malloc+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f000 b885 	b.w	800a52c <_malloc_r>
 800a422:	bf00      	nop
 800a424:	20000028 	.word	0x20000028

0800a428 <memcpy>:
 800a428:	440a      	add	r2, r1
 800a42a:	4291      	cmp	r1, r2
 800a42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a430:	d100      	bne.n	800a434 <memcpy+0xc>
 800a432:	4770      	bx	lr
 800a434:	b510      	push	{r4, lr}
 800a436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a43e:	4291      	cmp	r1, r2
 800a440:	d1f9      	bne.n	800a436 <memcpy+0xe>
 800a442:	bd10      	pop	{r4, pc}

0800a444 <memset>:
 800a444:	4402      	add	r2, r0
 800a446:	4603      	mov	r3, r0
 800a448:	4293      	cmp	r3, r2
 800a44a:	d100      	bne.n	800a44e <memset+0xa>
 800a44c:	4770      	bx	lr
 800a44e:	f803 1b01 	strb.w	r1, [r3], #1
 800a452:	e7f9      	b.n	800a448 <memset+0x4>

0800a454 <_free_r>:
 800a454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a456:	2900      	cmp	r1, #0
 800a458:	d044      	beq.n	800a4e4 <_free_r+0x90>
 800a45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a45e:	9001      	str	r0, [sp, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f1a1 0404 	sub.w	r4, r1, #4
 800a466:	bfb8      	it	lt
 800a468:	18e4      	addlt	r4, r4, r3
 800a46a:	f001 fbeb 	bl	800bc44 <__malloc_lock>
 800a46e:	4a1e      	ldr	r2, [pc, #120]	; (800a4e8 <_free_r+0x94>)
 800a470:	9801      	ldr	r0, [sp, #4]
 800a472:	6813      	ldr	r3, [r2, #0]
 800a474:	b933      	cbnz	r3, 800a484 <_free_r+0x30>
 800a476:	6063      	str	r3, [r4, #4]
 800a478:	6014      	str	r4, [r2, #0]
 800a47a:	b003      	add	sp, #12
 800a47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a480:	f001 bbe6 	b.w	800bc50 <__malloc_unlock>
 800a484:	42a3      	cmp	r3, r4
 800a486:	d908      	bls.n	800a49a <_free_r+0x46>
 800a488:	6825      	ldr	r5, [r4, #0]
 800a48a:	1961      	adds	r1, r4, r5
 800a48c:	428b      	cmp	r3, r1
 800a48e:	bf01      	itttt	eq
 800a490:	6819      	ldreq	r1, [r3, #0]
 800a492:	685b      	ldreq	r3, [r3, #4]
 800a494:	1949      	addeq	r1, r1, r5
 800a496:	6021      	streq	r1, [r4, #0]
 800a498:	e7ed      	b.n	800a476 <_free_r+0x22>
 800a49a:	461a      	mov	r2, r3
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	b10b      	cbz	r3, 800a4a4 <_free_r+0x50>
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	d9fa      	bls.n	800a49a <_free_r+0x46>
 800a4a4:	6811      	ldr	r1, [r2, #0]
 800a4a6:	1855      	adds	r5, r2, r1
 800a4a8:	42a5      	cmp	r5, r4
 800a4aa:	d10b      	bne.n	800a4c4 <_free_r+0x70>
 800a4ac:	6824      	ldr	r4, [r4, #0]
 800a4ae:	4421      	add	r1, r4
 800a4b0:	1854      	adds	r4, r2, r1
 800a4b2:	42a3      	cmp	r3, r4
 800a4b4:	6011      	str	r1, [r2, #0]
 800a4b6:	d1e0      	bne.n	800a47a <_free_r+0x26>
 800a4b8:	681c      	ldr	r4, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	6053      	str	r3, [r2, #4]
 800a4be:	4421      	add	r1, r4
 800a4c0:	6011      	str	r1, [r2, #0]
 800a4c2:	e7da      	b.n	800a47a <_free_r+0x26>
 800a4c4:	d902      	bls.n	800a4cc <_free_r+0x78>
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	6003      	str	r3, [r0, #0]
 800a4ca:	e7d6      	b.n	800a47a <_free_r+0x26>
 800a4cc:	6825      	ldr	r5, [r4, #0]
 800a4ce:	1961      	adds	r1, r4, r5
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	bf04      	itt	eq
 800a4d4:	6819      	ldreq	r1, [r3, #0]
 800a4d6:	685b      	ldreq	r3, [r3, #4]
 800a4d8:	6063      	str	r3, [r4, #4]
 800a4da:	bf04      	itt	eq
 800a4dc:	1949      	addeq	r1, r1, r5
 800a4de:	6021      	streq	r1, [r4, #0]
 800a4e0:	6054      	str	r4, [r2, #4]
 800a4e2:	e7ca      	b.n	800a47a <_free_r+0x26>
 800a4e4:	b003      	add	sp, #12
 800a4e6:	bd30      	pop	{r4, r5, pc}
 800a4e8:	200133cc 	.word	0x200133cc

0800a4ec <sbrk_aligned>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4e0e      	ldr	r6, [pc, #56]	; (800a528 <sbrk_aligned+0x3c>)
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	6831      	ldr	r1, [r6, #0]
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	b911      	cbnz	r1, 800a4fe <sbrk_aligned+0x12>
 800a4f8:	f000 fcf6 	bl	800aee8 <_sbrk_r>
 800a4fc:	6030      	str	r0, [r6, #0]
 800a4fe:	4621      	mov	r1, r4
 800a500:	4628      	mov	r0, r5
 800a502:	f000 fcf1 	bl	800aee8 <_sbrk_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d00a      	beq.n	800a520 <sbrk_aligned+0x34>
 800a50a:	1cc4      	adds	r4, r0, #3
 800a50c:	f024 0403 	bic.w	r4, r4, #3
 800a510:	42a0      	cmp	r0, r4
 800a512:	d007      	beq.n	800a524 <sbrk_aligned+0x38>
 800a514:	1a21      	subs	r1, r4, r0
 800a516:	4628      	mov	r0, r5
 800a518:	f000 fce6 	bl	800aee8 <_sbrk_r>
 800a51c:	3001      	adds	r0, #1
 800a51e:	d101      	bne.n	800a524 <sbrk_aligned+0x38>
 800a520:	f04f 34ff 	mov.w	r4, #4294967295
 800a524:	4620      	mov	r0, r4
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	200133d0 	.word	0x200133d0

0800a52c <_malloc_r>:
 800a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a530:	1ccd      	adds	r5, r1, #3
 800a532:	f025 0503 	bic.w	r5, r5, #3
 800a536:	3508      	adds	r5, #8
 800a538:	2d0c      	cmp	r5, #12
 800a53a:	bf38      	it	cc
 800a53c:	250c      	movcc	r5, #12
 800a53e:	2d00      	cmp	r5, #0
 800a540:	4607      	mov	r7, r0
 800a542:	db01      	blt.n	800a548 <_malloc_r+0x1c>
 800a544:	42a9      	cmp	r1, r5
 800a546:	d905      	bls.n	800a554 <_malloc_r+0x28>
 800a548:	230c      	movs	r3, #12
 800a54a:	603b      	str	r3, [r7, #0]
 800a54c:	2600      	movs	r6, #0
 800a54e:	4630      	mov	r0, r6
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	4e2e      	ldr	r6, [pc, #184]	; (800a610 <_malloc_r+0xe4>)
 800a556:	f001 fb75 	bl	800bc44 <__malloc_lock>
 800a55a:	6833      	ldr	r3, [r6, #0]
 800a55c:	461c      	mov	r4, r3
 800a55e:	bb34      	cbnz	r4, 800a5ae <_malloc_r+0x82>
 800a560:	4629      	mov	r1, r5
 800a562:	4638      	mov	r0, r7
 800a564:	f7ff ffc2 	bl	800a4ec <sbrk_aligned>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	4604      	mov	r4, r0
 800a56c:	d14d      	bne.n	800a60a <_malloc_r+0xde>
 800a56e:	6834      	ldr	r4, [r6, #0]
 800a570:	4626      	mov	r6, r4
 800a572:	2e00      	cmp	r6, #0
 800a574:	d140      	bne.n	800a5f8 <_malloc_r+0xcc>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	4631      	mov	r1, r6
 800a57a:	4638      	mov	r0, r7
 800a57c:	eb04 0803 	add.w	r8, r4, r3
 800a580:	f000 fcb2 	bl	800aee8 <_sbrk_r>
 800a584:	4580      	cmp	r8, r0
 800a586:	d13a      	bne.n	800a5fe <_malloc_r+0xd2>
 800a588:	6821      	ldr	r1, [r4, #0]
 800a58a:	3503      	adds	r5, #3
 800a58c:	1a6d      	subs	r5, r5, r1
 800a58e:	f025 0503 	bic.w	r5, r5, #3
 800a592:	3508      	adds	r5, #8
 800a594:	2d0c      	cmp	r5, #12
 800a596:	bf38      	it	cc
 800a598:	250c      	movcc	r5, #12
 800a59a:	4629      	mov	r1, r5
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff ffa5 	bl	800a4ec <sbrk_aligned>
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d02b      	beq.n	800a5fe <_malloc_r+0xd2>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	442b      	add	r3, r5
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	e00e      	b.n	800a5cc <_malloc_r+0xa0>
 800a5ae:	6822      	ldr	r2, [r4, #0]
 800a5b0:	1b52      	subs	r2, r2, r5
 800a5b2:	d41e      	bmi.n	800a5f2 <_malloc_r+0xc6>
 800a5b4:	2a0b      	cmp	r2, #11
 800a5b6:	d916      	bls.n	800a5e6 <_malloc_r+0xba>
 800a5b8:	1961      	adds	r1, r4, r5
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	6025      	str	r5, [r4, #0]
 800a5be:	bf18      	it	ne
 800a5c0:	6059      	strne	r1, [r3, #4]
 800a5c2:	6863      	ldr	r3, [r4, #4]
 800a5c4:	bf08      	it	eq
 800a5c6:	6031      	streq	r1, [r6, #0]
 800a5c8:	5162      	str	r2, [r4, r5]
 800a5ca:	604b      	str	r3, [r1, #4]
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	f104 060b 	add.w	r6, r4, #11
 800a5d2:	f001 fb3d 	bl	800bc50 <__malloc_unlock>
 800a5d6:	f026 0607 	bic.w	r6, r6, #7
 800a5da:	1d23      	adds	r3, r4, #4
 800a5dc:	1af2      	subs	r2, r6, r3
 800a5de:	d0b6      	beq.n	800a54e <_malloc_r+0x22>
 800a5e0:	1b9b      	subs	r3, r3, r6
 800a5e2:	50a3      	str	r3, [r4, r2]
 800a5e4:	e7b3      	b.n	800a54e <_malloc_r+0x22>
 800a5e6:	6862      	ldr	r2, [r4, #4]
 800a5e8:	42a3      	cmp	r3, r4
 800a5ea:	bf0c      	ite	eq
 800a5ec:	6032      	streq	r2, [r6, #0]
 800a5ee:	605a      	strne	r2, [r3, #4]
 800a5f0:	e7ec      	b.n	800a5cc <_malloc_r+0xa0>
 800a5f2:	4623      	mov	r3, r4
 800a5f4:	6864      	ldr	r4, [r4, #4]
 800a5f6:	e7b2      	b.n	800a55e <_malloc_r+0x32>
 800a5f8:	4634      	mov	r4, r6
 800a5fa:	6876      	ldr	r6, [r6, #4]
 800a5fc:	e7b9      	b.n	800a572 <_malloc_r+0x46>
 800a5fe:	230c      	movs	r3, #12
 800a600:	603b      	str	r3, [r7, #0]
 800a602:	4638      	mov	r0, r7
 800a604:	f001 fb24 	bl	800bc50 <__malloc_unlock>
 800a608:	e7a1      	b.n	800a54e <_malloc_r+0x22>
 800a60a:	6025      	str	r5, [r4, #0]
 800a60c:	e7de      	b.n	800a5cc <_malloc_r+0xa0>
 800a60e:	bf00      	nop
 800a610:	200133cc 	.word	0x200133cc

0800a614 <__cvt>:
 800a614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	ec55 4b10 	vmov	r4, r5, d0
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	460e      	mov	r6, r1
 800a620:	4619      	mov	r1, r3
 800a622:	462b      	mov	r3, r5
 800a624:	bfbb      	ittet	lt
 800a626:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a62a:	461d      	movlt	r5, r3
 800a62c:	2300      	movge	r3, #0
 800a62e:	232d      	movlt	r3, #45	; 0x2d
 800a630:	700b      	strb	r3, [r1, #0]
 800a632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a634:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a638:	4691      	mov	r9, r2
 800a63a:	f023 0820 	bic.w	r8, r3, #32
 800a63e:	bfbc      	itt	lt
 800a640:	4622      	movlt	r2, r4
 800a642:	4614      	movlt	r4, r2
 800a644:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a648:	d005      	beq.n	800a656 <__cvt+0x42>
 800a64a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a64e:	d100      	bne.n	800a652 <__cvt+0x3e>
 800a650:	3601      	adds	r6, #1
 800a652:	2102      	movs	r1, #2
 800a654:	e000      	b.n	800a658 <__cvt+0x44>
 800a656:	2103      	movs	r1, #3
 800a658:	ab03      	add	r3, sp, #12
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	ab02      	add	r3, sp, #8
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	ec45 4b10 	vmov	d0, r4, r5
 800a664:	4653      	mov	r3, sl
 800a666:	4632      	mov	r2, r6
 800a668:	f000 fcfa 	bl	800b060 <_dtoa_r>
 800a66c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a670:	4607      	mov	r7, r0
 800a672:	d102      	bne.n	800a67a <__cvt+0x66>
 800a674:	f019 0f01 	tst.w	r9, #1
 800a678:	d022      	beq.n	800a6c0 <__cvt+0xac>
 800a67a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a67e:	eb07 0906 	add.w	r9, r7, r6
 800a682:	d110      	bne.n	800a6a6 <__cvt+0x92>
 800a684:	783b      	ldrb	r3, [r7, #0]
 800a686:	2b30      	cmp	r3, #48	; 0x30
 800a688:	d10a      	bne.n	800a6a0 <__cvt+0x8c>
 800a68a:	2200      	movs	r2, #0
 800a68c:	2300      	movs	r3, #0
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f6 fa31 	bl	8000af8 <__aeabi_dcmpeq>
 800a696:	b918      	cbnz	r0, 800a6a0 <__cvt+0x8c>
 800a698:	f1c6 0601 	rsb	r6, r6, #1
 800a69c:	f8ca 6000 	str.w	r6, [sl]
 800a6a0:	f8da 3000 	ldr.w	r3, [sl]
 800a6a4:	4499      	add	r9, r3
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f7f6 fa23 	bl	8000af8 <__aeabi_dcmpeq>
 800a6b2:	b108      	cbz	r0, 800a6b8 <__cvt+0xa4>
 800a6b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6b8:	2230      	movs	r2, #48	; 0x30
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	454b      	cmp	r3, r9
 800a6be:	d307      	bcc.n	800a6d0 <__cvt+0xbc>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6c4:	1bdb      	subs	r3, r3, r7
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	b004      	add	sp, #16
 800a6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d0:	1c59      	adds	r1, r3, #1
 800a6d2:	9103      	str	r1, [sp, #12]
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	e7f0      	b.n	800a6ba <__cvt+0xa6>

0800a6d8 <__exponent>:
 800a6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	bfb8      	it	lt
 800a6e0:	4249      	neglt	r1, r1
 800a6e2:	f803 2b02 	strb.w	r2, [r3], #2
 800a6e6:	bfb4      	ite	lt
 800a6e8:	222d      	movlt	r2, #45	; 0x2d
 800a6ea:	222b      	movge	r2, #43	; 0x2b
 800a6ec:	2909      	cmp	r1, #9
 800a6ee:	7042      	strb	r2, [r0, #1]
 800a6f0:	dd2a      	ble.n	800a748 <__exponent+0x70>
 800a6f2:	f10d 0407 	add.w	r4, sp, #7
 800a6f6:	46a4      	mov	ip, r4
 800a6f8:	270a      	movs	r7, #10
 800a6fa:	46a6      	mov	lr, r4
 800a6fc:	460a      	mov	r2, r1
 800a6fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800a702:	fb07 1516 	mls	r5, r7, r6, r1
 800a706:	3530      	adds	r5, #48	; 0x30
 800a708:	2a63      	cmp	r2, #99	; 0x63
 800a70a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a70e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a712:	4631      	mov	r1, r6
 800a714:	dcf1      	bgt.n	800a6fa <__exponent+0x22>
 800a716:	3130      	adds	r1, #48	; 0x30
 800a718:	f1ae 0502 	sub.w	r5, lr, #2
 800a71c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a720:	1c44      	adds	r4, r0, #1
 800a722:	4629      	mov	r1, r5
 800a724:	4561      	cmp	r1, ip
 800a726:	d30a      	bcc.n	800a73e <__exponent+0x66>
 800a728:	f10d 0209 	add.w	r2, sp, #9
 800a72c:	eba2 020e 	sub.w	r2, r2, lr
 800a730:	4565      	cmp	r5, ip
 800a732:	bf88      	it	hi
 800a734:	2200      	movhi	r2, #0
 800a736:	4413      	add	r3, r2
 800a738:	1a18      	subs	r0, r3, r0
 800a73a:	b003      	add	sp, #12
 800a73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a742:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a746:	e7ed      	b.n	800a724 <__exponent+0x4c>
 800a748:	2330      	movs	r3, #48	; 0x30
 800a74a:	3130      	adds	r1, #48	; 0x30
 800a74c:	7083      	strb	r3, [r0, #2]
 800a74e:	70c1      	strb	r1, [r0, #3]
 800a750:	1d03      	adds	r3, r0, #4
 800a752:	e7f1      	b.n	800a738 <__exponent+0x60>

0800a754 <_printf_float>:
 800a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	ed2d 8b02 	vpush	{d8}
 800a75c:	b08d      	sub	sp, #52	; 0x34
 800a75e:	460c      	mov	r4, r1
 800a760:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a764:	4616      	mov	r6, r2
 800a766:	461f      	mov	r7, r3
 800a768:	4605      	mov	r5, r0
 800a76a:	f001 fa67 	bl	800bc3c <_localeconv_r>
 800a76e:	f8d0 a000 	ldr.w	sl, [r0]
 800a772:	4650      	mov	r0, sl
 800a774:	f7f5 fd3e 	bl	80001f4 <strlen>
 800a778:	2300      	movs	r3, #0
 800a77a:	930a      	str	r3, [sp, #40]	; 0x28
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	9305      	str	r3, [sp, #20]
 800a780:	f8d8 3000 	ldr.w	r3, [r8]
 800a784:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a788:	3307      	adds	r3, #7
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	f103 0208 	add.w	r2, r3, #8
 800a792:	f8c8 2000 	str.w	r2, [r8]
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a79e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7ac:	ee08 0a10 	vmov	s16, r0
 800a7b0:	4b9f      	ldr	r3, [pc, #636]	; (800aa30 <_printf_float+0x2dc>)
 800a7b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ba:	f7f6 f9cf 	bl	8000b5c <__aeabi_dcmpun>
 800a7be:	bb88      	cbnz	r0, 800a824 <_printf_float+0xd0>
 800a7c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7c4:	4b9a      	ldr	r3, [pc, #616]	; (800aa30 <_printf_float+0x2dc>)
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	f7f6 f9a9 	bl	8000b20 <__aeabi_dcmple>
 800a7ce:	bb48      	cbnz	r0, 800a824 <_printf_float+0xd0>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	f7f6 f998 	bl	8000b0c <__aeabi_dcmplt>
 800a7dc:	b110      	cbz	r0, 800a7e4 <_printf_float+0x90>
 800a7de:	232d      	movs	r3, #45	; 0x2d
 800a7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e4:	4b93      	ldr	r3, [pc, #588]	; (800aa34 <_printf_float+0x2e0>)
 800a7e6:	4894      	ldr	r0, [pc, #592]	; (800aa38 <_printf_float+0x2e4>)
 800a7e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7ec:	bf94      	ite	ls
 800a7ee:	4698      	movls	r8, r3
 800a7f0:	4680      	movhi	r8, r0
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	6123      	str	r3, [r4, #16]
 800a7f6:	9b05      	ldr	r3, [sp, #20]
 800a7f8:	f023 0204 	bic.w	r2, r3, #4
 800a7fc:	6022      	str	r2, [r4, #0]
 800a7fe:	f04f 0900 	mov.w	r9, #0
 800a802:	9700      	str	r7, [sp, #0]
 800a804:	4633      	mov	r3, r6
 800a806:	aa0b      	add	r2, sp, #44	; 0x2c
 800a808:	4621      	mov	r1, r4
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 f9d8 	bl	800abc0 <_printf_common>
 800a810:	3001      	adds	r0, #1
 800a812:	f040 8090 	bne.w	800a936 <_printf_float+0x1e2>
 800a816:	f04f 30ff 	mov.w	r0, #4294967295
 800a81a:	b00d      	add	sp, #52	; 0x34
 800a81c:	ecbd 8b02 	vpop	{d8}
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	4642      	mov	r2, r8
 800a826:	464b      	mov	r3, r9
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f6 f996 	bl	8000b5c <__aeabi_dcmpun>
 800a830:	b140      	cbz	r0, 800a844 <_printf_float+0xf0>
 800a832:	464b      	mov	r3, r9
 800a834:	2b00      	cmp	r3, #0
 800a836:	bfbc      	itt	lt
 800a838:	232d      	movlt	r3, #45	; 0x2d
 800a83a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a83e:	487f      	ldr	r0, [pc, #508]	; (800aa3c <_printf_float+0x2e8>)
 800a840:	4b7f      	ldr	r3, [pc, #508]	; (800aa40 <_printf_float+0x2ec>)
 800a842:	e7d1      	b.n	800a7e8 <_printf_float+0x94>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a84a:	9206      	str	r2, [sp, #24]
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	d13f      	bne.n	800a8d0 <_printf_float+0x17c>
 800a850:	2306      	movs	r3, #6
 800a852:	6063      	str	r3, [r4, #4]
 800a854:	9b05      	ldr	r3, [sp, #20]
 800a856:	6861      	ldr	r1, [r4, #4]
 800a858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a85c:	2300      	movs	r3, #0
 800a85e:	9303      	str	r3, [sp, #12]
 800a860:	ab0a      	add	r3, sp, #40	; 0x28
 800a862:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a866:	ab09      	add	r3, sp, #36	; 0x24
 800a868:	ec49 8b10 	vmov	d0, r8, r9
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	6022      	str	r2, [r4, #0]
 800a870:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a874:	4628      	mov	r0, r5
 800a876:	f7ff fecd 	bl	800a614 <__cvt>
 800a87a:	9b06      	ldr	r3, [sp, #24]
 800a87c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a87e:	2b47      	cmp	r3, #71	; 0x47
 800a880:	4680      	mov	r8, r0
 800a882:	d108      	bne.n	800a896 <_printf_float+0x142>
 800a884:	1cc8      	adds	r0, r1, #3
 800a886:	db02      	blt.n	800a88e <_printf_float+0x13a>
 800a888:	6863      	ldr	r3, [r4, #4]
 800a88a:	4299      	cmp	r1, r3
 800a88c:	dd41      	ble.n	800a912 <_printf_float+0x1be>
 800a88e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a892:	fa5f fb8b 	uxtb.w	fp, fp
 800a896:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a89a:	d820      	bhi.n	800a8de <_printf_float+0x18a>
 800a89c:	3901      	subs	r1, #1
 800a89e:	465a      	mov	r2, fp
 800a8a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a8a6:	f7ff ff17 	bl	800a6d8 <__exponent>
 800a8aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ac:	1813      	adds	r3, r2, r0
 800a8ae:	2a01      	cmp	r2, #1
 800a8b0:	4681      	mov	r9, r0
 800a8b2:	6123      	str	r3, [r4, #16]
 800a8b4:	dc02      	bgt.n	800a8bc <_printf_float+0x168>
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	07d2      	lsls	r2, r2, #31
 800a8ba:	d501      	bpl.n	800a8c0 <_printf_float+0x16c>
 800a8bc:	3301      	adds	r3, #1
 800a8be:	6123      	str	r3, [r4, #16]
 800a8c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d09c      	beq.n	800a802 <_printf_float+0xae>
 800a8c8:	232d      	movs	r3, #45	; 0x2d
 800a8ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ce:	e798      	b.n	800a802 <_printf_float+0xae>
 800a8d0:	9a06      	ldr	r2, [sp, #24]
 800a8d2:	2a47      	cmp	r2, #71	; 0x47
 800a8d4:	d1be      	bne.n	800a854 <_printf_float+0x100>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1bc      	bne.n	800a854 <_printf_float+0x100>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e7b9      	b.n	800a852 <_printf_float+0xfe>
 800a8de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8e2:	d118      	bne.n	800a916 <_printf_float+0x1c2>
 800a8e4:	2900      	cmp	r1, #0
 800a8e6:	6863      	ldr	r3, [r4, #4]
 800a8e8:	dd0b      	ble.n	800a902 <_printf_float+0x1ae>
 800a8ea:	6121      	str	r1, [r4, #16]
 800a8ec:	b913      	cbnz	r3, 800a8f4 <_printf_float+0x1a0>
 800a8ee:	6822      	ldr	r2, [r4, #0]
 800a8f0:	07d0      	lsls	r0, r2, #31
 800a8f2:	d502      	bpl.n	800a8fa <_printf_float+0x1a6>
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	440b      	add	r3, r1
 800a8f8:	6123      	str	r3, [r4, #16]
 800a8fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a8fc:	f04f 0900 	mov.w	r9, #0
 800a900:	e7de      	b.n	800a8c0 <_printf_float+0x16c>
 800a902:	b913      	cbnz	r3, 800a90a <_printf_float+0x1b6>
 800a904:	6822      	ldr	r2, [r4, #0]
 800a906:	07d2      	lsls	r2, r2, #31
 800a908:	d501      	bpl.n	800a90e <_printf_float+0x1ba>
 800a90a:	3302      	adds	r3, #2
 800a90c:	e7f4      	b.n	800a8f8 <_printf_float+0x1a4>
 800a90e:	2301      	movs	r3, #1
 800a910:	e7f2      	b.n	800a8f8 <_printf_float+0x1a4>
 800a912:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a918:	4299      	cmp	r1, r3
 800a91a:	db05      	blt.n	800a928 <_printf_float+0x1d4>
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	6121      	str	r1, [r4, #16]
 800a920:	07d8      	lsls	r0, r3, #31
 800a922:	d5ea      	bpl.n	800a8fa <_printf_float+0x1a6>
 800a924:	1c4b      	adds	r3, r1, #1
 800a926:	e7e7      	b.n	800a8f8 <_printf_float+0x1a4>
 800a928:	2900      	cmp	r1, #0
 800a92a:	bfd4      	ite	le
 800a92c:	f1c1 0202 	rsble	r2, r1, #2
 800a930:	2201      	movgt	r2, #1
 800a932:	4413      	add	r3, r2
 800a934:	e7e0      	b.n	800a8f8 <_printf_float+0x1a4>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	055a      	lsls	r2, r3, #21
 800a93a:	d407      	bmi.n	800a94c <_printf_float+0x1f8>
 800a93c:	6923      	ldr	r3, [r4, #16]
 800a93e:	4642      	mov	r2, r8
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	d12c      	bne.n	800a9a4 <_printf_float+0x250>
 800a94a:	e764      	b.n	800a816 <_printf_float+0xc2>
 800a94c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a950:	f240 80e0 	bls.w	800ab14 <_printf_float+0x3c0>
 800a954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	f7f6 f8cc 	bl	8000af8 <__aeabi_dcmpeq>
 800a960:	2800      	cmp	r0, #0
 800a962:	d034      	beq.n	800a9ce <_printf_float+0x27a>
 800a964:	4a37      	ldr	r2, [pc, #220]	; (800aa44 <_printf_float+0x2f0>)
 800a966:	2301      	movs	r3, #1
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	f43f af51 	beq.w	800a816 <_printf_float+0xc2>
 800a974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a978:	429a      	cmp	r2, r3
 800a97a:	db02      	blt.n	800a982 <_printf_float+0x22e>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	07d8      	lsls	r0, r3, #31
 800a980:	d510      	bpl.n	800a9a4 <_printf_float+0x250>
 800a982:	ee18 3a10 	vmov	r3, s16
 800a986:	4652      	mov	r2, sl
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	f43f af41 	beq.w	800a816 <_printf_float+0xc2>
 800a994:	f04f 0800 	mov.w	r8, #0
 800a998:	f104 091a 	add.w	r9, r4, #26
 800a99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	4543      	cmp	r3, r8
 800a9a2:	dc09      	bgt.n	800a9b8 <_printf_float+0x264>
 800a9a4:	6823      	ldr	r3, [r4, #0]
 800a9a6:	079b      	lsls	r3, r3, #30
 800a9a8:	f100 8105 	bmi.w	800abb6 <_printf_float+0x462>
 800a9ac:	68e0      	ldr	r0, [r4, #12]
 800a9ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b0:	4298      	cmp	r0, r3
 800a9b2:	bfb8      	it	lt
 800a9b4:	4618      	movlt	r0, r3
 800a9b6:	e730      	b.n	800a81a <_printf_float+0xc6>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	464a      	mov	r2, r9
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4628      	mov	r0, r5
 800a9c0:	47b8      	blx	r7
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	f43f af27 	beq.w	800a816 <_printf_float+0xc2>
 800a9c8:	f108 0801 	add.w	r8, r8, #1
 800a9cc:	e7e6      	b.n	800a99c <_printf_float+0x248>
 800a9ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dc39      	bgt.n	800aa48 <_printf_float+0x2f4>
 800a9d4:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <_printf_float+0x2f0>)
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f af19 	beq.w	800a816 <_printf_float+0xc2>
 800a9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	d102      	bne.n	800a9f2 <_printf_float+0x29e>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	07d9      	lsls	r1, r3, #31
 800a9f0:	d5d8      	bpl.n	800a9a4 <_printf_float+0x250>
 800a9f2:	ee18 3a10 	vmov	r3, s16
 800a9f6:	4652      	mov	r2, sl
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b8      	blx	r7
 800a9fe:	3001      	adds	r0, #1
 800aa00:	f43f af09 	beq.w	800a816 <_printf_float+0xc2>
 800aa04:	f04f 0900 	mov.w	r9, #0
 800aa08:	f104 0a1a 	add.w	sl, r4, #26
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	425b      	negs	r3, r3
 800aa10:	454b      	cmp	r3, r9
 800aa12:	dc01      	bgt.n	800aa18 <_printf_float+0x2c4>
 800aa14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa16:	e792      	b.n	800a93e <_printf_float+0x1ea>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4628      	mov	r0, r5
 800aa20:	47b8      	blx	r7
 800aa22:	3001      	adds	r0, #1
 800aa24:	f43f aef7 	beq.w	800a816 <_printf_float+0xc2>
 800aa28:	f109 0901 	add.w	r9, r9, #1
 800aa2c:	e7ee      	b.n	800aa0c <_printf_float+0x2b8>
 800aa2e:	bf00      	nop
 800aa30:	7fefffff 	.word	0x7fefffff
 800aa34:	0800f818 	.word	0x0800f818
 800aa38:	0800f81c 	.word	0x0800f81c
 800aa3c:	0800f824 	.word	0x0800f824
 800aa40:	0800f820 	.word	0x0800f820
 800aa44:	0800f828 	.word	0x0800f828
 800aa48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	bfa8      	it	ge
 800aa50:	461a      	movge	r2, r3
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	4691      	mov	r9, r2
 800aa56:	dc37      	bgt.n	800aac8 <_printf_float+0x374>
 800aa58:	f04f 0b00 	mov.w	fp, #0
 800aa5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa60:	f104 021a 	add.w	r2, r4, #26
 800aa64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	eba3 0309 	sub.w	r3, r3, r9
 800aa6c:	455b      	cmp	r3, fp
 800aa6e:	dc33      	bgt.n	800aad8 <_printf_float+0x384>
 800aa70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa74:	429a      	cmp	r2, r3
 800aa76:	db3b      	blt.n	800aaf0 <_printf_float+0x39c>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	07da      	lsls	r2, r3, #31
 800aa7c:	d438      	bmi.n	800aaf0 <_printf_float+0x39c>
 800aa7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa80:	9a05      	ldr	r2, [sp, #20]
 800aa82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa84:	1a9a      	subs	r2, r3, r2
 800aa86:	eba3 0901 	sub.w	r9, r3, r1
 800aa8a:	4591      	cmp	r9, r2
 800aa8c:	bfa8      	it	ge
 800aa8e:	4691      	movge	r9, r2
 800aa90:	f1b9 0f00 	cmp.w	r9, #0
 800aa94:	dc35      	bgt.n	800ab02 <_printf_float+0x3ae>
 800aa96:	f04f 0800 	mov.w	r8, #0
 800aa9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa9e:	f104 0a1a 	add.w	sl, r4, #26
 800aaa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaa6:	1a9b      	subs	r3, r3, r2
 800aaa8:	eba3 0309 	sub.w	r3, r3, r9
 800aaac:	4543      	cmp	r3, r8
 800aaae:	f77f af79 	ble.w	800a9a4 <_printf_float+0x250>
 800aab2:	2301      	movs	r3, #1
 800aab4:	4652      	mov	r2, sl
 800aab6:	4631      	mov	r1, r6
 800aab8:	4628      	mov	r0, r5
 800aaba:	47b8      	blx	r7
 800aabc:	3001      	adds	r0, #1
 800aabe:	f43f aeaa 	beq.w	800a816 <_printf_float+0xc2>
 800aac2:	f108 0801 	add.w	r8, r8, #1
 800aac6:	e7ec      	b.n	800aaa2 <_printf_float+0x34e>
 800aac8:	4613      	mov	r3, r2
 800aaca:	4631      	mov	r1, r6
 800aacc:	4642      	mov	r2, r8
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	d1c0      	bne.n	800aa58 <_printf_float+0x304>
 800aad6:	e69e      	b.n	800a816 <_printf_float+0xc2>
 800aad8:	2301      	movs	r3, #1
 800aada:	4631      	mov	r1, r6
 800aadc:	4628      	mov	r0, r5
 800aade:	9205      	str	r2, [sp, #20]
 800aae0:	47b8      	blx	r7
 800aae2:	3001      	adds	r0, #1
 800aae4:	f43f ae97 	beq.w	800a816 <_printf_float+0xc2>
 800aae8:	9a05      	ldr	r2, [sp, #20]
 800aaea:	f10b 0b01 	add.w	fp, fp, #1
 800aaee:	e7b9      	b.n	800aa64 <_printf_float+0x310>
 800aaf0:	ee18 3a10 	vmov	r3, s16
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	4628      	mov	r0, r5
 800aafa:	47b8      	blx	r7
 800aafc:	3001      	adds	r0, #1
 800aafe:	d1be      	bne.n	800aa7e <_printf_float+0x32a>
 800ab00:	e689      	b.n	800a816 <_printf_float+0xc2>
 800ab02:	9a05      	ldr	r2, [sp, #20]
 800ab04:	464b      	mov	r3, r9
 800ab06:	4442      	add	r2, r8
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	47b8      	blx	r7
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d1c1      	bne.n	800aa96 <_printf_float+0x342>
 800ab12:	e680      	b.n	800a816 <_printf_float+0xc2>
 800ab14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab16:	2a01      	cmp	r2, #1
 800ab18:	dc01      	bgt.n	800ab1e <_printf_float+0x3ca>
 800ab1a:	07db      	lsls	r3, r3, #31
 800ab1c:	d538      	bpl.n	800ab90 <_printf_float+0x43c>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4642      	mov	r2, r8
 800ab22:	4631      	mov	r1, r6
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b8      	blx	r7
 800ab28:	3001      	adds	r0, #1
 800ab2a:	f43f ae74 	beq.w	800a816 <_printf_float+0xc2>
 800ab2e:	ee18 3a10 	vmov	r3, s16
 800ab32:	4652      	mov	r2, sl
 800ab34:	4631      	mov	r1, r6
 800ab36:	4628      	mov	r0, r5
 800ab38:	47b8      	blx	r7
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	f43f ae6b 	beq.w	800a816 <_printf_float+0xc2>
 800ab40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	f7f5 ffd6 	bl	8000af8 <__aeabi_dcmpeq>
 800ab4c:	b9d8      	cbnz	r0, 800ab86 <_printf_float+0x432>
 800ab4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab50:	f108 0201 	add.w	r2, r8, #1
 800ab54:	3b01      	subs	r3, #1
 800ab56:	4631      	mov	r1, r6
 800ab58:	4628      	mov	r0, r5
 800ab5a:	47b8      	blx	r7
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d10e      	bne.n	800ab7e <_printf_float+0x42a>
 800ab60:	e659      	b.n	800a816 <_printf_float+0xc2>
 800ab62:	2301      	movs	r3, #1
 800ab64:	4652      	mov	r2, sl
 800ab66:	4631      	mov	r1, r6
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b8      	blx	r7
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	f43f ae52 	beq.w	800a816 <_printf_float+0xc2>
 800ab72:	f108 0801 	add.w	r8, r8, #1
 800ab76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	4543      	cmp	r3, r8
 800ab7c:	dcf1      	bgt.n	800ab62 <_printf_float+0x40e>
 800ab7e:	464b      	mov	r3, r9
 800ab80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab84:	e6dc      	b.n	800a940 <_printf_float+0x1ec>
 800ab86:	f04f 0800 	mov.w	r8, #0
 800ab8a:	f104 0a1a 	add.w	sl, r4, #26
 800ab8e:	e7f2      	b.n	800ab76 <_printf_float+0x422>
 800ab90:	2301      	movs	r3, #1
 800ab92:	4642      	mov	r2, r8
 800ab94:	e7df      	b.n	800ab56 <_printf_float+0x402>
 800ab96:	2301      	movs	r3, #1
 800ab98:	464a      	mov	r2, r9
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b8      	blx	r7
 800aba0:	3001      	adds	r0, #1
 800aba2:	f43f ae38 	beq.w	800a816 <_printf_float+0xc2>
 800aba6:	f108 0801 	add.w	r8, r8, #1
 800abaa:	68e3      	ldr	r3, [r4, #12]
 800abac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abae:	1a5b      	subs	r3, r3, r1
 800abb0:	4543      	cmp	r3, r8
 800abb2:	dcf0      	bgt.n	800ab96 <_printf_float+0x442>
 800abb4:	e6fa      	b.n	800a9ac <_printf_float+0x258>
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	f104 0919 	add.w	r9, r4, #25
 800abbe:	e7f4      	b.n	800abaa <_printf_float+0x456>

0800abc0 <_printf_common>:
 800abc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc4:	4616      	mov	r6, r2
 800abc6:	4699      	mov	r9, r3
 800abc8:	688a      	ldr	r2, [r1, #8]
 800abca:	690b      	ldr	r3, [r1, #16]
 800abcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abd0:	4293      	cmp	r3, r2
 800abd2:	bfb8      	it	lt
 800abd4:	4613      	movlt	r3, r2
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abdc:	4607      	mov	r7, r0
 800abde:	460c      	mov	r4, r1
 800abe0:	b10a      	cbz	r2, 800abe6 <_printf_common+0x26>
 800abe2:	3301      	adds	r3, #1
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	6823      	ldr	r3, [r4, #0]
 800abe8:	0699      	lsls	r1, r3, #26
 800abea:	bf42      	ittt	mi
 800abec:	6833      	ldrmi	r3, [r6, #0]
 800abee:	3302      	addmi	r3, #2
 800abf0:	6033      	strmi	r3, [r6, #0]
 800abf2:	6825      	ldr	r5, [r4, #0]
 800abf4:	f015 0506 	ands.w	r5, r5, #6
 800abf8:	d106      	bne.n	800ac08 <_printf_common+0x48>
 800abfa:	f104 0a19 	add.w	sl, r4, #25
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	6832      	ldr	r2, [r6, #0]
 800ac02:	1a9b      	subs	r3, r3, r2
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dc26      	bgt.n	800ac56 <_printf_common+0x96>
 800ac08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac0c:	1e13      	subs	r3, r2, #0
 800ac0e:	6822      	ldr	r2, [r4, #0]
 800ac10:	bf18      	it	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	0692      	lsls	r2, r2, #26
 800ac16:	d42b      	bmi.n	800ac70 <_printf_common+0xb0>
 800ac18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	4638      	mov	r0, r7
 800ac20:	47c0      	blx	r8
 800ac22:	3001      	adds	r0, #1
 800ac24:	d01e      	beq.n	800ac64 <_printf_common+0xa4>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	68e5      	ldr	r5, [r4, #12]
 800ac2a:	6832      	ldr	r2, [r6, #0]
 800ac2c:	f003 0306 	and.w	r3, r3, #6
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	bf08      	it	eq
 800ac34:	1aad      	subeq	r5, r5, r2
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	6922      	ldr	r2, [r4, #16]
 800ac3a:	bf0c      	ite	eq
 800ac3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac40:	2500      	movne	r5, #0
 800ac42:	4293      	cmp	r3, r2
 800ac44:	bfc4      	itt	gt
 800ac46:	1a9b      	subgt	r3, r3, r2
 800ac48:	18ed      	addgt	r5, r5, r3
 800ac4a:	2600      	movs	r6, #0
 800ac4c:	341a      	adds	r4, #26
 800ac4e:	42b5      	cmp	r5, r6
 800ac50:	d11a      	bne.n	800ac88 <_printf_common+0xc8>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e008      	b.n	800ac68 <_printf_common+0xa8>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4652      	mov	r2, sl
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	47c0      	blx	r8
 800ac60:	3001      	adds	r0, #1
 800ac62:	d103      	bne.n	800ac6c <_printf_common+0xac>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6c:	3501      	adds	r5, #1
 800ac6e:	e7c6      	b.n	800abfe <_printf_common+0x3e>
 800ac70:	18e1      	adds	r1, r4, r3
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	2030      	movs	r0, #48	; 0x30
 800ac76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac7a:	4422      	add	r2, r4
 800ac7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac84:	3302      	adds	r3, #2
 800ac86:	e7c7      	b.n	800ac18 <_printf_common+0x58>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	4638      	mov	r0, r7
 800ac90:	47c0      	blx	r8
 800ac92:	3001      	adds	r0, #1
 800ac94:	d0e6      	beq.n	800ac64 <_printf_common+0xa4>
 800ac96:	3601      	adds	r6, #1
 800ac98:	e7d9      	b.n	800ac4e <_printf_common+0x8e>
	...

0800ac9c <_printf_i>:
 800ac9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	7e0f      	ldrb	r7, [r1, #24]
 800aca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aca4:	2f78      	cmp	r7, #120	; 0x78
 800aca6:	4691      	mov	r9, r2
 800aca8:	4680      	mov	r8, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	469a      	mov	sl, r3
 800acae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acb2:	d807      	bhi.n	800acc4 <_printf_i+0x28>
 800acb4:	2f62      	cmp	r7, #98	; 0x62
 800acb6:	d80a      	bhi.n	800acce <_printf_i+0x32>
 800acb8:	2f00      	cmp	r7, #0
 800acba:	f000 80d8 	beq.w	800ae6e <_printf_i+0x1d2>
 800acbe:	2f58      	cmp	r7, #88	; 0x58
 800acc0:	f000 80a3 	beq.w	800ae0a <_printf_i+0x16e>
 800acc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800accc:	e03a      	b.n	800ad44 <_printf_i+0xa8>
 800acce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acd2:	2b15      	cmp	r3, #21
 800acd4:	d8f6      	bhi.n	800acc4 <_printf_i+0x28>
 800acd6:	a101      	add	r1, pc, #4	; (adr r1, 800acdc <_printf_i+0x40>)
 800acd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acdc:	0800ad35 	.word	0x0800ad35
 800ace0:	0800ad49 	.word	0x0800ad49
 800ace4:	0800acc5 	.word	0x0800acc5
 800ace8:	0800acc5 	.word	0x0800acc5
 800acec:	0800acc5 	.word	0x0800acc5
 800acf0:	0800acc5 	.word	0x0800acc5
 800acf4:	0800ad49 	.word	0x0800ad49
 800acf8:	0800acc5 	.word	0x0800acc5
 800acfc:	0800acc5 	.word	0x0800acc5
 800ad00:	0800acc5 	.word	0x0800acc5
 800ad04:	0800acc5 	.word	0x0800acc5
 800ad08:	0800ae55 	.word	0x0800ae55
 800ad0c:	0800ad79 	.word	0x0800ad79
 800ad10:	0800ae37 	.word	0x0800ae37
 800ad14:	0800acc5 	.word	0x0800acc5
 800ad18:	0800acc5 	.word	0x0800acc5
 800ad1c:	0800ae77 	.word	0x0800ae77
 800ad20:	0800acc5 	.word	0x0800acc5
 800ad24:	0800ad79 	.word	0x0800ad79
 800ad28:	0800acc5 	.word	0x0800acc5
 800ad2c:	0800acc5 	.word	0x0800acc5
 800ad30:	0800ae3f 	.word	0x0800ae3f
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	602a      	str	r2, [r5, #0]
 800ad3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad44:	2301      	movs	r3, #1
 800ad46:	e0a3      	b.n	800ae90 <_printf_i+0x1f4>
 800ad48:	6820      	ldr	r0, [r4, #0]
 800ad4a:	6829      	ldr	r1, [r5, #0]
 800ad4c:	0606      	lsls	r6, r0, #24
 800ad4e:	f101 0304 	add.w	r3, r1, #4
 800ad52:	d50a      	bpl.n	800ad6a <_printf_i+0xce>
 800ad54:	680e      	ldr	r6, [r1, #0]
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	da03      	bge.n	800ad64 <_printf_i+0xc8>
 800ad5c:	232d      	movs	r3, #45	; 0x2d
 800ad5e:	4276      	negs	r6, r6
 800ad60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad64:	485e      	ldr	r0, [pc, #376]	; (800aee0 <_printf_i+0x244>)
 800ad66:	230a      	movs	r3, #10
 800ad68:	e019      	b.n	800ad9e <_printf_i+0x102>
 800ad6a:	680e      	ldr	r6, [r1, #0]
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad72:	bf18      	it	ne
 800ad74:	b236      	sxthne	r6, r6
 800ad76:	e7ef      	b.n	800ad58 <_printf_i+0xbc>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	6820      	ldr	r0, [r4, #0]
 800ad7c:	1d19      	adds	r1, r3, #4
 800ad7e:	6029      	str	r1, [r5, #0]
 800ad80:	0601      	lsls	r1, r0, #24
 800ad82:	d501      	bpl.n	800ad88 <_printf_i+0xec>
 800ad84:	681e      	ldr	r6, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <_printf_i+0xf2>
 800ad88:	0646      	lsls	r6, r0, #25
 800ad8a:	d5fb      	bpl.n	800ad84 <_printf_i+0xe8>
 800ad8c:	881e      	ldrh	r6, [r3, #0]
 800ad8e:	4854      	ldr	r0, [pc, #336]	; (800aee0 <_printf_i+0x244>)
 800ad90:	2f6f      	cmp	r7, #111	; 0x6f
 800ad92:	bf0c      	ite	eq
 800ad94:	2308      	moveq	r3, #8
 800ad96:	230a      	movne	r3, #10
 800ad98:	2100      	movs	r1, #0
 800ad9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad9e:	6865      	ldr	r5, [r4, #4]
 800ada0:	60a5      	str	r5, [r4, #8]
 800ada2:	2d00      	cmp	r5, #0
 800ada4:	bfa2      	ittt	ge
 800ada6:	6821      	ldrge	r1, [r4, #0]
 800ada8:	f021 0104 	bicge.w	r1, r1, #4
 800adac:	6021      	strge	r1, [r4, #0]
 800adae:	b90e      	cbnz	r6, 800adb4 <_printf_i+0x118>
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	d04d      	beq.n	800ae50 <_printf_i+0x1b4>
 800adb4:	4615      	mov	r5, r2
 800adb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800adba:	fb03 6711 	mls	r7, r3, r1, r6
 800adbe:	5dc7      	ldrb	r7, [r0, r7]
 800adc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adc4:	4637      	mov	r7, r6
 800adc6:	42bb      	cmp	r3, r7
 800adc8:	460e      	mov	r6, r1
 800adca:	d9f4      	bls.n	800adb6 <_printf_i+0x11a>
 800adcc:	2b08      	cmp	r3, #8
 800adce:	d10b      	bne.n	800ade8 <_printf_i+0x14c>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	07de      	lsls	r6, r3, #31
 800add4:	d508      	bpl.n	800ade8 <_printf_i+0x14c>
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	6861      	ldr	r1, [r4, #4]
 800adda:	4299      	cmp	r1, r3
 800addc:	bfde      	ittt	le
 800adde:	2330      	movle	r3, #48	; 0x30
 800ade0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ade4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ade8:	1b52      	subs	r2, r2, r5
 800adea:	6122      	str	r2, [r4, #16]
 800adec:	f8cd a000 	str.w	sl, [sp]
 800adf0:	464b      	mov	r3, r9
 800adf2:	aa03      	add	r2, sp, #12
 800adf4:	4621      	mov	r1, r4
 800adf6:	4640      	mov	r0, r8
 800adf8:	f7ff fee2 	bl	800abc0 <_printf_common>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d14c      	bne.n	800ae9a <_printf_i+0x1fe>
 800ae00:	f04f 30ff 	mov.w	r0, #4294967295
 800ae04:	b004      	add	sp, #16
 800ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0a:	4835      	ldr	r0, [pc, #212]	; (800aee0 <_printf_i+0x244>)
 800ae0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae10:	6829      	ldr	r1, [r5, #0]
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae18:	6029      	str	r1, [r5, #0]
 800ae1a:	061d      	lsls	r5, r3, #24
 800ae1c:	d514      	bpl.n	800ae48 <_printf_i+0x1ac>
 800ae1e:	07df      	lsls	r7, r3, #31
 800ae20:	bf44      	itt	mi
 800ae22:	f043 0320 	orrmi.w	r3, r3, #32
 800ae26:	6023      	strmi	r3, [r4, #0]
 800ae28:	b91e      	cbnz	r6, 800ae32 <_printf_i+0x196>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	f023 0320 	bic.w	r3, r3, #32
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	2310      	movs	r3, #16
 800ae34:	e7b0      	b.n	800ad98 <_printf_i+0xfc>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	f043 0320 	orr.w	r3, r3, #32
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	2378      	movs	r3, #120	; 0x78
 800ae40:	4828      	ldr	r0, [pc, #160]	; (800aee4 <_printf_i+0x248>)
 800ae42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae46:	e7e3      	b.n	800ae10 <_printf_i+0x174>
 800ae48:	0659      	lsls	r1, r3, #25
 800ae4a:	bf48      	it	mi
 800ae4c:	b2b6      	uxthmi	r6, r6
 800ae4e:	e7e6      	b.n	800ae1e <_printf_i+0x182>
 800ae50:	4615      	mov	r5, r2
 800ae52:	e7bb      	b.n	800adcc <_printf_i+0x130>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	6826      	ldr	r6, [r4, #0]
 800ae58:	6961      	ldr	r1, [r4, #20]
 800ae5a:	1d18      	adds	r0, r3, #4
 800ae5c:	6028      	str	r0, [r5, #0]
 800ae5e:	0635      	lsls	r5, r6, #24
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	d501      	bpl.n	800ae68 <_printf_i+0x1cc>
 800ae64:	6019      	str	r1, [r3, #0]
 800ae66:	e002      	b.n	800ae6e <_printf_i+0x1d2>
 800ae68:	0670      	lsls	r0, r6, #25
 800ae6a:	d5fb      	bpl.n	800ae64 <_printf_i+0x1c8>
 800ae6c:	8019      	strh	r1, [r3, #0]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6123      	str	r3, [r4, #16]
 800ae72:	4615      	mov	r5, r2
 800ae74:	e7ba      	b.n	800adec <_printf_i+0x150>
 800ae76:	682b      	ldr	r3, [r5, #0]
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	602a      	str	r2, [r5, #0]
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	6862      	ldr	r2, [r4, #4]
 800ae80:	2100      	movs	r1, #0
 800ae82:	4628      	mov	r0, r5
 800ae84:	f7f5 f9c4 	bl	8000210 <memchr>
 800ae88:	b108      	cbz	r0, 800ae8e <_printf_i+0x1f2>
 800ae8a:	1b40      	subs	r0, r0, r5
 800ae8c:	6060      	str	r0, [r4, #4]
 800ae8e:	6863      	ldr	r3, [r4, #4]
 800ae90:	6123      	str	r3, [r4, #16]
 800ae92:	2300      	movs	r3, #0
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae98:	e7a8      	b.n	800adec <_printf_i+0x150>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	4649      	mov	r1, r9
 800aea0:	4640      	mov	r0, r8
 800aea2:	47d0      	blx	sl
 800aea4:	3001      	adds	r0, #1
 800aea6:	d0ab      	beq.n	800ae00 <_printf_i+0x164>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	079b      	lsls	r3, r3, #30
 800aeac:	d413      	bmi.n	800aed6 <_printf_i+0x23a>
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	4298      	cmp	r0, r3
 800aeb4:	bfb8      	it	lt
 800aeb6:	4618      	movlt	r0, r3
 800aeb8:	e7a4      	b.n	800ae04 <_printf_i+0x168>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4632      	mov	r2, r6
 800aebe:	4649      	mov	r1, r9
 800aec0:	4640      	mov	r0, r8
 800aec2:	47d0      	blx	sl
 800aec4:	3001      	adds	r0, #1
 800aec6:	d09b      	beq.n	800ae00 <_printf_i+0x164>
 800aec8:	3501      	adds	r5, #1
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	9903      	ldr	r1, [sp, #12]
 800aece:	1a5b      	subs	r3, r3, r1
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dcf2      	bgt.n	800aeba <_printf_i+0x21e>
 800aed4:	e7eb      	b.n	800aeae <_printf_i+0x212>
 800aed6:	2500      	movs	r5, #0
 800aed8:	f104 0619 	add.w	r6, r4, #25
 800aedc:	e7f5      	b.n	800aeca <_printf_i+0x22e>
 800aede:	bf00      	nop
 800aee0:	0800f82a 	.word	0x0800f82a
 800aee4:	0800f83b 	.word	0x0800f83b

0800aee8 <_sbrk_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d06      	ldr	r5, [pc, #24]	; (800af04 <_sbrk_r+0x1c>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	602b      	str	r3, [r5, #0]
 800aef4:	f004 fb62 	bl	800f5bc <_sbrk>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_sbrk_r+0x1a>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_sbrk_r+0x1a>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	200133d4 	.word	0x200133d4

0800af08 <siprintf>:
 800af08:	b40e      	push	{r1, r2, r3}
 800af0a:	b500      	push	{lr}
 800af0c:	b09c      	sub	sp, #112	; 0x70
 800af0e:	ab1d      	add	r3, sp, #116	; 0x74
 800af10:	9002      	str	r0, [sp, #8]
 800af12:	9006      	str	r0, [sp, #24]
 800af14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af18:	4809      	ldr	r0, [pc, #36]	; (800af40 <siprintf+0x38>)
 800af1a:	9107      	str	r1, [sp, #28]
 800af1c:	9104      	str	r1, [sp, #16]
 800af1e:	4909      	ldr	r1, [pc, #36]	; (800af44 <siprintf+0x3c>)
 800af20:	f853 2b04 	ldr.w	r2, [r3], #4
 800af24:	9105      	str	r1, [sp, #20]
 800af26:	6800      	ldr	r0, [r0, #0]
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	a902      	add	r1, sp, #8
 800af2c:	f001 fa8c 	bl	800c448 <_svfiprintf_r>
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	2200      	movs	r2, #0
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	b01c      	add	sp, #112	; 0x70
 800af38:	f85d eb04 	ldr.w	lr, [sp], #4
 800af3c:	b003      	add	sp, #12
 800af3e:	4770      	bx	lr
 800af40:	20000028 	.word	0x20000028
 800af44:	ffff0208 	.word	0xffff0208

0800af48 <quorem>:
 800af48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	6903      	ldr	r3, [r0, #16]
 800af4e:	690c      	ldr	r4, [r1, #16]
 800af50:	42a3      	cmp	r3, r4
 800af52:	4607      	mov	r7, r0
 800af54:	f2c0 8081 	blt.w	800b05a <quorem+0x112>
 800af58:	3c01      	subs	r4, #1
 800af5a:	f101 0814 	add.w	r8, r1, #20
 800af5e:	f100 0514 	add.w	r5, r0, #20
 800af62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af70:	3301      	adds	r3, #1
 800af72:	429a      	cmp	r2, r3
 800af74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af7c:	fbb2 f6f3 	udiv	r6, r2, r3
 800af80:	d331      	bcc.n	800afe6 <quorem+0x9e>
 800af82:	f04f 0e00 	mov.w	lr, #0
 800af86:	4640      	mov	r0, r8
 800af88:	46ac      	mov	ip, r5
 800af8a:	46f2      	mov	sl, lr
 800af8c:	f850 2b04 	ldr.w	r2, [r0], #4
 800af90:	b293      	uxth	r3, r2
 800af92:	fb06 e303 	mla	r3, r6, r3, lr
 800af96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	ebaa 0303 	sub.w	r3, sl, r3
 800afa0:	f8dc a000 	ldr.w	sl, [ip]
 800afa4:	0c12      	lsrs	r2, r2, #16
 800afa6:	fa13 f38a 	uxtah	r3, r3, sl
 800afaa:	fb06 e202 	mla	r2, r6, r2, lr
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	9b00      	ldr	r3, [sp, #0]
 800afb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afb6:	b292      	uxth	r2, r2
 800afb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afc0:	f8bd 3000 	ldrh.w	r3, [sp]
 800afc4:	4581      	cmp	r9, r0
 800afc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afca:	f84c 3b04 	str.w	r3, [ip], #4
 800afce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afd2:	d2db      	bcs.n	800af8c <quorem+0x44>
 800afd4:	f855 300b 	ldr.w	r3, [r5, fp]
 800afd8:	b92b      	cbnz	r3, 800afe6 <quorem+0x9e>
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	3b04      	subs	r3, #4
 800afde:	429d      	cmp	r5, r3
 800afe0:	461a      	mov	r2, r3
 800afe2:	d32e      	bcc.n	800b042 <quorem+0xfa>
 800afe4:	613c      	str	r4, [r7, #16]
 800afe6:	4638      	mov	r0, r7
 800afe8:	f001 f8ba 	bl	800c160 <__mcmp>
 800afec:	2800      	cmp	r0, #0
 800afee:	db24      	blt.n	800b03a <quorem+0xf2>
 800aff0:	3601      	adds	r6, #1
 800aff2:	4628      	mov	r0, r5
 800aff4:	f04f 0c00 	mov.w	ip, #0
 800aff8:	f858 2b04 	ldr.w	r2, [r8], #4
 800affc:	f8d0 e000 	ldr.w	lr, [r0]
 800b000:	b293      	uxth	r3, r2
 800b002:	ebac 0303 	sub.w	r3, ip, r3
 800b006:	0c12      	lsrs	r2, r2, #16
 800b008:	fa13 f38e 	uxtah	r3, r3, lr
 800b00c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b014:	b29b      	uxth	r3, r3
 800b016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b01a:	45c1      	cmp	r9, r8
 800b01c:	f840 3b04 	str.w	r3, [r0], #4
 800b020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b024:	d2e8      	bcs.n	800aff8 <quorem+0xb0>
 800b026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b02e:	b922      	cbnz	r2, 800b03a <quorem+0xf2>
 800b030:	3b04      	subs	r3, #4
 800b032:	429d      	cmp	r5, r3
 800b034:	461a      	mov	r2, r3
 800b036:	d30a      	bcc.n	800b04e <quorem+0x106>
 800b038:	613c      	str	r4, [r7, #16]
 800b03a:	4630      	mov	r0, r6
 800b03c:	b003      	add	sp, #12
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	6812      	ldr	r2, [r2, #0]
 800b044:	3b04      	subs	r3, #4
 800b046:	2a00      	cmp	r2, #0
 800b048:	d1cc      	bne.n	800afe4 <quorem+0x9c>
 800b04a:	3c01      	subs	r4, #1
 800b04c:	e7c7      	b.n	800afde <quorem+0x96>
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	3b04      	subs	r3, #4
 800b052:	2a00      	cmp	r2, #0
 800b054:	d1f0      	bne.n	800b038 <quorem+0xf0>
 800b056:	3c01      	subs	r4, #1
 800b058:	e7eb      	b.n	800b032 <quorem+0xea>
 800b05a:	2000      	movs	r0, #0
 800b05c:	e7ee      	b.n	800b03c <quorem+0xf4>
	...

0800b060 <_dtoa_r>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	ed2d 8b04 	vpush	{d8-d9}
 800b068:	ec57 6b10 	vmov	r6, r7, d0
 800b06c:	b093      	sub	sp, #76	; 0x4c
 800b06e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b074:	9106      	str	r1, [sp, #24]
 800b076:	ee10 aa10 	vmov	sl, s0
 800b07a:	4604      	mov	r4, r0
 800b07c:	9209      	str	r2, [sp, #36]	; 0x24
 800b07e:	930c      	str	r3, [sp, #48]	; 0x30
 800b080:	46bb      	mov	fp, r7
 800b082:	b975      	cbnz	r5, 800b0a2 <_dtoa_r+0x42>
 800b084:	2010      	movs	r0, #16
 800b086:	f7ff f9c7 	bl	800a418 <malloc>
 800b08a:	4602      	mov	r2, r0
 800b08c:	6260      	str	r0, [r4, #36]	; 0x24
 800b08e:	b920      	cbnz	r0, 800b09a <_dtoa_r+0x3a>
 800b090:	4ba7      	ldr	r3, [pc, #668]	; (800b330 <_dtoa_r+0x2d0>)
 800b092:	21ea      	movs	r1, #234	; 0xea
 800b094:	48a7      	ldr	r0, [pc, #668]	; (800b334 <_dtoa_r+0x2d4>)
 800b096:	f001 fad7 	bl	800c648 <__assert_func>
 800b09a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b09e:	6005      	str	r5, [r0, #0]
 800b0a0:	60c5      	str	r5, [r0, #12]
 800b0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a4:	6819      	ldr	r1, [r3, #0]
 800b0a6:	b151      	cbz	r1, 800b0be <_dtoa_r+0x5e>
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	604a      	str	r2, [r1, #4]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4093      	lsls	r3, r2
 800b0b0:	608b      	str	r3, [r1, #8]
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fe12 	bl	800bcdc <_Bfree>
 800b0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	1e3b      	subs	r3, r7, #0
 800b0c0:	bfaa      	itet	ge
 800b0c2:	2300      	movge	r3, #0
 800b0c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b0c8:	f8c8 3000 	strge.w	r3, [r8]
 800b0cc:	4b9a      	ldr	r3, [pc, #616]	; (800b338 <_dtoa_r+0x2d8>)
 800b0ce:	bfbc      	itt	lt
 800b0d0:	2201      	movlt	r2, #1
 800b0d2:	f8c8 2000 	strlt.w	r2, [r8]
 800b0d6:	ea33 030b 	bics.w	r3, r3, fp
 800b0da:	d11b      	bne.n	800b114 <_dtoa_r+0xb4>
 800b0dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0e8:	4333      	orrs	r3, r6
 800b0ea:	f000 8592 	beq.w	800bc12 <_dtoa_r+0xbb2>
 800b0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f0:	b963      	cbnz	r3, 800b10c <_dtoa_r+0xac>
 800b0f2:	4b92      	ldr	r3, [pc, #584]	; (800b33c <_dtoa_r+0x2dc>)
 800b0f4:	e022      	b.n	800b13c <_dtoa_r+0xdc>
 800b0f6:	4b92      	ldr	r3, [pc, #584]	; (800b340 <_dtoa_r+0x2e0>)
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	9801      	ldr	r0, [sp, #4]
 800b102:	b013      	add	sp, #76	; 0x4c
 800b104:	ecbd 8b04 	vpop	{d8-d9}
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	4b8b      	ldr	r3, [pc, #556]	; (800b33c <_dtoa_r+0x2dc>)
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	3303      	adds	r3, #3
 800b112:	e7f3      	b.n	800b0fc <_dtoa_r+0x9c>
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 fcec 	bl	8000af8 <__aeabi_dcmpeq>
 800b120:	ec4b ab19 	vmov	d9, sl, fp
 800b124:	4680      	mov	r8, r0
 800b126:	b158      	cbz	r0, 800b140 <_dtoa_r+0xe0>
 800b128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b12a:	2301      	movs	r3, #1
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 856b 	beq.w	800bc0c <_dtoa_r+0xbac>
 800b136:	4883      	ldr	r0, [pc, #524]	; (800b344 <_dtoa_r+0x2e4>)
 800b138:	6018      	str	r0, [r3, #0]
 800b13a:	1e43      	subs	r3, r0, #1
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	e7df      	b.n	800b100 <_dtoa_r+0xa0>
 800b140:	ec4b ab10 	vmov	d0, sl, fp
 800b144:	aa10      	add	r2, sp, #64	; 0x40
 800b146:	a911      	add	r1, sp, #68	; 0x44
 800b148:	4620      	mov	r0, r4
 800b14a:	f001 f8af 	bl	800c2ac <__d2b>
 800b14e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b152:	ee08 0a10 	vmov	s16, r0
 800b156:	2d00      	cmp	r5, #0
 800b158:	f000 8084 	beq.w	800b264 <_dtoa_r+0x204>
 800b15c:	ee19 3a90 	vmov	r3, s19
 800b160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b168:	4656      	mov	r6, sl
 800b16a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b16e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b176:	4b74      	ldr	r3, [pc, #464]	; (800b348 <_dtoa_r+0x2e8>)
 800b178:	2200      	movs	r2, #0
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 f89b 	bl	80002b8 <__aeabi_dsub>
 800b182:	a365      	add	r3, pc, #404	; (adr r3, 800b318 <_dtoa_r+0x2b8>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 fa4e 	bl	8000628 <__aeabi_dmul>
 800b18c:	a364      	add	r3, pc, #400	; (adr r3, 800b320 <_dtoa_r+0x2c0>)
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f7f5 f893 	bl	80002bc <__adddf3>
 800b196:	4606      	mov	r6, r0
 800b198:	4628      	mov	r0, r5
 800b19a:	460f      	mov	r7, r1
 800b19c:	f7f5 f9da 	bl	8000554 <__aeabi_i2d>
 800b1a0:	a361      	add	r3, pc, #388	; (adr r3, 800b328 <_dtoa_r+0x2c8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 fa3f 	bl	8000628 <__aeabi_dmul>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7f5 f883 	bl	80002bc <__adddf3>
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	f7f5 fce5 	bl	8000b88 <__aeabi_d2iz>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	9000      	str	r0, [sp, #0]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 fca0 	bl	8000b0c <__aeabi_dcmplt>
 800b1cc:	b150      	cbz	r0, 800b1e4 <_dtoa_r+0x184>
 800b1ce:	9800      	ldr	r0, [sp, #0]
 800b1d0:	f7f5 f9c0 	bl	8000554 <__aeabi_i2d>
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	f7f5 fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 800b1dc:	b910      	cbnz	r0, 800b1e4 <_dtoa_r+0x184>
 800b1de:	9b00      	ldr	r3, [sp, #0]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	2b16      	cmp	r3, #22
 800b1e8:	d85a      	bhi.n	800b2a0 <_dtoa_r+0x240>
 800b1ea:	9a00      	ldr	r2, [sp, #0]
 800b1ec:	4b57      	ldr	r3, [pc, #348]	; (800b34c <_dtoa_r+0x2ec>)
 800b1ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	ec51 0b19 	vmov	r0, r1, d9
 800b1fa:	f7f5 fc87 	bl	8000b0c <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d050      	beq.n	800b2a4 <_dtoa_r+0x244>
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	3b01      	subs	r3, #1
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b20e:	1b5d      	subs	r5, r3, r5
 800b210:	1e6b      	subs	r3, r5, #1
 800b212:	9305      	str	r3, [sp, #20]
 800b214:	bf45      	ittet	mi
 800b216:	f1c5 0301 	rsbmi	r3, r5, #1
 800b21a:	9304      	strmi	r3, [sp, #16]
 800b21c:	2300      	movpl	r3, #0
 800b21e:	2300      	movmi	r3, #0
 800b220:	bf4c      	ite	mi
 800b222:	9305      	strmi	r3, [sp, #20]
 800b224:	9304      	strpl	r3, [sp, #16]
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	db3d      	blt.n	800b2a8 <_dtoa_r+0x248>
 800b22c:	9b05      	ldr	r3, [sp, #20]
 800b22e:	9a00      	ldr	r2, [sp, #0]
 800b230:	920a      	str	r2, [sp, #40]	; 0x28
 800b232:	4413      	add	r3, r2
 800b234:	9305      	str	r3, [sp, #20]
 800b236:	2300      	movs	r3, #0
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	2b09      	cmp	r3, #9
 800b23e:	f200 8089 	bhi.w	800b354 <_dtoa_r+0x2f4>
 800b242:	2b05      	cmp	r3, #5
 800b244:	bfc4      	itt	gt
 800b246:	3b04      	subgt	r3, #4
 800b248:	9306      	strgt	r3, [sp, #24]
 800b24a:	9b06      	ldr	r3, [sp, #24]
 800b24c:	f1a3 0302 	sub.w	r3, r3, #2
 800b250:	bfcc      	ite	gt
 800b252:	2500      	movgt	r5, #0
 800b254:	2501      	movle	r5, #1
 800b256:	2b03      	cmp	r3, #3
 800b258:	f200 8087 	bhi.w	800b36a <_dtoa_r+0x30a>
 800b25c:	e8df f003 	tbb	[pc, r3]
 800b260:	59383a2d 	.word	0x59383a2d
 800b264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b268:	441d      	add	r5, r3
 800b26a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b26e:	2b20      	cmp	r3, #32
 800b270:	bfc1      	itttt	gt
 800b272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b27a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b27e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b282:	bfda      	itte	le
 800b284:	f1c3 0320 	rsble	r3, r3, #32
 800b288:	fa06 f003 	lslle.w	r0, r6, r3
 800b28c:	4318      	orrgt	r0, r3
 800b28e:	f7f5 f951 	bl	8000534 <__aeabi_ui2d>
 800b292:	2301      	movs	r3, #1
 800b294:	4606      	mov	r6, r0
 800b296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b29a:	3d01      	subs	r5, #1
 800b29c:	930e      	str	r3, [sp, #56]	; 0x38
 800b29e:	e76a      	b.n	800b176 <_dtoa_r+0x116>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e7b2      	b.n	800b20a <_dtoa_r+0x1aa>
 800b2a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2a6:	e7b1      	b.n	800b20c <_dtoa_r+0x1ac>
 800b2a8:	9b04      	ldr	r3, [sp, #16]
 800b2aa:	9a00      	ldr	r2, [sp, #0]
 800b2ac:	1a9b      	subs	r3, r3, r2
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	4253      	negs	r3, r2
 800b2b2:	9307      	str	r3, [sp, #28]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2b8:	e7bf      	b.n	800b23a <_dtoa_r+0x1da>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	9308      	str	r3, [sp, #32]
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc55      	bgt.n	800b370 <_dtoa_r+0x310>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ce:	e00c      	b.n	800b2ea <_dtoa_r+0x28a>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e7f3      	b.n	800b2bc <_dtoa_r+0x25c>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d8:	9308      	str	r3, [sp, #32]
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	4413      	add	r3, r2
 800b2de:	9302      	str	r3, [sp, #8]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	9303      	str	r3, [sp, #12]
 800b2e6:	bfb8      	it	lt
 800b2e8:	2301      	movlt	r3, #1
 800b2ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	6042      	str	r2, [r0, #4]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	f102 0614 	add.w	r6, r2, #20
 800b2f6:	429e      	cmp	r6, r3
 800b2f8:	6841      	ldr	r1, [r0, #4]
 800b2fa:	d93d      	bls.n	800b378 <_dtoa_r+0x318>
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fcad 	bl	800bc5c <_Balloc>
 800b302:	9001      	str	r0, [sp, #4]
 800b304:	2800      	cmp	r0, #0
 800b306:	d13b      	bne.n	800b380 <_dtoa_r+0x320>
 800b308:	4b11      	ldr	r3, [pc, #68]	; (800b350 <_dtoa_r+0x2f0>)
 800b30a:	4602      	mov	r2, r0
 800b30c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b310:	e6c0      	b.n	800b094 <_dtoa_r+0x34>
 800b312:	2301      	movs	r3, #1
 800b314:	e7df      	b.n	800b2d6 <_dtoa_r+0x276>
 800b316:	bf00      	nop
 800b318:	636f4361 	.word	0x636f4361
 800b31c:	3fd287a7 	.word	0x3fd287a7
 800b320:	8b60c8b3 	.word	0x8b60c8b3
 800b324:	3fc68a28 	.word	0x3fc68a28
 800b328:	509f79fb 	.word	0x509f79fb
 800b32c:	3fd34413 	.word	0x3fd34413
 800b330:	0800f859 	.word	0x0800f859
 800b334:	0800f870 	.word	0x0800f870
 800b338:	7ff00000 	.word	0x7ff00000
 800b33c:	0800f855 	.word	0x0800f855
 800b340:	0800f84c 	.word	0x0800f84c
 800b344:	0800f829 	.word	0x0800f829
 800b348:	3ff80000 	.word	0x3ff80000
 800b34c:	0800f960 	.word	0x0800f960
 800b350:	0800f8cb 	.word	0x0800f8cb
 800b354:	2501      	movs	r5, #1
 800b356:	2300      	movs	r3, #0
 800b358:	9306      	str	r3, [sp, #24]
 800b35a:	9508      	str	r5, [sp, #32]
 800b35c:	f04f 33ff 	mov.w	r3, #4294967295
 800b360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b364:	2200      	movs	r2, #0
 800b366:	2312      	movs	r3, #18
 800b368:	e7b0      	b.n	800b2cc <_dtoa_r+0x26c>
 800b36a:	2301      	movs	r3, #1
 800b36c:	9308      	str	r3, [sp, #32]
 800b36e:	e7f5      	b.n	800b35c <_dtoa_r+0x2fc>
 800b370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b376:	e7b8      	b.n	800b2ea <_dtoa_r+0x28a>
 800b378:	3101      	adds	r1, #1
 800b37a:	6041      	str	r1, [r0, #4]
 800b37c:	0052      	lsls	r2, r2, #1
 800b37e:	e7b8      	b.n	800b2f2 <_dtoa_r+0x292>
 800b380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	2b0e      	cmp	r3, #14
 800b38a:	f200 809d 	bhi.w	800b4c8 <_dtoa_r+0x468>
 800b38e:	2d00      	cmp	r5, #0
 800b390:	f000 809a 	beq.w	800b4c8 <_dtoa_r+0x468>
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	dd32      	ble.n	800b400 <_dtoa_r+0x3a0>
 800b39a:	4ab7      	ldr	r2, [pc, #732]	; (800b678 <_dtoa_r+0x618>)
 800b39c:	f003 030f 	and.w	r3, r3, #15
 800b3a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3a8:	9b00      	ldr	r3, [sp, #0]
 800b3aa:	05d8      	lsls	r0, r3, #23
 800b3ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b3b0:	d516      	bpl.n	800b3e0 <_dtoa_r+0x380>
 800b3b2:	4bb2      	ldr	r3, [pc, #712]	; (800b67c <_dtoa_r+0x61c>)
 800b3b4:	ec51 0b19 	vmov	r0, r1, d9
 800b3b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3bc:	f7f5 fa5e 	bl	800087c <__aeabi_ddiv>
 800b3c0:	f007 070f 	and.w	r7, r7, #15
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	2503      	movs	r5, #3
 800b3ca:	4eac      	ldr	r6, [pc, #688]	; (800b67c <_dtoa_r+0x61c>)
 800b3cc:	b957      	cbnz	r7, 800b3e4 <_dtoa_r+0x384>
 800b3ce:	4642      	mov	r2, r8
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	f7f5 fa51 	bl	800087c <__aeabi_ddiv>
 800b3da:	4682      	mov	sl, r0
 800b3dc:	468b      	mov	fp, r1
 800b3de:	e028      	b.n	800b432 <_dtoa_r+0x3d2>
 800b3e0:	2502      	movs	r5, #2
 800b3e2:	e7f2      	b.n	800b3ca <_dtoa_r+0x36a>
 800b3e4:	07f9      	lsls	r1, r7, #31
 800b3e6:	d508      	bpl.n	800b3fa <_dtoa_r+0x39a>
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3f0:	f7f5 f91a 	bl	8000628 <__aeabi_dmul>
 800b3f4:	3501      	adds	r5, #1
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	107f      	asrs	r7, r7, #1
 800b3fc:	3608      	adds	r6, #8
 800b3fe:	e7e5      	b.n	800b3cc <_dtoa_r+0x36c>
 800b400:	f000 809b 	beq.w	800b53a <_dtoa_r+0x4da>
 800b404:	9b00      	ldr	r3, [sp, #0]
 800b406:	4f9d      	ldr	r7, [pc, #628]	; (800b67c <_dtoa_r+0x61c>)
 800b408:	425e      	negs	r6, r3
 800b40a:	4b9b      	ldr	r3, [pc, #620]	; (800b678 <_dtoa_r+0x618>)
 800b40c:	f006 020f 	and.w	r2, r6, #15
 800b410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	ec51 0b19 	vmov	r0, r1, d9
 800b41c:	f7f5 f904 	bl	8000628 <__aeabi_dmul>
 800b420:	1136      	asrs	r6, r6, #4
 800b422:	4682      	mov	sl, r0
 800b424:	468b      	mov	fp, r1
 800b426:	2300      	movs	r3, #0
 800b428:	2502      	movs	r5, #2
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	d17a      	bne.n	800b524 <_dtoa_r+0x4c4>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1d3      	bne.n	800b3da <_dtoa_r+0x37a>
 800b432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 8082 	beq.w	800b53e <_dtoa_r+0x4de>
 800b43a:	4b91      	ldr	r3, [pc, #580]	; (800b680 <_dtoa_r+0x620>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	4650      	mov	r0, sl
 800b440:	4659      	mov	r1, fp
 800b442:	f7f5 fb63 	bl	8000b0c <__aeabi_dcmplt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d079      	beq.n	800b53e <_dtoa_r+0x4de>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d076      	beq.n	800b53e <_dtoa_r+0x4de>
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	dd36      	ble.n	800b4c4 <_dtoa_r+0x464>
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	4650      	mov	r0, sl
 800b45a:	4659      	mov	r1, fp
 800b45c:	1e5f      	subs	r7, r3, #1
 800b45e:	2200      	movs	r2, #0
 800b460:	4b88      	ldr	r3, [pc, #544]	; (800b684 <_dtoa_r+0x624>)
 800b462:	f7f5 f8e1 	bl	8000628 <__aeabi_dmul>
 800b466:	9e02      	ldr	r6, [sp, #8]
 800b468:	4682      	mov	sl, r0
 800b46a:	468b      	mov	fp, r1
 800b46c:	3501      	adds	r5, #1
 800b46e:	4628      	mov	r0, r5
 800b470:	f7f5 f870 	bl	8000554 <__aeabi_i2d>
 800b474:	4652      	mov	r2, sl
 800b476:	465b      	mov	r3, fp
 800b478:	f7f5 f8d6 	bl	8000628 <__aeabi_dmul>
 800b47c:	4b82      	ldr	r3, [pc, #520]	; (800b688 <_dtoa_r+0x628>)
 800b47e:	2200      	movs	r2, #0
 800b480:	f7f4 ff1c 	bl	80002bc <__adddf3>
 800b484:	46d0      	mov	r8, sl
 800b486:	46d9      	mov	r9, fp
 800b488:	4682      	mov	sl, r0
 800b48a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b48e:	2e00      	cmp	r6, #0
 800b490:	d158      	bne.n	800b544 <_dtoa_r+0x4e4>
 800b492:	4b7e      	ldr	r3, [pc, #504]	; (800b68c <_dtoa_r+0x62c>)
 800b494:	2200      	movs	r2, #0
 800b496:	4640      	mov	r0, r8
 800b498:	4649      	mov	r1, r9
 800b49a:	f7f4 ff0d 	bl	80002b8 <__aeabi_dsub>
 800b49e:	4652      	mov	r2, sl
 800b4a0:	465b      	mov	r3, fp
 800b4a2:	4680      	mov	r8, r0
 800b4a4:	4689      	mov	r9, r1
 800b4a6:	f7f5 fb4f 	bl	8000b48 <__aeabi_dcmpgt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f040 8295 	bne.w	800b9da <_dtoa_r+0x97a>
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	f7f5 fb27 	bl	8000b0c <__aeabi_dcmplt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f040 8289 	bne.w	800b9d6 <_dtoa_r+0x976>
 800b4c4:	ec5b ab19 	vmov	sl, fp, d9
 800b4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f2c0 8148 	blt.w	800b760 <_dtoa_r+0x700>
 800b4d0:	9a00      	ldr	r2, [sp, #0]
 800b4d2:	2a0e      	cmp	r2, #14
 800b4d4:	f300 8144 	bgt.w	800b760 <_dtoa_r+0x700>
 800b4d8:	4b67      	ldr	r3, [pc, #412]	; (800b678 <_dtoa_r+0x618>)
 800b4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f280 80d5 	bge.w	800b694 <_dtoa_r+0x634>
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f300 80d1 	bgt.w	800b694 <_dtoa_r+0x634>
 800b4f2:	f040 826f 	bne.w	800b9d4 <_dtoa_r+0x974>
 800b4f6:	4b65      	ldr	r3, [pc, #404]	; (800b68c <_dtoa_r+0x62c>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	f7f5 f893 	bl	8000628 <__aeabi_dmul>
 800b502:	4652      	mov	r2, sl
 800b504:	465b      	mov	r3, fp
 800b506:	f7f5 fb15 	bl	8000b34 <__aeabi_dcmpge>
 800b50a:	9e03      	ldr	r6, [sp, #12]
 800b50c:	4637      	mov	r7, r6
 800b50e:	2800      	cmp	r0, #0
 800b510:	f040 8245 	bne.w	800b99e <_dtoa_r+0x93e>
 800b514:	9d01      	ldr	r5, [sp, #4]
 800b516:	2331      	movs	r3, #49	; 0x31
 800b518:	f805 3b01 	strb.w	r3, [r5], #1
 800b51c:	9b00      	ldr	r3, [sp, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	e240      	b.n	800b9a6 <_dtoa_r+0x946>
 800b524:	07f2      	lsls	r2, r6, #31
 800b526:	d505      	bpl.n	800b534 <_dtoa_r+0x4d4>
 800b528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b52c:	f7f5 f87c 	bl	8000628 <__aeabi_dmul>
 800b530:	3501      	adds	r5, #1
 800b532:	2301      	movs	r3, #1
 800b534:	1076      	asrs	r6, r6, #1
 800b536:	3708      	adds	r7, #8
 800b538:	e777      	b.n	800b42a <_dtoa_r+0x3ca>
 800b53a:	2502      	movs	r5, #2
 800b53c:	e779      	b.n	800b432 <_dtoa_r+0x3d2>
 800b53e:	9f00      	ldr	r7, [sp, #0]
 800b540:	9e03      	ldr	r6, [sp, #12]
 800b542:	e794      	b.n	800b46e <_dtoa_r+0x40e>
 800b544:	9901      	ldr	r1, [sp, #4]
 800b546:	4b4c      	ldr	r3, [pc, #304]	; (800b678 <_dtoa_r+0x618>)
 800b548:	4431      	add	r1, r6
 800b54a:	910d      	str	r1, [sp, #52]	; 0x34
 800b54c:	9908      	ldr	r1, [sp, #32]
 800b54e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b556:	2900      	cmp	r1, #0
 800b558:	d043      	beq.n	800b5e2 <_dtoa_r+0x582>
 800b55a:	494d      	ldr	r1, [pc, #308]	; (800b690 <_dtoa_r+0x630>)
 800b55c:	2000      	movs	r0, #0
 800b55e:	f7f5 f98d 	bl	800087c <__aeabi_ddiv>
 800b562:	4652      	mov	r2, sl
 800b564:	465b      	mov	r3, fp
 800b566:	f7f4 fea7 	bl	80002b8 <__aeabi_dsub>
 800b56a:	9d01      	ldr	r5, [sp, #4]
 800b56c:	4682      	mov	sl, r0
 800b56e:	468b      	mov	fp, r1
 800b570:	4649      	mov	r1, r9
 800b572:	4640      	mov	r0, r8
 800b574:	f7f5 fb08 	bl	8000b88 <__aeabi_d2iz>
 800b578:	4606      	mov	r6, r0
 800b57a:	f7f4 ffeb 	bl	8000554 <__aeabi_i2d>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f7f4 fe97 	bl	80002b8 <__aeabi_dsub>
 800b58a:	3630      	adds	r6, #48	; 0x30
 800b58c:	f805 6b01 	strb.w	r6, [r5], #1
 800b590:	4652      	mov	r2, sl
 800b592:	465b      	mov	r3, fp
 800b594:	4680      	mov	r8, r0
 800b596:	4689      	mov	r9, r1
 800b598:	f7f5 fab8 	bl	8000b0c <__aeabi_dcmplt>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d163      	bne.n	800b668 <_dtoa_r+0x608>
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	464b      	mov	r3, r9
 800b5a4:	4936      	ldr	r1, [pc, #216]	; (800b680 <_dtoa_r+0x620>)
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	f7f4 fe86 	bl	80002b8 <__aeabi_dsub>
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	465b      	mov	r3, fp
 800b5b0:	f7f5 faac 	bl	8000b0c <__aeabi_dcmplt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f040 80b5 	bne.w	800b724 <_dtoa_r+0x6c4>
 800b5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5bc:	429d      	cmp	r5, r3
 800b5be:	d081      	beq.n	800b4c4 <_dtoa_r+0x464>
 800b5c0:	4b30      	ldr	r3, [pc, #192]	; (800b684 <_dtoa_r+0x624>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	4650      	mov	r0, sl
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	f7f5 f82e 	bl	8000628 <__aeabi_dmul>
 800b5cc:	4b2d      	ldr	r3, [pc, #180]	; (800b684 <_dtoa_r+0x624>)
 800b5ce:	4682      	mov	sl, r0
 800b5d0:	468b      	mov	fp, r1
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f7f5 f826 	bl	8000628 <__aeabi_dmul>
 800b5dc:	4680      	mov	r8, r0
 800b5de:	4689      	mov	r9, r1
 800b5e0:	e7c6      	b.n	800b570 <_dtoa_r+0x510>
 800b5e2:	4650      	mov	r0, sl
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f5 f81f 	bl	8000628 <__aeabi_dmul>
 800b5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5ec:	9d01      	ldr	r5, [sp, #4]
 800b5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5f0:	4682      	mov	sl, r0
 800b5f2:	468b      	mov	fp, r1
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	f7f5 fac6 	bl	8000b88 <__aeabi_d2iz>
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	f7f4 ffa9 	bl	8000554 <__aeabi_i2d>
 800b602:	3630      	adds	r6, #48	; 0x30
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4640      	mov	r0, r8
 800b60a:	4649      	mov	r1, r9
 800b60c:	f7f4 fe54 	bl	80002b8 <__aeabi_dsub>
 800b610:	f805 6b01 	strb.w	r6, [r5], #1
 800b614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b616:	429d      	cmp	r5, r3
 800b618:	4680      	mov	r8, r0
 800b61a:	4689      	mov	r9, r1
 800b61c:	f04f 0200 	mov.w	r2, #0
 800b620:	d124      	bne.n	800b66c <_dtoa_r+0x60c>
 800b622:	4b1b      	ldr	r3, [pc, #108]	; (800b690 <_dtoa_r+0x630>)
 800b624:	4650      	mov	r0, sl
 800b626:	4659      	mov	r1, fp
 800b628:	f7f4 fe48 	bl	80002bc <__adddf3>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4640      	mov	r0, r8
 800b632:	4649      	mov	r1, r9
 800b634:	f7f5 fa88 	bl	8000b48 <__aeabi_dcmpgt>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d173      	bne.n	800b724 <_dtoa_r+0x6c4>
 800b63c:	4652      	mov	r2, sl
 800b63e:	465b      	mov	r3, fp
 800b640:	4913      	ldr	r1, [pc, #76]	; (800b690 <_dtoa_r+0x630>)
 800b642:	2000      	movs	r0, #0
 800b644:	f7f4 fe38 	bl	80002b8 <__aeabi_dsub>
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4640      	mov	r0, r8
 800b64e:	4649      	mov	r1, r9
 800b650:	f7f5 fa5c 	bl	8000b0c <__aeabi_dcmplt>
 800b654:	2800      	cmp	r0, #0
 800b656:	f43f af35 	beq.w	800b4c4 <_dtoa_r+0x464>
 800b65a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b65c:	1e6b      	subs	r3, r5, #1
 800b65e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b664:	2b30      	cmp	r3, #48	; 0x30
 800b666:	d0f8      	beq.n	800b65a <_dtoa_r+0x5fa>
 800b668:	9700      	str	r7, [sp, #0]
 800b66a:	e049      	b.n	800b700 <_dtoa_r+0x6a0>
 800b66c:	4b05      	ldr	r3, [pc, #20]	; (800b684 <_dtoa_r+0x624>)
 800b66e:	f7f4 ffdb 	bl	8000628 <__aeabi_dmul>
 800b672:	4680      	mov	r8, r0
 800b674:	4689      	mov	r9, r1
 800b676:	e7bd      	b.n	800b5f4 <_dtoa_r+0x594>
 800b678:	0800f960 	.word	0x0800f960
 800b67c:	0800f938 	.word	0x0800f938
 800b680:	3ff00000 	.word	0x3ff00000
 800b684:	40240000 	.word	0x40240000
 800b688:	401c0000 	.word	0x401c0000
 800b68c:	40140000 	.word	0x40140000
 800b690:	3fe00000 	.word	0x3fe00000
 800b694:	9d01      	ldr	r5, [sp, #4]
 800b696:	4656      	mov	r6, sl
 800b698:	465f      	mov	r7, fp
 800b69a:	4642      	mov	r2, r8
 800b69c:	464b      	mov	r3, r9
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f5 f8eb 	bl	800087c <__aeabi_ddiv>
 800b6a6:	f7f5 fa6f 	bl	8000b88 <__aeabi_d2iz>
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	f7f4 ff52 	bl	8000554 <__aeabi_i2d>
 800b6b0:	4642      	mov	r2, r8
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	f7f4 ffb8 	bl	8000628 <__aeabi_dmul>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b6c4:	f7f4 fdf8 	bl	80002b8 <__aeabi_dsub>
 800b6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6cc:	9e01      	ldr	r6, [sp, #4]
 800b6ce:	9f03      	ldr	r7, [sp, #12]
 800b6d0:	1bae      	subs	r6, r5, r6
 800b6d2:	42b7      	cmp	r7, r6
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	d135      	bne.n	800b746 <_dtoa_r+0x6e6>
 800b6da:	f7f4 fdef 	bl	80002bc <__adddf3>
 800b6de:	4642      	mov	r2, r8
 800b6e0:	464b      	mov	r3, r9
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	f7f5 fa2f 	bl	8000b48 <__aeabi_dcmpgt>
 800b6ea:	b9d0      	cbnz	r0, 800b722 <_dtoa_r+0x6c2>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f5 fa00 	bl	8000af8 <__aeabi_dcmpeq>
 800b6f8:	b110      	cbz	r0, 800b700 <_dtoa_r+0x6a0>
 800b6fa:	f01a 0f01 	tst.w	sl, #1
 800b6fe:	d110      	bne.n	800b722 <_dtoa_r+0x6c2>
 800b700:	4620      	mov	r0, r4
 800b702:	ee18 1a10 	vmov	r1, s16
 800b706:	f000 fae9 	bl	800bcdc <_Bfree>
 800b70a:	2300      	movs	r3, #0
 800b70c:	9800      	ldr	r0, [sp, #0]
 800b70e:	702b      	strb	r3, [r5, #0]
 800b710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b712:	3001      	adds	r0, #1
 800b714:	6018      	str	r0, [r3, #0]
 800b716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f43f acf1 	beq.w	800b100 <_dtoa_r+0xa0>
 800b71e:	601d      	str	r5, [r3, #0]
 800b720:	e4ee      	b.n	800b100 <_dtoa_r+0xa0>
 800b722:	9f00      	ldr	r7, [sp, #0]
 800b724:	462b      	mov	r3, r5
 800b726:	461d      	mov	r5, r3
 800b728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b72c:	2a39      	cmp	r2, #57	; 0x39
 800b72e:	d106      	bne.n	800b73e <_dtoa_r+0x6de>
 800b730:	9a01      	ldr	r2, [sp, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d1f7      	bne.n	800b726 <_dtoa_r+0x6c6>
 800b736:	9901      	ldr	r1, [sp, #4]
 800b738:	2230      	movs	r2, #48	; 0x30
 800b73a:	3701      	adds	r7, #1
 800b73c:	700a      	strb	r2, [r1, #0]
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	3201      	adds	r2, #1
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	e790      	b.n	800b668 <_dtoa_r+0x608>
 800b746:	4ba6      	ldr	r3, [pc, #664]	; (800b9e0 <_dtoa_r+0x980>)
 800b748:	2200      	movs	r2, #0
 800b74a:	f7f4 ff6d 	bl	8000628 <__aeabi_dmul>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	f7f5 f9cf 	bl	8000af8 <__aeabi_dcmpeq>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d09d      	beq.n	800b69a <_dtoa_r+0x63a>
 800b75e:	e7cf      	b.n	800b700 <_dtoa_r+0x6a0>
 800b760:	9a08      	ldr	r2, [sp, #32]
 800b762:	2a00      	cmp	r2, #0
 800b764:	f000 80d7 	beq.w	800b916 <_dtoa_r+0x8b6>
 800b768:	9a06      	ldr	r2, [sp, #24]
 800b76a:	2a01      	cmp	r2, #1
 800b76c:	f300 80ba 	bgt.w	800b8e4 <_dtoa_r+0x884>
 800b770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b772:	2a00      	cmp	r2, #0
 800b774:	f000 80b2 	beq.w	800b8dc <_dtoa_r+0x87c>
 800b778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b77c:	9e07      	ldr	r6, [sp, #28]
 800b77e:	9d04      	ldr	r5, [sp, #16]
 800b780:	9a04      	ldr	r2, [sp, #16]
 800b782:	441a      	add	r2, r3
 800b784:	9204      	str	r2, [sp, #16]
 800b786:	9a05      	ldr	r2, [sp, #20]
 800b788:	2101      	movs	r1, #1
 800b78a:	441a      	add	r2, r3
 800b78c:	4620      	mov	r0, r4
 800b78e:	9205      	str	r2, [sp, #20]
 800b790:	f000 fb5c 	bl	800be4c <__i2b>
 800b794:	4607      	mov	r7, r0
 800b796:	2d00      	cmp	r5, #0
 800b798:	dd0c      	ble.n	800b7b4 <_dtoa_r+0x754>
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd09      	ble.n	800b7b4 <_dtoa_r+0x754>
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	9a04      	ldr	r2, [sp, #16]
 800b7a4:	bfa8      	it	ge
 800b7a6:	462b      	movge	r3, r5
 800b7a8:	1ad2      	subs	r2, r2, r3
 800b7aa:	9204      	str	r2, [sp, #16]
 800b7ac:	9a05      	ldr	r2, [sp, #20]
 800b7ae:	1aed      	subs	r5, r5, r3
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	9b07      	ldr	r3, [sp, #28]
 800b7b6:	b31b      	cbz	r3, 800b800 <_dtoa_r+0x7a0>
 800b7b8:	9b08      	ldr	r3, [sp, #32]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 80af 	beq.w	800b91e <_dtoa_r+0x8be>
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	dd13      	ble.n	800b7ec <_dtoa_r+0x78c>
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fbff 	bl	800bfcc <__pow5mult>
 800b7ce:	ee18 2a10 	vmov	r2, s16
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 fb4e 	bl	800be78 <__multiply>
 800b7dc:	ee18 1a10 	vmov	r1, s16
 800b7e0:	4680      	mov	r8, r0
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fa7a 	bl	800bcdc <_Bfree>
 800b7e8:	ee08 8a10 	vmov	s16, r8
 800b7ec:	9b07      	ldr	r3, [sp, #28]
 800b7ee:	1b9a      	subs	r2, r3, r6
 800b7f0:	d006      	beq.n	800b800 <_dtoa_r+0x7a0>
 800b7f2:	ee18 1a10 	vmov	r1, s16
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 fbe8 	bl	800bfcc <__pow5mult>
 800b7fc:	ee08 0a10 	vmov	s16, r0
 800b800:	2101      	movs	r1, #1
 800b802:	4620      	mov	r0, r4
 800b804:	f000 fb22 	bl	800be4c <__i2b>
 800b808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	4606      	mov	r6, r0
 800b80e:	f340 8088 	ble.w	800b922 <_dtoa_r+0x8c2>
 800b812:	461a      	mov	r2, r3
 800b814:	4601      	mov	r1, r0
 800b816:	4620      	mov	r0, r4
 800b818:	f000 fbd8 	bl	800bfcc <__pow5mult>
 800b81c:	9b06      	ldr	r3, [sp, #24]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	4606      	mov	r6, r0
 800b822:	f340 8081 	ble.w	800b928 <_dtoa_r+0x8c8>
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	6933      	ldr	r3, [r6, #16]
 800b82c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b830:	6918      	ldr	r0, [r3, #16]
 800b832:	f000 fabb 	bl	800bdac <__hi0bits>
 800b836:	f1c0 0020 	rsb	r0, r0, #32
 800b83a:	9b05      	ldr	r3, [sp, #20]
 800b83c:	4418      	add	r0, r3
 800b83e:	f010 001f 	ands.w	r0, r0, #31
 800b842:	f000 8092 	beq.w	800b96a <_dtoa_r+0x90a>
 800b846:	f1c0 0320 	rsb	r3, r0, #32
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	f340 808a 	ble.w	800b964 <_dtoa_r+0x904>
 800b850:	f1c0 001c 	rsb	r0, r0, #28
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	4403      	add	r3, r0
 800b858:	9304      	str	r3, [sp, #16]
 800b85a:	9b05      	ldr	r3, [sp, #20]
 800b85c:	4403      	add	r3, r0
 800b85e:	4405      	add	r5, r0
 800b860:	9305      	str	r3, [sp, #20]
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd07      	ble.n	800b878 <_dtoa_r+0x818>
 800b868:	ee18 1a10 	vmov	r1, s16
 800b86c:	461a      	mov	r2, r3
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 fc06 	bl	800c080 <__lshift>
 800b874:	ee08 0a10 	vmov	s16, r0
 800b878:	9b05      	ldr	r3, [sp, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dd05      	ble.n	800b88a <_dtoa_r+0x82a>
 800b87e:	4631      	mov	r1, r6
 800b880:	461a      	mov	r2, r3
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fbfc 	bl	800c080 <__lshift>
 800b888:	4606      	mov	r6, r0
 800b88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d06e      	beq.n	800b96e <_dtoa_r+0x90e>
 800b890:	ee18 0a10 	vmov	r0, s16
 800b894:	4631      	mov	r1, r6
 800b896:	f000 fc63 	bl	800c160 <__mcmp>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	da67      	bge.n	800b96e <_dtoa_r+0x90e>
 800b89e:	9b00      	ldr	r3, [sp, #0]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	ee18 1a10 	vmov	r1, s16
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 fa37 	bl	800bd20 <__multadd>
 800b8b2:	9b08      	ldr	r3, [sp, #32]
 800b8b4:	ee08 0a10 	vmov	s16, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 81b1 	beq.w	800bc20 <_dtoa_r+0xbc0>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	220a      	movs	r2, #10
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 fa2b 	bl	800bd20 <__multadd>
 800b8ca:	9b02      	ldr	r3, [sp, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	f300 808e 	bgt.w	800b9f0 <_dtoa_r+0x990>
 800b8d4:	9b06      	ldr	r3, [sp, #24]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	dc51      	bgt.n	800b97e <_dtoa_r+0x91e>
 800b8da:	e089      	b.n	800b9f0 <_dtoa_r+0x990>
 800b8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8e2:	e74b      	b.n	800b77c <_dtoa_r+0x71c>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	1e5e      	subs	r6, r3, #1
 800b8e8:	9b07      	ldr	r3, [sp, #28]
 800b8ea:	42b3      	cmp	r3, r6
 800b8ec:	bfbf      	itttt	lt
 800b8ee:	9b07      	ldrlt	r3, [sp, #28]
 800b8f0:	9607      	strlt	r6, [sp, #28]
 800b8f2:	1af2      	sublt	r2, r6, r3
 800b8f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8f6:	bfb6      	itet	lt
 800b8f8:	189b      	addlt	r3, r3, r2
 800b8fa:	1b9e      	subge	r6, r3, r6
 800b8fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	bfb8      	it	lt
 800b902:	2600      	movlt	r6, #0
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfb7      	itett	lt
 800b908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b90c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b910:	1a9d      	sublt	r5, r3, r2
 800b912:	2300      	movlt	r3, #0
 800b914:	e734      	b.n	800b780 <_dtoa_r+0x720>
 800b916:	9e07      	ldr	r6, [sp, #28]
 800b918:	9d04      	ldr	r5, [sp, #16]
 800b91a:	9f08      	ldr	r7, [sp, #32]
 800b91c:	e73b      	b.n	800b796 <_dtoa_r+0x736>
 800b91e:	9a07      	ldr	r2, [sp, #28]
 800b920:	e767      	b.n	800b7f2 <_dtoa_r+0x792>
 800b922:	9b06      	ldr	r3, [sp, #24]
 800b924:	2b01      	cmp	r3, #1
 800b926:	dc18      	bgt.n	800b95a <_dtoa_r+0x8fa>
 800b928:	f1ba 0f00 	cmp.w	sl, #0
 800b92c:	d115      	bne.n	800b95a <_dtoa_r+0x8fa>
 800b92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b932:	b993      	cbnz	r3, 800b95a <_dtoa_r+0x8fa>
 800b934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b938:	0d1b      	lsrs	r3, r3, #20
 800b93a:	051b      	lsls	r3, r3, #20
 800b93c:	b183      	cbz	r3, 800b960 <_dtoa_r+0x900>
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	3301      	adds	r3, #1
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	9b05      	ldr	r3, [sp, #20]
 800b946:	3301      	adds	r3, #1
 800b948:	9305      	str	r3, [sp, #20]
 800b94a:	f04f 0801 	mov.w	r8, #1
 800b94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	f47f af6a 	bne.w	800b82a <_dtoa_r+0x7ca>
 800b956:	2001      	movs	r0, #1
 800b958:	e76f      	b.n	800b83a <_dtoa_r+0x7da>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	e7f6      	b.n	800b94e <_dtoa_r+0x8ee>
 800b960:	4698      	mov	r8, r3
 800b962:	e7f4      	b.n	800b94e <_dtoa_r+0x8ee>
 800b964:	f43f af7d 	beq.w	800b862 <_dtoa_r+0x802>
 800b968:	4618      	mov	r0, r3
 800b96a:	301c      	adds	r0, #28
 800b96c:	e772      	b.n	800b854 <_dtoa_r+0x7f4>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dc37      	bgt.n	800b9e4 <_dtoa_r+0x984>
 800b974:	9b06      	ldr	r3, [sp, #24]
 800b976:	2b02      	cmp	r3, #2
 800b978:	dd34      	ble.n	800b9e4 <_dtoa_r+0x984>
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	9302      	str	r3, [sp, #8]
 800b97e:	9b02      	ldr	r3, [sp, #8]
 800b980:	b96b      	cbnz	r3, 800b99e <_dtoa_r+0x93e>
 800b982:	4631      	mov	r1, r6
 800b984:	2205      	movs	r2, #5
 800b986:	4620      	mov	r0, r4
 800b988:	f000 f9ca 	bl	800bd20 <__multadd>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4606      	mov	r6, r0
 800b990:	ee18 0a10 	vmov	r0, s16
 800b994:	f000 fbe4 	bl	800c160 <__mcmp>
 800b998:	2800      	cmp	r0, #0
 800b99a:	f73f adbb 	bgt.w	800b514 <_dtoa_r+0x4b4>
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	9d01      	ldr	r5, [sp, #4]
 800b9a2:	43db      	mvns	r3, r3
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 f995 	bl	800bcdc <_Bfree>
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	f43f aea4 	beq.w	800b700 <_dtoa_r+0x6a0>
 800b9b8:	f1b8 0f00 	cmp.w	r8, #0
 800b9bc:	d005      	beq.n	800b9ca <_dtoa_r+0x96a>
 800b9be:	45b8      	cmp	r8, r7
 800b9c0:	d003      	beq.n	800b9ca <_dtoa_r+0x96a>
 800b9c2:	4641      	mov	r1, r8
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 f989 	bl	800bcdc <_Bfree>
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 f985 	bl	800bcdc <_Bfree>
 800b9d2:	e695      	b.n	800b700 <_dtoa_r+0x6a0>
 800b9d4:	2600      	movs	r6, #0
 800b9d6:	4637      	mov	r7, r6
 800b9d8:	e7e1      	b.n	800b99e <_dtoa_r+0x93e>
 800b9da:	9700      	str	r7, [sp, #0]
 800b9dc:	4637      	mov	r7, r6
 800b9de:	e599      	b.n	800b514 <_dtoa_r+0x4b4>
 800b9e0:	40240000 	.word	0x40240000
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 80ca 	beq.w	800bb80 <_dtoa_r+0xb20>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	9302      	str	r3, [sp, #8]
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	dd05      	ble.n	800ba00 <_dtoa_r+0x9a0>
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	462a      	mov	r2, r5
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fb41 	bl	800c080 <__lshift>
 800b9fe:	4607      	mov	r7, r0
 800ba00:	f1b8 0f00 	cmp.w	r8, #0
 800ba04:	d05b      	beq.n	800babe <_dtoa_r+0xa5e>
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 f927 	bl	800bc5c <_Balloc>
 800ba0e:	4605      	mov	r5, r0
 800ba10:	b928      	cbnz	r0, 800ba1e <_dtoa_r+0x9be>
 800ba12:	4b87      	ldr	r3, [pc, #540]	; (800bc30 <_dtoa_r+0xbd0>)
 800ba14:	4602      	mov	r2, r0
 800ba16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba1a:	f7ff bb3b 	b.w	800b094 <_dtoa_r+0x34>
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	3202      	adds	r2, #2
 800ba22:	0092      	lsls	r2, r2, #2
 800ba24:	f107 010c 	add.w	r1, r7, #12
 800ba28:	300c      	adds	r0, #12
 800ba2a:	f7fe fcfd 	bl	800a428 <memcpy>
 800ba2e:	2201      	movs	r2, #1
 800ba30:	4629      	mov	r1, r5
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 fb24 	bl	800c080 <__lshift>
 800ba38:	9b01      	ldr	r3, [sp, #4]
 800ba3a:	f103 0901 	add.w	r9, r3, #1
 800ba3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba42:	4413      	add	r3, r2
 800ba44:	9305      	str	r3, [sp, #20]
 800ba46:	f00a 0301 	and.w	r3, sl, #1
 800ba4a:	46b8      	mov	r8, r7
 800ba4c:	9304      	str	r3, [sp, #16]
 800ba4e:	4607      	mov	r7, r0
 800ba50:	4631      	mov	r1, r6
 800ba52:	ee18 0a10 	vmov	r0, s16
 800ba56:	f7ff fa77 	bl	800af48 <quorem>
 800ba5a:	4641      	mov	r1, r8
 800ba5c:	9002      	str	r0, [sp, #8]
 800ba5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba62:	ee18 0a10 	vmov	r0, s16
 800ba66:	f000 fb7b 	bl	800c160 <__mcmp>
 800ba6a:	463a      	mov	r2, r7
 800ba6c:	9003      	str	r0, [sp, #12]
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4620      	mov	r0, r4
 800ba72:	f000 fb91 	bl	800c198 <__mdiff>
 800ba76:	68c2      	ldr	r2, [r0, #12]
 800ba78:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	bb02      	cbnz	r2, 800bac2 <_dtoa_r+0xa62>
 800ba80:	4601      	mov	r1, r0
 800ba82:	ee18 0a10 	vmov	r0, s16
 800ba86:	f000 fb6b 	bl	800c160 <__mcmp>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	4620      	mov	r0, r4
 800ba90:	9207      	str	r2, [sp, #28]
 800ba92:	f000 f923 	bl	800bcdc <_Bfree>
 800ba96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba9a:	ea43 0102 	orr.w	r1, r3, r2
 800ba9e:	9b04      	ldr	r3, [sp, #16]
 800baa0:	430b      	orrs	r3, r1
 800baa2:	464d      	mov	r5, r9
 800baa4:	d10f      	bne.n	800bac6 <_dtoa_r+0xa66>
 800baa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baaa:	d02a      	beq.n	800bb02 <_dtoa_r+0xaa2>
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd02      	ble.n	800bab8 <_dtoa_r+0xa58>
 800bab2:	9b02      	ldr	r3, [sp, #8]
 800bab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bab8:	f88b a000 	strb.w	sl, [fp]
 800babc:	e775      	b.n	800b9aa <_dtoa_r+0x94a>
 800babe:	4638      	mov	r0, r7
 800bac0:	e7ba      	b.n	800ba38 <_dtoa_r+0x9d8>
 800bac2:	2201      	movs	r2, #1
 800bac4:	e7e2      	b.n	800ba8c <_dtoa_r+0xa2c>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	db04      	blt.n	800bad6 <_dtoa_r+0xa76>
 800bacc:	9906      	ldr	r1, [sp, #24]
 800bace:	430b      	orrs	r3, r1
 800bad0:	9904      	ldr	r1, [sp, #16]
 800bad2:	430b      	orrs	r3, r1
 800bad4:	d122      	bne.n	800bb1c <_dtoa_r+0xabc>
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	ddee      	ble.n	800bab8 <_dtoa_r+0xa58>
 800bada:	ee18 1a10 	vmov	r1, s16
 800bade:	2201      	movs	r2, #1
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 facd 	bl	800c080 <__lshift>
 800bae6:	4631      	mov	r1, r6
 800bae8:	ee08 0a10 	vmov	s16, r0
 800baec:	f000 fb38 	bl	800c160 <__mcmp>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	dc03      	bgt.n	800bafc <_dtoa_r+0xa9c>
 800baf4:	d1e0      	bne.n	800bab8 <_dtoa_r+0xa58>
 800baf6:	f01a 0f01 	tst.w	sl, #1
 800bafa:	d0dd      	beq.n	800bab8 <_dtoa_r+0xa58>
 800bafc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb00:	d1d7      	bne.n	800bab2 <_dtoa_r+0xa52>
 800bb02:	2339      	movs	r3, #57	; 0x39
 800bb04:	f88b 3000 	strb.w	r3, [fp]
 800bb08:	462b      	mov	r3, r5
 800bb0a:	461d      	mov	r5, r3
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb12:	2a39      	cmp	r2, #57	; 0x39
 800bb14:	d071      	beq.n	800bbfa <_dtoa_r+0xb9a>
 800bb16:	3201      	adds	r2, #1
 800bb18:	701a      	strb	r2, [r3, #0]
 800bb1a:	e746      	b.n	800b9aa <_dtoa_r+0x94a>
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	dd07      	ble.n	800bb30 <_dtoa_r+0xad0>
 800bb20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb24:	d0ed      	beq.n	800bb02 <_dtoa_r+0xaa2>
 800bb26:	f10a 0301 	add.w	r3, sl, #1
 800bb2a:	f88b 3000 	strb.w	r3, [fp]
 800bb2e:	e73c      	b.n	800b9aa <_dtoa_r+0x94a>
 800bb30:	9b05      	ldr	r3, [sp, #20]
 800bb32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb36:	4599      	cmp	r9, r3
 800bb38:	d047      	beq.n	800bbca <_dtoa_r+0xb6a>
 800bb3a:	ee18 1a10 	vmov	r1, s16
 800bb3e:	2300      	movs	r3, #0
 800bb40:	220a      	movs	r2, #10
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f8ec 	bl	800bd20 <__multadd>
 800bb48:	45b8      	cmp	r8, r7
 800bb4a:	ee08 0a10 	vmov	s16, r0
 800bb4e:	f04f 0300 	mov.w	r3, #0
 800bb52:	f04f 020a 	mov.w	r2, #10
 800bb56:	4641      	mov	r1, r8
 800bb58:	4620      	mov	r0, r4
 800bb5a:	d106      	bne.n	800bb6a <_dtoa_r+0xb0a>
 800bb5c:	f000 f8e0 	bl	800bd20 <__multadd>
 800bb60:	4680      	mov	r8, r0
 800bb62:	4607      	mov	r7, r0
 800bb64:	f109 0901 	add.w	r9, r9, #1
 800bb68:	e772      	b.n	800ba50 <_dtoa_r+0x9f0>
 800bb6a:	f000 f8d9 	bl	800bd20 <__multadd>
 800bb6e:	4639      	mov	r1, r7
 800bb70:	4680      	mov	r8, r0
 800bb72:	2300      	movs	r3, #0
 800bb74:	220a      	movs	r2, #10
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 f8d2 	bl	800bd20 <__multadd>
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	e7f1      	b.n	800bb64 <_dtoa_r+0xb04>
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	9302      	str	r3, [sp, #8]
 800bb84:	9d01      	ldr	r5, [sp, #4]
 800bb86:	ee18 0a10 	vmov	r0, s16
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	f7ff f9dc 	bl	800af48 <quorem>
 800bb90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	f805 ab01 	strb.w	sl, [r5], #1
 800bb9a:	1aea      	subs	r2, r5, r3
 800bb9c:	9b02      	ldr	r3, [sp, #8]
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	dd09      	ble.n	800bbb6 <_dtoa_r+0xb56>
 800bba2:	ee18 1a10 	vmov	r1, s16
 800bba6:	2300      	movs	r3, #0
 800bba8:	220a      	movs	r2, #10
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f8b8 	bl	800bd20 <__multadd>
 800bbb0:	ee08 0a10 	vmov	s16, r0
 800bbb4:	e7e7      	b.n	800bb86 <_dtoa_r+0xb26>
 800bbb6:	9b02      	ldr	r3, [sp, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bfc8      	it	gt
 800bbbc:	461d      	movgt	r5, r3
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	bfd8      	it	le
 800bbc2:	2501      	movle	r5, #1
 800bbc4:	441d      	add	r5, r3
 800bbc6:	f04f 0800 	mov.w	r8, #0
 800bbca:	ee18 1a10 	vmov	r1, s16
 800bbce:	2201      	movs	r2, #1
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 fa55 	bl	800c080 <__lshift>
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	ee08 0a10 	vmov	s16, r0
 800bbdc:	f000 fac0 	bl	800c160 <__mcmp>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	dc91      	bgt.n	800bb08 <_dtoa_r+0xaa8>
 800bbe4:	d102      	bne.n	800bbec <_dtoa_r+0xb8c>
 800bbe6:	f01a 0f01 	tst.w	sl, #1
 800bbea:	d18d      	bne.n	800bb08 <_dtoa_r+0xaa8>
 800bbec:	462b      	mov	r3, r5
 800bbee:	461d      	mov	r5, r3
 800bbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbf4:	2a30      	cmp	r2, #48	; 0x30
 800bbf6:	d0fa      	beq.n	800bbee <_dtoa_r+0xb8e>
 800bbf8:	e6d7      	b.n	800b9aa <_dtoa_r+0x94a>
 800bbfa:	9a01      	ldr	r2, [sp, #4]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d184      	bne.n	800bb0a <_dtoa_r+0xaaa>
 800bc00:	9b00      	ldr	r3, [sp, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	2331      	movs	r3, #49	; 0x31
 800bc08:	7013      	strb	r3, [r2, #0]
 800bc0a:	e6ce      	b.n	800b9aa <_dtoa_r+0x94a>
 800bc0c:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <_dtoa_r+0xbd4>)
 800bc0e:	f7ff ba95 	b.w	800b13c <_dtoa_r+0xdc>
 800bc12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f47f aa6e 	bne.w	800b0f6 <_dtoa_r+0x96>
 800bc1a:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <_dtoa_r+0xbd8>)
 800bc1c:	f7ff ba8e 	b.w	800b13c <_dtoa_r+0xdc>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dcae      	bgt.n	800bb84 <_dtoa_r+0xb24>
 800bc26:	9b06      	ldr	r3, [sp, #24]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	f73f aea8 	bgt.w	800b97e <_dtoa_r+0x91e>
 800bc2e:	e7a9      	b.n	800bb84 <_dtoa_r+0xb24>
 800bc30:	0800f8cb 	.word	0x0800f8cb
 800bc34:	0800f828 	.word	0x0800f828
 800bc38:	0800f84c 	.word	0x0800f84c

0800bc3c <_localeconv_r>:
 800bc3c:	4800      	ldr	r0, [pc, #0]	; (800bc40 <_localeconv_r+0x4>)
 800bc3e:	4770      	bx	lr
 800bc40:	2000017c 	.word	0x2000017c

0800bc44 <__malloc_lock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <__malloc_lock+0x8>)
 800bc46:	f000 bd30 	b.w	800c6aa <__retarget_lock_acquire_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	200133d8 	.word	0x200133d8

0800bc50 <__malloc_unlock>:
 800bc50:	4801      	ldr	r0, [pc, #4]	; (800bc58 <__malloc_unlock+0x8>)
 800bc52:	f000 bd2b 	b.w	800c6ac <__retarget_lock_release_recursive>
 800bc56:	bf00      	nop
 800bc58:	200133d8 	.word	0x200133d8

0800bc5c <_Balloc>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	b976      	cbnz	r6, 800bc84 <_Balloc+0x28>
 800bc66:	2010      	movs	r0, #16
 800bc68:	f7fe fbd6 	bl	800a418 <malloc>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	6260      	str	r0, [r4, #36]	; 0x24
 800bc70:	b920      	cbnz	r0, 800bc7c <_Balloc+0x20>
 800bc72:	4b18      	ldr	r3, [pc, #96]	; (800bcd4 <_Balloc+0x78>)
 800bc74:	4818      	ldr	r0, [pc, #96]	; (800bcd8 <_Balloc+0x7c>)
 800bc76:	2166      	movs	r1, #102	; 0x66
 800bc78:	f000 fce6 	bl	800c648 <__assert_func>
 800bc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc80:	6006      	str	r6, [r0, #0]
 800bc82:	60c6      	str	r6, [r0, #12]
 800bc84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc86:	68f3      	ldr	r3, [r6, #12]
 800bc88:	b183      	cbz	r3, 800bcac <_Balloc+0x50>
 800bc8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc92:	b9b8      	cbnz	r0, 800bcc4 <_Balloc+0x68>
 800bc94:	2101      	movs	r1, #1
 800bc96:	fa01 f605 	lsl.w	r6, r1, r5
 800bc9a:	1d72      	adds	r2, r6, #5
 800bc9c:	0092      	lsls	r2, r2, #2
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fb60 	bl	800c364 <_calloc_r>
 800bca4:	b160      	cbz	r0, 800bcc0 <_Balloc+0x64>
 800bca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcaa:	e00e      	b.n	800bcca <_Balloc+0x6e>
 800bcac:	2221      	movs	r2, #33	; 0x21
 800bcae:	2104      	movs	r1, #4
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 fb57 	bl	800c364 <_calloc_r>
 800bcb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcb8:	60f0      	str	r0, [r6, #12]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e4      	bne.n	800bc8a <_Balloc+0x2e>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	6802      	ldr	r2, [r0, #0]
 800bcc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcca:	2300      	movs	r3, #0
 800bccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcd0:	e7f7      	b.n	800bcc2 <_Balloc+0x66>
 800bcd2:	bf00      	nop
 800bcd4:	0800f859 	.word	0x0800f859
 800bcd8:	0800f8dc 	.word	0x0800f8dc

0800bcdc <_Bfree>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bce0:	4605      	mov	r5, r0
 800bce2:	460c      	mov	r4, r1
 800bce4:	b976      	cbnz	r6, 800bd04 <_Bfree+0x28>
 800bce6:	2010      	movs	r0, #16
 800bce8:	f7fe fb96 	bl	800a418 <malloc>
 800bcec:	4602      	mov	r2, r0
 800bcee:	6268      	str	r0, [r5, #36]	; 0x24
 800bcf0:	b920      	cbnz	r0, 800bcfc <_Bfree+0x20>
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <_Bfree+0x3c>)
 800bcf4:	4809      	ldr	r0, [pc, #36]	; (800bd1c <_Bfree+0x40>)
 800bcf6:	218a      	movs	r1, #138	; 0x8a
 800bcf8:	f000 fca6 	bl	800c648 <__assert_func>
 800bcfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd00:	6006      	str	r6, [r0, #0]
 800bd02:	60c6      	str	r6, [r0, #12]
 800bd04:	b13c      	cbz	r4, 800bd16 <_Bfree+0x3a>
 800bd06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd08:	6862      	ldr	r2, [r4, #4]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd10:	6021      	str	r1, [r4, #0]
 800bd12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	0800f859 	.word	0x0800f859
 800bd1c:	0800f8dc 	.word	0x0800f8dc

0800bd20 <__multadd>:
 800bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd24:	690d      	ldr	r5, [r1, #16]
 800bd26:	4607      	mov	r7, r0
 800bd28:	460c      	mov	r4, r1
 800bd2a:	461e      	mov	r6, r3
 800bd2c:	f101 0c14 	add.w	ip, r1, #20
 800bd30:	2000      	movs	r0, #0
 800bd32:	f8dc 3000 	ldr.w	r3, [ip]
 800bd36:	b299      	uxth	r1, r3
 800bd38:	fb02 6101 	mla	r1, r2, r1, r6
 800bd3c:	0c1e      	lsrs	r6, r3, #16
 800bd3e:	0c0b      	lsrs	r3, r1, #16
 800bd40:	fb02 3306 	mla	r3, r2, r6, r3
 800bd44:	b289      	uxth	r1, r1
 800bd46:	3001      	adds	r0, #1
 800bd48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd4c:	4285      	cmp	r5, r0
 800bd4e:	f84c 1b04 	str.w	r1, [ip], #4
 800bd52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd56:	dcec      	bgt.n	800bd32 <__multadd+0x12>
 800bd58:	b30e      	cbz	r6, 800bd9e <__multadd+0x7e>
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	42ab      	cmp	r3, r5
 800bd5e:	dc19      	bgt.n	800bd94 <__multadd+0x74>
 800bd60:	6861      	ldr	r1, [r4, #4]
 800bd62:	4638      	mov	r0, r7
 800bd64:	3101      	adds	r1, #1
 800bd66:	f7ff ff79 	bl	800bc5c <_Balloc>
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	b928      	cbnz	r0, 800bd7a <__multadd+0x5a>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	4b0c      	ldr	r3, [pc, #48]	; (800bda4 <__multadd+0x84>)
 800bd72:	480d      	ldr	r0, [pc, #52]	; (800bda8 <__multadd+0x88>)
 800bd74:	21b5      	movs	r1, #181	; 0xb5
 800bd76:	f000 fc67 	bl	800c648 <__assert_func>
 800bd7a:	6922      	ldr	r2, [r4, #16]
 800bd7c:	3202      	adds	r2, #2
 800bd7e:	f104 010c 	add.w	r1, r4, #12
 800bd82:	0092      	lsls	r2, r2, #2
 800bd84:	300c      	adds	r0, #12
 800bd86:	f7fe fb4f 	bl	800a428 <memcpy>
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	f7ff ffa5 	bl	800bcdc <_Bfree>
 800bd92:	4644      	mov	r4, r8
 800bd94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd98:	3501      	adds	r5, #1
 800bd9a:	615e      	str	r6, [r3, #20]
 800bd9c:	6125      	str	r5, [r4, #16]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	0800f8cb 	.word	0x0800f8cb
 800bda8:	0800f8dc 	.word	0x0800f8dc

0800bdac <__hi0bits>:
 800bdac:	0c03      	lsrs	r3, r0, #16
 800bdae:	041b      	lsls	r3, r3, #16
 800bdb0:	b9d3      	cbnz	r3, 800bde8 <__hi0bits+0x3c>
 800bdb2:	0400      	lsls	r0, r0, #16
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdba:	bf04      	itt	eq
 800bdbc:	0200      	lsleq	r0, r0, #8
 800bdbe:	3308      	addeq	r3, #8
 800bdc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdc4:	bf04      	itt	eq
 800bdc6:	0100      	lsleq	r0, r0, #4
 800bdc8:	3304      	addeq	r3, #4
 800bdca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdce:	bf04      	itt	eq
 800bdd0:	0080      	lsleq	r0, r0, #2
 800bdd2:	3302      	addeq	r3, #2
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	db05      	blt.n	800bde4 <__hi0bits+0x38>
 800bdd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bddc:	f103 0301 	add.w	r3, r3, #1
 800bde0:	bf08      	it	eq
 800bde2:	2320      	moveq	r3, #32
 800bde4:	4618      	mov	r0, r3
 800bde6:	4770      	bx	lr
 800bde8:	2300      	movs	r3, #0
 800bdea:	e7e4      	b.n	800bdb6 <__hi0bits+0xa>

0800bdec <__lo0bits>:
 800bdec:	6803      	ldr	r3, [r0, #0]
 800bdee:	f013 0207 	ands.w	r2, r3, #7
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	d00b      	beq.n	800be0e <__lo0bits+0x22>
 800bdf6:	07da      	lsls	r2, r3, #31
 800bdf8:	d423      	bmi.n	800be42 <__lo0bits+0x56>
 800bdfa:	0798      	lsls	r0, r3, #30
 800bdfc:	bf49      	itett	mi
 800bdfe:	085b      	lsrmi	r3, r3, #1
 800be00:	089b      	lsrpl	r3, r3, #2
 800be02:	2001      	movmi	r0, #1
 800be04:	600b      	strmi	r3, [r1, #0]
 800be06:	bf5c      	itt	pl
 800be08:	600b      	strpl	r3, [r1, #0]
 800be0a:	2002      	movpl	r0, #2
 800be0c:	4770      	bx	lr
 800be0e:	b298      	uxth	r0, r3
 800be10:	b9a8      	cbnz	r0, 800be3e <__lo0bits+0x52>
 800be12:	0c1b      	lsrs	r3, r3, #16
 800be14:	2010      	movs	r0, #16
 800be16:	b2da      	uxtb	r2, r3
 800be18:	b90a      	cbnz	r2, 800be1e <__lo0bits+0x32>
 800be1a:	3008      	adds	r0, #8
 800be1c:	0a1b      	lsrs	r3, r3, #8
 800be1e:	071a      	lsls	r2, r3, #28
 800be20:	bf04      	itt	eq
 800be22:	091b      	lsreq	r3, r3, #4
 800be24:	3004      	addeq	r0, #4
 800be26:	079a      	lsls	r2, r3, #30
 800be28:	bf04      	itt	eq
 800be2a:	089b      	lsreq	r3, r3, #2
 800be2c:	3002      	addeq	r0, #2
 800be2e:	07da      	lsls	r2, r3, #31
 800be30:	d403      	bmi.n	800be3a <__lo0bits+0x4e>
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	f100 0001 	add.w	r0, r0, #1
 800be38:	d005      	beq.n	800be46 <__lo0bits+0x5a>
 800be3a:	600b      	str	r3, [r1, #0]
 800be3c:	4770      	bx	lr
 800be3e:	4610      	mov	r0, r2
 800be40:	e7e9      	b.n	800be16 <__lo0bits+0x2a>
 800be42:	2000      	movs	r0, #0
 800be44:	4770      	bx	lr
 800be46:	2020      	movs	r0, #32
 800be48:	4770      	bx	lr
	...

0800be4c <__i2b>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	460c      	mov	r4, r1
 800be50:	2101      	movs	r1, #1
 800be52:	f7ff ff03 	bl	800bc5c <_Balloc>
 800be56:	4602      	mov	r2, r0
 800be58:	b928      	cbnz	r0, 800be66 <__i2b+0x1a>
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <__i2b+0x24>)
 800be5c:	4805      	ldr	r0, [pc, #20]	; (800be74 <__i2b+0x28>)
 800be5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be62:	f000 fbf1 	bl	800c648 <__assert_func>
 800be66:	2301      	movs	r3, #1
 800be68:	6144      	str	r4, [r0, #20]
 800be6a:	6103      	str	r3, [r0, #16]
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	bf00      	nop
 800be70:	0800f8cb 	.word	0x0800f8cb
 800be74:	0800f8dc 	.word	0x0800f8dc

0800be78 <__multiply>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	4691      	mov	r9, r2
 800be7e:	690a      	ldr	r2, [r1, #16]
 800be80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be84:	429a      	cmp	r2, r3
 800be86:	bfb8      	it	lt
 800be88:	460b      	movlt	r3, r1
 800be8a:	460c      	mov	r4, r1
 800be8c:	bfbc      	itt	lt
 800be8e:	464c      	movlt	r4, r9
 800be90:	4699      	movlt	r9, r3
 800be92:	6927      	ldr	r7, [r4, #16]
 800be94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	6861      	ldr	r1, [r4, #4]
 800be9c:	eb07 060a 	add.w	r6, r7, sl
 800bea0:	42b3      	cmp	r3, r6
 800bea2:	b085      	sub	sp, #20
 800bea4:	bfb8      	it	lt
 800bea6:	3101      	addlt	r1, #1
 800bea8:	f7ff fed8 	bl	800bc5c <_Balloc>
 800beac:	b930      	cbnz	r0, 800bebc <__multiply+0x44>
 800beae:	4602      	mov	r2, r0
 800beb0:	4b44      	ldr	r3, [pc, #272]	; (800bfc4 <__multiply+0x14c>)
 800beb2:	4845      	ldr	r0, [pc, #276]	; (800bfc8 <__multiply+0x150>)
 800beb4:	f240 115d 	movw	r1, #349	; 0x15d
 800beb8:	f000 fbc6 	bl	800c648 <__assert_func>
 800bebc:	f100 0514 	add.w	r5, r0, #20
 800bec0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bec4:	462b      	mov	r3, r5
 800bec6:	2200      	movs	r2, #0
 800bec8:	4543      	cmp	r3, r8
 800beca:	d321      	bcc.n	800bf10 <__multiply+0x98>
 800becc:	f104 0314 	add.w	r3, r4, #20
 800bed0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bed4:	f109 0314 	add.w	r3, r9, #20
 800bed8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bedc:	9202      	str	r2, [sp, #8]
 800bede:	1b3a      	subs	r2, r7, r4
 800bee0:	3a15      	subs	r2, #21
 800bee2:	f022 0203 	bic.w	r2, r2, #3
 800bee6:	3204      	adds	r2, #4
 800bee8:	f104 0115 	add.w	r1, r4, #21
 800beec:	428f      	cmp	r7, r1
 800beee:	bf38      	it	cc
 800bef0:	2204      	movcc	r2, #4
 800bef2:	9201      	str	r2, [sp, #4]
 800bef4:	9a02      	ldr	r2, [sp, #8]
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d80c      	bhi.n	800bf16 <__multiply+0x9e>
 800befc:	2e00      	cmp	r6, #0
 800befe:	dd03      	ble.n	800bf08 <__multiply+0x90>
 800bf00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d05a      	beq.n	800bfbe <__multiply+0x146>
 800bf08:	6106      	str	r6, [r0, #16]
 800bf0a:	b005      	add	sp, #20
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf10:	f843 2b04 	str.w	r2, [r3], #4
 800bf14:	e7d8      	b.n	800bec8 <__multiply+0x50>
 800bf16:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf1a:	f1ba 0f00 	cmp.w	sl, #0
 800bf1e:	d024      	beq.n	800bf6a <__multiply+0xf2>
 800bf20:	f104 0e14 	add.w	lr, r4, #20
 800bf24:	46a9      	mov	r9, r5
 800bf26:	f04f 0c00 	mov.w	ip, #0
 800bf2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf2e:	f8d9 1000 	ldr.w	r1, [r9]
 800bf32:	fa1f fb82 	uxth.w	fp, r2
 800bf36:	b289      	uxth	r1, r1
 800bf38:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf40:	f8d9 2000 	ldr.w	r2, [r9]
 800bf44:	4461      	add	r1, ip
 800bf46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf52:	b289      	uxth	r1, r1
 800bf54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf58:	4577      	cmp	r7, lr
 800bf5a:	f849 1b04 	str.w	r1, [r9], #4
 800bf5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf62:	d8e2      	bhi.n	800bf2a <__multiply+0xb2>
 800bf64:	9a01      	ldr	r2, [sp, #4]
 800bf66:	f845 c002 	str.w	ip, [r5, r2]
 800bf6a:	9a03      	ldr	r2, [sp, #12]
 800bf6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf70:	3304      	adds	r3, #4
 800bf72:	f1b9 0f00 	cmp.w	r9, #0
 800bf76:	d020      	beq.n	800bfba <__multiply+0x142>
 800bf78:	6829      	ldr	r1, [r5, #0]
 800bf7a:	f104 0c14 	add.w	ip, r4, #20
 800bf7e:	46ae      	mov	lr, r5
 800bf80:	f04f 0a00 	mov.w	sl, #0
 800bf84:	f8bc b000 	ldrh.w	fp, [ip]
 800bf88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf8c:	fb09 220b 	mla	r2, r9, fp, r2
 800bf90:	4492      	add	sl, r2
 800bf92:	b289      	uxth	r1, r1
 800bf94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bf98:	f84e 1b04 	str.w	r1, [lr], #4
 800bf9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfa0:	f8be 1000 	ldrh.w	r1, [lr]
 800bfa4:	0c12      	lsrs	r2, r2, #16
 800bfa6:	fb09 1102 	mla	r1, r9, r2, r1
 800bfaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfae:	4567      	cmp	r7, ip
 800bfb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfb4:	d8e6      	bhi.n	800bf84 <__multiply+0x10c>
 800bfb6:	9a01      	ldr	r2, [sp, #4]
 800bfb8:	50a9      	str	r1, [r5, r2]
 800bfba:	3504      	adds	r5, #4
 800bfbc:	e79a      	b.n	800bef4 <__multiply+0x7c>
 800bfbe:	3e01      	subs	r6, #1
 800bfc0:	e79c      	b.n	800befc <__multiply+0x84>
 800bfc2:	bf00      	nop
 800bfc4:	0800f8cb 	.word	0x0800f8cb
 800bfc8:	0800f8dc 	.word	0x0800f8dc

0800bfcc <__pow5mult>:
 800bfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd0:	4615      	mov	r5, r2
 800bfd2:	f012 0203 	ands.w	r2, r2, #3
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	d007      	beq.n	800bfec <__pow5mult+0x20>
 800bfdc:	4c25      	ldr	r4, [pc, #148]	; (800c074 <__pow5mult+0xa8>)
 800bfde:	3a01      	subs	r2, #1
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfe6:	f7ff fe9b 	bl	800bd20 <__multadd>
 800bfea:	4607      	mov	r7, r0
 800bfec:	10ad      	asrs	r5, r5, #2
 800bfee:	d03d      	beq.n	800c06c <__pow5mult+0xa0>
 800bff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bff2:	b97c      	cbnz	r4, 800c014 <__pow5mult+0x48>
 800bff4:	2010      	movs	r0, #16
 800bff6:	f7fe fa0f 	bl	800a418 <malloc>
 800bffa:	4602      	mov	r2, r0
 800bffc:	6270      	str	r0, [r6, #36]	; 0x24
 800bffe:	b928      	cbnz	r0, 800c00c <__pow5mult+0x40>
 800c000:	4b1d      	ldr	r3, [pc, #116]	; (800c078 <__pow5mult+0xac>)
 800c002:	481e      	ldr	r0, [pc, #120]	; (800c07c <__pow5mult+0xb0>)
 800c004:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c008:	f000 fb1e 	bl	800c648 <__assert_func>
 800c00c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c010:	6004      	str	r4, [r0, #0]
 800c012:	60c4      	str	r4, [r0, #12]
 800c014:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c018:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c01c:	b94c      	cbnz	r4, 800c032 <__pow5mult+0x66>
 800c01e:	f240 2171 	movw	r1, #625	; 0x271
 800c022:	4630      	mov	r0, r6
 800c024:	f7ff ff12 	bl	800be4c <__i2b>
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c02e:	4604      	mov	r4, r0
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	f04f 0900 	mov.w	r9, #0
 800c036:	07eb      	lsls	r3, r5, #31
 800c038:	d50a      	bpl.n	800c050 <__pow5mult+0x84>
 800c03a:	4639      	mov	r1, r7
 800c03c:	4622      	mov	r2, r4
 800c03e:	4630      	mov	r0, r6
 800c040:	f7ff ff1a 	bl	800be78 <__multiply>
 800c044:	4639      	mov	r1, r7
 800c046:	4680      	mov	r8, r0
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fe47 	bl	800bcdc <_Bfree>
 800c04e:	4647      	mov	r7, r8
 800c050:	106d      	asrs	r5, r5, #1
 800c052:	d00b      	beq.n	800c06c <__pow5mult+0xa0>
 800c054:	6820      	ldr	r0, [r4, #0]
 800c056:	b938      	cbnz	r0, 800c068 <__pow5mult+0x9c>
 800c058:	4622      	mov	r2, r4
 800c05a:	4621      	mov	r1, r4
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff ff0b 	bl	800be78 <__multiply>
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	f8c0 9000 	str.w	r9, [r0]
 800c068:	4604      	mov	r4, r0
 800c06a:	e7e4      	b.n	800c036 <__pow5mult+0x6a>
 800c06c:	4638      	mov	r0, r7
 800c06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c072:	bf00      	nop
 800c074:	0800fa28 	.word	0x0800fa28
 800c078:	0800f859 	.word	0x0800f859
 800c07c:	0800f8dc 	.word	0x0800f8dc

0800c080 <__lshift>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	460c      	mov	r4, r1
 800c086:	6849      	ldr	r1, [r1, #4]
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	4607      	mov	r7, r0
 800c092:	4691      	mov	r9, r2
 800c094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c098:	f108 0601 	add.w	r6, r8, #1
 800c09c:	42b3      	cmp	r3, r6
 800c09e:	db0b      	blt.n	800c0b8 <__lshift+0x38>
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff fddb 	bl	800bc5c <_Balloc>
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	b948      	cbnz	r0, 800c0be <__lshift+0x3e>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <__lshift+0xd8>)
 800c0ae:	482b      	ldr	r0, [pc, #172]	; (800c15c <__lshift+0xdc>)
 800c0b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0b4:	f000 fac8 	bl	800c648 <__assert_func>
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	e7ee      	b.n	800c09c <__lshift+0x1c>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f100 0114 	add.w	r1, r0, #20
 800c0c4:	f100 0210 	add.w	r2, r0, #16
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	4553      	cmp	r3, sl
 800c0cc:	db37      	blt.n	800c13e <__lshift+0xbe>
 800c0ce:	6920      	ldr	r0, [r4, #16]
 800c0d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0d4:	f104 0314 	add.w	r3, r4, #20
 800c0d8:	f019 091f 	ands.w	r9, r9, #31
 800c0dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0e4:	d02f      	beq.n	800c146 <__lshift+0xc6>
 800c0e6:	f1c9 0e20 	rsb	lr, r9, #32
 800c0ea:	468a      	mov	sl, r1
 800c0ec:	f04f 0c00 	mov.w	ip, #0
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	fa02 f209 	lsl.w	r2, r2, r9
 800c0f6:	ea42 020c 	orr.w	r2, r2, ip
 800c0fa:	f84a 2b04 	str.w	r2, [sl], #4
 800c0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c102:	4298      	cmp	r0, r3
 800c104:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c108:	d8f2      	bhi.n	800c0f0 <__lshift+0x70>
 800c10a:	1b03      	subs	r3, r0, r4
 800c10c:	3b15      	subs	r3, #21
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	3304      	adds	r3, #4
 800c114:	f104 0215 	add.w	r2, r4, #21
 800c118:	4290      	cmp	r0, r2
 800c11a:	bf38      	it	cc
 800c11c:	2304      	movcc	r3, #4
 800c11e:	f841 c003 	str.w	ip, [r1, r3]
 800c122:	f1bc 0f00 	cmp.w	ip, #0
 800c126:	d001      	beq.n	800c12c <__lshift+0xac>
 800c128:	f108 0602 	add.w	r6, r8, #2
 800c12c:	3e01      	subs	r6, #1
 800c12e:	4638      	mov	r0, r7
 800c130:	612e      	str	r6, [r5, #16]
 800c132:	4621      	mov	r1, r4
 800c134:	f7ff fdd2 	bl	800bcdc <_Bfree>
 800c138:	4628      	mov	r0, r5
 800c13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c142:	3301      	adds	r3, #1
 800c144:	e7c1      	b.n	800c0ca <__lshift+0x4a>
 800c146:	3904      	subs	r1, #4
 800c148:	f853 2b04 	ldr.w	r2, [r3], #4
 800c14c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c150:	4298      	cmp	r0, r3
 800c152:	d8f9      	bhi.n	800c148 <__lshift+0xc8>
 800c154:	e7ea      	b.n	800c12c <__lshift+0xac>
 800c156:	bf00      	nop
 800c158:	0800f8cb 	.word	0x0800f8cb
 800c15c:	0800f8dc 	.word	0x0800f8dc

0800c160 <__mcmp>:
 800c160:	b530      	push	{r4, r5, lr}
 800c162:	6902      	ldr	r2, [r0, #16]
 800c164:	690c      	ldr	r4, [r1, #16]
 800c166:	1b12      	subs	r2, r2, r4
 800c168:	d10e      	bne.n	800c188 <__mcmp+0x28>
 800c16a:	f100 0314 	add.w	r3, r0, #20
 800c16e:	3114      	adds	r1, #20
 800c170:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c174:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c178:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c17c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c180:	42a5      	cmp	r5, r4
 800c182:	d003      	beq.n	800c18c <__mcmp+0x2c>
 800c184:	d305      	bcc.n	800c192 <__mcmp+0x32>
 800c186:	2201      	movs	r2, #1
 800c188:	4610      	mov	r0, r2
 800c18a:	bd30      	pop	{r4, r5, pc}
 800c18c:	4283      	cmp	r3, r0
 800c18e:	d3f3      	bcc.n	800c178 <__mcmp+0x18>
 800c190:	e7fa      	b.n	800c188 <__mcmp+0x28>
 800c192:	f04f 32ff 	mov.w	r2, #4294967295
 800c196:	e7f7      	b.n	800c188 <__mcmp+0x28>

0800c198 <__mdiff>:
 800c198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	4606      	mov	r6, r0
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	4690      	mov	r8, r2
 800c1a6:	f7ff ffdb 	bl	800c160 <__mcmp>
 800c1aa:	1e05      	subs	r5, r0, #0
 800c1ac:	d110      	bne.n	800c1d0 <__mdiff+0x38>
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff fd53 	bl	800bc5c <_Balloc>
 800c1b6:	b930      	cbnz	r0, 800c1c6 <__mdiff+0x2e>
 800c1b8:	4b3a      	ldr	r3, [pc, #232]	; (800c2a4 <__mdiff+0x10c>)
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	f240 2132 	movw	r1, #562	; 0x232
 800c1c0:	4839      	ldr	r0, [pc, #228]	; (800c2a8 <__mdiff+0x110>)
 800c1c2:	f000 fa41 	bl	800c648 <__assert_func>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d0:	bfa4      	itt	ge
 800c1d2:	4643      	movge	r3, r8
 800c1d4:	46a0      	movge	r8, r4
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1dc:	bfa6      	itte	ge
 800c1de:	461c      	movge	r4, r3
 800c1e0:	2500      	movge	r5, #0
 800c1e2:	2501      	movlt	r5, #1
 800c1e4:	f7ff fd3a 	bl	800bc5c <_Balloc>
 800c1e8:	b920      	cbnz	r0, 800c1f4 <__mdiff+0x5c>
 800c1ea:	4b2e      	ldr	r3, [pc, #184]	; (800c2a4 <__mdiff+0x10c>)
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1f2:	e7e5      	b.n	800c1c0 <__mdiff+0x28>
 800c1f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c1f8:	6926      	ldr	r6, [r4, #16]
 800c1fa:	60c5      	str	r5, [r0, #12]
 800c1fc:	f104 0914 	add.w	r9, r4, #20
 800c200:	f108 0514 	add.w	r5, r8, #20
 800c204:	f100 0e14 	add.w	lr, r0, #20
 800c208:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c20c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c210:	f108 0210 	add.w	r2, r8, #16
 800c214:	46f2      	mov	sl, lr
 800c216:	2100      	movs	r1, #0
 800c218:	f859 3b04 	ldr.w	r3, [r9], #4
 800c21c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c220:	fa1f f883 	uxth.w	r8, r3
 800c224:	fa11 f18b 	uxtah	r1, r1, fp
 800c228:	0c1b      	lsrs	r3, r3, #16
 800c22a:	eba1 0808 	sub.w	r8, r1, r8
 800c22e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c232:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c236:	fa1f f888 	uxth.w	r8, r8
 800c23a:	1419      	asrs	r1, r3, #16
 800c23c:	454e      	cmp	r6, r9
 800c23e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c242:	f84a 3b04 	str.w	r3, [sl], #4
 800c246:	d8e7      	bhi.n	800c218 <__mdiff+0x80>
 800c248:	1b33      	subs	r3, r6, r4
 800c24a:	3b15      	subs	r3, #21
 800c24c:	f023 0303 	bic.w	r3, r3, #3
 800c250:	3304      	adds	r3, #4
 800c252:	3415      	adds	r4, #21
 800c254:	42a6      	cmp	r6, r4
 800c256:	bf38      	it	cc
 800c258:	2304      	movcc	r3, #4
 800c25a:	441d      	add	r5, r3
 800c25c:	4473      	add	r3, lr
 800c25e:	469e      	mov	lr, r3
 800c260:	462e      	mov	r6, r5
 800c262:	4566      	cmp	r6, ip
 800c264:	d30e      	bcc.n	800c284 <__mdiff+0xec>
 800c266:	f10c 0203 	add.w	r2, ip, #3
 800c26a:	1b52      	subs	r2, r2, r5
 800c26c:	f022 0203 	bic.w	r2, r2, #3
 800c270:	3d03      	subs	r5, #3
 800c272:	45ac      	cmp	ip, r5
 800c274:	bf38      	it	cc
 800c276:	2200      	movcc	r2, #0
 800c278:	441a      	add	r2, r3
 800c27a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c27e:	b17b      	cbz	r3, 800c2a0 <__mdiff+0x108>
 800c280:	6107      	str	r7, [r0, #16]
 800c282:	e7a3      	b.n	800c1cc <__mdiff+0x34>
 800c284:	f856 8b04 	ldr.w	r8, [r6], #4
 800c288:	fa11 f288 	uxtah	r2, r1, r8
 800c28c:	1414      	asrs	r4, r2, #16
 800c28e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c292:	b292      	uxth	r2, r2
 800c294:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c298:	f84e 2b04 	str.w	r2, [lr], #4
 800c29c:	1421      	asrs	r1, r4, #16
 800c29e:	e7e0      	b.n	800c262 <__mdiff+0xca>
 800c2a0:	3f01      	subs	r7, #1
 800c2a2:	e7ea      	b.n	800c27a <__mdiff+0xe2>
 800c2a4:	0800f8cb 	.word	0x0800f8cb
 800c2a8:	0800f8dc 	.word	0x0800f8dc

0800c2ac <__d2b>:
 800c2ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	4689      	mov	r9, r1
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	ec57 6b10 	vmov	r6, r7, d0
 800c2b8:	4690      	mov	r8, r2
 800c2ba:	f7ff fccf 	bl	800bc5c <_Balloc>
 800c2be:	4604      	mov	r4, r0
 800c2c0:	b930      	cbnz	r0, 800c2d0 <__d2b+0x24>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4b25      	ldr	r3, [pc, #148]	; (800c35c <__d2b+0xb0>)
 800c2c6:	4826      	ldr	r0, [pc, #152]	; (800c360 <__d2b+0xb4>)
 800c2c8:	f240 310a 	movw	r1, #778	; 0x30a
 800c2cc:	f000 f9bc 	bl	800c648 <__assert_func>
 800c2d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c2d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2d8:	bb35      	cbnz	r5, 800c328 <__d2b+0x7c>
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	d028      	beq.n	800c332 <__d2b+0x86>
 800c2e0:	4668      	mov	r0, sp
 800c2e2:	9600      	str	r6, [sp, #0]
 800c2e4:	f7ff fd82 	bl	800bdec <__lo0bits>
 800c2e8:	9900      	ldr	r1, [sp, #0]
 800c2ea:	b300      	cbz	r0, 800c32e <__d2b+0x82>
 800c2ec:	9a01      	ldr	r2, [sp, #4]
 800c2ee:	f1c0 0320 	rsb	r3, r0, #32
 800c2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f6:	430b      	orrs	r3, r1
 800c2f8:	40c2      	lsrs	r2, r0
 800c2fa:	6163      	str	r3, [r4, #20]
 800c2fc:	9201      	str	r2, [sp, #4]
 800c2fe:	9b01      	ldr	r3, [sp, #4]
 800c300:	61a3      	str	r3, [r4, #24]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bf14      	ite	ne
 800c306:	2202      	movne	r2, #2
 800c308:	2201      	moveq	r2, #1
 800c30a:	6122      	str	r2, [r4, #16]
 800c30c:	b1d5      	cbz	r5, 800c344 <__d2b+0x98>
 800c30e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c312:	4405      	add	r5, r0
 800c314:	f8c9 5000 	str.w	r5, [r9]
 800c318:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c31c:	f8c8 0000 	str.w	r0, [r8]
 800c320:	4620      	mov	r0, r4
 800c322:	b003      	add	sp, #12
 800c324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c32c:	e7d5      	b.n	800c2da <__d2b+0x2e>
 800c32e:	6161      	str	r1, [r4, #20]
 800c330:	e7e5      	b.n	800c2fe <__d2b+0x52>
 800c332:	a801      	add	r0, sp, #4
 800c334:	f7ff fd5a 	bl	800bdec <__lo0bits>
 800c338:	9b01      	ldr	r3, [sp, #4]
 800c33a:	6163      	str	r3, [r4, #20]
 800c33c:	2201      	movs	r2, #1
 800c33e:	6122      	str	r2, [r4, #16]
 800c340:	3020      	adds	r0, #32
 800c342:	e7e3      	b.n	800c30c <__d2b+0x60>
 800c344:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c348:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c34c:	f8c9 0000 	str.w	r0, [r9]
 800c350:	6918      	ldr	r0, [r3, #16]
 800c352:	f7ff fd2b 	bl	800bdac <__hi0bits>
 800c356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c35a:	e7df      	b.n	800c31c <__d2b+0x70>
 800c35c:	0800f8cb 	.word	0x0800f8cb
 800c360:	0800f8dc 	.word	0x0800f8dc

0800c364 <_calloc_r>:
 800c364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c366:	fba1 2402 	umull	r2, r4, r1, r2
 800c36a:	b94c      	cbnz	r4, 800c380 <_calloc_r+0x1c>
 800c36c:	4611      	mov	r1, r2
 800c36e:	9201      	str	r2, [sp, #4]
 800c370:	f7fe f8dc 	bl	800a52c <_malloc_r>
 800c374:	9a01      	ldr	r2, [sp, #4]
 800c376:	4605      	mov	r5, r0
 800c378:	b930      	cbnz	r0, 800c388 <_calloc_r+0x24>
 800c37a:	4628      	mov	r0, r5
 800c37c:	b003      	add	sp, #12
 800c37e:	bd30      	pop	{r4, r5, pc}
 800c380:	220c      	movs	r2, #12
 800c382:	6002      	str	r2, [r0, #0]
 800c384:	2500      	movs	r5, #0
 800c386:	e7f8      	b.n	800c37a <_calloc_r+0x16>
 800c388:	4621      	mov	r1, r4
 800c38a:	f7fe f85b 	bl	800a444 <memset>
 800c38e:	e7f4      	b.n	800c37a <_calloc_r+0x16>

0800c390 <__ssputs_r>:
 800c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	688e      	ldr	r6, [r1, #8]
 800c396:	429e      	cmp	r6, r3
 800c398:	4682      	mov	sl, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4690      	mov	r8, r2
 800c39e:	461f      	mov	r7, r3
 800c3a0:	d838      	bhi.n	800c414 <__ssputs_r+0x84>
 800c3a2:	898a      	ldrh	r2, [r1, #12]
 800c3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3a8:	d032      	beq.n	800c410 <__ssputs_r+0x80>
 800c3aa:	6825      	ldr	r5, [r4, #0]
 800c3ac:	6909      	ldr	r1, [r1, #16]
 800c3ae:	eba5 0901 	sub.w	r9, r5, r1
 800c3b2:	6965      	ldr	r5, [r4, #20]
 800c3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3bc:	3301      	adds	r3, #1
 800c3be:	444b      	add	r3, r9
 800c3c0:	106d      	asrs	r5, r5, #1
 800c3c2:	429d      	cmp	r5, r3
 800c3c4:	bf38      	it	cc
 800c3c6:	461d      	movcc	r5, r3
 800c3c8:	0553      	lsls	r3, r2, #21
 800c3ca:	d531      	bpl.n	800c430 <__ssputs_r+0xa0>
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f7fe f8ad 	bl	800a52c <_malloc_r>
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	b950      	cbnz	r0, 800c3ec <__ssputs_r+0x5c>
 800c3d6:	230c      	movs	r3, #12
 800c3d8:	f8ca 3000 	str.w	r3, [sl]
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ec:	6921      	ldr	r1, [r4, #16]
 800c3ee:	464a      	mov	r2, r9
 800c3f0:	f7fe f81a 	bl	800a428 <memcpy>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	6126      	str	r6, [r4, #16]
 800c402:	6165      	str	r5, [r4, #20]
 800c404:	444e      	add	r6, r9
 800c406:	eba5 0509 	sub.w	r5, r5, r9
 800c40a:	6026      	str	r6, [r4, #0]
 800c40c:	60a5      	str	r5, [r4, #8]
 800c40e:	463e      	mov	r6, r7
 800c410:	42be      	cmp	r6, r7
 800c412:	d900      	bls.n	800c416 <__ssputs_r+0x86>
 800c414:	463e      	mov	r6, r7
 800c416:	6820      	ldr	r0, [r4, #0]
 800c418:	4632      	mov	r2, r6
 800c41a:	4641      	mov	r1, r8
 800c41c:	f000 f959 	bl	800c6d2 <memmove>
 800c420:	68a3      	ldr	r3, [r4, #8]
 800c422:	1b9b      	subs	r3, r3, r6
 800c424:	60a3      	str	r3, [r4, #8]
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	4433      	add	r3, r6
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	2000      	movs	r0, #0
 800c42e:	e7db      	b.n	800c3e8 <__ssputs_r+0x58>
 800c430:	462a      	mov	r2, r5
 800c432:	f000 f968 	bl	800c706 <_realloc_r>
 800c436:	4606      	mov	r6, r0
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1e1      	bne.n	800c400 <__ssputs_r+0x70>
 800c43c:	6921      	ldr	r1, [r4, #16]
 800c43e:	4650      	mov	r0, sl
 800c440:	f7fe f808 	bl	800a454 <_free_r>
 800c444:	e7c7      	b.n	800c3d6 <__ssputs_r+0x46>
	...

0800c448 <_svfiprintf_r>:
 800c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44c:	4698      	mov	r8, r3
 800c44e:	898b      	ldrh	r3, [r1, #12]
 800c450:	061b      	lsls	r3, r3, #24
 800c452:	b09d      	sub	sp, #116	; 0x74
 800c454:	4607      	mov	r7, r0
 800c456:	460d      	mov	r5, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	d50e      	bpl.n	800c47a <_svfiprintf_r+0x32>
 800c45c:	690b      	ldr	r3, [r1, #16]
 800c45e:	b963      	cbnz	r3, 800c47a <_svfiprintf_r+0x32>
 800c460:	2140      	movs	r1, #64	; 0x40
 800c462:	f7fe f863 	bl	800a52c <_malloc_r>
 800c466:	6028      	str	r0, [r5, #0]
 800c468:	6128      	str	r0, [r5, #16]
 800c46a:	b920      	cbnz	r0, 800c476 <_svfiprintf_r+0x2e>
 800c46c:	230c      	movs	r3, #12
 800c46e:	603b      	str	r3, [r7, #0]
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	e0d1      	b.n	800c61a <_svfiprintf_r+0x1d2>
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	616b      	str	r3, [r5, #20]
 800c47a:	2300      	movs	r3, #0
 800c47c:	9309      	str	r3, [sp, #36]	; 0x24
 800c47e:	2320      	movs	r3, #32
 800c480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c484:	f8cd 800c 	str.w	r8, [sp, #12]
 800c488:	2330      	movs	r3, #48	; 0x30
 800c48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c634 <_svfiprintf_r+0x1ec>
 800c48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c492:	f04f 0901 	mov.w	r9, #1
 800c496:	4623      	mov	r3, r4
 800c498:	469a      	mov	sl, r3
 800c49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c49e:	b10a      	cbz	r2, 800c4a4 <_svfiprintf_r+0x5c>
 800c4a0:	2a25      	cmp	r2, #37	; 0x25
 800c4a2:	d1f9      	bne.n	800c498 <_svfiprintf_r+0x50>
 800c4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4a8:	d00b      	beq.n	800c4c2 <_svfiprintf_r+0x7a>
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ff6d 	bl	800c390 <__ssputs_r>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	f000 80aa 	beq.w	800c610 <_svfiprintf_r+0x1c8>
 800c4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4be:	445a      	add	r2, fp
 800c4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 80a2 	beq.w	800c610 <_svfiprintf_r+0x1c8>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d6:	f10a 0a01 	add.w	sl, sl, #1
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	9307      	str	r3, [sp, #28]
 800c4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2205      	movs	r2, #5
 800c4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ec:	4851      	ldr	r0, [pc, #324]	; (800c634 <_svfiprintf_r+0x1ec>)
 800c4ee:	f7f3 fe8f 	bl	8000210 <memchr>
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	b9d8      	cbnz	r0, 800c52e <_svfiprintf_r+0xe6>
 800c4f6:	06d0      	lsls	r0, r2, #27
 800c4f8:	bf44      	itt	mi
 800c4fa:	2320      	movmi	r3, #32
 800c4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c500:	0711      	lsls	r1, r2, #28
 800c502:	bf44      	itt	mi
 800c504:	232b      	movmi	r3, #43	; 0x2b
 800c506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	d015      	beq.n	800c53e <_svfiprintf_r+0xf6>
 800c512:	9a07      	ldr	r2, [sp, #28]
 800c514:	4654      	mov	r4, sl
 800c516:	2000      	movs	r0, #0
 800c518:	f04f 0c0a 	mov.w	ip, #10
 800c51c:	4621      	mov	r1, r4
 800c51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c522:	3b30      	subs	r3, #48	; 0x30
 800c524:	2b09      	cmp	r3, #9
 800c526:	d94e      	bls.n	800c5c6 <_svfiprintf_r+0x17e>
 800c528:	b1b0      	cbz	r0, 800c558 <_svfiprintf_r+0x110>
 800c52a:	9207      	str	r2, [sp, #28]
 800c52c:	e014      	b.n	800c558 <_svfiprintf_r+0x110>
 800c52e:	eba0 0308 	sub.w	r3, r0, r8
 800c532:	fa09 f303 	lsl.w	r3, r9, r3
 800c536:	4313      	orrs	r3, r2
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	46a2      	mov	sl, r4
 800c53c:	e7d2      	b.n	800c4e4 <_svfiprintf_r+0x9c>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	1d19      	adds	r1, r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	9103      	str	r1, [sp, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfbb      	ittet	lt
 800c54a:	425b      	neglt	r3, r3
 800c54c:	f042 0202 	orrlt.w	r2, r2, #2
 800c550:	9307      	strge	r3, [sp, #28]
 800c552:	9307      	strlt	r3, [sp, #28]
 800c554:	bfb8      	it	lt
 800c556:	9204      	strlt	r2, [sp, #16]
 800c558:	7823      	ldrb	r3, [r4, #0]
 800c55a:	2b2e      	cmp	r3, #46	; 0x2e
 800c55c:	d10c      	bne.n	800c578 <_svfiprintf_r+0x130>
 800c55e:	7863      	ldrb	r3, [r4, #1]
 800c560:	2b2a      	cmp	r3, #42	; 0x2a
 800c562:	d135      	bne.n	800c5d0 <_svfiprintf_r+0x188>
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9203      	str	r2, [sp, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	bfb8      	it	lt
 800c570:	f04f 33ff 	movlt.w	r3, #4294967295
 800c574:	3402      	adds	r4, #2
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c644 <_svfiprintf_r+0x1fc>
 800c57c:	7821      	ldrb	r1, [r4, #0]
 800c57e:	2203      	movs	r2, #3
 800c580:	4650      	mov	r0, sl
 800c582:	f7f3 fe45 	bl	8000210 <memchr>
 800c586:	b140      	cbz	r0, 800c59a <_svfiprintf_r+0x152>
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	eba0 000a 	sub.w	r0, r0, sl
 800c58e:	fa03 f000 	lsl.w	r0, r3, r0
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	4303      	orrs	r3, r0
 800c596:	3401      	adds	r4, #1
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59e:	4826      	ldr	r0, [pc, #152]	; (800c638 <_svfiprintf_r+0x1f0>)
 800c5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5a4:	2206      	movs	r2, #6
 800c5a6:	f7f3 fe33 	bl	8000210 <memchr>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d038      	beq.n	800c620 <_svfiprintf_r+0x1d8>
 800c5ae:	4b23      	ldr	r3, [pc, #140]	; (800c63c <_svfiprintf_r+0x1f4>)
 800c5b0:	bb1b      	cbnz	r3, 800c5fa <_svfiprintf_r+0x1b2>
 800c5b2:	9b03      	ldr	r3, [sp, #12]
 800c5b4:	3307      	adds	r3, #7
 800c5b6:	f023 0307 	bic.w	r3, r3, #7
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	9303      	str	r3, [sp, #12]
 800c5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c0:	4433      	add	r3, r6
 800c5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c4:	e767      	b.n	800c496 <_svfiprintf_r+0x4e>
 800c5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	e7a5      	b.n	800c51c <_svfiprintf_r+0xd4>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	9305      	str	r3, [sp, #20]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f04f 0c0a 	mov.w	ip, #10
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5e2:	3a30      	subs	r2, #48	; 0x30
 800c5e4:	2a09      	cmp	r2, #9
 800c5e6:	d903      	bls.n	800c5f0 <_svfiprintf_r+0x1a8>
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d0c5      	beq.n	800c578 <_svfiprintf_r+0x130>
 800c5ec:	9105      	str	r1, [sp, #20]
 800c5ee:	e7c3      	b.n	800c578 <_svfiprintf_r+0x130>
 800c5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e7f0      	b.n	800c5dc <_svfiprintf_r+0x194>
 800c5fa:	ab03      	add	r3, sp, #12
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	462a      	mov	r2, r5
 800c600:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <_svfiprintf_r+0x1f8>)
 800c602:	a904      	add	r1, sp, #16
 800c604:	4638      	mov	r0, r7
 800c606:	f7fe f8a5 	bl	800a754 <_printf_float>
 800c60a:	1c42      	adds	r2, r0, #1
 800c60c:	4606      	mov	r6, r0
 800c60e:	d1d6      	bne.n	800c5be <_svfiprintf_r+0x176>
 800c610:	89ab      	ldrh	r3, [r5, #12]
 800c612:	065b      	lsls	r3, r3, #25
 800c614:	f53f af2c 	bmi.w	800c470 <_svfiprintf_r+0x28>
 800c618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c61a:	b01d      	add	sp, #116	; 0x74
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	ab03      	add	r3, sp, #12
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	462a      	mov	r2, r5
 800c626:	4b06      	ldr	r3, [pc, #24]	; (800c640 <_svfiprintf_r+0x1f8>)
 800c628:	a904      	add	r1, sp, #16
 800c62a:	4638      	mov	r0, r7
 800c62c:	f7fe fb36 	bl	800ac9c <_printf_i>
 800c630:	e7eb      	b.n	800c60a <_svfiprintf_r+0x1c2>
 800c632:	bf00      	nop
 800c634:	0800fa34 	.word	0x0800fa34
 800c638:	0800fa3e 	.word	0x0800fa3e
 800c63c:	0800a755 	.word	0x0800a755
 800c640:	0800c391 	.word	0x0800c391
 800c644:	0800fa3a 	.word	0x0800fa3a

0800c648 <__assert_func>:
 800c648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c64a:	4614      	mov	r4, r2
 800c64c:	461a      	mov	r2, r3
 800c64e:	4b09      	ldr	r3, [pc, #36]	; (800c674 <__assert_func+0x2c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4605      	mov	r5, r0
 800c654:	68d8      	ldr	r0, [r3, #12]
 800c656:	b14c      	cbz	r4, 800c66c <__assert_func+0x24>
 800c658:	4b07      	ldr	r3, [pc, #28]	; (800c678 <__assert_func+0x30>)
 800c65a:	9100      	str	r1, [sp, #0]
 800c65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c660:	4906      	ldr	r1, [pc, #24]	; (800c67c <__assert_func+0x34>)
 800c662:	462b      	mov	r3, r5
 800c664:	f000 f80e 	bl	800c684 <fiprintf>
 800c668:	f000 faa4 	bl	800cbb4 <abort>
 800c66c:	4b04      	ldr	r3, [pc, #16]	; (800c680 <__assert_func+0x38>)
 800c66e:	461c      	mov	r4, r3
 800c670:	e7f3      	b.n	800c65a <__assert_func+0x12>
 800c672:	bf00      	nop
 800c674:	20000028 	.word	0x20000028
 800c678:	0800fa45 	.word	0x0800fa45
 800c67c:	0800fa52 	.word	0x0800fa52
 800c680:	0800fa80 	.word	0x0800fa80

0800c684 <fiprintf>:
 800c684:	b40e      	push	{r1, r2, r3}
 800c686:	b503      	push	{r0, r1, lr}
 800c688:	4601      	mov	r1, r0
 800c68a:	ab03      	add	r3, sp, #12
 800c68c:	4805      	ldr	r0, [pc, #20]	; (800c6a4 <fiprintf+0x20>)
 800c68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c692:	6800      	ldr	r0, [r0, #0]
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	f000 f88f 	bl	800c7b8 <_vfiprintf_r>
 800c69a:	b002      	add	sp, #8
 800c69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a0:	b003      	add	sp, #12
 800c6a2:	4770      	bx	lr
 800c6a4:	20000028 	.word	0x20000028

0800c6a8 <__retarget_lock_init_recursive>:
 800c6a8:	4770      	bx	lr

0800c6aa <__retarget_lock_acquire_recursive>:
 800c6aa:	4770      	bx	lr

0800c6ac <__retarget_lock_release_recursive>:
 800c6ac:	4770      	bx	lr

0800c6ae <__ascii_mbtowc>:
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	b901      	cbnz	r1, 800c6b4 <__ascii_mbtowc+0x6>
 800c6b2:	a901      	add	r1, sp, #4
 800c6b4:	b142      	cbz	r2, 800c6c8 <__ascii_mbtowc+0x1a>
 800c6b6:	b14b      	cbz	r3, 800c6cc <__ascii_mbtowc+0x1e>
 800c6b8:	7813      	ldrb	r3, [r2, #0]
 800c6ba:	600b      	str	r3, [r1, #0]
 800c6bc:	7812      	ldrb	r2, [r2, #0]
 800c6be:	1e10      	subs	r0, r2, #0
 800c6c0:	bf18      	it	ne
 800c6c2:	2001      	movne	r0, #1
 800c6c4:	b002      	add	sp, #8
 800c6c6:	4770      	bx	lr
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	e7fb      	b.n	800c6c4 <__ascii_mbtowc+0x16>
 800c6cc:	f06f 0001 	mvn.w	r0, #1
 800c6d0:	e7f8      	b.n	800c6c4 <__ascii_mbtowc+0x16>

0800c6d2 <memmove>:
 800c6d2:	4288      	cmp	r0, r1
 800c6d4:	b510      	push	{r4, lr}
 800c6d6:	eb01 0402 	add.w	r4, r1, r2
 800c6da:	d902      	bls.n	800c6e2 <memmove+0x10>
 800c6dc:	4284      	cmp	r4, r0
 800c6de:	4623      	mov	r3, r4
 800c6e0:	d807      	bhi.n	800c6f2 <memmove+0x20>
 800c6e2:	1e43      	subs	r3, r0, #1
 800c6e4:	42a1      	cmp	r1, r4
 800c6e6:	d008      	beq.n	800c6fa <memmove+0x28>
 800c6e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6f0:	e7f8      	b.n	800c6e4 <memmove+0x12>
 800c6f2:	4402      	add	r2, r0
 800c6f4:	4601      	mov	r1, r0
 800c6f6:	428a      	cmp	r2, r1
 800c6f8:	d100      	bne.n	800c6fc <memmove+0x2a>
 800c6fa:	bd10      	pop	{r4, pc}
 800c6fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c700:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c704:	e7f7      	b.n	800c6f6 <memmove+0x24>

0800c706 <_realloc_r>:
 800c706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c70a:	4680      	mov	r8, r0
 800c70c:	4614      	mov	r4, r2
 800c70e:	460e      	mov	r6, r1
 800c710:	b921      	cbnz	r1, 800c71c <_realloc_r+0x16>
 800c712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c716:	4611      	mov	r1, r2
 800c718:	f7fd bf08 	b.w	800a52c <_malloc_r>
 800c71c:	b92a      	cbnz	r2, 800c72a <_realloc_r+0x24>
 800c71e:	f7fd fe99 	bl	800a454 <_free_r>
 800c722:	4625      	mov	r5, r4
 800c724:	4628      	mov	r0, r5
 800c726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c72a:	f000 fc67 	bl	800cffc <_malloc_usable_size_r>
 800c72e:	4284      	cmp	r4, r0
 800c730:	4607      	mov	r7, r0
 800c732:	d802      	bhi.n	800c73a <_realloc_r+0x34>
 800c734:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c738:	d812      	bhi.n	800c760 <_realloc_r+0x5a>
 800c73a:	4621      	mov	r1, r4
 800c73c:	4640      	mov	r0, r8
 800c73e:	f7fd fef5 	bl	800a52c <_malloc_r>
 800c742:	4605      	mov	r5, r0
 800c744:	2800      	cmp	r0, #0
 800c746:	d0ed      	beq.n	800c724 <_realloc_r+0x1e>
 800c748:	42bc      	cmp	r4, r7
 800c74a:	4622      	mov	r2, r4
 800c74c:	4631      	mov	r1, r6
 800c74e:	bf28      	it	cs
 800c750:	463a      	movcs	r2, r7
 800c752:	f7fd fe69 	bl	800a428 <memcpy>
 800c756:	4631      	mov	r1, r6
 800c758:	4640      	mov	r0, r8
 800c75a:	f7fd fe7b 	bl	800a454 <_free_r>
 800c75e:	e7e1      	b.n	800c724 <_realloc_r+0x1e>
 800c760:	4635      	mov	r5, r6
 800c762:	e7df      	b.n	800c724 <_realloc_r+0x1e>

0800c764 <__sfputc_r>:
 800c764:	6893      	ldr	r3, [r2, #8]
 800c766:	3b01      	subs	r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	b410      	push	{r4}
 800c76c:	6093      	str	r3, [r2, #8]
 800c76e:	da08      	bge.n	800c782 <__sfputc_r+0x1e>
 800c770:	6994      	ldr	r4, [r2, #24]
 800c772:	42a3      	cmp	r3, r4
 800c774:	db01      	blt.n	800c77a <__sfputc_r+0x16>
 800c776:	290a      	cmp	r1, #10
 800c778:	d103      	bne.n	800c782 <__sfputc_r+0x1e>
 800c77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77e:	f000 b94b 	b.w	800ca18 <__swbuf_r>
 800c782:	6813      	ldr	r3, [r2, #0]
 800c784:	1c58      	adds	r0, r3, #1
 800c786:	6010      	str	r0, [r2, #0]
 800c788:	7019      	strb	r1, [r3, #0]
 800c78a:	4608      	mov	r0, r1
 800c78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <__sfputs_r>:
 800c792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c794:	4606      	mov	r6, r0
 800c796:	460f      	mov	r7, r1
 800c798:	4614      	mov	r4, r2
 800c79a:	18d5      	adds	r5, r2, r3
 800c79c:	42ac      	cmp	r4, r5
 800c79e:	d101      	bne.n	800c7a4 <__sfputs_r+0x12>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e007      	b.n	800c7b4 <__sfputs_r+0x22>
 800c7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a8:	463a      	mov	r2, r7
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff ffda 	bl	800c764 <__sfputc_r>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d1f3      	bne.n	800c79c <__sfputs_r+0xa>
 800c7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7b8 <_vfiprintf_r>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	460d      	mov	r5, r1
 800c7be:	b09d      	sub	sp, #116	; 0x74
 800c7c0:	4614      	mov	r4, r2
 800c7c2:	4698      	mov	r8, r3
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	b118      	cbz	r0, 800c7d0 <_vfiprintf_r+0x18>
 800c7c8:	6983      	ldr	r3, [r0, #24]
 800c7ca:	b90b      	cbnz	r3, 800c7d0 <_vfiprintf_r+0x18>
 800c7cc:	f000 fb14 	bl	800cdf8 <__sinit>
 800c7d0:	4b89      	ldr	r3, [pc, #548]	; (800c9f8 <_vfiprintf_r+0x240>)
 800c7d2:	429d      	cmp	r5, r3
 800c7d4:	d11b      	bne.n	800c80e <_vfiprintf_r+0x56>
 800c7d6:	6875      	ldr	r5, [r6, #4]
 800c7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7da:	07d9      	lsls	r1, r3, #31
 800c7dc:	d405      	bmi.n	800c7ea <_vfiprintf_r+0x32>
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	059a      	lsls	r2, r3, #22
 800c7e2:	d402      	bmi.n	800c7ea <_vfiprintf_r+0x32>
 800c7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e6:	f7ff ff60 	bl	800c6aa <__retarget_lock_acquire_recursive>
 800c7ea:	89ab      	ldrh	r3, [r5, #12]
 800c7ec:	071b      	lsls	r3, r3, #28
 800c7ee:	d501      	bpl.n	800c7f4 <_vfiprintf_r+0x3c>
 800c7f0:	692b      	ldr	r3, [r5, #16]
 800c7f2:	b9eb      	cbnz	r3, 800c830 <_vfiprintf_r+0x78>
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f000 f96e 	bl	800cad8 <__swsetup_r>
 800c7fc:	b1c0      	cbz	r0, 800c830 <_vfiprintf_r+0x78>
 800c7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c800:	07dc      	lsls	r4, r3, #31
 800c802:	d50e      	bpl.n	800c822 <_vfiprintf_r+0x6a>
 800c804:	f04f 30ff 	mov.w	r0, #4294967295
 800c808:	b01d      	add	sp, #116	; 0x74
 800c80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80e:	4b7b      	ldr	r3, [pc, #492]	; (800c9fc <_vfiprintf_r+0x244>)
 800c810:	429d      	cmp	r5, r3
 800c812:	d101      	bne.n	800c818 <_vfiprintf_r+0x60>
 800c814:	68b5      	ldr	r5, [r6, #8]
 800c816:	e7df      	b.n	800c7d8 <_vfiprintf_r+0x20>
 800c818:	4b79      	ldr	r3, [pc, #484]	; (800ca00 <_vfiprintf_r+0x248>)
 800c81a:	429d      	cmp	r5, r3
 800c81c:	bf08      	it	eq
 800c81e:	68f5      	ldreq	r5, [r6, #12]
 800c820:	e7da      	b.n	800c7d8 <_vfiprintf_r+0x20>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	0598      	lsls	r0, r3, #22
 800c826:	d4ed      	bmi.n	800c804 <_vfiprintf_r+0x4c>
 800c828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c82a:	f7ff ff3f 	bl	800c6ac <__retarget_lock_release_recursive>
 800c82e:	e7e9      	b.n	800c804 <_vfiprintf_r+0x4c>
 800c830:	2300      	movs	r3, #0
 800c832:	9309      	str	r3, [sp, #36]	; 0x24
 800c834:	2320      	movs	r3, #32
 800c836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c83e:	2330      	movs	r3, #48	; 0x30
 800c840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca04 <_vfiprintf_r+0x24c>
 800c844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c848:	f04f 0901 	mov.w	r9, #1
 800c84c:	4623      	mov	r3, r4
 800c84e:	469a      	mov	sl, r3
 800c850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c854:	b10a      	cbz	r2, 800c85a <_vfiprintf_r+0xa2>
 800c856:	2a25      	cmp	r2, #37	; 0x25
 800c858:	d1f9      	bne.n	800c84e <_vfiprintf_r+0x96>
 800c85a:	ebba 0b04 	subs.w	fp, sl, r4
 800c85e:	d00b      	beq.n	800c878 <_vfiprintf_r+0xc0>
 800c860:	465b      	mov	r3, fp
 800c862:	4622      	mov	r2, r4
 800c864:	4629      	mov	r1, r5
 800c866:	4630      	mov	r0, r6
 800c868:	f7ff ff93 	bl	800c792 <__sfputs_r>
 800c86c:	3001      	adds	r0, #1
 800c86e:	f000 80aa 	beq.w	800c9c6 <_vfiprintf_r+0x20e>
 800c872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c874:	445a      	add	r2, fp
 800c876:	9209      	str	r2, [sp, #36]	; 0x24
 800c878:	f89a 3000 	ldrb.w	r3, [sl]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 80a2 	beq.w	800c9c6 <_vfiprintf_r+0x20e>
 800c882:	2300      	movs	r3, #0
 800c884:	f04f 32ff 	mov.w	r2, #4294967295
 800c888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c88c:	f10a 0a01 	add.w	sl, sl, #1
 800c890:	9304      	str	r3, [sp, #16]
 800c892:	9307      	str	r3, [sp, #28]
 800c894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c898:	931a      	str	r3, [sp, #104]	; 0x68
 800c89a:	4654      	mov	r4, sl
 800c89c:	2205      	movs	r2, #5
 800c89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a2:	4858      	ldr	r0, [pc, #352]	; (800ca04 <_vfiprintf_r+0x24c>)
 800c8a4:	f7f3 fcb4 	bl	8000210 <memchr>
 800c8a8:	9a04      	ldr	r2, [sp, #16]
 800c8aa:	b9d8      	cbnz	r0, 800c8e4 <_vfiprintf_r+0x12c>
 800c8ac:	06d1      	lsls	r1, r2, #27
 800c8ae:	bf44      	itt	mi
 800c8b0:	2320      	movmi	r3, #32
 800c8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b6:	0713      	lsls	r3, r2, #28
 800c8b8:	bf44      	itt	mi
 800c8ba:	232b      	movmi	r3, #43	; 0x2b
 800c8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c6:	d015      	beq.n	800c8f4 <_vfiprintf_r+0x13c>
 800c8c8:	9a07      	ldr	r2, [sp, #28]
 800c8ca:	4654      	mov	r4, sl
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f04f 0c0a 	mov.w	ip, #10
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d8:	3b30      	subs	r3, #48	; 0x30
 800c8da:	2b09      	cmp	r3, #9
 800c8dc:	d94e      	bls.n	800c97c <_vfiprintf_r+0x1c4>
 800c8de:	b1b0      	cbz	r0, 800c90e <_vfiprintf_r+0x156>
 800c8e0:	9207      	str	r2, [sp, #28]
 800c8e2:	e014      	b.n	800c90e <_vfiprintf_r+0x156>
 800c8e4:	eba0 0308 	sub.w	r3, r0, r8
 800c8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	46a2      	mov	sl, r4
 800c8f2:	e7d2      	b.n	800c89a <_vfiprintf_r+0xe2>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	1d19      	adds	r1, r3, #4
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	9103      	str	r1, [sp, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bfbb      	ittet	lt
 800c900:	425b      	neglt	r3, r3
 800c902:	f042 0202 	orrlt.w	r2, r2, #2
 800c906:	9307      	strge	r3, [sp, #28]
 800c908:	9307      	strlt	r3, [sp, #28]
 800c90a:	bfb8      	it	lt
 800c90c:	9204      	strlt	r2, [sp, #16]
 800c90e:	7823      	ldrb	r3, [r4, #0]
 800c910:	2b2e      	cmp	r3, #46	; 0x2e
 800c912:	d10c      	bne.n	800c92e <_vfiprintf_r+0x176>
 800c914:	7863      	ldrb	r3, [r4, #1]
 800c916:	2b2a      	cmp	r3, #42	; 0x2a
 800c918:	d135      	bne.n	800c986 <_vfiprintf_r+0x1ce>
 800c91a:	9b03      	ldr	r3, [sp, #12]
 800c91c:	1d1a      	adds	r2, r3, #4
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	9203      	str	r2, [sp, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	bfb8      	it	lt
 800c926:	f04f 33ff 	movlt.w	r3, #4294967295
 800c92a:	3402      	adds	r4, #2
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca14 <_vfiprintf_r+0x25c>
 800c932:	7821      	ldrb	r1, [r4, #0]
 800c934:	2203      	movs	r2, #3
 800c936:	4650      	mov	r0, sl
 800c938:	f7f3 fc6a 	bl	8000210 <memchr>
 800c93c:	b140      	cbz	r0, 800c950 <_vfiprintf_r+0x198>
 800c93e:	2340      	movs	r3, #64	; 0x40
 800c940:	eba0 000a 	sub.w	r0, r0, sl
 800c944:	fa03 f000 	lsl.w	r0, r3, r0
 800c948:	9b04      	ldr	r3, [sp, #16]
 800c94a:	4303      	orrs	r3, r0
 800c94c:	3401      	adds	r4, #1
 800c94e:	9304      	str	r3, [sp, #16]
 800c950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c954:	482c      	ldr	r0, [pc, #176]	; (800ca08 <_vfiprintf_r+0x250>)
 800c956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c95a:	2206      	movs	r2, #6
 800c95c:	f7f3 fc58 	bl	8000210 <memchr>
 800c960:	2800      	cmp	r0, #0
 800c962:	d03f      	beq.n	800c9e4 <_vfiprintf_r+0x22c>
 800c964:	4b29      	ldr	r3, [pc, #164]	; (800ca0c <_vfiprintf_r+0x254>)
 800c966:	bb1b      	cbnz	r3, 800c9b0 <_vfiprintf_r+0x1f8>
 800c968:	9b03      	ldr	r3, [sp, #12]
 800c96a:	3307      	adds	r3, #7
 800c96c:	f023 0307 	bic.w	r3, r3, #7
 800c970:	3308      	adds	r3, #8
 800c972:	9303      	str	r3, [sp, #12]
 800c974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c976:	443b      	add	r3, r7
 800c978:	9309      	str	r3, [sp, #36]	; 0x24
 800c97a:	e767      	b.n	800c84c <_vfiprintf_r+0x94>
 800c97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c980:	460c      	mov	r4, r1
 800c982:	2001      	movs	r0, #1
 800c984:	e7a5      	b.n	800c8d2 <_vfiprintf_r+0x11a>
 800c986:	2300      	movs	r3, #0
 800c988:	3401      	adds	r4, #1
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	4619      	mov	r1, r3
 800c98e:	f04f 0c0a 	mov.w	ip, #10
 800c992:	4620      	mov	r0, r4
 800c994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c998:	3a30      	subs	r2, #48	; 0x30
 800c99a:	2a09      	cmp	r2, #9
 800c99c:	d903      	bls.n	800c9a6 <_vfiprintf_r+0x1ee>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0c5      	beq.n	800c92e <_vfiprintf_r+0x176>
 800c9a2:	9105      	str	r1, [sp, #20]
 800c9a4:	e7c3      	b.n	800c92e <_vfiprintf_r+0x176>
 800c9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e7f0      	b.n	800c992 <_vfiprintf_r+0x1da>
 800c9b0:	ab03      	add	r3, sp, #12
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	462a      	mov	r2, r5
 800c9b6:	4b16      	ldr	r3, [pc, #88]	; (800ca10 <_vfiprintf_r+0x258>)
 800c9b8:	a904      	add	r1, sp, #16
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7fd feca 	bl	800a754 <_printf_float>
 800c9c0:	4607      	mov	r7, r0
 800c9c2:	1c78      	adds	r0, r7, #1
 800c9c4:	d1d6      	bne.n	800c974 <_vfiprintf_r+0x1bc>
 800c9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c8:	07d9      	lsls	r1, r3, #31
 800c9ca:	d405      	bmi.n	800c9d8 <_vfiprintf_r+0x220>
 800c9cc:	89ab      	ldrh	r3, [r5, #12]
 800c9ce:	059a      	lsls	r2, r3, #22
 800c9d0:	d402      	bmi.n	800c9d8 <_vfiprintf_r+0x220>
 800c9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d4:	f7ff fe6a 	bl	800c6ac <__retarget_lock_release_recursive>
 800c9d8:	89ab      	ldrh	r3, [r5, #12]
 800c9da:	065b      	lsls	r3, r3, #25
 800c9dc:	f53f af12 	bmi.w	800c804 <_vfiprintf_r+0x4c>
 800c9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9e2:	e711      	b.n	800c808 <_vfiprintf_r+0x50>
 800c9e4:	ab03      	add	r3, sp, #12
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <_vfiprintf_r+0x258>)
 800c9ec:	a904      	add	r1, sp, #16
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7fe f954 	bl	800ac9c <_printf_i>
 800c9f4:	e7e4      	b.n	800c9c0 <_vfiprintf_r+0x208>
 800c9f6:	bf00      	nop
 800c9f8:	0800fbac 	.word	0x0800fbac
 800c9fc:	0800fbcc 	.word	0x0800fbcc
 800ca00:	0800fb8c 	.word	0x0800fb8c
 800ca04:	0800fa34 	.word	0x0800fa34
 800ca08:	0800fa3e 	.word	0x0800fa3e
 800ca0c:	0800a755 	.word	0x0800a755
 800ca10:	0800c793 	.word	0x0800c793
 800ca14:	0800fa3a 	.word	0x0800fa3a

0800ca18 <__swbuf_r>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	460e      	mov	r6, r1
 800ca1c:	4614      	mov	r4, r2
 800ca1e:	4605      	mov	r5, r0
 800ca20:	b118      	cbz	r0, 800ca2a <__swbuf_r+0x12>
 800ca22:	6983      	ldr	r3, [r0, #24]
 800ca24:	b90b      	cbnz	r3, 800ca2a <__swbuf_r+0x12>
 800ca26:	f000 f9e7 	bl	800cdf8 <__sinit>
 800ca2a:	4b21      	ldr	r3, [pc, #132]	; (800cab0 <__swbuf_r+0x98>)
 800ca2c:	429c      	cmp	r4, r3
 800ca2e:	d12b      	bne.n	800ca88 <__swbuf_r+0x70>
 800ca30:	686c      	ldr	r4, [r5, #4]
 800ca32:	69a3      	ldr	r3, [r4, #24]
 800ca34:	60a3      	str	r3, [r4, #8]
 800ca36:	89a3      	ldrh	r3, [r4, #12]
 800ca38:	071a      	lsls	r2, r3, #28
 800ca3a:	d52f      	bpl.n	800ca9c <__swbuf_r+0x84>
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	b36b      	cbz	r3, 800ca9c <__swbuf_r+0x84>
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	6820      	ldr	r0, [r4, #0]
 800ca44:	1ac0      	subs	r0, r0, r3
 800ca46:	6963      	ldr	r3, [r4, #20]
 800ca48:	b2f6      	uxtb	r6, r6
 800ca4a:	4283      	cmp	r3, r0
 800ca4c:	4637      	mov	r7, r6
 800ca4e:	dc04      	bgt.n	800ca5a <__swbuf_r+0x42>
 800ca50:	4621      	mov	r1, r4
 800ca52:	4628      	mov	r0, r5
 800ca54:	f000 f93c 	bl	800ccd0 <_fflush_r>
 800ca58:	bb30      	cbnz	r0, 800caa8 <__swbuf_r+0x90>
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	60a3      	str	r3, [r4, #8]
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	1c5a      	adds	r2, r3, #1
 800ca64:	6022      	str	r2, [r4, #0]
 800ca66:	701e      	strb	r6, [r3, #0]
 800ca68:	6963      	ldr	r3, [r4, #20]
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	4283      	cmp	r3, r0
 800ca6e:	d004      	beq.n	800ca7a <__swbuf_r+0x62>
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	07db      	lsls	r3, r3, #31
 800ca74:	d506      	bpl.n	800ca84 <__swbuf_r+0x6c>
 800ca76:	2e0a      	cmp	r6, #10
 800ca78:	d104      	bne.n	800ca84 <__swbuf_r+0x6c>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	f000 f927 	bl	800ccd0 <_fflush_r>
 800ca82:	b988      	cbnz	r0, 800caa8 <__swbuf_r+0x90>
 800ca84:	4638      	mov	r0, r7
 800ca86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca88:	4b0a      	ldr	r3, [pc, #40]	; (800cab4 <__swbuf_r+0x9c>)
 800ca8a:	429c      	cmp	r4, r3
 800ca8c:	d101      	bne.n	800ca92 <__swbuf_r+0x7a>
 800ca8e:	68ac      	ldr	r4, [r5, #8]
 800ca90:	e7cf      	b.n	800ca32 <__swbuf_r+0x1a>
 800ca92:	4b09      	ldr	r3, [pc, #36]	; (800cab8 <__swbuf_r+0xa0>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	bf08      	it	eq
 800ca98:	68ec      	ldreq	r4, [r5, #12]
 800ca9a:	e7ca      	b.n	800ca32 <__swbuf_r+0x1a>
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f000 f81a 	bl	800cad8 <__swsetup_r>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d0cb      	beq.n	800ca40 <__swbuf_r+0x28>
 800caa8:	f04f 37ff 	mov.w	r7, #4294967295
 800caac:	e7ea      	b.n	800ca84 <__swbuf_r+0x6c>
 800caae:	bf00      	nop
 800cab0:	0800fbac 	.word	0x0800fbac
 800cab4:	0800fbcc 	.word	0x0800fbcc
 800cab8:	0800fb8c 	.word	0x0800fb8c

0800cabc <__ascii_wctomb>:
 800cabc:	b149      	cbz	r1, 800cad2 <__ascii_wctomb+0x16>
 800cabe:	2aff      	cmp	r2, #255	; 0xff
 800cac0:	bf85      	ittet	hi
 800cac2:	238a      	movhi	r3, #138	; 0x8a
 800cac4:	6003      	strhi	r3, [r0, #0]
 800cac6:	700a      	strbls	r2, [r1, #0]
 800cac8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cacc:	bf98      	it	ls
 800cace:	2001      	movls	r0, #1
 800cad0:	4770      	bx	lr
 800cad2:	4608      	mov	r0, r1
 800cad4:	4770      	bx	lr
	...

0800cad8 <__swsetup_r>:
 800cad8:	4b32      	ldr	r3, [pc, #200]	; (800cba4 <__swsetup_r+0xcc>)
 800cada:	b570      	push	{r4, r5, r6, lr}
 800cadc:	681d      	ldr	r5, [r3, #0]
 800cade:	4606      	mov	r6, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	b125      	cbz	r5, 800caee <__swsetup_r+0x16>
 800cae4:	69ab      	ldr	r3, [r5, #24]
 800cae6:	b913      	cbnz	r3, 800caee <__swsetup_r+0x16>
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 f985 	bl	800cdf8 <__sinit>
 800caee:	4b2e      	ldr	r3, [pc, #184]	; (800cba8 <__swsetup_r+0xd0>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	d10f      	bne.n	800cb14 <__swsetup_r+0x3c>
 800caf4:	686c      	ldr	r4, [r5, #4]
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cafc:	0719      	lsls	r1, r3, #28
 800cafe:	d42c      	bmi.n	800cb5a <__swsetup_r+0x82>
 800cb00:	06dd      	lsls	r5, r3, #27
 800cb02:	d411      	bmi.n	800cb28 <__swsetup_r+0x50>
 800cb04:	2309      	movs	r3, #9
 800cb06:	6033      	str	r3, [r6, #0]
 800cb08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	e03e      	b.n	800cb92 <__swsetup_r+0xba>
 800cb14:	4b25      	ldr	r3, [pc, #148]	; (800cbac <__swsetup_r+0xd4>)
 800cb16:	429c      	cmp	r4, r3
 800cb18:	d101      	bne.n	800cb1e <__swsetup_r+0x46>
 800cb1a:	68ac      	ldr	r4, [r5, #8]
 800cb1c:	e7eb      	b.n	800caf6 <__swsetup_r+0x1e>
 800cb1e:	4b24      	ldr	r3, [pc, #144]	; (800cbb0 <__swsetup_r+0xd8>)
 800cb20:	429c      	cmp	r4, r3
 800cb22:	bf08      	it	eq
 800cb24:	68ec      	ldreq	r4, [r5, #12]
 800cb26:	e7e6      	b.n	800caf6 <__swsetup_r+0x1e>
 800cb28:	0758      	lsls	r0, r3, #29
 800cb2a:	d512      	bpl.n	800cb52 <__swsetup_r+0x7a>
 800cb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2e:	b141      	cbz	r1, 800cb42 <__swsetup_r+0x6a>
 800cb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb34:	4299      	cmp	r1, r3
 800cb36:	d002      	beq.n	800cb3e <__swsetup_r+0x66>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7fd fc8b 	bl	800a454 <_free_r>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6363      	str	r3, [r4, #52]	; 0x34
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6063      	str	r3, [r4, #4]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f043 0308 	orr.w	r3, r3, #8
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	b94b      	cbnz	r3, 800cb72 <__swsetup_r+0x9a>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb68:	d003      	beq.n	800cb72 <__swsetup_r+0x9a>
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f000 fa05 	bl	800cf7c <__smakebuf_r>
 800cb72:	89a0      	ldrh	r0, [r4, #12]
 800cb74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb78:	f010 0301 	ands.w	r3, r0, #1
 800cb7c:	d00a      	beq.n	800cb94 <__swsetup_r+0xbc>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60a3      	str	r3, [r4, #8]
 800cb82:	6963      	ldr	r3, [r4, #20]
 800cb84:	425b      	negs	r3, r3
 800cb86:	61a3      	str	r3, [r4, #24]
 800cb88:	6923      	ldr	r3, [r4, #16]
 800cb8a:	b943      	cbnz	r3, 800cb9e <__swsetup_r+0xc6>
 800cb8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb90:	d1ba      	bne.n	800cb08 <__swsetup_r+0x30>
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	0781      	lsls	r1, r0, #30
 800cb96:	bf58      	it	pl
 800cb98:	6963      	ldrpl	r3, [r4, #20]
 800cb9a:	60a3      	str	r3, [r4, #8]
 800cb9c:	e7f4      	b.n	800cb88 <__swsetup_r+0xb0>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e7f7      	b.n	800cb92 <__swsetup_r+0xba>
 800cba2:	bf00      	nop
 800cba4:	20000028 	.word	0x20000028
 800cba8:	0800fbac 	.word	0x0800fbac
 800cbac:	0800fbcc 	.word	0x0800fbcc
 800cbb0:	0800fb8c 	.word	0x0800fb8c

0800cbb4 <abort>:
 800cbb4:	b508      	push	{r3, lr}
 800cbb6:	2006      	movs	r0, #6
 800cbb8:	f000 fa50 	bl	800d05c <raise>
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	f7f6 f97d 	bl	8002ebc <_exit>
	...

0800cbc4 <__sflush_r>:
 800cbc4:	898a      	ldrh	r2, [r1, #12]
 800cbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbca:	4605      	mov	r5, r0
 800cbcc:	0710      	lsls	r0, r2, #28
 800cbce:	460c      	mov	r4, r1
 800cbd0:	d458      	bmi.n	800cc84 <__sflush_r+0xc0>
 800cbd2:	684b      	ldr	r3, [r1, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dc05      	bgt.n	800cbe4 <__sflush_r+0x20>
 800cbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dc02      	bgt.n	800cbe4 <__sflush_r+0x20>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	d0f9      	beq.n	800cbde <__sflush_r+0x1a>
 800cbea:	2300      	movs	r3, #0
 800cbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbf0:	682f      	ldr	r7, [r5, #0]
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	d032      	beq.n	800cc5c <__sflush_r+0x98>
 800cbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	075a      	lsls	r2, r3, #29
 800cbfc:	d505      	bpl.n	800cc0a <__sflush_r+0x46>
 800cbfe:	6863      	ldr	r3, [r4, #4]
 800cc00:	1ac0      	subs	r0, r0, r3
 800cc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc04:	b10b      	cbz	r3, 800cc0a <__sflush_r+0x46>
 800cc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc08:	1ac0      	subs	r0, r0, r3
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc10:	6a21      	ldr	r1, [r4, #32]
 800cc12:	4628      	mov	r0, r5
 800cc14:	47b0      	blx	r6
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	d106      	bne.n	800cc2a <__sflush_r+0x66>
 800cc1c:	6829      	ldr	r1, [r5, #0]
 800cc1e:	291d      	cmp	r1, #29
 800cc20:	d82c      	bhi.n	800cc7c <__sflush_r+0xb8>
 800cc22:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <__sflush_r+0x108>)
 800cc24:	40ca      	lsrs	r2, r1
 800cc26:	07d6      	lsls	r6, r2, #31
 800cc28:	d528      	bpl.n	800cc7c <__sflush_r+0xb8>
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	6062      	str	r2, [r4, #4]
 800cc2e:	04d9      	lsls	r1, r3, #19
 800cc30:	6922      	ldr	r2, [r4, #16]
 800cc32:	6022      	str	r2, [r4, #0]
 800cc34:	d504      	bpl.n	800cc40 <__sflush_r+0x7c>
 800cc36:	1c42      	adds	r2, r0, #1
 800cc38:	d101      	bne.n	800cc3e <__sflush_r+0x7a>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	b903      	cbnz	r3, 800cc40 <__sflush_r+0x7c>
 800cc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc42:	602f      	str	r7, [r5, #0]
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d0ca      	beq.n	800cbde <__sflush_r+0x1a>
 800cc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc4c:	4299      	cmp	r1, r3
 800cc4e:	d002      	beq.n	800cc56 <__sflush_r+0x92>
 800cc50:	4628      	mov	r0, r5
 800cc52:	f7fd fbff 	bl	800a454 <_free_r>
 800cc56:	2000      	movs	r0, #0
 800cc58:	6360      	str	r0, [r4, #52]	; 0x34
 800cc5a:	e7c1      	b.n	800cbe0 <__sflush_r+0x1c>
 800cc5c:	6a21      	ldr	r1, [r4, #32]
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4628      	mov	r0, r5
 800cc62:	47b0      	blx	r6
 800cc64:	1c41      	adds	r1, r0, #1
 800cc66:	d1c7      	bne.n	800cbf8 <__sflush_r+0x34>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0c4      	beq.n	800cbf8 <__sflush_r+0x34>
 800cc6e:	2b1d      	cmp	r3, #29
 800cc70:	d001      	beq.n	800cc76 <__sflush_r+0xb2>
 800cc72:	2b16      	cmp	r3, #22
 800cc74:	d101      	bne.n	800cc7a <__sflush_r+0xb6>
 800cc76:	602f      	str	r7, [r5, #0]
 800cc78:	e7b1      	b.n	800cbde <__sflush_r+0x1a>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	e7ad      	b.n	800cbe0 <__sflush_r+0x1c>
 800cc84:	690f      	ldr	r7, [r1, #16]
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	d0a9      	beq.n	800cbde <__sflush_r+0x1a>
 800cc8a:	0793      	lsls	r3, r2, #30
 800cc8c:	680e      	ldr	r6, [r1, #0]
 800cc8e:	bf08      	it	eq
 800cc90:	694b      	ldreq	r3, [r1, #20]
 800cc92:	600f      	str	r7, [r1, #0]
 800cc94:	bf18      	it	ne
 800cc96:	2300      	movne	r3, #0
 800cc98:	eba6 0807 	sub.w	r8, r6, r7
 800cc9c:	608b      	str	r3, [r1, #8]
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	dd9c      	ble.n	800cbde <__sflush_r+0x1a>
 800cca4:	6a21      	ldr	r1, [r4, #32]
 800cca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cca8:	4643      	mov	r3, r8
 800ccaa:	463a      	mov	r2, r7
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b0      	blx	r6
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	dc06      	bgt.n	800ccc2 <__sflush_r+0xfe>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	e78e      	b.n	800cbe0 <__sflush_r+0x1c>
 800ccc2:	4407      	add	r7, r0
 800ccc4:	eba8 0800 	sub.w	r8, r8, r0
 800ccc8:	e7e9      	b.n	800cc9e <__sflush_r+0xda>
 800ccca:	bf00      	nop
 800cccc:	20400001 	.word	0x20400001

0800ccd0 <_fflush_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	690b      	ldr	r3, [r1, #16]
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	b913      	cbnz	r3, 800cce0 <_fflush_r+0x10>
 800ccda:	2500      	movs	r5, #0
 800ccdc:	4628      	mov	r0, r5
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	b118      	cbz	r0, 800ccea <_fflush_r+0x1a>
 800cce2:	6983      	ldr	r3, [r0, #24]
 800cce4:	b90b      	cbnz	r3, 800ccea <_fflush_r+0x1a>
 800cce6:	f000 f887 	bl	800cdf8 <__sinit>
 800ccea:	4b14      	ldr	r3, [pc, #80]	; (800cd3c <_fflush_r+0x6c>)
 800ccec:	429c      	cmp	r4, r3
 800ccee:	d11b      	bne.n	800cd28 <_fflush_r+0x58>
 800ccf0:	686c      	ldr	r4, [r5, #4]
 800ccf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0ef      	beq.n	800ccda <_fflush_r+0xa>
 800ccfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccfc:	07d0      	lsls	r0, r2, #31
 800ccfe:	d404      	bmi.n	800cd0a <_fflush_r+0x3a>
 800cd00:	0599      	lsls	r1, r3, #22
 800cd02:	d402      	bmi.n	800cd0a <_fflush_r+0x3a>
 800cd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd06:	f7ff fcd0 	bl	800c6aa <__retarget_lock_acquire_recursive>
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	f7ff ff59 	bl	800cbc4 <__sflush_r>
 800cd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd14:	07da      	lsls	r2, r3, #31
 800cd16:	4605      	mov	r5, r0
 800cd18:	d4e0      	bmi.n	800ccdc <_fflush_r+0xc>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	059b      	lsls	r3, r3, #22
 800cd1e:	d4dd      	bmi.n	800ccdc <_fflush_r+0xc>
 800cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd22:	f7ff fcc3 	bl	800c6ac <__retarget_lock_release_recursive>
 800cd26:	e7d9      	b.n	800ccdc <_fflush_r+0xc>
 800cd28:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <_fflush_r+0x70>)
 800cd2a:	429c      	cmp	r4, r3
 800cd2c:	d101      	bne.n	800cd32 <_fflush_r+0x62>
 800cd2e:	68ac      	ldr	r4, [r5, #8]
 800cd30:	e7df      	b.n	800ccf2 <_fflush_r+0x22>
 800cd32:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <_fflush_r+0x74>)
 800cd34:	429c      	cmp	r4, r3
 800cd36:	bf08      	it	eq
 800cd38:	68ec      	ldreq	r4, [r5, #12]
 800cd3a:	e7da      	b.n	800ccf2 <_fflush_r+0x22>
 800cd3c:	0800fbac 	.word	0x0800fbac
 800cd40:	0800fbcc 	.word	0x0800fbcc
 800cd44:	0800fb8c 	.word	0x0800fb8c

0800cd48 <std>:
 800cd48:	2300      	movs	r3, #0
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd56:	6083      	str	r3, [r0, #8]
 800cd58:	8181      	strh	r1, [r0, #12]
 800cd5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cd5c:	81c2      	strh	r2, [r0, #14]
 800cd5e:	6183      	str	r3, [r0, #24]
 800cd60:	4619      	mov	r1, r3
 800cd62:	2208      	movs	r2, #8
 800cd64:	305c      	adds	r0, #92	; 0x5c
 800cd66:	f7fd fb6d 	bl	800a444 <memset>
 800cd6a:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <std+0x38>)
 800cd6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cd6e:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <std+0x3c>)
 800cd70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <std+0x40>)
 800cd74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <std+0x44>)
 800cd78:	6224      	str	r4, [r4, #32]
 800cd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	bf00      	nop
 800cd80:	0800d095 	.word	0x0800d095
 800cd84:	0800d0b7 	.word	0x0800d0b7
 800cd88:	0800d0ef 	.word	0x0800d0ef
 800cd8c:	0800d113 	.word	0x0800d113

0800cd90 <_cleanup_r>:
 800cd90:	4901      	ldr	r1, [pc, #4]	; (800cd98 <_cleanup_r+0x8>)
 800cd92:	f000 b8af 	b.w	800cef4 <_fwalk_reent>
 800cd96:	bf00      	nop
 800cd98:	0800ccd1 	.word	0x0800ccd1

0800cd9c <__sfmoreglue>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	2268      	movs	r2, #104	; 0x68
 800cda0:	1e4d      	subs	r5, r1, #1
 800cda2:	4355      	muls	r5, r2
 800cda4:	460e      	mov	r6, r1
 800cda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdaa:	f7fd fbbf 	bl	800a52c <_malloc_r>
 800cdae:	4604      	mov	r4, r0
 800cdb0:	b140      	cbz	r0, 800cdc4 <__sfmoreglue+0x28>
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	e9c0 1600 	strd	r1, r6, [r0]
 800cdb8:	300c      	adds	r0, #12
 800cdba:	60a0      	str	r0, [r4, #8]
 800cdbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdc0:	f7fd fb40 	bl	800a444 <memset>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}

0800cdc8 <__sfp_lock_acquire>:
 800cdc8:	4801      	ldr	r0, [pc, #4]	; (800cdd0 <__sfp_lock_acquire+0x8>)
 800cdca:	f7ff bc6e 	b.w	800c6aa <__retarget_lock_acquire_recursive>
 800cdce:	bf00      	nop
 800cdd0:	200133d9 	.word	0x200133d9

0800cdd4 <__sfp_lock_release>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	; (800cddc <__sfp_lock_release+0x8>)
 800cdd6:	f7ff bc69 	b.w	800c6ac <__retarget_lock_release_recursive>
 800cdda:	bf00      	nop
 800cddc:	200133d9 	.word	0x200133d9

0800cde0 <__sinit_lock_acquire>:
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <__sinit_lock_acquire+0x8>)
 800cde2:	f7ff bc62 	b.w	800c6aa <__retarget_lock_acquire_recursive>
 800cde6:	bf00      	nop
 800cde8:	200133da 	.word	0x200133da

0800cdec <__sinit_lock_release>:
 800cdec:	4801      	ldr	r0, [pc, #4]	; (800cdf4 <__sinit_lock_release+0x8>)
 800cdee:	f7ff bc5d 	b.w	800c6ac <__retarget_lock_release_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	200133da 	.word	0x200133da

0800cdf8 <__sinit>:
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	f7ff fff0 	bl	800cde0 <__sinit_lock_acquire>
 800ce00:	69a3      	ldr	r3, [r4, #24]
 800ce02:	b11b      	cbz	r3, 800ce0c <__sinit+0x14>
 800ce04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce08:	f7ff bff0 	b.w	800cdec <__sinit_lock_release>
 800ce0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce10:	6523      	str	r3, [r4, #80]	; 0x50
 800ce12:	4b13      	ldr	r3, [pc, #76]	; (800ce60 <__sinit+0x68>)
 800ce14:	4a13      	ldr	r2, [pc, #76]	; (800ce64 <__sinit+0x6c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce1a:	42a3      	cmp	r3, r4
 800ce1c:	bf04      	itt	eq
 800ce1e:	2301      	moveq	r3, #1
 800ce20:	61a3      	streq	r3, [r4, #24]
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 f820 	bl	800ce68 <__sfp>
 800ce28:	6060      	str	r0, [r4, #4]
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 f81c 	bl	800ce68 <__sfp>
 800ce30:	60a0      	str	r0, [r4, #8]
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 f818 	bl	800ce68 <__sfp>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	60e0      	str	r0, [r4, #12]
 800ce3c:	2104      	movs	r1, #4
 800ce3e:	6860      	ldr	r0, [r4, #4]
 800ce40:	f7ff ff82 	bl	800cd48 <std>
 800ce44:	68a0      	ldr	r0, [r4, #8]
 800ce46:	2201      	movs	r2, #1
 800ce48:	2109      	movs	r1, #9
 800ce4a:	f7ff ff7d 	bl	800cd48 <std>
 800ce4e:	68e0      	ldr	r0, [r4, #12]
 800ce50:	2202      	movs	r2, #2
 800ce52:	2112      	movs	r1, #18
 800ce54:	f7ff ff78 	bl	800cd48 <std>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	61a3      	str	r3, [r4, #24]
 800ce5c:	e7d2      	b.n	800ce04 <__sinit+0xc>
 800ce5e:	bf00      	nop
 800ce60:	0800f814 	.word	0x0800f814
 800ce64:	0800cd91 	.word	0x0800cd91

0800ce68 <__sfp>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	f7ff ffac 	bl	800cdc8 <__sfp_lock_acquire>
 800ce70:	4b1e      	ldr	r3, [pc, #120]	; (800ceec <__sfp+0x84>)
 800ce72:	681e      	ldr	r6, [r3, #0]
 800ce74:	69b3      	ldr	r3, [r6, #24]
 800ce76:	b913      	cbnz	r3, 800ce7e <__sfp+0x16>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff ffbd 	bl	800cdf8 <__sinit>
 800ce7e:	3648      	adds	r6, #72	; 0x48
 800ce80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	d503      	bpl.n	800ce90 <__sfp+0x28>
 800ce88:	6833      	ldr	r3, [r6, #0]
 800ce8a:	b30b      	cbz	r3, 800ced0 <__sfp+0x68>
 800ce8c:	6836      	ldr	r6, [r6, #0]
 800ce8e:	e7f7      	b.n	800ce80 <__sfp+0x18>
 800ce90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce94:	b9d5      	cbnz	r5, 800cecc <__sfp+0x64>
 800ce96:	4b16      	ldr	r3, [pc, #88]	; (800cef0 <__sfp+0x88>)
 800ce98:	60e3      	str	r3, [r4, #12]
 800ce9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cea0:	f7ff fc02 	bl	800c6a8 <__retarget_lock_init_recursive>
 800cea4:	f7ff ff96 	bl	800cdd4 <__sfp_lock_release>
 800cea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ceac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ceb0:	6025      	str	r5, [r4, #0]
 800ceb2:	61a5      	str	r5, [r4, #24]
 800ceb4:	2208      	movs	r2, #8
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cebc:	f7fd fac2 	bl	800a444 <memset>
 800cec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cec8:	4620      	mov	r0, r4
 800ceca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cecc:	3468      	adds	r4, #104	; 0x68
 800cece:	e7d9      	b.n	800ce84 <__sfp+0x1c>
 800ced0:	2104      	movs	r1, #4
 800ced2:	4638      	mov	r0, r7
 800ced4:	f7ff ff62 	bl	800cd9c <__sfmoreglue>
 800ced8:	4604      	mov	r4, r0
 800ceda:	6030      	str	r0, [r6, #0]
 800cedc:	2800      	cmp	r0, #0
 800cede:	d1d5      	bne.n	800ce8c <__sfp+0x24>
 800cee0:	f7ff ff78 	bl	800cdd4 <__sfp_lock_release>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	e7ee      	b.n	800cec8 <__sfp+0x60>
 800ceea:	bf00      	nop
 800ceec:	0800f814 	.word	0x0800f814
 800cef0:	ffff0001 	.word	0xffff0001

0800cef4 <_fwalk_reent>:
 800cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef8:	4606      	mov	r6, r0
 800cefa:	4688      	mov	r8, r1
 800cefc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf00:	2700      	movs	r7, #0
 800cf02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf06:	f1b9 0901 	subs.w	r9, r9, #1
 800cf0a:	d505      	bpl.n	800cf18 <_fwalk_reent+0x24>
 800cf0c:	6824      	ldr	r4, [r4, #0]
 800cf0e:	2c00      	cmp	r4, #0
 800cf10:	d1f7      	bne.n	800cf02 <_fwalk_reent+0xe>
 800cf12:	4638      	mov	r0, r7
 800cf14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf18:	89ab      	ldrh	r3, [r5, #12]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d907      	bls.n	800cf2e <_fwalk_reent+0x3a>
 800cf1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf22:	3301      	adds	r3, #1
 800cf24:	d003      	beq.n	800cf2e <_fwalk_reent+0x3a>
 800cf26:	4629      	mov	r1, r5
 800cf28:	4630      	mov	r0, r6
 800cf2a:	47c0      	blx	r8
 800cf2c:	4307      	orrs	r7, r0
 800cf2e:	3568      	adds	r5, #104	; 0x68
 800cf30:	e7e9      	b.n	800cf06 <_fwalk_reent+0x12>

0800cf32 <__swhatbuf_r>:
 800cf32:	b570      	push	{r4, r5, r6, lr}
 800cf34:	460e      	mov	r6, r1
 800cf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	b096      	sub	sp, #88	; 0x58
 800cf3e:	4614      	mov	r4, r2
 800cf40:	461d      	mov	r5, r3
 800cf42:	da08      	bge.n	800cf56 <__swhatbuf_r+0x24>
 800cf44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	602a      	str	r2, [r5, #0]
 800cf4c:	061a      	lsls	r2, r3, #24
 800cf4e:	d410      	bmi.n	800cf72 <__swhatbuf_r+0x40>
 800cf50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf54:	e00e      	b.n	800cf74 <__swhatbuf_r+0x42>
 800cf56:	466a      	mov	r2, sp
 800cf58:	f000 f902 	bl	800d160 <_fstat_r>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	dbf1      	blt.n	800cf44 <__swhatbuf_r+0x12>
 800cf60:	9a01      	ldr	r2, [sp, #4]
 800cf62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf6a:	425a      	negs	r2, r3
 800cf6c:	415a      	adcs	r2, r3
 800cf6e:	602a      	str	r2, [r5, #0]
 800cf70:	e7ee      	b.n	800cf50 <__swhatbuf_r+0x1e>
 800cf72:	2340      	movs	r3, #64	; 0x40
 800cf74:	2000      	movs	r0, #0
 800cf76:	6023      	str	r3, [r4, #0]
 800cf78:	b016      	add	sp, #88	; 0x58
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}

0800cf7c <__smakebuf_r>:
 800cf7c:	898b      	ldrh	r3, [r1, #12]
 800cf7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf80:	079d      	lsls	r5, r3, #30
 800cf82:	4606      	mov	r6, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	d507      	bpl.n	800cf98 <__smakebuf_r+0x1c>
 800cf88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	6123      	str	r3, [r4, #16]
 800cf90:	2301      	movs	r3, #1
 800cf92:	6163      	str	r3, [r4, #20]
 800cf94:	b002      	add	sp, #8
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
 800cf98:	ab01      	add	r3, sp, #4
 800cf9a:	466a      	mov	r2, sp
 800cf9c:	f7ff ffc9 	bl	800cf32 <__swhatbuf_r>
 800cfa0:	9900      	ldr	r1, [sp, #0]
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7fd fac1 	bl	800a52c <_malloc_r>
 800cfaa:	b948      	cbnz	r0, 800cfc0 <__smakebuf_r+0x44>
 800cfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb0:	059a      	lsls	r2, r3, #22
 800cfb2:	d4ef      	bmi.n	800cf94 <__smakebuf_r+0x18>
 800cfb4:	f023 0303 	bic.w	r3, r3, #3
 800cfb8:	f043 0302 	orr.w	r3, r3, #2
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	e7e3      	b.n	800cf88 <__smakebuf_r+0xc>
 800cfc0:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <__smakebuf_r+0x7c>)
 800cfc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	6020      	str	r0, [r4, #0]
 800cfc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	9b00      	ldr	r3, [sp, #0]
 800cfd0:	6163      	str	r3, [r4, #20]
 800cfd2:	9b01      	ldr	r3, [sp, #4]
 800cfd4:	6120      	str	r0, [r4, #16]
 800cfd6:	b15b      	cbz	r3, 800cff0 <__smakebuf_r+0x74>
 800cfd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f000 f8d1 	bl	800d184 <_isatty_r>
 800cfe2:	b128      	cbz	r0, 800cff0 <__smakebuf_r+0x74>
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	f023 0303 	bic.w	r3, r3, #3
 800cfea:	f043 0301 	orr.w	r3, r3, #1
 800cfee:	81a3      	strh	r3, [r4, #12]
 800cff0:	89a0      	ldrh	r0, [r4, #12]
 800cff2:	4305      	orrs	r5, r0
 800cff4:	81a5      	strh	r5, [r4, #12]
 800cff6:	e7cd      	b.n	800cf94 <__smakebuf_r+0x18>
 800cff8:	0800cd91 	.word	0x0800cd91

0800cffc <_malloc_usable_size_r>:
 800cffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d000:	1f18      	subs	r0, r3, #4
 800d002:	2b00      	cmp	r3, #0
 800d004:	bfbc      	itt	lt
 800d006:	580b      	ldrlt	r3, [r1, r0]
 800d008:	18c0      	addlt	r0, r0, r3
 800d00a:	4770      	bx	lr

0800d00c <_raise_r>:
 800d00c:	291f      	cmp	r1, #31
 800d00e:	b538      	push	{r3, r4, r5, lr}
 800d010:	4604      	mov	r4, r0
 800d012:	460d      	mov	r5, r1
 800d014:	d904      	bls.n	800d020 <_raise_r+0x14>
 800d016:	2316      	movs	r3, #22
 800d018:	6003      	str	r3, [r0, #0]
 800d01a:	f04f 30ff 	mov.w	r0, #4294967295
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d022:	b112      	cbz	r2, 800d02a <_raise_r+0x1e>
 800d024:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d028:	b94b      	cbnz	r3, 800d03e <_raise_r+0x32>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f830 	bl	800d090 <_getpid_r>
 800d030:	462a      	mov	r2, r5
 800d032:	4601      	mov	r1, r0
 800d034:	4620      	mov	r0, r4
 800d036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03a:	f000 b817 	b.w	800d06c <_kill_r>
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d00a      	beq.n	800d058 <_raise_r+0x4c>
 800d042:	1c59      	adds	r1, r3, #1
 800d044:	d103      	bne.n	800d04e <_raise_r+0x42>
 800d046:	2316      	movs	r3, #22
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	2001      	movs	r0, #1
 800d04c:	e7e7      	b.n	800d01e <_raise_r+0x12>
 800d04e:	2400      	movs	r4, #0
 800d050:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d054:	4628      	mov	r0, r5
 800d056:	4798      	blx	r3
 800d058:	2000      	movs	r0, #0
 800d05a:	e7e0      	b.n	800d01e <_raise_r+0x12>

0800d05c <raise>:
 800d05c:	4b02      	ldr	r3, [pc, #8]	; (800d068 <raise+0xc>)
 800d05e:	4601      	mov	r1, r0
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	f7ff bfd3 	b.w	800d00c <_raise_r>
 800d066:	bf00      	nop
 800d068:	20000028 	.word	0x20000028

0800d06c <_kill_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	; (800d08c <_kill_r+0x20>)
 800d070:	2300      	movs	r3, #0
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	f7f5 ff0f 	bl	8002e9c <_kill>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	d102      	bne.n	800d088 <_kill_r+0x1c>
 800d082:	682b      	ldr	r3, [r5, #0]
 800d084:	b103      	cbz	r3, 800d088 <_kill_r+0x1c>
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	bd38      	pop	{r3, r4, r5, pc}
 800d08a:	bf00      	nop
 800d08c:	200133d4 	.word	0x200133d4

0800d090 <_getpid_r>:
 800d090:	f7f5 befc 	b.w	8002e8c <_getpid>

0800d094 <__sread>:
 800d094:	b510      	push	{r4, lr}
 800d096:	460c      	mov	r4, r1
 800d098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09c:	f000 f894 	bl	800d1c8 <_read_r>
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	bfab      	itete	ge
 800d0a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0a8:	181b      	addge	r3, r3, r0
 800d0aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ae:	bfac      	ite	ge
 800d0b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0b2:	81a3      	strhlt	r3, [r4, #12]
 800d0b4:	bd10      	pop	{r4, pc}

0800d0b6 <__swrite>:
 800d0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ba:	461f      	mov	r7, r3
 800d0bc:	898b      	ldrh	r3, [r1, #12]
 800d0be:	05db      	lsls	r3, r3, #23
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	d505      	bpl.n	800d0d4 <__swrite+0x1e>
 800d0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0cc:	2302      	movs	r3, #2
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f000 f868 	bl	800d1a4 <_lseek_r>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	463b      	mov	r3, r7
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ea:	f000 b817 	b.w	800d11c <_write_r>

0800d0ee <__sseek>:
 800d0ee:	b510      	push	{r4, lr}
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f6:	f000 f855 	bl	800d1a4 <_lseek_r>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	bf15      	itete	ne
 800d100:	6560      	strne	r0, [r4, #84]	; 0x54
 800d102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d10a:	81a3      	strheq	r3, [r4, #12]
 800d10c:	bf18      	it	ne
 800d10e:	81a3      	strhne	r3, [r4, #12]
 800d110:	bd10      	pop	{r4, pc}

0800d112 <__sclose>:
 800d112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d116:	f000 b813 	b.w	800d140 <_close_r>
	...

0800d11c <_write_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4d07      	ldr	r5, [pc, #28]	; (800d13c <_write_r+0x20>)
 800d120:	4604      	mov	r4, r0
 800d122:	4608      	mov	r0, r1
 800d124:	4611      	mov	r1, r2
 800d126:	2200      	movs	r2, #0
 800d128:	602a      	str	r2, [r5, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f7f5 feed 	bl	8002f0a <_write>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_write_r+0x1e>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_write_r+0x1e>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	200133d4 	.word	0x200133d4

0800d140 <_close_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4d06      	ldr	r5, [pc, #24]	; (800d15c <_close_r+0x1c>)
 800d144:	2300      	movs	r3, #0
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	602b      	str	r3, [r5, #0]
 800d14c:	f7f5 fef9 	bl	8002f42 <_close>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	d102      	bne.n	800d15a <_close_r+0x1a>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b103      	cbz	r3, 800d15a <_close_r+0x1a>
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	bd38      	pop	{r3, r4, r5, pc}
 800d15c:	200133d4 	.word	0x200133d4

0800d160 <_fstat_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d07      	ldr	r5, [pc, #28]	; (800d180 <_fstat_r+0x20>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	f7f5 fef4 	bl	8002f5a <_fstat>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	d102      	bne.n	800d17c <_fstat_r+0x1c>
 800d176:	682b      	ldr	r3, [r5, #0]
 800d178:	b103      	cbz	r3, 800d17c <_fstat_r+0x1c>
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	bd38      	pop	{r3, r4, r5, pc}
 800d17e:	bf00      	nop
 800d180:	200133d4 	.word	0x200133d4

0800d184 <_isatty_r>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4d06      	ldr	r5, [pc, #24]	; (800d1a0 <_isatty_r+0x1c>)
 800d188:	2300      	movs	r3, #0
 800d18a:	4604      	mov	r4, r0
 800d18c:	4608      	mov	r0, r1
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	f7f5 fef3 	bl	8002f7a <_isatty>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_isatty_r+0x1a>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_isatty_r+0x1a>
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	200133d4 	.word	0x200133d4

0800d1a4 <_lseek_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d07      	ldr	r5, [pc, #28]	; (800d1c4 <_lseek_r+0x20>)
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	4608      	mov	r0, r1
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	602a      	str	r2, [r5, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	f7f5 feec 	bl	8002f90 <_lseek>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_lseek_r+0x1e>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_lseek_r+0x1e>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	200133d4 	.word	0x200133d4

0800d1c8 <_read_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d07      	ldr	r5, [pc, #28]	; (800d1e8 <_read_r+0x20>)
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f7f5 fe7a 	bl	8002ed0 <_read>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_read_r+0x1e>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_read_r+0x1e>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	200133d4 	.word	0x200133d4
 800d1ec:	00000000 	.word	0x00000000

0800d1f0 <cos>:
 800d1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1f2:	ec53 2b10 	vmov	r2, r3, d0
 800d1f6:	4826      	ldr	r0, [pc, #152]	; (800d290 <cos+0xa0>)
 800d1f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d1fc:	4281      	cmp	r1, r0
 800d1fe:	dc06      	bgt.n	800d20e <cos+0x1e>
 800d200:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d288 <cos+0x98>
 800d204:	b005      	add	sp, #20
 800d206:	f85d eb04 	ldr.w	lr, [sp], #4
 800d20a:	f001 ba15 	b.w	800e638 <__kernel_cos>
 800d20e:	4821      	ldr	r0, [pc, #132]	; (800d294 <cos+0xa4>)
 800d210:	4281      	cmp	r1, r0
 800d212:	dd09      	ble.n	800d228 <cos+0x38>
 800d214:	ee10 0a10 	vmov	r0, s0
 800d218:	4619      	mov	r1, r3
 800d21a:	f7f3 f84d 	bl	80002b8 <__aeabi_dsub>
 800d21e:	ec41 0b10 	vmov	d0, r0, r1
 800d222:	b005      	add	sp, #20
 800d224:	f85d fb04 	ldr.w	pc, [sp], #4
 800d228:	4668      	mov	r0, sp
 800d22a:	f000 ff45 	bl	800e0b8 <__ieee754_rem_pio2>
 800d22e:	f000 0003 	and.w	r0, r0, #3
 800d232:	2801      	cmp	r0, #1
 800d234:	d00b      	beq.n	800d24e <cos+0x5e>
 800d236:	2802      	cmp	r0, #2
 800d238:	d016      	beq.n	800d268 <cos+0x78>
 800d23a:	b9e0      	cbnz	r0, 800d276 <cos+0x86>
 800d23c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d240:	ed9d 0b00 	vldr	d0, [sp]
 800d244:	f001 f9f8 	bl	800e638 <__kernel_cos>
 800d248:	ec51 0b10 	vmov	r0, r1, d0
 800d24c:	e7e7      	b.n	800d21e <cos+0x2e>
 800d24e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d252:	ed9d 0b00 	vldr	d0, [sp]
 800d256:	f001 fe07 	bl	800ee68 <__kernel_sin>
 800d25a:	ec53 2b10 	vmov	r2, r3, d0
 800d25e:	ee10 0a10 	vmov	r0, s0
 800d262:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d266:	e7da      	b.n	800d21e <cos+0x2e>
 800d268:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d26c:	ed9d 0b00 	vldr	d0, [sp]
 800d270:	f001 f9e2 	bl	800e638 <__kernel_cos>
 800d274:	e7f1      	b.n	800d25a <cos+0x6a>
 800d276:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d27a:	ed9d 0b00 	vldr	d0, [sp]
 800d27e:	2001      	movs	r0, #1
 800d280:	f001 fdf2 	bl	800ee68 <__kernel_sin>
 800d284:	e7e0      	b.n	800d248 <cos+0x58>
 800d286:	bf00      	nop
	...
 800d290:	3fe921fb 	.word	0x3fe921fb
 800d294:	7fefffff 	.word	0x7fefffff

0800d298 <round>:
 800d298:	ec51 0b10 	vmov	r0, r1, d0
 800d29c:	b570      	push	{r4, r5, r6, lr}
 800d29e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d2a2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d2a6:	2c13      	cmp	r4, #19
 800d2a8:	ee10 2a10 	vmov	r2, s0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	dc19      	bgt.n	800d2e4 <round+0x4c>
 800d2b0:	2c00      	cmp	r4, #0
 800d2b2:	da09      	bge.n	800d2c8 <round+0x30>
 800d2b4:	3401      	adds	r4, #1
 800d2b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d2ba:	d103      	bne.n	800d2c4 <round+0x2c>
 800d2bc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d2c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	e028      	b.n	800d31a <round+0x82>
 800d2c8:	4d15      	ldr	r5, [pc, #84]	; (800d320 <round+0x88>)
 800d2ca:	4125      	asrs	r5, r4
 800d2cc:	ea01 0605 	and.w	r6, r1, r5
 800d2d0:	4332      	orrs	r2, r6
 800d2d2:	d00e      	beq.n	800d2f2 <round+0x5a>
 800d2d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d2d8:	fa42 f404 	asr.w	r4, r2, r4
 800d2dc:	4423      	add	r3, r4
 800d2de:	ea23 0305 	bic.w	r3, r3, r5
 800d2e2:	e7ef      	b.n	800d2c4 <round+0x2c>
 800d2e4:	2c33      	cmp	r4, #51	; 0x33
 800d2e6:	dd07      	ble.n	800d2f8 <round+0x60>
 800d2e8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d2ec:	d101      	bne.n	800d2f2 <round+0x5a>
 800d2ee:	f7f2 ffe5 	bl	80002bc <__adddf3>
 800d2f2:	ec41 0b10 	vmov	d0, r0, r1
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
 800d2f8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d2fc:	f04f 35ff 	mov.w	r5, #4294967295
 800d300:	40f5      	lsrs	r5, r6
 800d302:	4228      	tst	r0, r5
 800d304:	d0f5      	beq.n	800d2f2 <round+0x5a>
 800d306:	2101      	movs	r1, #1
 800d308:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d30c:	fa01 f404 	lsl.w	r4, r1, r4
 800d310:	1912      	adds	r2, r2, r4
 800d312:	bf28      	it	cs
 800d314:	185b      	addcs	r3, r3, r1
 800d316:	ea22 0205 	bic.w	r2, r2, r5
 800d31a:	4619      	mov	r1, r3
 800d31c:	4610      	mov	r0, r2
 800d31e:	e7e8      	b.n	800d2f2 <round+0x5a>
 800d320:	000fffff 	.word	0x000fffff
 800d324:	00000000 	.word	0x00000000

0800d328 <sin>:
 800d328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d32a:	ec53 2b10 	vmov	r2, r3, d0
 800d32e:	4828      	ldr	r0, [pc, #160]	; (800d3d0 <sin+0xa8>)
 800d330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d334:	4281      	cmp	r1, r0
 800d336:	dc07      	bgt.n	800d348 <sin+0x20>
 800d338:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d3c8 <sin+0xa0>
 800d33c:	2000      	movs	r0, #0
 800d33e:	b005      	add	sp, #20
 800d340:	f85d eb04 	ldr.w	lr, [sp], #4
 800d344:	f001 bd90 	b.w	800ee68 <__kernel_sin>
 800d348:	4822      	ldr	r0, [pc, #136]	; (800d3d4 <sin+0xac>)
 800d34a:	4281      	cmp	r1, r0
 800d34c:	dd09      	ble.n	800d362 <sin+0x3a>
 800d34e:	ee10 0a10 	vmov	r0, s0
 800d352:	4619      	mov	r1, r3
 800d354:	f7f2 ffb0 	bl	80002b8 <__aeabi_dsub>
 800d358:	ec41 0b10 	vmov	d0, r0, r1
 800d35c:	b005      	add	sp, #20
 800d35e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d362:	4668      	mov	r0, sp
 800d364:	f000 fea8 	bl	800e0b8 <__ieee754_rem_pio2>
 800d368:	f000 0003 	and.w	r0, r0, #3
 800d36c:	2801      	cmp	r0, #1
 800d36e:	d00c      	beq.n	800d38a <sin+0x62>
 800d370:	2802      	cmp	r0, #2
 800d372:	d011      	beq.n	800d398 <sin+0x70>
 800d374:	b9f0      	cbnz	r0, 800d3b4 <sin+0x8c>
 800d376:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d37a:	ed9d 0b00 	vldr	d0, [sp]
 800d37e:	2001      	movs	r0, #1
 800d380:	f001 fd72 	bl	800ee68 <__kernel_sin>
 800d384:	ec51 0b10 	vmov	r0, r1, d0
 800d388:	e7e6      	b.n	800d358 <sin+0x30>
 800d38a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d38e:	ed9d 0b00 	vldr	d0, [sp]
 800d392:	f001 f951 	bl	800e638 <__kernel_cos>
 800d396:	e7f5      	b.n	800d384 <sin+0x5c>
 800d398:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d39c:	ed9d 0b00 	vldr	d0, [sp]
 800d3a0:	2001      	movs	r0, #1
 800d3a2:	f001 fd61 	bl	800ee68 <__kernel_sin>
 800d3a6:	ec53 2b10 	vmov	r2, r3, d0
 800d3aa:	ee10 0a10 	vmov	r0, s0
 800d3ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3b2:	e7d1      	b.n	800d358 <sin+0x30>
 800d3b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3b8:	ed9d 0b00 	vldr	d0, [sp]
 800d3bc:	f001 f93c 	bl	800e638 <__kernel_cos>
 800d3c0:	e7f1      	b.n	800d3a6 <sin+0x7e>
 800d3c2:	bf00      	nop
 800d3c4:	f3af 8000 	nop.w
	...
 800d3d0:	3fe921fb 	.word	0x3fe921fb
 800d3d4:	7fefffff 	.word	0x7fefffff

0800d3d8 <atan2>:
 800d3d8:	f000 b872 	b.w	800d4c0 <__ieee754_atan2>

0800d3dc <pow>:
 800d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3de:	ed2d 8b02 	vpush	{d8}
 800d3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d3e6:	eef0 8a60 	vmov.f32	s17, s1
 800d3ea:	ec55 4b11 	vmov	r4, r5, d1
 800d3ee:	f000 f933 	bl	800d658 <__ieee754_pow>
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	ec57 6b10 	vmov	r6, r7, d0
 800d3fe:	f7f3 fbad 	bl	8000b5c <__aeabi_dcmpun>
 800d402:	2800      	cmp	r0, #0
 800d404:	d13b      	bne.n	800d47e <pow+0xa2>
 800d406:	ec51 0b18 	vmov	r0, r1, d8
 800d40a:	2200      	movs	r2, #0
 800d40c:	2300      	movs	r3, #0
 800d40e:	f7f3 fb73 	bl	8000af8 <__aeabi_dcmpeq>
 800d412:	b1b8      	cbz	r0, 800d444 <pow+0x68>
 800d414:	2200      	movs	r2, #0
 800d416:	2300      	movs	r3, #0
 800d418:	4620      	mov	r0, r4
 800d41a:	4629      	mov	r1, r5
 800d41c:	f7f3 fb6c 	bl	8000af8 <__aeabi_dcmpeq>
 800d420:	2800      	cmp	r0, #0
 800d422:	d146      	bne.n	800d4b2 <pow+0xd6>
 800d424:	ec45 4b10 	vmov	d0, r4, r5
 800d428:	f001 ffb7 	bl	800f39a <finite>
 800d42c:	b338      	cbz	r0, 800d47e <pow+0xa2>
 800d42e:	2200      	movs	r2, #0
 800d430:	2300      	movs	r3, #0
 800d432:	4620      	mov	r0, r4
 800d434:	4629      	mov	r1, r5
 800d436:	f7f3 fb69 	bl	8000b0c <__aeabi_dcmplt>
 800d43a:	b300      	cbz	r0, 800d47e <pow+0xa2>
 800d43c:	f7fc ffc2 	bl	800a3c4 <__errno>
 800d440:	2322      	movs	r3, #34	; 0x22
 800d442:	e01b      	b.n	800d47c <pow+0xa0>
 800d444:	ec47 6b10 	vmov	d0, r6, r7
 800d448:	f001 ffa7 	bl	800f39a <finite>
 800d44c:	b9e0      	cbnz	r0, 800d488 <pow+0xac>
 800d44e:	eeb0 0a48 	vmov.f32	s0, s16
 800d452:	eef0 0a68 	vmov.f32	s1, s17
 800d456:	f001 ffa0 	bl	800f39a <finite>
 800d45a:	b1a8      	cbz	r0, 800d488 <pow+0xac>
 800d45c:	ec45 4b10 	vmov	d0, r4, r5
 800d460:	f001 ff9b 	bl	800f39a <finite>
 800d464:	b180      	cbz	r0, 800d488 <pow+0xac>
 800d466:	4632      	mov	r2, r6
 800d468:	463b      	mov	r3, r7
 800d46a:	4630      	mov	r0, r6
 800d46c:	4639      	mov	r1, r7
 800d46e:	f7f3 fb75 	bl	8000b5c <__aeabi_dcmpun>
 800d472:	2800      	cmp	r0, #0
 800d474:	d0e2      	beq.n	800d43c <pow+0x60>
 800d476:	f7fc ffa5 	bl	800a3c4 <__errno>
 800d47a:	2321      	movs	r3, #33	; 0x21
 800d47c:	6003      	str	r3, [r0, #0]
 800d47e:	ecbd 8b02 	vpop	{d8}
 800d482:	ec47 6b10 	vmov	d0, r6, r7
 800d486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d488:	2200      	movs	r2, #0
 800d48a:	2300      	movs	r3, #0
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	f7f3 fb32 	bl	8000af8 <__aeabi_dcmpeq>
 800d494:	2800      	cmp	r0, #0
 800d496:	d0f2      	beq.n	800d47e <pow+0xa2>
 800d498:	eeb0 0a48 	vmov.f32	s0, s16
 800d49c:	eef0 0a68 	vmov.f32	s1, s17
 800d4a0:	f001 ff7b 	bl	800f39a <finite>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d0ea      	beq.n	800d47e <pow+0xa2>
 800d4a8:	ec45 4b10 	vmov	d0, r4, r5
 800d4ac:	f001 ff75 	bl	800f39a <finite>
 800d4b0:	e7c3      	b.n	800d43a <pow+0x5e>
 800d4b2:	4f01      	ldr	r7, [pc, #4]	; (800d4b8 <pow+0xdc>)
 800d4b4:	2600      	movs	r6, #0
 800d4b6:	e7e2      	b.n	800d47e <pow+0xa2>
 800d4b8:	3ff00000 	.word	0x3ff00000
 800d4bc:	00000000 	.word	0x00000000

0800d4c0 <__ieee754_atan2>:
 800d4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c4:	ec57 6b11 	vmov	r6, r7, d1
 800d4c8:	4273      	negs	r3, r6
 800d4ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d650 <__ieee754_atan2+0x190>
 800d4ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d4d2:	4333      	orrs	r3, r6
 800d4d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d4d8:	4573      	cmp	r3, lr
 800d4da:	ec51 0b10 	vmov	r0, r1, d0
 800d4de:	ee11 8a10 	vmov	r8, s2
 800d4e2:	d80a      	bhi.n	800d4fa <__ieee754_atan2+0x3a>
 800d4e4:	4244      	negs	r4, r0
 800d4e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4ea:	4304      	orrs	r4, r0
 800d4ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d4f0:	4574      	cmp	r4, lr
 800d4f2:	ee10 9a10 	vmov	r9, s0
 800d4f6:	468c      	mov	ip, r1
 800d4f8:	d907      	bls.n	800d50a <__ieee754_atan2+0x4a>
 800d4fa:	4632      	mov	r2, r6
 800d4fc:	463b      	mov	r3, r7
 800d4fe:	f7f2 fedd 	bl	80002bc <__adddf3>
 800d502:	ec41 0b10 	vmov	d0, r0, r1
 800d506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d50e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d512:	4334      	orrs	r4, r6
 800d514:	d103      	bne.n	800d51e <__ieee754_atan2+0x5e>
 800d516:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51a:	f001 bd95 	b.w	800f048 <atan>
 800d51e:	17bc      	asrs	r4, r7, #30
 800d520:	f004 0402 	and.w	r4, r4, #2
 800d524:	ea53 0909 	orrs.w	r9, r3, r9
 800d528:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d52c:	d107      	bne.n	800d53e <__ieee754_atan2+0x7e>
 800d52e:	2c02      	cmp	r4, #2
 800d530:	d060      	beq.n	800d5f4 <__ieee754_atan2+0x134>
 800d532:	2c03      	cmp	r4, #3
 800d534:	d1e5      	bne.n	800d502 <__ieee754_atan2+0x42>
 800d536:	a142      	add	r1, pc, #264	; (adr r1, 800d640 <__ieee754_atan2+0x180>)
 800d538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d53c:	e7e1      	b.n	800d502 <__ieee754_atan2+0x42>
 800d53e:	ea52 0808 	orrs.w	r8, r2, r8
 800d542:	d106      	bne.n	800d552 <__ieee754_atan2+0x92>
 800d544:	f1bc 0f00 	cmp.w	ip, #0
 800d548:	da5f      	bge.n	800d60a <__ieee754_atan2+0x14a>
 800d54a:	a13f      	add	r1, pc, #252	; (adr r1, 800d648 <__ieee754_atan2+0x188>)
 800d54c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d550:	e7d7      	b.n	800d502 <__ieee754_atan2+0x42>
 800d552:	4572      	cmp	r2, lr
 800d554:	d10f      	bne.n	800d576 <__ieee754_atan2+0xb6>
 800d556:	4293      	cmp	r3, r2
 800d558:	f104 34ff 	add.w	r4, r4, #4294967295
 800d55c:	d107      	bne.n	800d56e <__ieee754_atan2+0xae>
 800d55e:	2c02      	cmp	r4, #2
 800d560:	d84c      	bhi.n	800d5fc <__ieee754_atan2+0x13c>
 800d562:	4b35      	ldr	r3, [pc, #212]	; (800d638 <__ieee754_atan2+0x178>)
 800d564:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d568:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d56c:	e7c9      	b.n	800d502 <__ieee754_atan2+0x42>
 800d56e:	2c02      	cmp	r4, #2
 800d570:	d848      	bhi.n	800d604 <__ieee754_atan2+0x144>
 800d572:	4b32      	ldr	r3, [pc, #200]	; (800d63c <__ieee754_atan2+0x17c>)
 800d574:	e7f6      	b.n	800d564 <__ieee754_atan2+0xa4>
 800d576:	4573      	cmp	r3, lr
 800d578:	d0e4      	beq.n	800d544 <__ieee754_atan2+0x84>
 800d57a:	1a9b      	subs	r3, r3, r2
 800d57c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d580:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d584:	da1e      	bge.n	800d5c4 <__ieee754_atan2+0x104>
 800d586:	2f00      	cmp	r7, #0
 800d588:	da01      	bge.n	800d58e <__ieee754_atan2+0xce>
 800d58a:	323c      	adds	r2, #60	; 0x3c
 800d58c:	db1e      	blt.n	800d5cc <__ieee754_atan2+0x10c>
 800d58e:	4632      	mov	r2, r6
 800d590:	463b      	mov	r3, r7
 800d592:	f7f3 f973 	bl	800087c <__aeabi_ddiv>
 800d596:	ec41 0b10 	vmov	d0, r0, r1
 800d59a:	f001 fef5 	bl	800f388 <fabs>
 800d59e:	f001 fd53 	bl	800f048 <atan>
 800d5a2:	ec51 0b10 	vmov	r0, r1, d0
 800d5a6:	2c01      	cmp	r4, #1
 800d5a8:	d013      	beq.n	800d5d2 <__ieee754_atan2+0x112>
 800d5aa:	2c02      	cmp	r4, #2
 800d5ac:	d015      	beq.n	800d5da <__ieee754_atan2+0x11a>
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	d0a7      	beq.n	800d502 <__ieee754_atan2+0x42>
 800d5b2:	a319      	add	r3, pc, #100	; (adr r3, 800d618 <__ieee754_atan2+0x158>)
 800d5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b8:	f7f2 fe7e 	bl	80002b8 <__aeabi_dsub>
 800d5bc:	a318      	add	r3, pc, #96	; (adr r3, 800d620 <__ieee754_atan2+0x160>)
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	e014      	b.n	800d5ee <__ieee754_atan2+0x12e>
 800d5c4:	a118      	add	r1, pc, #96	; (adr r1, 800d628 <__ieee754_atan2+0x168>)
 800d5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ca:	e7ec      	b.n	800d5a6 <__ieee754_atan2+0xe6>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	e7e9      	b.n	800d5a6 <__ieee754_atan2+0xe6>
 800d5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	e793      	b.n	800d502 <__ieee754_atan2+0x42>
 800d5da:	a30f      	add	r3, pc, #60	; (adr r3, 800d618 <__ieee754_atan2+0x158>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f2 fe6a 	bl	80002b8 <__aeabi_dsub>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	a10d      	add	r1, pc, #52	; (adr r1, 800d620 <__ieee754_atan2+0x160>)
 800d5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5ee:	f7f2 fe63 	bl	80002b8 <__aeabi_dsub>
 800d5f2:	e786      	b.n	800d502 <__ieee754_atan2+0x42>
 800d5f4:	a10a      	add	r1, pc, #40	; (adr r1, 800d620 <__ieee754_atan2+0x160>)
 800d5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5fa:	e782      	b.n	800d502 <__ieee754_atan2+0x42>
 800d5fc:	a10c      	add	r1, pc, #48	; (adr r1, 800d630 <__ieee754_atan2+0x170>)
 800d5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d602:	e77e      	b.n	800d502 <__ieee754_atan2+0x42>
 800d604:	2000      	movs	r0, #0
 800d606:	2100      	movs	r1, #0
 800d608:	e77b      	b.n	800d502 <__ieee754_atan2+0x42>
 800d60a:	a107      	add	r1, pc, #28	; (adr r1, 800d628 <__ieee754_atan2+0x168>)
 800d60c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d610:	e777      	b.n	800d502 <__ieee754_atan2+0x42>
 800d612:	bf00      	nop
 800d614:	f3af 8000 	nop.w
 800d618:	33145c07 	.word	0x33145c07
 800d61c:	3ca1a626 	.word	0x3ca1a626
 800d620:	54442d18 	.word	0x54442d18
 800d624:	400921fb 	.word	0x400921fb
 800d628:	54442d18 	.word	0x54442d18
 800d62c:	3ff921fb 	.word	0x3ff921fb
 800d630:	54442d18 	.word	0x54442d18
 800d634:	3fe921fb 	.word	0x3fe921fb
 800d638:	0800fbf0 	.word	0x0800fbf0
 800d63c:	0800fc08 	.word	0x0800fc08
 800d640:	54442d18 	.word	0x54442d18
 800d644:	c00921fb 	.word	0xc00921fb
 800d648:	54442d18 	.word	0x54442d18
 800d64c:	bff921fb 	.word	0xbff921fb
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	00000000 	.word	0x00000000

0800d658 <__ieee754_pow>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	ed2d 8b06 	vpush	{d8-d10}
 800d660:	b089      	sub	sp, #36	; 0x24
 800d662:	ed8d 1b00 	vstr	d1, [sp]
 800d666:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d66a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d66e:	ea58 0102 	orrs.w	r1, r8, r2
 800d672:	ec57 6b10 	vmov	r6, r7, d0
 800d676:	d115      	bne.n	800d6a4 <__ieee754_pow+0x4c>
 800d678:	19b3      	adds	r3, r6, r6
 800d67a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d67e:	4152      	adcs	r2, r2
 800d680:	4299      	cmp	r1, r3
 800d682:	4b89      	ldr	r3, [pc, #548]	; (800d8a8 <__ieee754_pow+0x250>)
 800d684:	4193      	sbcs	r3, r2
 800d686:	f080 84d2 	bcs.w	800e02e <__ieee754_pow+0x9d6>
 800d68a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d68e:	4630      	mov	r0, r6
 800d690:	4639      	mov	r1, r7
 800d692:	f7f2 fe13 	bl	80002bc <__adddf3>
 800d696:	ec41 0b10 	vmov	d0, r0, r1
 800d69a:	b009      	add	sp, #36	; 0x24
 800d69c:	ecbd 8b06 	vpop	{d8-d10}
 800d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	4b81      	ldr	r3, [pc, #516]	; (800d8ac <__ieee754_pow+0x254>)
 800d6a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d6aa:	429c      	cmp	r4, r3
 800d6ac:	ee10 aa10 	vmov	sl, s0
 800d6b0:	463d      	mov	r5, r7
 800d6b2:	dc06      	bgt.n	800d6c2 <__ieee754_pow+0x6a>
 800d6b4:	d101      	bne.n	800d6ba <__ieee754_pow+0x62>
 800d6b6:	2e00      	cmp	r6, #0
 800d6b8:	d1e7      	bne.n	800d68a <__ieee754_pow+0x32>
 800d6ba:	4598      	cmp	r8, r3
 800d6bc:	dc01      	bgt.n	800d6c2 <__ieee754_pow+0x6a>
 800d6be:	d10f      	bne.n	800d6e0 <__ieee754_pow+0x88>
 800d6c0:	b172      	cbz	r2, 800d6e0 <__ieee754_pow+0x88>
 800d6c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d6c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d6ca:	ea55 050a 	orrs.w	r5, r5, sl
 800d6ce:	d1dc      	bne.n	800d68a <__ieee754_pow+0x32>
 800d6d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6d4:	18db      	adds	r3, r3, r3
 800d6d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d6da:	4152      	adcs	r2, r2
 800d6dc:	429d      	cmp	r5, r3
 800d6de:	e7d0      	b.n	800d682 <__ieee754_pow+0x2a>
 800d6e0:	2d00      	cmp	r5, #0
 800d6e2:	da3b      	bge.n	800d75c <__ieee754_pow+0x104>
 800d6e4:	4b72      	ldr	r3, [pc, #456]	; (800d8b0 <__ieee754_pow+0x258>)
 800d6e6:	4598      	cmp	r8, r3
 800d6e8:	dc51      	bgt.n	800d78e <__ieee754_pow+0x136>
 800d6ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d6ee:	4598      	cmp	r8, r3
 800d6f0:	f340 84ac 	ble.w	800e04c <__ieee754_pow+0x9f4>
 800d6f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d6f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d6fc:	2b14      	cmp	r3, #20
 800d6fe:	dd0f      	ble.n	800d720 <__ieee754_pow+0xc8>
 800d700:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d704:	fa22 f103 	lsr.w	r1, r2, r3
 800d708:	fa01 f303 	lsl.w	r3, r1, r3
 800d70c:	4293      	cmp	r3, r2
 800d70e:	f040 849d 	bne.w	800e04c <__ieee754_pow+0x9f4>
 800d712:	f001 0101 	and.w	r1, r1, #1
 800d716:	f1c1 0302 	rsb	r3, r1, #2
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	b182      	cbz	r2, 800d740 <__ieee754_pow+0xe8>
 800d71e:	e05f      	b.n	800d7e0 <__ieee754_pow+0x188>
 800d720:	2a00      	cmp	r2, #0
 800d722:	d15b      	bne.n	800d7dc <__ieee754_pow+0x184>
 800d724:	f1c3 0314 	rsb	r3, r3, #20
 800d728:	fa48 f103 	asr.w	r1, r8, r3
 800d72c:	fa01 f303 	lsl.w	r3, r1, r3
 800d730:	4543      	cmp	r3, r8
 800d732:	f040 8488 	bne.w	800e046 <__ieee754_pow+0x9ee>
 800d736:	f001 0101 	and.w	r1, r1, #1
 800d73a:	f1c1 0302 	rsb	r3, r1, #2
 800d73e:	9304      	str	r3, [sp, #16]
 800d740:	4b5c      	ldr	r3, [pc, #368]	; (800d8b4 <__ieee754_pow+0x25c>)
 800d742:	4598      	cmp	r8, r3
 800d744:	d132      	bne.n	800d7ac <__ieee754_pow+0x154>
 800d746:	f1b9 0f00 	cmp.w	r9, #0
 800d74a:	f280 8478 	bge.w	800e03e <__ieee754_pow+0x9e6>
 800d74e:	4959      	ldr	r1, [pc, #356]	; (800d8b4 <__ieee754_pow+0x25c>)
 800d750:	4632      	mov	r2, r6
 800d752:	463b      	mov	r3, r7
 800d754:	2000      	movs	r0, #0
 800d756:	f7f3 f891 	bl	800087c <__aeabi_ddiv>
 800d75a:	e79c      	b.n	800d696 <__ieee754_pow+0x3e>
 800d75c:	2300      	movs	r3, #0
 800d75e:	9304      	str	r3, [sp, #16]
 800d760:	2a00      	cmp	r2, #0
 800d762:	d13d      	bne.n	800d7e0 <__ieee754_pow+0x188>
 800d764:	4b51      	ldr	r3, [pc, #324]	; (800d8ac <__ieee754_pow+0x254>)
 800d766:	4598      	cmp	r8, r3
 800d768:	d1ea      	bne.n	800d740 <__ieee754_pow+0xe8>
 800d76a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d76e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d772:	ea53 030a 	orrs.w	r3, r3, sl
 800d776:	f000 845a 	beq.w	800e02e <__ieee754_pow+0x9d6>
 800d77a:	4b4f      	ldr	r3, [pc, #316]	; (800d8b8 <__ieee754_pow+0x260>)
 800d77c:	429c      	cmp	r4, r3
 800d77e:	dd08      	ble.n	800d792 <__ieee754_pow+0x13a>
 800d780:	f1b9 0f00 	cmp.w	r9, #0
 800d784:	f2c0 8457 	blt.w	800e036 <__ieee754_pow+0x9de>
 800d788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d78c:	e783      	b.n	800d696 <__ieee754_pow+0x3e>
 800d78e:	2302      	movs	r3, #2
 800d790:	e7e5      	b.n	800d75e <__ieee754_pow+0x106>
 800d792:	f1b9 0f00 	cmp.w	r9, #0
 800d796:	f04f 0000 	mov.w	r0, #0
 800d79a:	f04f 0100 	mov.w	r1, #0
 800d79e:	f6bf af7a 	bge.w	800d696 <__ieee754_pow+0x3e>
 800d7a2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d7a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d7aa:	e774      	b.n	800d696 <__ieee754_pow+0x3e>
 800d7ac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d7b0:	d106      	bne.n	800d7c0 <__ieee754_pow+0x168>
 800d7b2:	4632      	mov	r2, r6
 800d7b4:	463b      	mov	r3, r7
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f2 ff35 	bl	8000628 <__aeabi_dmul>
 800d7be:	e76a      	b.n	800d696 <__ieee754_pow+0x3e>
 800d7c0:	4b3e      	ldr	r3, [pc, #248]	; (800d8bc <__ieee754_pow+0x264>)
 800d7c2:	4599      	cmp	r9, r3
 800d7c4:	d10c      	bne.n	800d7e0 <__ieee754_pow+0x188>
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	db0a      	blt.n	800d7e0 <__ieee754_pow+0x188>
 800d7ca:	ec47 6b10 	vmov	d0, r6, r7
 800d7ce:	b009      	add	sp, #36	; 0x24
 800d7d0:	ecbd 8b06 	vpop	{d8-d10}
 800d7d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	f000 be7a 	b.w	800e4d0 <__ieee754_sqrt>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	9304      	str	r3, [sp, #16]
 800d7e0:	ec47 6b10 	vmov	d0, r6, r7
 800d7e4:	f001 fdd0 	bl	800f388 <fabs>
 800d7e8:	ec51 0b10 	vmov	r0, r1, d0
 800d7ec:	f1ba 0f00 	cmp.w	sl, #0
 800d7f0:	d129      	bne.n	800d846 <__ieee754_pow+0x1ee>
 800d7f2:	b124      	cbz	r4, 800d7fe <__ieee754_pow+0x1a6>
 800d7f4:	4b2f      	ldr	r3, [pc, #188]	; (800d8b4 <__ieee754_pow+0x25c>)
 800d7f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d123      	bne.n	800d846 <__ieee754_pow+0x1ee>
 800d7fe:	f1b9 0f00 	cmp.w	r9, #0
 800d802:	da05      	bge.n	800d810 <__ieee754_pow+0x1b8>
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	2000      	movs	r0, #0
 800d80a:	492a      	ldr	r1, [pc, #168]	; (800d8b4 <__ieee754_pow+0x25c>)
 800d80c:	f7f3 f836 	bl	800087c <__aeabi_ddiv>
 800d810:	2d00      	cmp	r5, #0
 800d812:	f6bf af40 	bge.w	800d696 <__ieee754_pow+0x3e>
 800d816:	9b04      	ldr	r3, [sp, #16]
 800d818:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d81c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d820:	4323      	orrs	r3, r4
 800d822:	d108      	bne.n	800d836 <__ieee754_pow+0x1de>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4610      	mov	r0, r2
 800d82a:	4619      	mov	r1, r3
 800d82c:	f7f2 fd44 	bl	80002b8 <__aeabi_dsub>
 800d830:	4602      	mov	r2, r0
 800d832:	460b      	mov	r3, r1
 800d834:	e78f      	b.n	800d756 <__ieee754_pow+0xfe>
 800d836:	9b04      	ldr	r3, [sp, #16]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	f47f af2c 	bne.w	800d696 <__ieee754_pow+0x3e>
 800d83e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d842:	4619      	mov	r1, r3
 800d844:	e727      	b.n	800d696 <__ieee754_pow+0x3e>
 800d846:	0feb      	lsrs	r3, r5, #31
 800d848:	3b01      	subs	r3, #1
 800d84a:	9306      	str	r3, [sp, #24]
 800d84c:	9a06      	ldr	r2, [sp, #24]
 800d84e:	9b04      	ldr	r3, [sp, #16]
 800d850:	4313      	orrs	r3, r2
 800d852:	d102      	bne.n	800d85a <__ieee754_pow+0x202>
 800d854:	4632      	mov	r2, r6
 800d856:	463b      	mov	r3, r7
 800d858:	e7e6      	b.n	800d828 <__ieee754_pow+0x1d0>
 800d85a:	4b19      	ldr	r3, [pc, #100]	; (800d8c0 <__ieee754_pow+0x268>)
 800d85c:	4598      	cmp	r8, r3
 800d85e:	f340 80fb 	ble.w	800da58 <__ieee754_pow+0x400>
 800d862:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d866:	4598      	cmp	r8, r3
 800d868:	4b13      	ldr	r3, [pc, #76]	; (800d8b8 <__ieee754_pow+0x260>)
 800d86a:	dd0c      	ble.n	800d886 <__ieee754_pow+0x22e>
 800d86c:	429c      	cmp	r4, r3
 800d86e:	dc0f      	bgt.n	800d890 <__ieee754_pow+0x238>
 800d870:	f1b9 0f00 	cmp.w	r9, #0
 800d874:	da0f      	bge.n	800d896 <__ieee754_pow+0x23e>
 800d876:	2000      	movs	r0, #0
 800d878:	b009      	add	sp, #36	; 0x24
 800d87a:	ecbd 8b06 	vpop	{d8-d10}
 800d87e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d882:	f001 bbd6 	b.w	800f032 <__math_oflow>
 800d886:	429c      	cmp	r4, r3
 800d888:	dbf2      	blt.n	800d870 <__ieee754_pow+0x218>
 800d88a:	4b0a      	ldr	r3, [pc, #40]	; (800d8b4 <__ieee754_pow+0x25c>)
 800d88c:	429c      	cmp	r4, r3
 800d88e:	dd19      	ble.n	800d8c4 <__ieee754_pow+0x26c>
 800d890:	f1b9 0f00 	cmp.w	r9, #0
 800d894:	dcef      	bgt.n	800d876 <__ieee754_pow+0x21e>
 800d896:	2000      	movs	r0, #0
 800d898:	b009      	add	sp, #36	; 0x24
 800d89a:	ecbd 8b06 	vpop	{d8-d10}
 800d89e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a2:	f001 bbbd 	b.w	800f020 <__math_uflow>
 800d8a6:	bf00      	nop
 800d8a8:	fff00000 	.word	0xfff00000
 800d8ac:	7ff00000 	.word	0x7ff00000
 800d8b0:	433fffff 	.word	0x433fffff
 800d8b4:	3ff00000 	.word	0x3ff00000
 800d8b8:	3fefffff 	.word	0x3fefffff
 800d8bc:	3fe00000 	.word	0x3fe00000
 800d8c0:	41e00000 	.word	0x41e00000
 800d8c4:	4b60      	ldr	r3, [pc, #384]	; (800da48 <__ieee754_pow+0x3f0>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f7f2 fcf6 	bl	80002b8 <__aeabi_dsub>
 800d8cc:	a354      	add	r3, pc, #336	; (adr r3, 800da20 <__ieee754_pow+0x3c8>)
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	460d      	mov	r5, r1
 800d8d6:	f7f2 fea7 	bl	8000628 <__aeabi_dmul>
 800d8da:	a353      	add	r3, pc, #332	; (adr r3, 800da28 <__ieee754_pow+0x3d0>)
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	460f      	mov	r7, r1
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	f7f2 fe9e 	bl	8000628 <__aeabi_dmul>
 800d8ec:	4b57      	ldr	r3, [pc, #348]	; (800da4c <__ieee754_pow+0x3f4>)
 800d8ee:	4682      	mov	sl, r0
 800d8f0:	468b      	mov	fp, r1
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f7f2 fe96 	bl	8000628 <__aeabi_dmul>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	460b      	mov	r3, r1
 800d900:	a14b      	add	r1, pc, #300	; (adr r1, 800da30 <__ieee754_pow+0x3d8>)
 800d902:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d906:	f7f2 fcd7 	bl	80002b8 <__aeabi_dsub>
 800d90a:	4622      	mov	r2, r4
 800d90c:	462b      	mov	r3, r5
 800d90e:	f7f2 fe8b 	bl	8000628 <__aeabi_dmul>
 800d912:	4602      	mov	r2, r0
 800d914:	460b      	mov	r3, r1
 800d916:	2000      	movs	r0, #0
 800d918:	494d      	ldr	r1, [pc, #308]	; (800da50 <__ieee754_pow+0x3f8>)
 800d91a:	f7f2 fccd 	bl	80002b8 <__aeabi_dsub>
 800d91e:	4622      	mov	r2, r4
 800d920:	4680      	mov	r8, r0
 800d922:	4689      	mov	r9, r1
 800d924:	462b      	mov	r3, r5
 800d926:	4620      	mov	r0, r4
 800d928:	4629      	mov	r1, r5
 800d92a:	f7f2 fe7d 	bl	8000628 <__aeabi_dmul>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4640      	mov	r0, r8
 800d934:	4649      	mov	r1, r9
 800d936:	f7f2 fe77 	bl	8000628 <__aeabi_dmul>
 800d93a:	a33f      	add	r3, pc, #252	; (adr r3, 800da38 <__ieee754_pow+0x3e0>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f2 fe72 	bl	8000628 <__aeabi_dmul>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4650      	mov	r0, sl
 800d94a:	4659      	mov	r1, fp
 800d94c:	f7f2 fcb4 	bl	80002b8 <__aeabi_dsub>
 800d950:	4602      	mov	r2, r0
 800d952:	460b      	mov	r3, r1
 800d954:	4680      	mov	r8, r0
 800d956:	4689      	mov	r9, r1
 800d958:	4630      	mov	r0, r6
 800d95a:	4639      	mov	r1, r7
 800d95c:	f7f2 fcae 	bl	80002bc <__adddf3>
 800d960:	2000      	movs	r0, #0
 800d962:	4632      	mov	r2, r6
 800d964:	463b      	mov	r3, r7
 800d966:	4604      	mov	r4, r0
 800d968:	460d      	mov	r5, r1
 800d96a:	f7f2 fca5 	bl	80002b8 <__aeabi_dsub>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4640      	mov	r0, r8
 800d974:	4649      	mov	r1, r9
 800d976:	f7f2 fc9f 	bl	80002b8 <__aeabi_dsub>
 800d97a:	9b04      	ldr	r3, [sp, #16]
 800d97c:	9a06      	ldr	r2, [sp, #24]
 800d97e:	3b01      	subs	r3, #1
 800d980:	4313      	orrs	r3, r2
 800d982:	4682      	mov	sl, r0
 800d984:	468b      	mov	fp, r1
 800d986:	f040 81e7 	bne.w	800dd58 <__ieee754_pow+0x700>
 800d98a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800da40 <__ieee754_pow+0x3e8>
 800d98e:	eeb0 8a47 	vmov.f32	s16, s14
 800d992:	eef0 8a67 	vmov.f32	s17, s15
 800d996:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d99a:	2600      	movs	r6, #0
 800d99c:	4632      	mov	r2, r6
 800d99e:	463b      	mov	r3, r7
 800d9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9a4:	f7f2 fc88 	bl	80002b8 <__aeabi_dsub>
 800d9a8:	4622      	mov	r2, r4
 800d9aa:	462b      	mov	r3, r5
 800d9ac:	f7f2 fe3c 	bl	8000628 <__aeabi_dmul>
 800d9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9b4:	4680      	mov	r8, r0
 800d9b6:	4689      	mov	r9, r1
 800d9b8:	4650      	mov	r0, sl
 800d9ba:	4659      	mov	r1, fp
 800d9bc:	f7f2 fe34 	bl	8000628 <__aeabi_dmul>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	f7f2 fc78 	bl	80002bc <__adddf3>
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	463b      	mov	r3, r7
 800d9d0:	4680      	mov	r8, r0
 800d9d2:	4689      	mov	r9, r1
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	f7f2 fe26 	bl	8000628 <__aeabi_dmul>
 800d9dc:	460b      	mov	r3, r1
 800d9de:	4604      	mov	r4, r0
 800d9e0:	460d      	mov	r5, r1
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7f2 fc68 	bl	80002bc <__adddf3>
 800d9ec:	4b19      	ldr	r3, [pc, #100]	; (800da54 <__ieee754_pow+0x3fc>)
 800d9ee:	4299      	cmp	r1, r3
 800d9f0:	ec45 4b19 	vmov	d9, r4, r5
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	460f      	mov	r7, r1
 800d9f8:	468b      	mov	fp, r1
 800d9fa:	f340 82f1 	ble.w	800dfe0 <__ieee754_pow+0x988>
 800d9fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800da02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800da06:	4303      	orrs	r3, r0
 800da08:	f000 81e4 	beq.w	800ddd4 <__ieee754_pow+0x77c>
 800da0c:	ec51 0b18 	vmov	r0, r1, d8
 800da10:	2200      	movs	r2, #0
 800da12:	2300      	movs	r3, #0
 800da14:	f7f3 f87a 	bl	8000b0c <__aeabi_dcmplt>
 800da18:	3800      	subs	r0, #0
 800da1a:	bf18      	it	ne
 800da1c:	2001      	movne	r0, #1
 800da1e:	e72b      	b.n	800d878 <__ieee754_pow+0x220>
 800da20:	60000000 	.word	0x60000000
 800da24:	3ff71547 	.word	0x3ff71547
 800da28:	f85ddf44 	.word	0xf85ddf44
 800da2c:	3e54ae0b 	.word	0x3e54ae0b
 800da30:	55555555 	.word	0x55555555
 800da34:	3fd55555 	.word	0x3fd55555
 800da38:	652b82fe 	.word	0x652b82fe
 800da3c:	3ff71547 	.word	0x3ff71547
 800da40:	00000000 	.word	0x00000000
 800da44:	bff00000 	.word	0xbff00000
 800da48:	3ff00000 	.word	0x3ff00000
 800da4c:	3fd00000 	.word	0x3fd00000
 800da50:	3fe00000 	.word	0x3fe00000
 800da54:	408fffff 	.word	0x408fffff
 800da58:	4bd5      	ldr	r3, [pc, #852]	; (800ddb0 <__ieee754_pow+0x758>)
 800da5a:	402b      	ands	r3, r5
 800da5c:	2200      	movs	r2, #0
 800da5e:	b92b      	cbnz	r3, 800da6c <__ieee754_pow+0x414>
 800da60:	4bd4      	ldr	r3, [pc, #848]	; (800ddb4 <__ieee754_pow+0x75c>)
 800da62:	f7f2 fde1 	bl	8000628 <__aeabi_dmul>
 800da66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800da6a:	460c      	mov	r4, r1
 800da6c:	1523      	asrs	r3, r4, #20
 800da6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da72:	4413      	add	r3, r2
 800da74:	9305      	str	r3, [sp, #20]
 800da76:	4bd0      	ldr	r3, [pc, #832]	; (800ddb8 <__ieee754_pow+0x760>)
 800da78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800da80:	429c      	cmp	r4, r3
 800da82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800da86:	dd08      	ble.n	800da9a <__ieee754_pow+0x442>
 800da88:	4bcc      	ldr	r3, [pc, #816]	; (800ddbc <__ieee754_pow+0x764>)
 800da8a:	429c      	cmp	r4, r3
 800da8c:	f340 8162 	ble.w	800dd54 <__ieee754_pow+0x6fc>
 800da90:	9b05      	ldr	r3, [sp, #20]
 800da92:	3301      	adds	r3, #1
 800da94:	9305      	str	r3, [sp, #20]
 800da96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800da9a:	2400      	movs	r4, #0
 800da9c:	00e3      	lsls	r3, r4, #3
 800da9e:	9307      	str	r3, [sp, #28]
 800daa0:	4bc7      	ldr	r3, [pc, #796]	; (800ddc0 <__ieee754_pow+0x768>)
 800daa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800daa6:	ed93 7b00 	vldr	d7, [r3]
 800daaa:	4629      	mov	r1, r5
 800daac:	ec53 2b17 	vmov	r2, r3, d7
 800dab0:	eeb0 9a47 	vmov.f32	s18, s14
 800dab4:	eef0 9a67 	vmov.f32	s19, s15
 800dab8:	4682      	mov	sl, r0
 800daba:	f7f2 fbfd 	bl	80002b8 <__aeabi_dsub>
 800dabe:	4652      	mov	r2, sl
 800dac0:	4606      	mov	r6, r0
 800dac2:	460f      	mov	r7, r1
 800dac4:	462b      	mov	r3, r5
 800dac6:	ec51 0b19 	vmov	r0, r1, d9
 800daca:	f7f2 fbf7 	bl	80002bc <__adddf3>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	2000      	movs	r0, #0
 800dad4:	49bb      	ldr	r1, [pc, #748]	; (800ddc4 <__ieee754_pow+0x76c>)
 800dad6:	f7f2 fed1 	bl	800087c <__aeabi_ddiv>
 800dada:	ec41 0b1a 	vmov	d10, r0, r1
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	4630      	mov	r0, r6
 800dae4:	4639      	mov	r1, r7
 800dae6:	f7f2 fd9f 	bl	8000628 <__aeabi_dmul>
 800daea:	2300      	movs	r3, #0
 800daec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daf0:	9302      	str	r3, [sp, #8]
 800daf2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800daf6:	46ab      	mov	fp, r5
 800daf8:	106d      	asrs	r5, r5, #1
 800dafa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dafe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800db02:	ec41 0b18 	vmov	d8, r0, r1
 800db06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800db0a:	2200      	movs	r2, #0
 800db0c:	4640      	mov	r0, r8
 800db0e:	4649      	mov	r1, r9
 800db10:	4614      	mov	r4, r2
 800db12:	461d      	mov	r5, r3
 800db14:	f7f2 fd88 	bl	8000628 <__aeabi_dmul>
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	4630      	mov	r0, r6
 800db1e:	4639      	mov	r1, r7
 800db20:	f7f2 fbca 	bl	80002b8 <__aeabi_dsub>
 800db24:	ec53 2b19 	vmov	r2, r3, d9
 800db28:	4606      	mov	r6, r0
 800db2a:	460f      	mov	r7, r1
 800db2c:	4620      	mov	r0, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	f7f2 fbc2 	bl	80002b8 <__aeabi_dsub>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	4650      	mov	r0, sl
 800db3a:	4659      	mov	r1, fp
 800db3c:	f7f2 fbbc 	bl	80002b8 <__aeabi_dsub>
 800db40:	4642      	mov	r2, r8
 800db42:	464b      	mov	r3, r9
 800db44:	f7f2 fd70 	bl	8000628 <__aeabi_dmul>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4630      	mov	r0, r6
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 fbb2 	bl	80002b8 <__aeabi_dsub>
 800db54:	ec53 2b1a 	vmov	r2, r3, d10
 800db58:	f7f2 fd66 	bl	8000628 <__aeabi_dmul>
 800db5c:	ec53 2b18 	vmov	r2, r3, d8
 800db60:	ec41 0b19 	vmov	d9, r0, r1
 800db64:	ec51 0b18 	vmov	r0, r1, d8
 800db68:	f7f2 fd5e 	bl	8000628 <__aeabi_dmul>
 800db6c:	a37c      	add	r3, pc, #496	; (adr r3, 800dd60 <__ieee754_pow+0x708>)
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	4604      	mov	r4, r0
 800db74:	460d      	mov	r5, r1
 800db76:	f7f2 fd57 	bl	8000628 <__aeabi_dmul>
 800db7a:	a37b      	add	r3, pc, #492	; (adr r3, 800dd68 <__ieee754_pow+0x710>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 fb9c 	bl	80002bc <__adddf3>
 800db84:	4622      	mov	r2, r4
 800db86:	462b      	mov	r3, r5
 800db88:	f7f2 fd4e 	bl	8000628 <__aeabi_dmul>
 800db8c:	a378      	add	r3, pc, #480	; (adr r3, 800dd70 <__ieee754_pow+0x718>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	f7f2 fb93 	bl	80002bc <__adddf3>
 800db96:	4622      	mov	r2, r4
 800db98:	462b      	mov	r3, r5
 800db9a:	f7f2 fd45 	bl	8000628 <__aeabi_dmul>
 800db9e:	a376      	add	r3, pc, #472	; (adr r3, 800dd78 <__ieee754_pow+0x720>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	f7f2 fb8a 	bl	80002bc <__adddf3>
 800dba8:	4622      	mov	r2, r4
 800dbaa:	462b      	mov	r3, r5
 800dbac:	f7f2 fd3c 	bl	8000628 <__aeabi_dmul>
 800dbb0:	a373      	add	r3, pc, #460	; (adr r3, 800dd80 <__ieee754_pow+0x728>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb81 	bl	80002bc <__adddf3>
 800dbba:	4622      	mov	r2, r4
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	f7f2 fd33 	bl	8000628 <__aeabi_dmul>
 800dbc2:	a371      	add	r3, pc, #452	; (adr r3, 800dd88 <__ieee754_pow+0x730>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb78 	bl	80002bc <__adddf3>
 800dbcc:	4622      	mov	r2, r4
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	462b      	mov	r3, r5
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	f7f2 fd26 	bl	8000628 <__aeabi_dmul>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7f2 fd20 	bl	8000628 <__aeabi_dmul>
 800dbe8:	4642      	mov	r2, r8
 800dbea:	4604      	mov	r4, r0
 800dbec:	460d      	mov	r5, r1
 800dbee:	464b      	mov	r3, r9
 800dbf0:	ec51 0b18 	vmov	r0, r1, d8
 800dbf4:	f7f2 fb62 	bl	80002bc <__adddf3>
 800dbf8:	ec53 2b19 	vmov	r2, r3, d9
 800dbfc:	f7f2 fd14 	bl	8000628 <__aeabi_dmul>
 800dc00:	4622      	mov	r2, r4
 800dc02:	462b      	mov	r3, r5
 800dc04:	f7f2 fb5a 	bl	80002bc <__adddf3>
 800dc08:	4642      	mov	r2, r8
 800dc0a:	4682      	mov	sl, r0
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	464b      	mov	r3, r9
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	f7f2 fd08 	bl	8000628 <__aeabi_dmul>
 800dc18:	4b6b      	ldr	r3, [pc, #428]	; (800ddc8 <__ieee754_pow+0x770>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	460f      	mov	r7, r1
 800dc20:	f7f2 fb4c 	bl	80002bc <__adddf3>
 800dc24:	4652      	mov	r2, sl
 800dc26:	465b      	mov	r3, fp
 800dc28:	f7f2 fb48 	bl	80002bc <__adddf3>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	4604      	mov	r4, r0
 800dc30:	460d      	mov	r5, r1
 800dc32:	4602      	mov	r2, r0
 800dc34:	460b      	mov	r3, r1
 800dc36:	4640      	mov	r0, r8
 800dc38:	4649      	mov	r1, r9
 800dc3a:	f7f2 fcf5 	bl	8000628 <__aeabi_dmul>
 800dc3e:	4b62      	ldr	r3, [pc, #392]	; (800ddc8 <__ieee754_pow+0x770>)
 800dc40:	4680      	mov	r8, r0
 800dc42:	4689      	mov	r9, r1
 800dc44:	2200      	movs	r2, #0
 800dc46:	4620      	mov	r0, r4
 800dc48:	4629      	mov	r1, r5
 800dc4a:	f7f2 fb35 	bl	80002b8 <__aeabi_dsub>
 800dc4e:	4632      	mov	r2, r6
 800dc50:	463b      	mov	r3, r7
 800dc52:	f7f2 fb31 	bl	80002b8 <__aeabi_dsub>
 800dc56:	4602      	mov	r2, r0
 800dc58:	460b      	mov	r3, r1
 800dc5a:	4650      	mov	r0, sl
 800dc5c:	4659      	mov	r1, fp
 800dc5e:	f7f2 fb2b 	bl	80002b8 <__aeabi_dsub>
 800dc62:	ec53 2b18 	vmov	r2, r3, d8
 800dc66:	f7f2 fcdf 	bl	8000628 <__aeabi_dmul>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	460f      	mov	r7, r1
 800dc70:	462b      	mov	r3, r5
 800dc72:	ec51 0b19 	vmov	r0, r1, d9
 800dc76:	f7f2 fcd7 	bl	8000628 <__aeabi_dmul>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4630      	mov	r0, r6
 800dc80:	4639      	mov	r1, r7
 800dc82:	f7f2 fb1b 	bl	80002bc <__adddf3>
 800dc86:	4606      	mov	r6, r0
 800dc88:	460f      	mov	r7, r1
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4640      	mov	r0, r8
 800dc90:	4649      	mov	r1, r9
 800dc92:	f7f2 fb13 	bl	80002bc <__adddf3>
 800dc96:	a33e      	add	r3, pc, #248	; (adr r3, 800dd90 <__ieee754_pow+0x738>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	4604      	mov	r4, r0
 800dca0:	460d      	mov	r5, r1
 800dca2:	f7f2 fcc1 	bl	8000628 <__aeabi_dmul>
 800dca6:	4642      	mov	r2, r8
 800dca8:	ec41 0b18 	vmov	d8, r0, r1
 800dcac:	464b      	mov	r3, r9
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 fb01 	bl	80002b8 <__aeabi_dsub>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4630      	mov	r0, r6
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	f7f2 fafb 	bl	80002b8 <__aeabi_dsub>
 800dcc2:	a335      	add	r3, pc, #212	; (adr r3, 800dd98 <__ieee754_pow+0x740>)
 800dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc8:	f7f2 fcae 	bl	8000628 <__aeabi_dmul>
 800dccc:	a334      	add	r3, pc, #208	; (adr r3, 800dda0 <__ieee754_pow+0x748>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460f      	mov	r7, r1
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	4629      	mov	r1, r5
 800dcda:	f7f2 fca5 	bl	8000628 <__aeabi_dmul>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4630      	mov	r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	f7f2 fae9 	bl	80002bc <__adddf3>
 800dcea:	9a07      	ldr	r2, [sp, #28]
 800dcec:	4b37      	ldr	r3, [pc, #220]	; (800ddcc <__ieee754_pow+0x774>)
 800dcee:	4413      	add	r3, r2
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	f7f2 fae2 	bl	80002bc <__adddf3>
 800dcf8:	4682      	mov	sl, r0
 800dcfa:	9805      	ldr	r0, [sp, #20]
 800dcfc:	468b      	mov	fp, r1
 800dcfe:	f7f2 fc29 	bl	8000554 <__aeabi_i2d>
 800dd02:	9a07      	ldr	r2, [sp, #28]
 800dd04:	4b32      	ldr	r3, [pc, #200]	; (800ddd0 <__ieee754_pow+0x778>)
 800dd06:	4413      	add	r3, r2
 800dd08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	460f      	mov	r7, r1
 800dd10:	4652      	mov	r2, sl
 800dd12:	465b      	mov	r3, fp
 800dd14:	ec51 0b18 	vmov	r0, r1, d8
 800dd18:	f7f2 fad0 	bl	80002bc <__adddf3>
 800dd1c:	4642      	mov	r2, r8
 800dd1e:	464b      	mov	r3, r9
 800dd20:	f7f2 facc 	bl	80002bc <__adddf3>
 800dd24:	4632      	mov	r2, r6
 800dd26:	463b      	mov	r3, r7
 800dd28:	f7f2 fac8 	bl	80002bc <__adddf3>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	4632      	mov	r2, r6
 800dd30:	463b      	mov	r3, r7
 800dd32:	4604      	mov	r4, r0
 800dd34:	460d      	mov	r5, r1
 800dd36:	f7f2 fabf 	bl	80002b8 <__aeabi_dsub>
 800dd3a:	4642      	mov	r2, r8
 800dd3c:	464b      	mov	r3, r9
 800dd3e:	f7f2 fabb 	bl	80002b8 <__aeabi_dsub>
 800dd42:	ec53 2b18 	vmov	r2, r3, d8
 800dd46:	f7f2 fab7 	bl	80002b8 <__aeabi_dsub>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	4650      	mov	r0, sl
 800dd50:	4659      	mov	r1, fp
 800dd52:	e610      	b.n	800d976 <__ieee754_pow+0x31e>
 800dd54:	2401      	movs	r4, #1
 800dd56:	e6a1      	b.n	800da9c <__ieee754_pow+0x444>
 800dd58:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dda8 <__ieee754_pow+0x750>
 800dd5c:	e617      	b.n	800d98e <__ieee754_pow+0x336>
 800dd5e:	bf00      	nop
 800dd60:	4a454eef 	.word	0x4a454eef
 800dd64:	3fca7e28 	.word	0x3fca7e28
 800dd68:	93c9db65 	.word	0x93c9db65
 800dd6c:	3fcd864a 	.word	0x3fcd864a
 800dd70:	a91d4101 	.word	0xa91d4101
 800dd74:	3fd17460 	.word	0x3fd17460
 800dd78:	518f264d 	.word	0x518f264d
 800dd7c:	3fd55555 	.word	0x3fd55555
 800dd80:	db6fabff 	.word	0xdb6fabff
 800dd84:	3fdb6db6 	.word	0x3fdb6db6
 800dd88:	33333303 	.word	0x33333303
 800dd8c:	3fe33333 	.word	0x3fe33333
 800dd90:	e0000000 	.word	0xe0000000
 800dd94:	3feec709 	.word	0x3feec709
 800dd98:	dc3a03fd 	.word	0xdc3a03fd
 800dd9c:	3feec709 	.word	0x3feec709
 800dda0:	145b01f5 	.word	0x145b01f5
 800dda4:	be3e2fe0 	.word	0xbe3e2fe0
 800dda8:	00000000 	.word	0x00000000
 800ddac:	3ff00000 	.word	0x3ff00000
 800ddb0:	7ff00000 	.word	0x7ff00000
 800ddb4:	43400000 	.word	0x43400000
 800ddb8:	0003988e 	.word	0x0003988e
 800ddbc:	000bb679 	.word	0x000bb679
 800ddc0:	0800fc20 	.word	0x0800fc20
 800ddc4:	3ff00000 	.word	0x3ff00000
 800ddc8:	40080000 	.word	0x40080000
 800ddcc:	0800fc40 	.word	0x0800fc40
 800ddd0:	0800fc30 	.word	0x0800fc30
 800ddd4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e0ac <__ieee754_pow+0xa54>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 fa6d 	bl	80002bc <__adddf3>
 800dde2:	4622      	mov	r2, r4
 800dde4:	ec41 0b1a 	vmov	d10, r0, r1
 800dde8:	462b      	mov	r3, r5
 800ddea:	4630      	mov	r0, r6
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fa63 	bl	80002b8 <__aeabi_dsub>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	ec51 0b1a 	vmov	r0, r1, d10
 800ddfa:	f7f2 fea5 	bl	8000b48 <__aeabi_dcmpgt>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	f47f ae04 	bne.w	800da0c <__ieee754_pow+0x3b4>
 800de04:	4aa4      	ldr	r2, [pc, #656]	; (800e098 <__ieee754_pow+0xa40>)
 800de06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de0a:	4293      	cmp	r3, r2
 800de0c:	f340 8108 	ble.w	800e020 <__ieee754_pow+0x9c8>
 800de10:	151b      	asrs	r3, r3, #20
 800de12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800de16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800de1a:	fa4a f303 	asr.w	r3, sl, r3
 800de1e:	445b      	add	r3, fp
 800de20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800de24:	4e9d      	ldr	r6, [pc, #628]	; (800e09c <__ieee754_pow+0xa44>)
 800de26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800de2a:	4116      	asrs	r6, r2
 800de2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800de30:	2000      	movs	r0, #0
 800de32:	ea23 0106 	bic.w	r1, r3, r6
 800de36:	f1c2 0214 	rsb	r2, r2, #20
 800de3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800de3e:	fa4a fa02 	asr.w	sl, sl, r2
 800de42:	f1bb 0f00 	cmp.w	fp, #0
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4620      	mov	r0, r4
 800de4c:	4629      	mov	r1, r5
 800de4e:	bfb8      	it	lt
 800de50:	f1ca 0a00 	rsblt	sl, sl, #0
 800de54:	f7f2 fa30 	bl	80002b8 <__aeabi_dsub>
 800de58:	ec41 0b19 	vmov	d9, r0, r1
 800de5c:	4642      	mov	r2, r8
 800de5e:	464b      	mov	r3, r9
 800de60:	ec51 0b19 	vmov	r0, r1, d9
 800de64:	f7f2 fa2a 	bl	80002bc <__adddf3>
 800de68:	a37b      	add	r3, pc, #492	; (adr r3, 800e058 <__ieee754_pow+0xa00>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	2000      	movs	r0, #0
 800de70:	4604      	mov	r4, r0
 800de72:	460d      	mov	r5, r1
 800de74:	f7f2 fbd8 	bl	8000628 <__aeabi_dmul>
 800de78:	ec53 2b19 	vmov	r2, r3, d9
 800de7c:	4606      	mov	r6, r0
 800de7e:	460f      	mov	r7, r1
 800de80:	4620      	mov	r0, r4
 800de82:	4629      	mov	r1, r5
 800de84:	f7f2 fa18 	bl	80002b8 <__aeabi_dsub>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	4640      	mov	r0, r8
 800de8e:	4649      	mov	r1, r9
 800de90:	f7f2 fa12 	bl	80002b8 <__aeabi_dsub>
 800de94:	a372      	add	r3, pc, #456	; (adr r3, 800e060 <__ieee754_pow+0xa08>)
 800de96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9a:	f7f2 fbc5 	bl	8000628 <__aeabi_dmul>
 800de9e:	a372      	add	r3, pc, #456	; (adr r3, 800e068 <__ieee754_pow+0xa10>)
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	4620      	mov	r0, r4
 800deaa:	4629      	mov	r1, r5
 800deac:	f7f2 fbbc 	bl	8000628 <__aeabi_dmul>
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	4640      	mov	r0, r8
 800deb6:	4649      	mov	r1, r9
 800deb8:	f7f2 fa00 	bl	80002bc <__adddf3>
 800debc:	4604      	mov	r4, r0
 800debe:	460d      	mov	r5, r1
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	4630      	mov	r0, r6
 800dec6:	4639      	mov	r1, r7
 800dec8:	f7f2 f9f8 	bl	80002bc <__adddf3>
 800decc:	4632      	mov	r2, r6
 800dece:	463b      	mov	r3, r7
 800ded0:	4680      	mov	r8, r0
 800ded2:	4689      	mov	r9, r1
 800ded4:	f7f2 f9f0 	bl	80002b8 <__aeabi_dsub>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	4620      	mov	r0, r4
 800dede:	4629      	mov	r1, r5
 800dee0:	f7f2 f9ea 	bl	80002b8 <__aeabi_dsub>
 800dee4:	4642      	mov	r2, r8
 800dee6:	4606      	mov	r6, r0
 800dee8:	460f      	mov	r7, r1
 800deea:	464b      	mov	r3, r9
 800deec:	4640      	mov	r0, r8
 800deee:	4649      	mov	r1, r9
 800def0:	f7f2 fb9a 	bl	8000628 <__aeabi_dmul>
 800def4:	a35e      	add	r3, pc, #376	; (adr r3, 800e070 <__ieee754_pow+0xa18>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	4604      	mov	r4, r0
 800defc:	460d      	mov	r5, r1
 800defe:	f7f2 fb93 	bl	8000628 <__aeabi_dmul>
 800df02:	a35d      	add	r3, pc, #372	; (adr r3, 800e078 <__ieee754_pow+0xa20>)
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	f7f2 f9d6 	bl	80002b8 <__aeabi_dsub>
 800df0c:	4622      	mov	r2, r4
 800df0e:	462b      	mov	r3, r5
 800df10:	f7f2 fb8a 	bl	8000628 <__aeabi_dmul>
 800df14:	a35a      	add	r3, pc, #360	; (adr r3, 800e080 <__ieee754_pow+0xa28>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f7f2 f9cf 	bl	80002bc <__adddf3>
 800df1e:	4622      	mov	r2, r4
 800df20:	462b      	mov	r3, r5
 800df22:	f7f2 fb81 	bl	8000628 <__aeabi_dmul>
 800df26:	a358      	add	r3, pc, #352	; (adr r3, 800e088 <__ieee754_pow+0xa30>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f9c4 	bl	80002b8 <__aeabi_dsub>
 800df30:	4622      	mov	r2, r4
 800df32:	462b      	mov	r3, r5
 800df34:	f7f2 fb78 	bl	8000628 <__aeabi_dmul>
 800df38:	a355      	add	r3, pc, #340	; (adr r3, 800e090 <__ieee754_pow+0xa38>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f7f2 f9bd 	bl	80002bc <__adddf3>
 800df42:	4622      	mov	r2, r4
 800df44:	462b      	mov	r3, r5
 800df46:	f7f2 fb6f 	bl	8000628 <__aeabi_dmul>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4640      	mov	r0, r8
 800df50:	4649      	mov	r1, r9
 800df52:	f7f2 f9b1 	bl	80002b8 <__aeabi_dsub>
 800df56:	4604      	mov	r4, r0
 800df58:	460d      	mov	r5, r1
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4640      	mov	r0, r8
 800df60:	4649      	mov	r1, r9
 800df62:	f7f2 fb61 	bl	8000628 <__aeabi_dmul>
 800df66:	2200      	movs	r2, #0
 800df68:	ec41 0b19 	vmov	d9, r0, r1
 800df6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df70:	4620      	mov	r0, r4
 800df72:	4629      	mov	r1, r5
 800df74:	f7f2 f9a0 	bl	80002b8 <__aeabi_dsub>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	ec51 0b19 	vmov	r0, r1, d9
 800df80:	f7f2 fc7c 	bl	800087c <__aeabi_ddiv>
 800df84:	4632      	mov	r2, r6
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	463b      	mov	r3, r7
 800df8c:	4640      	mov	r0, r8
 800df8e:	4649      	mov	r1, r9
 800df90:	f7f2 fb4a 	bl	8000628 <__aeabi_dmul>
 800df94:	4632      	mov	r2, r6
 800df96:	463b      	mov	r3, r7
 800df98:	f7f2 f990 	bl	80002bc <__adddf3>
 800df9c:	4602      	mov	r2, r0
 800df9e:	460b      	mov	r3, r1
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	f7f2 f988 	bl	80002b8 <__aeabi_dsub>
 800dfa8:	4642      	mov	r2, r8
 800dfaa:	464b      	mov	r3, r9
 800dfac:	f7f2 f984 	bl	80002b8 <__aeabi_dsub>
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	493a      	ldr	r1, [pc, #232]	; (800e0a0 <__ieee754_pow+0xa48>)
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	f7f2 f97e 	bl	80002b8 <__aeabi_dsub>
 800dfbc:	ec41 0b10 	vmov	d0, r0, r1
 800dfc0:	ee10 3a90 	vmov	r3, s1
 800dfc4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dfc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfcc:	da2b      	bge.n	800e026 <__ieee754_pow+0x9ce>
 800dfce:	4650      	mov	r0, sl
 800dfd0:	f001 fa6e 	bl	800f4b0 <scalbn>
 800dfd4:	ec51 0b10 	vmov	r0, r1, d0
 800dfd8:	ec53 2b18 	vmov	r2, r3, d8
 800dfdc:	f7ff bbed 	b.w	800d7ba <__ieee754_pow+0x162>
 800dfe0:	4b30      	ldr	r3, [pc, #192]	; (800e0a4 <__ieee754_pow+0xa4c>)
 800dfe2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dfe6:	429e      	cmp	r6, r3
 800dfe8:	f77f af0c 	ble.w	800de04 <__ieee754_pow+0x7ac>
 800dfec:	4b2e      	ldr	r3, [pc, #184]	; (800e0a8 <__ieee754_pow+0xa50>)
 800dfee:	440b      	add	r3, r1
 800dff0:	4303      	orrs	r3, r0
 800dff2:	d009      	beq.n	800e008 <__ieee754_pow+0x9b0>
 800dff4:	ec51 0b18 	vmov	r0, r1, d8
 800dff8:	2200      	movs	r2, #0
 800dffa:	2300      	movs	r3, #0
 800dffc:	f7f2 fd86 	bl	8000b0c <__aeabi_dcmplt>
 800e000:	3800      	subs	r0, #0
 800e002:	bf18      	it	ne
 800e004:	2001      	movne	r0, #1
 800e006:	e447      	b.n	800d898 <__ieee754_pow+0x240>
 800e008:	4622      	mov	r2, r4
 800e00a:	462b      	mov	r3, r5
 800e00c:	f7f2 f954 	bl	80002b8 <__aeabi_dsub>
 800e010:	4642      	mov	r2, r8
 800e012:	464b      	mov	r3, r9
 800e014:	f7f2 fd8e 	bl	8000b34 <__aeabi_dcmpge>
 800e018:	2800      	cmp	r0, #0
 800e01a:	f43f aef3 	beq.w	800de04 <__ieee754_pow+0x7ac>
 800e01e:	e7e9      	b.n	800dff4 <__ieee754_pow+0x99c>
 800e020:	f04f 0a00 	mov.w	sl, #0
 800e024:	e71a      	b.n	800de5c <__ieee754_pow+0x804>
 800e026:	ec51 0b10 	vmov	r0, r1, d0
 800e02a:	4619      	mov	r1, r3
 800e02c:	e7d4      	b.n	800dfd8 <__ieee754_pow+0x980>
 800e02e:	491c      	ldr	r1, [pc, #112]	; (800e0a0 <__ieee754_pow+0xa48>)
 800e030:	2000      	movs	r0, #0
 800e032:	f7ff bb30 	b.w	800d696 <__ieee754_pow+0x3e>
 800e036:	2000      	movs	r0, #0
 800e038:	2100      	movs	r1, #0
 800e03a:	f7ff bb2c 	b.w	800d696 <__ieee754_pow+0x3e>
 800e03e:	4630      	mov	r0, r6
 800e040:	4639      	mov	r1, r7
 800e042:	f7ff bb28 	b.w	800d696 <__ieee754_pow+0x3e>
 800e046:	9204      	str	r2, [sp, #16]
 800e048:	f7ff bb7a 	b.w	800d740 <__ieee754_pow+0xe8>
 800e04c:	2300      	movs	r3, #0
 800e04e:	f7ff bb64 	b.w	800d71a <__ieee754_pow+0xc2>
 800e052:	bf00      	nop
 800e054:	f3af 8000 	nop.w
 800e058:	00000000 	.word	0x00000000
 800e05c:	3fe62e43 	.word	0x3fe62e43
 800e060:	fefa39ef 	.word	0xfefa39ef
 800e064:	3fe62e42 	.word	0x3fe62e42
 800e068:	0ca86c39 	.word	0x0ca86c39
 800e06c:	be205c61 	.word	0xbe205c61
 800e070:	72bea4d0 	.word	0x72bea4d0
 800e074:	3e663769 	.word	0x3e663769
 800e078:	c5d26bf1 	.word	0xc5d26bf1
 800e07c:	3ebbbd41 	.word	0x3ebbbd41
 800e080:	af25de2c 	.word	0xaf25de2c
 800e084:	3f11566a 	.word	0x3f11566a
 800e088:	16bebd93 	.word	0x16bebd93
 800e08c:	3f66c16c 	.word	0x3f66c16c
 800e090:	5555553e 	.word	0x5555553e
 800e094:	3fc55555 	.word	0x3fc55555
 800e098:	3fe00000 	.word	0x3fe00000
 800e09c:	000fffff 	.word	0x000fffff
 800e0a0:	3ff00000 	.word	0x3ff00000
 800e0a4:	4090cbff 	.word	0x4090cbff
 800e0a8:	3f6f3400 	.word	0x3f6f3400
 800e0ac:	652b82fe 	.word	0x652b82fe
 800e0b0:	3c971547 	.word	0x3c971547
 800e0b4:	00000000 	.word	0x00000000

0800e0b8 <__ieee754_rem_pio2>:
 800e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	ed2d 8b02 	vpush	{d8}
 800e0c0:	ec55 4b10 	vmov	r4, r5, d0
 800e0c4:	4bca      	ldr	r3, [pc, #808]	; (800e3f0 <__ieee754_rem_pio2+0x338>)
 800e0c6:	b08b      	sub	sp, #44	; 0x2c
 800e0c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e0cc:	4598      	cmp	r8, r3
 800e0ce:	4682      	mov	sl, r0
 800e0d0:	9502      	str	r5, [sp, #8]
 800e0d2:	dc08      	bgt.n	800e0e6 <__ieee754_rem_pio2+0x2e>
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	ed80 0b00 	vstr	d0, [r0]
 800e0dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e0e0:	f04f 0b00 	mov.w	fp, #0
 800e0e4:	e028      	b.n	800e138 <__ieee754_rem_pio2+0x80>
 800e0e6:	4bc3      	ldr	r3, [pc, #780]	; (800e3f4 <__ieee754_rem_pio2+0x33c>)
 800e0e8:	4598      	cmp	r8, r3
 800e0ea:	dc78      	bgt.n	800e1de <__ieee754_rem_pio2+0x126>
 800e0ec:	9b02      	ldr	r3, [sp, #8]
 800e0ee:	4ec2      	ldr	r6, [pc, #776]	; (800e3f8 <__ieee754_rem_pio2+0x340>)
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	ee10 0a10 	vmov	r0, s0
 800e0f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e3b8 <__ieee754_rem_pio2+0x300>)
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	dd39      	ble.n	800e174 <__ieee754_rem_pio2+0xbc>
 800e100:	f7f2 f8da 	bl	80002b8 <__aeabi_dsub>
 800e104:	45b0      	cmp	r8, r6
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	d01b      	beq.n	800e144 <__ieee754_rem_pio2+0x8c>
 800e10c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e3c0 <__ieee754_rem_pio2+0x308>)
 800e10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e112:	f7f2 f8d1 	bl	80002b8 <__aeabi_dsub>
 800e116:	4602      	mov	r2, r0
 800e118:	460b      	mov	r3, r1
 800e11a:	e9ca 2300 	strd	r2, r3, [sl]
 800e11e:	4620      	mov	r0, r4
 800e120:	4629      	mov	r1, r5
 800e122:	f7f2 f8c9 	bl	80002b8 <__aeabi_dsub>
 800e126:	a3a6      	add	r3, pc, #664	; (adr r3, 800e3c0 <__ieee754_rem_pio2+0x308>)
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	f7f2 f8c4 	bl	80002b8 <__aeabi_dsub>
 800e130:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e134:	f04f 0b01 	mov.w	fp, #1
 800e138:	4658      	mov	r0, fp
 800e13a:	b00b      	add	sp, #44	; 0x2c
 800e13c:	ecbd 8b02 	vpop	{d8}
 800e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e144:	a3a0      	add	r3, pc, #640	; (adr r3, 800e3c8 <__ieee754_rem_pio2+0x310>)
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	f7f2 f8b5 	bl	80002b8 <__aeabi_dsub>
 800e14e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x318>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	4604      	mov	r4, r0
 800e156:	460d      	mov	r5, r1
 800e158:	f7f2 f8ae 	bl	80002b8 <__aeabi_dsub>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	e9ca 2300 	strd	r2, r3, [sl]
 800e164:	4620      	mov	r0, r4
 800e166:	4629      	mov	r1, r5
 800e168:	f7f2 f8a6 	bl	80002b8 <__aeabi_dsub>
 800e16c:	a398      	add	r3, pc, #608	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x318>)
 800e16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e172:	e7db      	b.n	800e12c <__ieee754_rem_pio2+0x74>
 800e174:	f7f2 f8a2 	bl	80002bc <__adddf3>
 800e178:	45b0      	cmp	r8, r6
 800e17a:	4604      	mov	r4, r0
 800e17c:	460d      	mov	r5, r1
 800e17e:	d016      	beq.n	800e1ae <__ieee754_rem_pio2+0xf6>
 800e180:	a38f      	add	r3, pc, #572	; (adr r3, 800e3c0 <__ieee754_rem_pio2+0x308>)
 800e182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e186:	f7f2 f899 	bl	80002bc <__adddf3>
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	e9ca 2300 	strd	r2, r3, [sl]
 800e192:	4620      	mov	r0, r4
 800e194:	4629      	mov	r1, r5
 800e196:	f7f2 f88f 	bl	80002b8 <__aeabi_dsub>
 800e19a:	a389      	add	r3, pc, #548	; (adr r3, 800e3c0 <__ieee754_rem_pio2+0x308>)
 800e19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a0:	f7f2 f88c 	bl	80002bc <__adddf3>
 800e1a4:	f04f 3bff 	mov.w	fp, #4294967295
 800e1a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1ac:	e7c4      	b.n	800e138 <__ieee754_rem_pio2+0x80>
 800e1ae:	a386      	add	r3, pc, #536	; (adr r3, 800e3c8 <__ieee754_rem_pio2+0x310>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	f7f2 f882 	bl	80002bc <__adddf3>
 800e1b8:	a385      	add	r3, pc, #532	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x318>)
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	4604      	mov	r4, r0
 800e1c0:	460d      	mov	r5, r1
 800e1c2:	f7f2 f87b 	bl	80002bc <__adddf3>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	e9ca 2300 	strd	r2, r3, [sl]
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	f7f2 f871 	bl	80002b8 <__aeabi_dsub>
 800e1d6:	a37e      	add	r3, pc, #504	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x318>)
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	e7e0      	b.n	800e1a0 <__ieee754_rem_pio2+0xe8>
 800e1de:	4b87      	ldr	r3, [pc, #540]	; (800e3fc <__ieee754_rem_pio2+0x344>)
 800e1e0:	4598      	cmp	r8, r3
 800e1e2:	f300 80d9 	bgt.w	800e398 <__ieee754_rem_pio2+0x2e0>
 800e1e6:	f001 f8cf 	bl	800f388 <fabs>
 800e1ea:	ec55 4b10 	vmov	r4, r5, d0
 800e1ee:	ee10 0a10 	vmov	r0, s0
 800e1f2:	a379      	add	r3, pc, #484	; (adr r3, 800e3d8 <__ieee754_rem_pio2+0x320>)
 800e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	f7f2 fa15 	bl	8000628 <__aeabi_dmul>
 800e1fe:	4b80      	ldr	r3, [pc, #512]	; (800e400 <__ieee754_rem_pio2+0x348>)
 800e200:	2200      	movs	r2, #0
 800e202:	f7f2 f85b 	bl	80002bc <__adddf3>
 800e206:	f7f2 fcbf 	bl	8000b88 <__aeabi_d2iz>
 800e20a:	4683      	mov	fp, r0
 800e20c:	f7f2 f9a2 	bl	8000554 <__aeabi_i2d>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	ec43 2b18 	vmov	d8, r2, r3
 800e218:	a367      	add	r3, pc, #412	; (adr r3, 800e3b8 <__ieee754_rem_pio2+0x300>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	f7f2 fa03 	bl	8000628 <__aeabi_dmul>
 800e222:	4602      	mov	r2, r0
 800e224:	460b      	mov	r3, r1
 800e226:	4620      	mov	r0, r4
 800e228:	4629      	mov	r1, r5
 800e22a:	f7f2 f845 	bl	80002b8 <__aeabi_dsub>
 800e22e:	a364      	add	r3, pc, #400	; (adr r3, 800e3c0 <__ieee754_rem_pio2+0x308>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	4606      	mov	r6, r0
 800e236:	460f      	mov	r7, r1
 800e238:	ec51 0b18 	vmov	r0, r1, d8
 800e23c:	f7f2 f9f4 	bl	8000628 <__aeabi_dmul>
 800e240:	f1bb 0f1f 	cmp.w	fp, #31
 800e244:	4604      	mov	r4, r0
 800e246:	460d      	mov	r5, r1
 800e248:	dc0d      	bgt.n	800e266 <__ieee754_rem_pio2+0x1ae>
 800e24a:	4b6e      	ldr	r3, [pc, #440]	; (800e404 <__ieee754_rem_pio2+0x34c>)
 800e24c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e254:	4543      	cmp	r3, r8
 800e256:	d006      	beq.n	800e266 <__ieee754_rem_pio2+0x1ae>
 800e258:	4622      	mov	r2, r4
 800e25a:	462b      	mov	r3, r5
 800e25c:	4630      	mov	r0, r6
 800e25e:	4639      	mov	r1, r7
 800e260:	f7f2 f82a 	bl	80002b8 <__aeabi_dsub>
 800e264:	e00f      	b.n	800e286 <__ieee754_rem_pio2+0x1ce>
 800e266:	462b      	mov	r3, r5
 800e268:	4622      	mov	r2, r4
 800e26a:	4630      	mov	r0, r6
 800e26c:	4639      	mov	r1, r7
 800e26e:	f7f2 f823 	bl	80002b8 <__aeabi_dsub>
 800e272:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e27c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e280:	f1b8 0f10 	cmp.w	r8, #16
 800e284:	dc02      	bgt.n	800e28c <__ieee754_rem_pio2+0x1d4>
 800e286:	e9ca 0100 	strd	r0, r1, [sl]
 800e28a:	e039      	b.n	800e300 <__ieee754_rem_pio2+0x248>
 800e28c:	a34e      	add	r3, pc, #312	; (adr r3, 800e3c8 <__ieee754_rem_pio2+0x310>)
 800e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e292:	ec51 0b18 	vmov	r0, r1, d8
 800e296:	f7f2 f9c7 	bl	8000628 <__aeabi_dmul>
 800e29a:	4604      	mov	r4, r0
 800e29c:	460d      	mov	r5, r1
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	f7f2 f807 	bl	80002b8 <__aeabi_dsub>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	4680      	mov	r8, r0
 800e2b0:	4689      	mov	r9, r1
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	f7f1 ffff 	bl	80002b8 <__aeabi_dsub>
 800e2ba:	4622      	mov	r2, r4
 800e2bc:	462b      	mov	r3, r5
 800e2be:	f7f1 fffb 	bl	80002b8 <__aeabi_dsub>
 800e2c2:	a343      	add	r3, pc, #268	; (adr r3, 800e3d0 <__ieee754_rem_pio2+0x318>)
 800e2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	ec51 0b18 	vmov	r0, r1, d8
 800e2d0:	f7f2 f9aa 	bl	8000628 <__aeabi_dmul>
 800e2d4:	4622      	mov	r2, r4
 800e2d6:	462b      	mov	r3, r5
 800e2d8:	f7f1 ffee 	bl	80002b8 <__aeabi_dsub>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	460d      	mov	r5, r1
 800e2e4:	4640      	mov	r0, r8
 800e2e6:	4649      	mov	r1, r9
 800e2e8:	f7f1 ffe6 	bl	80002b8 <__aeabi_dsub>
 800e2ec:	9a03      	ldr	r2, [sp, #12]
 800e2ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	2b31      	cmp	r3, #49	; 0x31
 800e2f6:	dc24      	bgt.n	800e342 <__ieee754_rem_pio2+0x28a>
 800e2f8:	e9ca 0100 	strd	r0, r1, [sl]
 800e2fc:	4646      	mov	r6, r8
 800e2fe:	464f      	mov	r7, r9
 800e300:	e9da 8900 	ldrd	r8, r9, [sl]
 800e304:	4630      	mov	r0, r6
 800e306:	4642      	mov	r2, r8
 800e308:	464b      	mov	r3, r9
 800e30a:	4639      	mov	r1, r7
 800e30c:	f7f1 ffd4 	bl	80002b8 <__aeabi_dsub>
 800e310:	462b      	mov	r3, r5
 800e312:	4622      	mov	r2, r4
 800e314:	f7f1 ffd0 	bl	80002b8 <__aeabi_dsub>
 800e318:	9b02      	ldr	r3, [sp, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e320:	f6bf af0a 	bge.w	800e138 <__ieee754_rem_pio2+0x80>
 800e324:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e328:	f8ca 3004 	str.w	r3, [sl, #4]
 800e32c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e330:	f8ca 8000 	str.w	r8, [sl]
 800e334:	f8ca 0008 	str.w	r0, [sl, #8]
 800e338:	f8ca 300c 	str.w	r3, [sl, #12]
 800e33c:	f1cb 0b00 	rsb	fp, fp, #0
 800e340:	e6fa      	b.n	800e138 <__ieee754_rem_pio2+0x80>
 800e342:	a327      	add	r3, pc, #156	; (adr r3, 800e3e0 <__ieee754_rem_pio2+0x328>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	ec51 0b18 	vmov	r0, r1, d8
 800e34c:	f7f2 f96c 	bl	8000628 <__aeabi_dmul>
 800e350:	4604      	mov	r4, r0
 800e352:	460d      	mov	r5, r1
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f1 ffac 	bl	80002b8 <__aeabi_dsub>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4606      	mov	r6, r0
 800e366:	460f      	mov	r7, r1
 800e368:	4640      	mov	r0, r8
 800e36a:	4649      	mov	r1, r9
 800e36c:	f7f1 ffa4 	bl	80002b8 <__aeabi_dsub>
 800e370:	4622      	mov	r2, r4
 800e372:	462b      	mov	r3, r5
 800e374:	f7f1 ffa0 	bl	80002b8 <__aeabi_dsub>
 800e378:	a31b      	add	r3, pc, #108	; (adr r3, 800e3e8 <__ieee754_rem_pio2+0x330>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	4604      	mov	r4, r0
 800e380:	460d      	mov	r5, r1
 800e382:	ec51 0b18 	vmov	r0, r1, d8
 800e386:	f7f2 f94f 	bl	8000628 <__aeabi_dmul>
 800e38a:	4622      	mov	r2, r4
 800e38c:	462b      	mov	r3, r5
 800e38e:	f7f1 ff93 	bl	80002b8 <__aeabi_dsub>
 800e392:	4604      	mov	r4, r0
 800e394:	460d      	mov	r5, r1
 800e396:	e75f      	b.n	800e258 <__ieee754_rem_pio2+0x1a0>
 800e398:	4b1b      	ldr	r3, [pc, #108]	; (800e408 <__ieee754_rem_pio2+0x350>)
 800e39a:	4598      	cmp	r8, r3
 800e39c:	dd36      	ble.n	800e40c <__ieee754_rem_pio2+0x354>
 800e39e:	ee10 2a10 	vmov	r2, s0
 800e3a2:	462b      	mov	r3, r5
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	f7f1 ff86 	bl	80002b8 <__aeabi_dsub>
 800e3ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3b0:	e9ca 0100 	strd	r0, r1, [sl]
 800e3b4:	e694      	b.n	800e0e0 <__ieee754_rem_pio2+0x28>
 800e3b6:	bf00      	nop
 800e3b8:	54400000 	.word	0x54400000
 800e3bc:	3ff921fb 	.word	0x3ff921fb
 800e3c0:	1a626331 	.word	0x1a626331
 800e3c4:	3dd0b461 	.word	0x3dd0b461
 800e3c8:	1a600000 	.word	0x1a600000
 800e3cc:	3dd0b461 	.word	0x3dd0b461
 800e3d0:	2e037073 	.word	0x2e037073
 800e3d4:	3ba3198a 	.word	0x3ba3198a
 800e3d8:	6dc9c883 	.word	0x6dc9c883
 800e3dc:	3fe45f30 	.word	0x3fe45f30
 800e3e0:	2e000000 	.word	0x2e000000
 800e3e4:	3ba3198a 	.word	0x3ba3198a
 800e3e8:	252049c1 	.word	0x252049c1
 800e3ec:	397b839a 	.word	0x397b839a
 800e3f0:	3fe921fb 	.word	0x3fe921fb
 800e3f4:	4002d97b 	.word	0x4002d97b
 800e3f8:	3ff921fb 	.word	0x3ff921fb
 800e3fc:	413921fb 	.word	0x413921fb
 800e400:	3fe00000 	.word	0x3fe00000
 800e404:	0800fc50 	.word	0x0800fc50
 800e408:	7fefffff 	.word	0x7fefffff
 800e40c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e410:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e414:	ee10 0a10 	vmov	r0, s0
 800e418:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e41c:	ee10 6a10 	vmov	r6, s0
 800e420:	460f      	mov	r7, r1
 800e422:	f7f2 fbb1 	bl	8000b88 <__aeabi_d2iz>
 800e426:	f7f2 f895 	bl	8000554 <__aeabi_i2d>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4630      	mov	r0, r6
 800e430:	4639      	mov	r1, r7
 800e432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e436:	f7f1 ff3f 	bl	80002b8 <__aeabi_dsub>
 800e43a:	4b23      	ldr	r3, [pc, #140]	; (800e4c8 <__ieee754_rem_pio2+0x410>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	f7f2 f8f3 	bl	8000628 <__aeabi_dmul>
 800e442:	460f      	mov	r7, r1
 800e444:	4606      	mov	r6, r0
 800e446:	f7f2 fb9f 	bl	8000b88 <__aeabi_d2iz>
 800e44a:	f7f2 f883 	bl	8000554 <__aeabi_i2d>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4630      	mov	r0, r6
 800e454:	4639      	mov	r1, r7
 800e456:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e45a:	f7f1 ff2d 	bl	80002b8 <__aeabi_dsub>
 800e45e:	4b1a      	ldr	r3, [pc, #104]	; (800e4c8 <__ieee754_rem_pio2+0x410>)
 800e460:	2200      	movs	r2, #0
 800e462:	f7f2 f8e1 	bl	8000628 <__aeabi_dmul>
 800e466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e46a:	ad04      	add	r5, sp, #16
 800e46c:	f04f 0803 	mov.w	r8, #3
 800e470:	46a9      	mov	r9, r5
 800e472:	2600      	movs	r6, #0
 800e474:	2700      	movs	r7, #0
 800e476:	4632      	mov	r2, r6
 800e478:	463b      	mov	r3, r7
 800e47a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e47e:	46c3      	mov	fp, r8
 800e480:	3d08      	subs	r5, #8
 800e482:	f108 38ff 	add.w	r8, r8, #4294967295
 800e486:	f7f2 fb37 	bl	8000af8 <__aeabi_dcmpeq>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d1f3      	bne.n	800e476 <__ieee754_rem_pio2+0x3be>
 800e48e:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <__ieee754_rem_pio2+0x414>)
 800e490:	9301      	str	r3, [sp, #4]
 800e492:	2302      	movs	r3, #2
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	4622      	mov	r2, r4
 800e498:	465b      	mov	r3, fp
 800e49a:	4651      	mov	r1, sl
 800e49c:	4648      	mov	r0, r9
 800e49e:	f000 f993 	bl	800e7c8 <__kernel_rem_pio2>
 800e4a2:	9b02      	ldr	r3, [sp, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	4683      	mov	fp, r0
 800e4a8:	f6bf ae46 	bge.w	800e138 <__ieee754_rem_pio2+0x80>
 800e4ac:	e9da 2100 	ldrd	r2, r1, [sl]
 800e4b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4b4:	e9ca 2300 	strd	r2, r3, [sl]
 800e4b8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e4bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e4c4:	e73a      	b.n	800e33c <__ieee754_rem_pio2+0x284>
 800e4c6:	bf00      	nop
 800e4c8:	41700000 	.word	0x41700000
 800e4cc:	0800fcd0 	.word	0x0800fcd0

0800e4d0 <__ieee754_sqrt>:
 800e4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d4:	ec55 4b10 	vmov	r4, r5, d0
 800e4d8:	4e55      	ldr	r6, [pc, #340]	; (800e630 <__ieee754_sqrt+0x160>)
 800e4da:	43ae      	bics	r6, r5
 800e4dc:	ee10 0a10 	vmov	r0, s0
 800e4e0:	ee10 3a10 	vmov	r3, s0
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	d110      	bne.n	800e50c <__ieee754_sqrt+0x3c>
 800e4ea:	ee10 2a10 	vmov	r2, s0
 800e4ee:	462b      	mov	r3, r5
 800e4f0:	f7f2 f89a 	bl	8000628 <__aeabi_dmul>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	f7f1 fede 	bl	80002bc <__adddf3>
 800e500:	4604      	mov	r4, r0
 800e502:	460d      	mov	r5, r1
 800e504:	ec45 4b10 	vmov	d0, r4, r5
 800e508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50c:	2d00      	cmp	r5, #0
 800e50e:	dc10      	bgt.n	800e532 <__ieee754_sqrt+0x62>
 800e510:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e514:	4330      	orrs	r0, r6
 800e516:	d0f5      	beq.n	800e504 <__ieee754_sqrt+0x34>
 800e518:	b15d      	cbz	r5, 800e532 <__ieee754_sqrt+0x62>
 800e51a:	ee10 2a10 	vmov	r2, s0
 800e51e:	462b      	mov	r3, r5
 800e520:	ee10 0a10 	vmov	r0, s0
 800e524:	f7f1 fec8 	bl	80002b8 <__aeabi_dsub>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	f7f2 f9a6 	bl	800087c <__aeabi_ddiv>
 800e530:	e7e6      	b.n	800e500 <__ieee754_sqrt+0x30>
 800e532:	1512      	asrs	r2, r2, #20
 800e534:	d074      	beq.n	800e620 <__ieee754_sqrt+0x150>
 800e536:	07d4      	lsls	r4, r2, #31
 800e538:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e53c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e544:	bf5e      	ittt	pl
 800e546:	0fda      	lsrpl	r2, r3, #31
 800e548:	005b      	lslpl	r3, r3, #1
 800e54a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e54e:	2400      	movs	r4, #0
 800e550:	0fda      	lsrs	r2, r3, #31
 800e552:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e556:	107f      	asrs	r7, r7, #1
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	2516      	movs	r5, #22
 800e55c:	4620      	mov	r0, r4
 800e55e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e562:	1886      	adds	r6, r0, r2
 800e564:	428e      	cmp	r6, r1
 800e566:	bfde      	ittt	le
 800e568:	1b89      	suble	r1, r1, r6
 800e56a:	18b0      	addle	r0, r6, r2
 800e56c:	18a4      	addle	r4, r4, r2
 800e56e:	0049      	lsls	r1, r1, #1
 800e570:	3d01      	subs	r5, #1
 800e572:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e576:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e57a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e57e:	d1f0      	bne.n	800e562 <__ieee754_sqrt+0x92>
 800e580:	462a      	mov	r2, r5
 800e582:	f04f 0e20 	mov.w	lr, #32
 800e586:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e58a:	4281      	cmp	r1, r0
 800e58c:	eb06 0c05 	add.w	ip, r6, r5
 800e590:	dc02      	bgt.n	800e598 <__ieee754_sqrt+0xc8>
 800e592:	d113      	bne.n	800e5bc <__ieee754_sqrt+0xec>
 800e594:	459c      	cmp	ip, r3
 800e596:	d811      	bhi.n	800e5bc <__ieee754_sqrt+0xec>
 800e598:	f1bc 0f00 	cmp.w	ip, #0
 800e59c:	eb0c 0506 	add.w	r5, ip, r6
 800e5a0:	da43      	bge.n	800e62a <__ieee754_sqrt+0x15a>
 800e5a2:	2d00      	cmp	r5, #0
 800e5a4:	db41      	blt.n	800e62a <__ieee754_sqrt+0x15a>
 800e5a6:	f100 0801 	add.w	r8, r0, #1
 800e5aa:	1a09      	subs	r1, r1, r0
 800e5ac:	459c      	cmp	ip, r3
 800e5ae:	bf88      	it	hi
 800e5b0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e5b4:	eba3 030c 	sub.w	r3, r3, ip
 800e5b8:	4432      	add	r2, r6
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e5c0:	f1be 0e01 	subs.w	lr, lr, #1
 800e5c4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e5c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e5d0:	d1db      	bne.n	800e58a <__ieee754_sqrt+0xba>
 800e5d2:	430b      	orrs	r3, r1
 800e5d4:	d006      	beq.n	800e5e4 <__ieee754_sqrt+0x114>
 800e5d6:	1c50      	adds	r0, r2, #1
 800e5d8:	bf13      	iteet	ne
 800e5da:	3201      	addne	r2, #1
 800e5dc:	3401      	addeq	r4, #1
 800e5de:	4672      	moveq	r2, lr
 800e5e0:	f022 0201 	bicne.w	r2, r2, #1
 800e5e4:	1063      	asrs	r3, r4, #1
 800e5e6:	0852      	lsrs	r2, r2, #1
 800e5e8:	07e1      	lsls	r1, r4, #31
 800e5ea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e5ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e5f2:	bf48      	it	mi
 800e5f4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e5f8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e5fc:	4614      	mov	r4, r2
 800e5fe:	e781      	b.n	800e504 <__ieee754_sqrt+0x34>
 800e600:	0ad9      	lsrs	r1, r3, #11
 800e602:	3815      	subs	r0, #21
 800e604:	055b      	lsls	r3, r3, #21
 800e606:	2900      	cmp	r1, #0
 800e608:	d0fa      	beq.n	800e600 <__ieee754_sqrt+0x130>
 800e60a:	02cd      	lsls	r5, r1, #11
 800e60c:	d50a      	bpl.n	800e624 <__ieee754_sqrt+0x154>
 800e60e:	f1c2 0420 	rsb	r4, r2, #32
 800e612:	fa23 f404 	lsr.w	r4, r3, r4
 800e616:	1e55      	subs	r5, r2, #1
 800e618:	4093      	lsls	r3, r2
 800e61a:	4321      	orrs	r1, r4
 800e61c:	1b42      	subs	r2, r0, r5
 800e61e:	e78a      	b.n	800e536 <__ieee754_sqrt+0x66>
 800e620:	4610      	mov	r0, r2
 800e622:	e7f0      	b.n	800e606 <__ieee754_sqrt+0x136>
 800e624:	0049      	lsls	r1, r1, #1
 800e626:	3201      	adds	r2, #1
 800e628:	e7ef      	b.n	800e60a <__ieee754_sqrt+0x13a>
 800e62a:	4680      	mov	r8, r0
 800e62c:	e7bd      	b.n	800e5aa <__ieee754_sqrt+0xda>
 800e62e:	bf00      	nop
 800e630:	7ff00000 	.word	0x7ff00000
 800e634:	00000000 	.word	0x00000000

0800e638 <__kernel_cos>:
 800e638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	ec57 6b10 	vmov	r6, r7, d0
 800e640:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e644:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e648:	ed8d 1b00 	vstr	d1, [sp]
 800e64c:	da07      	bge.n	800e65e <__kernel_cos+0x26>
 800e64e:	ee10 0a10 	vmov	r0, s0
 800e652:	4639      	mov	r1, r7
 800e654:	f7f2 fa98 	bl	8000b88 <__aeabi_d2iz>
 800e658:	2800      	cmp	r0, #0
 800e65a:	f000 8088 	beq.w	800e76e <__kernel_cos+0x136>
 800e65e:	4632      	mov	r2, r6
 800e660:	463b      	mov	r3, r7
 800e662:	4630      	mov	r0, r6
 800e664:	4639      	mov	r1, r7
 800e666:	f7f1 ffdf 	bl	8000628 <__aeabi_dmul>
 800e66a:	4b51      	ldr	r3, [pc, #324]	; (800e7b0 <__kernel_cos+0x178>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	4604      	mov	r4, r0
 800e670:	460d      	mov	r5, r1
 800e672:	f7f1 ffd9 	bl	8000628 <__aeabi_dmul>
 800e676:	a340      	add	r3, pc, #256	; (adr r3, 800e778 <__kernel_cos+0x140>)
 800e678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67c:	4682      	mov	sl, r0
 800e67e:	468b      	mov	fp, r1
 800e680:	4620      	mov	r0, r4
 800e682:	4629      	mov	r1, r5
 800e684:	f7f1 ffd0 	bl	8000628 <__aeabi_dmul>
 800e688:	a33d      	add	r3, pc, #244	; (adr r3, 800e780 <__kernel_cos+0x148>)
 800e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68e:	f7f1 fe15 	bl	80002bc <__adddf3>
 800e692:	4622      	mov	r2, r4
 800e694:	462b      	mov	r3, r5
 800e696:	f7f1 ffc7 	bl	8000628 <__aeabi_dmul>
 800e69a:	a33b      	add	r3, pc, #236	; (adr r3, 800e788 <__kernel_cos+0x150>)
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	f7f1 fe0a 	bl	80002b8 <__aeabi_dsub>
 800e6a4:	4622      	mov	r2, r4
 800e6a6:	462b      	mov	r3, r5
 800e6a8:	f7f1 ffbe 	bl	8000628 <__aeabi_dmul>
 800e6ac:	a338      	add	r3, pc, #224	; (adr r3, 800e790 <__kernel_cos+0x158>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	f7f1 fe03 	bl	80002bc <__adddf3>
 800e6b6:	4622      	mov	r2, r4
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	f7f1 ffb5 	bl	8000628 <__aeabi_dmul>
 800e6be:	a336      	add	r3, pc, #216	; (adr r3, 800e798 <__kernel_cos+0x160>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	f7f1 fdf8 	bl	80002b8 <__aeabi_dsub>
 800e6c8:	4622      	mov	r2, r4
 800e6ca:	462b      	mov	r3, r5
 800e6cc:	f7f1 ffac 	bl	8000628 <__aeabi_dmul>
 800e6d0:	a333      	add	r3, pc, #204	; (adr r3, 800e7a0 <__kernel_cos+0x168>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	f7f1 fdf1 	bl	80002bc <__adddf3>
 800e6da:	4622      	mov	r2, r4
 800e6dc:	462b      	mov	r3, r5
 800e6de:	f7f1 ffa3 	bl	8000628 <__aeabi_dmul>
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	f7f1 ff9f 	bl	8000628 <__aeabi_dmul>
 800e6ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	460d      	mov	r5, r1
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	f7f1 ff97 	bl	8000628 <__aeabi_dmul>
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	4629      	mov	r1, r5
 800e700:	4620      	mov	r0, r4
 800e702:	f7f1 fdd9 	bl	80002b8 <__aeabi_dsub>
 800e706:	4b2b      	ldr	r3, [pc, #172]	; (800e7b4 <__kernel_cos+0x17c>)
 800e708:	4598      	cmp	r8, r3
 800e70a:	4606      	mov	r6, r0
 800e70c:	460f      	mov	r7, r1
 800e70e:	dc10      	bgt.n	800e732 <__kernel_cos+0xfa>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4650      	mov	r0, sl
 800e716:	4659      	mov	r1, fp
 800e718:	f7f1 fdce 	bl	80002b8 <__aeabi_dsub>
 800e71c:	460b      	mov	r3, r1
 800e71e:	4926      	ldr	r1, [pc, #152]	; (800e7b8 <__kernel_cos+0x180>)
 800e720:	4602      	mov	r2, r0
 800e722:	2000      	movs	r0, #0
 800e724:	f7f1 fdc8 	bl	80002b8 <__aeabi_dsub>
 800e728:	ec41 0b10 	vmov	d0, r0, r1
 800e72c:	b003      	add	sp, #12
 800e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e732:	4b22      	ldr	r3, [pc, #136]	; (800e7bc <__kernel_cos+0x184>)
 800e734:	4920      	ldr	r1, [pc, #128]	; (800e7b8 <__kernel_cos+0x180>)
 800e736:	4598      	cmp	r8, r3
 800e738:	bfcc      	ite	gt
 800e73a:	4d21      	ldrgt	r5, [pc, #132]	; (800e7c0 <__kernel_cos+0x188>)
 800e73c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e740:	2400      	movs	r4, #0
 800e742:	4622      	mov	r2, r4
 800e744:	462b      	mov	r3, r5
 800e746:	2000      	movs	r0, #0
 800e748:	f7f1 fdb6 	bl	80002b8 <__aeabi_dsub>
 800e74c:	4622      	mov	r2, r4
 800e74e:	4680      	mov	r8, r0
 800e750:	4689      	mov	r9, r1
 800e752:	462b      	mov	r3, r5
 800e754:	4650      	mov	r0, sl
 800e756:	4659      	mov	r1, fp
 800e758:	f7f1 fdae 	bl	80002b8 <__aeabi_dsub>
 800e75c:	4632      	mov	r2, r6
 800e75e:	463b      	mov	r3, r7
 800e760:	f7f1 fdaa 	bl	80002b8 <__aeabi_dsub>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4640      	mov	r0, r8
 800e76a:	4649      	mov	r1, r9
 800e76c:	e7da      	b.n	800e724 <__kernel_cos+0xec>
 800e76e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e7a8 <__kernel_cos+0x170>
 800e772:	e7db      	b.n	800e72c <__kernel_cos+0xf4>
 800e774:	f3af 8000 	nop.w
 800e778:	be8838d4 	.word	0xbe8838d4
 800e77c:	bda8fae9 	.word	0xbda8fae9
 800e780:	bdb4b1c4 	.word	0xbdb4b1c4
 800e784:	3e21ee9e 	.word	0x3e21ee9e
 800e788:	809c52ad 	.word	0x809c52ad
 800e78c:	3e927e4f 	.word	0x3e927e4f
 800e790:	19cb1590 	.word	0x19cb1590
 800e794:	3efa01a0 	.word	0x3efa01a0
 800e798:	16c15177 	.word	0x16c15177
 800e79c:	3f56c16c 	.word	0x3f56c16c
 800e7a0:	5555554c 	.word	0x5555554c
 800e7a4:	3fa55555 	.word	0x3fa55555
 800e7a8:	00000000 	.word	0x00000000
 800e7ac:	3ff00000 	.word	0x3ff00000
 800e7b0:	3fe00000 	.word	0x3fe00000
 800e7b4:	3fd33332 	.word	0x3fd33332
 800e7b8:	3ff00000 	.word	0x3ff00000
 800e7bc:	3fe90000 	.word	0x3fe90000
 800e7c0:	3fd20000 	.word	0x3fd20000
 800e7c4:	00000000 	.word	0x00000000

0800e7c8 <__kernel_rem_pio2>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	ed2d 8b02 	vpush	{d8}
 800e7d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e7d4:	f112 0f14 	cmn.w	r2, #20
 800e7d8:	9308      	str	r3, [sp, #32]
 800e7da:	9101      	str	r1, [sp, #4]
 800e7dc:	4bc4      	ldr	r3, [pc, #784]	; (800eaf0 <__kernel_rem_pio2+0x328>)
 800e7de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e7e0:	900b      	str	r0, [sp, #44]	; 0x2c
 800e7e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7e6:	9302      	str	r3, [sp, #8]
 800e7e8:	9b08      	ldr	r3, [sp, #32]
 800e7ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7ee:	bfa8      	it	ge
 800e7f0:	1ed4      	subge	r4, r2, #3
 800e7f2:	9306      	str	r3, [sp, #24]
 800e7f4:	bfb2      	itee	lt
 800e7f6:	2400      	movlt	r4, #0
 800e7f8:	2318      	movge	r3, #24
 800e7fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800e7fe:	f06f 0317 	mvn.w	r3, #23
 800e802:	fb04 3303 	mla	r3, r4, r3, r3
 800e806:	eb03 0a02 	add.w	sl, r3, r2
 800e80a:	9b02      	ldr	r3, [sp, #8]
 800e80c:	9a06      	ldr	r2, [sp, #24]
 800e80e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800eae0 <__kernel_rem_pio2+0x318>
 800e812:	eb03 0802 	add.w	r8, r3, r2
 800e816:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e818:	1aa7      	subs	r7, r4, r2
 800e81a:	ae22      	add	r6, sp, #136	; 0x88
 800e81c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e820:	2500      	movs	r5, #0
 800e822:	4545      	cmp	r5, r8
 800e824:	dd13      	ble.n	800e84e <__kernel_rem_pio2+0x86>
 800e826:	9b08      	ldr	r3, [sp, #32]
 800e828:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800eae0 <__kernel_rem_pio2+0x318>
 800e82c:	aa22      	add	r2, sp, #136	; 0x88
 800e82e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e832:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e836:	f04f 0800 	mov.w	r8, #0
 800e83a:	9b02      	ldr	r3, [sp, #8]
 800e83c:	4598      	cmp	r8, r3
 800e83e:	dc2f      	bgt.n	800e8a0 <__kernel_rem_pio2+0xd8>
 800e840:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e844:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e848:	462f      	mov	r7, r5
 800e84a:	2600      	movs	r6, #0
 800e84c:	e01b      	b.n	800e886 <__kernel_rem_pio2+0xbe>
 800e84e:	42ef      	cmn	r7, r5
 800e850:	d407      	bmi.n	800e862 <__kernel_rem_pio2+0x9a>
 800e852:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e856:	f7f1 fe7d 	bl	8000554 <__aeabi_i2d>
 800e85a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e85e:	3501      	adds	r5, #1
 800e860:	e7df      	b.n	800e822 <__kernel_rem_pio2+0x5a>
 800e862:	ec51 0b18 	vmov	r0, r1, d8
 800e866:	e7f8      	b.n	800e85a <__kernel_rem_pio2+0x92>
 800e868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e86c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e870:	f7f1 feda 	bl	8000628 <__aeabi_dmul>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e87c:	f7f1 fd1e 	bl	80002bc <__adddf3>
 800e880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e884:	3601      	adds	r6, #1
 800e886:	9b06      	ldr	r3, [sp, #24]
 800e888:	429e      	cmp	r6, r3
 800e88a:	f1a7 0708 	sub.w	r7, r7, #8
 800e88e:	ddeb      	ble.n	800e868 <__kernel_rem_pio2+0xa0>
 800e890:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e894:	f108 0801 	add.w	r8, r8, #1
 800e898:	ecab 7b02 	vstmia	fp!, {d7}
 800e89c:	3508      	adds	r5, #8
 800e89e:	e7cc      	b.n	800e83a <__kernel_rem_pio2+0x72>
 800e8a0:	9b02      	ldr	r3, [sp, #8]
 800e8a2:	aa0e      	add	r2, sp, #56	; 0x38
 800e8a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8a8:	930d      	str	r3, [sp, #52]	; 0x34
 800e8aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e8ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e8b0:	9c02      	ldr	r4, [sp, #8]
 800e8b2:	930c      	str	r3, [sp, #48]	; 0x30
 800e8b4:	00e3      	lsls	r3, r4, #3
 800e8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e8b8:	ab9a      	add	r3, sp, #616	; 0x268
 800e8ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e8be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e8c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e8c6:	ab72      	add	r3, sp, #456	; 0x1c8
 800e8c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e8cc:	46c3      	mov	fp, r8
 800e8ce:	46a1      	mov	r9, r4
 800e8d0:	f1b9 0f00 	cmp.w	r9, #0
 800e8d4:	f1a5 0508 	sub.w	r5, r5, #8
 800e8d8:	dc77      	bgt.n	800e9ca <__kernel_rem_pio2+0x202>
 800e8da:	ec47 6b10 	vmov	d0, r6, r7
 800e8de:	4650      	mov	r0, sl
 800e8e0:	f000 fde6 	bl	800f4b0 <scalbn>
 800e8e4:	ec57 6b10 	vmov	r6, r7, d0
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e8ee:	ee10 0a10 	vmov	r0, s0
 800e8f2:	4639      	mov	r1, r7
 800e8f4:	f7f1 fe98 	bl	8000628 <__aeabi_dmul>
 800e8f8:	ec41 0b10 	vmov	d0, r0, r1
 800e8fc:	f000 fd58 	bl	800f3b0 <floor>
 800e900:	4b7c      	ldr	r3, [pc, #496]	; (800eaf4 <__kernel_rem_pio2+0x32c>)
 800e902:	ec51 0b10 	vmov	r0, r1, d0
 800e906:	2200      	movs	r2, #0
 800e908:	f7f1 fe8e 	bl	8000628 <__aeabi_dmul>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f1 fcd0 	bl	80002b8 <__aeabi_dsub>
 800e918:	460f      	mov	r7, r1
 800e91a:	4606      	mov	r6, r0
 800e91c:	f7f2 f934 	bl	8000b88 <__aeabi_d2iz>
 800e920:	9004      	str	r0, [sp, #16]
 800e922:	f7f1 fe17 	bl	8000554 <__aeabi_i2d>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4630      	mov	r0, r6
 800e92c:	4639      	mov	r1, r7
 800e92e:	f7f1 fcc3 	bl	80002b8 <__aeabi_dsub>
 800e932:	f1ba 0f00 	cmp.w	sl, #0
 800e936:	4606      	mov	r6, r0
 800e938:	460f      	mov	r7, r1
 800e93a:	dd6d      	ble.n	800ea18 <__kernel_rem_pio2+0x250>
 800e93c:	1e62      	subs	r2, r4, #1
 800e93e:	ab0e      	add	r3, sp, #56	; 0x38
 800e940:	9d04      	ldr	r5, [sp, #16]
 800e942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e946:	f1ca 0118 	rsb	r1, sl, #24
 800e94a:	fa40 f301 	asr.w	r3, r0, r1
 800e94e:	441d      	add	r5, r3
 800e950:	408b      	lsls	r3, r1
 800e952:	1ac0      	subs	r0, r0, r3
 800e954:	ab0e      	add	r3, sp, #56	; 0x38
 800e956:	9504      	str	r5, [sp, #16]
 800e958:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e95c:	f1ca 0317 	rsb	r3, sl, #23
 800e960:	fa40 fb03 	asr.w	fp, r0, r3
 800e964:	f1bb 0f00 	cmp.w	fp, #0
 800e968:	dd65      	ble.n	800ea36 <__kernel_rem_pio2+0x26e>
 800e96a:	9b04      	ldr	r3, [sp, #16]
 800e96c:	2200      	movs	r2, #0
 800e96e:	3301      	adds	r3, #1
 800e970:	9304      	str	r3, [sp, #16]
 800e972:	4615      	mov	r5, r2
 800e974:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e978:	4294      	cmp	r4, r2
 800e97a:	f300 809c 	bgt.w	800eab6 <__kernel_rem_pio2+0x2ee>
 800e97e:	f1ba 0f00 	cmp.w	sl, #0
 800e982:	dd07      	ble.n	800e994 <__kernel_rem_pio2+0x1cc>
 800e984:	f1ba 0f01 	cmp.w	sl, #1
 800e988:	f000 80c0 	beq.w	800eb0c <__kernel_rem_pio2+0x344>
 800e98c:	f1ba 0f02 	cmp.w	sl, #2
 800e990:	f000 80c6 	beq.w	800eb20 <__kernel_rem_pio2+0x358>
 800e994:	f1bb 0f02 	cmp.w	fp, #2
 800e998:	d14d      	bne.n	800ea36 <__kernel_rem_pio2+0x26e>
 800e99a:	4632      	mov	r2, r6
 800e99c:	463b      	mov	r3, r7
 800e99e:	4956      	ldr	r1, [pc, #344]	; (800eaf8 <__kernel_rem_pio2+0x330>)
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	f7f1 fc89 	bl	80002b8 <__aeabi_dsub>
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460f      	mov	r7, r1
 800e9aa:	2d00      	cmp	r5, #0
 800e9ac:	d043      	beq.n	800ea36 <__kernel_rem_pio2+0x26e>
 800e9ae:	4650      	mov	r0, sl
 800e9b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800eae8 <__kernel_rem_pio2+0x320>
 800e9b4:	f000 fd7c 	bl	800f4b0 <scalbn>
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	ec53 2b10 	vmov	r2, r3, d0
 800e9c0:	f7f1 fc7a 	bl	80002b8 <__aeabi_dsub>
 800e9c4:	4606      	mov	r6, r0
 800e9c6:	460f      	mov	r7, r1
 800e9c8:	e035      	b.n	800ea36 <__kernel_rem_pio2+0x26e>
 800e9ca:	4b4c      	ldr	r3, [pc, #304]	; (800eafc <__kernel_rem_pio2+0x334>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	f7f1 fe29 	bl	8000628 <__aeabi_dmul>
 800e9d6:	f7f2 f8d7 	bl	8000b88 <__aeabi_d2iz>
 800e9da:	f7f1 fdbb 	bl	8000554 <__aeabi_i2d>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	ec43 2b18 	vmov	d8, r2, r3
 800e9e6:	4b46      	ldr	r3, [pc, #280]	; (800eb00 <__kernel_rem_pio2+0x338>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f7f1 fe1d 	bl	8000628 <__aeabi_dmul>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	f7f1 fc5f 	bl	80002b8 <__aeabi_dsub>
 800e9fa:	f7f2 f8c5 	bl	8000b88 <__aeabi_d2iz>
 800e9fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea02:	f84b 0b04 	str.w	r0, [fp], #4
 800ea06:	ec51 0b18 	vmov	r0, r1, d8
 800ea0a:	f7f1 fc57 	bl	80002bc <__adddf3>
 800ea0e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea12:	4606      	mov	r6, r0
 800ea14:	460f      	mov	r7, r1
 800ea16:	e75b      	b.n	800e8d0 <__kernel_rem_pio2+0x108>
 800ea18:	d106      	bne.n	800ea28 <__kernel_rem_pio2+0x260>
 800ea1a:	1e63      	subs	r3, r4, #1
 800ea1c:	aa0e      	add	r2, sp, #56	; 0x38
 800ea1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ea22:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ea26:	e79d      	b.n	800e964 <__kernel_rem_pio2+0x19c>
 800ea28:	4b36      	ldr	r3, [pc, #216]	; (800eb04 <__kernel_rem_pio2+0x33c>)
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f7f2 f882 	bl	8000b34 <__aeabi_dcmpge>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	d13d      	bne.n	800eab0 <__kernel_rem_pio2+0x2e8>
 800ea34:	4683      	mov	fp, r0
 800ea36:	2200      	movs	r2, #0
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	f7f2 f85b 	bl	8000af8 <__aeabi_dcmpeq>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f000 80c0 	beq.w	800ebc8 <__kernel_rem_pio2+0x400>
 800ea48:	1e65      	subs	r5, r4, #1
 800ea4a:	462b      	mov	r3, r5
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	9902      	ldr	r1, [sp, #8]
 800ea50:	428b      	cmp	r3, r1
 800ea52:	da6c      	bge.n	800eb2e <__kernel_rem_pio2+0x366>
 800ea54:	2a00      	cmp	r2, #0
 800ea56:	f000 8089 	beq.w	800eb6c <__kernel_rem_pio2+0x3a4>
 800ea5a:	ab0e      	add	r3, sp, #56	; 0x38
 800ea5c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ea60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	f000 80ad 	beq.w	800ebc4 <__kernel_rem_pio2+0x3fc>
 800ea6a:	4650      	mov	r0, sl
 800ea6c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800eae8 <__kernel_rem_pio2+0x320>
 800ea70:	f000 fd1e 	bl	800f4b0 <scalbn>
 800ea74:	ab9a      	add	r3, sp, #616	; 0x268
 800ea76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ea7a:	ec57 6b10 	vmov	r6, r7, d0
 800ea7e:	00ec      	lsls	r4, r5, #3
 800ea80:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ea84:	46aa      	mov	sl, r5
 800ea86:	f1ba 0f00 	cmp.w	sl, #0
 800ea8a:	f280 80d6 	bge.w	800ec3a <__kernel_rem_pio2+0x472>
 800ea8e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800eae0 <__kernel_rem_pio2+0x318>
 800ea92:	462e      	mov	r6, r5
 800ea94:	2e00      	cmp	r6, #0
 800ea96:	f2c0 8104 	blt.w	800eca2 <__kernel_rem_pio2+0x4da>
 800ea9a:	ab72      	add	r3, sp, #456	; 0x1c8
 800ea9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eaa0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800eb08 <__kernel_rem_pio2+0x340>
 800eaa4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800eaa8:	f04f 0800 	mov.w	r8, #0
 800eaac:	1baf      	subs	r7, r5, r6
 800eaae:	e0ea      	b.n	800ec86 <__kernel_rem_pio2+0x4be>
 800eab0:	f04f 0b02 	mov.w	fp, #2
 800eab4:	e759      	b.n	800e96a <__kernel_rem_pio2+0x1a2>
 800eab6:	f8d8 3000 	ldr.w	r3, [r8]
 800eaba:	b955      	cbnz	r5, 800ead2 <__kernel_rem_pio2+0x30a>
 800eabc:	b123      	cbz	r3, 800eac8 <__kernel_rem_pio2+0x300>
 800eabe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eac2:	f8c8 3000 	str.w	r3, [r8]
 800eac6:	2301      	movs	r3, #1
 800eac8:	3201      	adds	r2, #1
 800eaca:	f108 0804 	add.w	r8, r8, #4
 800eace:	461d      	mov	r5, r3
 800ead0:	e752      	b.n	800e978 <__kernel_rem_pio2+0x1b0>
 800ead2:	1acb      	subs	r3, r1, r3
 800ead4:	f8c8 3000 	str.w	r3, [r8]
 800ead8:	462b      	mov	r3, r5
 800eada:	e7f5      	b.n	800eac8 <__kernel_rem_pio2+0x300>
 800eadc:	f3af 8000 	nop.w
	...
 800eaec:	3ff00000 	.word	0x3ff00000
 800eaf0:	0800fe18 	.word	0x0800fe18
 800eaf4:	40200000 	.word	0x40200000
 800eaf8:	3ff00000 	.word	0x3ff00000
 800eafc:	3e700000 	.word	0x3e700000
 800eb00:	41700000 	.word	0x41700000
 800eb04:	3fe00000 	.word	0x3fe00000
 800eb08:	0800fdd8 	.word	0x0800fdd8
 800eb0c:	1e62      	subs	r2, r4, #1
 800eb0e:	ab0e      	add	r3, sp, #56	; 0x38
 800eb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eb18:	a90e      	add	r1, sp, #56	; 0x38
 800eb1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eb1e:	e739      	b.n	800e994 <__kernel_rem_pio2+0x1cc>
 800eb20:	1e62      	subs	r2, r4, #1
 800eb22:	ab0e      	add	r3, sp, #56	; 0x38
 800eb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb2c:	e7f4      	b.n	800eb18 <__kernel_rem_pio2+0x350>
 800eb2e:	a90e      	add	r1, sp, #56	; 0x38
 800eb30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eb34:	3b01      	subs	r3, #1
 800eb36:	430a      	orrs	r2, r1
 800eb38:	e789      	b.n	800ea4e <__kernel_rem_pio2+0x286>
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eb40:	2900      	cmp	r1, #0
 800eb42:	d0fa      	beq.n	800eb3a <__kernel_rem_pio2+0x372>
 800eb44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb46:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800eb4a:	446a      	add	r2, sp
 800eb4c:	3a98      	subs	r2, #152	; 0x98
 800eb4e:	920a      	str	r2, [sp, #40]	; 0x28
 800eb50:	9a08      	ldr	r2, [sp, #32]
 800eb52:	18e3      	adds	r3, r4, r3
 800eb54:	18a5      	adds	r5, r4, r2
 800eb56:	aa22      	add	r2, sp, #136	; 0x88
 800eb58:	f104 0801 	add.w	r8, r4, #1
 800eb5c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800eb60:	9304      	str	r3, [sp, #16]
 800eb62:	9b04      	ldr	r3, [sp, #16]
 800eb64:	4543      	cmp	r3, r8
 800eb66:	da04      	bge.n	800eb72 <__kernel_rem_pio2+0x3aa>
 800eb68:	461c      	mov	r4, r3
 800eb6a:	e6a3      	b.n	800e8b4 <__kernel_rem_pio2+0xec>
 800eb6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e7e4      	b.n	800eb3c <__kernel_rem_pio2+0x374>
 800eb72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eb78:	f7f1 fcec 	bl	8000554 <__aeabi_i2d>
 800eb7c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb82:	46ab      	mov	fp, r5
 800eb84:	461c      	mov	r4, r3
 800eb86:	f04f 0900 	mov.w	r9, #0
 800eb8a:	2600      	movs	r6, #0
 800eb8c:	2700      	movs	r7, #0
 800eb8e:	9b06      	ldr	r3, [sp, #24]
 800eb90:	4599      	cmp	r9, r3
 800eb92:	dd06      	ble.n	800eba2 <__kernel_rem_pio2+0x3da>
 800eb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb96:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eb9a:	f108 0801 	add.w	r8, r8, #1
 800eb9e:	930a      	str	r3, [sp, #40]	; 0x28
 800eba0:	e7df      	b.n	800eb62 <__kernel_rem_pio2+0x39a>
 800eba2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eba6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ebaa:	f7f1 fd3d 	bl	8000628 <__aeabi_dmul>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	f7f1 fb81 	bl	80002bc <__adddf3>
 800ebba:	f109 0901 	add.w	r9, r9, #1
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	460f      	mov	r7, r1
 800ebc2:	e7e4      	b.n	800eb8e <__kernel_rem_pio2+0x3c6>
 800ebc4:	3d01      	subs	r5, #1
 800ebc6:	e748      	b.n	800ea5a <__kernel_rem_pio2+0x292>
 800ebc8:	ec47 6b10 	vmov	d0, r6, r7
 800ebcc:	f1ca 0000 	rsb	r0, sl, #0
 800ebd0:	f000 fc6e 	bl	800f4b0 <scalbn>
 800ebd4:	ec57 6b10 	vmov	r6, r7, d0
 800ebd8:	4ba0      	ldr	r3, [pc, #640]	; (800ee5c <__kernel_rem_pio2+0x694>)
 800ebda:	ee10 0a10 	vmov	r0, s0
 800ebde:	2200      	movs	r2, #0
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	f7f1 ffa7 	bl	8000b34 <__aeabi_dcmpge>
 800ebe6:	b1f8      	cbz	r0, 800ec28 <__kernel_rem_pio2+0x460>
 800ebe8:	4b9d      	ldr	r3, [pc, #628]	; (800ee60 <__kernel_rem_pio2+0x698>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	4630      	mov	r0, r6
 800ebee:	4639      	mov	r1, r7
 800ebf0:	f7f1 fd1a 	bl	8000628 <__aeabi_dmul>
 800ebf4:	f7f1 ffc8 	bl	8000b88 <__aeabi_d2iz>
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	f7f1 fcab 	bl	8000554 <__aeabi_i2d>
 800ebfe:	4b97      	ldr	r3, [pc, #604]	; (800ee5c <__kernel_rem_pio2+0x694>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	f7f1 fd11 	bl	8000628 <__aeabi_dmul>
 800ec06:	460b      	mov	r3, r1
 800ec08:	4602      	mov	r2, r0
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	f7f1 fb53 	bl	80002b8 <__aeabi_dsub>
 800ec12:	f7f1 ffb9 	bl	8000b88 <__aeabi_d2iz>
 800ec16:	1c65      	adds	r5, r4, #1
 800ec18:	ab0e      	add	r3, sp, #56	; 0x38
 800ec1a:	f10a 0a18 	add.w	sl, sl, #24
 800ec1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec22:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ec26:	e720      	b.n	800ea6a <__kernel_rem_pio2+0x2a2>
 800ec28:	4630      	mov	r0, r6
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	f7f1 ffac 	bl	8000b88 <__aeabi_d2iz>
 800ec30:	ab0e      	add	r3, sp, #56	; 0x38
 800ec32:	4625      	mov	r5, r4
 800ec34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec38:	e717      	b.n	800ea6a <__kernel_rem_pio2+0x2a2>
 800ec3a:	ab0e      	add	r3, sp, #56	; 0x38
 800ec3c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ec40:	f7f1 fc88 	bl	8000554 <__aeabi_i2d>
 800ec44:	4632      	mov	r2, r6
 800ec46:	463b      	mov	r3, r7
 800ec48:	f7f1 fcee 	bl	8000628 <__aeabi_dmul>
 800ec4c:	4b84      	ldr	r3, [pc, #528]	; (800ee60 <__kernel_rem_pio2+0x698>)
 800ec4e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ec52:	2200      	movs	r2, #0
 800ec54:	4630      	mov	r0, r6
 800ec56:	4639      	mov	r1, r7
 800ec58:	f7f1 fce6 	bl	8000628 <__aeabi_dmul>
 800ec5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec60:	4606      	mov	r6, r0
 800ec62:	460f      	mov	r7, r1
 800ec64:	e70f      	b.n	800ea86 <__kernel_rem_pio2+0x2be>
 800ec66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ec6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ec6e:	f7f1 fcdb 	bl	8000628 <__aeabi_dmul>
 800ec72:	4602      	mov	r2, r0
 800ec74:	460b      	mov	r3, r1
 800ec76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec7a:	f7f1 fb1f 	bl	80002bc <__adddf3>
 800ec7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec82:	f108 0801 	add.w	r8, r8, #1
 800ec86:	9b02      	ldr	r3, [sp, #8]
 800ec88:	4598      	cmp	r8, r3
 800ec8a:	dc01      	bgt.n	800ec90 <__kernel_rem_pio2+0x4c8>
 800ec8c:	45b8      	cmp	r8, r7
 800ec8e:	ddea      	ble.n	800ec66 <__kernel_rem_pio2+0x49e>
 800ec90:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ec94:	ab4a      	add	r3, sp, #296	; 0x128
 800ec96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ec9a:	ed87 7b00 	vstr	d7, [r7]
 800ec9e:	3e01      	subs	r6, #1
 800eca0:	e6f8      	b.n	800ea94 <__kernel_rem_pio2+0x2cc>
 800eca2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800eca4:	2b02      	cmp	r3, #2
 800eca6:	dc0b      	bgt.n	800ecc0 <__kernel_rem_pio2+0x4f8>
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	dc35      	bgt.n	800ed18 <__kernel_rem_pio2+0x550>
 800ecac:	d059      	beq.n	800ed62 <__kernel_rem_pio2+0x59a>
 800ecae:	9b04      	ldr	r3, [sp, #16]
 800ecb0:	f003 0007 	and.w	r0, r3, #7
 800ecb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ecb8:	ecbd 8b02 	vpop	{d8}
 800ecbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d1f3      	bne.n	800ecae <__kernel_rem_pio2+0x4e6>
 800ecc6:	ab4a      	add	r3, sp, #296	; 0x128
 800ecc8:	4423      	add	r3, r4
 800ecca:	9306      	str	r3, [sp, #24]
 800eccc:	461c      	mov	r4, r3
 800ecce:	469a      	mov	sl, r3
 800ecd0:	9502      	str	r5, [sp, #8]
 800ecd2:	9b02      	ldr	r3, [sp, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f1aa 0a08 	sub.w	sl, sl, #8
 800ecda:	dc6b      	bgt.n	800edb4 <__kernel_rem_pio2+0x5ec>
 800ecdc:	46aa      	mov	sl, r5
 800ecde:	f1ba 0f01 	cmp.w	sl, #1
 800ece2:	f1a4 0408 	sub.w	r4, r4, #8
 800ece6:	f300 8085 	bgt.w	800edf4 <__kernel_rem_pio2+0x62c>
 800ecea:	9c06      	ldr	r4, [sp, #24]
 800ecec:	2000      	movs	r0, #0
 800ecee:	3408      	adds	r4, #8
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	2d01      	cmp	r5, #1
 800ecf4:	f300 809d 	bgt.w	800ee32 <__kernel_rem_pio2+0x66a>
 800ecf8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ecfc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ed00:	f1bb 0f00 	cmp.w	fp, #0
 800ed04:	f040 809b 	bne.w	800ee3e <__kernel_rem_pio2+0x676>
 800ed08:	9b01      	ldr	r3, [sp, #4]
 800ed0a:	e9c3 5600 	strd	r5, r6, [r3]
 800ed0e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ed12:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ed16:	e7ca      	b.n	800ecae <__kernel_rem_pio2+0x4e6>
 800ed18:	3408      	adds	r4, #8
 800ed1a:	ab4a      	add	r3, sp, #296	; 0x128
 800ed1c:	441c      	add	r4, r3
 800ed1e:	462e      	mov	r6, r5
 800ed20:	2000      	movs	r0, #0
 800ed22:	2100      	movs	r1, #0
 800ed24:	2e00      	cmp	r6, #0
 800ed26:	da36      	bge.n	800ed96 <__kernel_rem_pio2+0x5ce>
 800ed28:	f1bb 0f00 	cmp.w	fp, #0
 800ed2c:	d039      	beq.n	800eda2 <__kernel_rem_pio2+0x5da>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed34:	9c01      	ldr	r4, [sp, #4]
 800ed36:	e9c4 2300 	strd	r2, r3, [r4]
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ed42:	f7f1 fab9 	bl	80002b8 <__aeabi_dsub>
 800ed46:	ae4c      	add	r6, sp, #304	; 0x130
 800ed48:	2401      	movs	r4, #1
 800ed4a:	42a5      	cmp	r5, r4
 800ed4c:	da2c      	bge.n	800eda8 <__kernel_rem_pio2+0x5e0>
 800ed4e:	f1bb 0f00 	cmp.w	fp, #0
 800ed52:	d002      	beq.n	800ed5a <__kernel_rem_pio2+0x592>
 800ed54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed58:	4619      	mov	r1, r3
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ed60:	e7a5      	b.n	800ecae <__kernel_rem_pio2+0x4e6>
 800ed62:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ed66:	eb0d 0403 	add.w	r4, sp, r3
 800ed6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ed6e:	2000      	movs	r0, #0
 800ed70:	2100      	movs	r1, #0
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	da09      	bge.n	800ed8a <__kernel_rem_pio2+0x5c2>
 800ed76:	f1bb 0f00 	cmp.w	fp, #0
 800ed7a:	d002      	beq.n	800ed82 <__kernel_rem_pio2+0x5ba>
 800ed7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed80:	4619      	mov	r1, r3
 800ed82:	9b01      	ldr	r3, [sp, #4]
 800ed84:	e9c3 0100 	strd	r0, r1, [r3]
 800ed88:	e791      	b.n	800ecae <__kernel_rem_pio2+0x4e6>
 800ed8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed8e:	f7f1 fa95 	bl	80002bc <__adddf3>
 800ed92:	3d01      	subs	r5, #1
 800ed94:	e7ed      	b.n	800ed72 <__kernel_rem_pio2+0x5aa>
 800ed96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed9a:	f7f1 fa8f 	bl	80002bc <__adddf3>
 800ed9e:	3e01      	subs	r6, #1
 800eda0:	e7c0      	b.n	800ed24 <__kernel_rem_pio2+0x55c>
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	e7c5      	b.n	800ed34 <__kernel_rem_pio2+0x56c>
 800eda8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800edac:	f7f1 fa86 	bl	80002bc <__adddf3>
 800edb0:	3401      	adds	r4, #1
 800edb2:	e7ca      	b.n	800ed4a <__kernel_rem_pio2+0x582>
 800edb4:	e9da 8900 	ldrd	r8, r9, [sl]
 800edb8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800edbc:	9b02      	ldr	r3, [sp, #8]
 800edbe:	3b01      	subs	r3, #1
 800edc0:	9302      	str	r3, [sp, #8]
 800edc2:	4632      	mov	r2, r6
 800edc4:	463b      	mov	r3, r7
 800edc6:	4640      	mov	r0, r8
 800edc8:	4649      	mov	r1, r9
 800edca:	f7f1 fa77 	bl	80002bc <__adddf3>
 800edce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	4640      	mov	r0, r8
 800edd8:	4649      	mov	r1, r9
 800edda:	f7f1 fa6d 	bl	80002b8 <__aeabi_dsub>
 800edde:	4632      	mov	r2, r6
 800ede0:	463b      	mov	r3, r7
 800ede2:	f7f1 fa6b 	bl	80002bc <__adddf3>
 800ede6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800edea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edee:	ed8a 7b00 	vstr	d7, [sl]
 800edf2:	e76e      	b.n	800ecd2 <__kernel_rem_pio2+0x50a>
 800edf4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800edf8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800edfc:	4640      	mov	r0, r8
 800edfe:	4632      	mov	r2, r6
 800ee00:	463b      	mov	r3, r7
 800ee02:	4649      	mov	r1, r9
 800ee04:	f7f1 fa5a 	bl	80002bc <__adddf3>
 800ee08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4640      	mov	r0, r8
 800ee12:	4649      	mov	r1, r9
 800ee14:	f7f1 fa50 	bl	80002b8 <__aeabi_dsub>
 800ee18:	4632      	mov	r2, r6
 800ee1a:	463b      	mov	r3, r7
 800ee1c:	f7f1 fa4e 	bl	80002bc <__adddf3>
 800ee20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee28:	ed84 7b00 	vstr	d7, [r4]
 800ee2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee30:	e755      	b.n	800ecde <__kernel_rem_pio2+0x516>
 800ee32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee36:	f7f1 fa41 	bl	80002bc <__adddf3>
 800ee3a:	3d01      	subs	r5, #1
 800ee3c:	e759      	b.n	800ecf2 <__kernel_rem_pio2+0x52a>
 800ee3e:	9b01      	ldr	r3, [sp, #4]
 800ee40:	9a01      	ldr	r2, [sp, #4]
 800ee42:	601d      	str	r5, [r3, #0]
 800ee44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ee48:	605c      	str	r4, [r3, #4]
 800ee4a:	609f      	str	r7, [r3, #8]
 800ee4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ee50:	60d3      	str	r3, [r2, #12]
 800ee52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee56:	6110      	str	r0, [r2, #16]
 800ee58:	6153      	str	r3, [r2, #20]
 800ee5a:	e728      	b.n	800ecae <__kernel_rem_pio2+0x4e6>
 800ee5c:	41700000 	.word	0x41700000
 800ee60:	3e700000 	.word	0x3e700000
 800ee64:	00000000 	.word	0x00000000

0800ee68 <__kernel_sin>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	ed2d 8b04 	vpush	{d8-d9}
 800ee70:	eeb0 8a41 	vmov.f32	s16, s2
 800ee74:	eef0 8a61 	vmov.f32	s17, s3
 800ee78:	ec55 4b10 	vmov	r4, r5, d0
 800ee7c:	b083      	sub	sp, #12
 800ee7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ee86:	9001      	str	r0, [sp, #4]
 800ee88:	da06      	bge.n	800ee98 <__kernel_sin+0x30>
 800ee8a:	ee10 0a10 	vmov	r0, s0
 800ee8e:	4629      	mov	r1, r5
 800ee90:	f7f1 fe7a 	bl	8000b88 <__aeabi_d2iz>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d051      	beq.n	800ef3c <__kernel_sin+0xd4>
 800ee98:	4622      	mov	r2, r4
 800ee9a:	462b      	mov	r3, r5
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	4629      	mov	r1, r5
 800eea0:	f7f1 fbc2 	bl	8000628 <__aeabi_dmul>
 800eea4:	4682      	mov	sl, r0
 800eea6:	468b      	mov	fp, r1
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4620      	mov	r0, r4
 800eeae:	4629      	mov	r1, r5
 800eeb0:	f7f1 fbba 	bl	8000628 <__aeabi_dmul>
 800eeb4:	a341      	add	r3, pc, #260	; (adr r3, 800efbc <__kernel_sin+0x154>)
 800eeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeba:	4680      	mov	r8, r0
 800eebc:	4689      	mov	r9, r1
 800eebe:	4650      	mov	r0, sl
 800eec0:	4659      	mov	r1, fp
 800eec2:	f7f1 fbb1 	bl	8000628 <__aeabi_dmul>
 800eec6:	a33f      	add	r3, pc, #252	; (adr r3, 800efc4 <__kernel_sin+0x15c>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	f7f1 f9f4 	bl	80002b8 <__aeabi_dsub>
 800eed0:	4652      	mov	r2, sl
 800eed2:	465b      	mov	r3, fp
 800eed4:	f7f1 fba8 	bl	8000628 <__aeabi_dmul>
 800eed8:	a33c      	add	r3, pc, #240	; (adr r3, 800efcc <__kernel_sin+0x164>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	f7f1 f9ed 	bl	80002bc <__adddf3>
 800eee2:	4652      	mov	r2, sl
 800eee4:	465b      	mov	r3, fp
 800eee6:	f7f1 fb9f 	bl	8000628 <__aeabi_dmul>
 800eeea:	a33a      	add	r3, pc, #232	; (adr r3, 800efd4 <__kernel_sin+0x16c>)
 800eeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef0:	f7f1 f9e2 	bl	80002b8 <__aeabi_dsub>
 800eef4:	4652      	mov	r2, sl
 800eef6:	465b      	mov	r3, fp
 800eef8:	f7f1 fb96 	bl	8000628 <__aeabi_dmul>
 800eefc:	a337      	add	r3, pc, #220	; (adr r3, 800efdc <__kernel_sin+0x174>)
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	f7f1 f9db 	bl	80002bc <__adddf3>
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	4606      	mov	r6, r0
 800ef0a:	460f      	mov	r7, r1
 800ef0c:	b9eb      	cbnz	r3, 800ef4a <__kernel_sin+0xe2>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	460b      	mov	r3, r1
 800ef12:	4650      	mov	r0, sl
 800ef14:	4659      	mov	r1, fp
 800ef16:	f7f1 fb87 	bl	8000628 <__aeabi_dmul>
 800ef1a:	a325      	add	r3, pc, #148	; (adr r3, 800efb0 <__kernel_sin+0x148>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	f7f1 f9ca 	bl	80002b8 <__aeabi_dsub>
 800ef24:	4642      	mov	r2, r8
 800ef26:	464b      	mov	r3, r9
 800ef28:	f7f1 fb7e 	bl	8000628 <__aeabi_dmul>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4620      	mov	r0, r4
 800ef32:	4629      	mov	r1, r5
 800ef34:	f7f1 f9c2 	bl	80002bc <__adddf3>
 800ef38:	4604      	mov	r4, r0
 800ef3a:	460d      	mov	r5, r1
 800ef3c:	ec45 4b10 	vmov	d0, r4, r5
 800ef40:	b003      	add	sp, #12
 800ef42:	ecbd 8b04 	vpop	{d8-d9}
 800ef46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4a:	4b1b      	ldr	r3, [pc, #108]	; (800efb8 <__kernel_sin+0x150>)
 800ef4c:	ec51 0b18 	vmov	r0, r1, d8
 800ef50:	2200      	movs	r2, #0
 800ef52:	f7f1 fb69 	bl	8000628 <__aeabi_dmul>
 800ef56:	4632      	mov	r2, r6
 800ef58:	ec41 0b19 	vmov	d9, r0, r1
 800ef5c:	463b      	mov	r3, r7
 800ef5e:	4640      	mov	r0, r8
 800ef60:	4649      	mov	r1, r9
 800ef62:	f7f1 fb61 	bl	8000628 <__aeabi_dmul>
 800ef66:	4602      	mov	r2, r0
 800ef68:	460b      	mov	r3, r1
 800ef6a:	ec51 0b19 	vmov	r0, r1, d9
 800ef6e:	f7f1 f9a3 	bl	80002b8 <__aeabi_dsub>
 800ef72:	4652      	mov	r2, sl
 800ef74:	465b      	mov	r3, fp
 800ef76:	f7f1 fb57 	bl	8000628 <__aeabi_dmul>
 800ef7a:	ec53 2b18 	vmov	r2, r3, d8
 800ef7e:	f7f1 f99b 	bl	80002b8 <__aeabi_dsub>
 800ef82:	a30b      	add	r3, pc, #44	; (adr r3, 800efb0 <__kernel_sin+0x148>)
 800ef84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef88:	4606      	mov	r6, r0
 800ef8a:	460f      	mov	r7, r1
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	4649      	mov	r1, r9
 800ef90:	f7f1 fb4a 	bl	8000628 <__aeabi_dmul>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	4630      	mov	r0, r6
 800ef9a:	4639      	mov	r1, r7
 800ef9c:	f7f1 f98e 	bl	80002bc <__adddf3>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4620      	mov	r0, r4
 800efa6:	4629      	mov	r1, r5
 800efa8:	f7f1 f986 	bl	80002b8 <__aeabi_dsub>
 800efac:	e7c4      	b.n	800ef38 <__kernel_sin+0xd0>
 800efae:	bf00      	nop
 800efb0:	55555549 	.word	0x55555549
 800efb4:	3fc55555 	.word	0x3fc55555
 800efb8:	3fe00000 	.word	0x3fe00000
 800efbc:	5acfd57c 	.word	0x5acfd57c
 800efc0:	3de5d93a 	.word	0x3de5d93a
 800efc4:	8a2b9ceb 	.word	0x8a2b9ceb
 800efc8:	3e5ae5e6 	.word	0x3e5ae5e6
 800efcc:	57b1fe7d 	.word	0x57b1fe7d
 800efd0:	3ec71de3 	.word	0x3ec71de3
 800efd4:	19c161d5 	.word	0x19c161d5
 800efd8:	3f2a01a0 	.word	0x3f2a01a0
 800efdc:	1110f8a6 	.word	0x1110f8a6
 800efe0:	3f811111 	.word	0x3f811111

0800efe4 <with_errno>:
 800efe4:	b570      	push	{r4, r5, r6, lr}
 800efe6:	4604      	mov	r4, r0
 800efe8:	460d      	mov	r5, r1
 800efea:	4616      	mov	r6, r2
 800efec:	f7fb f9ea 	bl	800a3c4 <__errno>
 800eff0:	4629      	mov	r1, r5
 800eff2:	6006      	str	r6, [r0, #0]
 800eff4:	4620      	mov	r0, r4
 800eff6:	bd70      	pop	{r4, r5, r6, pc}

0800eff8 <xflow>:
 800eff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800effa:	4614      	mov	r4, r2
 800effc:	461d      	mov	r5, r3
 800effe:	b108      	cbz	r0, 800f004 <xflow+0xc>
 800f000:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f004:	e9cd 2300 	strd	r2, r3, [sp]
 800f008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f00c:	4620      	mov	r0, r4
 800f00e:	4629      	mov	r1, r5
 800f010:	f7f1 fb0a 	bl	8000628 <__aeabi_dmul>
 800f014:	2222      	movs	r2, #34	; 0x22
 800f016:	b003      	add	sp, #12
 800f018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f01c:	f7ff bfe2 	b.w	800efe4 <with_errno>

0800f020 <__math_uflow>:
 800f020:	b508      	push	{r3, lr}
 800f022:	2200      	movs	r2, #0
 800f024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f028:	f7ff ffe6 	bl	800eff8 <xflow>
 800f02c:	ec41 0b10 	vmov	d0, r0, r1
 800f030:	bd08      	pop	{r3, pc}

0800f032 <__math_oflow>:
 800f032:	b508      	push	{r3, lr}
 800f034:	2200      	movs	r2, #0
 800f036:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f03a:	f7ff ffdd 	bl	800eff8 <xflow>
 800f03e:	ec41 0b10 	vmov	d0, r0, r1
 800f042:	bd08      	pop	{r3, pc}
 800f044:	0000      	movs	r0, r0
	...

0800f048 <atan>:
 800f048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04c:	ec55 4b10 	vmov	r4, r5, d0
 800f050:	4bc3      	ldr	r3, [pc, #780]	; (800f360 <atan+0x318>)
 800f052:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f056:	429e      	cmp	r6, r3
 800f058:	46ab      	mov	fp, r5
 800f05a:	dd18      	ble.n	800f08e <atan+0x46>
 800f05c:	4bc1      	ldr	r3, [pc, #772]	; (800f364 <atan+0x31c>)
 800f05e:	429e      	cmp	r6, r3
 800f060:	dc01      	bgt.n	800f066 <atan+0x1e>
 800f062:	d109      	bne.n	800f078 <atan+0x30>
 800f064:	b144      	cbz	r4, 800f078 <atan+0x30>
 800f066:	4622      	mov	r2, r4
 800f068:	462b      	mov	r3, r5
 800f06a:	4620      	mov	r0, r4
 800f06c:	4629      	mov	r1, r5
 800f06e:	f7f1 f925 	bl	80002bc <__adddf3>
 800f072:	4604      	mov	r4, r0
 800f074:	460d      	mov	r5, r1
 800f076:	e006      	b.n	800f086 <atan+0x3e>
 800f078:	f1bb 0f00 	cmp.w	fp, #0
 800f07c:	f300 8131 	bgt.w	800f2e2 <atan+0x29a>
 800f080:	a59b      	add	r5, pc, #620	; (adr r5, 800f2f0 <atan+0x2a8>)
 800f082:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f086:	ec45 4b10 	vmov	d0, r4, r5
 800f08a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	4bb6      	ldr	r3, [pc, #728]	; (800f368 <atan+0x320>)
 800f090:	429e      	cmp	r6, r3
 800f092:	dc14      	bgt.n	800f0be <atan+0x76>
 800f094:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f098:	429e      	cmp	r6, r3
 800f09a:	dc0d      	bgt.n	800f0b8 <atan+0x70>
 800f09c:	a396      	add	r3, pc, #600	; (adr r3, 800f2f8 <atan+0x2b0>)
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	ee10 0a10 	vmov	r0, s0
 800f0a6:	4629      	mov	r1, r5
 800f0a8:	f7f1 f908 	bl	80002bc <__adddf3>
 800f0ac:	4baf      	ldr	r3, [pc, #700]	; (800f36c <atan+0x324>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f7f1 fd4a 	bl	8000b48 <__aeabi_dcmpgt>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d1e6      	bne.n	800f086 <atan+0x3e>
 800f0b8:	f04f 3aff 	mov.w	sl, #4294967295
 800f0bc:	e02b      	b.n	800f116 <atan+0xce>
 800f0be:	f000 f963 	bl	800f388 <fabs>
 800f0c2:	4bab      	ldr	r3, [pc, #684]	; (800f370 <atan+0x328>)
 800f0c4:	429e      	cmp	r6, r3
 800f0c6:	ec55 4b10 	vmov	r4, r5, d0
 800f0ca:	f300 80bf 	bgt.w	800f24c <atan+0x204>
 800f0ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f0d2:	429e      	cmp	r6, r3
 800f0d4:	f300 80a0 	bgt.w	800f218 <atan+0x1d0>
 800f0d8:	ee10 2a10 	vmov	r2, s0
 800f0dc:	ee10 0a10 	vmov	r0, s0
 800f0e0:	462b      	mov	r3, r5
 800f0e2:	4629      	mov	r1, r5
 800f0e4:	f7f1 f8ea 	bl	80002bc <__adddf3>
 800f0e8:	4ba0      	ldr	r3, [pc, #640]	; (800f36c <atan+0x324>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f7f1 f8e4 	bl	80002b8 <__aeabi_dsub>
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	460f      	mov	r7, r1
 800f0f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4629      	mov	r1, r5
 800f0fe:	f7f1 f8dd 	bl	80002bc <__adddf3>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4630      	mov	r0, r6
 800f108:	4639      	mov	r1, r7
 800f10a:	f7f1 fbb7 	bl	800087c <__aeabi_ddiv>
 800f10e:	f04f 0a00 	mov.w	sl, #0
 800f112:	4604      	mov	r4, r0
 800f114:	460d      	mov	r5, r1
 800f116:	4622      	mov	r2, r4
 800f118:	462b      	mov	r3, r5
 800f11a:	4620      	mov	r0, r4
 800f11c:	4629      	mov	r1, r5
 800f11e:	f7f1 fa83 	bl	8000628 <__aeabi_dmul>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	4680      	mov	r8, r0
 800f128:	4689      	mov	r9, r1
 800f12a:	f7f1 fa7d 	bl	8000628 <__aeabi_dmul>
 800f12e:	a374      	add	r3, pc, #464	; (adr r3, 800f300 <atan+0x2b8>)
 800f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f134:	4606      	mov	r6, r0
 800f136:	460f      	mov	r7, r1
 800f138:	f7f1 fa76 	bl	8000628 <__aeabi_dmul>
 800f13c:	a372      	add	r3, pc, #456	; (adr r3, 800f308 <atan+0x2c0>)
 800f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f142:	f7f1 f8bb 	bl	80002bc <__adddf3>
 800f146:	4632      	mov	r2, r6
 800f148:	463b      	mov	r3, r7
 800f14a:	f7f1 fa6d 	bl	8000628 <__aeabi_dmul>
 800f14e:	a370      	add	r3, pc, #448	; (adr r3, 800f310 <atan+0x2c8>)
 800f150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f154:	f7f1 f8b2 	bl	80002bc <__adddf3>
 800f158:	4632      	mov	r2, r6
 800f15a:	463b      	mov	r3, r7
 800f15c:	f7f1 fa64 	bl	8000628 <__aeabi_dmul>
 800f160:	a36d      	add	r3, pc, #436	; (adr r3, 800f318 <atan+0x2d0>)
 800f162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f166:	f7f1 f8a9 	bl	80002bc <__adddf3>
 800f16a:	4632      	mov	r2, r6
 800f16c:	463b      	mov	r3, r7
 800f16e:	f7f1 fa5b 	bl	8000628 <__aeabi_dmul>
 800f172:	a36b      	add	r3, pc, #428	; (adr r3, 800f320 <atan+0x2d8>)
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f7f1 f8a0 	bl	80002bc <__adddf3>
 800f17c:	4632      	mov	r2, r6
 800f17e:	463b      	mov	r3, r7
 800f180:	f7f1 fa52 	bl	8000628 <__aeabi_dmul>
 800f184:	a368      	add	r3, pc, #416	; (adr r3, 800f328 <atan+0x2e0>)
 800f186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18a:	f7f1 f897 	bl	80002bc <__adddf3>
 800f18e:	4642      	mov	r2, r8
 800f190:	464b      	mov	r3, r9
 800f192:	f7f1 fa49 	bl	8000628 <__aeabi_dmul>
 800f196:	a366      	add	r3, pc, #408	; (adr r3, 800f330 <atan+0x2e8>)
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	4680      	mov	r8, r0
 800f19e:	4689      	mov	r9, r1
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	f7f1 fa40 	bl	8000628 <__aeabi_dmul>
 800f1a8:	a363      	add	r3, pc, #396	; (adr r3, 800f338 <atan+0x2f0>)
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	f7f1 f883 	bl	80002b8 <__aeabi_dsub>
 800f1b2:	4632      	mov	r2, r6
 800f1b4:	463b      	mov	r3, r7
 800f1b6:	f7f1 fa37 	bl	8000628 <__aeabi_dmul>
 800f1ba:	a361      	add	r3, pc, #388	; (adr r3, 800f340 <atan+0x2f8>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f7f1 f87a 	bl	80002b8 <__aeabi_dsub>
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	f7f1 fa2e 	bl	8000628 <__aeabi_dmul>
 800f1cc:	a35e      	add	r3, pc, #376	; (adr r3, 800f348 <atan+0x300>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f1 f871 	bl	80002b8 <__aeabi_dsub>
 800f1d6:	4632      	mov	r2, r6
 800f1d8:	463b      	mov	r3, r7
 800f1da:	f7f1 fa25 	bl	8000628 <__aeabi_dmul>
 800f1de:	a35c      	add	r3, pc, #368	; (adr r3, 800f350 <atan+0x308>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 f868 	bl	80002b8 <__aeabi_dsub>
 800f1e8:	4632      	mov	r2, r6
 800f1ea:	463b      	mov	r3, r7
 800f1ec:	f7f1 fa1c 	bl	8000628 <__aeabi_dmul>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	4649      	mov	r1, r9
 800f1f8:	f7f1 f860 	bl	80002bc <__adddf3>
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	462b      	mov	r3, r5
 800f200:	f7f1 fa12 	bl	8000628 <__aeabi_dmul>
 800f204:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f208:	4602      	mov	r2, r0
 800f20a:	460b      	mov	r3, r1
 800f20c:	d14b      	bne.n	800f2a6 <atan+0x25e>
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	f7f1 f851 	bl	80002b8 <__aeabi_dsub>
 800f216:	e72c      	b.n	800f072 <atan+0x2a>
 800f218:	ee10 0a10 	vmov	r0, s0
 800f21c:	4b53      	ldr	r3, [pc, #332]	; (800f36c <atan+0x324>)
 800f21e:	2200      	movs	r2, #0
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 f849 	bl	80002b8 <__aeabi_dsub>
 800f226:	4b51      	ldr	r3, [pc, #324]	; (800f36c <atan+0x324>)
 800f228:	4606      	mov	r6, r0
 800f22a:	460f      	mov	r7, r1
 800f22c:	2200      	movs	r2, #0
 800f22e:	4620      	mov	r0, r4
 800f230:	4629      	mov	r1, r5
 800f232:	f7f1 f843 	bl	80002bc <__adddf3>
 800f236:	4602      	mov	r2, r0
 800f238:	460b      	mov	r3, r1
 800f23a:	4630      	mov	r0, r6
 800f23c:	4639      	mov	r1, r7
 800f23e:	f7f1 fb1d 	bl	800087c <__aeabi_ddiv>
 800f242:	f04f 0a01 	mov.w	sl, #1
 800f246:	4604      	mov	r4, r0
 800f248:	460d      	mov	r5, r1
 800f24a:	e764      	b.n	800f116 <atan+0xce>
 800f24c:	4b49      	ldr	r3, [pc, #292]	; (800f374 <atan+0x32c>)
 800f24e:	429e      	cmp	r6, r3
 800f250:	da1d      	bge.n	800f28e <atan+0x246>
 800f252:	ee10 0a10 	vmov	r0, s0
 800f256:	4b48      	ldr	r3, [pc, #288]	; (800f378 <atan+0x330>)
 800f258:	2200      	movs	r2, #0
 800f25a:	4629      	mov	r1, r5
 800f25c:	f7f1 f82c 	bl	80002b8 <__aeabi_dsub>
 800f260:	4b45      	ldr	r3, [pc, #276]	; (800f378 <atan+0x330>)
 800f262:	4606      	mov	r6, r0
 800f264:	460f      	mov	r7, r1
 800f266:	2200      	movs	r2, #0
 800f268:	4620      	mov	r0, r4
 800f26a:	4629      	mov	r1, r5
 800f26c:	f7f1 f9dc 	bl	8000628 <__aeabi_dmul>
 800f270:	4b3e      	ldr	r3, [pc, #248]	; (800f36c <atan+0x324>)
 800f272:	2200      	movs	r2, #0
 800f274:	f7f1 f822 	bl	80002bc <__adddf3>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	f7f1 fafc 	bl	800087c <__aeabi_ddiv>
 800f284:	f04f 0a02 	mov.w	sl, #2
 800f288:	4604      	mov	r4, r0
 800f28a:	460d      	mov	r5, r1
 800f28c:	e743      	b.n	800f116 <atan+0xce>
 800f28e:	462b      	mov	r3, r5
 800f290:	ee10 2a10 	vmov	r2, s0
 800f294:	4939      	ldr	r1, [pc, #228]	; (800f37c <atan+0x334>)
 800f296:	2000      	movs	r0, #0
 800f298:	f7f1 faf0 	bl	800087c <__aeabi_ddiv>
 800f29c:	f04f 0a03 	mov.w	sl, #3
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	460d      	mov	r5, r1
 800f2a4:	e737      	b.n	800f116 <atan+0xce>
 800f2a6:	4b36      	ldr	r3, [pc, #216]	; (800f380 <atan+0x338>)
 800f2a8:	4e36      	ldr	r6, [pc, #216]	; (800f384 <atan+0x33c>)
 800f2aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f2ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f2b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800f2b6:	f7f0 ffff 	bl	80002b8 <__aeabi_dsub>
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	462b      	mov	r3, r5
 800f2be:	f7f0 fffb 	bl	80002b8 <__aeabi_dsub>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f2ca:	f7f0 fff5 	bl	80002b8 <__aeabi_dsub>
 800f2ce:	f1bb 0f00 	cmp.w	fp, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	f6bf aed6 	bge.w	800f086 <atan+0x3e>
 800f2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2de:	461d      	mov	r5, r3
 800f2e0:	e6d1      	b.n	800f086 <atan+0x3e>
 800f2e2:	a51d      	add	r5, pc, #116	; (adr r5, 800f358 <atan+0x310>)
 800f2e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f2e8:	e6cd      	b.n	800f086 <atan+0x3e>
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w
 800f2f0:	54442d18 	.word	0x54442d18
 800f2f4:	bff921fb 	.word	0xbff921fb
 800f2f8:	8800759c 	.word	0x8800759c
 800f2fc:	7e37e43c 	.word	0x7e37e43c
 800f300:	e322da11 	.word	0xe322da11
 800f304:	3f90ad3a 	.word	0x3f90ad3a
 800f308:	24760deb 	.word	0x24760deb
 800f30c:	3fa97b4b 	.word	0x3fa97b4b
 800f310:	a0d03d51 	.word	0xa0d03d51
 800f314:	3fb10d66 	.word	0x3fb10d66
 800f318:	c54c206e 	.word	0xc54c206e
 800f31c:	3fb745cd 	.word	0x3fb745cd
 800f320:	920083ff 	.word	0x920083ff
 800f324:	3fc24924 	.word	0x3fc24924
 800f328:	5555550d 	.word	0x5555550d
 800f32c:	3fd55555 	.word	0x3fd55555
 800f330:	2c6a6c2f 	.word	0x2c6a6c2f
 800f334:	bfa2b444 	.word	0xbfa2b444
 800f338:	52defd9a 	.word	0x52defd9a
 800f33c:	3fadde2d 	.word	0x3fadde2d
 800f340:	af749a6d 	.word	0xaf749a6d
 800f344:	3fb3b0f2 	.word	0x3fb3b0f2
 800f348:	fe231671 	.word	0xfe231671
 800f34c:	3fbc71c6 	.word	0x3fbc71c6
 800f350:	9998ebc4 	.word	0x9998ebc4
 800f354:	3fc99999 	.word	0x3fc99999
 800f358:	54442d18 	.word	0x54442d18
 800f35c:	3ff921fb 	.word	0x3ff921fb
 800f360:	440fffff 	.word	0x440fffff
 800f364:	7ff00000 	.word	0x7ff00000
 800f368:	3fdbffff 	.word	0x3fdbffff
 800f36c:	3ff00000 	.word	0x3ff00000
 800f370:	3ff2ffff 	.word	0x3ff2ffff
 800f374:	40038000 	.word	0x40038000
 800f378:	3ff80000 	.word	0x3ff80000
 800f37c:	bff00000 	.word	0xbff00000
 800f380:	0800fe48 	.word	0x0800fe48
 800f384:	0800fe28 	.word	0x0800fe28

0800f388 <fabs>:
 800f388:	ec51 0b10 	vmov	r0, r1, d0
 800f38c:	ee10 2a10 	vmov	r2, s0
 800f390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f394:	ec43 2b10 	vmov	d0, r2, r3
 800f398:	4770      	bx	lr

0800f39a <finite>:
 800f39a:	b082      	sub	sp, #8
 800f39c:	ed8d 0b00 	vstr	d0, [sp]
 800f3a0:	9801      	ldr	r0, [sp, #4]
 800f3a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f3a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f3aa:	0fc0      	lsrs	r0, r0, #31
 800f3ac:	b002      	add	sp, #8
 800f3ae:	4770      	bx	lr

0800f3b0 <floor>:
 800f3b0:	ec51 0b10 	vmov	r0, r1, d0
 800f3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f3bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f3c0:	2e13      	cmp	r6, #19
 800f3c2:	ee10 5a10 	vmov	r5, s0
 800f3c6:	ee10 8a10 	vmov	r8, s0
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	dc32      	bgt.n	800f434 <floor+0x84>
 800f3ce:	2e00      	cmp	r6, #0
 800f3d0:	da14      	bge.n	800f3fc <floor+0x4c>
 800f3d2:	a333      	add	r3, pc, #204	; (adr r3, 800f4a0 <floor+0xf0>)
 800f3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d8:	f7f0 ff70 	bl	80002bc <__adddf3>
 800f3dc:	2200      	movs	r2, #0
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f7f1 fbb2 	bl	8000b48 <__aeabi_dcmpgt>
 800f3e4:	b138      	cbz	r0, 800f3f6 <floor+0x46>
 800f3e6:	2c00      	cmp	r4, #0
 800f3e8:	da57      	bge.n	800f49a <floor+0xea>
 800f3ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f3ee:	431d      	orrs	r5, r3
 800f3f0:	d001      	beq.n	800f3f6 <floor+0x46>
 800f3f2:	4c2d      	ldr	r4, [pc, #180]	; (800f4a8 <floor+0xf8>)
 800f3f4:	2500      	movs	r5, #0
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	e025      	b.n	800f448 <floor+0x98>
 800f3fc:	4f2b      	ldr	r7, [pc, #172]	; (800f4ac <floor+0xfc>)
 800f3fe:	4137      	asrs	r7, r6
 800f400:	ea01 0307 	and.w	r3, r1, r7
 800f404:	4303      	orrs	r3, r0
 800f406:	d01f      	beq.n	800f448 <floor+0x98>
 800f408:	a325      	add	r3, pc, #148	; (adr r3, 800f4a0 <floor+0xf0>)
 800f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40e:	f7f0 ff55 	bl	80002bc <__adddf3>
 800f412:	2200      	movs	r2, #0
 800f414:	2300      	movs	r3, #0
 800f416:	f7f1 fb97 	bl	8000b48 <__aeabi_dcmpgt>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d0eb      	beq.n	800f3f6 <floor+0x46>
 800f41e:	2c00      	cmp	r4, #0
 800f420:	bfbe      	ittt	lt
 800f422:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f426:	fa43 f606 	asrlt.w	r6, r3, r6
 800f42a:	19a4      	addlt	r4, r4, r6
 800f42c:	ea24 0407 	bic.w	r4, r4, r7
 800f430:	2500      	movs	r5, #0
 800f432:	e7e0      	b.n	800f3f6 <floor+0x46>
 800f434:	2e33      	cmp	r6, #51	; 0x33
 800f436:	dd0b      	ble.n	800f450 <floor+0xa0>
 800f438:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f43c:	d104      	bne.n	800f448 <floor+0x98>
 800f43e:	ee10 2a10 	vmov	r2, s0
 800f442:	460b      	mov	r3, r1
 800f444:	f7f0 ff3a 	bl	80002bc <__adddf3>
 800f448:	ec41 0b10 	vmov	d0, r0, r1
 800f44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f450:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f454:	f04f 33ff 	mov.w	r3, #4294967295
 800f458:	fa23 f707 	lsr.w	r7, r3, r7
 800f45c:	4207      	tst	r7, r0
 800f45e:	d0f3      	beq.n	800f448 <floor+0x98>
 800f460:	a30f      	add	r3, pc, #60	; (adr r3, 800f4a0 <floor+0xf0>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	f7f0 ff29 	bl	80002bc <__adddf3>
 800f46a:	2200      	movs	r2, #0
 800f46c:	2300      	movs	r3, #0
 800f46e:	f7f1 fb6b 	bl	8000b48 <__aeabi_dcmpgt>
 800f472:	2800      	cmp	r0, #0
 800f474:	d0bf      	beq.n	800f3f6 <floor+0x46>
 800f476:	2c00      	cmp	r4, #0
 800f478:	da02      	bge.n	800f480 <floor+0xd0>
 800f47a:	2e14      	cmp	r6, #20
 800f47c:	d103      	bne.n	800f486 <floor+0xd6>
 800f47e:	3401      	adds	r4, #1
 800f480:	ea25 0507 	bic.w	r5, r5, r7
 800f484:	e7b7      	b.n	800f3f6 <floor+0x46>
 800f486:	2301      	movs	r3, #1
 800f488:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f48c:	fa03 f606 	lsl.w	r6, r3, r6
 800f490:	4435      	add	r5, r6
 800f492:	4545      	cmp	r5, r8
 800f494:	bf38      	it	cc
 800f496:	18e4      	addcc	r4, r4, r3
 800f498:	e7f2      	b.n	800f480 <floor+0xd0>
 800f49a:	2500      	movs	r5, #0
 800f49c:	462c      	mov	r4, r5
 800f49e:	e7aa      	b.n	800f3f6 <floor+0x46>
 800f4a0:	8800759c 	.word	0x8800759c
 800f4a4:	7e37e43c 	.word	0x7e37e43c
 800f4a8:	bff00000 	.word	0xbff00000
 800f4ac:	000fffff 	.word	0x000fffff

0800f4b0 <scalbn>:
 800f4b0:	b570      	push	{r4, r5, r6, lr}
 800f4b2:	ec55 4b10 	vmov	r4, r5, d0
 800f4b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f4ba:	4606      	mov	r6, r0
 800f4bc:	462b      	mov	r3, r5
 800f4be:	b99a      	cbnz	r2, 800f4e8 <scalbn+0x38>
 800f4c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f4c4:	4323      	orrs	r3, r4
 800f4c6:	d036      	beq.n	800f536 <scalbn+0x86>
 800f4c8:	4b39      	ldr	r3, [pc, #228]	; (800f5b0 <scalbn+0x100>)
 800f4ca:	4629      	mov	r1, r5
 800f4cc:	ee10 0a10 	vmov	r0, s0
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f7f1 f8a9 	bl	8000628 <__aeabi_dmul>
 800f4d6:	4b37      	ldr	r3, [pc, #220]	; (800f5b4 <scalbn+0x104>)
 800f4d8:	429e      	cmp	r6, r3
 800f4da:	4604      	mov	r4, r0
 800f4dc:	460d      	mov	r5, r1
 800f4de:	da10      	bge.n	800f502 <scalbn+0x52>
 800f4e0:	a32b      	add	r3, pc, #172	; (adr r3, 800f590 <scalbn+0xe0>)
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	e03a      	b.n	800f55e <scalbn+0xae>
 800f4e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f4ec:	428a      	cmp	r2, r1
 800f4ee:	d10c      	bne.n	800f50a <scalbn+0x5a>
 800f4f0:	ee10 2a10 	vmov	r2, s0
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	f7f0 fee0 	bl	80002bc <__adddf3>
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	460d      	mov	r5, r1
 800f500:	e019      	b.n	800f536 <scalbn+0x86>
 800f502:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f506:	460b      	mov	r3, r1
 800f508:	3a36      	subs	r2, #54	; 0x36
 800f50a:	4432      	add	r2, r6
 800f50c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f510:	428a      	cmp	r2, r1
 800f512:	dd08      	ble.n	800f526 <scalbn+0x76>
 800f514:	2d00      	cmp	r5, #0
 800f516:	a120      	add	r1, pc, #128	; (adr r1, 800f598 <scalbn+0xe8>)
 800f518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f51c:	da1c      	bge.n	800f558 <scalbn+0xa8>
 800f51e:	a120      	add	r1, pc, #128	; (adr r1, 800f5a0 <scalbn+0xf0>)
 800f520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f524:	e018      	b.n	800f558 <scalbn+0xa8>
 800f526:	2a00      	cmp	r2, #0
 800f528:	dd08      	ble.n	800f53c <scalbn+0x8c>
 800f52a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f52e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f532:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f536:	ec45 4b10 	vmov	d0, r4, r5
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f540:	da19      	bge.n	800f576 <scalbn+0xc6>
 800f542:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f546:	429e      	cmp	r6, r3
 800f548:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f54c:	dd0a      	ble.n	800f564 <scalbn+0xb4>
 800f54e:	a112      	add	r1, pc, #72	; (adr r1, 800f598 <scalbn+0xe8>)
 800f550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1e2      	bne.n	800f51e <scalbn+0x6e>
 800f558:	a30f      	add	r3, pc, #60	; (adr r3, 800f598 <scalbn+0xe8>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	f7f1 f863 	bl	8000628 <__aeabi_dmul>
 800f562:	e7cb      	b.n	800f4fc <scalbn+0x4c>
 800f564:	a10a      	add	r1, pc, #40	; (adr r1, 800f590 <scalbn+0xe0>)
 800f566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0b8      	beq.n	800f4e0 <scalbn+0x30>
 800f56e:	a10e      	add	r1, pc, #56	; (adr r1, 800f5a8 <scalbn+0xf8>)
 800f570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f574:	e7b4      	b.n	800f4e0 <scalbn+0x30>
 800f576:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f57a:	3236      	adds	r2, #54	; 0x36
 800f57c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f580:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f584:	4620      	mov	r0, r4
 800f586:	4b0c      	ldr	r3, [pc, #48]	; (800f5b8 <scalbn+0x108>)
 800f588:	2200      	movs	r2, #0
 800f58a:	e7e8      	b.n	800f55e <scalbn+0xae>
 800f58c:	f3af 8000 	nop.w
 800f590:	c2f8f359 	.word	0xc2f8f359
 800f594:	01a56e1f 	.word	0x01a56e1f
 800f598:	8800759c 	.word	0x8800759c
 800f59c:	7e37e43c 	.word	0x7e37e43c
 800f5a0:	8800759c 	.word	0x8800759c
 800f5a4:	fe37e43c 	.word	0xfe37e43c
 800f5a8:	c2f8f359 	.word	0xc2f8f359
 800f5ac:	81a56e1f 	.word	0x81a56e1f
 800f5b0:	43500000 	.word	0x43500000
 800f5b4:	ffff3cb0 	.word	0xffff3cb0
 800f5b8:	3c900000 	.word	0x3c900000

0800f5bc <_sbrk>:
 800f5bc:	4a04      	ldr	r2, [pc, #16]	; (800f5d0 <_sbrk+0x14>)
 800f5be:	6811      	ldr	r1, [r2, #0]
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	b909      	cbnz	r1, 800f5c8 <_sbrk+0xc>
 800f5c4:	4903      	ldr	r1, [pc, #12]	; (800f5d4 <_sbrk+0x18>)
 800f5c6:	6011      	str	r1, [r2, #0]
 800f5c8:	6810      	ldr	r0, [r2, #0]
 800f5ca:	4403      	add	r3, r0
 800f5cc:	6013      	str	r3, [r2, #0]
 800f5ce:	4770      	bx	lr
 800f5d0:	200133dc 	.word	0x200133dc
 800f5d4:	200133e0 	.word	0x200133e0

0800f5d8 <_init>:
 800f5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5da:	bf00      	nop
 800f5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5de:	bc08      	pop	{r3}
 800f5e0:	469e      	mov	lr, r3
 800f5e2:	4770      	bx	lr

0800f5e4 <_fini>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	bf00      	nop
 800f5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ea:	bc08      	pop	{r3}
 800f5ec:	469e      	mov	lr, r3
 800f5ee:	4770      	bx	lr
