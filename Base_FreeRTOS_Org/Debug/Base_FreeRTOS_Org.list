
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f518  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800f6b8  0800f6b8  0001f6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff58  0800ff58  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ff58  0800ff58  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ff58  0800ff58  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff58  0800ff58  0001ff58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff5c  0800ff5c  0001ff5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ff60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000131f8  200001f8  08010154  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200133f0  08010154  000233f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5ef  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251a  00000000  00000000  0002d813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001273d  00000000  00000000  00031438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e557  00000000  00000000  00043b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062531  00000000  00000000  000520cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b45fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  000b4650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6a0 	.word	0x0800f6a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800f6a0 	.word	0x0800f6a0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08d      	sub	sp, #52	; 0x34
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b97      	ldr	r3, [pc, #604]	; (8000f1c <main+0x264>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a95      	ldr	r2, [pc, #596]	; (8000f1c <main+0x264>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b94      	ldr	r3, [pc, #592]	; (8000f20 <main+0x268>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a93      	ldr	r2, [pc, #588]	; (8000f20 <main+0x268>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	/* Primero configuramos */
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();

   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f008 fabe 	bl	800925c <RCC_enableMaxFrequencies>
	inSystem ();
 8000ce0:	f000 f95a 	bl	8000f98 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	488f      	ldr	r0, [pc, #572]	; (8000f24 <main+0x26c>)
 8000ce8:	f000 ffac 	bl	8001c44 <calibracionGyros>
 8000cec:	ee10 3a10 	vmov	r3, s0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc41 	bl	8000578 <__aeabi_f2d>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	498b      	ldr	r1, [pc, #556]	; (8000f28 <main+0x270>)
 8000cfc:	e9c1 2300 	strd	r2, r3, [r1]


	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000d00:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <main+0x274>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2303      	movs	r3, #3
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	22c8      	movs	r2, #200	; 0xc8
 8000d0c:	4988      	ldr	r1, [pc, #544]	; (8000f30 <main+0x278>)
 8000d0e:	4889      	ldr	r0, [pc, #548]	; (8000f34 <main+0x27c>)
 8000d10:	f003 f98c 	bl	800402c <xTaskCreate>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a88      	ldr	r2, [pc, #544]	; (8000f38 <main+0x280>)
 8000d18:	6013      	str	r3, [r2, #0]
					NULL,                   // parametro pasado a la tarea
					3,                      // Prioridad de la tarea
					&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d1a:	4b87      	ldr	r3, [pc, #540]	; (8000f38 <main+0x280>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00a      	beq.n	8000d38 <main+0x80>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d34:	bf00      	nop
 8000d36:	e7fe      	b.n	8000d36 <main+0x7e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d38:	4b80      	ldr	r3, [pc, #512]	; (8000f3c <main+0x284>)
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	22c8      	movs	r2, #200	; 0xc8
 8000d44:	497e      	ldr	r1, [pc, #504]	; (8000f40 <main+0x288>)
 8000d46:	487f      	ldr	r0, [pc, #508]	; (8000f44 <main+0x28c>)
 8000d48:	f003 f970 	bl	800402c <xTaskCreate>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a7a      	ldr	r2, [pc, #488]	; (8000f38 <main+0x280>)
 8000d50:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d52:	4b79      	ldr	r3, [pc, #484]	; (8000f38 <main+0x280>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00a      	beq.n	8000d70 <main+0xb8>
        __asm volatile
 8000d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d5e:	f383 8811 	msr	BASEPRI, r3
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	f3bf 8f4f 	dsb	sy
 8000d6a:	623b      	str	r3, [r7, #32]
    }
 8000d6c:	bf00      	nop
 8000d6e:	e7fe      	b.n	8000d6e <main+0xb6>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d70:	4b75      	ldr	r3, [pc, #468]	; (8000f48 <main+0x290>)
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2303      	movs	r3, #3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	22c8      	movs	r2, #200	; 0xc8
 8000d7c:	4973      	ldr	r1, [pc, #460]	; (8000f4c <main+0x294>)
 8000d7e:	4874      	ldr	r0, [pc, #464]	; (8000f50 <main+0x298>)
 8000d80:	f003 f954 	bl	800402c <xTaskCreate>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4a6c      	ldr	r2, [pc, #432]	; (8000f38 <main+0x280>)
 8000d88:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <main+0x280>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <main+0xf0>
        __asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	61fb      	str	r3, [r7, #28]
    }
 8000da4:	bf00      	nop
 8000da6:	e7fe      	b.n	8000da6 <main+0xee>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000da8:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <main+0x29c>)
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2303      	movs	r3, #3
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	22c8      	movs	r2, #200	; 0xc8
 8000db4:	4968      	ldr	r1, [pc, #416]	; (8000f58 <main+0x2a0>)
 8000db6:	4869      	ldr	r0, [pc, #420]	; (8000f5c <main+0x2a4>)
 8000db8:	f003 f938 	bl	800402c <xTaskCreate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	; (8000f38 <main+0x280>)
 8000dc0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <main+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00a      	beq.n	8000de0 <main+0x128>
        __asm volatile
 8000dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dce:	f383 8811 	msr	BASEPRI, r3
 8000dd2:	f3bf 8f6f 	isb	sy
 8000dd6:	f3bf 8f4f 	dsb	sy
 8000dda:	61bb      	str	r3, [r7, #24]
    }
 8000ddc:	bf00      	nop
 8000dde:	e7fe      	b.n	8000dde <main+0x126>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000de0:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <main+0x2a8>)
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2303      	movs	r3, #3
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	22c8      	movs	r2, #200	; 0xc8
 8000dec:	495d      	ldr	r1, [pc, #372]	; (8000f64 <main+0x2ac>)
 8000dee:	485e      	ldr	r0, [pc, #376]	; (8000f68 <main+0x2b0>)
 8000df0:	f003 f91c 	bl	800402c <xTaskCreate>
 8000df4:	4603      	mov	r3, r0
 8000df6:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <main+0x280>)
 8000df8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <main+0x280>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d00a      	beq.n	8000e18 <main+0x160>
        __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	617b      	str	r3, [r7, #20]
    }
 8000e14:	bf00      	nop
 8000e16:	e7fe      	b.n	8000e16 <main+0x15e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000e18:	4b54      	ldr	r3, [pc, #336]	; (8000f6c <main+0x2b4>)
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	22c8      	movs	r2, #200	; 0xc8
 8000e24:	4952      	ldr	r1, [pc, #328]	; (8000f70 <main+0x2b8>)
 8000e26:	4853      	ldr	r0, [pc, #332]	; (8000f74 <main+0x2bc>)
 8000e28:	f003 f900 	bl	800402c <xTaskCreate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <main+0x280>)
 8000e30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e32:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <main+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d00a      	beq.n	8000e50 <main+0x198>
        __asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	613b      	str	r3, [r7, #16]
    }
 8000e4c:	bf00      	nop
 8000e4e:	e7fe      	b.n	8000e4e <main+0x196>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <main+0x2c0>)
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2303      	movs	r3, #3
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	22c8      	movs	r2, #200	; 0xc8
 8000e5c:	4947      	ldr	r1, [pc, #284]	; (8000f7c <main+0x2c4>)
 8000e5e:	4848      	ldr	r0, [pc, #288]	; (8000f80 <main+0x2c8>)
 8000e60:	f003 f8e4 	bl	800402c <xTaskCreate>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <main+0x280>)
 8000e68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <main+0x280>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00a      	beq.n	8000e88 <main+0x1d0>
        __asm volatile
 8000e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e76:	f383 8811 	msr	BASEPRI, r3
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	f3bf 8f4f 	dsb	sy
 8000e82:	60fb      	str	r3, [r7, #12]
    }
 8000e84:	bf00      	nop
 8000e86:	e7fe      	b.n	8000e86 <main+0x1ce>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2014      	movs	r0, #20
 8000e8e:	f002 fb81 	bl	8003594 <xQueueGenericCreate>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a3b      	ldr	r2, [pc, #236]	; (8000f84 <main+0x2cc>)
 8000e96:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000e98:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <main+0x2cc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10a      	bne.n	8000eb6 <main+0x1fe>
        __asm volatile
 8000ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea4:	f383 8811 	msr	BASEPRI, r3
 8000ea8:	f3bf 8f6f 	isb	sy
 8000eac:	f3bf 8f4f 	dsb	sy
 8000eb0:	60bb      	str	r3, [r7, #8]
    }
 8000eb2:	bf00      	nop
 8000eb4:	e7fe      	b.n	8000eb4 <main+0x1fc>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2104      	movs	r1, #4
 8000eba:	200a      	movs	r0, #10
 8000ebc:	f002 fb6a 	bl	8003594 <xQueueGenericCreate>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <main+0x2d0>)
 8000ec4:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <main+0x2d0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10a      	bne.n	8000ee4 <main+0x22c>
        __asm volatile
 8000ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	607b      	str	r3, [r7, #4]
    }
 8000ee0:	bf00      	nop
 8000ee2:	e7fe      	b.n	8000ee2 <main+0x22a>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <main+0x2d4>)
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ef0:	4827      	ldr	r0, [pc, #156]	; (8000f90 <main+0x2d8>)
 8000ef2:	f004 f971 	bl	80051d8 <xTimerCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <main+0x2dc>)
 8000efa:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <main+0x2dc>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	f003 fad6 	bl	80044b0 <xTaskGetTickCount>
 8000f04:	4602      	mov	r2, r0
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4620      	mov	r0, r4
 8000f12:	f004 f9bd 	bl	8005290 <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000f16:	f003 f9cf 	bl	80042b8 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000f1a:	e7fe      	b.n	8000f1a <main+0x262>
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	e0001000 	.word	0xe0001000
 8000f24:	200003e4 	.word	0x200003e4
 8000f28:	200005f0 	.word	0x200005f0
 8000f2c:	20000218 	.word	0x20000218
 8000f30:	0800f79c 	.word	0x0800f79c
 8000f34:	08001425 	.word	0x08001425
 8000f38:	20000214 	.word	0x20000214
 8000f3c:	2000021c 	.word	0x2000021c
 8000f40:	0800f7a8 	.word	0x0800f7a8
 8000f44:	0800191d 	.word	0x0800191d
 8000f48:	20000220 	.word	0x20000220
 8000f4c:	0800f7b4 	.word	0x0800f7b4
 8000f50:	080015bd 	.word	0x080015bd
 8000f54:	20000224 	.word	0x20000224
 8000f58:	0800f7c4 	.word	0x0800f7c4
 8000f5c:	080015fd 	.word	0x080015fd
 8000f60:	20000228 	.word	0x20000228
 8000f64:	0800f7d0 	.word	0x0800f7d0
 8000f68:	08001679 	.word	0x08001679
 8000f6c:	2000022c 	.word	0x2000022c
 8000f70:	0800f7d8 	.word	0x0800f7d8
 8000f74:	080016c9 	.word	0x080016c9
 8000f78:	20000230 	.word	0x20000230
 8000f7c:	0800f7e8 	.word	0x0800f7e8
 8000f80:	08001809 	.word	0x08001809
 8000f84:	20000238 	.word	0x20000238
 8000f88:	20000234 	.word	0x20000234
 8000f8c:	0800317d 	.word	0x0800317d
 8000f90:	0800f7f4 	.word	0x0800f7f4
 8000f94:	2000023c 	.word	0x2000023c

08000f98 <inSystem>:

	}
}


void inSystem (void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 8000f9c:	4baf      	ldr	r3, [pc, #700]	; (800125c <inSystem+0x2c4>)
 8000f9e:	4ab0      	ldr	r2, [pc, #704]	; (8001260 <inSystem+0x2c8>)
 8000fa0:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000fa2:	4bae      	ldr	r3, [pc, #696]	; (800125c <inSystem+0x2c4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000fa8:	4bac      	ldr	r3, [pc, #688]	; (800125c <inSystem+0x2c4>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000fae:	4bab      	ldr	r3, [pc, #684]	; (800125c <inSystem+0x2c4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000fb4:	4ba9      	ldr	r3, [pc, #676]	; (800125c <inSystem+0x2c4>)
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fba:	4ba8      	ldr	r3, [pc, #672]	; (800125c <inSystem+0x2c4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000fc0:	4ba6      	ldr	r3, [pc, #664]	; (800125c <inSystem+0x2c4>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000fc6:	48a5      	ldr	r0, [pc, #660]	; (800125c <inSystem+0x2c4>)
 8000fc8:	f006 fe6c 	bl	8007ca4 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	48a3      	ldr	r0, [pc, #652]	; (800125c <inSystem+0x2c4>)
 8000fd0:	f006 ff92 	bl	8007ef8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 8000fd4:	f005 f8d0 	bl	8006178 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array, &parameters_Pos_Robot, &parameters_Path_Robot, &parameter_PID_distace);
 8000fd8:	4ba2      	ldr	r3, [pc, #648]	; (8001264 <inSystem+0x2cc>)
 8000fda:	4aa3      	ldr	r2, [pc, #652]	; (8001268 <inSystem+0x2d0>)
 8000fdc:	49a3      	ldr	r1, [pc, #652]	; (800126c <inSystem+0x2d4>)
 8000fde:	48a4      	ldr	r0, [pc, #656]	; (8001270 <inSystem+0x2d8>)
 8000fe0:	f001 fbf2 	bl	80027c8 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000fe4:	4ba3      	ldr	r3, [pc, #652]	; (8001274 <inSystem+0x2dc>)
 8000fe6:	4a9e      	ldr	r2, [pc, #632]	; (8001260 <inSystem+0x2c8>)
 8000fe8:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000fea:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <inSystem+0x2dc>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <inSystem+0x2dc>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000ff6:	4b9f      	ldr	r3, [pc, #636]	; (8001274 <inSystem+0x2dc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000ffc:	4b9d      	ldr	r3, [pc, #628]	; (8001274 <inSystem+0x2dc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001002:	4b9c      	ldr	r3, [pc, #624]	; (8001274 <inSystem+0x2dc>)
 8001004:	2200      	movs	r2, #0
 8001006:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001008:	4b9a      	ldr	r3, [pc, #616]	; (8001274 <inSystem+0x2dc>)
 800100a:	2202      	movs	r2, #2
 800100c:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 800100e:	4899      	ldr	r0, [pc, #612]	; (8001274 <inSystem+0x2dc>)
 8001010:	f006 fe48 	bl	8007ca4 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 8001014:	4b98      	ldr	r3, [pc, #608]	; (8001278 <inSystem+0x2e0>)
 8001016:	4a99      	ldr	r2, [pc, #612]	; (800127c <inSystem+0x2e4>)
 8001018:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 800101a:	4b97      	ldr	r3, [pc, #604]	; (8001278 <inSystem+0x2e0>)
 800101c:	2200      	movs	r2, #0
 800101e:	711a      	strb	r2, [r3, #4]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8001020:	4b95      	ldr	r3, [pc, #596]	; (8001278 <inSystem+0x2e0>)
 8001022:	4a97      	ldr	r2, [pc, #604]	; (8001280 <inSystem+0x2e8>)
 8001024:	611a      	str	r2, [r3, #16]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001026:	4b94      	ldr	r3, [pc, #592]	; (8001278 <inSystem+0x2e0>)
 8001028:	2221      	movs	r2, #33	; 0x21
 800102a:	819a      	strh	r2, [r3, #12]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 800102c:	4b92      	ldr	r3, [pc, #584]	; (8001278 <inSystem+0x2e0>)
 800102e:	2264      	movs	r2, #100	; 0x64
 8001030:	609a      	str	r2, [r3, #8]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001032:	4b91      	ldr	r3, [pc, #580]	; (8001278 <inSystem+0x2e0>)
 8001034:	2201      	movs	r2, #1
 8001036:	751a      	strb	r2, [r3, #20]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001038:	4b8f      	ldr	r3, [pc, #572]	; (8001278 <inSystem+0x2e0>)
 800103a:	2201      	movs	r2, #1
 800103c:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_1);
 800103e:	488e      	ldr	r0, [pc, #568]	; (8001278 <inSystem+0x2e0>)
 8001040:	f007 fc38 	bl	80088b4 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001044:	488c      	ldr	r0, [pc, #560]	; (8001278 <inSystem+0x2e0>)
 8001046:	f007 fd1f 	bl	8008a88 <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800104a:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <inSystem+0x2ec>)
 800104c:	4a84      	ldr	r2, [pc, #528]	; (8001260 <inSystem+0x2c8>)
 800104e:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001050:	4b8c      	ldr	r3, [pc, #560]	; (8001284 <inSystem+0x2ec>)
 8001052:	2202      	movs	r2, #2
 8001054:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <inSystem+0x2ec>)
 8001058:	2202      	movs	r2, #2
 800105a:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800105c:	4b89      	ldr	r3, [pc, #548]	; (8001284 <inSystem+0x2ec>)
 800105e:	2200      	movs	r2, #0
 8001060:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <inSystem+0x2ec>)
 8001064:	2201      	movs	r2, #1
 8001066:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001068:	4b86      	ldr	r3, [pc, #536]	; (8001284 <inSystem+0x2ec>)
 800106a:	2200      	movs	r2, #0
 800106c:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <inSystem+0x2ec>)
 8001070:	2202      	movs	r2, #2
 8001072:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 8001074:	4883      	ldr	r0, [pc, #524]	; (8001284 <inSystem+0x2ec>)
 8001076:	f006 fe15 	bl	8007ca4 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 800107a:	4b83      	ldr	r3, [pc, #524]	; (8001288 <inSystem+0x2f0>)
 800107c:	4a7f      	ldr	r2, [pc, #508]	; (800127c <inSystem+0x2e4>)
 800107e:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8001080:	4b81      	ldr	r3, [pc, #516]	; (8001288 <inSystem+0x2f0>)
 8001082:	2201      	movs	r2, #1
 8001084:	711a      	strb	r2, [r3, #4]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 8001086:	4b80      	ldr	r3, [pc, #512]	; (8001288 <inSystem+0x2f0>)
 8001088:	4a7d      	ldr	r2, [pc, #500]	; (8001280 <inSystem+0x2e8>)
 800108a:	611a      	str	r2, [r3, #16]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 800108c:	4b7e      	ldr	r3, [pc, #504]	; (8001288 <inSystem+0x2f0>)
 800108e:	2221      	movs	r2, #33	; 0x21
 8001090:	819a      	strh	r2, [r3, #12]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 8001092:	4b7d      	ldr	r3, [pc, #500]	; (8001288 <inSystem+0x2f0>)
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	609a      	str	r2, [r3, #8]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8001098:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <inSystem+0x2f0>)
 800109a:	2201      	movs	r2, #1
 800109c:	751a      	strb	r2, [r3, #20]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 800109e:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <inSystem+0x2f0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	755a      	strb	r2, [r3, #21]
	pwm_Config(&handlerPWM_2);
 80010a4:	4878      	ldr	r0, [pc, #480]	; (8001288 <inSystem+0x2f0>)
 80010a6:	f007 fc05 	bl	80088b4 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80010aa:	4877      	ldr	r0, [pc, #476]	; (8001288 <inSystem+0x2f0>)
 80010ac:	f007 fcec 	bl	8008a88 <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80010b0:	4b76      	ldr	r3, [pc, #472]	; (800128c <inSystem+0x2f4>)
 80010b2:	4a77      	ldr	r2, [pc, #476]	; (8001290 <inSystem+0x2f8>)
 80010b4:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010b6:	4b75      	ldr	r3, [pc, #468]	; (800128c <inSystem+0x2f4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010bc:	4b73      	ldr	r3, [pc, #460]	; (800128c <inSystem+0x2f4>)
 80010be:	2201      	movs	r2, #1
 80010c0:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80010c2:	4b72      	ldr	r3, [pc, #456]	; (800128c <inSystem+0x2f4>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010c8:	4b70      	ldr	r3, [pc, #448]	; (800128c <inSystem+0x2f4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010ce:	4b6f      	ldr	r3, [pc, #444]	; (800128c <inSystem+0x2f4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010d4:	4b6d      	ldr	r3, [pc, #436]	; (800128c <inSystem+0x2f4>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 80010da:	486c      	ldr	r0, [pc, #432]	; (800128c <inSystem+0x2f4>)
 80010dc:	f006 fde2 	bl	8007ca4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 80010e0:	2100      	movs	r1, #0
 80010e2:	486a      	ldr	r0, [pc, #424]	; (800128c <inSystem+0x2f4>)
 80010e4:	f006 ff33 	bl	8007f4e <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 80010e8:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <inSystem+0x2fc>)
 80010ea:	4a69      	ldr	r2, [pc, #420]	; (8001290 <inSystem+0x2f8>)
 80010ec:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010ee:	4b69      	ldr	r3, [pc, #420]	; (8001294 <inSystem+0x2fc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010f4:	4b67      	ldr	r3, [pc, #412]	; (8001294 <inSystem+0x2fc>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80010fa:	4b66      	ldr	r3, [pc, #408]	; (8001294 <inSystem+0x2fc>)
 80010fc:	220b      	movs	r2, #11
 80010fe:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001100:	4b64      	ldr	r3, [pc, #400]	; (8001294 <inSystem+0x2fc>)
 8001102:	2200      	movs	r2, #0
 8001104:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <inSystem+0x2fc>)
 8001108:	2200      	movs	r2, #0
 800110a:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800110c:	4b61      	ldr	r3, [pc, #388]	; (8001294 <inSystem+0x2fc>)
 800110e:	2202      	movs	r2, #2
 8001110:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001112:	4860      	ldr	r0, [pc, #384]	; (8001294 <inSystem+0x2fc>)
 8001114:	f006 fdc6 	bl	8007ca4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 8001118:	2100      	movs	r1, #0
 800111a:	485e      	ldr	r0, [pc, #376]	; (8001294 <inSystem+0x2fc>)
 800111c:	f006 ff17 	bl	8007f4e <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001120:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <inSystem+0x300>)
 8001122:	4a5b      	ldr	r2, [pc, #364]	; (8001290 <inSystem+0x2f8>)
 8001124:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <inSystem+0x300>)
 8001128:	2200      	movs	r2, #0
 800112a:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800112c:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <inSystem+0x300>)
 800112e:	2201      	movs	r2, #1
 8001130:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001132:	4b59      	ldr	r3, [pc, #356]	; (8001298 <inSystem+0x300>)
 8001134:	220c      	movs	r2, #12
 8001136:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001138:	4b57      	ldr	r3, [pc, #348]	; (8001298 <inSystem+0x300>)
 800113a:	2200      	movs	r2, #0
 800113c:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800113e:	4b56      	ldr	r3, [pc, #344]	; (8001298 <inSystem+0x300>)
 8001140:	2200      	movs	r2, #0
 8001142:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001144:	4b54      	ldr	r3, [pc, #336]	; (8001298 <inSystem+0x300>)
 8001146:	2202      	movs	r2, #2
 8001148:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 800114a:	4853      	ldr	r0, [pc, #332]	; (8001298 <inSystem+0x300>)
 800114c:	f006 fdaa 	bl	8007ca4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001150:	2100      	movs	r1, #0
 8001152:	4851      	ldr	r0, [pc, #324]	; (8001298 <inSystem+0x300>)
 8001154:	f006 fefb 	bl	8007f4e <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <inSystem+0x2d8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2201      	movs	r2, #1
 800115e:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001160:	4b4e      	ldr	r3, [pc, #312]	; (800129c <inSystem+0x304>)
 8001162:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <inSystem+0x308>)
 8001164:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001166:	4b4d      	ldr	r3, [pc, #308]	; (800129c <inSystem+0x304>)
 8001168:	2200      	movs	r2, #0
 800116a:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800116c:	4b4b      	ldr	r3, [pc, #300]	; (800129c <inSystem+0x304>)
 800116e:	2201      	movs	r2, #1
 8001170:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001172:	4b4a      	ldr	r3, [pc, #296]	; (800129c <inSystem+0x304>)
 8001174:	2202      	movs	r2, #2
 8001176:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001178:	4b48      	ldr	r3, [pc, #288]	; (800129c <inSystem+0x304>)
 800117a:	2200      	movs	r2, #0
 800117c:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <inSystem+0x304>)
 8001180:	2200      	movs	r2, #0
 8001182:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <inSystem+0x304>)
 8001186:	2202      	movs	r2, #2
 8001188:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 800118a:	4844      	ldr	r0, [pc, #272]	; (800129c <inSystem+0x304>)
 800118c:	f006 fd8a 	bl	8007ca4 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 8001190:	2100      	movs	r1, #0
 8001192:	4842      	ldr	r0, [pc, #264]	; (800129c <inSystem+0x304>)
 8001194:	f006 fedb 	bl	8007f4e <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <inSystem+0x2d8>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80011a0:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <inSystem+0x30c>)
 80011a2:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <inSystem+0x2f8>)
 80011a4:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011a6:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <inSystem+0x30c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <inSystem+0x30c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80011b2:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <inSystem+0x30c>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <inSystem+0x30c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <inSystem+0x30c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <inSystem+0x30c>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 80011ca:	4b37      	ldr	r3, [pc, #220]	; (80012a8 <inSystem+0x310>)
 80011cc:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <inSystem+0x30c>)
 80011ce:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <inSystem+0x310>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 80011d6:	4834      	ldr	r0, [pc, #208]	; (80012a8 <inSystem+0x310>)
 80011d8:	f005 fc9c 	bl	8006b14 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 80011dc:	2106      	movs	r1, #6
 80011de:	4832      	ldr	r0, [pc, #200]	; (80012a8 <inSystem+0x310>)
 80011e0:	f006 fb40 	bl	8007864 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <inSystem+0x314>)
 80011e6:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <inSystem+0x2f8>)
 80011e8:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <inSystem+0x314>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <inSystem+0x314>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <inSystem+0x314>)
 80011f8:	2203      	movs	r2, #3
 80011fa:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <inSystem+0x314>)
 80011fe:	2200      	movs	r2, #0
 8001200:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <inSystem+0x314>)
 8001204:	2200      	movs	r2, #0
 8001206:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <inSystem+0x314>)
 800120a:	2202      	movs	r2, #2
 800120c:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <inSystem+0x318>)
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <inSystem+0x314>)
 8001212:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <inSystem+0x318>)
 8001216:	2202      	movs	r2, #2
 8001218:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 800121a:	4825      	ldr	r0, [pc, #148]	; (80012b0 <inSystem+0x318>)
 800121c:	f005 fc7a 	bl	8006b14 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 8001220:	2106      	movs	r1, #6
 8001222:	4823      	ldr	r0, [pc, #140]	; (80012b0 <inSystem+0x318>)
 8001224:	f006 fb1e 	bl	8007864 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <inSystem+0x31c>)
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <inSystem+0x2c8>)
 800122c:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <inSystem+0x31c>)
 8001230:	2207      	movs	r2, #7
 8001232:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <inSystem+0x31c>)
 8001236:	2202      	movs	r2, #2
 8001238:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <inSystem+0x31c>)
 800123c:	2200      	movs	r2, #0
 800123e:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <inSystem+0x31c>)
 8001242:	2209      	movs	r2, #9
 8001244:	711a      	strb	r2, [r3, #4]
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <inSystem+0x31c>)
 8001248:	2200      	movs	r2, #0
 800124a:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <inSystem+0x31c>)
 800124e:	2203      	movs	r2, #3
 8001250:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <inSystem+0x31c>)
 8001254:	f006 fd26 	bl	8007ca4 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <inSystem+0x320>)
 800125a:	e02f      	b.n	80012bc <inSystem+0x324>
 800125c:	20000240 	.word	0x20000240
 8001260:	40020000 	.word	0x40020000
 8001264:	2000051c 	.word	0x2000051c
 8001268:	20000538 	.word	0x20000538
 800126c:	200005a0 	.word	0x200005a0
 8001270:	200003f4 	.word	0x200003f4
 8001274:	2000024c 	.word	0x2000024c
 8001278:	20000314 	.word	0x20000314
 800127c:	40000c00 	.word	0x40000c00
 8001280:	41e00000 	.word	0x41e00000
 8001284:	20000258 	.word	0x20000258
 8001288:	2000032c 	.word	0x2000032c
 800128c:	20000288 	.word	0x20000288
 8001290:	40020800 	.word	0x40020800
 8001294:	2000027c 	.word	0x2000027c
 8001298:	200002a0 	.word	0x200002a0
 800129c:	20000294 	.word	0x20000294
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	200002ac 	.word	0x200002ac
 80012a8:	200002dc 	.word	0x200002dc
 80012ac:	200002b8 	.word	0x200002b8
 80012b0:	200002e4 	.word	0x200002e4
 80012b4:	20000270 	.word	0x20000270
 80012b8:	20000264 	.word	0x20000264
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <inSystem+0x45c>)
 80012be:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80012c0:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <inSystem+0x460>)
 80012c2:	2207      	movs	r2, #7
 80012c4:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80012c6:	4b4c      	ldr	r3, [pc, #304]	; (80013f8 <inSystem+0x460>)
 80012c8:	2202      	movs	r2, #2
 80012ca:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012cc:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <inSystem+0x460>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012d2:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <inSystem+0x460>)
 80012d4:	220a      	movs	r2, #10
 80012d6:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012d8:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <inSystem+0x460>)
 80012da:	2200      	movs	r2, #0
 80012dc:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80012de:	4b46      	ldr	r3, [pc, #280]	; (80013f8 <inSystem+0x460>)
 80012e0:	2203      	movs	r2, #3
 80012e2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 80012e4:	4844      	ldr	r0, [pc, #272]	; (80013f8 <inSystem+0x460>)
 80012e6:	f006 fcdd 	bl	8007ca4 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <inSystem+0x464>)
 80012ec:	4a44      	ldr	r2, [pc, #272]	; (8001400 <inSystem+0x468>)
 80012ee:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <inSystem+0x464>)
 80012f2:	4a44      	ldr	r2, [pc, #272]	; (8001404 <inSystem+0x46c>)
 80012f4:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <inSystem+0x464>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <inSystem+0x464>)
 80012fe:	2201      	movs	r2, #1
 8001300:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <inSystem+0x464>)
 8001304:	2200      	movs	r2, #0
 8001306:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001308:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <inSystem+0x464>)
 800130a:	2202      	movs	r2, #2
 800130c:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <inSystem+0x464>)
 8001310:	2200      	movs	r2, #0
 8001312:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <inSystem+0x464>)
 8001316:	2200      	movs	r2, #0
 8001318:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <inSystem+0x464>)
 800131c:	2200      	movs	r2, #0
 800131e:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 8001320:	4836      	ldr	r0, [pc, #216]	; (80013fc <inSystem+0x464>)
 8001322:	f008 fb19 	bl	8009958 <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001326:	2106      	movs	r1, #6
 8001328:	4834      	ldr	r0, [pc, #208]	; (80013fc <inSystem+0x464>)
 800132a:	f008 ffc9 	bl	800a2c0 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <inSystem+0x470>)
 8001330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001334:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <inSystem+0x470>)
 8001338:	2201      	movs	r2, #1
 800133a:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <inSystem+0x470>)
 800133e:	2200      	movs	r2, #0
 8001340:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <inSystem+0x470>)
 8001344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001348:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <inSystem+0x470>)
 800134c:	2210      	movs	r2, #16
 800134e:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001350:	482d      	ldr	r0, [pc, #180]	; (8001408 <inSystem+0x470>)
 8001352:	f004 ff2d 	bl	80061b0 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001356:	2106      	movs	r1, #6
 8001358:	482b      	ldr	r0, [pc, #172]	; (8001408 <inSystem+0x470>)
 800135a:	f005 f8e7 	bl	800652c <TIM_SetPriority>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <inSystem+0x474>)
 8001360:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <inSystem+0x478>)
 8001362:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <inSystem+0x474>)
 8001366:	2204      	movs	r2, #4
 8001368:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <inSystem+0x474>)
 800136c:	2202      	movs	r2, #2
 800136e:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <inSystem+0x474>)
 8001372:	2208      	movs	r2, #8
 8001374:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <inSystem+0x474>)
 8001378:	2201      	movs	r2, #1
 800137a:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <inSystem+0x474>)
 800137e:	2200      	movs	r2, #0
 8001380:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <inSystem+0x474>)
 8001384:	2202      	movs	r2, #2
 8001386:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <inSystem+0x47c>)
 800138a:	4a21      	ldr	r2, [pc, #132]	; (8001410 <inSystem+0x478>)
 800138c:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <inSystem+0x47c>)
 8001390:	2204      	movs	r2, #4
 8001392:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <inSystem+0x47c>)
 8001396:	2202      	movs	r2, #2
 8001398:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <inSystem+0x47c>)
 800139c:	2209      	movs	r2, #9
 800139e:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <inSystem+0x47c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <inSystem+0x47c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <inSystem+0x47c>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <inSystem+0x480>)
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <inSystem+0x484>)
 80013b6:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <inSystem+0x480>)
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <inSystem+0x480>)
 80013c0:	2268      	movs	r2, #104	; 0x68
 80013c2:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <inSystem+0x480>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <inSystem+0x488>)
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <inSystem+0x474>)
 80013ce:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <inSystem+0x488>)
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <inSystem+0x47c>)
 80013d4:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <inSystem+0x488>)
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <inSystem+0x480>)
 80013da:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <inSystem+0x488>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <inSystem+0x488>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <inSystem+0x488>)
 80013ea:	f006 fe13 	bl	8008014 <configMPUAccel>

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020000 	.word	0x40020000
 80013f8:	20000264 	.word	0x20000264
 80013fc:	20000344 	.word	0x20000344
 8001400:	40011000 	.word	0x40011000
 8001404:	05f5e100 	.word	0x05f5e100
 8001408:	200002ec 	.word	0x200002ec
 800140c:	200002c4 	.word	0x200002c4
 8001410:	40020400 	.word	0x40020400
 8001414:	200002d0 	.word	0x200002d0
 8001418:	200003d8 	.word	0x200003d8
 800141c:	40005400 	.word	0x40005400
 8001420:	200003e4 	.word	0x200003e4

08001424 <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af02      	add	r7, sp, #8
 800142a:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <vTask_Menu+0x168>)
 800142e:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <vTask_Menu+0x16c>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	2300      	movs	r3, #0
 800143a:	f04f 32ff 	mov.w	r2, #4294967295
 800143e:	f002 f92b 	bl	8003698 <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	f04f 32ff 	mov.w	r2, #4294967295
 800144a:	9200      	str	r2, [sp, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2000      	movs	r0, #0
 8001452:	f003 fbc7 	bl	8004be4 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	617b      	str	r3, [r7, #20]

		if (end){
 800145a:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <vTask_Menu+0x170>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00c      	beq.n	800147c <vTask_Menu+0x58>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 8001462:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <vTask_Menu+0x174>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 8001468:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <vTask_Menu+0x170>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 800146e:	4b4b      	ldr	r3, [pc, #300]	; (800159c <vTask_Menu+0x178>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f002 f825 	bl	80034c4 <xQueueGenericReset>
 800147a:	e7d9      	b.n	8001430 <vTask_Menu+0xc>
		}else{

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d055      	beq.n	8001532 <vTask_Menu+0x10e>

				switch (cmd->functionType) {
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b03      	cmp	r3, #3
 800148c:	d03c      	beq.n	8001508 <vTask_Menu+0xe4>
 800148e:	2b03      	cmp	r3, #3
 8001490:	dc79      	bgt.n	8001586 <vTask_Menu+0x162>
 8001492:	2b01      	cmp	r3, #1
 8001494:	d002      	beq.n	800149c <vTask_Menu+0x78>
 8001496:	2b02      	cmp	r3, #2
 8001498:	d01b      	beq.n	80014d2 <vTask_Menu+0xae>

						break;
					}
					default:{
						///////
						continue;
 800149a:	e074      	b.n	8001586 <vTask_Menu+0x162>
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 800149c:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <vTask_Menu+0x16c>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	493e      	ldr	r1, [pc, #248]	; (80015a0 <vTask_Menu+0x17c>)
 80014a8:	f002 f8f6 	bl	8003698 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <vTask_Menu+0x178>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 f806 	bl	80034c4 <xQueueGenericReset>
						next_state = sGo;
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <vTask_Menu+0x174>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <vTask_Menu+0x180>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	f003 fc0a 	bl	8004ce4 <xTaskGenericNotify>
						break;
 80014d0:	e05a      	b.n	8001588 <vTask_Menu+0x164>
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <vTask_Menu+0x16c>)
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	2300      	movs	r3, #0
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	4932      	ldr	r1, [pc, #200]	; (80015a8 <vTask_Menu+0x184>)
 80014de:	f002 f8db 	bl	8003698 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <vTask_Menu+0x178>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 ffeb 	bl	80034c4 <xQueueGenericReset>
						next_state = sGoTo;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <vTask_Menu+0x174>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <vTask_Menu+0x188>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	2300      	movs	r3, #0
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2300      	movs	r3, #0
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	f003 fbef 	bl	8004ce4 <xTaskGenericNotify>
						break;
 8001506:	e03f      	b.n	8001588 <vTask_Menu+0x164>
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <vTask_Menu+0x16c>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	f04f 32ff 	mov.w	r2, #4294967295
 8001512:	4925      	ldr	r1, [pc, #148]	; (80015a8 <vTask_Menu+0x184>)
 8001514:	f002 f8c0 	bl	8003698 <xQueueGenericSend>
						next_state = sMainMenu;
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <vTask_Menu+0x174>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Menu,0,eNoAction);
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <vTask_Menu+0x18c>)
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	2300      	movs	r3, #0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2300      	movs	r3, #0
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	f003 fbda 	bl	8004ce4 <xTaskGenericNotify>
						break;
 8001530:	e02a      	b.n	8001588 <vTask_Menu+0x164>

					}
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <vTask_Menu+0x16c>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	491d      	ldr	r1, [pc, #116]	; (80015b4 <vTask_Menu+0x190>)
 800153e:	f002 f8ab 	bl	8003698 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <vTask_Menu+0x194>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <vTask_Menu+0x178>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f001 ffb8 	bl	80034c4 <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2240      	movs	r2, #64	; 0x40
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f009 f978 	bl	800a850 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <vTask_Menu+0x18c>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	f003 fbb9 	bl	8004ce4 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2000      	movs	r0, #0
 8001580:	f003 fb30 	bl	8004be4 <xTaskGenericNotifyWait>
 8001584:	e754      	b.n	8001430 <vTask_Menu+0xc>
						continue;
 8001586:	bf00      	nop
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001588:	e752      	b.n	8001430 <vTask_Menu+0xc>
 800158a:	bf00      	nop
 800158c:	0800f800 	.word	0x0800f800
 8001590:	20000234 	.word	0x20000234
 8001594:	20000513 	.word	0x20000513
 8001598:	2000050a 	.word	0x2000050a
 800159c:	20000238 	.word	0x20000238
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000228 	.word	0x20000228
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	20000230 	.word	0x20000230
 80015b0:	20000218 	.word	0x20000218
 80015b4:	20000004 	.word	0x20000004
 80015b8:	20000512 	.word	0x20000512

080015bc <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	; 0x58
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	command_t cmd = {0};
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	2244      	movs	r2, #68	; 0x44
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f009 f93d 	bl	800a850 <memset>

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2000      	movs	r0, #0
 80015e4:	f003 fafe 	bl	8004be4 <xTaskGenericNotifyWait>
 80015e8:	64f8      	str	r0, [r7, #76]	; 0x4c

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 80015ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d1f2      	bne.n	80015d6 <vTask_Commands+0x1a>

		   process_command(&cmd);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f9a9 	bl	800194c <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80015fa:	e7ec      	b.n	80015d6 <vTask_Commands+0x1a>

080015fc <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2000      	movs	r0, #0
 8001612:	f003 fae7 	bl	8004be4 <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 8001616:	4810      	ldr	r0, [pc, #64]	; (8001658 <vTask_Stop+0x5c>)
 8001618:	f001 f8b1 	bl	800277e <stop>
		stopTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Detenemos los muestreos
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <vTask_Stop+0x60>)
 800161e:	f005 fa1f 	bl	8006a60 <stopTimer>

		// Bajamos las banderas de movimiento alguno
		flag_Go_Straigh   = RESET;
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <vTask_Stop+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
		flag_GoTo_Straigh = RESET;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <vTask_Stop+0x68>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
		flag_Roll         = RESET;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <vTask_Stop+0x6c>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
		flag_RollTo       = RESET;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <vTask_Stop+0x70>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]

		 if (end){
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <vTask_Stop+0x74>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0e0      	beq.n	8001604 <vTask_Stop+0x8>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <vTask_Stop+0x78>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	f003 fb48 	bl	8004ce4 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001654:	e7d6      	b.n	8001604 <vTask_Stop+0x8>
 8001656:	bf00      	nop
 8001658:	200003f4 	.word	0x200003f4
 800165c:	200002ec 	.word	0x200002ec
 8001660:	2000050d 	.word	0x2000050d
 8001664:	2000050e 	.word	0x2000050e
 8001668:	20000510 	.word	0x20000510
 800166c:	20000511 	.word	0x20000511
 8001670:	20000513 	.word	0x20000513
 8001674:	20000218 	.word	0x20000218

08001678 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af02      	add	r7, sp, #8
 800167e:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2300      	movs	r3, #0
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2000      	movs	r0, #0
 800168e:	f003 faa9 	bl	8004be4 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <vTask_Go+0x40>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <vTask_Go+0x44>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <vTask_Go+0x40>)
 80016a0:	705a      	strb	r2, [r3, #1]

		resetParameters();
 80016a2:	f001 fd55 	bl	8003150 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <vTask_Go+0x40>)
 80016a8:	6819      	ldr	r1, [r3, #0]
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <vTask_Go+0x48>)
 80016ac:	f000 ff7c 	bl	80025a8 <On_motor_Straigh_Roll>
		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <vTask_Go+0x4c>)
 80016b2:	f005 f9c3 	bl	8006a3c <startTimer>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80016b6:	e7e3      	b.n	8001680 <vTask_Go+0x8>
 80016b8:	20000508 	.word	0x20000508
 80016bc:	2000047c 	.word	0x2000047c
 80016c0:	200003f4 	.word	0x200003f4
 80016c4:	200002ec 	.word	0x200002ec

080016c8 <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af06      	add	r7, sp, #24
 80016ce:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2000      	movs	r0, #0
 80016de:	f003 fa81 	bl	8004be4 <xTaskGenericNotifyWait>

		 switch (next_state) {
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <vTask_Control+0x104>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d002      	beq.n	80016f0 <vTask_Control+0x28>
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d01c      	beq.n	8001728 <vTask_Control+0x60>
				}


				break;
			}
			default:{break;}
 80016ee:	e06b      	b.n	80017c8 <vTask_Control+0x100>
				go(handler_Motor_Array,
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <vTask_Control+0x108>)
 80016f2:	ed93 7b00 	vldr	d7, [r3]
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <vTask_Control+0x10c>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f8ad 3014 	strh.w	r3, [sp, #20]
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <vTask_Control+0x110>)
 8001700:	9304      	str	r3, [sp, #16]
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <vTask_Control+0x114>)
 8001704:	9303      	str	r3, [sp, #12]
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <vTask_Control+0x118>)
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <vTask_Control+0x11c>)
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <vTask_Control+0x120>)
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	eeb0 0a47 	vmov.f32	s0, s14
 8001716:	eef0 0a67 	vmov.f32	s1, s15
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <vTask_Control+0x124>)
 800171c:	4a34      	ldr	r2, [pc, #208]	; (80017f0 <vTask_Control+0x128>)
 800171e:	4935      	ldr	r1, [pc, #212]	; (80017f4 <vTask_Control+0x12c>)
 8001720:	4835      	ldr	r0, [pc, #212]	; (80017f8 <vTask_Control+0x130>)
 8001722:	f001 fad5 	bl	8002cd0 <go>
				break;
 8001726:	e04f      	b.n	80017c8 <vTask_Control+0x100>
				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <vTask_Control+0x128>)
 800172a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <vTask_Control+0x128>)
 8001730:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001734:	eeb0 1a46 	vmov.f32	s2, s12
 8001738:	eef0 1a66 	vmov.f32	s3, s13
 800173c:	eeb0 0a47 	vmov.f32	s0, s14
 8001740:	eef0 0a67 	vmov.f32	s1, s15
 8001744:	4829      	ldr	r0, [pc, #164]	; (80017ec <vTask_Control+0x124>)
 8001746:	f007 f873 	bl	8008830 <distance_traveled>
 800174a:	eeb0 7a40 	vmov.f32	s14, s0
 800174e:	eef0 7a60 	vmov.f32	s15, s1
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <vTask_Control+0x134>)
 8001754:	ed83 7b00 	vstr	d7, [r3]
				go(handler_Motor_Array,
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <vTask_Control+0x108>)
 800175a:	ed93 7b00 	vldr	d7, [r3]
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <vTask_Control+0x10c>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <vTask_Control+0x110>)
 8001768:	9304      	str	r3, [sp, #16]
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <vTask_Control+0x114>)
 800176c:	9303      	str	r3, [sp, #12]
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <vTask_Control+0x118>)
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <vTask_Control+0x11c>)
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <vTask_Control+0x120>)
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	eeb0 0a47 	vmov.f32	s0, s14
 800177e:	eef0 0a67 	vmov.f32	s1, s15
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <vTask_Control+0x124>)
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <vTask_Control+0x128>)
 8001786:	491b      	ldr	r1, [pc, #108]	; (80017f4 <vTask_Control+0x12c>)
 8001788:	481b      	ldr	r0, [pc, #108]	; (80017f8 <vTask_Control+0x130>)
 800178a:	f001 faa1 	bl	8002cd0 <go>
				if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <vTask_Control+0x134>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f9f6 	bl	8000b88 <__aeabi_d2iz>
 800179c:	4603      	mov	r3, r0
 800179e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017a2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <vTask_Control+0x124>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db0b      	blt.n	80017c6 <vTask_Control+0xfe>
					end = SET;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <vTask_Control+0x138>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <vTask_Control+0x13c>)
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2300      	movs	r3, #0
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	f003 fa8f 	bl	8004ce4 <xTaskGenericNotify>
				break;
 80017c6:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80017c8:	e782      	b.n	80016d0 <vTask_Control+0x8>
 80017ca:	bf00      	nop
 80017cc:	2000050a 	.word	0x2000050a
 80017d0:	200005f0 	.word	0x200005f0
 80017d4:	20000508 	.word	0x20000508
 80017d8:	200004c8 	.word	0x200004c8
 80017dc:	2000050f 	.word	0x2000050f
 80017e0:	2000050c 	.word	0x2000050c
 80017e4:	2000050b 	.word	0x2000050b
 80017e8:	2000051c 	.word	0x2000051c
 80017ec:	20000538 	.word	0x20000538
 80017f0:	200005a0 	.word	0x200005a0
 80017f4:	200003e4 	.word	0x200003e4
 80017f8:	200003f4 	.word	0x200003f4
 80017fc:	20000610 	.word	0x20000610
 8001800:	20000513 	.word	0x20000513
 8001804:	20000224 	.word	0x20000224

08001808 <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2300      	movs	r3, #0
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	2000      	movs	r0, #0
 800181e:	f003 f9e1 	bl	8004be4 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <vTask_GoTo+0xf8>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <vTask_GoTo+0xfc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <vTask_GoTo+0xf8>)
 8001830:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <vTask_GoTo+0x100>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <vTask_GoTo+0x104>)
 800183a:	641a      	str	r2, [r3, #64]	; 0x40

		resetParameters();
 800183c:	f001 fc88 	bl	8003150 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001840:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <vTask_GoTo+0xf8>)
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	4832      	ldr	r0, [pc, #200]	; (8001910 <vTask_GoTo+0x108>)
 8001846:	f000 feaf 	bl	80025a8 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <vTask_GoTo+0x10c>)
 800184c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001850:	492e      	ldr	r1, [pc, #184]	; (800190c <vTask_GoTo+0x104>)
 8001852:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <vTask_GoTo+0x10c>)
 8001858:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800185c:	492b      	ldr	r1, [pc, #172]	; (800190c <vTask_GoTo+0x104>)
 800185e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <vTask_GoTo+0x104>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe74 	bl	8000554 <__aeabi_i2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <vTask_GoTo+0x10c>)
 8001872:	ed93 7b04 	vldr	d7, [r3, #16]
 8001876:	eeb0 0a47 	vmov.f32	s0, s14
 800187a:	eef0 0a67 	vmov.f32	s1, s15
 800187e:	f00b fcef 	bl	800d260 <cos>
 8001882:	ec53 2b10 	vmov	r2, r3, d0
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fecd 	bl	8000628 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <vTask_GoTo+0x104>)
 8001898:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800189c:	f7fe fd0e 	bl	80002bc <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4919      	ldr	r1, [pc, #100]	; (800190c <vTask_GoTo+0x104>)
 80018a6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <vTask_GoTo+0x104>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe50 	bl	8000554 <__aeabi_i2d>
 80018b4:	4604      	mov	r4, r0
 80018b6:	460d      	mov	r5, r1
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <vTask_GoTo+0x10c>)
 80018ba:	ed93 7b04 	vldr	d7, [r3, #16]
 80018be:	eeb0 0a47 	vmov.f32	s0, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	f00b fd67 	bl	800d398 <sin>
 80018ca:	ec53 2b10 	vmov	r2, r3, d0
 80018ce:	4620      	mov	r0, r4
 80018d0:	4629      	mov	r1, r5
 80018d2:	f7fe fea9 	bl	8000628 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <vTask_GoTo+0x104>)
 80018e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80018e4:	f7fe fcea 	bl	80002bc <__adddf3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <vTask_GoTo+0x104>)
 80018ee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <vTask_GoTo+0x104>)
 80018f4:	f006 feb0 	bl	8008658 <calculation_parameter_distance>

		startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <vTask_GoTo+0x110>)
 80018fa:	f005 f89f 	bl	8006a3c <startTimer>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80018fe:	e787      	b.n	8001810 <vTask_GoTo+0x8>
 8001900:	20000508 	.word	0x20000508
 8001904:	2000047c 	.word	0x2000047c
 8001908:	20000480 	.word	0x20000480
 800190c:	20000538 	.word	0x20000538
 8001910:	200003f4 	.word	0x200003f4
 8001914:	200005a0 	.word	0x200005a0
 8001918:	200002ec 	.word	0x200002ec

0800191c <vTask_Print>:





void vTask_Print( void * pvParameters ){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <vTask_Print+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f107 010c 	add.w	r1, r7, #12
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	4618      	mov	r0, r3
 8001932:	f002 f859 	bl	80039e8 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4619      	mov	r1, r3
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <vTask_Print+0x2c>)
 800193c:	f008 fbfa 	bl	800a134 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8001940:	e7f0      	b.n	8001924 <vTask_Print+0x8>
 8001942:	bf00      	nop
 8001944:	20000234 	.word	0x20000234
 8001948:	20000344 	.word	0x20000344

0800194c <process_command>:
   }
}

void process_command (command_t *cmd){
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f837 	bl	80019c8 <extract_command>


	if (next_state == sMainMenu){
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <process_command+0x68>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <process_command+0x6c>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2303      	movs	r3, #3
 800196e:	2100      	movs	r1, #0
 8001970:	f003 f9b8 	bl	8004ce4 <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 8001974:	e019      	b.n	80019aa <process_command+0x5e>
	}else if (!wrong_command){
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <process_command+0x70>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <process_command+0x4c>
		end = SET;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <process_command+0x74>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <process_command+0x78>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	f003 f9a7 	bl	8004ce4 <xTaskGenericNotify>
}
 8001996:	e008      	b.n	80019aa <process_command+0x5e>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <process_command+0x6c>)
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	2300      	movs	r3, #0
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2303      	movs	r3, #3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f003 f99d 	bl	8004ce4 <xTaskGenericNotify>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000050a 	.word	0x2000050a
 80019b8:	20000218 	.word	0x20000218
 80019bc:	20000512 	.word	0x20000512
 80019c0:	20000513 	.word	0x20000513
 80019c4:	20000224 	.word	0x20000224

080019c8 <extract_command>:


int extract_command (command_t *cmd){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <extract_command+0xec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 f974 	bl	8003cc6 <uxQueueMessagesWaiting>
 80019de:	4603      	mov	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
	if (status == 0){
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <extract_command+0x26>
		return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	e05e      	b.n	8001aac <extract_command+0xe4>
	}

	if (wrong_command){
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <extract_command+0xf0>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <extract_command+0x50>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f008 ff23 	bl	800a850 <memset>
				xQueueReset(xQueue_InputData);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <extract_command+0xec>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fd57 	bl	80034c4 <xQueueGenericReset>
 8001a16:	e048      	b.n	8001aaa <extract_command+0xe2>
	}else{

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <extract_command+0xec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f107 010f 	add.w	r1, r7, #15
 8001a20:	2200      	movs	r2, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 ffe0 	bl	80039e8 <xQueueReceive>
 8001a28:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <extract_command+0x76>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	75fa      	strb	r2, [r7, #23]
 8001a36:	461a      	mov	r2, r3
 8001a38:	7bf9      	ldrb	r1, [r7, #15]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '#');
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b23      	cmp	r3, #35	; 0x23
 8001a42:	d1e9      	bne.n	8001a18 <extract_command+0x50>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
	//	sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <extract_command+0xf4>)
 8001a4e:	9303      	str	r3, [sp, #12]
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <extract_command+0xf8>)
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <extract_command+0xfc>)
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <extract_command+0x100>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <extract_command+0x104>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <extract_command+0x108>)
 8001a60:	491c      	ldr	r1, [pc, #112]	; (8001ad4 <extract_command+0x10c>)
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 f9c8 	bl	8002df8 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f008 feee 	bl	800a850 <memset>
		xQueueReset(xQueue_InputData);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <extract_command+0xec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fd22 	bl	80034c4 <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 8001a80:	4915      	ldr	r1, [pc, #84]	; (8001ad8 <extract_command+0x110>)
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <extract_command+0x10c>)
 8001a84:	f7fe fbac 	bl	80001e0 <strcmp>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <extract_command+0xce>
			cmd->functionType = 1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
 8001a94:	e009      	b.n	8001aaa <extract_command+0xe2>
		}
		else if (strcmp(data, "sGoTo") == 0){
 8001a96:	4911      	ldr	r1, [pc, #68]	; (8001adc <extract_command+0x114>)
 8001a98:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <extract_command+0x10c>)
 8001a9a:	f7fe fba1 	bl	80001e0 <strcmp>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <extract_command+0xe2>
			cmd->functionType = 2;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40

	}



	return 0;
 8001aaa:	2300      	movs	r3, #0

}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000238 	.word	0x20000238
 8001ab8:	20000512 	.word	0x20000512
 8001abc:	20000484 	.word	0x20000484
 8001ac0:	20000480 	.word	0x20000480
 8001ac4:	2000047c 	.word	0x2000047c
 8001ac8:	20000470 	.word	0x20000470
 8001acc:	20000464 	.word	0x20000464
 8001ad0:	20000458 	.word	0x20000458
 8001ad4:	20000488 	.word	0x20000488
 8001ad8:	0800f8dc 	.word	0x0800f8dc
 8001adc:	0800f8e0 	.word	0x0800f8e0

08001ae0 <callback_extInt1>:

// INTERRUPCIONES DE EXTI
void callback_extInt1(void){
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[0]->parametersMotor.counts++;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <callback_extInt1+0x1c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	791a      	ldrb	r2, [r3, #4]
 8001aea:	3201      	adds	r2, #1
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	711a      	strb	r2, [r3, #4]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200003f4 	.word	0x200003f4

08001b00 <callback_extInt3>:

void callback_extInt3(void){
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	handler_Motor_Array[1]->parametersMotor.counts++;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <callback_extInt3+0x1c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	791a      	ldrb	r2, [r3, #4]
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	711a      	strb	r2, [r3, #4]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200003f4 	.word	0x200003f4

08001b20 <usart1Rx_Callback>:




//Interripcion USART2
void usart1Rx_Callback(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8

	rxData = getRxData();
 8001b26:	f008 fb2d 	bl	800a184 <getRxData>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b30:	701a      	strb	r2, [r3, #0]
	writeChar(&handlerUSART, rxData);
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4825      	ldr	r0, [pc, #148]	; (8001bd0 <usart1Rx_Callback+0xb0>)
 8001b3a:	f008 fae3 	bl	800a104 <writeChar>

	if (rxData == '\r'){
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b0d      	cmp	r3, #13
 8001b44:	d102      	bne.n	8001b4c <usart1Rx_Callback+0x2c>
		wrong_command = SET;
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <usart1Rx_Callback+0xb4>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <usart1Rx_Callback+0xb8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 f9e4 	bl	8003f22 <xQueueIsQueueFullFromISR>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <usart1Rx_Callback+0xbc>)
 8001b5e:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <usart1Rx_Callback+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d007      	beq.n	8001b78 <usart1Rx_Callback+0x58>

		xQueueSendToBackFromISR(xQueue_InputData,
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <usart1Rx_Callback+0xb8>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b72:	f001 fe8f 	bl	8003894 <xQueueGenericSendFromISR>
 8001b76:	e011      	b.n	8001b9c <usart1Rx_Callback+0x7c>
								NULL);

	}else{


		if (rxData == '#'){
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b23      	cmp	r3, #35	; 0x23
 8001b7e:	d10d      	bne.n	8001b9c <usart1Rx_Callback+0x7c>

			xQueueReceiveFromISR(xQueue_InputData,
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <usart1Rx_Callback+0xb8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	4911      	ldr	r1, [pc, #68]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 f80d 	bl	8003ba8 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <usart1Rx_Callback+0xb8>)
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2200      	movs	r2, #0
 8001b96:	490d      	ldr	r1, [pc, #52]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b98:	f001 fe7c 	bl	8003894 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#' || rxData == '\r'){
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b23      	cmp	r3, #35	; 0x23
 8001ba2:	d003      	beq.n	8001bac <usart1Rx_Callback+0x8c>
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <usart1Rx_Callback+0xac>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b0d      	cmp	r3, #13
 8001baa:	d10a      	bne.n	8001bc2 <usart1Rx_Callback+0xa2>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <usart1Rx_Callback+0xc0>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	f003 f971 	bl	8004ea4 <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000454 	.word	0x20000454
 8001bd0:	20000344 	.word	0x20000344
 8001bd4:	20000512 	.word	0x20000512
 8001bd8:	20000238 	.word	0x20000238
 8001bdc:	20000214 	.word	0x20000214
 8001be0:	20000220 	.word	0x20000220

08001be4 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <BasicTimer2_Callback+0x4c>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <BasicTimer2_Callback+0x50>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <BasicTimer2_Callback+0x54>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d803      	bhi.n	8001c06 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <BasicTimer2_Callback+0x58>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e005      	b.n	8001c12 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <BasicTimer2_Callback+0x54>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <BasicTimer2_Callback+0x54>)
 8001c10:	801a      	strh	r2, [r3, #0]

	xTaskNotifyFromISR(xHandleTask_Control,
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <BasicTimer2_Callback+0x5c>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	f003 f93e 	bl	8004ea4 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000050b 	.word	0x2000050b
 8001c34:	20000010 	.word	0x20000010
 8001c38:	20000516 	.word	0x20000516
 8001c3c:	2000050c 	.word	0x2000050c
 8001c40:	2000022c 	.word	0x2000022c

08001c44 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001c50:	23c8      	movs	r3, #200	; 0xc8
 8001c52:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d061      	beq.n	8001d34 <calibracionGyros+0xf0>
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	dc70      	bgt.n	8001d56 <calibracionGyros+0x112>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <calibracionGyros+0x60>
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d037      	beq.n	8001cec <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001c7c:	e06b      	b.n	8001d56 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f006 fb52 	bl	8008328 <readGyro_X>
 8001c84:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001c88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c94:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001c98:	7efb      	ldrb	r3, [r7, #27]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f004 fc0c 	bl	80064bc <delay_ms>
			while (contador < numMedidas){
 8001ca4:	7efb      	ldrb	r3, [r7, #27]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8a7a      	ldrh	r2, [r7, #18]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d8e7      	bhi.n	8001c7e <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001cae:	8a7b      	ldrh	r3, [r7, #18]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001cc4:	e048      	b.n	8001d58 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f006 fbb6 	bl	8008438 <readGyro_Y>
 8001ccc:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001cd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001ce0:	7efb      	ldrb	r3, [r7, #27]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f004 fbe8 	bl	80064bc <delay_ms>
			while (contador < numMedidas){
 8001cec:	7efb      	ldrb	r3, [r7, #27]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	8a7a      	ldrh	r2, [r7, #18]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d8e7      	bhi.n	8001cc6 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001cf6:	8a7b      	ldrh	r3, [r7, #18]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d08:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001d0c:	e024      	b.n	8001d58 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f006 fc1a 	bl	8008548 <readGyro_Z>
 8001d14:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001d18:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001d28:	7efb      	ldrb	r3, [r7, #27]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f004 fbc4 	bl	80064bc <delay_ms>
			while (contador < numMedidas){
 8001d34:	7efb      	ldrb	r3, [r7, #27]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	8a7a      	ldrh	r2, [r7, #18]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8e7      	bhi.n	8001d0e <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8001d3e:	8a7b      	ldrh	r3, [r7, #18]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d50:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001d54:	e000      	b.n	8001d58 <calibracionGyros+0x114>
			break;
 8001d56:	bf00      	nop
		}
	}


	return promedio;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	ee07 3a90 	vmov	s15, r3
}
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6178      	str	r0, [r7, #20]
 8001d70:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d74:	ed87 1b02 	vstr	d1, [r7, #8]
 8001d78:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f006 fbe4 	bl	8008548 <readGyro_Z>
 8001d80:	ee10 3a10 	vmov	r3, s0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbf7 	bl	8000578 <__aeabi_f2d>
 8001d8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d8e:	f7fe fa93 	bl	80002b8 <__aeabi_dsub>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe ff3d 	bl	8000c18 <__aeabi_d2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8001da2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dae:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001e14 <getAngle+0xac>
 8001db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dbe:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8001dc2:	69b8      	ldr	r0, [r7, #24]
 8001dc4:	f7fe fbd8 	bl	8000578 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <getAngle+0xb0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbce 	bl	8000578 <__aeabi_f2d>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fa6b 	bl	80002bc <__adddf3>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe ff13 	bl	8000c18 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <getAngle+0xb0>)
 8001df6:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <getAngle+0xb4>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <getAngle+0xb8>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <getAngle+0xb8>)
 8001e08:	801a      	strh	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	447a0000 	.word	0x447a0000
 8001e18:	200005f8 	.word	0x200005f8
 8001e1c:	200002ec 	.word	0x200002ec
 8001e20:	20000514 	.word	0x20000514
 8001e24:	00000000 	.word	0x00000000

08001e28 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	ed2d 8b02 	vpush	{d8}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8001e38:	793b      	ldrb	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 81d4 	bne.w	80021e8 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8001e40:	4bab      	ldr	r3, [pc, #684]	; (80020f0 <get_measuremets_parameters+0x2c8>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4bab      	ldr	r3, [pc, #684]	; (80020f4 <get_measuremets_parameters+0x2cc>)
 8001e48:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8001e4a:	4bab      	ldr	r3, [pc, #684]	; (80020f8 <get_measuremets_parameters+0x2d0>)
 8001e4c:	edd3 6a00 	vldr	s13, [r3]
 8001e50:	4baa      	ldr	r3, [pc, #680]	; (80020fc <get_measuremets_parameters+0x2d4>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e60:	4ba7      	ldr	r3, [pc, #668]	; (8002100 <get_measuremets_parameters+0x2d8>)
 8001e62:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8001e66:	4ba6      	ldr	r3, [pc, #664]	; (8002100 <get_measuremets_parameters+0x2d8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb84 	bl	8000578 <__aeabi_f2d>
 8001e70:	a39b      	add	r3, pc, #620	; (adr r3, 80020e0 <get_measuremets_parameters+0x2b8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbd7 	bl	8000628 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b9f      	ldr	r3, [pc, #636]	; (8002104 <get_measuremets_parameters+0x2dc>)
 8001e88:	f7fe fcf8 	bl	800087c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001e96:	4b98      	ldr	r3, [pc, #608]	; (80020f8 <get_measuremets_parameters+0x2d0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb6c 	bl	8000578 <__aeabi_f2d>
 8001ea0:	a38f      	add	r3, pc, #572	; (adr r3, 80020e0 <get_measuremets_parameters+0x2b8>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fbbf 	bl	8000628 <__aeabi_dmul>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b93      	ldr	r3, [pc, #588]	; (8002104 <get_measuremets_parameters+0x2dc>)
 8001eb8:	f7fe fce0 	bl	800087c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	ec43 2b17 	vmov	d7, r2, r3
 8001ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec8:	eef0 0a67 	vmov.f32	s1, s15
 8001ecc:	f00b fa64 	bl	800d398 <sin>
 8001ed0:	eeb0 8a40 	vmov.f32	s16, s0
 8001ed4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <get_measuremets_parameters+0x2d0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb4b 	bl	8000578 <__aeabi_f2d>
 8001ee2:	a37f      	add	r3, pc, #508	; (adr r3, 80020e0 <get_measuremets_parameters+0x2b8>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb9e 	bl	8000628 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b82      	ldr	r3, [pc, #520]	; (8002104 <get_measuremets_parameters+0x2dc>)
 8001efa:	f7fe fcbf 	bl	800087c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	ec43 2b17 	vmov	d7, r2, r3
 8001f06:	eeb0 0a47 	vmov.f32	s0, s14
 8001f0a:	eef0 0a67 	vmov.f32	s1, s15
 8001f0e:	f00b f9a7 	bl	800d260 <cos>
 8001f12:	eeb0 7a40 	vmov.f32	s14, s0
 8001f16:	eef0 7a60 	vmov.f32	s15, s1
 8001f1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001f1e:	eef0 1a67 	vmov.f32	s3, s15
 8001f22:	eeb0 0a48 	vmov.f32	s0, s16
 8001f26:	eef0 0a68 	vmov.f32	s1, s17
 8001f2a:	f00b fa8d 	bl	800d448 <atan2>
 8001f2e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8001f32:	a36d      	add	r3, pc, #436	; (adr r3, 80020e8 <get_measuremets_parameters+0x2c0>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb76 	bl	8000628 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f4a:	f7fe f9b7 	bl	80002bc <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f5e:	a360      	add	r3, pc, #384	; (adr r3, 80020e0 <get_measuremets_parameters+0x2b8>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe fb60 	bl	8000628 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b63      	ldr	r3, [pc, #396]	; (8002104 <get_measuremets_parameters+0x2dc>)
 8001f76:	f7fe fc81 	bl	800087c <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	ec43 2b17 	vmov	d7, r2, r3
 8001f82:	eeb0 0a47 	vmov.f32	s0, s14
 8001f86:	eef0 0a67 	vmov.f32	s1, s15
 8001f8a:	f00b fa05 	bl	800d398 <sin>
 8001f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8001f92:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f9c:	a350      	add	r3, pc, #320	; (adr r3, 80020e0 <get_measuremets_parameters+0x2b8>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fb41 	bl	8000628 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4b54      	ldr	r3, [pc, #336]	; (8002104 <get_measuremets_parameters+0x2dc>)
 8001fb4:	f7fe fc62 	bl	800087c <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	ec43 2b17 	vmov	d7, r2, r3
 8001fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fc4:	eef0 0a67 	vmov.f32	s1, s15
 8001fc8:	f00b f94a 	bl	800d260 <cos>
 8001fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd0:	eef0 7a60 	vmov.f32	s15, s1
 8001fd4:	eeb0 1a47 	vmov.f32	s2, s14
 8001fd8:	eef0 1a67 	vmov.f32	s3, s15
 8001fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8001fe0:	eef0 0a68 	vmov.f32	s1, s17
 8001fe4:	f00b fa30 	bl	800d448 <atan2>
 8001fe8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fec:	eef0 7a60 	vmov.f32	s15, s1
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	ed93 7b02 	vldr	d7, [r3, #8]
 8001ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8002000:	eef0 0a67 	vmov.f32	s1, s15
 8002004:	f00b f9c8 	bl	800d398 <sin>
 8002008:	eeb0 8a40 	vmov.f32	s16, s0
 800200c:	eef0 8a60 	vmov.f32	s17, s1
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	ed93 7b02 	vldr	d7, [r3, #8]
 8002016:	eeb0 0a47 	vmov.f32	s0, s14
 800201a:	eef0 0a67 	vmov.f32	s1, s15
 800201e:	f00b f91f 	bl	800d260 <cos>
 8002022:	eeb0 7a40 	vmov.f32	s14, s0
 8002026:	eef0 7a60 	vmov.f32	s15, s1
 800202a:	eeb0 1a47 	vmov.f32	s2, s14
 800202e:	eef0 1a67 	vmov.f32	s3, s15
 8002032:	eeb0 0a48 	vmov.f32	s0, s16
 8002036:	eef0 0a68 	vmov.f32	s1, s17
 800203a:	f00b fa05 	bl	800d448 <atan2>
 800203e:	eeb0 7a40 	vmov.f32	s14, s0
 8002042:	eef0 7a60 	vmov.f32	s15, s1
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 800204c:	797b      	ldrb	r3, [r7, #5]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d15e      	bne.n	8002110 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <get_measuremets_parameters+0x2e0>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3304      	adds	r3, #4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	791b      	ldrb	r3, [r3, #4]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <get_measuremets_parameters+0x2e4>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3304      	adds	r3, #4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	edd3 6a03 	vldr	s13, [r3, #12]
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <get_measuremets_parameters+0x2cc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b2:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3304      	adds	r3, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <get_measuremets_parameters+0x2cc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3304      	adds	r3, #4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d6:	edc3 7a02 	vstr	s15, [r3, #8]
 80020da:	e065      	b.n	80021a8 <get_measuremets_parameters+0x380>
 80020dc:	f3af 8000 	nop.w
 80020e0:	54442d18 	.word	0x54442d18
 80020e4:	400921fb 	.word	0x400921fb
 80020e8:	1a63c1f8 	.word	0x1a63c1f8
 80020ec:	404ca5dc 	.word	0x404ca5dc
 80020f0:	20000514 	.word	0x20000514
 80020f4:	20000518 	.word	0x20000518
 80020f8:	200005f8 	.word	0x200005f8
 80020fc:	20000516 	.word	0x20000516
 8002100:	200005fc 	.word	0x200005fc
 8002104:	40668000 	.word	0x40668000
 8002108:	20000014 	.word	0x20000014
 800210c:	20000018 	.word	0x20000018

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <get_measuremets_parameters+0x3a8>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	eef1 7a67 	vneg.f32	s15, s15
 8002130:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3304      	adds	r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	791b      	ldrb	r3, [r3, #4]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <get_measuremets_parameters+0x3ac>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	eef1 7a67 	vneg.f32	s15, s15
 8002158:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	edd3 7a03 	vldr	s15, [r3, #12]
 8002164:	eef1 6a67 	vneg.f32	s13, s15
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <get_measuremets_parameters+0x3b0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3304      	adds	r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	edd3 7a03 	vldr	s15, [r3, #12]
 800218a:	eef1 6a67 	vneg.f32	s13, s15
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <get_measuremets_parameters+0x3b0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a4:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <get_measuremets_parameters+0x3b4>)
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <get_measuremets_parameters+0x3b8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <get_measuremets_parameters+0x3bc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	801a      	strh	r2, [r3, #0]
		//Combinar ambos ángulos
//		ang_complementary = ptrParameter_position->grad_relativo + ang_for_Displament;
	}
	else{  __NOP(); }

}
 80021ce:	e1d8      	b.n	8002582 <get_measuremets_parameters+0x75a>
 80021d0:	20000014 	.word	0x20000014
 80021d4:	20000018 	.word	0x20000018
 80021d8:	20000518 	.word	0x20000518
 80021dc:	200005f8 	.word	0x200005f8
 80021e0:	20000514 	.word	0x20000514
 80021e4:	20000516 	.word	0x20000516
	else if(operation_mode_dir.Mode == Roll)
 80021e8:	793b      	ldrb	r3, [r7, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	f040 81c8 	bne.w	8002580 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 80021f0:	4bad      	ldr	r3, [pc, #692]	; (80024a8 <get_measuremets_parameters+0x680>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4bad      	ldr	r3, [pc, #692]	; (80024ac <get_measuremets_parameters+0x684>)
 80021f8:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 80021fa:	4bad      	ldr	r3, [pc, #692]	; (80024b0 <get_measuremets_parameters+0x688>)
 80021fc:	edd3 6a00 	vldr	s13, [r3]
 8002200:	4bac      	ldr	r3, [pc, #688]	; (80024b4 <get_measuremets_parameters+0x68c>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	4ba9      	ldr	r3, [pc, #676]	; (80024b8 <get_measuremets_parameters+0x690>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002216:	4ba8      	ldr	r3, [pc, #672]	; (80024b8 <get_measuremets_parameters+0x690>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f9ac 	bl	8000578 <__aeabi_f2d>
 8002220:	a39d      	add	r3, pc, #628	; (adr r3, 8002498 <get_measuremets_parameters+0x670>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fe f9ff 	bl	8000628 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	4ba1      	ldr	r3, [pc, #644]	; (80024bc <get_measuremets_parameters+0x694>)
 8002238:	f7fe fb20 	bl	800087c <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002246:	4b9a      	ldr	r3, [pc, #616]	; (80024b0 <get_measuremets_parameters+0x688>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe f994 	bl	8000578 <__aeabi_f2d>
 8002250:	a391      	add	r3, pc, #580	; (adr r3, 8002498 <get_measuremets_parameters+0x670>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b95      	ldr	r3, [pc, #596]	; (80024bc <get_measuremets_parameters+0x694>)
 8002268:	f7fe fb08 	bl	800087c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	ec43 2b17 	vmov	d7, r2, r3
 8002274:	eeb0 0a47 	vmov.f32	s0, s14
 8002278:	eef0 0a67 	vmov.f32	s1, s15
 800227c:	f00b f88c 	bl	800d398 <sin>
 8002280:	eeb0 8a40 	vmov.f32	s16, s0
 8002284:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002288:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <get_measuremets_parameters+0x688>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f973 	bl	8000578 <__aeabi_f2d>
 8002292:	a381      	add	r3, pc, #516	; (adr r3, 8002498 <get_measuremets_parameters+0x670>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f9c6 	bl	8000628 <__aeabi_dmul>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <get_measuremets_parameters+0x694>)
 80022aa:	f7fe fae7 	bl	800087c <__aeabi_ddiv>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	ec43 2b17 	vmov	d7, r2, r3
 80022b6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ba:	eef0 0a67 	vmov.f32	s1, s15
 80022be:	f00a ffcf 	bl	800d260 <cos>
 80022c2:	eeb0 7a40 	vmov.f32	s14, s0
 80022c6:	eef0 7a60 	vmov.f32	s15, s1
 80022ca:	eeb0 1a47 	vmov.f32	s2, s14
 80022ce:	eef0 1a67 	vmov.f32	s3, s15
 80022d2:	eeb0 0a48 	vmov.f32	s0, s16
 80022d6:	eef0 0a68 	vmov.f32	s1, s17
 80022da:	f00b f8b5 	bl	800d448 <atan2>
 80022de:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80022e2:	a36f      	add	r3, pc, #444	; (adr r3, 80024a0 <get_measuremets_parameters+0x678>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe f99e 	bl	8000628 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022fa:	f7fd ffdf 	bl	80002bc <__adddf3>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800230e:	a362      	add	r3, pc, #392	; (adr r3, 8002498 <get_measuremets_parameters+0x670>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe f988 	bl	8000628 <__aeabi_dmul>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <get_measuremets_parameters+0x694>)
 8002326:	f7fe faa9 	bl	800087c <__aeabi_ddiv>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	ec43 2b17 	vmov	d7, r2, r3
 8002332:	eeb0 0a47 	vmov.f32	s0, s14
 8002336:	eef0 0a67 	vmov.f32	s1, s15
 800233a:	f00b f82d 	bl	800d398 <sin>
 800233e:	eeb0 8a40 	vmov.f32	s16, s0
 8002342:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800234c:	a352      	add	r3, pc, #328	; (adr r3, 8002498 <get_measuremets_parameters+0x670>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f969 	bl	8000628 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <get_measuremets_parameters+0x694>)
 8002364:	f7fe fa8a 	bl	800087c <__aeabi_ddiv>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	ec43 2b17 	vmov	d7, r2, r3
 8002370:	eeb0 0a47 	vmov.f32	s0, s14
 8002374:	eef0 0a67 	vmov.f32	s1, s15
 8002378:	f00a ff72 	bl	800d260 <cos>
 800237c:	eeb0 7a40 	vmov.f32	s14, s0
 8002380:	eef0 7a60 	vmov.f32	s15, s1
 8002384:	eeb0 1a47 	vmov.f32	s2, s14
 8002388:	eef0 1a67 	vmov.f32	s3, s15
 800238c:	eeb0 0a48 	vmov.f32	s0, s16
 8002390:	eef0 0a68 	vmov.f32	s1, s17
 8002394:	f00b f858 	bl	800d448 <atan2>
 8002398:	eeb0 7a40 	vmov.f32	s14, s0
 800239c:	eef0 7a60 	vmov.f32	s15, s1
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80023ac:	eeb0 0a47 	vmov.f32	s0, s14
 80023b0:	eef0 0a67 	vmov.f32	s1, s15
 80023b4:	f00a fff0 	bl	800d398 <sin>
 80023b8:	eeb0 8a40 	vmov.f32	s16, s0
 80023bc:	eef0 8a60 	vmov.f32	s17, s1
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	ed93 7b02 	vldr	d7, [r3, #8]
 80023c6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ca:	eef0 0a67 	vmov.f32	s1, s15
 80023ce:	f00a ff47 	bl	800d260 <cos>
 80023d2:	eeb0 7a40 	vmov.f32	s14, s0
 80023d6:	eef0 7a60 	vmov.f32	s15, s1
 80023da:	eeb0 1a47 	vmov.f32	s2, s14
 80023de:	eef0 1a67 	vmov.f32	s3, s15
 80023e2:	eeb0 0a48 	vmov.f32	s0, s16
 80023e6:	eef0 0a68 	vmov.f32	s1, s17
 80023ea:	f00b f82d 	bl	800d448 <atan2>
 80023ee:	eeb0 7a40 	vmov.f32	s14, s0
 80023f2:	eef0 7a60 	vmov.f32	s15, s1
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 80023fc:	797b      	ldrb	r3, [r7, #5]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d162      	bne.n	80024c8 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <get_measuremets_parameters+0x698>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <get_measuremets_parameters+0x69c>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3304      	adds	r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	eef1 7a67 	vneg.f32	s15, s15
 8002446:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <get_measuremets_parameters+0x684>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002466:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	edd3 7a03 	vldr	s15, [r3, #12]
 8002474:	eef1 6a67 	vneg.f32	s13, s15
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <get_measuremets_parameters+0x684>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	ee07 3a90 	vmov	s15, r3
 8002480:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002492:	e061      	b.n	8002558 <get_measuremets_parameters+0x730>
 8002494:	f3af 8000 	nop.w
 8002498:	54442d18 	.word	0x54442d18
 800249c:	400921fb 	.word	0x400921fb
 80024a0:	1a63c1f8 	.word	0x1a63c1f8
 80024a4:	404ca5dc 	.word	0x404ca5dc
 80024a8:	20000514 	.word	0x20000514
 80024ac:	20000518 	.word	0x20000518
 80024b0:	200005f8 	.word	0x200005f8
 80024b4:	20000516 	.word	0x20000516
 80024b8:	200005fc 	.word	0x200005fc
 80024bc:	40668000 	.word	0x40668000
 80024c0:	20000014 	.word	0x20000014
 80024c4:	20000018 	.word	0x20000018
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	791b      	ldrb	r3, [r3, #4]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d6:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <get_measuremets_parameters+0x768>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	eef1 7a67 	vneg.f32	s15, s15
 80024e8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <get_measuremets_parameters+0x76c>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	edd3 7a03 	vldr	s15, [r3, #12]
 8002518:	eef1 6a67 	vneg.f32	s13, s15
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <get_measuremets_parameters+0x770>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002530:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3304      	adds	r3, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	edd3 6a03 	vldr	s13, [r3, #12]
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <get_measuremets_parameters+0x770>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3304      	adds	r3, #4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002554:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3304      	adds	r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <get_measuremets_parameters+0x774>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <get_measuremets_parameters+0x778>)
 8002574:	2200      	movs	r2, #0
 8002576:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <get_measuremets_parameters+0x77c>)
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
}
 800257e:	e000      	b.n	8002582 <get_measuremets_parameters+0x75a>
	else{  __NOP(); }
 8002580:	bf00      	nop
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	ecbd 8b02 	vpop	{d8}
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000014 	.word	0x20000014
 8002594:	20000018 	.word	0x20000018
 8002598:	20000518 	.word	0x20000518
 800259c:	200005f8 	.word	0x200005f8
 80025a0:	20000514 	.word	0x20000514
 80025a4:	20000516 	.word	0x20000516

080025a8 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 80025b2:	783b      	ldrb	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d120      	bne.n	80025fa <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f844 	bl	8002648 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	4618      	mov	r0, r3
 80025c8:	f006 fa70 	bl	8008aac <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f005 fcba 	bl	8007f4e <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	4618      	mov	r0, r3
 80025e4:	f006 fa62 	bl	8008aac <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fcab 	bl	8007f4e <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 80025f8:	e022      	b.n	8002640 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 80025fa:	783b      	ldrb	r3, [r7, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d11f      	bne.n	8002640 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f820 	bl	8002648 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	4618      	mov	r0, r3
 8002610:	f006 fa4c 	bl	8008aac <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f005 fc96 	bl	8007f4e <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	4618      	mov	r0, r3
 800262c:	f006 fa3e 	bl	8008aac <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3304      	adds	r3, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2101      	movs	r1, #1
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fc87 	bl	8007f4e <GPIO_WritePin_Afopt>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 8002652:	783b      	ldrb	r3, [r7, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d143      	bne.n	80026e0 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	7f1a      	ldrb	r2, [r3, #28]
 800265e:	787b      	ldrb	r3, [r7, #1]
 8002660:	429a      	cmp	r2, r3
 8002662:	d018      	beq.n	8002696 <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	787a      	ldrb	r2, [r7, #1]
 800266a:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	7f1b      	ldrb	r3, [r3, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f005 fc62 	bl	8007f4e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	4618      	mov	r0, r3
 8002692:	f006 fda3 	bl	80091dc <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	7f1a      	ldrb	r2, [r3, #28]
 800269e:	787b      	ldrb	r3, [r7, #1]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d068      	beq.n	8002776 <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	787a      	ldrb	r2, [r7, #1]
 80026ac:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a1a      	ldr	r2, [r3, #32]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	7f1b      	ldrb	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf0c      	ite	eq
 80026c2:	2301      	moveq	r3, #1
 80026c4:	2300      	movne	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f005 fc3f 	bl	8007f4e <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	4618      	mov	r0, r3
 80026da:	f006 fd7f 	bl	80091dc <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80026de:	e04a      	b.n	8002776 <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 80026e0:	783b      	ldrb	r3, [r7, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d147      	bne.n	8002776 <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	7f1a      	ldrb	r2, [r3, #28]
 80026ec:	787b      	ldrb	r3, [r7, #1]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11d      	bne.n	800272e <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 80026f2:	787b      	ldrb	r3, [r7, #1]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	7f1b      	ldrb	r3, [r3, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f005 fc16 	bl	8007f4e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	4618      	mov	r0, r3
 800272a:	f006 fd57 	bl	80091dc <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3304      	adds	r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	7f1a      	ldrb	r2, [r3, #28]
 8002736:	787b      	ldrb	r3, [r7, #1]
 8002738:	429a      	cmp	r2, r3
 800273a:	d01c      	beq.n	8002776 <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	787a      	ldrb	r2, [r7, #1]
 8002744:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a1a      	ldr	r2, [r3, #32]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	7f1b      	ldrb	r3, [r3, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f005 fbf3 	bl	8007f4e <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	4618      	mov	r0, r3
 8002772:	f006 fd33 	bl	80091dc <PWMx_Toggle>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	4618      	mov	r0, r3
 800278e:	f006 fce5 	bl	800915c <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f005 fbd7 	bl	8007f4e <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	4618      	mov	r0, r3
 80027aa:	f006 fcd7 	bl	800915c <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 fbc8 	bl	8007f4e <GPIO_WritePin_Afopt>


}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <int_Config_Motor>:


void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler){
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a82      	ldr	r2, [pc, #520]	; (80029e4 <int_Config_Motor+0x21c>)
 80027da:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a81      	ldr	r2, [pc, #516]	; (80029e8 <int_Config_Motor+0x220>)
 80027e2:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a80      	ldr	r2, [pc, #512]	; (80029ec <int_Config_Motor+0x224>)
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <int_Config_Motor+0x228>)
 80027f2:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a7e      	ldr	r2, [pc, #504]	; (80029f4 <int_Config_Motor+0x22c>)
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a71      	ldr	r2, [pc, #452]	; (80029f8 <int_Config_Motor+0x230>)
 8002834:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6c      	ldr	r2, [pc, #432]	; (80029fc <int_Config_Motor+0x234>)
 800284a:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	3304      	adds	r3, #4
 8002850:	4a6b      	ldr	r2, [pc, #428]	; (8002a00 <int_Config_Motor+0x238>)
 8002852:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3304      	adds	r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a63      	ldr	r2, [pc, #396]	; (80029e8 <int_Config_Motor+0x220>)
 800285c:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3304      	adds	r3, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <int_Config_Motor+0x23c>)
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3304      	adds	r3, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a66      	ldr	r2, [pc, #408]	; (8002a08 <int_Config_Motor+0x240>)
 8002870:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a64      	ldr	r2, [pc, #400]	; (8002a0c <int_Config_Motor+0x244>)
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3304      	adds	r3, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3304      	adds	r3, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3304      	adds	r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3304      	adds	r3, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a4e      	ldr	r2, [pc, #312]	; (80029f8 <int_Config_Motor+0x230>)
 80028be:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3304      	adds	r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3304      	adds	r3, #4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a49      	ldr	r2, [pc, #292]	; (80029fc <int_Config_Motor+0x234>)
 80028d8:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002900:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4a42      	ldr	r2, [pc, #264]	; (8002a10 <int_Config_Motor+0x248>)
 8002906:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4a42      	ldr	r2, [pc, #264]	; (8002a14 <int_Config_Motor+0x24c>)
 800290c:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	ptrPathHandler->line_Distance = 0;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200003fc 	.word	0x200003fc
 80029e8:	41e00000 	.word	0x41e00000
 80029ec:	20000288 	.word	0x20000288
 80029f0:	200002a0 	.word	0x200002a0
 80029f4:	20000314 	.word	0x20000314
 80029f8:	437a0000 	.word	0x437a0000
 80029fc:	42c80000 	.word	0x42c80000
 8002a00:	20000428 	.word	0x20000428
 8002a04:	2000027c 	.word	0x2000027c
 8002a08:	20000294 	.word	0x20000294
 8002a0c:	2000032c 	.word	0x2000032c
 8002a10:	3dcccccd 	.word	0x3dcccccd
 8002a14:	3f4ccccd 	.word	0x3f4ccccd

08002a18 <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8002a26:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <PID_control+0x1cc>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <PID_control+0x1d0>)
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a3a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002bec <PID_control+0x1d4>
 8002a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a42:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002a52:	eeb0 1a46 	vmov.f32	s2, s12
 8002a56:	eef0 1a66 	vmov.f32	s3, s13
 8002a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a5e:	eef0 0a67 	vmov.f32	s1, s15
 8002a62:	68b8      	ldr	r0, [r7, #8]
 8002a64:	f005 fea0 	bl	80087a8 <distance_to_straight_line>
 8002a68:	ec51 0b10 	vmov	r0, r1, d0
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <PID_control+0x1d8>)
 8002a72:	f7fd ff03 	bl	800087c <__aeabi_ddiv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f7fe f8cb 	bl	8000c18 <__aeabi_d2f>
 8002a82:	4603      	mov	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8002a86:	ed97 1a04 	vldr	s2, [r7, #16]
 8002a8a:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8002bf4 <PID_control+0x1dc>
 8002a8e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f000 f8bc 	bl	8002c10 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8002a98:	4b57      	ldr	r3, [pc, #348]	; (8002bf8 <PID_control+0x1e0>)
 8002a9a:	ed93 7a00 	vldr	s14, [r3]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	4b54      	ldr	r3, [pc, #336]	; (8002bfc <PID_control+0x1e4>)
 8002aaa:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	ed93 7a00 	vldr	s14, [r3]
 8002ab4:	4b50      	ldr	r3, [pc, #320]	; (8002bf8 <PID_control+0x1e0>)
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <PID_control+0x1e8>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <PID_control+0x1e4>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ad8:	eeb0 1a47 	vmov.f32	s2, s14
 8002adc:	eef0 0a67 	vmov.f32	s1, s15
 8002ae0:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f000 f893 	bl	8002c10 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <PID_control+0x1e8>)
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3304      	adds	r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b02:	eeb0 1a47 	vmov.f32	s2, s14
 8002b06:	eef0 0a67 	vmov.f32	s1, s15
 8002b0a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 f87e 	bl	8002c10 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2e:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3304      	adds	r3, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b52:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b5e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002c04 <PID_control+0x1ec>
 8002b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6a:	db04      	blt.n	8002b76 <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <PID_control+0x1f0>)
 8002b72:	615a      	str	r2, [r3, #20]
 8002b74:	e00e      	b.n	8002b94 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b7e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d803      	bhi.n	8002b94 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <PID_control+0x1f4>)
 8002b92:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3304      	adds	r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b9e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002c04 <PID_control+0x1ec>
 8002ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	db05      	blt.n	8002bb8 <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <PID_control+0x1f0>)
 8002bb4:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8002bb6:	e011      	b.n	8002bdc <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bc2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d900      	bls.n	8002bd2 <PID_control+0x1ba>
}
 8002bd0:	e004      	b.n	8002bdc <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <PID_control+0x1f4>)
 8002bda:	615a      	str	r2, [r3, #20]
}
 8002bdc:	bf00      	nop
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200002ec 	.word	0x200002ec
 8002be8:	20000010 	.word	0x20000010
 8002bec:	447a0000 	.word	0x447a0000
 8002bf0:	408f4000 	.word	0x408f4000
 8002bf4:	00000000 	.word	0x00000000
 8002bf8:	20000600 	.word	0x20000600
 8002bfc:	20000604 	.word	0x20000604
 8002c00:	20000608 	.word	0x20000608
 8002c04:	42700000 	.word	0x42700000
 8002c08:	42700000 	.word	0x42700000
 8002c0c:	41b80000 	.word	0x41b80000

08002c10 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	; 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c20:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8002c24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c28:	edd7 7a00 	vldr	s15, [r7]
 8002c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c78:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c92:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9e:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8002ca2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ca6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cae:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	60da      	str	r2, [r3, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	3724      	adds	r7, #36	; 0x24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6178      	str	r0, [r7, #20]
 8002cd8:	6139      	str	r1, [r7, #16]
 8002cda:	60fa      	str	r2, [r7, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	ed97 1b00 	vldr	d1, [r7]
 8002cf0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002df4 <go+0x124>
 8002cf4:	6938      	ldr	r0, [r7, #16]
 8002cf6:	f7ff f837 	bl	8001d68 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8002d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	6978      	ldr	r0, [r7, #20]
 8002d0e:	f7ff f88b 	bl	8001e28 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d061      	beq.n	8002dea <go+0x11a>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002d40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d44:	ee16 0a90 	vmov	r0, s13
 8002d48:	f7fd fc16 	bl	8000578 <__aeabi_f2d>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d5e:	eef0 0a67 	vmov.f32	s1, s15
 8002d62:	f00a fa7d 	bl	800d260 <cos>
 8002d66:	ec51 0b10 	vmov	r0, r1, d0
 8002d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6e:	f7fd fc5b 	bl	8000628 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d82:	eeb0 0a47 	vmov.f32	s0, s14
 8002d86:	eef0 0a67 	vmov.f32	s1, s15
 8002d8a:	f00a fb05 	bl	800d398 <sin>
 8002d8e:	ec51 0b10 	vmov	r0, r1, d0
 8002d92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d96:	f7fd fc47 	bl	8000628 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002db0:	f7fd fa84 	bl	80002bc <__adddf3>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	68f9      	ldr	r1, [r7, #12]
 8002dba:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002dca:	f7fd fa77 	bl	80002bc <__adddf3>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		//Convertimos el valor y imprimimos en la terminal
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff fe1a 	bl	8002a18 <PID_control>

		*fcontrol = RESET;
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
	}
}
 8002dea:	bf00      	nop
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00000000 	.word	0x00000000

08002df8 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]

	int counter = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 8002e22:	e00a      	b.n	8002e3a <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4413      	add	r3, r2
 8002e2a:	68f9      	ldr	r1, [r7, #12]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	440a      	add	r2, r1
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	701a      	strb	r2, [r3, #0]

			counter++;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	3301      	adds	r3, #1
 8002e38:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d1ee      	bne.n	8002e24 <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b23      	cmp	r3, #35	; 0x23
 8002e60:	f000 8088 	beq.w	8002f74 <extract_info+0x17c>
			break;
		}

		count_f = counter;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8002e68:	e00d      	b.n	8002e86 <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8002e6a:	7e3b      	ldrb	r3, [r7, #24]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	68f9      	ldr	r1, [r7, #12]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]

			counter++;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3301      	adds	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d1eb      	bne.n	8002e6a <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	7e3b      	ldrb	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8002e9c:	7e3b      	ldrb	r3, [r7, #24]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b23      	cmp	r3, #35	; 0x23
 8002ebc:	d05c      	beq.n	8002f78 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 8002ec2:	e00d      	b.n	8002ee0 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	701a      	strb	r2, [r3, #0]

			counter++;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d1eb      	bne.n	8002ec4 <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b23      	cmp	r3, #35	; 0x23
 8002f16:	d031      	beq.n	8002f7c <extract_info+0x184>
			break;
		}

		count_t = counter;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 8002f1c:	e00d      	b.n	8002f3a <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 8002f1e:	7dbb      	ldrb	r3, [r7, #22]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	4413      	add	r3, r2
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	440a      	add	r2, r1
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	701a      	strb	r2, [r3, #0]

			counter++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d1eb      	bne.n	8002f1e <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	7dbb      	ldrb	r3, [r7, #22]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8002f50:	7dbb      	ldrb	r3, [r7, #22]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	4413      	add	r3, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3301      	adds	r3, #1
 8002f64:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b23      	cmp	r3, #35	; 0x23
 8002f70:	d006      	beq.n	8002f80 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 8002f72:	e762      	b.n	8002e3a <extract_info+0x42>
			break;
 8002f74:	bf00      	nop
 8002f76:	e004      	b.n	8002f82 <extract_info+0x18a>
			break;
 8002f78:	bf00      	nop
 8002f7a:	e002      	b.n	8002f82 <extract_info+0x18a>
			break;
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <extract_info+0x18a>
			break;
 8002f80:	bf00      	nop
		}
	}

	counter = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 8002f86:	7efb      	ldrb	r3, [r7, #27]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d6      	b.n	800313e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8002f90:	7efb      	ldrb	r3, [r7, #27]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e03c      	b.n	8003012 <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8002f98:	7efb      	ldrb	r3, [r7, #27]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bfb8      	it	lt
 8002fa4:	425b      	neglt	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3b30      	subs	r3, #48	; 0x30
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd facf 	bl	8000554 <__aeabi_i2d>
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	460d      	mov	r5, r1
 8002fba:	69f8      	ldr	r0, [r7, #28]
 8002fbc:	f7fd faca 	bl	8000554 <__aeabi_i2d>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	ec43 2b11 	vmov	d1, r2, r3
 8002fc8:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8003148 <extract_info+0x350>
 8002fcc:	f00a fa3e 	bl	800d44c <pow>
 8002fd0:	ec53 2b10 	vmov	r2, r3, d0
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	f7fd fb26 	bl	8000628 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd faa3 	bl	8000534 <__aeabi_ui2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	f7fd f961 	bl	80002bc <__adddf3>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f7fd fde9 	bl	8000bd8 <__aeabi_d2uiz>
 8003006:	4602      	mov	r2, r0
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3b01      	subs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	dabf      	bge.n	8002f98 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 8003018:	7ebb      	ldrb	r3, [r7, #26]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 800301e:	2302      	movs	r3, #2
 8003020:	e08d      	b.n	800313e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 8003022:	7ebb      	ldrb	r3, [r7, #26]
 8003024:	3b01      	subs	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	e03c      	b.n	80030a4 <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 800302a:	7ebb      	ldrb	r3, [r7, #26]
 800302c:	3b01      	subs	r3, #1
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bfb8      	it	lt
 8003036:	425b      	neglt	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3b30      	subs	r3, #48	; 0x30
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fa86 	bl	8000554 <__aeabi_i2d>
 8003048:	4604      	mov	r4, r0
 800304a:	460d      	mov	r5, r1
 800304c:	69f8      	ldr	r0, [r7, #28]
 800304e:	f7fd fa81 	bl	8000554 <__aeabi_i2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	ec43 2b11 	vmov	d1, r2, r3
 800305a:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8003148 <extract_info+0x350>
 800305e:	f00a f9f5 	bl	800d44c <pow>
 8003062:	ec53 2b10 	vmov	r2, r3, d0
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd fadd 	bl	8000628 <__aeabi_dmul>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4614      	mov	r4, r2
 8003074:	461d      	mov	r5, r3
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa5a 	bl	8000534 <__aeabi_ui2d>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4620      	mov	r0, r4
 8003086:	4629      	mov	r1, r5
 8003088:	f7fd f918 	bl	80002bc <__adddf3>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	f7fd fda0 	bl	8000bd8 <__aeabi_d2uiz>
 8003098:	4602      	mov	r2, r0
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	dabf      	bge.n	800302a <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 80030aa:	7e7b      	ldrb	r3, [r7, #25]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 80030b0:	2303      	movs	r3, #3
 80030b2:	e044      	b.n	800313e <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 80030b4:	7e7b      	ldrb	r3, [r7, #25]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e03c      	b.n	8003136 <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 80030bc:	7e7b      	ldrb	r3, [r7, #25]
 80030be:	3b01      	subs	r3, #1
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bfb8      	it	lt
 80030c8:	425b      	neglt	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3b30      	subs	r3, #48	; 0x30
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fa3d 	bl	8000554 <__aeabi_i2d>
 80030da:	4604      	mov	r4, r0
 80030dc:	460d      	mov	r5, r1
 80030de:	69f8      	ldr	r0, [r7, #28]
 80030e0:	f7fd fa38 	bl	8000554 <__aeabi_i2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	ec43 2b11 	vmov	d1, r2, r3
 80030ec:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003148 <extract_info+0x350>
 80030f0:	f00a f9ac 	bl	800d44c <pow>
 80030f4:	ec53 2b10 	vmov	r2, r3, d0
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd fa94 	bl	8000628 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4614      	mov	r4, r2
 8003106:	461d      	mov	r5, r3
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fa11 	bl	8000534 <__aeabi_ui2d>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4620      	mov	r0, r4
 8003118:	4629      	mov	r1, r5
 800311a:	f7fd f8cf 	bl	80002bc <__adddf3>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd57 	bl	8000bd8 <__aeabi_d2uiz>
 800312a:	4602      	mov	r2, r0
 800312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312e:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	3b01      	subs	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	dabf      	bge.n	80030bc <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bdb0      	pop	{r4, r5, r7, pc}
 8003146:	bf00      	nop
 8003148:	00000000 	.word	0x00000000
 800314c:	40240000 	.word	0x40240000

08003150 <resetParameters>:


void resetParameters(void){
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
	fparam = 0;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <resetParameters+0x20>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
	sparam = 0;
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <resetParameters+0x24>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
	tparam = 0;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <resetParameters+0x28>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	2000047c 	.word	0x2000047c
 8003174:	20000480 	.word	0x20000480
 8003178:	20000484 	.word	0x20000484

0800317c <led_state_callback>:




void led_state_callback (TimerHandle_t xTimer){
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <led_state_callback+0x18>)
 8003186:	f004 ff2e 	bl	8007fe6 <GPIOxTooglePin>

}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000240 	.word	0x20000240

08003198 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <ITM_SendChar+0x48>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0e      	ldr	r2, [pc, #56]	; (80031e0 <ITM_SendChar+0x48>)
 80031a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <ITM_SendChar+0x4c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <ITM_SendChar+0x4c>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80031ba:	bf00      	nop
 80031bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f8      	beq.n	80031bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80031ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	6013      	str	r3, [r2, #0]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000edfc 	.word	0xe000edfc
 80031e4:	e0000e00 	.word	0xe0000e00

080031e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_kill>:

int _kill(int pid, int sig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003202:	f007 fae5 	bl	800a7d0 <__errno>
 8003206:	4603      	mov	r3, r0
 8003208:	2216      	movs	r2, #22
 800320a:	601a      	str	r2, [r3, #0]
	return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_exit>:

void _exit (int status)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ffe7 	bl	80031f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800322a:	e7fe      	b.n	800322a <_exit+0x12>

0800322c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800323e:	f3af 8000 	nop.w
 8003242:	4601      	mov	r1, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	b2ca      	uxtb	r2, r1
 800324c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	dbf0      	blt.n	800323e <_read+0x12>
	}

return len;
 800325c:	687b      	ldr	r3, [r7, #4]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e009      	b.n	800328c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	60ba      	str	r2, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff89 	bl	8003198 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3301      	adds	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	dbf1      	blt.n	8003278 <_write+0x12>
	}
	return len;
 8003294:	687b      	ldr	r3, [r7, #4]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_close>:

int _close(int file)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
	return -1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032c6:	605a      	str	r2, [r3, #4]
	return 0;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <_isatty>:

int _isatty(int file)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
	return 1;
 80032de:	2301      	movs	r3, #1
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003308:	480d      	ldr	r0, [pc, #52]	; (8003340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800330a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800330c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003310:	480c      	ldr	r0, [pc, #48]	; (8003344 <LoopForever+0x6>)
  ldr r1, =_edata
 8003312:	490d      	ldr	r1, [pc, #52]	; (8003348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <LoopForever+0xe>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003318:	e002      	b.n	8003320 <LoopCopyDataInit>

0800331a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800331c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800331e:	3304      	adds	r3, #4

08003320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003324:	d3f9      	bcc.n	800331a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003328:	4c0a      	ldr	r4, [pc, #40]	; (8003354 <LoopForever+0x16>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800332c:	e001      	b.n	8003332 <LoopFillZerobss>

0800332e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800332e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003330:	3204      	adds	r2, #4

08003332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003334:	d3fb      	bcc.n	800332e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003336:	f007 fa51 	bl	800a7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800333a:	f7fd fcbd 	bl	8000cb8 <main>

0800333e <LoopForever>:

LoopForever:
    b LoopForever
 800333e:	e7fe      	b.n	800333e <LoopForever>
  ldr   r0, =_estack
 8003340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003348:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800334c:	0800ff60 	.word	0x0800ff60
  ldr r2, =_sbss
 8003350:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003354:	200133f0 	.word	0x200133f0

08003358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC_IRQHandler>

0800335a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f103 0208 	add.w	r2, r3, #8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0208 	add.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f103 0208 	add.w	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	601a      	str	r2, [r3, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d103      	bne.n	800341c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e00c      	b.n	8003436 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3308      	adds	r3, #8
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e002      	b.n	800342a <vListInsert+0x2e>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d2f6      	bcs.n	8003424 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6892      	ldr	r2, [r2, #8]
 8003484:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6852      	ldr	r2, [r2, #4]
 800348e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d103      	bne.n	80034a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1e5a      	subs	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xQueueGenericReset+0x2a>
        __asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	60bb      	str	r3, [r7, #8]
    }
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80034ee:	f002 fadb 	bl	8005aa8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	441a      	add	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	3b01      	subs	r3, #1
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	441a      	add	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	22ff      	movs	r2, #255	; 0xff
 8003532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d114      	bne.n	800356e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01a      	beq.n	8003582 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3310      	adds	r3, #16
 8003550:	4618      	mov	r0, r3
 8003552:	f001 f913 	bl	800477c <xTaskRemoveFromEventList>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d012      	beq.n	8003582 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <xQueueGenericReset+0xcc>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	e009      	b.n	8003582 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3310      	adds	r3, #16
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fef1 	bl	800335a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3324      	adds	r3, #36	; 0x24
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff feec 	bl	800335a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003582:	f002 fac1 	bl	8005b08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003586:	2301      	movs	r3, #1
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003594:	b580      	push	{r7, lr}
 8003596:	b08c      	sub	sp, #48	; 0x30
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericCreate+0x2a>
        __asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	61bb      	str	r3, [r7, #24]
    }
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <xQueueGenericCreate+0x48>
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d101      	bne.n	80035e0 <xQueueGenericCreate+0x4c>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <xQueueGenericCreate+0x4e>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <xQueueGenericCreate+0x68>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	617b      	str	r3, [r7, #20]
    }
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003602:	d90a      	bls.n	800361a <xQueueGenericCreate+0x86>
        __asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	613b      	str	r3, [r7, #16]
    }
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	3350      	adds	r3, #80	; 0x50
 800361e:	4618      	mov	r0, r3
 8003620:	f002 fb64 	bl	8005cec <pvPortMalloc>
 8003624:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	3350      	adds	r3, #80	; 0x50
 8003634:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003636:	79fa      	ldrb	r2, [r7, #7]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f805 	bl	8003652 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003648:	6a3b      	ldr	r3, [r7, #32]
    }
 800364a:	4618      	mov	r0, r3
 800364c:	3728      	adds	r7, #40	; 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e002      	b.n	8003674 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003680:	2101      	movs	r1, #1
 8003682:	69b8      	ldr	r0, [r7, #24]
 8003684:	f7ff ff1e 	bl	80034c4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueGenericSend+0x32>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <xQueueGenericSend+0x40>
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <xQueueGenericSend+0x44>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <xQueueGenericSend+0x46>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <xQueueGenericSend+0x60>
        __asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d103      	bne.n	8003706 <xQueueGenericSend+0x6e>
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <xQueueGenericSend+0x72>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <xQueueGenericSend+0x74>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueGenericSend+0x8e>
        __asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	623b      	str	r3, [r7, #32]
    }
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003726:	f001 f9c5 	bl	8004ab4 <xTaskGetSchedulerState>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <xQueueGenericSend+0x9e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <xQueueGenericSend+0xa2>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <xQueueGenericSend+0xa4>
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xQueueGenericSend+0xbe>
        __asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61fb      	str	r3, [r7, #28]
    }
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003756:	f002 f9a7 	bl	8005aa8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <xQueueGenericSend+0xd4>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d129      	bne.n	80037c0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003772:	f000 fac6 	bl	8003d02 <prvCopyDataToQueue>
 8003776:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d010      	beq.n	80037a2 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	3324      	adds	r3, #36	; 0x24
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fff9 	bl	800477c <xTaskRemoveFromEventList>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <xQueueGenericSend+0x1f8>)
 8003792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	e00a      	b.n	80037b8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80037a8:	4b39      	ldr	r3, [pc, #228]	; (8003890 <xQueueGenericSend+0x1f8>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80037b8:	f002 f9a6 	bl	8005b08 <vPortExitCritical>
                return pdPASS;
 80037bc:	2301      	movs	r3, #1
 80037be:	e063      	b.n	8003888 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80037c6:	f002 f99f 	bl	8005b08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e05c      	b.n	8003888 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f831 	bl	8004840 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037e2:	f002 f991 	bl	8005b08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037e6:	f000 fdb9 	bl	800435c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037ea:	f002 f95d 	bl	8005aa8 <vPortEnterCritical>
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d103      	bne.n	8003804 <xQueueGenericSend+0x16c>
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800380a:	b25b      	sxtb	r3, r3
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d103      	bne.n	800381a <xQueueGenericSend+0x182>
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800381a:	f002 f975 	bl	8005b08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800381e:	1d3a      	adds	r2, r7, #4
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f001 f820 	bl	800486c <xTaskCheckForTimeOut>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d124      	bne.n	800387c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003832:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003834:	f000 fb5d 	bl	8003ef2 <prvIsQueueFull>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	3310      	adds	r3, #16
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 ff48 	bl	80046dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800384c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800384e:	f000 fae8 	bl	8003e22 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003852:	f000 fd91 	bl	8004378 <xTaskResumeAll>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	f47f af7c 	bne.w	8003756 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <xQueueGenericSend+0x1f8>)
 8003860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	e772      	b.n	8003756 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003872:	f000 fad6 	bl	8003e22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003876:	f000 fd7f 	bl	8004378 <xTaskResumeAll>
 800387a:	e76c      	b.n	8003756 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800387c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800387e:	f000 fad0 	bl	8003e22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003882:	f000 fd79 	bl	8004378 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003886:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003888:	4618      	mov	r0, r3
 800388a:	3738      	adds	r7, #56	; 0x38
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b090      	sub	sp, #64	; 0x40
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <xQueueGenericSendFromISR+0x3c>
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <xQueueGenericSendFromISR+0x40>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <xQueueGenericSendFromISR+0x42>
 80038d4:	2300      	movs	r3, #0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d103      	bne.n	80038fe <xQueueGenericSendFromISR+0x6a>
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <xQueueGenericSendFromISR+0x6e>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <xQueueGenericSendFromISR+0x70>
 8003902:	2300      	movs	r3, #0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	623b      	str	r3, [r7, #32]
    }
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800391e:	f002 f9a5 	bl	8005c6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003922:	f3ef 8211 	mrs	r2, BASEPRI
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	61fa      	str	r2, [r7, #28]
 8003938:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800393a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <xQueueGenericSendFromISR+0xbc>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d13e      	bne.n	80039ce <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003966:	f000 f9cc 	bl	8003d02 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800396a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d112      	bne.n	800399a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d025      	beq.n	80039c8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fefb 	bl	800477c <xTaskRemoveFromEventList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01d      	beq.n	80039c8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01a      	beq.n	80039c8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e016      	b.n	80039c8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800399a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800399e:	2b7f      	cmp	r3, #127	; 0x7f
 80039a0:	d10a      	bne.n	80039b8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	617b      	str	r3, [r7, #20]
    }
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039bc:	3301      	adds	r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	b25a      	sxtb	r2, r3
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80039c8:	2301      	movs	r3, #1
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80039cc:	e001      	b.n	80039d2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80039dc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3740      	adds	r7, #64	; 0x40
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <xQueueReceive+0x30>
        __asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	623b      	str	r3, [r7, #32]
    }
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueReceive+0x3e>
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <xQueueReceive+0x42>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <xQueueReceive+0x44>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xQueueReceive+0x5e>
        __asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	61fb      	str	r3, [r7, #28]
    }
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a46:	f001 f835 	bl	8004ab4 <xTaskGetSchedulerState>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <xQueueReceive+0x6e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <xQueueReceive+0x72>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueReceive+0x74>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <xQueueReceive+0x8e>
        __asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	61bb      	str	r3, [r7, #24]
    }
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a76:	f002 f817 	bl	8005aa8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01f      	beq.n	8003ac6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8a:	f000 f9a4 	bl	8003dd6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00f      	beq.n	8003abe <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	3310      	adds	r3, #16
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fe6a 	bl	800477c <xTaskRemoveFromEventList>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <xQueueReceive+0x1bc>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003abe:	f002 f823 	bl	8005b08 <vPortExitCritical>
                return pdPASS;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e069      	b.n	8003b9a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003acc:	f002 f81c 	bl	8005b08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e062      	b.n	8003b9a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ada:	f107 0310 	add.w	r3, r7, #16
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 feae 	bl	8004840 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ae8:	f002 f80e 	bl	8005b08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003aec:	f000 fc36 	bl	800435c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003af0:	f001 ffda 	bl	8005aa8 <vPortEnterCritical>
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d103      	bne.n	8003b0a <xQueueReceive+0x122>
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d103      	bne.n	8003b20 <xQueueReceive+0x138>
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b20:	f001 fff2 	bl	8005b08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b24:	1d3a      	adds	r2, r7, #4
 8003b26:	f107 0310 	add.w	r3, r7, #16
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fe9d 	bl	800486c <xTaskCheckForTimeOut>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d123      	bne.n	8003b80 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3a:	f000 f9c4 	bl	8003ec6 <prvIsQueueEmpty>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fdc5 	bl	80046dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b54:	f000 f965 	bl	8003e22 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003b58:	f000 fc0e 	bl	8004378 <xTaskResumeAll>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d189      	bne.n	8003a76 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <xQueueReceive+0x1bc>)
 8003b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	e780      	b.n	8003a76 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b76:	f000 f954 	bl	8003e22 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b7a:	f000 fbfd 	bl	8004378 <xTaskResumeAll>
 8003b7e:	e77a      	b.n	8003a76 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b82:	f000 f94e 	bl	8003e22 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b86:	f000 fbf7 	bl	8004378 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8c:	f000 f99b 	bl	8003ec6 <prvIsQueueEmpty>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f43f af6f 	beq.w	8003a76 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003b98:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3730      	adds	r7, #48	; 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b090      	sub	sp, #64	; 0x40
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <xQueueReceiveFromISR+0x3a>
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <xQueueReceiveFromISR+0x3e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <xQueueReceiveFromISR+0x40>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c02:	f002 f833 	bl	8005c6c <vPortValidateInterruptPriority>
        __asm volatile
 8003c06:	f3ef 8211 	mrs	r2, BASEPRI
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	623a      	str	r2, [r7, #32]
 8003c1c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8003c1e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d03e      	beq.n	8003cac <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c3c:	f000 f8cb 	bl	8003dd6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8003c48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d112      	bne.n	8003c78 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d025      	beq.n	8003ca6 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fd8c 	bl	800477c <xTaskRemoveFromEventList>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01d      	beq.n	8003ca6 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01a      	beq.n	8003ca6 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e016      	b.n	8003ca6 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8003c78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c7e:	d10a      	bne.n	8003c96 <xQueueReceiveFromISR+0xee>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	61bb      	str	r3, [r7, #24]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	b25a      	sxtb	r2, r3
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003caa:	e001      	b.n	8003cb0 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f383 8811 	msr	BASEPRI, r3
    }
 8003cba:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3740      	adds	r7, #64	; 0x40
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	60bb      	str	r3, [r7, #8]
    }
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8003cea:	f001 fedd 	bl	8005aa8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003cf4:	f001 ff08 	bl	8005b08 <vPortExitCritical>

    return uxReturn;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d14d      	bne.n	8003dc4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fedf 	bl	8004af0 <xTaskPriorityDisinherit>
 8003d32:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
 8003d3a:	e043      	b.n	8003dc4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6858      	ldr	r0, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	f006 fd71 	bl	800a834 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	441a      	add	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d32b      	bcc.n	8003dc4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e026      	b.n	8003dc4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68d8      	ldr	r0, [r3, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	f006 fd57 	bl	800a834 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	425b      	negs	r3, r3
 8003d90:	441a      	add	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d207      	bcs.n	8003db2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	425b      	negs	r3, r3
 8003dac:	441a      	add	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d105      	bne.n	8003dc4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d018      	beq.n	8003e1a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	441a      	add	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d303      	bcc.n	8003e0a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68d9      	ldr	r1, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	461a      	mov	r2, r3
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f006 fd0d 	bl	800a834 <memcpy>
    }
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003e2a:	f001 fe3d 	bl	8005aa8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e34:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e36:	e011      	b.n	8003e5c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3324      	adds	r3, #36	; 0x24
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fc99 	bl	800477c <xTaskRemoveFromEventList>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003e50:	f000 fd72 	bl	8004938 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dce9      	bgt.n	8003e38 <prvUnlockQueue+0x16>
 8003e64:	e000      	b.n	8003e68 <prvUnlockQueue+0x46>
                        break;
 8003e66:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003e70:	f001 fe4a 	bl	8005b08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003e74:	f001 fe18 	bl	8005aa8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e7e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e80:	e011      	b.n	8003ea6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fc74 	bl	800477c <xTaskRemoveFromEventList>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003e9a:	f000 fd4d 	bl	8004938 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003e9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	dce9      	bgt.n	8003e82 <prvUnlockQueue+0x60>
 8003eae:	e000      	b.n	8003eb2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003eb0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	22ff      	movs	r2, #255	; 0xff
 8003eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003eba:	f001 fe25 	bl	8005b08 <vPortExitCritical>
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ece:	f001 fdeb 	bl	8005aa8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e001      	b.n	8003ee4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ee4:	f001 fe10 	bl	8005b08 <vPortExitCritical>

    return xReturn;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003efa:	f001 fdd5 	bl	8005aa8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d102      	bne.n	8003f10 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e001      	b.n	8003f14 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003f14:	f001 fdf8 	bl	8005b08 <vPortExitCritical>

    return xReturn;
 8003f18:	68fb      	ldr	r3, [r7, #12]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8003f22:	b480      	push	{r7}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	60fb      	str	r3, [r7, #12]
    }
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d102      	bne.n	8003f5c <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e001      	b.n	8003f60 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003f60:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e014      	b.n	8003faa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <vQueueAddToRegistry+0x50>)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f8c:	490c      	ldr	r1, [pc, #48]	; (8003fc0 <vQueueAddToRegistry+0x50>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <vQueueAddToRegistry+0x50>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003fa2:	e006      	b.n	8003fb2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b07      	cmp	r3, #7
 8003fae:	d9e7      	bls.n	8003f80 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000618 	.word	0x20000618

08003fc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003fd4:	f001 fd68 	bl	8005aa8 <vPortEnterCritical>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d103      	bne.n	8003fee <vQueueWaitForMessageRestricted+0x2a>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d103      	bne.n	8004004 <vQueueWaitForMessageRestricted+0x40>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004004:	f001 fd80 	bl	8005b08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fb83 	bl	8004724 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f7ff feff 	bl	8003e22 <prvUnlockQueue>
    }
 8004024:	bf00      	nop
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af04      	add	r7, sp, #16
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fe53 	bl	8005cec <pvPortMalloc>
 8004046:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00e      	beq.n	800406c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800404e:	2058      	movs	r0, #88	; 0x58
 8004050:	f001 fe4c 	bl	8005cec <pvPortMalloc>
 8004054:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
 8004062:	e005      	b.n	8004070 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004064:	6978      	ldr	r0, [r7, #20]
 8004066:	f001 ff21 	bl	8005eac <vPortFree>
 800406a:	e001      	b.n	8004070 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d013      	beq.n	800409e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	2300      	movs	r3, #0
 800407a:	9303      	str	r3, [sp, #12]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	9302      	str	r3, [sp, #8]
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f80e 	bl	80040ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004092:	69f8      	ldr	r0, [r7, #28]
 8004094:	f000 f8a2 	bl	80041dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004098:	2301      	movs	r3, #1
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e002      	b.n	80040a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800409e:	f04f 33ff 	mov.w	r3, #4294967295
 80040a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80040a4:	69bb      	ldr	r3, [r7, #24]
    }
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b088      	sub	sp, #32
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	461a      	mov	r2, r3
 80040c6:	21a5      	movs	r1, #165	; 0xa5
 80040c8:	f006 fbc2 	bl	800a850 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040d6:	3b01      	subs	r3, #1
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f023 0307 	bic.w	r3, r3, #7
 80040e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <prvInitialiseNewTask+0x58>
        __asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	617b      	str	r3, [r7, #20]
    }
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01f      	beq.n	800414c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e012      	b.n	8004138 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	7819      	ldrb	r1, [r3, #0]
 800411a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	3334      	adds	r3, #52	; 0x34
 8004122:	460a      	mov	r2, r1
 8004124:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b09      	cmp	r3, #9
 800413c:	d9e9      	bls.n	8004112 <prvInitialiseNewTask+0x64>
 800413e:	e000      	b.n	8004142 <prvInitialiseNewTask+0x94>
            {
                break;
 8004140:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800414a:	e003      	b.n	8004154 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b04      	cmp	r3, #4
 8004158:	d901      	bls.n	800415e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800415a:	2304      	movs	r3, #4
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004168:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	2200      	movs	r2, #0
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	3304      	adds	r3, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff f910 	bl	800339a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	3318      	adds	r3, #24
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff f90b 	bl	800339a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004188:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	f1c3 0205 	rsb	r2, r3, #5
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004198:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	3350      	adds	r3, #80	; 0x50
 800419e:	2204      	movs	r2, #4
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f006 fb54 	bl	800a850 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	3354      	adds	r3, #84	; 0x54
 80041ac:	2201      	movs	r2, #1
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f006 fb4d 	bl	800a850 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	68f9      	ldr	r1, [r7, #12]
 80041ba:	69b8      	ldr	r0, [r7, #24]
 80041bc:	f001 fb48 	bl	8005850 <pxPortInitialiseStack>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041d2:	bf00      	nop
 80041d4:	3720      	adds	r7, #32
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80041e4:	f001 fc60 	bl	8005aa8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80041e8:	4b2c      	ldr	r3, [pc, #176]	; (800429c <prvAddNewTaskToReadyList+0xc0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	4a2b      	ldr	r2, [pc, #172]	; (800429c <prvAddNewTaskToReadyList+0xc0>)
 80041f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <prvAddNewTaskToReadyList+0xc4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80041fa:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <prvAddNewTaskToReadyList+0xc4>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004200:	4b26      	ldr	r3, [pc, #152]	; (800429c <prvAddNewTaskToReadyList+0xc0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d110      	bne.n	800422a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004208:	f000 fbba 	bl	8004980 <prvInitialiseTaskLists>
 800420c:	e00d      	b.n	800422a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800420e:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <prvAddNewTaskToReadyList+0xc8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <prvAddNewTaskToReadyList+0xc4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	429a      	cmp	r2, r3
 8004222:	d802      	bhi.n	800422a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <prvAddNewTaskToReadyList+0xc4>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800422a:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <prvAddNewTaskToReadyList+0xcc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <prvAddNewTaskToReadyList+0xcc>)
 8004232:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004234:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <prvAddNewTaskToReadyList+0xcc>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <prvAddNewTaskToReadyList+0xd0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <prvAddNewTaskToReadyList+0xd0>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <prvAddNewTaskToReadyList+0xd4>)
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7ff f8a5 	bl	80033b4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800426a:	f001 fc4d 	bl	8005b08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <prvAddNewTaskToReadyList+0xc8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvAddNewTaskToReadyList+0xc4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d207      	bcs.n	8004294 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <prvAddNewTaskToReadyList+0xd8>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000730 	.word	0x20000730
 80042a0:	20000658 	.word	0x20000658
 80042a4:	2000073c 	.word	0x2000073c
 80042a8:	2000074c 	.word	0x2000074c
 80042ac:	20000738 	.word	0x20000738
 80042b0:	2000065c 	.word	0x2000065c
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80042be:	4b20      	ldr	r3, [pc, #128]	; (8004340 <vTaskStartScheduler+0x88>)
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2300      	movs	r3, #0
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	2300      	movs	r3, #0
 80042c8:	2282      	movs	r2, #130	; 0x82
 80042ca:	491e      	ldr	r1, [pc, #120]	; (8004344 <vTaskStartScheduler+0x8c>)
 80042cc:	481e      	ldr	r0, [pc, #120]	; (8004348 <vTaskStartScheduler+0x90>)
 80042ce:	f7ff fead 	bl	800402c <xTaskCreate>
 80042d2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80042da:	f000 ff4b 	bl	8005174 <xTimerCreateTimerTask>
 80042de:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d116      	bne.n	8004314 <vTaskStartScheduler+0x5c>
        __asm volatile
 80042e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	60bb      	str	r3, [r7, #8]
    }
 80042f8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80042fa:	4b14      	ldr	r3, [pc, #80]	; (800434c <vTaskStartScheduler+0x94>)
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004300:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <vTaskStartScheduler+0x98>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <vTaskStartScheduler+0x9c>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800430e:	f001 fb29 	bl	8005964 <xPortStartScheduler>
 8004312:	e00e      	b.n	8004332 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d10a      	bne.n	8004332 <vTaskStartScheduler+0x7a>
        __asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	607b      	str	r3, [r7, #4]
    }
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <vTaskStartScheduler+0xa0>)
 8004334:	681b      	ldr	r3, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000754 	.word	0x20000754
 8004344:	0800f8e8 	.word	0x0800f8e8
 8004348:	08004951 	.word	0x08004951
 800434c:	20000750 	.word	0x20000750
 8004350:	2000073c 	.word	0x2000073c
 8004354:	20000734 	.word	0x20000734
 8004358:	2000001c 	.word	0x2000001c

0800435c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <vTaskSuspendAll+0x18>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	4a03      	ldr	r2, [pc, #12]	; (8004374 <vTaskSuspendAll+0x18>)
 8004368:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800436a:	bf00      	nop
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000758 	.word	0x20000758

08004378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004386:	4b41      	ldr	r3, [pc, #260]	; (800448c <xTaskResumeAll+0x114>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	603b      	str	r3, [r7, #0]
    }
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80043a4:	f001 fb80 	bl	8005aa8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80043a8:	4b38      	ldr	r3, [pc, #224]	; (800448c <xTaskResumeAll+0x114>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a37      	ldr	r2, [pc, #220]	; (800448c <xTaskResumeAll+0x114>)
 80043b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b2:	4b36      	ldr	r3, [pc, #216]	; (800448c <xTaskResumeAll+0x114>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d161      	bne.n	800447e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043ba:	4b35      	ldr	r3, [pc, #212]	; (8004490 <xTaskResumeAll+0x118>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d05d      	beq.n	800447e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043c2:	e02e      	b.n	8004422 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c4:	4b33      	ldr	r3, [pc, #204]	; (8004494 <xTaskResumeAll+0x11c>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3318      	adds	r3, #24
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f84c 	bl	800346e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f847 	bl	800346e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <xTaskResumeAll+0x120>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a2a      	ldr	r2, [pc, #168]	; (8004498 <xTaskResumeAll+0x120>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a27      	ldr	r2, [pc, #156]	; (800449c <xTaskResumeAll+0x124>)
 8004400:	441a      	add	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7fe ffd3 	bl	80033b4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <xTaskResumeAll+0x128>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800441c:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <xTaskResumeAll+0x12c>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <xTaskResumeAll+0x11c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1cc      	bne.n	80043c4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004430:	f000 fb24 	bl	8004a7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004434:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <xTaskResumeAll+0x130>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004440:	f000 f846 	bl	80044d0 <xTaskIncrementTick>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800444a:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <xTaskResumeAll+0x12c>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f1      	bne.n	8004440 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <xTaskResumeAll+0x130>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <xTaskResumeAll+0x12c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800446a:	2301      	movs	r3, #1
 800446c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <xTaskResumeAll+0x134>)
 8004470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800447e:	f001 fb43 	bl	8005b08 <vPortExitCritical>

    return xAlreadyYielded;
 8004482:	68bb      	ldr	r3, [r7, #8]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000758 	.word	0x20000758
 8004490:	20000730 	.word	0x20000730
 8004494:	200006f0 	.word	0x200006f0
 8004498:	20000738 	.word	0x20000738
 800449c:	2000065c 	.word	0x2000065c
 80044a0:	20000658 	.word	0x20000658
 80044a4:	20000744 	.word	0x20000744
 80044a8:	20000740 	.word	0x20000740
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <xTaskGetTickCount+0x1c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80044bc:	687b      	ldr	r3, [r7, #4]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000734 	.word	0x20000734

080044d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044da:	4b47      	ldr	r3, [pc, #284]	; (80045f8 <xTaskIncrementTick+0x128>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d17f      	bne.n	80045e2 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <xTaskIncrementTick+0x12c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80044ea:	4a44      	ldr	r2, [pc, #272]	; (80045fc <xTaskIncrementTick+0x12c>)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d120      	bne.n	8004538 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80044f6:	4b42      	ldr	r3, [pc, #264]	; (8004600 <xTaskIncrementTick+0x130>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <xTaskIncrementTick+0x46>
        __asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	603b      	str	r3, [r7, #0]
    }
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTaskIncrementTick+0x44>
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <xTaskIncrementTick+0x130>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	4b39      	ldr	r3, [pc, #228]	; (8004604 <xTaskIncrementTick+0x134>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a37      	ldr	r2, [pc, #220]	; (8004600 <xTaskIncrementTick+0x130>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4a37      	ldr	r2, [pc, #220]	; (8004604 <xTaskIncrementTick+0x134>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <xTaskIncrementTick+0x138>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3301      	adds	r3, #1
 8004530:	4a35      	ldr	r2, [pc, #212]	; (8004608 <xTaskIncrementTick+0x138>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	f000 faa2 	bl	8004a7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004538:	4b34      	ldr	r3, [pc, #208]	; (800460c <xTaskIncrementTick+0x13c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	429a      	cmp	r2, r3
 8004540:	d348      	bcc.n	80045d4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004542:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <xTaskIncrementTick+0x130>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	4b2f      	ldr	r3, [pc, #188]	; (800460c <xTaskIncrementTick+0x13c>)
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	601a      	str	r2, [r3, #0]
                    break;
 8004554:	e03e      	b.n	80045d4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004556:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <xTaskIncrementTick+0x130>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d203      	bcs.n	8004576 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800456e:	4a27      	ldr	r2, [pc, #156]	; (800460c <xTaskIncrementTick+0x13c>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004574:	e02e      	b.n	80045d4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe ff77 	bl	800346e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	3318      	adds	r3, #24
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe ff6e 	bl	800346e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	2201      	movs	r2, #1
 8004598:	409a      	lsls	r2, r3
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <xTaskIncrementTick+0x140>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <xTaskIncrementTick+0x140>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4a18      	ldr	r2, [pc, #96]	; (8004614 <xTaskIncrementTick+0x144>)
 80045b2:	441a      	add	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fe fefa 	bl	80033b4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <xTaskIncrementTick+0x148>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d3b9      	bcc.n	8004542 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045d2:	e7b6      	b.n	8004542 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <xTaskIncrementTick+0x14c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e004      	b.n	80045ec <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <xTaskIncrementTick+0x150>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <xTaskIncrementTick+0x150>)
 80045ea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80045ec:	697b      	ldr	r3, [r7, #20]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000758 	.word	0x20000758
 80045fc:	20000734 	.word	0x20000734
 8004600:	200006e8 	.word	0x200006e8
 8004604:	200006ec 	.word	0x200006ec
 8004608:	20000748 	.word	0x20000748
 800460c:	20000750 	.word	0x20000750
 8004610:	20000738 	.word	0x20000738
 8004614:	2000065c 	.word	0x2000065c
 8004618:	20000658 	.word	0x20000658
 800461c:	20000744 	.word	0x20000744
 8004620:	20000740 	.word	0x20000740

08004624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <vTaskSwitchContext+0xa4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004632:	4b26      	ldr	r3, [pc, #152]	; (80046cc <vTaskSwitchContext+0xa8>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004638:	e03f      	b.n	80046ba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <vTaskSwitchContext+0xa8>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004640:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <vTaskSwitchContext+0xac>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	f1c3 031f 	rsb	r3, r3, #31
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	491f      	ldr	r1, [pc, #124]	; (80046d4 <vTaskSwitchContext+0xb0>)
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <vTaskSwitchContext+0x5c>
        __asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	607b      	str	r3, [r7, #4]
    }
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <vTaskSwitchContext+0x5a>
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <vTaskSwitchContext+0xb0>)
 800468c:	4413      	add	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3308      	adds	r3, #8
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d104      	bne.n	80046b0 <vTaskSwitchContext+0x8c>
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <vTaskSwitchContext+0xb4>)
 80046b8:	6013      	str	r3, [r2, #0]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000758 	.word	0x20000758
 80046cc:	20000744 	.word	0x20000744
 80046d0:	20000738 	.word	0x20000738
 80046d4:	2000065c 	.word	0x2000065c
 80046d8:	20000658 	.word	0x20000658

080046dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	60fb      	str	r3, [r7, #12]
    }
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <vTaskPlaceOnEventList+0x44>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3318      	adds	r3, #24
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe fe76 	bl	80033fc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004710:	2101      	movs	r1, #1
 8004712:	6838      	ldr	r0, [r7, #0]
 8004714:	f000 fcc8 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000658 	.word	0x20000658

08004724 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	617b      	str	r3, [r7, #20]
    }
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <vTaskPlaceOnEventListRestricted+0x54>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3318      	adds	r3, #24
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7fe fe2d 	bl	80033b4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004760:	f04f 33ff 	mov.w	r3, #4294967295
 8004764:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 fc9d 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
    }
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000658 	.word	0x20000658

0800477c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
    }
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	3318      	adds	r3, #24
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fe5e 	bl	800346e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <xTaskRemoveFromEventList+0xac>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11c      	bne.n	80047f4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3304      	adds	r3, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fe55 	bl	800346e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	2201      	movs	r2, #1
 80047ca:	409a      	lsls	r2, r3
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <xTaskRemoveFromEventList+0xb0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	4a16      	ldr	r2, [pc, #88]	; (800482c <xTaskRemoveFromEventList+0xb0>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <xTaskRemoveFromEventList+0xb4>)
 80047e4:	441a      	add	r2, r3
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe fde1 	bl	80033b4 <vListInsertEnd>
 80047f2:	e005      	b.n	8004800 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3318      	adds	r3, #24
 80047f8:	4619      	mov	r1, r3
 80047fa:	480e      	ldr	r0, [pc, #56]	; (8004834 <xTaskRemoveFromEventList+0xb8>)
 80047fc:	f7fe fdda 	bl	80033b4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <xTaskRemoveFromEventList+0xbc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	429a      	cmp	r2, r3
 800480c:	d905      	bls.n	800481a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800480e:	2301      	movs	r3, #1
 8004810:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <xTaskRemoveFromEventList+0xc0>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e001      	b.n	800481e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800481e:	697b      	ldr	r3, [r7, #20]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000758 	.word	0x20000758
 800482c:	20000738 	.word	0x20000738
 8004830:	2000065c 	.word	0x2000065c
 8004834:	200006f0 	.word	0x200006f0
 8004838:	20000658 	.word	0x20000658
 800483c:	20000744 	.word	0x20000744

08004840 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <vTaskInternalSetTimeOutState+0x24>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <vTaskInternalSetTimeOutState+0x28>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20000748 	.word	0x20000748
 8004868:	20000734 	.word	0x20000734

0800486c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	613b      	str	r3, [r7, #16]
    }
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
    }
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80048ae:	f001 f8fb 	bl	8005aa8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80048b2:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <xTaskCheckForTimeOut+0xc4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d102      	bne.n	80048d2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e026      	b.n	8004920 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b17      	ldr	r3, [pc, #92]	; (8004934 <xTaskCheckForTimeOut+0xc8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d00a      	beq.n	80048f4 <xTaskCheckForTimeOut+0x88>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d305      	bcc.n	80048f4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e015      	b.n	8004920 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d20b      	bcs.n	8004916 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	1ad2      	subs	r2, r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff98 	bl	8004840 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e004      	b.n	8004920 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004920:	f001 f8f2 	bl	8005b08 <vPortExitCritical>

    return xReturn;
 8004924:	69fb      	ldr	r3, [r7, #28]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000734 	.word	0x20000734
 8004934:	20000748 	.word	0x20000748

08004938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <vTaskMissedYield+0x14>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000744 	.word	0x20000744

08004950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004958:	f000 f852 	bl	8004a00 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <prvIdleTask+0x28>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d9f9      	bls.n	8004958 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <prvIdleTask+0x2c>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004974:	e7f0      	b.n	8004958 <prvIdleTask+0x8>
 8004976:	bf00      	nop
 8004978:	2000065c 	.word	0x2000065c
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	e00c      	b.n	80049a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <prvInitialiseTaskLists+0x60>)
 8004998:	4413      	add	r3, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe fcdd 	bl	800335a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3301      	adds	r3, #1
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d9ef      	bls.n	800498c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80049ac:	480d      	ldr	r0, [pc, #52]	; (80049e4 <prvInitialiseTaskLists+0x64>)
 80049ae:	f7fe fcd4 	bl	800335a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80049b2:	480d      	ldr	r0, [pc, #52]	; (80049e8 <prvInitialiseTaskLists+0x68>)
 80049b4:	f7fe fcd1 	bl	800335a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80049b8:	480c      	ldr	r0, [pc, #48]	; (80049ec <prvInitialiseTaskLists+0x6c>)
 80049ba:	f7fe fcce 	bl	800335a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80049be:	480c      	ldr	r0, [pc, #48]	; (80049f0 <prvInitialiseTaskLists+0x70>)
 80049c0:	f7fe fccb 	bl	800335a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80049c4:	480b      	ldr	r0, [pc, #44]	; (80049f4 <prvInitialiseTaskLists+0x74>)
 80049c6:	f7fe fcc8 	bl	800335a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <prvInitialiseTaskLists+0x78>)
 80049cc:	4a05      	ldr	r2, [pc, #20]	; (80049e4 <prvInitialiseTaskLists+0x64>)
 80049ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <prvInitialiseTaskLists+0x7c>)
 80049d2:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <prvInitialiseTaskLists+0x68>)
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	2000065c 	.word	0x2000065c
 80049e4:	200006c0 	.word	0x200006c0
 80049e8:	200006d4 	.word	0x200006d4
 80049ec:	200006f0 	.word	0x200006f0
 80049f0:	20000704 	.word	0x20000704
 80049f4:	2000071c 	.word	0x2000071c
 80049f8:	200006e8 	.word	0x200006e8
 80049fc:	200006ec 	.word	0x200006ec

08004a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a06:	e019      	b.n	8004a3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004a08:	f001 f84e 	bl	8005aa8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <prvCheckTasksWaitingTermination+0x50>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fd28 	bl	800346e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <prvCheckTasksWaitingTermination+0x54>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <prvCheckTasksWaitingTermination+0x54>)
 8004a26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <prvCheckTasksWaitingTermination+0x58>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <prvCheckTasksWaitingTermination+0x58>)
 8004a30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004a32:	f001 f869 	bl	8005b08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f810 	bl	8004a5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <prvCheckTasksWaitingTermination+0x58>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e1      	bne.n	8004a08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000704 	.word	0x20000704
 8004a54:	20000730 	.word	0x20000730
 8004a58:	20000718 	.word	0x20000718

08004a5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fa1f 	bl	8005eac <vPortFree>
                vPortFree( pxTCB );
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f001 fa1c 	bl	8005eac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <prvResetNextTaskUnblockTime+0x30>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <prvResetNextTaskUnblockTime+0x34>)
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004a92:	e005      	b.n	8004aa0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <prvResetNextTaskUnblockTime+0x30>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <prvResetNextTaskUnblockTime+0x34>)
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	200006e8 	.word	0x200006e8
 8004ab0:	20000750 	.word	0x20000750

08004ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <xTaskGetSchedulerState+0x34>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	e008      	b.n	8004ada <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <xTaskGetSchedulerState+0x38>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	607b      	str	r3, [r7, #4]
 8004ad4:	e001      	b.n	8004ada <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ada:	687b      	ldr	r3, [r7, #4]
    }
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	2000073c 	.word	0x2000073c
 8004aec:	20000758 	.word	0x20000758

08004af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d063      	beq.n	8004bce <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004b06:	4b34      	ldr	r3, [pc, #208]	; (8004bd8 <xTaskPriorityDisinherit+0xe8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d00a      	beq.n	8004b26 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
    }
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60bb      	str	r3, [r7, #8]
    }
 8004b40:	bf00      	nop
 8004b42:	e7fe      	b.n	8004b42 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b48:	1e5a      	subs	r2, r3, #1
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d039      	beq.n	8004bce <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d135      	bne.n	8004bce <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fc81 	bl	800346e <uxListRemove>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	2201      	movs	r2, #1
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <xTaskPriorityDisinherit+0xec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4013      	ands	r3, r2
 8004b84:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <xTaskPriorityDisinherit+0xec>)
 8004b86:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f1c3 0205 	rsb	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <xTaskPriorityDisinherit+0xec>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <xTaskPriorityDisinherit+0xec>)
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <xTaskPriorityDisinherit+0xf0>)
 8004bbc:	441a      	add	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f7fe fbf5 	bl	80033b4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004bce:	697b      	ldr	r3, [r7, #20]
    }
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000658 	.word	0x20000658
 8004bdc:	20000738 	.word	0x20000738
 8004be0:	2000065c 	.word	0x2000065c

08004be4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	613b      	str	r3, [r7, #16]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004c0e:	f000 ff4b 	bl	8005aa8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004c12:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	3354      	adds	r3, #84	; 0x54
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d022      	beq.n	8004c6a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	3214      	adds	r2, #20
 8004c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	43d2      	mvns	r2, r2
 8004c34:	4011      	ands	r1, r2
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	3214      	adds	r2, #20
 8004c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004c3e:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	3354      	adds	r3, #84	; 0x54
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c52:	2101      	movs	r1, #1
 8004c54:	6a38      	ldr	r0, [r7, #32]
 8004c56:	f000 fa27 	bl	80050a8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004c5a:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <xTaskGenericNotifyWait+0xfc>)
 8004c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c6a:	f000 ff4d 	bl	8005b08 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004c6e:	f000 ff1b 	bl	8005aa8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	3214      	adds	r2, #20
 8004c80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004c88:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	3354      	adds	r3, #84	; 0x54
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d002      	beq.n	8004ca0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e00e      	b.n	8004cbe <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004ca0:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	3214      	adds	r2, #20
 8004ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	43d2      	mvns	r2, r2
 8004cb0:	4011      	ands	r1, r2
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	3214      	adds	r2, #20
 8004cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <xTaskGenericNotifyWait+0xf8>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3354      	adds	r3, #84	; 0x54
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004ccc:	f000 ff1c 	bl	8005b08 <vPortExitCritical>

        return xReturn;
 8004cd0:	697b      	ldr	r3, [r7, #20]
    }
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000658 	.word	0x20000658
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <xTaskGenericNotify+0x2e>
        __asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	623b      	str	r3, [r7, #32]
    }
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTaskGenericNotify+0x4a>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	61fb      	str	r3, [r7, #28]
    }
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8004d32:	f000 feb9 	bl	8005aa8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d006      	beq.n	8004d4a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	3214      	adds	r2, #20
 8004d42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4413      	add	r3, r2
 8004d50:	3354      	adds	r3, #84	; 0x54
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3354      	adds	r3, #84	; 0x54
 8004d60:	2202      	movs	r2, #2
 8004d62:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d83b      	bhi.n	8004de2 <xTaskGenericNotify+0xfe>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <xTaskGenericNotify+0x8c>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004e01 	.word	0x08004e01
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004db9 	.word	0x08004db9
 8004d80:	08004dc7 	.word	0x08004dc7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	3214      	adds	r2, #20
 8004d8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	ea42 0103 	orr.w	r1, r2, r3
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	3214      	adds	r2, #20
 8004d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004d9e:	e032      	b.n	8004e06 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	3214      	adds	r2, #20
 8004da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	3214      	adds	r2, #20
 8004db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004db6:	e026      	b.n	8004e06 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	3214      	adds	r2, #20
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004dc4:	e01f      	b.n	8004e06 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d006      	beq.n	8004ddc <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	3214      	adds	r2, #20
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004dda:	e014      	b.n	8004e06 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8004de0:	e011      	b.n	8004e06 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <xTaskGenericNotify+0x1ac>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00c      	beq.n	8004e04 <xTaskGenericNotify+0x120>
        __asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	61bb      	str	r3, [r7, #24]
    }
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <xTaskGenericNotify+0x11a>
                    break;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <xTaskGenericNotify+0x122>

                    break;
 8004e04:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d139      	bne.n	8004e82 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fb2b 	bl	800346e <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <xTaskGenericNotify+0x1b0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <xTaskGenericNotify+0x1b0>)
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <xTaskGenericNotify+0x1b4>)
 8004e38:	441a      	add	r2, r3
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fe fab7 	bl	80033b4 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <xTaskGenericNotify+0x180>
        __asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	617b      	str	r3, [r7, #20]
    }
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <xTaskGenericNotify+0x1b8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d907      	bls.n	8004e82 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <xTaskGenericNotify+0x1bc>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e82:	f000 fe41 	bl	8005b08 <vPortExitCritical>

        return xReturn;
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000734 	.word	0x20000734
 8004e94:	20000738 	.word	0x20000738
 8004e98:	2000065c 	.word	0x2000065c
 8004e9c:	20000658 	.word	0x20000658
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b090      	sub	sp, #64	; 0x40
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004eee:	f000 febd 	bl	8005c6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8004ef6:	f3ef 8211 	mrs	r2, BASEPRI
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f0c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	3214      	adds	r2, #20
 8004f1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3354      	adds	r3, #84	; 0x54
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3354      	adds	r3, #84	; 0x54
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d83b      	bhi.n	8004fbe <xTaskGenericNotifyFromISR+0x11a>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <xTaskGenericNotifyFromISR+0xa8>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004fdd 	.word	0x08004fdd
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004fa3 	.word	0x08004fa3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	3214      	adds	r2, #20
 8004f66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	ea42 0103 	orr.w	r1, r2, r3
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	3214      	adds	r2, #20
 8004f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004f7a:	e032      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	3214      	adds	r2, #20
 8004f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	3214      	adds	r2, #20
 8004f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004f92:	e026      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	3214      	adds	r2, #20
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004fa0:	e01f      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d006      	beq.n	8004fb8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	3214      	adds	r2, #20
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004fb6:	e014      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8004fbc:	e011      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004fbe:	4b33      	ldr	r3, [pc, #204]	; (800508c <xTaskGenericNotifyFromISR+0x1e8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	61fb      	str	r3, [r7, #28]
    }
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <xTaskGenericNotifyFromISR+0x136>
                    break;
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8004fe0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004fe2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d145      	bne.n	8005076 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	61bb      	str	r3, [r7, #24]
    }
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <xTaskGenericNotifyFromISR+0x1ec>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11c      	bne.n	800504a <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fa2a 	bl	800346e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	2201      	movs	r2, #1
 8005020:	409a      	lsls	r2, r3
 8005022:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <xTaskGenericNotifyFromISR+0x1f0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4313      	orrs	r3, r2
 8005028:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <xTaskGenericNotifyFromISR+0x1f0>)
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4a17      	ldr	r2, [pc, #92]	; (8005098 <xTaskGenericNotifyFromISR+0x1f4>)
 800503a:	441a      	add	r2, r3
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fe f9b6 	bl	80033b4 <vListInsertEnd>
 8005048:	e005      	b.n	8005056 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	3318      	adds	r3, #24
 800504e:	4619      	mov	r1, r3
 8005050:	4812      	ldr	r0, [pc, #72]	; (800509c <xTaskGenericNotifyFromISR+0x1f8>)
 8005052:	f7fe f9af 	bl	80033b4 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <xTaskGenericNotifyFromISR+0x1fc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	429a      	cmp	r2, r3
 8005062:	d908      	bls.n	8005076 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800506a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <xTaskGenericNotifyFromISR+0x200>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	617b      	str	r3, [r7, #20]
        __asm volatile
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f383 8811 	msr	BASEPRI, r3
    }
 8005080:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005084:	4618      	mov	r0, r3
 8005086:	3740      	adds	r7, #64	; 0x40
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000734 	.word	0x20000734
 8005090:	20000758 	.word	0x20000758
 8005094:	20000738 	.word	0x20000738
 8005098:	2000065c 	.word	0x2000065c
 800509c:	200006f0 	.word	0x200006f0
 80050a0:	20000658 	.word	0x20000658
 80050a4:	20000744 	.word	0x20000744

080050a8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe f9d5 	bl	800346e <uxListRemove>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	2201      	movs	r2, #1
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4013      	ands	r3, r2
 80050de:	4a20      	ldr	r2, [pc, #128]	; (8005160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050e0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d10a      	bne.n	8005100 <prvAddCurrentTaskToDelayedList+0x58>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f0:	4b1a      	ldr	r3, [pc, #104]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	481a      	ldr	r0, [pc, #104]	; (8005164 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050fa:	f7fe f95b 	bl	80033b4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80050fe:	e026      	b.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	429a      	cmp	r2, r3
 8005116:	d209      	bcs.n	800512c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005118:	4b13      	ldr	r3, [pc, #76]	; (8005168 <prvAddCurrentTaskToDelayedList+0xc0>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4b0f      	ldr	r3, [pc, #60]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe f969 	bl	80033fc <vListInsert>
}
 800512a:	e010      	b.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvAddCurrentTaskToDelayedList+0xc4>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fe f95f 	bl	80033fc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d202      	bcs.n	800514e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvAddCurrentTaskToDelayedList+0xc8>)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	20000734 	.word	0x20000734
 800515c:	20000658 	.word	0x20000658
 8005160:	20000738 	.word	0x20000738
 8005164:	2000071c 	.word	0x2000071c
 8005168:	200006ec 	.word	0x200006ec
 800516c:	200006e8 	.word	0x200006e8
 8005170:	20000750 	.word	0x20000750

08005174 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800517a:	2300      	movs	r3, #0
 800517c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800517e:	f000 fb31 	bl	80057e4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <xTimerCreateTimerTask+0x54>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800518a:	4b10      	ldr	r3, [pc, #64]	; (80051cc <xTimerCreateTimerTask+0x58>)
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	2302      	movs	r3, #2
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2300      	movs	r3, #0
 8005194:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005198:	490d      	ldr	r1, [pc, #52]	; (80051d0 <xTimerCreateTimerTask+0x5c>)
 800519a:	480e      	ldr	r0, [pc, #56]	; (80051d4 <xTimerCreateTimerTask+0x60>)
 800519c:	f7fe ff46 	bl	800402c <xTaskCreate>
 80051a0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	603b      	str	r3, [r7, #0]
    }
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80051be:	687b      	ldr	r3, [r7, #4]
    }
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	2000078c 	.word	0x2000078c
 80051cc:	20000790 	.word	0x20000790
 80051d0:	0800f8f0 	.word	0x0800f8f0
 80051d4:	080053c5 	.word	0x080053c5

080051d8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80051e6:	202c      	movs	r0, #44	; 0x2c
 80051e8:	f000 fd80 	bl	8005cec <pvPortMalloc>
 80051ec:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f805 	bl	800521a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005210:	697b      	ldr	r3, [r7, #20]
        }
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
    }
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01e      	beq.n	8005288 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800524a:	f000 facb 	bl	80057e4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	3304      	adds	r3, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe f895 	bl	800339a <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	; 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xTimerGenericCommand+0x2e>
        __asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
    }
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <xTimerGenericCommand+0x98>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02a      	beq.n	800531c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	dc18      	bgt.n	800530a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052d8:	f7ff fbec 	bl	8004ab4 <xTaskGetSchedulerState>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d109      	bne.n	80052f6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052e2:	4b11      	ldr	r3, [pc, #68]	; (8005328 <xTimerGenericCommand+0x98>)
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	f107 0114 	add.w	r1, r7, #20
 80052ea:	2300      	movs	r3, #0
 80052ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ee:	f7fe f9d3 	bl	8003698 <xQueueGenericSend>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24
 80052f4:	e012      	b.n	800531c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <xTimerGenericCommand+0x98>)
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	f107 0114 	add.w	r1, r7, #20
 80052fe:	2300      	movs	r3, #0
 8005300:	2200      	movs	r2, #0
 8005302:	f7fe f9c9 	bl	8003698 <xQueueGenericSend>
 8005306:	6278      	str	r0, [r7, #36]	; 0x24
 8005308:	e008      	b.n	800531c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800530a:	4b07      	ldr	r3, [pc, #28]	; (8005328 <xTimerGenericCommand+0x98>)
 800530c:	6818      	ldr	r0, [r3, #0]
 800530e:	f107 0114 	add.w	r1, r7, #20
 8005312:	2300      	movs	r3, #0
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	f7fe fabd 	bl	8003894 <xQueueGenericSendFromISR>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800531e:	4618      	mov	r0, r3
 8005320:	3728      	adds	r7, #40	; 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	2000078c 	.word	0x2000078c

0800532c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af02      	add	r7, sp, #8
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005336:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <prvProcessExpiredTimer+0x94>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3304      	adds	r3, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe f892 	bl	800346e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	18d1      	adds	r1, r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f000 f8d1 	bl	800550c <prvInsertTimerInActiveList>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01f      	beq.n	80053b0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005370:	2300      	movs	r3, #0
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	2100      	movs	r1, #0
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7ff ff88 	bl	8005290 <xTimerGenericCommand>
 8005380:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d113      	bne.n	80053b0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60fb      	str	r3, [r7, #12]
    }
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	6978      	ldr	r0, [r7, #20]
 80053b6:	4798      	blx	r3
    }
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000784 	.word	0x20000784

080053c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f857 	bl	8005484 <prvGetNextExpireTime>
 80053d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4619      	mov	r1, r3
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f803 	bl	80053e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80053e2:	f000 f8d5 	bl	8005590 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053e6:	e7f1      	b.n	80053cc <prvTimerTask+0x8>

080053e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80053f2:	f7fe ffb3 	bl	800435c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f866 	bl	80054cc <prvSampleTimeNow>
 8005400:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d130      	bne.n	800546a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <prvProcessTimerOrBlockTask+0x3c>
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	429a      	cmp	r2, r3
 8005414:	d806      	bhi.n	8005424 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005416:	f7fe ffaf 	bl	8004378 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff85 	bl	800532c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005422:	e024      	b.n	800546e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <prvProcessTimerOrBlockTask+0x90>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <prvProcessTimerOrBlockTask+0x50>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <prvProcessTimerOrBlockTask+0x52>
 8005438:	2300      	movs	r3, #0
 800543a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <prvProcessTimerOrBlockTask+0x94>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	f7fe fdbb 	bl	8003fc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800544e:	f7fe ff93 	bl	8004378 <xTaskResumeAll>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <prvProcessTimerOrBlockTask+0x98>)
 800545a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	f3bf 8f6f 	isb	sy
    }
 8005468:	e001      	b.n	800546e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800546a:	f7fe ff85 	bl	8004378 <xTaskResumeAll>
    }
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000788 	.word	0x20000788
 800547c:	2000078c 	.word	0x2000078c
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <prvGetNextExpireTime+0x44>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <prvGetNextExpireTime+0x16>
 8005496:	2201      	movs	r2, #1
 8005498:	e000      	b.n	800549c <prvGetNextExpireTime+0x18>
 800549a:	2200      	movs	r2, #0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvGetNextExpireTime+0x44>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e001      	b.n	80054b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80054b8:	68fb      	ldr	r3, [r7, #12]
    }
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000784 	.word	0x20000784

080054cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80054d4:	f7fe ffec 	bl	80044b0 <xTaskGetTickCount>
 80054d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <prvSampleTimeNow+0x3c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d205      	bcs.n	80054f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80054e4:	f000 f91a 	bl	800571c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e002      	b.n	80054f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80054f6:	4a04      	ldr	r2, [pc, #16]	; (8005508 <prvSampleTimeNow+0x3c>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80054fc:	68fb      	ldr	r3, [r7, #12]
    }
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000794 	.word	0x20000794

0800550c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	429a      	cmp	r2, r3
 8005530:	d812      	bhi.n	8005558 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d302      	bcc.n	8005546 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e01b      	b.n	800557e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <prvInsertTimerInActiveList+0x7c>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fd ff53 	bl	80033fc <vListInsert>
 8005556:	e012      	b.n	800557e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d206      	bcs.n	800556e <prvInsertTimerInActiveList+0x62>
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d302      	bcc.n	800556e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e007      	b.n	800557e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <prvInsertTimerInActiveList+0x80>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3304      	adds	r3, #4
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f7fd ff3f 	bl	80033fc <vListInsert>
            }
        }

        return xProcessTimerNow;
 800557e:	697b      	ldr	r3, [r7, #20]
    }
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000788 	.word	0x20000788
 800558c:	20000784 	.word	0x20000784

08005590 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	; 0x30
 8005594:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005596:	e0ae      	b.n	80056f6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f2c0 80aa 	blt.w	80056f4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fd ff5c 	bl	800346e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ff87 	bl	80054cc <prvSampleTimeNow>
 80055be:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b09      	cmp	r3, #9
 80055c4:	f200 8097 	bhi.w	80056f6 <prvProcessReceivedCommands+0x166>
 80055c8:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <prvProcessReceivedCommands+0x40>)
 80055ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ce:	bf00      	nop
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	0800566d 	.word	0x0800566d
 80055e0:	08005681 	.word	0x08005681
 80055e4:	080056cb 	.word	0x080056cb
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	080055f9 	.word	0x080055f9
 80055f0:	0800566d 	.word	0x0800566d
 80055f4:	08005681 	.word	0x08005681
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	18d1      	adds	r1, r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a3a      	ldr	r2, [r7, #32]
 8005616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005618:	f7ff ff78 	bl	800550c <prvInsertTimerInActiveList>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d069      	beq.n	80056f6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005628:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d05e      	beq.n	80056f6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	441a      	add	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	2100      	movs	r1, #0
 8005648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800564a:	f7ff fe21 	bl	8005290 <xTimerGenericCommand>
 800564e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d14f      	bne.n	80056f6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61bb      	str	r3, [r7, #24]
    }
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800567e:	e03a      	b.n	80056f6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	617b      	str	r3, [r7, #20]
    }
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	18d1      	adds	r1, r2, r3
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056c4:	f7ff ff22 	bl	800550c <prvInsertTimerInActiveList>
                        break;
 80056c8:	e015      	b.n	80056f6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d103      	bne.n	80056e0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80056d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056da:	f000 fbe7 	bl	8005eac <vPortFree>
 80056de:	e00a      	b.n	80056f6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80056f2:	e000      	b.n	80056f6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80056f4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <prvProcessReceivedCommands+0x188>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f107 0108 	add.w	r1, r7, #8
 80056fe:	2200      	movs	r2, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe f971 	bl	80039e8 <xQueueReceive>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f af45 	bne.w	8005598 <prvProcessReceivedCommands+0x8>
        }
    }
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	3728      	adds	r7, #40	; 0x28
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	2000078c 	.word	0x2000078c

0800571c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005722:	e048      	b.n	80057b6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005724:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <prvSwitchTimerLists+0xc0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <prvSwitchTimerLists+0xc0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fd fe96 	bl	800346e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02e      	beq.n	80057b6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d90e      	bls.n	8005788 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <prvSwitchTimerLists+0xc0>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fd fe3b 	bl	80033fc <vListInsert>
 8005786:	e016      	b.n	80057b6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005788:	2300      	movs	r3, #0
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2300      	movs	r3, #0
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	2100      	movs	r1, #0
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff fd7c 	bl	8005290 <xTimerGenericCommand>
 8005798:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	603b      	str	r3, [r7, #0]
    }
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <prvSwitchTimerLists+0xc0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1b1      	bne.n	8005724 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <prvSwitchTimerLists+0xc0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <prvSwitchTimerLists+0xc4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <prvSwitchTimerLists+0xc0>)
 80057cc:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80057ce:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <prvSwitchTimerLists+0xc4>)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6013      	str	r3, [r2, #0]
    }
 80057d4:	bf00      	nop
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000784 	.word	0x20000784
 80057e0:	20000788 	.word	0x20000788

080057e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80057e8:	f000 f95e 	bl	8005aa8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <prvCheckForValidListAndQueue+0x54>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11d      	bne.n	8005830 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80057f4:	4811      	ldr	r0, [pc, #68]	; (800583c <prvCheckForValidListAndQueue+0x58>)
 80057f6:	f7fd fdb0 	bl	800335a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80057fa:	4811      	ldr	r0, [pc, #68]	; (8005840 <prvCheckForValidListAndQueue+0x5c>)
 80057fc:	f7fd fdad 	bl	800335a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005800:	4b10      	ldr	r3, [pc, #64]	; (8005844 <prvCheckForValidListAndQueue+0x60>)
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <prvCheckForValidListAndQueue+0x58>)
 8005804:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <prvCheckForValidListAndQueue+0x64>)
 8005808:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <prvCheckForValidListAndQueue+0x5c>)
 800580a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800580c:	2200      	movs	r2, #0
 800580e:	210c      	movs	r1, #12
 8005810:	200a      	movs	r0, #10
 8005812:	f7fd febf 	bl	8003594 <xQueueGenericCreate>
 8005816:	4603      	mov	r3, r0
 8005818:	4a07      	ldr	r2, [pc, #28]	; (8005838 <prvCheckForValidListAndQueue+0x54>)
 800581a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <prvCheckForValidListAndQueue+0x54>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <prvCheckForValidListAndQueue+0x54>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4908      	ldr	r1, [pc, #32]	; (800584c <prvCheckForValidListAndQueue+0x68>)
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fba0 	bl	8003f70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005830:	f000 f96a 	bl	8005b08 <vPortExitCritical>
    }
 8005834:	bf00      	nop
 8005836:	bd80      	pop	{r7, pc}
 8005838:	2000078c 	.word	0x2000078c
 800583c:	2000075c 	.word	0x2000075c
 8005840:	20000770 	.word	0x20000770
 8005844:	20000784 	.word	0x20000784
 8005848:	20000788 	.word	0x20000788
 800584c:	0800f8f8 	.word	0x0800f8f8

08005850 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b04      	subs	r3, #4
 8005860:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005868:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3b04      	subs	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b04      	subs	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005880:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <pxPortInitialiseStack+0x64>)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b14      	subs	r3, #20
 800588a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b04      	subs	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f06f 0202 	mvn.w	r2, #2
 800589e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3b20      	subs	r3, #32
 80058a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80058a6:	68fb      	ldr	r3, [r7, #12]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	080058b9 	.word	0x080058b9

080058b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <prvTaskExitError+0x54>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d00a      	beq.n	80058e2 <prvTaskExitError+0x2a>
        __asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	60fb      	str	r3, [r7, #12]
    }
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <prvTaskExitError+0x28>
        __asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60bb      	str	r3, [r7, #8]
    }
 80058f4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80058f6:	bf00      	nop
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0fc      	beq.n	80058f8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80058fe:	bf00      	nop
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000020 	.word	0x20000020

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	20000658 	.word	0x20000658
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <prvPortStartFirstTask+0x24>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8814 	msr	CONTROL, r0
 800594a:	b662      	cpsie	i
 800594c:	b661      	cpsie	f
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	df00      	svc	0
 8005958:	bf00      	nop
 800595a:	0000      	.short	0x0000
 800595c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop

08005964 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800596a:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <xPortStartScheduler+0x120>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a46      	ldr	r2, [pc, #280]	; (8005a88 <xPortStartScheduler+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d10a      	bne.n	800598a <xPortStartScheduler+0x26>
        __asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	613b      	str	r3, [r7, #16]
    }
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <xPortStartScheduler+0x120>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3f      	ldr	r2, [pc, #252]	; (8005a8c <xPortStartScheduler+0x128>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10a      	bne.n	80059aa <xPortStartScheduler+0x46>
        __asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	60fb      	str	r3, [r7, #12]
    }
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <xPortStartScheduler+0x12c>)
 80059ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	22ff      	movs	r2, #255	; 0xff
 80059ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <xPortStartScheduler+0x130>)
 80059d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <xPortStartScheduler+0x134>)
 80059d4:	2207      	movs	r2, #7
 80059d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059d8:	e009      	b.n	80059ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <xPortStartScheduler+0x134>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3b01      	subs	r3, #1
 80059e0:	4a2d      	ldr	r2, [pc, #180]	; (8005a98 <xPortStartScheduler+0x134>)
 80059e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d0ef      	beq.n	80059da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <xPortStartScheduler+0x134>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f1c3 0307 	rsb	r3, r3, #7
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d00a      	beq.n	8005a1c <xPortStartScheduler+0xb8>
        __asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60bb      	str	r3, [r7, #8]
    }
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005a3a:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005a46:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005a52:	f000 f8db 	bl	8005c0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005a56:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <xPortStartScheduler+0x13c>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005a5c:	f000 f8fa 	bl	8005c54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <xPortStartScheduler+0x140>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0f      	ldr	r2, [pc, #60]	; (8005aa4 <xPortStartScheduler+0x140>)
 8005a66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005a6c:	f7ff ff64 	bl	8005938 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005a70:	f7fe fdd8 	bl	8004624 <vTaskSwitchContext>
    prvTaskExitError();
 8005a74:	f7ff ff20 	bl	80058b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000ed00 	.word	0xe000ed00
 8005a88:	410fc271 	.word	0x410fc271
 8005a8c:	410fc270 	.word	0x410fc270
 8005a90:	e000e400 	.word	0xe000e400
 8005a94:	20000798 	.word	0x20000798
 8005a98:	2000079c 	.word	0x2000079c
 8005a9c:	e000ed20 	.word	0xe000ed20
 8005aa0:	20000020 	.word	0x20000020
 8005aa4:	e000ef34 	.word	0xe000ef34

08005aa8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
        __asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	607b      	str	r3, [r7, #4]
    }
 8005ac0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <vPortEnterCritical+0x58>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <vPortEnterCritical+0x58>)
 8005aca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <vPortEnterCritical+0x58>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10f      	bne.n	8005af4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <vPortEnterCritical+0x5c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	603b      	str	r3, [r7, #0]
    }
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <vPortEnterCritical+0x4a>
    }
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20000020 	.word	0x20000020
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <vPortExitCritical+0x50>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <vPortExitCritical+0x24>
        __asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	607b      	str	r3, [r7, #4]
    }
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <vPortExitCritical+0x50>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <vPortExitCritical+0x50>)
 8005b34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <vPortExitCritical+0x50>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <vPortExitCritical+0x42>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f383 8811 	msr	BASEPRI, r3
    }
 8005b48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000020 	.word	0x20000020
 8005b5c:	00000000 	.word	0x00000000

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f01e 0f10 	tst.w	lr, #16
 8005b70:	bf08      	it	eq
 8005b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b84:	f380 8811 	msr	BASEPRI, r0
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f7fe fd48 	bl	8004624 <vTaskSwitchContext>
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f380 8811 	msr	BASEPRI, r0
 8005b9c:	bc09      	pop	{r0, r3}
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6808      	ldr	r0, [r1, #0]
 8005ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f01e 0f10 	tst.w	lr, #16
 8005baa:	bf08      	it	eq
 8005bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bb0:	f380 8809 	msr	PSP, r0
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	20000658 	.word	0x20000658
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
    }
 8005be0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005be2:	f7fe fc75 	bl	80044d0 <xTaskIncrementTick>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <SysTick_Handler+0x40>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
    }
 8005bfe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <vPortSetupTimerInterrupt+0x38>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <vPortSetupTimerInterrupt+0x3c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <vPortSetupTimerInterrupt+0x40>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <vPortSetupTimerInterrupt+0x44>)
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c30:	2207      	movs	r2, #7
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e010 	.word	0xe000e010
 8005c44:	e000e018 	.word	0xe000e018
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	e000e014 	.word	0xe000e014

08005c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c64 <vPortEnableVFP+0x10>
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c5e:	6001      	str	r1, [r0, #0]
 8005c60:	4770      	bx	lr
 8005c62:	0000      	.short	0x0000
 8005c64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop

08005c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005c72:	f3ef 8305 	mrs	r3, IPSR
 8005c76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d914      	bls.n	8005ca8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <vPortValidateInterruptPriority+0x70>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <vPortValidateInterruptPriority+0x74>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	7afa      	ldrb	r2, [r7, #11]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d20a      	bcs.n	8005ca8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	607b      	str	r3, [r7, #4]
    }
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <vPortValidateInterruptPriority+0x78>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <vPortValidateInterruptPriority+0x7c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d90a      	bls.n	8005cce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	603b      	str	r3, [r7, #0]
    }
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <vPortValidateInterruptPriority+0x60>
    }
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000e3f0 	.word	0xe000e3f0
 8005ce0:	20000798 	.word	0x20000798
 8005ce4:	e000ed0c 	.word	0xe000ed0c
 8005ce8:	2000079c 	.word	0x2000079c

08005cec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005cf8:	f7fe fb30 	bl	800435c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005cfc:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <pvPortMalloc+0x1a8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005d04:	f000 f934 	bl	8005f70 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d08:	4b63      	ldr	r3, [pc, #396]	; (8005e98 <pvPortMalloc+0x1ac>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 80a7 	bne.w	8005e64 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02d      	beq.n	8005d78 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d227      	bcs.n	8005d78 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005d28:	2208      	movs	r2, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d021      	beq.n	8005d7e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f023 0307 	bic.w	r3, r3, #7
 8005d40:	3308      	adds	r3, #8
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d214      	bcs.n	8005d72 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f023 0307 	bic.w	r3, r3, #7
 8005d4e:	3308      	adds	r3, #8
 8005d50:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <pvPortMalloc+0x92>
        __asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	617b      	str	r3, [r7, #20]
    }
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d76:	e002      	b.n	8005d7e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	e000      	b.n	8005d80 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d7e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06e      	beq.n	8005e64 <pvPortMalloc+0x178>
 8005d86:	4b45      	ldr	r3, [pc, #276]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d869      	bhi.n	8005e64 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d90:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <pvPortMalloc+0x1b4>)
 8005d92:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005d94:	4b42      	ldr	r3, [pc, #264]	; (8005ea0 <pvPortMalloc+0x1b4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d9a:	e004      	b.n	8005da6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d903      	bls.n	8005db8 <pvPortMalloc+0xcc>
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f1      	bne.n	8005d9c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005db8:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <pvPortMalloc+0x1a8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d050      	beq.n	8005e64 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	4413      	add	r3, r2
 8005dca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	2308      	movs	r3, #8
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d91f      	bls.n	8005e24 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <pvPortMalloc+0x120>
        __asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	613b      	str	r3, [r7, #16]
    }
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f000 f908 	bl	8006034 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e32:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <pvPortMalloc+0x1b8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d203      	bcs.n	8005e46 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <pvPortMalloc+0x1b8>)
 8005e44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <pvPortMalloc+0x1ac>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <pvPortMalloc+0x1bc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a11      	ldr	r2, [pc, #68]	; (8005ea8 <pvPortMalloc+0x1bc>)
 8005e62:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005e64:	f7fe fa88 	bl	8004378 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <pvPortMalloc+0x19c>
        __asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
    }
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <pvPortMalloc+0x19a>
    return pvReturn;
 8005e88:	69fb      	ldr	r3, [r7, #28]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200133a8 	.word	0x200133a8
 8005e98:	200133bc 	.word	0x200133bc
 8005e9c:	200133ac 	.word	0x200133ac
 8005ea0:	200133a0 	.word	0x200133a0
 8005ea4:	200133b0 	.word	0x200133b0
 8005ea8:	200133b4 	.word	0x200133b4

08005eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04d      	beq.n	8005f5a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	425b      	negs	r3, r3
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <vPortFree+0xb8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <vPortFree+0x44>
        __asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60fb      	str	r3, [r7, #12]
    }
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <vPortFree+0x62>
        __asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	60bb      	str	r3, [r7, #8]
    }
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <vPortFree+0xb8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01e      	beq.n	8005f5a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11a      	bne.n	8005f5a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <vPortFree+0xb8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	401a      	ands	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005f34:	f7fe fa12 	bl	800435c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <vPortFree+0xbc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4413      	add	r3, r2
 8005f42:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <vPortFree+0xbc>)
 8005f44:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f46:	6938      	ldr	r0, [r7, #16]
 8005f48:	f000 f874 	bl	8006034 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005f4c:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <vPortFree+0xc0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <vPortFree+0xc0>)
 8005f54:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005f56:	f7fe fa0f 	bl	8004378 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005f5a:	bf00      	nop
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200133bc 	.word	0x200133bc
 8005f68:	200133ac 	.word	0x200133ac
 8005f6c:	200133b8 	.word	0x200133b8

08005f70 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f76:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005f7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <prvHeapInit+0xac>)
 8005f7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	; (800601c <prvHeapInit+0xac>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fa8:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <prvHeapInit+0xb0>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005fae:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <prvHeapInit+0xb0>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4413      	add	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <prvHeapInit+0xb4>)
 8005fd0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005fd2:	4b14      	ldr	r3, [pc, #80]	; (8006024 <prvHeapInit+0xb4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <prvHeapInit+0xb4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	1ad2      	subs	r2, r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <prvHeapInit+0xb4>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <prvHeapInit+0xb8>)
 8005ffe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a09      	ldr	r2, [pc, #36]	; (800602c <prvHeapInit+0xbc>)
 8006006:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <prvHeapInit+0xc0>)
 800600a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	200007a0 	.word	0x200007a0
 8006020:	200133a0 	.word	0x200133a0
 8006024:	200133a8 	.word	0x200133a8
 8006028:	200133b0 	.word	0x200133b0
 800602c:	200133ac 	.word	0x200133ac
 8006030:	200133bc 	.word	0x200133bc

08006034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <prvInsertBlockIntoFreeList+0xac>)
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e002      	b.n	8006048 <prvInsertBlockIntoFreeList+0x14>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d8f7      	bhi.n	8006042 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	4413      	add	r3, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d108      	bne.n	8006076 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d118      	bne.n	80060bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d00d      	beq.n	80060b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	441a      	add	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e008      	b.n	80060c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <prvInsertBlockIntoFreeList+0xb0>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e003      	b.n	80060c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d002      	beq.n	80060d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	200133a0 	.word	0x200133a0
 80060e4:	200133a8 	.word	0x200133a8

080060e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	db0b      	blt.n	8006112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	f003 021f 	and.w	r2, r3, #31
 8006100:	4907      	ldr	r1, [pc, #28]	; (8006120 <__NVIC_EnableIRQ+0x38>)
 8006102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	2001      	movs	r0, #1
 800610a:	fa00 f202 	lsl.w	r2, r0, r2
 800610e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000e100 	.word	0xe000e100

08006124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	4603      	mov	r3, r0
 800612c:	6039      	str	r1, [r7, #0]
 800612e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006134:	2b00      	cmp	r3, #0
 8006136:	db0a      	blt.n	800614e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	490c      	ldr	r1, [pc, #48]	; (8006170 <__NVIC_SetPriority+0x4c>)
 800613e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006142:	0112      	lsls	r2, r2, #4
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	440b      	add	r3, r1
 8006148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800614c:	e00a      	b.n	8006164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	4908      	ldr	r1, [pc, #32]	; (8006174 <__NVIC_SetPriority+0x50>)
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3b04      	subs	r3, #4
 800615c:	0112      	lsls	r2, r2, #4
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	440b      	add	r3, r1
 8006162:	761a      	strb	r2, [r3, #24]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000e100 	.word	0xe000e100
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <inTIM4+0x30>)
 800617e:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <inTIM4+0x34>)
 8006180:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <inTIM4+0x30>)
 8006184:	2200      	movs	r2, #0
 8006186:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <inTIM4+0x30>)
 800618a:	2200      	movs	r2, #0
 800618c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <inTIM4+0x30>)
 8006190:	f242 7210 	movw	r2, #10000	; 0x2710
 8006194:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8006196:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <inTIM4+0x30>)
 8006198:	220a      	movs	r2, #10
 800619a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 800619c:	4802      	ldr	r0, [pc, #8]	; (80061a8 <inTIM4+0x30>)
 800619e:	f000 f807 	bl	80061b0 <BasicTimer_Config>

}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000300 	.word	0x20000300
 80061ac:	40000800 	.word	0x40000800

080061b0 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061c0:	b672      	cpsid	i
}
 80061c2:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a85      	ldr	r2, [pc, #532]	; (80063e0 <BasicTimer_Config+0x230>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d106      	bne.n	80061dc <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80061ce:	4b85      	ldr	r3, [pc, #532]	; (80063e4 <BasicTimer_Config+0x234>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	4a84      	ldr	r2, [pc, #528]	; (80063e4 <BasicTimer_Config+0x234>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	6453      	str	r3, [r2, #68]	; 0x44
 80061da:	e030      	b.n	800623e <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e4:	d106      	bne.n	80061f4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80061e6:	4b7f      	ldr	r3, [pc, #508]	; (80063e4 <BasicTimer_Config+0x234>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	4a7e      	ldr	r2, [pc, #504]	; (80063e4 <BasicTimer_Config+0x234>)
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	6413      	str	r3, [r2, #64]	; 0x40
 80061f2:	e024      	b.n	800623e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a7b      	ldr	r2, [pc, #492]	; (80063e8 <BasicTimer_Config+0x238>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d106      	bne.n	800620c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80061fe:	4b79      	ldr	r3, [pc, #484]	; (80063e4 <BasicTimer_Config+0x234>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	4a78      	ldr	r2, [pc, #480]	; (80063e4 <BasicTimer_Config+0x234>)
 8006204:	f043 0302 	orr.w	r3, r3, #2
 8006208:	6413      	str	r3, [r2, #64]	; 0x40
 800620a:	e018      	b.n	800623e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a76      	ldr	r2, [pc, #472]	; (80063ec <BasicTimer_Config+0x23c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d106      	bne.n	8006224 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8006216:	4b73      	ldr	r3, [pc, #460]	; (80063e4 <BasicTimer_Config+0x234>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	4a72      	ldr	r2, [pc, #456]	; (80063e4 <BasicTimer_Config+0x234>)
 800621c:	f043 0304 	orr.w	r3, r3, #4
 8006220:	6413      	str	r3, [r2, #64]	; 0x40
 8006222:	e00c      	b.n	800623e <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a71      	ldr	r2, [pc, #452]	; (80063f0 <BasicTimer_Config+0x240>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d106      	bne.n	800623c <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800622e:	4b6d      	ldr	r3, [pc, #436]	; (80063e4 <BasicTimer_Config+0x234>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4a6c      	ldr	r2, [pc, #432]	; (80063e4 <BasicTimer_Config+0x234>)
 8006234:	f043 0308 	orr.w	r3, r3, #8
 8006238:	6413      	str	r3, [r2, #64]	; 0x40
 800623a:	e000      	b.n	800623e <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 800623c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800624c:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6892      	ldr	r2, [r2, #8]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	791b      	ldrb	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 80d3 	bne.w	8006408 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0210 	bic.w	r2, r2, #16
 8006270:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2ba0      	cmp	r3, #160	; 0xa0
 800627c:	d022      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2bc8      	cmp	r3, #200	; 0xc8
 8006282:	d01f      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800628a:	d01b      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006292:	d017      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800629a:	d013      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80062a2:	d00f      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80062aa:	d00b      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80062b2:	d007      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80062ba:	d003      	beq.n	80062c4 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c2:	d10b      	bne.n	80062dc <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2264      	movs	r2, #100	; 0x64
 80062ca:	fb02 f303 	mul.w	r3, r2, r3
 80062ce:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	3a01      	subs	r2, #1
 80062d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80062da:	e07c      	b.n	80063d6 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80062e2:	d029      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062ea:	d025      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d020      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80062fc:	d01c      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f241 3288 	movw	r2, #5000	; 0x1388
 8006304:	4293      	cmp	r3, r2
 8006306:	d017      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f241 7270 	movw	r2, #6000	; 0x1770
 800630e:	4293      	cmp	r3, r2
 8006310:	d012      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f641 3258 	movw	r2, #7000	; 0x1b58
 8006318:	4293      	cmp	r3, r2
 800631a:	d00d      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006322:	d009      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f242 3228 	movw	r2, #9000	; 0x2328
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f242 7210 	movw	r2, #10000	; 0x2710
 8006334:	4293      	cmp	r3, r2
 8006336:	d10c      	bne.n	8006352 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	3a01      	subs	r2, #1
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006350:	e041      	b.n	80063d6 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006358:	d028      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006360:	4293      	cmp	r3, r2
 8006362:	d023      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f247 5230 	movw	r2, #30000	; 0x7530
 800636a:	4293      	cmp	r3, r2
 800636c:	d01e      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f649 4240 	movw	r2, #40000	; 0x9c40
 8006374:	4293      	cmp	r3, r2
 8006376:	d019      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800637e:	4293      	cmp	r3, r2
 8006380:	d014      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006388:	4293      	cmp	r3, r2
 800638a:	d00f      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <BasicTimer_Config+0x244>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <BasicTimer_Config+0x248>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4a17      	ldr	r2, [pc, #92]	; (80063fc <BasicTimer_Config+0x24c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <BasicTimer_Config+0x250>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	3a01      	subs	r2, #1
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80063bc:	e00b      	b.n	80063d6 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <BasicTimer_Config+0x254>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	08db      	lsrs	r3, r3, #3
 80063ca:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	3a01      	subs	r2, #1
 80063d4:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2200      	movs	r2, #0
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24
 80063de:	e027      	b.n	8006430 <BasicTimer_Config+0x280>
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	00011170 	.word	0x00011170
 80063f8:	00013880 	.word	0x00013880
 80063fc:	00015f90 	.word	0x00015f90
 8006400:	000186a0 	.word	0x000186a0
 8006404:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0210 	orr.w	r2, r2, #16
 8006416:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3a01      	subs	r2, #1
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3a01      	subs	r2, #1
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7c1b      	ldrb	r3, [r3, #16]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d12d      	bne.n	8006494 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d103      	bne.n	800645a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8006452:	201c      	movs	r0, #28
 8006454:	f7ff fe48 	bl	80060e8 <__NVIC_EnableIRQ>
 8006458:	e024      	b.n	80064a4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a14      	ldr	r2, [pc, #80]	; (80064b0 <BasicTimer_Config+0x300>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8006464:	201d      	movs	r0, #29
 8006466:	f7ff fe3f 	bl	80060e8 <__NVIC_EnableIRQ>
 800646a:	e01b      	b.n	80064a4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <BasicTimer_Config+0x304>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d103      	bne.n	800647e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8006476:	201e      	movs	r0, #30
 8006478:	f7ff fe36 	bl	80060e8 <__NVIC_EnableIRQ>
 800647c:	e012      	b.n	80064a4 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <BasicTimer_Config+0x308>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8006488:	2032      	movs	r0, #50	; 0x32
 800648a:	f7ff fe2d 	bl	80060e8 <__NVIC_EnableIRQ>
 800648e:	e009      	b.n	80064a4 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8006490:	bf00      	nop
 8006492:	e007      	b.n	80064a4 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80064a4:	b662      	cpsie	i
}
 80064a6:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00

080064bc <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 80064c6:	4818      	ldr	r0, [pc, #96]	; (8006528 <delay_ms+0x6c>)
 80064c8:	f000 fab8 	bl	8006a3c <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	461a      	mov	r2, r3
 80064d0:	0092      	lsls	r2, r2, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 80064e0:	e016      	b.n	8006510 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 80064e2:	4b11      	ldr	r3, [pc, #68]	; (8006528 <delay_ms+0x6c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00f      	beq.n	8006510 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 80064f0:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <delay_ms+0x6c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	3301      	adds	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	89fb      	ldrh	r3, [r7, #14]
 80064fc:	4413      	add	r3, r2
 80064fe:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8006500:	4b09      	ldr	r3, [pc, #36]	; (8006528 <delay_ms+0x6c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691a      	ldr	r2, [r3, #16]
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <delay_ms+0x6c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 8006510:	89fa      	ldrh	r2, [r7, #14]
 8006512:	89bb      	ldrh	r3, [r7, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d3e4      	bcc.n	80064e2 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 8006518:	4803      	ldr	r0, [pc, #12]	; (8006528 <delay_ms+0x6c>)
 800651a:	f000 faa1 	bl	8006a60 <stopTimer>
}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000300 	.word	0x20000300

0800652c <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8006538:	b672      	cpsid	i
}
 800653a:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006544:	d105      	bne.n	8006552 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	4619      	mov	r1, r3
 800654a:	201c      	movs	r0, #28
 800654c:	f7ff fdea 	bl	8006124 <__NVIC_SetPriority>
 8006550:	e021      	b.n	8006596 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <TIM_SetPriority+0x78>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d105      	bne.n	8006568 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	4619      	mov	r1, r3
 8006560:	201d      	movs	r0, #29
 8006562:	f7ff fddf 	bl	8006124 <__NVIC_SetPriority>
 8006566:	e016      	b.n	8006596 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0e      	ldr	r2, [pc, #56]	; (80065a8 <TIM_SetPriority+0x7c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d105      	bne.n	800657e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	4619      	mov	r1, r3
 8006576:	201e      	movs	r0, #30
 8006578:	f7ff fdd4 	bl	8006124 <__NVIC_SetPriority>
 800657c:	e00b      	b.n	8006596 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <TIM_SetPriority+0x80>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d105      	bne.n	8006594 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	4619      	mov	r1, r3
 800658c:	2032      	movs	r0, #50	; 0x32
 800658e:	f7ff fdc9 	bl	8006124 <__NVIC_SetPriority>
 8006592:	e000      	b.n	8006596 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8006594:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006596:	b662      	cpsie	i
}
 8006598:	bf00      	nop
	}

	__enable_irq();

}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40000c00 	.word	0x40000c00

080065b0 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065b4:	bf00      	nop
}
 80065b6:	bf00      	nop
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065c4:	bf00      	nop
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065d4:	bf00      	nop
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065e4:	bf00      	nop
}
 80065e6:	bf00      	nop
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80065f4:	bf00      	nop
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006604:	bf00      	nop
}
 8006606:	bf00      	nop
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006614:	bf00      	nop
}
 8006616:	bf00      	nop
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006624:	bf00      	nop
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006634:	bf00      	nop
}
 8006636:	bf00      	nop
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006644:	bf00      	nop
}
 8006646:	bf00      	nop
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006654:	bf00      	nop
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006664:	bf00      	nop
}
 8006666:	bf00      	nop
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006674:	bf00      	nop
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006684:	bf00      	nop
}
 8006686:	bf00      	nop
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8006690:	b480      	push	{r7}
 8006692:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8006694:	bf00      	nop
}
 8006696:	bf00      	nop
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066a4:	bf00      	nop
}
 80066a6:	bf00      	nop
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066b4:	bf00      	nop
}
 80066b6:	bf00      	nop
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80066c4:	bf00      	nop
}
 80066c6:	bf00      	nop
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 80066d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 80066e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80066f2:	f7fb fa77 	bl	8001be4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80066f6:	e066      	b.n	80067c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80066f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d012      	beq.n	800672c <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8006706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006710:	f023 0302 	bic.w	r3, r3, #2
 8006714:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 8006716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006724:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 8006726:	f7ff ff5b 	bl	80065e0 <Capture_TIM2_Ch1_Callback>
}
 800672a:	e04c      	b.n	80067c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 800672c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d012      	beq.n	8006760 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 800673a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006744:	f023 0304 	bic.w	r3, r3, #4
 8006748:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 800674a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006758:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800675a:	f7ff ff49 	bl	80065f0 <Capture_TIM2_Ch2_Callback>
}
 800675e:	e032      	b.n	80067c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8006760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d012      	beq.n	8006794 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800676e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006778:	f023 0308 	bic.w	r3, r3, #8
 800677c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800677e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800678e:	f7ff ff37 	bl	8006600 <Capture_TIM2_Ch3_Callback>
}
 8006792:	e018      	b.n	80067c6 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8006794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d011      	beq.n	80067c6 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 80067a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067ac:	f023 0310 	bic.w	r3, r3, #16
 80067b0:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 80067b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80067bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c0:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 80067c2:	f7ff ff25 	bl	8006610 <Capture_TIM2_Ch4_Callback>
}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 80067d0:	4b31      	ldr	r3, [pc, #196]	; (8006898 <TIM3_IRQHandler+0xcc>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 80067dc:	4b2e      	ldr	r3, [pc, #184]	; (8006898 <TIM3_IRQHandler+0xcc>)
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <TIM3_IRQHandler+0xcc>)
 80067e2:	f023 0301 	bic.w	r3, r3, #1
 80067e6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 80067e8:	f7ff fee2 	bl	80065b0 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 80067ec:	e052      	b.n	8006894 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 80067ee:	4b2a      	ldr	r3, [pc, #168]	; (8006898 <TIM3_IRQHandler+0xcc>)
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80067fa:	4b27      	ldr	r3, [pc, #156]	; (8006898 <TIM3_IRQHandler+0xcc>)
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	4a26      	ldr	r2, [pc, #152]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006800:	f023 0302 	bic.w	r3, r3, #2
 8006804:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	4a23      	ldr	r2, [pc, #140]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800680c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006810:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 8006812:	f7ff ff05 	bl	8006620 <Capture_TIM3_Ch1_Callback>
}
 8006816:	e03d      	b.n	8006894 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 8006818:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8006824:	4b1c      	ldr	r3, [pc, #112]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800682a:	f023 0304 	bic.w	r3, r3, #4
 800682e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	4a18      	ldr	r2, [pc, #96]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800683a:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 800683c:	f7ff fef8 	bl	8006630 <Capture_TIM3_Ch2_Callback>
}
 8006840:	e028      	b.n	8006894 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00e      	beq.n	800686c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 800684e:	4b12      	ldr	r3, [pc, #72]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4a11      	ldr	r2, [pc, #68]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006854:	f023 0308 	bic.w	r3, r3, #8
 8006858:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	4a0e      	ldr	r2, [pc, #56]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006864:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8006866:	f7ff feeb 	bl	8006640 <Capture_TIM3_Ch3_Callback>
}
 800686a:	e013      	b.n	8006894 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8006878:	4b07      	ldr	r3, [pc, #28]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	4a06      	ldr	r2, [pc, #24]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800687e:	f023 0310 	bic.w	r3, r3, #16
 8006882:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8006884:	4b04      	ldr	r3, [pc, #16]	; (8006898 <TIM3_IRQHandler+0xcc>)
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	4a03      	ldr	r2, [pc, #12]	; (8006898 <TIM3_IRQHandler+0xcc>)
 800688a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800688e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8006890:	f7ff fede 	bl	8006650 <Capture_TIM3_Ch4_Callback>
}
 8006894:	bf00      	nop
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40000400 	.word	0x40000400

0800689c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 80068a0:	4b31      	ldr	r3, [pc, #196]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 80068ac:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	4a2d      	ldr	r2, [pc, #180]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 80068b8:	f7ff fe82 	bl	80065c0 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 80068bc:	e052      	b.n	8006964 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 80068be:	4b2a      	ldr	r3, [pc, #168]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 80068ca:	4b27      	ldr	r3, [pc, #156]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	4a26      	ldr	r2, [pc, #152]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068d0:	f023 0302 	bic.w	r3, r3, #2
 80068d4:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 80068d6:	4b24      	ldr	r3, [pc, #144]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	4a23      	ldr	r2, [pc, #140]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e0:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 80068e2:	f7ff febd 	bl	8006660 <Capture_TIM4_Ch1_Callback>
}
 80068e6:	e03d      	b.n	8006964 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 80068e8:	4b1f      	ldr	r3, [pc, #124]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80068f4:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	4a1b      	ldr	r2, [pc, #108]	; (8006968 <TIM4_IRQHandler+0xcc>)
 80068fa:	f023 0304 	bic.w	r3, r3, #4
 80068fe:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8006900:	4b19      	ldr	r3, [pc, #100]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	4a18      	ldr	r2, [pc, #96]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800690a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800690c:	f7ff fec8 	bl	80066a0 <Capture_TIM5_Ch2_Callback>
}
 8006910:	e028      	b.n	8006964 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00e      	beq.n	800693c <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	4a11      	ldr	r2, [pc, #68]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006924:	f023 0308 	bic.w	r3, r3, #8
 8006928:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <TIM4_IRQHandler+0xcc>)
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006934:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 8006936:	f7ff fe9b 	bl	8006670 <Capture_TIM4_Ch3_Callback>
}
 800693a:	e013      	b.n	8006964 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 800693c:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <TIM4_IRQHandler+0xcc>)
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00d      	beq.n	8006964 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8006948:	4b07      	ldr	r3, [pc, #28]	; (8006968 <TIM4_IRQHandler+0xcc>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	4a06      	ldr	r2, [pc, #24]	; (8006968 <TIM4_IRQHandler+0xcc>)
 800694e:	f023 0310 	bic.w	r3, r3, #16
 8006952:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <TIM4_IRQHandler+0xcc>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	4a03      	ldr	r2, [pc, #12]	; (8006968 <TIM4_IRQHandler+0xcc>)
 800695a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8006960:	f7ff fe8e 	bl	8006680 <Capture_TIM4_Ch4_Callback>
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40000800 	.word	0x40000800

0800696c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8006970:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800697c:	4b2e      	ldr	r3, [pc, #184]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	4a2d      	ldr	r2, [pc, #180]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8006988:	f7ff fe22 	bl	80065d0 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800698c:	e052      	b.n	8006a34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800698e:	4b2a      	ldr	r3, [pc, #168]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00e      	beq.n	80069b8 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800699a:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069a0:	f023 0302 	bic.w	r3, r3, #2
 80069a4:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 80069a6:	4b24      	ldr	r3, [pc, #144]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b0:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 80069b2:	f7ff fe6d 	bl	8006690 <Capture_TIM5_Ch1_Callback>
}
 80069b6:	e03d      	b.n	8006a34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 80069c4:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069ca:	f023 0304 	bic.w	r3, r3, #4
 80069ce:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 80069d0:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069da:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80069dc:	f7ff fe60 	bl	80066a0 <Capture_TIM5_Ch2_Callback>
}
 80069e0:	e028      	b.n	8006a34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00e      	beq.n	8006a0c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	4a11      	ldr	r2, [pc, #68]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069f4:	f023 0308 	bic.w	r3, r3, #8
 80069f8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a04:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8006a06:	f7ff fe53 	bl	80066b0 <Capture_TIM5_Ch3_Callback>
}
 8006a0a:	e013      	b.n	8006a34 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00d      	beq.n	8006a34 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8006a18:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	4a06      	ldr	r2, [pc, #24]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 8006a24:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	4a03      	ldr	r2, [pc, #12]	; (8006a38 <TIM5_IRQHandler+0xcc>)
 8006a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a2e:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 8006a30:	f7ff fe46 	bl	80066c0 <Capture_TIM5_Ch4_Callback>
}
 8006a34:	bf00      	nop
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40000c00 	.word	0x40000c00

08006a3c <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <__NVIC_EnableIRQ>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	db0b      	blt.n	8006aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	f003 021f 	and.w	r2, r3, #31
 8006a9c:	4907      	ldr	r1, [pc, #28]	; (8006abc <__NVIC_EnableIRQ+0x38>)
 8006a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8006aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	e000e100 	.word	0xe000e100

08006ac0 <__NVIC_SetPriority>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	6039      	str	r1, [r7, #0]
 8006aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	db0a      	blt.n	8006aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	490c      	ldr	r1, [pc, #48]	; (8006b0c <__NVIC_SetPriority+0x4c>)
 8006ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ade:	0112      	lsls	r2, r2, #4
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ae8:	e00a      	b.n	8006b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	4908      	ldr	r1, [pc, #32]	; (8006b10 <__NVIC_SetPriority+0x50>)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	3b04      	subs	r3, #4
 8006af8:	0112      	lsls	r2, r2, #4
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	440b      	add	r3, r1
 8006afe:	761a      	strb	r2, [r3, #24]
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	e000e100 	.word	0xe000e100
 8006b10:	e000ed00 	.word	0xe000ed00

08006b14 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 f8bf 	bl	8007ca4 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8006b26:	4b96      	ldr	r3, [pc, #600]	; (8006d80 <extInt_Config+0x26c>)
 8006b28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b2c:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	791b      	ldrb	r3, [r3, #4]
 8006b34:	2b0f      	cmp	r3, #15
 8006b36:	f200 85cd 	bhi.w	80076d4 <extInt_Config+0xbc0>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <extInt_Config+0x2c>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006c37 	.word	0x08006c37
 8006b48:	08006ced 	.word	0x08006ced
 8006b4c:	08006dc3 	.word	0x08006dc3
 8006b50:	08006e79 	.word	0x08006e79
 8006b54:	08006f27 	.word	0x08006f27
 8006b58:	08006fed 	.word	0x08006fed
 8006b5c:	08007095 	.word	0x08007095
 8006b60:	0800713d 	.word	0x0800713d
 8006b64:	080071e5 	.word	0x080071e5
 8006b68:	080072ab 	.word	0x080072ab
 8006b6c:	08007353 	.word	0x08007353
 8006b70:	080073fb 	.word	0x080073fb
 8006b74:	080074c1 	.word	0x080074c1
 8006b78:	08007567 	.word	0x08007567
 8006b7c:	0800760f 	.word	0x0800760f
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8006b80:	4b80      	ldr	r3, [pc, #512]	; (8006d84 <extInt_Config+0x270>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	4a7f      	ldr	r2, [pc, #508]	; (8006d84 <extInt_Config+0x270>)
 8006b86:	f023 030f 	bic.w	r3, r3, #15
 8006b8a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7d      	ldr	r2, [pc, #500]	; (8006d88 <extInt_Config+0x274>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d105      	bne.n	8006ba4 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8006b98:	4b7a      	ldr	r3, [pc, #488]	; (8006d84 <extInt_Config+0x270>)
 8006b9a:	4a7a      	ldr	r2, [pc, #488]	; (8006d84 <extInt_Config+0x270>)
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006ba0:	f000 bd9a 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a78      	ldr	r2, [pc, #480]	; (8006d8c <extInt_Config+0x278>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d107      	bne.n	8006bc0 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8006bb0:	4b74      	ldr	r3, [pc, #464]	; (8006d84 <extInt_Config+0x270>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a73      	ldr	r2, [pc, #460]	; (8006d84 <extInt_Config+0x270>)
 8006bb6:	f043 0301 	orr.w	r3, r3, #1
 8006bba:	6093      	str	r3, [r2, #8]
					break;
 8006bbc:	f000 bd8c 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a72      	ldr	r2, [pc, #456]	; (8006d90 <extInt_Config+0x27c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d107      	bne.n	8006bdc <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8006bcc:	4b6d      	ldr	r3, [pc, #436]	; (8006d84 <extInt_Config+0x270>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4a6c      	ldr	r2, [pc, #432]	; (8006d84 <extInt_Config+0x270>)
 8006bd2:	f043 0302 	orr.w	r3, r3, #2
 8006bd6:	6093      	str	r3, [r2, #8]
					break;
 8006bd8:	f000 bd7e 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a6c      	ldr	r2, [pc, #432]	; (8006d94 <extInt_Config+0x280>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d107      	bne.n	8006bf8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8006be8:	4b66      	ldr	r3, [pc, #408]	; (8006d84 <extInt_Config+0x270>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4a65      	ldr	r2, [pc, #404]	; (8006d84 <extInt_Config+0x270>)
 8006bee:	f043 0303 	orr.w	r3, r3, #3
 8006bf2:	6093      	str	r3, [r2, #8]
					break;
 8006bf4:	f000 bd70 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a66      	ldr	r2, [pc, #408]	; (8006d98 <extInt_Config+0x284>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d107      	bne.n	8006c14 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8006c04:	4b5f      	ldr	r3, [pc, #380]	; (8006d84 <extInt_Config+0x270>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	4a5e      	ldr	r2, [pc, #376]	; (8006d84 <extInt_Config+0x270>)
 8006c0a:	f043 0304 	orr.w	r3, r3, #4
 8006c0e:	6093      	str	r3, [r2, #8]
					break;
 8006c10:	f000 bd62 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a60      	ldr	r2, [pc, #384]	; (8006d9c <extInt_Config+0x288>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d107      	bne.n	8006c30 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8006c20:	4b58      	ldr	r3, [pc, #352]	; (8006d84 <extInt_Config+0x270>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4a57      	ldr	r2, [pc, #348]	; (8006d84 <extInt_Config+0x270>)
 8006c26:	f043 0307 	orr.w	r3, r3, #7
 8006c2a:	6093      	str	r3, [r2, #8]
					break;
 8006c2c:	f000 bd54 	b.w	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8006c30:	bf00      	nop
					break;
 8006c32:	f000 bd51 	b.w	80076d8 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8006c36:	4b53      	ldr	r3, [pc, #332]	; (8006d84 <extInt_Config+0x270>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	4a52      	ldr	r2, [pc, #328]	; (8006d84 <extInt_Config+0x270>)
 8006c3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c40:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a4f      	ldr	r2, [pc, #316]	; (8006d88 <extInt_Config+0x274>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d105      	bne.n	8006c5a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8006c4e:	4b4d      	ldr	r3, [pc, #308]	; (8006d84 <extInt_Config+0x270>)
 8006c50:	4a4c      	ldr	r2, [pc, #304]	; (8006d84 <extInt_Config+0x270>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006c56:	f000 bd3f 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a4a      	ldr	r2, [pc, #296]	; (8006d8c <extInt_Config+0x278>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d107      	bne.n	8006c76 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8006c66:	4b47      	ldr	r3, [pc, #284]	; (8006d84 <extInt_Config+0x270>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	4a46      	ldr	r2, [pc, #280]	; (8006d84 <extInt_Config+0x270>)
 8006c6c:	f043 0310 	orr.w	r3, r3, #16
 8006c70:	6093      	str	r3, [r2, #8]
					break;
 8006c72:	f000 bd31 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a44      	ldr	r2, [pc, #272]	; (8006d90 <extInt_Config+0x27c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d107      	bne.n	8006c92 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8006c82:	4b40      	ldr	r3, [pc, #256]	; (8006d84 <extInt_Config+0x270>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	4a3f      	ldr	r2, [pc, #252]	; (8006d84 <extInt_Config+0x270>)
 8006c88:	f043 0320 	orr.w	r3, r3, #32
 8006c8c:	6093      	str	r3, [r2, #8]
					break;
 8006c8e:	f000 bd23 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a3e      	ldr	r2, [pc, #248]	; (8006d94 <extInt_Config+0x280>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d107      	bne.n	8006cae <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8006c9e:	4b39      	ldr	r3, [pc, #228]	; (8006d84 <extInt_Config+0x270>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4a38      	ldr	r2, [pc, #224]	; (8006d84 <extInt_Config+0x270>)
 8006ca4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006ca8:	6093      	str	r3, [r2, #8]
					break;
 8006caa:	f000 bd15 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a38      	ldr	r2, [pc, #224]	; (8006d98 <extInt_Config+0x284>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d107      	bne.n	8006cca <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8006cba:	4b32      	ldr	r3, [pc, #200]	; (8006d84 <extInt_Config+0x270>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4a31      	ldr	r2, [pc, #196]	; (8006d84 <extInt_Config+0x270>)
 8006cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc4:	6093      	str	r3, [r2, #8]
					break;
 8006cc6:	f000 bd07 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a32      	ldr	r2, [pc, #200]	; (8006d9c <extInt_Config+0x288>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d107      	bne.n	8006ce6 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8006cd6:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <extInt_Config+0x270>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	4a2a      	ldr	r2, [pc, #168]	; (8006d84 <extInt_Config+0x270>)
 8006cdc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006ce0:	6093      	str	r3, [r2, #8]
					break;
 8006ce2:	f000 bcf9 	b.w	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8006ce6:	bf00      	nop
					break;
 8006ce8:	f000 bcf6 	b.w	80076d8 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8006cec:	4b25      	ldr	r3, [pc, #148]	; (8006d84 <extInt_Config+0x270>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <extInt_Config+0x270>)
 8006cf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cf6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a22      	ldr	r2, [pc, #136]	; (8006d88 <extInt_Config+0x274>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d105      	bne.n	8006d10 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8006d04:	4b1f      	ldr	r3, [pc, #124]	; (8006d84 <extInt_Config+0x270>)
 8006d06:	4a1f      	ldr	r2, [pc, #124]	; (8006d84 <extInt_Config+0x270>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006d0c:	f000 bce4 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <extInt_Config+0x278>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d107      	bne.n	8006d2c <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <extInt_Config+0x270>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <extInt_Config+0x270>)
 8006d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d26:	6093      	str	r3, [r2, #8]
					break;
 8006d28:	f000 bcd6 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a17      	ldr	r2, [pc, #92]	; (8006d90 <extInt_Config+0x27c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d107      	bne.n	8006d48 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8006d38:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <extInt_Config+0x270>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	4a11      	ldr	r2, [pc, #68]	; (8006d84 <extInt_Config+0x270>)
 8006d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d42:	6093      	str	r3, [r2, #8]
					break;
 8006d44:	f000 bcc8 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a11      	ldr	r2, [pc, #68]	; (8006d94 <extInt_Config+0x280>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d107      	bne.n	8006d64 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <extInt_Config+0x270>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4a0a      	ldr	r2, [pc, #40]	; (8006d84 <extInt_Config+0x270>)
 8006d5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006d5e:	6093      	str	r3, [r2, #8]
					break;
 8006d60:	f000 bcba 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <extInt_Config+0x284>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d117      	bne.n	8006da0 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <extInt_Config+0x270>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	4a03      	ldr	r2, [pc, #12]	; (8006d84 <extInt_Config+0x270>)
 8006d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d7a:	6093      	str	r3, [r2, #8]
					break;
 8006d7c:	f000 bcac 	b.w	80076d8 <extInt_Config+0xbc4>
 8006d80:	40023800 	.word	0x40023800
 8006d84:	40013800 	.word	0x40013800
 8006d88:	40020000 	.word	0x40020000
 8006d8c:	40020400 	.word	0x40020400
 8006d90:	40020800 	.word	0x40020800
 8006d94:	40020c00 	.word	0x40020c00
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a8a      	ldr	r2, [pc, #552]	; (8006fd0 <extInt_Config+0x4bc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d107      	bne.n	8006dbc <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8006dac:	4b89      	ldr	r3, [pc, #548]	; (8006fd4 <extInt_Config+0x4c0>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a88      	ldr	r2, [pc, #544]	; (8006fd4 <extInt_Config+0x4c0>)
 8006db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006db6:	6093      	str	r3, [r2, #8]
					break;
 8006db8:	f000 bc8e 	b.w	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8006dbc:	bf00      	nop
					break;
 8006dbe:	f000 bc8b 	b.w	80076d8 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8006dc2:	4b84      	ldr	r3, [pc, #528]	; (8006fd4 <extInt_Config+0x4c0>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	4a83      	ldr	r2, [pc, #524]	; (8006fd4 <extInt_Config+0x4c0>)
 8006dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dcc:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a80      	ldr	r2, [pc, #512]	; (8006fd8 <extInt_Config+0x4c4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d105      	bne.n	8006de6 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8006dda:	4b7e      	ldr	r3, [pc, #504]	; (8006fd4 <extInt_Config+0x4c0>)
 8006ddc:	4a7d      	ldr	r2, [pc, #500]	; (8006fd4 <extInt_Config+0x4c0>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8006de2:	f000 bc79 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a7b      	ldr	r2, [pc, #492]	; (8006fdc <extInt_Config+0x4c8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d107      	bne.n	8006e02 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8006df2:	4b78      	ldr	r3, [pc, #480]	; (8006fd4 <extInt_Config+0x4c0>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	4a77      	ldr	r2, [pc, #476]	; (8006fd4 <extInt_Config+0x4c0>)
 8006df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dfc:	6093      	str	r3, [r2, #8]
					break;
 8006dfe:	f000 bc6b 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a75      	ldr	r2, [pc, #468]	; (8006fe0 <extInt_Config+0x4cc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d107      	bne.n	8006e1e <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8006e0e:	4b71      	ldr	r3, [pc, #452]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4a70      	ldr	r2, [pc, #448]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e18:	6093      	str	r3, [r2, #8]
					break;
 8006e1a:	f000 bc5d 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6f      	ldr	r2, [pc, #444]	; (8006fe4 <extInt_Config+0x4d0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d107      	bne.n	8006e3a <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8006e2a:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	4a69      	ldr	r2, [pc, #420]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e30:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8006e34:	6093      	str	r3, [r2, #8]
					break;
 8006e36:	f000 bc4f 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a69      	ldr	r2, [pc, #420]	; (8006fe8 <extInt_Config+0x4d4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d107      	bne.n	8006e56 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8006e46:	4b63      	ldr	r3, [pc, #396]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4a62      	ldr	r2, [pc, #392]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e50:	6093      	str	r3, [r2, #8]
					break;
 8006e52:	f000 bc41 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5c      	ldr	r2, [pc, #368]	; (8006fd0 <extInt_Config+0x4bc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d107      	bne.n	8006e72 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8006e62:	4b5c      	ldr	r3, [pc, #368]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	4a5b      	ldr	r2, [pc, #364]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e68:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006e6c:	6093      	str	r3, [r2, #8]
					break;
 8006e6e:	f000 bc33 	b.w	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8006e72:	bf00      	nop
					break;
 8006e74:	f000 bc30 	b.w	80076d8 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8006e78:	4b56      	ldr	r3, [pc, #344]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a55      	ldr	r2, [pc, #340]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e7e:	f023 030f 	bic.w	r3, r3, #15
 8006e82:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a53      	ldr	r2, [pc, #332]	; (8006fd8 <extInt_Config+0x4c4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d105      	bne.n	8006e9c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8006e90:	4b50      	ldr	r3, [pc, #320]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e92:	4a50      	ldr	r2, [pc, #320]	; (8006fd4 <extInt_Config+0x4c0>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006e98:	f000 bc1e 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a4e      	ldr	r2, [pc, #312]	; (8006fdc <extInt_Config+0x4c8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d107      	bne.n	8006eb8 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8006ea8:	4b4a      	ldr	r3, [pc, #296]	; (8006fd4 <extInt_Config+0x4c0>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4a49      	ldr	r2, [pc, #292]	; (8006fd4 <extInt_Config+0x4c0>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	60d3      	str	r3, [r2, #12]
					break;
 8006eb4:	f000 bc10 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a48      	ldr	r2, [pc, #288]	; (8006fe0 <extInt_Config+0x4cc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d107      	bne.n	8006ed4 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8006ec4:	4b43      	ldr	r3, [pc, #268]	; (8006fd4 <extInt_Config+0x4c0>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	4a42      	ldr	r2, [pc, #264]	; (8006fd4 <extInt_Config+0x4c0>)
 8006eca:	f043 0302 	orr.w	r3, r3, #2
 8006ece:	60d3      	str	r3, [r2, #12]
					break;
 8006ed0:	f000 bc02 	b.w	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a42      	ldr	r2, [pc, #264]	; (8006fe4 <extInt_Config+0x4d0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d106      	bne.n	8006eee <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8006ee0:	4b3c      	ldr	r3, [pc, #240]	; (8006fd4 <extInt_Config+0x4c0>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	4a3b      	ldr	r2, [pc, #236]	; (8006fd4 <extInt_Config+0x4c0>)
 8006ee6:	f043 0303 	orr.w	r3, r3, #3
 8006eea:	60d3      	str	r3, [r2, #12]
					break;
 8006eec:	e3f4      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a3c      	ldr	r2, [pc, #240]	; (8006fe8 <extInt_Config+0x4d4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d106      	bne.n	8006f08 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8006efa:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <extInt_Config+0x4c0>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4a35      	ldr	r2, [pc, #212]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f00:	f043 0304 	orr.w	r3, r3, #4
 8006f04:	60d3      	str	r3, [r2, #12]
					break;
 8006f06:	e3e7      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <extInt_Config+0x4bc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d106      	bne.n	8006f22 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8006f14:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4a2e      	ldr	r2, [pc, #184]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f1a:	f043 0307 	orr.w	r3, r3, #7
 8006f1e:	60d3      	str	r3, [r2, #12]
					break;
 8006f20:	e3da      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8006f22:	bf00      	nop
					break;
 8006f24:	e3d8      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8006f26:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f30:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <extInt_Config+0x4c4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d104      	bne.n	8006f48 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8006f3e:	4b25      	ldr	r3, [pc, #148]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f40:	4a24      	ldr	r2, [pc, #144]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8006f46:	e3c7      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <extInt_Config+0x4c8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d106      	bne.n	8006f62 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8006f54:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f5a:	f043 0310 	orr.w	r3, r3, #16
 8006f5e:	60d3      	str	r3, [r2, #12]
					break;
 8006f60:	e3ba      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1d      	ldr	r2, [pc, #116]	; (8006fe0 <extInt_Config+0x4cc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d106      	bne.n	8006f7c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8006f6e:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f74:	f043 0320 	orr.w	r3, r3, #32
 8006f78:	60d3      	str	r3, [r2, #12]
					break;
 8006f7a:	e3ad      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <extInt_Config+0x4d0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d106      	bne.n	8006f96 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8006f88:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <extInt_Config+0x4c0>)
 8006f8e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006f92:	60d3      	str	r3, [r2, #12]
					break;
 8006f94:	e3a0      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a12      	ldr	r2, [pc, #72]	; (8006fe8 <extInt_Config+0x4d4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d106      	bne.n	8006fb0 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <extInt_Config+0x4c0>)
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <extInt_Config+0x4c0>)
 8006fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fac:	60d3      	str	r3, [r2, #12]
					break;
 8006fae:	e393      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a06      	ldr	r2, [pc, #24]	; (8006fd0 <extInt_Config+0x4bc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d106      	bne.n	8006fca <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <extInt_Config+0x4c0>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <extInt_Config+0x4c0>)
 8006fc2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006fc6:	60d3      	str	r3, [r2, #12]
					break;
 8006fc8:	e386      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8006fca:	bf00      	nop
					break;
 8006fcc:	e384      	b.n	80076d8 <extInt_Config+0xbc4>
 8006fce:	bf00      	nop
 8006fd0:	40021c00 	.word	0x40021c00
 8006fd4:	40013800 	.word	0x40013800
 8006fd8:	40020000 	.word	0x40020000
 8006fdc:	40020400 	.word	0x40020400
 8006fe0:	40020800 	.word	0x40020800
 8006fe4:	40020c00 	.word	0x40020c00
 8006fe8:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8006fec:	4b86      	ldr	r3, [pc, #536]	; (8007208 <extInt_Config+0x6f4>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a85      	ldr	r2, [pc, #532]	; (8007208 <extInt_Config+0x6f4>)
 8006ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ff6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a83      	ldr	r2, [pc, #524]	; (800720c <extInt_Config+0x6f8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d104      	bne.n	800700e <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8007004:	4b80      	ldr	r3, [pc, #512]	; (8007208 <extInt_Config+0x6f4>)
 8007006:	4a80      	ldr	r2, [pc, #512]	; (8007208 <extInt_Config+0x6f4>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800700c:	e364      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a7e      	ldr	r2, [pc, #504]	; (8007210 <extInt_Config+0x6fc>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d106      	bne.n	8007028 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800701a:	4b7b      	ldr	r3, [pc, #492]	; (8007208 <extInt_Config+0x6f4>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	4a7a      	ldr	r2, [pc, #488]	; (8007208 <extInt_Config+0x6f4>)
 8007020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007024:	60d3      	str	r3, [r2, #12]
					break;
 8007026:	e357      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a79      	ldr	r2, [pc, #484]	; (8007214 <extInt_Config+0x700>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d106      	bne.n	8007042 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8007034:	4b74      	ldr	r3, [pc, #464]	; (8007208 <extInt_Config+0x6f4>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4a73      	ldr	r2, [pc, #460]	; (8007208 <extInt_Config+0x6f4>)
 800703a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800703e:	60d3      	str	r3, [r2, #12]
					break;
 8007040:	e34a      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a73      	ldr	r2, [pc, #460]	; (8007218 <extInt_Config+0x704>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d106      	bne.n	800705c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800704e:	4b6e      	ldr	r3, [pc, #440]	; (8007208 <extInt_Config+0x6f4>)
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	4a6d      	ldr	r2, [pc, #436]	; (8007208 <extInt_Config+0x6f4>)
 8007054:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007058:	60d3      	str	r3, [r2, #12]
					break;
 800705a:	e33d      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6e      	ldr	r2, [pc, #440]	; (800721c <extInt_Config+0x708>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d106      	bne.n	8007076 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8007068:	4b67      	ldr	r3, [pc, #412]	; (8007208 <extInt_Config+0x6f4>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	4a66      	ldr	r2, [pc, #408]	; (8007208 <extInt_Config+0x6f4>)
 800706e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007072:	60d3      	str	r3, [r2, #12]
					break;
 8007074:	e330      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a68      	ldr	r2, [pc, #416]	; (8007220 <extInt_Config+0x70c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d106      	bne.n	8007090 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8007082:	4b61      	ldr	r3, [pc, #388]	; (8007208 <extInt_Config+0x6f4>)
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	4a60      	ldr	r2, [pc, #384]	; (8007208 <extInt_Config+0x6f4>)
 8007088:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800708c:	60d3      	str	r3, [r2, #12]
					break;
 800708e:	e323      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8007090:	bf00      	nop
					break;
 8007092:	e321      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8007094:	4b5c      	ldr	r3, [pc, #368]	; (8007208 <extInt_Config+0x6f4>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4a5b      	ldr	r2, [pc, #364]	; (8007208 <extInt_Config+0x6f4>)
 800709a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800709e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a59      	ldr	r2, [pc, #356]	; (800720c <extInt_Config+0x6f8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d104      	bne.n	80070b6 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80070ac:	4b56      	ldr	r3, [pc, #344]	; (8007208 <extInt_Config+0x6f4>)
 80070ae:	4a56      	ldr	r2, [pc, #344]	; (8007208 <extInt_Config+0x6f4>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80070b4:	e310      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a54      	ldr	r2, [pc, #336]	; (8007210 <extInt_Config+0x6fc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d106      	bne.n	80070d0 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80070c2:	4b51      	ldr	r3, [pc, #324]	; (8007208 <extInt_Config+0x6f4>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	4a50      	ldr	r2, [pc, #320]	; (8007208 <extInt_Config+0x6f4>)
 80070c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070cc:	60d3      	str	r3, [r2, #12]
					break;
 80070ce:	e303      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4f      	ldr	r2, [pc, #316]	; (8007214 <extInt_Config+0x700>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d106      	bne.n	80070ea <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80070dc:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <extInt_Config+0x6f4>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	4a49      	ldr	r2, [pc, #292]	; (8007208 <extInt_Config+0x6f4>)
 80070e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070e6:	60d3      	str	r3, [r2, #12]
					break;
 80070e8:	e2f6      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a49      	ldr	r2, [pc, #292]	; (8007218 <extInt_Config+0x704>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d106      	bne.n	8007104 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80070f6:	4b44      	ldr	r3, [pc, #272]	; (8007208 <extInt_Config+0x6f4>)
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	4a43      	ldr	r2, [pc, #268]	; (8007208 <extInt_Config+0x6f4>)
 80070fc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007100:	60d3      	str	r3, [r2, #12]
					break;
 8007102:	e2e9      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a44      	ldr	r2, [pc, #272]	; (800721c <extInt_Config+0x708>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d106      	bne.n	800711e <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8007110:	4b3d      	ldr	r3, [pc, #244]	; (8007208 <extInt_Config+0x6f4>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <extInt_Config+0x6f4>)
 8007116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800711a:	60d3      	str	r3, [r2, #12]
					break;
 800711c:	e2dc      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3e      	ldr	r2, [pc, #248]	; (8007220 <extInt_Config+0x70c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d106      	bne.n	8007138 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800712a:	4b37      	ldr	r3, [pc, #220]	; (8007208 <extInt_Config+0x6f4>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	4a36      	ldr	r2, [pc, #216]	; (8007208 <extInt_Config+0x6f4>)
 8007130:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8007134:	60d3      	str	r3, [r2, #12]
					break;
 8007136:	e2cf      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 8007138:	bf00      	nop
					break;
 800713a:	e2cd      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800713c:	4b32      	ldr	r3, [pc, #200]	; (8007208 <extInt_Config+0x6f4>)
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	4a31      	ldr	r2, [pc, #196]	; (8007208 <extInt_Config+0x6f4>)
 8007142:	f023 030f 	bic.w	r3, r3, #15
 8007146:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a2f      	ldr	r2, [pc, #188]	; (800720c <extInt_Config+0x6f8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d104      	bne.n	800715e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8007154:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <extInt_Config+0x6f4>)
 8007156:	4a2c      	ldr	r2, [pc, #176]	; (8007208 <extInt_Config+0x6f4>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800715c:	e2bc      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <extInt_Config+0x6fc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d106      	bne.n	8007178 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800716a:	4b27      	ldr	r3, [pc, #156]	; (8007208 <extInt_Config+0x6f4>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	4a26      	ldr	r2, [pc, #152]	; (8007208 <extInt_Config+0x6f4>)
 8007170:	f043 0301 	orr.w	r3, r3, #1
 8007174:	6113      	str	r3, [r2, #16]
					break;
 8007176:	e2af      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a25      	ldr	r2, [pc, #148]	; (8007214 <extInt_Config+0x700>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d106      	bne.n	8007192 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <extInt_Config+0x6f4>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <extInt_Config+0x6f4>)
 800718a:	f043 0302 	orr.w	r3, r3, #2
 800718e:	6113      	str	r3, [r2, #16]
					break;
 8007190:	e2a2      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <extInt_Config+0x704>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d106      	bne.n	80071ac <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <extInt_Config+0x6f4>)
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	4a19      	ldr	r2, [pc, #100]	; (8007208 <extInt_Config+0x6f4>)
 80071a4:	f043 0303 	orr.w	r3, r3, #3
 80071a8:	6113      	str	r3, [r2, #16]
					break;
 80071aa:	e295      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1a      	ldr	r2, [pc, #104]	; (800721c <extInt_Config+0x708>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d106      	bne.n	80071c6 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <extInt_Config+0x6f4>)
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	4a12      	ldr	r2, [pc, #72]	; (8007208 <extInt_Config+0x6f4>)
 80071be:	f043 0304 	orr.w	r3, r3, #4
 80071c2:	6113      	str	r3, [r2, #16]
					break;
 80071c4:	e288      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a14      	ldr	r2, [pc, #80]	; (8007220 <extInt_Config+0x70c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d106      	bne.n	80071e0 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80071d2:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <extInt_Config+0x6f4>)
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	4a0c      	ldr	r2, [pc, #48]	; (8007208 <extInt_Config+0x6f4>)
 80071d8:	f043 0307 	orr.w	r3, r3, #7
 80071dc:	6113      	str	r3, [r2, #16]
					break;
 80071de:	e27b      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 80071e0:	bf00      	nop
					break;
 80071e2:	e279      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 80071e4:	4b08      	ldr	r3, [pc, #32]	; (8007208 <extInt_Config+0x6f4>)
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	4a07      	ldr	r2, [pc, #28]	; (8007208 <extInt_Config+0x6f4>)
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ee:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a05      	ldr	r2, [pc, #20]	; (800720c <extInt_Config+0x6f8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d113      	bne.n	8007224 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80071fc:	4b02      	ldr	r3, [pc, #8]	; (8007208 <extInt_Config+0x6f4>)
 80071fe:	4a02      	ldr	r2, [pc, #8]	; (8007208 <extInt_Config+0x6f4>)
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8007204:	e268      	b.n	80076d8 <extInt_Config+0xbc4>
 8007206:	bf00      	nop
 8007208:	40013800 	.word	0x40013800
 800720c:	40020000 	.word	0x40020000
 8007210:	40020400 	.word	0x40020400
 8007214:	40020800 	.word	0x40020800
 8007218:	40020c00 	.word	0x40020c00
 800721c:	40021000 	.word	0x40021000
 8007220:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a83      	ldr	r2, [pc, #524]	; (8007438 <extInt_Config+0x924>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d106      	bne.n	800723e <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8007230:	4b82      	ldr	r3, [pc, #520]	; (800743c <extInt_Config+0x928>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	4a81      	ldr	r2, [pc, #516]	; (800743c <extInt_Config+0x928>)
 8007236:	f043 0310 	orr.w	r3, r3, #16
 800723a:	6113      	str	r3, [r2, #16]
					break;
 800723c:	e24c      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a7e      	ldr	r2, [pc, #504]	; (8007440 <extInt_Config+0x92c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d106      	bne.n	8007258 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800724a:	4b7c      	ldr	r3, [pc, #496]	; (800743c <extInt_Config+0x928>)
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	4a7b      	ldr	r2, [pc, #492]	; (800743c <extInt_Config+0x928>)
 8007250:	f043 0320 	orr.w	r3, r3, #32
 8007254:	6113      	str	r3, [r2, #16]
					break;
 8007256:	e23f      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a79      	ldr	r2, [pc, #484]	; (8007444 <extInt_Config+0x930>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d106      	bne.n	8007272 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8007264:	4b75      	ldr	r3, [pc, #468]	; (800743c <extInt_Config+0x928>)
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	4a74      	ldr	r2, [pc, #464]	; (800743c <extInt_Config+0x928>)
 800726a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800726e:	6113      	str	r3, [r2, #16]
					break;
 8007270:	e232      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a73      	ldr	r2, [pc, #460]	; (8007448 <extInt_Config+0x934>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d106      	bne.n	800728c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800727e:	4b6f      	ldr	r3, [pc, #444]	; (800743c <extInt_Config+0x928>)
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	4a6e      	ldr	r2, [pc, #440]	; (800743c <extInt_Config+0x928>)
 8007284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007288:	6113      	str	r3, [r2, #16]
					break;
 800728a:	e225      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a6e      	ldr	r2, [pc, #440]	; (800744c <extInt_Config+0x938>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d106      	bne.n	80072a6 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8007298:	4b68      	ldr	r3, [pc, #416]	; (800743c <extInt_Config+0x928>)
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	4a67      	ldr	r2, [pc, #412]	; (800743c <extInt_Config+0x928>)
 800729e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80072a2:	6113      	str	r3, [r2, #16]
					break;
 80072a4:	e218      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 80072a6:	bf00      	nop
					break;
 80072a8:	e216      	b.n	80076d8 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 80072aa:	4b64      	ldr	r3, [pc, #400]	; (800743c <extInt_Config+0x928>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	4a63      	ldr	r2, [pc, #396]	; (800743c <extInt_Config+0x928>)
 80072b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072b4:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a64      	ldr	r2, [pc, #400]	; (8007450 <extInt_Config+0x93c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d104      	bne.n	80072cc <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80072c2:	4b5e      	ldr	r3, [pc, #376]	; (800743c <extInt_Config+0x928>)
 80072c4:	4a5d      	ldr	r2, [pc, #372]	; (800743c <extInt_Config+0x928>)
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 80072ca:	e205      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a59      	ldr	r2, [pc, #356]	; (8007438 <extInt_Config+0x924>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d106      	bne.n	80072e6 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80072d8:	4b58      	ldr	r3, [pc, #352]	; (800743c <extInt_Config+0x928>)
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	4a57      	ldr	r2, [pc, #348]	; (800743c <extInt_Config+0x928>)
 80072de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e2:	6113      	str	r3, [r2, #16]
					break;
 80072e4:	e1f8      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a54      	ldr	r2, [pc, #336]	; (8007440 <extInt_Config+0x92c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d106      	bne.n	8007300 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80072f2:	4b52      	ldr	r3, [pc, #328]	; (800743c <extInt_Config+0x928>)
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	4a51      	ldr	r2, [pc, #324]	; (800743c <extInt_Config+0x928>)
 80072f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072fc:	6113      	str	r3, [r2, #16]
					break;
 80072fe:	e1eb      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a4f      	ldr	r2, [pc, #316]	; (8007444 <extInt_Config+0x930>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d106      	bne.n	800731a <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800730c:	4b4b      	ldr	r3, [pc, #300]	; (800743c <extInt_Config+0x928>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	4a4a      	ldr	r2, [pc, #296]	; (800743c <extInt_Config+0x928>)
 8007312:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007316:	6113      	str	r3, [r2, #16]
					break;
 8007318:	e1de      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a49      	ldr	r2, [pc, #292]	; (8007448 <extInt_Config+0x934>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d106      	bne.n	8007334 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8007326:	4b45      	ldr	r3, [pc, #276]	; (800743c <extInt_Config+0x928>)
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	4a44      	ldr	r2, [pc, #272]	; (800743c <extInt_Config+0x928>)
 800732c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007330:	6113      	str	r3, [r2, #16]
					break;
 8007332:	e1d1      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a44      	ldr	r2, [pc, #272]	; (800744c <extInt_Config+0x938>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d106      	bne.n	800734e <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8007340:	4b3e      	ldr	r3, [pc, #248]	; (800743c <extInt_Config+0x928>)
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	4a3d      	ldr	r2, [pc, #244]	; (800743c <extInt_Config+0x928>)
 8007346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800734a:	6113      	str	r3, [r2, #16]
					break;
 800734c:	e1c4      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 800734e:	bf00      	nop
					break;
 8007350:	e1c2      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8007352:	4b3a      	ldr	r3, [pc, #232]	; (800743c <extInt_Config+0x928>)
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	4a39      	ldr	r2, [pc, #228]	; (800743c <extInt_Config+0x928>)
 8007358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800735c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a3a      	ldr	r2, [pc, #232]	; (8007450 <extInt_Config+0x93c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d104      	bne.n	8007374 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800736a:	4b34      	ldr	r3, [pc, #208]	; (800743c <extInt_Config+0x928>)
 800736c:	4a33      	ldr	r2, [pc, #204]	; (800743c <extInt_Config+0x928>)
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8007372:	e1b1      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <extInt_Config+0x924>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d106      	bne.n	800738e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8007380:	4b2e      	ldr	r3, [pc, #184]	; (800743c <extInt_Config+0x928>)
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	4a2d      	ldr	r2, [pc, #180]	; (800743c <extInt_Config+0x928>)
 8007386:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800738a:	6113      	str	r3, [r2, #16]
					break;
 800738c:	e1a4      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2a      	ldr	r2, [pc, #168]	; (8007440 <extInt_Config+0x92c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d106      	bne.n	80073a8 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800739a:	4b28      	ldr	r3, [pc, #160]	; (800743c <extInt_Config+0x928>)
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	4a27      	ldr	r2, [pc, #156]	; (800743c <extInt_Config+0x928>)
 80073a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073a4:	6113      	str	r3, [r2, #16]
					break;
 80073a6:	e197      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a25      	ldr	r2, [pc, #148]	; (8007444 <extInt_Config+0x930>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d106      	bne.n	80073c2 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80073b4:	4b21      	ldr	r3, [pc, #132]	; (800743c <extInt_Config+0x928>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	4a20      	ldr	r2, [pc, #128]	; (800743c <extInt_Config+0x928>)
 80073ba:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80073be:	6113      	str	r3, [r2, #16]
					break;
 80073c0:	e18a      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <extInt_Config+0x934>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d106      	bne.n	80073dc <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80073ce:	4b1b      	ldr	r3, [pc, #108]	; (800743c <extInt_Config+0x928>)
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	4a1a      	ldr	r2, [pc, #104]	; (800743c <extInt_Config+0x928>)
 80073d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073d8:	6113      	str	r3, [r2, #16]
					break;
 80073da:	e17d      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1a      	ldr	r2, [pc, #104]	; (800744c <extInt_Config+0x938>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d106      	bne.n	80073f6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <extInt_Config+0x928>)
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	4a13      	ldr	r2, [pc, #76]	; (800743c <extInt_Config+0x928>)
 80073ee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80073f2:	6113      	str	r3, [r2, #16]
					break;
 80073f4:	e170      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 80073f6:	bf00      	nop
					break;
 80073f8:	e16e      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 80073fa:	4b10      	ldr	r3, [pc, #64]	; (800743c <extInt_Config+0x928>)
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	4a0f      	ldr	r2, [pc, #60]	; (800743c <extInt_Config+0x928>)
 8007400:	f023 030f 	bic.w	r3, r3, #15
 8007404:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a10      	ldr	r2, [pc, #64]	; (8007450 <extInt_Config+0x93c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d104      	bne.n	800741c <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <extInt_Config+0x928>)
 8007414:	4a09      	ldr	r2, [pc, #36]	; (800743c <extInt_Config+0x928>)
 8007416:	695b      	ldr	r3, [r3, #20]
 8007418:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800741a:	e15d      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a05      	ldr	r2, [pc, #20]	; (8007438 <extInt_Config+0x924>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d115      	bne.n	8007454 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <extInt_Config+0x928>)
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	4a03      	ldr	r2, [pc, #12]	; (800743c <extInt_Config+0x928>)
 800742e:	f043 0301 	orr.w	r3, r3, #1
 8007432:	6153      	str	r3, [r2, #20]
					break;
 8007434:	e150      	b.n	80076d8 <extInt_Config+0xbc4>
 8007436:	bf00      	nop
 8007438:	40020400 	.word	0x40020400
 800743c:	40013800 	.word	0x40013800
 8007440:	40020800 	.word	0x40020800
 8007444:	40020c00 	.word	0x40020c00
 8007448:	40021000 	.word	0x40021000
 800744c:	40021c00 	.word	0x40021c00
 8007450:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a89      	ldr	r2, [pc, #548]	; (8007680 <extInt_Config+0xb6c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d106      	bne.n	800746e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8007460:	4b88      	ldr	r3, [pc, #544]	; (8007684 <extInt_Config+0xb70>)
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	4a87      	ldr	r2, [pc, #540]	; (8007684 <extInt_Config+0xb70>)
 8007466:	f043 0302 	orr.w	r3, r3, #2
 800746a:	6153      	str	r3, [r2, #20]
					break;
 800746c:	e134      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a84      	ldr	r2, [pc, #528]	; (8007688 <extInt_Config+0xb74>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d106      	bne.n	8007488 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800747a:	4b82      	ldr	r3, [pc, #520]	; (8007684 <extInt_Config+0xb70>)
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	4a81      	ldr	r2, [pc, #516]	; (8007684 <extInt_Config+0xb70>)
 8007480:	f043 0303 	orr.w	r3, r3, #3
 8007484:	6153      	str	r3, [r2, #20]
					break;
 8007486:	e127      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a7f      	ldr	r2, [pc, #508]	; (800768c <extInt_Config+0xb78>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d106      	bne.n	80074a2 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8007494:	4b7b      	ldr	r3, [pc, #492]	; (8007684 <extInt_Config+0xb70>)
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	4a7a      	ldr	r2, [pc, #488]	; (8007684 <extInt_Config+0xb70>)
 800749a:	f043 0304 	orr.w	r3, r3, #4
 800749e:	6153      	str	r3, [r2, #20]
					break;
 80074a0:	e11a      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a79      	ldr	r2, [pc, #484]	; (8007690 <extInt_Config+0xb7c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d106      	bne.n	80074bc <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80074ae:	4b75      	ldr	r3, [pc, #468]	; (8007684 <extInt_Config+0xb70>)
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	4a74      	ldr	r2, [pc, #464]	; (8007684 <extInt_Config+0xb70>)
 80074b4:	f043 0307 	orr.w	r3, r3, #7
 80074b8:	6153      	str	r3, [r2, #20]
					break;
 80074ba:	e10d      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 80074bc:	bf00      	nop
					break;
 80074be:	e10b      	b.n	80076d8 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 80074c0:	4b70      	ldr	r3, [pc, #448]	; (8007684 <extInt_Config+0xb70>)
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	4a6f      	ldr	r2, [pc, #444]	; (8007684 <extInt_Config+0xb70>)
 80074c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ca:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a70      	ldr	r2, [pc, #448]	; (8007694 <extInt_Config+0xb80>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d104      	bne.n	80074e2 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80074d8:	4b6a      	ldr	r3, [pc, #424]	; (8007684 <extInt_Config+0xb70>)
 80074da:	4a6a      	ldr	r2, [pc, #424]	; (8007684 <extInt_Config+0xb70>)
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	6153      	str	r3, [r2, #20]
 80074e0:	e041      	b.n	8007566 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a6b      	ldr	r2, [pc, #428]	; (8007698 <extInt_Config+0xb84>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d106      	bne.n	80074fc <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80074ee:	4b65      	ldr	r3, [pc, #404]	; (8007684 <extInt_Config+0xb70>)
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	4a64      	ldr	r2, [pc, #400]	; (8007684 <extInt_Config+0xb70>)
 80074f4:	f043 0310 	orr.w	r3, r3, #16
 80074f8:	6153      	str	r3, [r2, #20]
 80074fa:	e034      	b.n	8007566 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5f      	ldr	r2, [pc, #380]	; (8007680 <extInt_Config+0xb6c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d106      	bne.n	8007516 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8007508:	4b5e      	ldr	r3, [pc, #376]	; (8007684 <extInt_Config+0xb70>)
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	4a5d      	ldr	r2, [pc, #372]	; (8007684 <extInt_Config+0xb70>)
 800750e:	f043 0320 	orr.w	r3, r3, #32
 8007512:	6153      	str	r3, [r2, #20]
 8007514:	e027      	b.n	8007566 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a5a      	ldr	r2, [pc, #360]	; (8007688 <extInt_Config+0xb74>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d106      	bne.n	8007530 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8007522:	4b58      	ldr	r3, [pc, #352]	; (8007684 <extInt_Config+0xb70>)
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	4a57      	ldr	r2, [pc, #348]	; (8007684 <extInt_Config+0xb70>)
 8007528:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800752c:	6153      	str	r3, [r2, #20]
 800752e:	e01a      	b.n	8007566 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a55      	ldr	r2, [pc, #340]	; (800768c <extInt_Config+0xb78>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d106      	bne.n	800754a <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800753c:	4b51      	ldr	r3, [pc, #324]	; (8007684 <extInt_Config+0xb70>)
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	4a50      	ldr	r2, [pc, #320]	; (8007684 <extInt_Config+0xb70>)
 8007542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007546:	6153      	str	r3, [r2, #20]
 8007548:	e00d      	b.n	8007566 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a4f      	ldr	r2, [pc, #316]	; (8007690 <extInt_Config+0xb7c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d106      	bne.n	8007564 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8007556:	4b4b      	ldr	r3, [pc, #300]	; (8007684 <extInt_Config+0xb70>)
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	4a4a      	ldr	r2, [pc, #296]	; (8007684 <extInt_Config+0xb70>)
 800755c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007560:	6153      	str	r3, [r2, #20]
 8007562:	e000      	b.n	8007566 <extInt_Config+0xa52>

					} else {
						__NOP();
 8007564:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8007566:	4b47      	ldr	r3, [pc, #284]	; (8007684 <extInt_Config+0xb70>)
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	4a46      	ldr	r2, [pc, #280]	; (8007684 <extInt_Config+0xb70>)
 800756c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007570:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a46      	ldr	r2, [pc, #280]	; (8007694 <extInt_Config+0xb80>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d104      	bne.n	8007588 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800757e:	4b41      	ldr	r3, [pc, #260]	; (8007684 <extInt_Config+0xb70>)
 8007580:	4a40      	ldr	r2, [pc, #256]	; (8007684 <extInt_Config+0xb70>)
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8007586:	e0a7      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a42      	ldr	r2, [pc, #264]	; (8007698 <extInt_Config+0xb84>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d106      	bne.n	80075a2 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8007594:	4b3b      	ldr	r3, [pc, #236]	; (8007684 <extInt_Config+0xb70>)
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	4a3a      	ldr	r2, [pc, #232]	; (8007684 <extInt_Config+0xb70>)
 800759a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800759e:	6153      	str	r3, [r2, #20]
					break;
 80075a0:	e09a      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a35      	ldr	r2, [pc, #212]	; (8007680 <extInt_Config+0xb6c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d106      	bne.n	80075bc <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80075ae:	4b35      	ldr	r3, [pc, #212]	; (8007684 <extInt_Config+0xb70>)
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	4a34      	ldr	r2, [pc, #208]	; (8007684 <extInt_Config+0xb70>)
 80075b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075b8:	6153      	str	r3, [r2, #20]
					break;
 80075ba:	e08d      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a31      	ldr	r2, [pc, #196]	; (8007688 <extInt_Config+0xb74>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d106      	bne.n	80075d6 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80075c8:	4b2e      	ldr	r3, [pc, #184]	; (8007684 <extInt_Config+0xb70>)
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	4a2d      	ldr	r2, [pc, #180]	; (8007684 <extInt_Config+0xb70>)
 80075ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075d2:	6153      	str	r3, [r2, #20]
					break;
 80075d4:	e080      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2b      	ldr	r2, [pc, #172]	; (800768c <extInt_Config+0xb78>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d106      	bne.n	80075f0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80075e2:	4b28      	ldr	r3, [pc, #160]	; (8007684 <extInt_Config+0xb70>)
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	4a27      	ldr	r2, [pc, #156]	; (8007684 <extInt_Config+0xb70>)
 80075e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075ec:	6153      	str	r3, [r2, #20]
					break;
 80075ee:	e073      	b.n	80076d8 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a26      	ldr	r2, [pc, #152]	; (8007690 <extInt_Config+0xb7c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d106      	bne.n	800760a <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80075fc:	4b21      	ldr	r3, [pc, #132]	; (8007684 <extInt_Config+0xb70>)
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	4a20      	ldr	r2, [pc, #128]	; (8007684 <extInt_Config+0xb70>)
 8007602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007606:	6153      	str	r3, [r2, #20]
					break;
 8007608:	e066      	b.n	80076d8 <extInt_Config+0xbc4>
						__NOP();
 800760a:	bf00      	nop
					break;
 800760c:	e064      	b.n	80076d8 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800760e:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <extInt_Config+0xb70>)
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <extInt_Config+0xb70>)
 8007614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007618:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <extInt_Config+0xb80>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d104      	bne.n	8007630 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8007626:	4b17      	ldr	r3, [pc, #92]	; (8007684 <extInt_Config+0xb70>)
 8007628:	4a16      	ldr	r2, [pc, #88]	; (8007684 <extInt_Config+0xb70>)
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800762e:	e053      	b.n	80076d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a18      	ldr	r2, [pc, #96]	; (8007698 <extInt_Config+0xb84>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d106      	bne.n	800764a <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <extInt_Config+0xb70>)
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	4a10      	ldr	r2, [pc, #64]	; (8007684 <extInt_Config+0xb70>)
 8007642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007646:	6153      	str	r3, [r2, #20]
						break;
 8007648:	e046      	b.n	80076d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a0b      	ldr	r2, [pc, #44]	; (8007680 <extInt_Config+0xb6c>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d106      	bne.n	8007664 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <extInt_Config+0xb70>)
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <extInt_Config+0xb70>)
 800765c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007660:	6153      	str	r3, [r2, #20]
						break;
 8007662:	e039      	b.n	80076d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a07      	ldr	r2, [pc, #28]	; (8007688 <extInt_Config+0xb74>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d115      	bne.n	800769c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8007670:	4b04      	ldr	r3, [pc, #16]	; (8007684 <extInt_Config+0xb70>)
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	4a03      	ldr	r2, [pc, #12]	; (8007684 <extInt_Config+0xb70>)
 8007676:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800767a:	6153      	str	r3, [r2, #20]
						break;
 800767c:	e02c      	b.n	80076d8 <extInt_Config+0xbc4>
 800767e:	bf00      	nop
 8007680:	40020800 	.word	0x40020800
 8007684:	40013800 	.word	0x40013800
 8007688:	40020c00 	.word	0x40020c00
 800768c:	40021000 	.word	0x40021000
 8007690:	40021c00 	.word	0x40021c00
 8007694:	40020000 	.word	0x40020000
 8007698:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a6c      	ldr	r2, [pc, #432]	; (8007854 <extInt_Config+0xd40>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d106      	bne.n	80076b6 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80076a8:	4b6b      	ldr	r3, [pc, #428]	; (8007858 <extInt_Config+0xd44>)
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	4a6a      	ldr	r2, [pc, #424]	; (8007858 <extInt_Config+0xd44>)
 80076ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076b2:	6153      	str	r3, [r2, #20]
						break;
 80076b4:	e010      	b.n	80076d8 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a67      	ldr	r2, [pc, #412]	; (800785c <extInt_Config+0xd48>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d106      	bne.n	80076d0 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80076c2:	4b65      	ldr	r3, [pc, #404]	; (8007858 <extInt_Config+0xd44>)
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	4a64      	ldr	r2, [pc, #400]	; (8007858 <extInt_Config+0xd44>)
 80076c8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80076cc:	6153      	str	r3, [r2, #20]
						break;
 80076ce:	e003      	b.n	80076d8 <extInt_Config+0xbc4>
							__NOP();
 80076d0:	bf00      	nop
						break;
 80076d2:	e001      	b.n	80076d8 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 80076d4:	bf00      	nop
						break;
 80076d6:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d020      	beq.n	8007722 <extInt_Config+0xc0e>
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	dc37      	bgt.n	8007754 <extInt_Config+0xc40>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <extInt_Config+0xbda>
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d00d      	beq.n	8007708 <extInt_Config+0xbf4>
 80076ec:	e032      	b.n	8007754 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80076ee:	4b5c      	ldr	r3, [pc, #368]	; (8007860 <extInt_Config+0xd4c>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	7912      	ldrb	r2, [r2, #4]
 80076f8:	4611      	mov	r1, r2
 80076fa:	2201      	movs	r2, #1
 80076fc:	408a      	lsls	r2, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	4a57      	ldr	r2, [pc, #348]	; (8007860 <extInt_Config+0xd4c>)
 8007702:	430b      	orrs	r3, r1
 8007704:	60d3      	str	r3, [r2, #12]

		break;
 8007706:	e027      	b.n	8007758 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007708:	4b55      	ldr	r3, [pc, #340]	; (8007860 <extInt_Config+0xd4c>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	7912      	ldrb	r2, [r2, #4]
 8007712:	4611      	mov	r1, r2
 8007714:	2201      	movs	r2, #1
 8007716:	408a      	lsls	r2, r1
 8007718:	4611      	mov	r1, r2
 800771a:	4a51      	ldr	r2, [pc, #324]	; (8007860 <extInt_Config+0xd4c>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6093      	str	r3, [r2, #8]

		break;
 8007720:	e01a      	b.n	8007758 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007722:	4b4f      	ldr	r3, [pc, #316]	; (8007860 <extInt_Config+0xd4c>)
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6812      	ldr	r2, [r2, #0]
 800772a:	7912      	ldrb	r2, [r2, #4]
 800772c:	4611      	mov	r1, r2
 800772e:	2201      	movs	r2, #1
 8007730:	408a      	lsls	r2, r1
 8007732:	4611      	mov	r1, r2
 8007734:	4a4a      	ldr	r2, [pc, #296]	; (8007860 <extInt_Config+0xd4c>)
 8007736:	430b      	orrs	r3, r1
 8007738:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800773a:	4b49      	ldr	r3, [pc, #292]	; (8007860 <extInt_Config+0xd4c>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	7912      	ldrb	r2, [r2, #4]
 8007744:	4611      	mov	r1, r2
 8007746:	2201      	movs	r2, #1
 8007748:	408a      	lsls	r2, r1
 800774a:	4611      	mov	r1, r2
 800774c:	4a44      	ldr	r2, [pc, #272]	; (8007860 <extInt_Config+0xd4c>)
 800774e:	430b      	orrs	r3, r1
 8007750:	6093      	str	r3, [r2, #8]

		break;
 8007752:	e001      	b.n	8007758 <extInt_Config+0xc44>

	}default :{

		__NOP();
 8007754:	bf00      	nop
		break;
 8007756:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8007758:	b672      	cpsid	i
}
 800775a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800775c:	4b40      	ldr	r3, [pc, #256]	; (8007860 <extInt_Config+0xd4c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	7912      	ldrb	r2, [r2, #4]
 8007766:	4611      	mov	r1, r2
 8007768:	2201      	movs	r2, #1
 800776a:	408a      	lsls	r2, r1
 800776c:	4611      	mov	r1, r2
 800776e:	4a3c      	ldr	r2, [pc, #240]	; (8007860 <extInt_Config+0xd4c>)
 8007770:	430b      	orrs	r3, r1
 8007772:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	791b      	ldrb	r3, [r3, #4]
 800777a:	2b0f      	cmp	r3, #15
 800777c:	d862      	bhi.n	8007844 <extInt_Config+0xd30>
 800777e:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <extInt_Config+0xc70>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	080077c5 	.word	0x080077c5
 8007788:	080077cd 	.word	0x080077cd
 800778c:	080077d5 	.word	0x080077d5
 8007790:	080077dd 	.word	0x080077dd
 8007794:	080077e5 	.word	0x080077e5
 8007798:	080077ed 	.word	0x080077ed
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	080077fd 	.word	0x080077fd
 80077a4:	08007805 	.word	0x08007805
 80077a8:	0800780d 	.word	0x0800780d
 80077ac:	08007815 	.word	0x08007815
 80077b0:	0800781d 	.word	0x0800781d
 80077b4:	08007825 	.word	0x08007825
 80077b8:	0800782d 	.word	0x0800782d
 80077bc:	08007835 	.word	0x08007835
 80077c0:	0800783d 	.word	0x0800783d
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 80077c4:	2006      	movs	r0, #6
 80077c6:	f7ff f95d 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077ca:	e03d      	b.n	8007848 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 80077cc:	2007      	movs	r0, #7
 80077ce:	f7ff f959 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077d2:	e039      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 80077d4:	2008      	movs	r0, #8
 80077d6:	f7ff f955 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077da:	e035      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 80077dc:	2009      	movs	r0, #9
 80077de:	f7ff f951 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077e2:	e031      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 80077e4:	200a      	movs	r0, #10
 80077e6:	f7ff f94d 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077ea:	e02d      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80077ec:	2017      	movs	r0, #23
 80077ee:	f7ff f949 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077f2:	e029      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80077f4:	2017      	movs	r0, #23
 80077f6:	f7ff f945 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 80077fa:	e025      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 80077fc:	2017      	movs	r0, #23
 80077fe:	f7ff f941 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 8007802:	e021      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007804:	2017      	movs	r0, #23
 8007806:	f7ff f93d 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 800780a:	e01d      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800780c:	2017      	movs	r0, #23
 800780e:	f7ff f939 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 8007812:	e019      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007814:	2028      	movs	r0, #40	; 0x28
 8007816:	f7ff f935 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 800781a:	e015      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800781c:	2028      	movs	r0, #40	; 0x28
 800781e:	f7ff f931 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 8007822:	e011      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007824:	2028      	movs	r0, #40	; 0x28
 8007826:	f7ff f92d 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 800782a:	e00d      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800782c:	2028      	movs	r0, #40	; 0x28
 800782e:	f7ff f929 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 8007832:	e009      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007834:	2028      	movs	r0, #40	; 0x28
 8007836:	f7ff f925 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 800783a:	e005      	b.n	8007848 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800783c:	2028      	movs	r0, #40	; 0x28
 800783e:	f7ff f921 	bl	8006a84 <__NVIC_EnableIRQ>
			break;
 8007842:	e001      	b.n	8007848 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8007844:	bf00      	nop
			break;
 8007846:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8007848:	b662      	cpsie	i
}
 800784a:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40021000 	.word	0x40021000
 8007858:	40013800 	.word	0x40013800
 800785c:	40021c00 	.word	0x40021c00
 8007860:	40013c00 	.word	0x40013c00

08007864 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8007870:	b672      	cpsid	i
}
 8007872:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	f200 8084 	bhi.w	8007988 <exti_Set_Priority+0x124>
 8007880:	a201      	add	r2, pc, #4	; (adr r2, 8007888 <exti_Set_Priority+0x24>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078d5 	.word	0x080078d5
 8007890:	080078e1 	.word	0x080078e1
 8007894:	080078ed 	.word	0x080078ed
 8007898:	080078f9 	.word	0x080078f9
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007911 	.word	0x08007911
 80078a4:	0800791d 	.word	0x0800791d
 80078a8:	08007929 	.word	0x08007929
 80078ac:	08007935 	.word	0x08007935
 80078b0:	08007941 	.word	0x08007941
 80078b4:	0800794d 	.word	0x0800794d
 80078b8:	08007959 	.word	0x08007959
 80078bc:	08007965 	.word	0x08007965
 80078c0:	08007971 	.word	0x08007971
 80078c4:	0800797d 	.word	0x0800797d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	4619      	mov	r1, r3
 80078cc:	2006      	movs	r0, #6
 80078ce:	f7ff f8f7 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 80078d2:	e05b      	b.n	800798c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	4619      	mov	r1, r3
 80078d8:	2007      	movs	r0, #7
 80078da:	f7ff f8f1 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 80078de:	e055      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	4619      	mov	r1, r3
 80078e4:	2008      	movs	r0, #8
 80078e6:	f7ff f8eb 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 80078ea:	e04f      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	4619      	mov	r1, r3
 80078f0:	2009      	movs	r0, #9
 80078f2:	f7ff f8e5 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 80078f6:	e049      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	4619      	mov	r1, r3
 80078fc:	200a      	movs	r0, #10
 80078fe:	f7ff f8df 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 8007902:	e043      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	4619      	mov	r1, r3
 8007908:	2017      	movs	r0, #23
 800790a:	f7ff f8d9 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 800790e:	e03d      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	4619      	mov	r1, r3
 8007914:	2017      	movs	r0, #23
 8007916:	f7ff f8d3 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 800791a:	e037      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	4619      	mov	r1, r3
 8007920:	2017      	movs	r0, #23
 8007922:	f7ff f8cd 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 8007926:	e031      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	4619      	mov	r1, r3
 800792c:	2017      	movs	r0, #23
 800792e:	f7ff f8c7 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 8007932:	e02b      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	4619      	mov	r1, r3
 8007938:	2017      	movs	r0, #23
 800793a:	f7ff f8c1 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 800793e:	e025      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	4619      	mov	r1, r3
 8007944:	2028      	movs	r0, #40	; 0x28
 8007946:	f7ff f8bb 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 800794a:	e01f      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	4619      	mov	r1, r3
 8007950:	2028      	movs	r0, #40	; 0x28
 8007952:	f7ff f8b5 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 8007956:	e019      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	4619      	mov	r1, r3
 800795c:	2028      	movs	r0, #40	; 0x28
 800795e:	f7ff f8af 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 8007962:	e013      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	4619      	mov	r1, r3
 8007968:	2028      	movs	r0, #40	; 0x28
 800796a:	f7ff f8a9 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 800796e:	e00d      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	4619      	mov	r1, r3
 8007974:	2028      	movs	r0, #40	; 0x28
 8007976:	f7ff f8a3 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 800797a:	e007      	b.n	800798c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800797c:	78fb      	ldrb	r3, [r7, #3]
 800797e:	4619      	mov	r1, r3
 8007980:	2028      	movs	r0, #40	; 0x28
 8007982:	f7ff f89d 	bl	8006ac0 <__NVIC_SetPriority>
				break;
 8007986:	e001      	b.n	800798c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 8007988:	bf00      	nop
				break;
 800798a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800798c:	b662      	cpsie	i
}
 800798e:	bf00      	nop

		}

	__enable_irq();

}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
	__NOP();
 800799c:	bf00      	nop
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
	__NOP();
 80079ac:	bf00      	nop
}
 80079ae:	bf00      	nop
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
	__NOP();
 80079bc:	bf00      	nop
}
 80079be:	bf00      	nop
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
	__NOP();
 80079cc:	bf00      	nop
}
 80079ce:	bf00      	nop
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	__NOP();
 80079dc:	bf00      	nop
}
 80079de:	bf00      	nop
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
	__NOP();
 80079ec:	bf00      	nop
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	__NOP();
 80079fc:	bf00      	nop
}
 80079fe:	bf00      	nop
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
	__NOP();
 8007a0c:	bf00      	nop
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
	__NOP();
 8007a1c:	bf00      	nop
}
 8007a1e:	bf00      	nop
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
	__NOP();
 8007a2c:	bf00      	nop
}
 8007a2e:	bf00      	nop
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
	__NOP();
 8007a3c:	bf00      	nop
}
 8007a3e:	bf00      	nop
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
	__NOP();
 8007a4c:	bf00      	nop
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
	__NOP();
 8007a5c:	bf00      	nop
}
 8007a5e:	bf00      	nop
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
	__NOP();
 8007a6c:	bf00      	nop
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <EXTI0_IRQHandler+0x24>)
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <EXTI0_IRQHandler+0x24>)
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <EXTI0_IRQHandler+0x24>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 8007a94:	f7ff ff80 	bl	8007998 <callback_extInt0>
	}
}
 8007a98:	bf00      	nop
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40013c00 	.word	0x40013c00

08007aa0 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 8007aa4:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <EXTI1_IRQHandler+0x24>)
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <EXTI1_IRQHandler+0x24>)
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	4a03      	ldr	r2, [pc, #12]	; (8007ac4 <EXTI1_IRQHandler+0x24>)
 8007ab6:	f043 0302 	orr.w	r3, r3, #2
 8007aba:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 8007abc:	f7fa f810 	bl	8001ae0 <callback_extInt1>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40013c00 	.word	0x40013c00

08007ac8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8007acc:	4b07      	ldr	r3, [pc, #28]	; (8007aec <EXTI2_IRQHandler+0x24>)
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <EXTI2_IRQHandler+0x24>)
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	4a03      	ldr	r2, [pc, #12]	; (8007aec <EXTI2_IRQHandler+0x24>)
 8007ade:	f043 0304 	orr.w	r3, r3, #4
 8007ae2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 8007ae4:	f7ff ff60 	bl	80079a8 <callback_extInt2>
	}
}
 8007ae8:	bf00      	nop
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40013c00 	.word	0x40013c00

08007af0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 8007af4:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <EXTI3_IRQHandler+0x24>)
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8007b00:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <EXTI3_IRQHandler+0x24>)
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	4a03      	ldr	r2, [pc, #12]	; (8007b14 <EXTI3_IRQHandler+0x24>)
 8007b06:	f043 0308 	orr.w	r3, r3, #8
 8007b0a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8007b0c:	f7f9 fff8 	bl	8001b00 <callback_extInt3>
	}
}
 8007b10:	bf00      	nop
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40013c00 	.word	0x40013c00

08007b18 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8007b1c:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <EXTI4_IRQHandler+0x24>)
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <EXTI4_IRQHandler+0x24>)
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	4a03      	ldr	r2, [pc, #12]	; (8007b3c <EXTI4_IRQHandler+0x24>)
 8007b2e:	f043 0310 	orr.w	r3, r3, #16
 8007b32:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 8007b34:	f7ff ff40 	bl	80079b8 <callback_extInt4>
	}
}
 8007b38:	bf00      	nop
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40013c00 	.word	0x40013c00

08007b40 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 8007b44:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8007b50:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	4a22      	ldr	r2, [pc, #136]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b56:	f043 0320 	orr.w	r3, r3, #32
 8007b5a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8007b5c:	f7ff ff34 	bl	80079c8 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8007b60:	e03c      	b.n	8007bdc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 8007b62:	4b1f      	ldr	r3, [pc, #124]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b78:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 8007b7a:	f7ff ff2d 	bl	80079d8 <callback_extInt6>
}
 8007b7e:	e02d      	b.n	8007bdc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 8007b8c:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 8007b98:	f7ff ff26 	bl	80079e8 <callback_extInt7>
}
 8007b9c:	e01e      	b.n	8007bdc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 8007b9e:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	4a0c      	ldr	r2, [pc, #48]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb4:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 8007bb6:	f7ff ff1f 	bl	80079f8 <callback_extInt8>
}
 8007bba:	e00f      	b.n	8007bdc <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 8007bbc:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <EXTI9_5_IRQHandler+0xa0>)
 8007bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bd2:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 8007bd4:	f7ff ff18 	bl	8007a08 <callback_extInt9>
}
 8007bd8:	e000      	b.n	8007bdc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8007bda:	bf00      	nop
}
 8007bdc:	bf00      	nop
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40013c00 	.word	0x40013c00

08007be4 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8007be8:	4b2d      	ldr	r3, [pc, #180]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d008      	beq.n	8007c06 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 8007bf4:	4b2a      	ldr	r3, [pc, #168]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	4a29      	ldr	r2, [pc, #164]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bfe:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8007c00:	f7ff ff0a 	bl	8007a18 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 8007c04:	e049      	b.n	8007c9a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 8007c06:	4b26      	ldr	r3, [pc, #152]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d008      	beq.n	8007c24 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 8007c12:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	4a22      	ldr	r2, [pc, #136]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c1c:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8007c1e:	f7ff ff03 	bl	8007a28 <callback_extInt11>
}
 8007c22:	e03a      	b.n	8007c9a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 8007c24:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d008      	beq.n	8007c42 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8007c30:	4b1b      	ldr	r3, [pc, #108]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	4a1a      	ldr	r2, [pc, #104]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c3a:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8007c3c:	f7ff fefc 	bl	8007a38 <callback_extInt12>
}
 8007c40:	e02b      	b.n	8007c9a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 8007c42:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d008      	beq.n	8007c60 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8007c4e:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c58:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8007c5a:	f7ff fef5 	bl	8007a48 <callback_extInt13>
}
 8007c5e:	e01c      	b.n	8007c9a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8007c60:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	4a0b      	ldr	r2, [pc, #44]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c76:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 8007c78:	f7ff feee 	bl	8007a58 <callback_extInt14>
}
 8007c7c:	e00d      	b.n	8007c9a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	4a04      	ldr	r2, [pc, #16]	; (8007ca0 <EXTI15_10_IRQHandler+0xbc>)
 8007c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c94:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 8007c96:	f7ff fee7 	bl	8007a68 <callback_extInt15>
}
 8007c9a:	bf00      	nop
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40013c00 	.word	0x40013c00

08007ca4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a88      	ldr	r2, [pc, #544]	; (8007edc <GPIO_Config+0x238>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d106      	bne.n	8007ccc <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 8007cbe:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <GPIO_Config+0x23c>)
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc2:	4a87      	ldr	r2, [pc, #540]	; (8007ee0 <GPIO_Config+0x23c>)
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cca:	e03a      	b.n	8007d42 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a84      	ldr	r2, [pc, #528]	; (8007ee4 <GPIO_Config+0x240>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d106      	bne.n	8007ce4 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 8007cd6:	4b82      	ldr	r3, [pc, #520]	; (8007ee0 <GPIO_Config+0x23c>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	4a81      	ldr	r2, [pc, #516]	; (8007ee0 <GPIO_Config+0x23c>)
 8007cdc:	f043 0302 	orr.w	r3, r3, #2
 8007ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce2:	e02e      	b.n	8007d42 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a7f      	ldr	r2, [pc, #508]	; (8007ee8 <GPIO_Config+0x244>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d106      	bne.n	8007cfc <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8007cee:	4b7c      	ldr	r3, [pc, #496]	; (8007ee0 <GPIO_Config+0x23c>)
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	4a7b      	ldr	r2, [pc, #492]	; (8007ee0 <GPIO_Config+0x23c>)
 8007cf4:	f043 0304 	orr.w	r3, r3, #4
 8007cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cfa:	e022      	b.n	8007d42 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a7a      	ldr	r2, [pc, #488]	; (8007eec <GPIO_Config+0x248>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d106      	bne.n	8007d14 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8007d06:	4b76      	ldr	r3, [pc, #472]	; (8007ee0 <GPIO_Config+0x23c>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	4a75      	ldr	r2, [pc, #468]	; (8007ee0 <GPIO_Config+0x23c>)
 8007d0c:	f043 0308 	orr.w	r3, r3, #8
 8007d10:	6313      	str	r3, [r2, #48]	; 0x30
 8007d12:	e016      	b.n	8007d42 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a75      	ldr	r2, [pc, #468]	; (8007ef0 <GPIO_Config+0x24c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d106      	bne.n	8007d2c <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8007d1e:	4b70      	ldr	r3, [pc, #448]	; (8007ee0 <GPIO_Config+0x23c>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	4a6f      	ldr	r2, [pc, #444]	; (8007ee0 <GPIO_Config+0x23c>)
 8007d24:	f043 0310 	orr.w	r3, r3, #16
 8007d28:	6313      	str	r3, [r2, #48]	; 0x30
 8007d2a:	e00a      	b.n	8007d42 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a70      	ldr	r2, [pc, #448]	; (8007ef4 <GPIO_Config+0x250>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d105      	bne.n	8007d42 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8007d36:	4b6a      	ldr	r3, [pc, #424]	; (8007ee0 <GPIO_Config+0x23c>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	4a69      	ldr	r2, [pc, #420]	; (8007ee0 <GPIO_Config+0x23c>)
 8007d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d40:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	795b      	ldrb	r3, [r3, #5]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d143      	bne.n	8007dd2 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	791b      	ldrb	r3, [r3, #4]
 8007d4e:	2b07      	cmp	r3, #7
 8007d50:	d81f      	bhi.n	8007d92 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	791b      	ldrb	r3, [r3, #4]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	210f      	movs	r1, #15
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	fa01 f303 	lsl.w	r3, r1, r3
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	400a      	ands	r2, r1
 8007d72:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7a5b      	ldrb	r3, [r3, #9]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	fa01 f303 	lsl.w	r3, r1, r3
 8007d86:	4619      	mov	r1, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	621a      	str	r2, [r3, #32]
 8007d90:	e01f      	b.n	8007dd2 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	791b      	ldrb	r3, [r3, #4]
 8007d96:	3b08      	subs	r3, #8
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007da2:	210f      	movs	r1, #15
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	fa01 f303 	lsl.w	r3, r1, r3
 8007daa:	43db      	mvns	r3, r3
 8007dac:	4619      	mov	r1, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	400a      	ands	r2, r1
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7a5b      	ldrb	r3, [r3, #9]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc8:	4619      	mov	r1, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	795b      	ldrb	r3, [r3, #5]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	791b      	ldrb	r3, [r3, #4]
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	791b      	ldrb	r3, [r3, #4]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	2103      	movs	r1, #3
 8007df2:	fa01 f303 	lsl.w	r3, r1, r3
 8007df6:	43db      	mvns	r3, r3
 8007df8:	4619      	mov	r1, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	400a      	ands	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6819      	ldr	r1, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7a1b      	ldrb	r3, [r3, #8]
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	791b      	ldrb	r3, [r3, #4]
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	791b      	ldrb	r3, [r3, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	2301      	movs	r3, #1
 8007e30:	408b      	lsls	r3, r1
 8007e32:	43db      	mvns	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	400a      	ands	r2, r1
 8007e3c:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6859      	ldr	r1, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	799b      	ldrb	r3, [r3, #6]
 8007e52:	461a      	mov	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	791b      	ldrb	r3, [r3, #4]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	791b      	ldrb	r3, [r3, #4]
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	2103      	movs	r1, #3
 8007e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e72:	43db      	mvns	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	400a      	ands	r2, r1
 8007e7c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6899      	ldr	r1, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	79db      	ldrb	r3, [r3, #7]
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	791b      	ldrb	r3, [r3, #4]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	791b      	ldrb	r3, [r3, #4]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	2103      	movs	r1, #3
 8007eae:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	400a      	ands	r2, r1
 8007ebc:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68d9      	ldr	r1, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40020000 	.word	0x40020000
 8007ee0:	40023800 	.word	0x40023800
 8007ee4:	40020400 	.word	0x40020400
 8007ee8:	40020800 	.word	0x40020800
 8007eec:	40020c00 	.word	0x40020c00
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	40021c00 	.word	0x40021c00

08007ef8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d10d      	bne.n	8007f26 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	791b      	ldrb	r3, [r3, #4]
 8007f14:	4619      	mov	r1, r3
 8007f16:	2301      	movs	r3, #1
 8007f18:	408b      	lsls	r3, r1
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 8007f24:	e00d      	b.n	8007f42 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	791b      	ldrb	r3, [r3, #4]
 8007f30:	3310      	adds	r3, #16
 8007f32:	2101      	movs	r1, #1
 8007f34:	fa01 f303 	lsl.w	r3, r1, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	619a      	str	r2, [r3, #24]
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10d      	bne.n	8007f7c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	791b      	ldrb	r3, [r3, #4]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	408b      	lsls	r3, r1
 8007f70:	4619      	mov	r1, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 8007f7a:	e00d      	b.n	8007f98 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	791b      	ldrb	r3, [r3, #4]
 8007f86:	3310      	adds	r3, #16
 8007f88:	2101      	movs	r1, #1
 8007f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8e:	4619      	mov	r1, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	619a      	str	r2, [r3, #24]
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	791b      	ldrb	r3, [r3, #4]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4093      	lsls	r3, r2
 8007fba:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 8007fc4:	897b      	ldrh	r3, [r7, #10]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	791b      	ldrb	r3, [r3, #4]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	40d3      	lsrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff ffd8 	bl	8007fa4 <GPIO_ReadPin>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf0c      	ite	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	2300      	movne	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff ff76 	bl	8007ef8 <GPIO_WritePin>
}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fe3b 	bl	8007ca4 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff fe36 	bl	8007ca4 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	4618      	mov	r0, r3
 800803e:	f002 f975 	bl	800a32c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 8008042:	e004      	b.n	800804e <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f94f 	bl	80082e8 <WHOIAM>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0f7      	beq.n	8008044 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 8008054:	216b      	movs	r1, #107	; 0x6b
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8f1 	bl	800823e <readData>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 8008060:	2300      	movs	r3, #0
 8008062:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	461a      	mov	r2, r3
 8008068:	216b      	movs	r1, #107	; 0x6b
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f89c 	bl	80081a8 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 8008070:	216b      	movs	r1, #107	; 0x6b
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8e3 	bl	800823e <readData>
 8008078:	4603      	mov	r3, r0
 800807a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800807c:	211c      	movs	r1, #28
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8dd 	bl	800823e <readData>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	f023 0318 	bic.w	r3, r3, #24
 800808e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d833      	bhi.n	8008100 <configMPUAccel+0xec>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <configMPUAccel+0x8c>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080bf 	.word	0x080080bf
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	080080eb 	.word	0x080080eb
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	461a      	mov	r2, r3
 80080b4:	211c      	movs	r1, #28
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f876 	bl	80081a8 <writeData>


				break;
 80080bc:	e021      	b.n	8008102 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	461a      	mov	r2, r3
 80080ca:	211c      	movs	r1, #28
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f86b 	bl	80081a8 <writeData>


				break;
 80080d2:	e016      	b.n	8008102 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	f043 0310 	orr.w	r3, r3, #16
 80080da:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	461a      	mov	r2, r3
 80080e0:	211c      	movs	r1, #28
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f860 	bl	80081a8 <writeData>


				break;
 80080e8:	e00b      	b.n	8008102 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f043 0318 	orr.w	r3, r3, #24
 80080f0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	461a      	mov	r2, r3
 80080f6:	211c      	movs	r1, #28
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f855 	bl	80081a8 <writeData>


				break;
 80080fe:	e000      	b.n	8008102 <configMPUAccel+0xee>
			}default:{
				break;
 8008100:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 8008102:	211c      	movs	r1, #28
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f89a 	bl	800823e <readData>
 800810a:	4603      	mov	r3, r0
 800810c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800810e:	211b      	movs	r1, #27
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f894 	bl	800823e <readData>
 8008116:	4603      	mov	r3, r0
 8008118:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	f023 0318 	bic.w	r3, r3, #24
 8008120:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d832      	bhi.n	8008190 <configMPUAccel+0x17c>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <configMPUAccel+0x11c>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008141 	.word	0x08008141
 8008134:	0800814f 	.word	0x0800814f
 8008138:	08008165 	.word	0x08008165
 800813c:	0800817b 	.word	0x0800817b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	461a      	mov	r2, r3
 8008144:	211b      	movs	r1, #27
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f82e 	bl	80081a8 <writeData>


				break;
 800814c:	e021      	b.n	8008192 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	f043 0308 	orr.w	r3, r3, #8
 8008154:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	461a      	mov	r2, r3
 800815a:	211b      	movs	r1, #27
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f823 	bl	80081a8 <writeData>


				break;
 8008162:	e016      	b.n	8008192 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	f043 0310 	orr.w	r3, r3, #16
 800816a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	461a      	mov	r2, r3
 8008170:	211b      	movs	r1, #27
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f818 	bl	80081a8 <writeData>


				break;
 8008178:	e00b      	b.n	8008192 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	f043 0318 	orr.w	r3, r3, #24
 8008180:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	461a      	mov	r2, r3
 8008186:	211b      	movs	r1, #27
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f80d 	bl	80081a8 <writeData>


				break;
 800818e:	e000      	b.n	8008192 <configMPUAccel+0x17e>
			}default:{
				break;
 8008190:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 8008192:	211b      	movs	r1, #27
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f852 	bl	800823e <readData>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]


}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop

080081a8 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
 80081b4:	4613      	mov	r3, r2
 80081b6:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695a      	ldr	r2, [r3, #20]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ca:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f002 fa1b 	bl	800a60c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68d8      	ldr	r0, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	791b      	ldrb	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	4619      	mov	r1, r3
 80081e4:	f002 fa7d 	bl	800a6e2 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	4611      	mov	r1, r2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f002 fa9e 	bl	800a732 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80081f6:	e000      	b.n	80081fa <writeData+0x52>
		__NOP();
 80081f8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1f6      	bne.n	80081f8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	78ba      	ldrb	r2, [r7, #2]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f002 faa7 	bl	800a766 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8008218:	e000      	b.n	800821c <writeData+0x74>
		__NOP();
 800821a:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f6      	bne.n	800821a <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4618      	mov	r0, r3
 8008232:	f002 f9d9 	bl	800a5e8 <i2c_stopTransaction>



}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	695a      	ldr	r2, [r3, #20]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008260:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	4618      	mov	r0, r3
 8008268:	f002 f9d0 	bl	800a60c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68d8      	ldr	r0, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	791b      	ldrb	r3, [r3, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	4619      	mov	r1, r3
 800827a:	f002 fa32 	bl	800a6e2 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f002 fa53 	bl	800a732 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800828c:	e000      	b.n	8008290 <readData+0x52>
		__NOP();
 800828e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f6      	bne.n	800828e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f002 f9e2 	bl	800a66e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68d8      	ldr	r0, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	791b      	ldrb	r3, [r3, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	4619      	mov	r1, r3
 80082b8:	f002 fa13 	bl	800a6e2 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f002 f9fc 	bl	800a6be <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f002 f98c 	bl	800a5e8 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f002 fa60 	bl	800a79a <i2c_readDataByte>
 80082da:	4603      	mov	r3, r0
 80082dc:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 80082f8:	2175      	movs	r1, #117	; 0x75
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff ff9f 	bl	800823e <readData>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800830a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	bf14      	ite	ne
 8008316:	2301      	movne	r3, #1
 8008318:	2300      	moveq	r3, #0
 800831a:	b2db      	uxtb	r3, r3
 800831c:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800831e:	7bbb      	ldrb	r3, [r7, #14]

}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	f04f 0300 	mov.w	r3, #0
 8008344:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8008348:	2143      	movs	r1, #67	; 0x43
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff ff77 	bl	800823e <readData>
 8008350:	4603      	mov	r3, r0
 8008352:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8008354:	2144      	movs	r1, #68	; 0x44
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ff71 	bl	800823e <readData>
 800835c:	4603      	mov	r3, r0
 800835e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8008360:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	b21a      	sxth	r2, r3
 8008368:	89bb      	ldrh	r3, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d846      	bhi.n	8008404 <readGyro_X+0xdc>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <readGyro_X+0x54>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	0800838d 	.word	0x0800838d
 8008380:	080083ab 	.word	0x080083ab
 8008384:	080083c9 	.word	0x080083c9
 8008388:	080083e7 	.word	0x080083e7
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800838c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008390:	4618      	mov	r0, r3
 8008392:	f7f8 f8df 	bl	8000554 <__aeabi_i2d>
 8008396:	a325      	add	r3, pc, #148	; (adr r3, 800842c <readGyro_X+0x104>)
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f7f8 fa6e 	bl	800087c <__aeabi_ddiv>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80083a8:	e02d      	b.n	8008406 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 80083aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7f8 f8d0 	bl	8000554 <__aeabi_i2d>
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	4b19      	ldr	r3, [pc, #100]	; (8008420 <readGyro_X+0xf8>)
 80083ba:	f7f8 fa5f 	bl	800087c <__aeabi_ddiv>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80083c6:	e01e      	b.n	8008406 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 80083c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7f8 f8c1 	bl	8000554 <__aeabi_i2d>
 80083d2:	f04f 0200 	mov.w	r2, #0
 80083d6:	4b13      	ldr	r3, [pc, #76]	; (8008424 <readGyro_X+0xfc>)
 80083d8:	f7f8 fa50 	bl	800087c <__aeabi_ddiv>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80083e4:	e00f      	b.n	8008406 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 80083e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f8 f8b2 	bl	8000554 <__aeabi_i2d>
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <readGyro_X+0x100>)
 80083f6:	f7f8 fa41 	bl	800087c <__aeabi_ddiv>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008402:	e000      	b.n	8008406 <readGyro_X+0xde>
		}default:{
			break;
 8008404:	bf00      	nop
		}

	}

	return GYROX_R;
 8008406:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800840a:	f7f8 fc05 	bl	8000c18 <__aeabi_d2f>
 800840e:	4603      	mov	r3, r0
 8008410:	ee07 3a90 	vmov	s15, r3

}
 8008414:	eeb0 0a67 	vmov.f32	s0, s15
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40508000 	.word	0x40508000
 8008424:	40408000 	.word	0x40408000
 8008428:	40300000 	.word	0x40300000
 800842c:	00000000 	.word	0x00000000
 8008430:	40606000 	.word	0x40606000
 8008434:	00000000 	.word	0x00000000

08008438 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8008458:	2145      	movs	r1, #69	; 0x45
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff feef 	bl	800823e <readData>
 8008460:	4603      	mov	r3, r0
 8008462:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8008464:	2146      	movs	r1, #70	; 0x46
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff fee9 	bl	800823e <readData>
 800846c:	4603      	mov	r3, r0
 800846e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8008470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008474:	021b      	lsls	r3, r3, #8
 8008476:	b21a      	sxth	r2, r3
 8008478:	89bb      	ldrh	r3, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b03      	cmp	r3, #3
 8008484:	d846      	bhi.n	8008514 <readGyro_Y+0xdc>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <readGyro_Y+0x54>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	0800849d 	.word	0x0800849d
 8008490:	080084bb 	.word	0x080084bb
 8008494:	080084d9 	.word	0x080084d9
 8008498:	080084f7 	.word	0x080084f7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800849c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f8 f857 	bl	8000554 <__aeabi_i2d>
 80084a6:	a325      	add	r3, pc, #148	; (adr r3, 800853c <readGyro_Y+0x104>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	f7f8 f9e6 	bl	800087c <__aeabi_ddiv>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80084b8:	e02d      	b.n	8008516 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 80084ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7f8 f848 	bl	8000554 <__aeabi_i2d>
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	4b19      	ldr	r3, [pc, #100]	; (8008530 <readGyro_Y+0xf8>)
 80084ca:	f7f8 f9d7 	bl	800087c <__aeabi_ddiv>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80084d6:	e01e      	b.n	8008516 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 80084d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f839 	bl	8000554 <__aeabi_i2d>
 80084e2:	f04f 0200 	mov.w	r2, #0
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <readGyro_Y+0xfc>)
 80084e8:	f7f8 f9c8 	bl	800087c <__aeabi_ddiv>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80084f4:	e00f      	b.n	8008516 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 80084f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f8 f82a 	bl	8000554 <__aeabi_i2d>
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <readGyro_Y+0x100>)
 8008506:	f7f8 f9b9 	bl	800087c <__aeabi_ddiv>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008512:	e000      	b.n	8008516 <readGyro_Y+0xde>
		}default:{
			break;
 8008514:	bf00      	nop
		}

	}

	return GYROY_R;
 8008516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800851a:	f7f8 fb7d 	bl	8000c18 <__aeabi_d2f>
 800851e:	4603      	mov	r3, r0
 8008520:	ee07 3a90 	vmov	s15, r3

}
 8008524:	eeb0 0a67 	vmov.f32	s0, s15
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40508000 	.word	0x40508000
 8008534:	40408000 	.word	0x40408000
 8008538:	40300000 	.word	0x40300000
 800853c:	00000000 	.word	0x00000000
 8008540:	40606000 	.word	0x40606000
 8008544:	00000000 	.word	0x00000000

08008548 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8008568:	2147      	movs	r1, #71	; 0x47
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fe67 	bl	800823e <readData>
 8008570:	4603      	mov	r3, r0
 8008572:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8008574:	2148      	movs	r1, #72	; 0x48
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff fe61 	bl	800823e <readData>
 800857c:	4603      	mov	r3, r0
 800857e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8008580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008584:	021b      	lsls	r3, r3, #8
 8008586:	b21a      	sxth	r2, r3
 8008588:	89bb      	ldrh	r3, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	2b03      	cmp	r3, #3
 8008594:	d846      	bhi.n	8008624 <readGyro_Z+0xdc>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <readGyro_Z+0x54>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085cb 	.word	0x080085cb
 80085a4:	080085e9 	.word	0x080085e9
 80085a8:	08008607 	.word	0x08008607
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 80085ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f7 ffcf 	bl	8000554 <__aeabi_i2d>
 80085b6:	a325      	add	r3, pc, #148	; (adr r3, 800864c <readGyro_Z+0x104>)
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f7f8 f95e 	bl	800087c <__aeabi_ddiv>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80085c8:	e02d      	b.n	8008626 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 80085ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7f7 ffc0 	bl	8000554 <__aeabi_i2d>
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	4b19      	ldr	r3, [pc, #100]	; (8008640 <readGyro_Z+0xf8>)
 80085da:	f7f8 f94f 	bl	800087c <__aeabi_ddiv>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 80085e6:	e01e      	b.n	8008626 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 80085e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7f7 ffb1 	bl	8000554 <__aeabi_i2d>
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <readGyro_Z+0xfc>)
 80085f8:	f7f8 f940 	bl	800087c <__aeabi_ddiv>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008604:	e00f      	b.n	8008626 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8008606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800860a:	4618      	mov	r0, r3
 800860c:	f7f7 ffa2 	bl	8000554 <__aeabi_i2d>
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <readGyro_Z+0x100>)
 8008616:	f7f8 f931 	bl	800087c <__aeabi_ddiv>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8008622:	e000      	b.n	8008626 <readGyro_Z+0xde>
		}default:{
			break;
 8008624:	bf00      	nop
		}

	}

	return GYROZ_R;
 8008626:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800862a:	f7f8 faf5 	bl	8000c18 <__aeabi_d2f>
 800862e:	4603      	mov	r3, r0
 8008630:	ee07 3a90 	vmov	s15, r3

}
 8008634:	eeb0 0a67 	vmov.f32	s0, s15
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	40508000 	.word	0x40508000
 8008644:	40408000 	.word	0x40408000
 8008648:	40300000 	.word	0x40300000
 800864c:	00000000 	.word	0x00000000
 8008650:	40606000 	.word	0x40606000
 8008654:	00000000 	.word	0x00000000

08008658 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 8008658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800865c:	b08a      	sub	sp, #40	; 0x28
 800865e:	af00      	add	r7, sp, #0
 8008660:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800866e:	f7f7 fe23 	bl	80002b8 <__aeabi_dsub>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008686:	f7f7 fe17 	bl	80002b8 <__aeabi_dsub>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 8008692:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80087a0 <calculation_parameter_distance+0x148>
 8008696:	ed97 0b08 	vldr	d0, [r7, #32]
 800869a:	f004 fed7 	bl	800d44c <pow>
 800869e:	ec59 8b10 	vmov	r8, r9, d0
 80086a2:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 80087a0 <calculation_parameter_distance+0x148>
 80086a6:	ed97 0b06 	vldr	d0, [r7, #24]
 80086aa:	f004 fecf 	bl	800d44c <pow>
 80086ae:	ec53 2b10 	vmov	r2, r3, d0
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	f7f7 fe01 	bl	80002bc <__adddf3>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	ec43 2b17 	vmov	d7, r2, r3
 80086c2:	eeb0 0a47 	vmov.f32	s0, s14
 80086c6:	eef0 0a67 	vmov.f32	s1, s15
 80086ca:	f004 ff2f 	bl	800d52c <sqrt>
 80086ce:	eeb0 7a40 	vmov.f32	s14, s0
 80086d2:	eef0 7a60 	vmov.f32	s15, s1
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 80086dc:	6979      	ldr	r1, [r7, #20]
 80086de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 80086e6:	6979      	ldr	r1, [r7, #20]
 80086e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	60bb      	str	r3, [r7, #8]
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008706:	f7f7 ff8f 	bl	8000628 <__aeabi_dmul>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4690      	mov	r8, r2
 8008710:	4699      	mov	r9, r3
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800871c:	f7f7 ff84 	bl	8000628 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4640      	mov	r0, r8
 8008726:	4649      	mov	r1, r9
 8008728:	f7f7 fdc6 	bl	80002b8 <__aeabi_dsub>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	6979      	ldr	r1, [r7, #20]
 8008732:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 8008736:	6979      	ldr	r1, [r7, #20]
 8008738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800873c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 8008740:	6a3c      	ldr	r4, [r7, #32]
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	603b      	str	r3, [r7, #0]
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008758:	607b      	str	r3, [r7, #4]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008764:	f7f7 ff60 	bl	8000628 <__aeabi_dmul>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4614      	mov	r4, r2
 800876e:	461d      	mov	r5, r3
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800877a:	f7f7 ff55 	bl	8000628 <__aeabi_dmul>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 fd99 	bl	80002bc <__adddf3>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	6979      	ldr	r1, [r7, #20]
 8008790:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8008794:	bf00      	nop
 8008796:	3728      	adds	r7, #40	; 0x28
 8008798:	46bd      	mov	sp, r7
 800879a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800879e:	bf00      	nop
 80087a0:	00000000 	.word	0x00000000
 80087a4:	40000000 	.word	0x40000000

080087a8 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 80087a8:	b5b0      	push	{r4, r5, r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6178      	str	r0, [r7, #20]
 80087b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80087b4:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80087be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087c2:	f7f7 ff31 	bl	8000628 <__aeabi_dmul>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4614      	mov	r4, r2
 80087cc:	461d      	mov	r5, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80087d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087d8:	f7f7 ff26 	bl	8000628 <__aeabi_dmul>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4620      	mov	r0, r4
 80087e2:	4629      	mov	r1, r5
 80087e4:	f7f7 fd6a 	bl	80002bc <__adddf3>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4610      	mov	r0, r2
 80087ee:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80087f6:	f7f7 fd61 	bl	80002bc <__adddf3>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4610      	mov	r0, r2
 8008800:	4619      	mov	r1, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f7f8 f838 	bl	800087c <__aeabi_ddiv>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 8008810:	4611      	mov	r1, r2
 8008812:	61b9      	str	r1, [r7, #24]
 8008814:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008818:	61fb      	str	r3, [r7, #28]

	return distance;
 800881a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800881e:	ec43 2b17 	vmov	d7, r2, r3
}
 8008822:	eeb0 0a47 	vmov.f32	s0, s14
 8008826:	eef0 0a67 	vmov.f32	s1, s15
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bdb0      	pop	{r4, r5, r7, pc}

08008830 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 8008830:	b5b0      	push	{r4, r5, r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af00      	add	r7, sp, #0
 8008836:	6178      	str	r0, [r7, #20]
 8008838:	ed87 0b02 	vstr	d0, [r7, #8]
 800883c:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800884a:	f7f7 feed 	bl	8000628 <__aeabi_dmul>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4614      	mov	r4, r2
 8008854:	461d      	mov	r5, r3
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800885c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008860:	f7f7 fee2 	bl	8000628 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f7 fd26 	bl	80002bc <__adddf3>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4610      	mov	r0, r2
 8008876:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800887e:	f7f7 fd1d 	bl	80002bc <__adddf3>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 8008890:	f7f7 fff4 	bl	800087c <__aeabi_ddiv>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800889c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80088a4:	eeb0 0a47 	vmov.f32	s0, s14
 80088a8:	eef0 0a67 	vmov.f32	s1, s15
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080088b4 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a6c      	ldr	r2, [pc, #432]	; (8008a74 <pwm_Config+0x1c0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d106      	bne.n	80088d4 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80088c6:	4b6c      	ldr	r3, [pc, #432]	; (8008a78 <pwm_Config+0x1c4>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	4a6b      	ldr	r2, [pc, #428]	; (8008a78 <pwm_Config+0x1c4>)
 80088cc:	f043 0301 	orr.w	r3, r3, #1
 80088d0:	6453      	str	r3, [r2, #68]	; 0x44
 80088d2:	e030      	b.n	8008936 <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088dc:	d106      	bne.n	80088ec <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80088de:	4b66      	ldr	r3, [pc, #408]	; (8008a78 <pwm_Config+0x1c4>)
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	4a65      	ldr	r2, [pc, #404]	; (8008a78 <pwm_Config+0x1c4>)
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	6413      	str	r3, [r2, #64]	; 0x40
 80088ea:	e024      	b.n	8008936 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a62      	ldr	r2, [pc, #392]	; (8008a7c <pwm_Config+0x1c8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d106      	bne.n	8008904 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80088f6:	4b60      	ldr	r3, [pc, #384]	; (8008a78 <pwm_Config+0x1c4>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	4a5f      	ldr	r2, [pc, #380]	; (8008a78 <pwm_Config+0x1c4>)
 80088fc:	f043 0302 	orr.w	r3, r3, #2
 8008900:	6413      	str	r3, [r2, #64]	; 0x40
 8008902:	e018      	b.n	8008936 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a5d      	ldr	r2, [pc, #372]	; (8008a80 <pwm_Config+0x1cc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d106      	bne.n	800891c <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800890e:	4b5a      	ldr	r3, [pc, #360]	; (8008a78 <pwm_Config+0x1c4>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	4a59      	ldr	r2, [pc, #356]	; (8008a78 <pwm_Config+0x1c4>)
 8008914:	f043 0304 	orr.w	r3, r3, #4
 8008918:	6413      	str	r3, [r2, #64]	; 0x40
 800891a:	e00c      	b.n	8008936 <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a58      	ldr	r2, [pc, #352]	; (8008a84 <pwm_Config+0x1d0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d106      	bne.n	8008934 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8008926:	4b54      	ldr	r3, [pc, #336]	; (8008a78 <pwm_Config+0x1c4>)
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	4a53      	ldr	r2, [pc, #332]	; (8008a78 <pwm_Config+0x1c4>)
 800892c:	f043 0308 	orr.w	r3, r3, #8
 8008930:	6413      	str	r3, [r2, #64]	; 0x40
 8008932:	e000      	b.n	8008936 <pwm_Config+0x82>
	}
	else{
		__NOP();
 8008934:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008944:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7d5b      	ldrb	r3, [r3, #21]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d106      	bne.n	800895c <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f930 	bl	8008bb4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fa3f 	bl	8008dd8 <setDuttyCycle>
 800895a:	e005      	b.n	8008968 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f929 	bl	8008bb4 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fb10 	bl	8008f88 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0210 	bic.w	r2, r2, #16
 8008976:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	791b      	ldrb	r3, [r3, #4]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d86f      	bhi.n	8008a68 <pwm_Config+0x1b4>
 8008988:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <pwm_Config+0xdc>)
 800898a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898e:	bf00      	nop
 8008990:	080089a1 	.word	0x080089a1
 8008994:	080089d3 	.word	0x080089d3
 8008998:	08008a05 	.word	0x08008a05
 800899c:	08008a37 	.word	0x08008a37
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0203 	bic.w	r2, r2, #3
 80089ae:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80089be:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0208 	orr.w	r2, r2, #8
 80089ce:	619a      	str	r2, [r3, #24]


		break;
 80089d0:	e04b      	b.n	8008a6a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	699a      	ldr	r2, [r3, #24]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80089e0:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	699a      	ldr	r2, [r3, #24]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80089f0:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699a      	ldr	r2, [r3, #24]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a00:	619a      	str	r2, [r3, #24]

		break;
 8008a02:	e032      	b.n	8008a6a <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	69da      	ldr	r2, [r3, #28]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0203 	bic.w	r2, r2, #3
 8008a12:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	69da      	ldr	r2, [r3, #28]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008a22:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69da      	ldr	r2, [r3, #28]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0208 	orr.w	r2, r2, #8
 8008a32:	61da      	str	r2, [r3, #28]

		break;
 8008a34:	e019      	b.n	8008a6a <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69da      	ldr	r2, [r3, #28]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008a44:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008a54:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a64:	61da      	str	r2, [r3, #28]

		break;
 8008a66:	e000      	b.n	8008a6a <pwm_Config+0x1b6>
	}

	default:{
		break;
 8008a68:	bf00      	nop
	}// fin del switch-case




}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40000c00 	.word	0x40000c00

08008a88 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a3d      	ldr	r2, [pc, #244]	; (8008bb0 <enableOutput+0x104>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d13a      	bne.n	8008b34 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	791b      	ldrb	r3, [r3, #4]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d862      	bhi.n	8008b9c <enableOutput+0xf0>
 8008ad6:	a201      	add	r2, pc, #4	; (adr r2, 8008adc <enableOutput+0x30>)
 8008ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008adc:	08008aed 	.word	0x08008aed
 8008ae0:	08008aff 	.word	0x08008aff
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	08008b23 	.word	0x08008b23
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6a1a      	ldr	r2, [r3, #32]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	621a      	str	r2, [r3, #32]

				break;
 8008afc:	e051      	b.n	8008ba2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a1a      	ldr	r2, [r3, #32]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0210 	orr.w	r2, r2, #16
 8008b0c:	621a      	str	r2, [r3, #32]

				break;
 8008b0e:	e048      	b.n	8008ba2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b1e:	621a      	str	r2, [r3, #32]

				break;
 8008b20:	e03f      	b.n	8008ba2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6a1a      	ldr	r2, [r3, #32]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b30:	621a      	str	r2, [r3, #32]

				break;
 8008b32:	e036      	b.n	8008ba2 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	791b      	ldrb	r3, [r3, #4]
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d831      	bhi.n	8008ba0 <enableOutput+0xf4>
 8008b3c:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <enableOutput+0x98>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b67 	.word	0x08008b67
 8008b4c:	08008b79 	.word	0x08008b79
 8008b50:	08008b8b 	.word	0x08008b8b
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6a1a      	ldr	r2, [r3, #32]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0201 	orr.w	r2, r2, #1
 8008b62:	621a      	str	r2, [r3, #32]

				break;
 8008b64:	e01d      	b.n	8008ba2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a1a      	ldr	r2, [r3, #32]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0210 	orr.w	r2, r2, #16
 8008b74:	621a      	str	r2, [r3, #32]

				break;
 8008b76:	e014      	b.n	8008ba2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b86:	621a      	str	r2, [r3, #32]

				break;
 8008b88:	e00b      	b.n	8008ba2 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b98:	621a      	str	r2, [r3, #32]

				break;
 8008b9a:	e002      	b.n	8008ba2 <enableOutput+0xf6>
				break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <enableOutput+0xf6>
			}

			default: {
				break;
 8008ba0:	bf00      	nop
			}

		}
	}
	return SET;
 8008ba2:	2301      	movs	r3, #1
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40010000 	.word	0x40010000

08008bb4 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6892      	ldr	r2, [r2, #8]
 8008bc8:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d01a      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2b14      	cmp	r3, #20
 8008bda:	d017      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b1e      	cmp	r3, #30
 8008be0:	d014      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b28      	cmp	r3, #40	; 0x28
 8008be6:	d011      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b32      	cmp	r3, #50	; 0x32
 8008bec:	d00e      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b3c      	cmp	r3, #60	; 0x3c
 8008bf2:	d00b      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b46      	cmp	r3, #70	; 0x46
 8008bf8:	d008      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2b50      	cmp	r3, #80	; 0x50
 8008bfe:	d005      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b5a      	cmp	r3, #90	; 0x5a
 8008c04:	d002      	beq.n	8008c0c <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b64      	cmp	r3, #100	; 0x64
 8008c0a:	d111      	bne.n	8008c30 <setFrequency+0x7c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	899b      	ldrh	r3, [r3, #12]
 8008c10:	461a      	mov	r2, r3
 8008c12:	0152      	lsls	r2, r2, #5
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	0092      	lsls	r2, r2, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	4b68      	ldr	r3, [pc, #416]	; (8008dc0 <setFrequency+0x20c>)
 8008c20:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008c22:	4b67      	ldr	r3, [pc, #412]	; (8008dc0 <setFrequency+0x20c>)
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	1e5a      	subs	r2, r3, #1
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c2e:	e0c0      	b.n	8008db2 <setFrequency+0x1fe>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2ba0      	cmp	r3, #160	; 0xa0
 8008c34:	d022      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2bc8      	cmp	r3, #200	; 0xc8
 8008c3a:	d01f      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008c42:	d01b      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8008c4a:	d017      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008c52:	d013      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8008c5a:	d00f      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008c62:	d00b      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8008c6a:	d007      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8008c72:	d003      	beq.n	8008c7c <setFrequency+0xc8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c7a:	d114      	bne.n	8008ca6 <setFrequency+0xf2>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	461a      	mov	r2, r3
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	461a      	mov	r2, r3
 8008c88:	0091      	lsls	r1, r2, #2
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	4b4a      	ldr	r3, [pc, #296]	; (8008dc0 <setFrequency+0x20c>)
 8008c96:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008c98:	4b49      	ldr	r3, [pc, #292]	; (8008dc0 <setFrequency+0x20c>)
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	1e5a      	subs	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ca4:	e085      	b.n	8008db2 <setFrequency+0x1fe>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008cac:	d029      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cb4:	d025      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_30MHz_100us)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d020      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_40MHz_100us)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008cc6:	d01c      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_50MHz_100us)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d017      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_60MHz_100us)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f241 7270 	movw	r2, #6000	; 0x1770
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d012      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_70MHz_100us)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f641 3258 	movw	r2, #7000	; 0x1b58
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00d      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_80MHz_100us)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8008cec:	d009      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_90MHz_100us)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f242 3228 	movw	r2, #9000	; 0x2328
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d004      	beq.n	8008d02 <setFrequency+0x14e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d10f      	bne.n	8008d22 <setFrequency+0x16e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	899b      	ldrh	r3, [r3, #12]
 8008d06:	461a      	mov	r2, r3
 8008d08:	0092      	lsls	r2, r2, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	4b2b      	ldr	r3, [pc, #172]	; (8008dc0 <setFrequency+0x20c>)
 8008d12:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008d14:	4b2a      	ldr	r3, [pc, #168]	; (8008dc0 <setFrequency+0x20c>)
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d20:	e047      	b.n	8008db2 <setFrequency+0x1fe>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8008d28:	d028      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d023      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f247 5230 	movw	r2, #30000	; 0x7530
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d01e      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f649 4240 	movw	r2, #40000	; 0x9c40
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d019      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d014      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00f      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4a19      	ldr	r2, [pc, #100]	; (8008dc4 <setFrequency+0x210>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4a18      	ldr	r2, [pc, #96]	; (8008dc8 <setFrequency+0x214>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d007      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4a17      	ldr	r2, [pc, #92]	; (8008dcc <setFrequency+0x218>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d003      	beq.n	8008d7c <setFrequency+0x1c8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4a16      	ldr	r2, [pc, #88]	; (8008dd0 <setFrequency+0x21c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d10a      	bne.n	8008d92 <setFrequency+0x1de>

		periodo = ptrPwmHandler->config.periodo;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	899a      	ldrh	r2, [r3, #12]
 8008d80:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <setFrequency+0x20c>)
 8008d82:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008d84:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <setFrequency+0x20c>)
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	1e5a      	subs	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d90:	e00f      	b.n	8008db2 <setFrequency+0x1fe>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	899b      	ldrh	r3, [r3, #12]
 8008d96:	4a0f      	ldr	r2, [pc, #60]	; (8008dd4 <setFrequency+0x220>)
 8008d98:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9c:	091b      	lsrs	r3, r3, #4
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <setFrequency+0x20c>)
 8008da2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8008da4:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <setFrequency+0x20c>)
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	1e5a      	subs	r2, r3, #1
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	200133c0 	.word	0x200133c0
 8008dc4:	00011170 	.word	0x00011170
 8008dc8:	00013880 	.word	0x00013880
 8008dcc:	00015f90 	.word	0x00015f90
 8008dd0:	000186a0 	.word	0x000186a0
 8008dd4:	cccccccd 	.word	0xcccccccd

08008dd8 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8008dd8:	b590      	push	{r4, r7, lr}
 8008dda:	b08b      	sub	sp, #44	; 0x2c
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	791b      	ldrb	r3, [r3, #4]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	f200 80c3 	bhi.w	8008f70 <setDuttyCycle+0x198>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <setDuttyCycle+0x18>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e01 	.word	0x08008e01
 8008df4:	08008e5d 	.word	0x08008e5d
 8008df8:	08008eb9 	.word	0x08008eb9
 8008dfc:	08008f15 	.word	0x08008f15
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	ed93 7a04 	vldr	s14, [r3, #16]
 8008e06:	4b5d      	ldr	r3, [pc, #372]	; (8008f7c <setDuttyCycle+0x1a4>)
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	ee17 0a90 	vmov	r0, s15
 8008e1a:	f7f7 fbad 	bl	8000578 <__aeabi_f2d>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 8008e26:	f04f 0200 	mov.w	r2, #0
 8008e2a:	4b55      	ldr	r3, [pc, #340]	; (8008f80 <setDuttyCycle+0x1a8>)
 8008e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e30:	f7f7 fd24 	bl	800087c <__aeabi_ddiv>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	4b50      	ldr	r3, [pc, #320]	; (8008f84 <setDuttyCycle+0x1ac>)
 8008e42:	f7f7 fa39 	bl	80002b8 <__aeabi_dsub>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	f7f7 fec1 	bl	8000bd8 <__aeabi_d2uiz>
 8008e56:	4603      	mov	r3, r0
 8008e58:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8008e5a:	e08a      	b.n	8008f72 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008e62:	4b46      	ldr	r3, [pc, #280]	; (8008f7c <setDuttyCycle+0x1a4>)
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e72:	ee17 0a90 	vmov	r0, s15
 8008e76:	f7f7 fb7f 	bl	8000578 <__aeabi_f2d>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	4b3e      	ldr	r3, [pc, #248]	; (8008f80 <setDuttyCycle+0x1a8>)
 8008e88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008e8c:	f7f7 fcf6 	bl	800087c <__aeabi_ddiv>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	4b39      	ldr	r3, [pc, #228]	; (8008f84 <setDuttyCycle+0x1ac>)
 8008e9e:	f7f7 fa0b 	bl	80002b8 <__aeabi_dsub>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681c      	ldr	r4, [r3, #0]
 8008eae:	f7f7 fe93 	bl	8000bd8 <__aeabi_d2uiz>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8008eb6:	e05c      	b.n	8008f72 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	ed93 7a04 	vldr	s14, [r3, #16]
 8008ebe:	4b2f      	ldr	r3, [pc, #188]	; (8008f7c <setDuttyCycle+0x1a4>)
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	ee07 3a90 	vmov	s15, r3
 8008ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	ee17 0a90 	vmov	r0, s15
 8008ed2:	f7f7 fb51 	bl	8000578 <__aeabi_f2d>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <setDuttyCycle+0x1a8>)
 8008ee4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ee8:	f7f7 fcc8 	bl	800087c <__aeabi_ddiv>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	4b22      	ldr	r3, [pc, #136]	; (8008f84 <setDuttyCycle+0x1ac>)
 8008efa:	f7f7 f9dd 	bl	80002b8 <__aeabi_dsub>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4610      	mov	r0, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681c      	ldr	r4, [r3, #0]
 8008f0a:	f7f7 fe65 	bl	8000bd8 <__aeabi_d2uiz>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 8008f12:	e02e      	b.n	8008f72 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	ed93 7a04 	vldr	s14, [r3, #16]
 8008f1a:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <setDuttyCycle+0x1a4>)
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2a:	ee17 0a90 	vmov	r0, s15
 8008f2e:	f7f7 fb23 	bl	8000578 <__aeabi_f2d>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8008f3a:	f04f 0200 	mov.w	r2, #0
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <setDuttyCycle+0x1a8>)
 8008f40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f44:	f7f7 fc9a 	bl	800087c <__aeabi_ddiv>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <setDuttyCycle+0x1ac>)
 8008f56:	f7f7 f9af 	bl	80002b8 <__aeabi_dsub>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4619      	mov	r1, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681c      	ldr	r4, [r3, #0]
 8008f66:	f7f7 fe37 	bl	8000bd8 <__aeabi_d2uiz>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8008f6e:	e000      	b.n	8008f72 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8008f70:	bf00      	nop
	}

	}// fin del switch-case

}
 8008f72:	bf00      	nop
 8008f74:	372c      	adds	r7, #44	; 0x2c
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd90      	pop	{r4, r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	200133c0 	.word	0x200133c0
 8008f80:	40590000 	.word	0x40590000
 8008f84:	3ff00000 	.word	0x3ff00000

08008f88 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8008f88:	b590      	push	{r4, r7, lr}
 8008f8a:	b08b      	sub	sp, #44	; 0x2c
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	791b      	ldrb	r3, [r3, #4]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	f200 80d3 	bhi.w	8009140 <setDuttyCycleAfOpt+0x1b8>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <setDuttyCycleAfOpt+0x18>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb1 	.word	0x08008fb1
 8008fa4:	08009015 	.word	0x08009015
 8008fa8:	08009079 	.word	0x08009079
 8008fac:	080090dd 	.word	0x080090dd
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8008fb6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800914c <setDuttyCycleAfOpt+0x1c4>
 8008fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fbe:	4b64      	ldr	r3, [pc, #400]	; (8009150 <setDuttyCycleAfOpt+0x1c8>)
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fce:	ee17 0a90 	vmov	r0, s15
 8008fd2:	f7f7 fad1 	bl	8000578 <__aeabi_f2d>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	4b5c      	ldr	r3, [pc, #368]	; (8009154 <setDuttyCycleAfOpt+0x1cc>)
 8008fe4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fe8:	f7f7 fc48 	bl	800087c <__aeabi_ddiv>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	4b57      	ldr	r3, [pc, #348]	; (8009158 <setDuttyCycleAfOpt+0x1d0>)
 8008ffa:	f7f7 f95d 	bl	80002b8 <__aeabi_dsub>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4610      	mov	r0, r2
 8009004:	4619      	mov	r1, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681c      	ldr	r4, [r3, #0]
 800900a:	f7f7 fde5 	bl	8000bd8 <__aeabi_d2uiz>
 800900e:	4603      	mov	r3, r0
 8009010:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8009012:	e096      	b.n	8009142 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	edd3 7a04 	vldr	s15, [r3, #16]
 800901a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800914c <setDuttyCycleAfOpt+0x1c4>
 800901e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009022:	4b4b      	ldr	r3, [pc, #300]	; (8009150 <setDuttyCycleAfOpt+0x1c8>)
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	ee17 0a90 	vmov	r0, s15
 8009036:	f7f7 fa9f 	bl	8000578 <__aeabi_f2d>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	4b43      	ldr	r3, [pc, #268]	; (8009154 <setDuttyCycleAfOpt+0x1cc>)
 8009048:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800904c:	f7f7 fc16 	bl	800087c <__aeabi_ddiv>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4610      	mov	r0, r2
 8009056:	4619      	mov	r1, r3
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	4b3e      	ldr	r3, [pc, #248]	; (8009158 <setDuttyCycleAfOpt+0x1d0>)
 800905e:	f7f7 f92b 	bl	80002b8 <__aeabi_dsub>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4610      	mov	r0, r2
 8009068:	4619      	mov	r1, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681c      	ldr	r4, [r3, #0]
 800906e:	f7f7 fdb3 	bl	8000bd8 <__aeabi_d2uiz>
 8009072:	4603      	mov	r3, r0
 8009074:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 8009076:	e064      	b.n	8009142 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	edd3 7a04 	vldr	s15, [r3, #16]
 800907e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800914c <setDuttyCycleAfOpt+0x1c4>
 8009082:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009086:	4b32      	ldr	r3, [pc, #200]	; (8009150 <setDuttyCycleAfOpt+0x1c8>)
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009096:	ee17 0a90 	vmov	r0, s15
 800909a:	f7f7 fa6d 	bl	8000578 <__aeabi_f2d>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <setDuttyCycleAfOpt+0x1cc>)
 80090ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090b0:	f7f7 fbe4 	bl	800087c <__aeabi_ddiv>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4610      	mov	r0, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	f04f 0200 	mov.w	r2, #0
 80090c0:	4b25      	ldr	r3, [pc, #148]	; (8009158 <setDuttyCycleAfOpt+0x1d0>)
 80090c2:	f7f7 f8f9 	bl	80002b8 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681c      	ldr	r4, [r3, #0]
 80090d2:	f7f7 fd81 	bl	8000bd8 <__aeabi_d2uiz>
 80090d6:	4603      	mov	r3, r0
 80090d8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80090da:	e032      	b.n	8009142 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	edd3 7a04 	vldr	s15, [r3, #16]
 80090e2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800914c <setDuttyCycleAfOpt+0x1c4>
 80090e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090ea:	4b19      	ldr	r3, [pc, #100]	; (8009150 <setDuttyCycleAfOpt+0x1c8>)
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fa:	ee17 0a90 	vmov	r0, s15
 80090fe:	f7f7 fa3b 	bl	8000578 <__aeabi_f2d>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800910a:	f04f 0200 	mov.w	r2, #0
 800910e:	4b11      	ldr	r3, [pc, #68]	; (8009154 <setDuttyCycleAfOpt+0x1cc>)
 8009110:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009114:	f7f7 fbb2 	bl	800087c <__aeabi_ddiv>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4610      	mov	r0, r2
 800911e:	4619      	mov	r1, r3
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <setDuttyCycleAfOpt+0x1d0>)
 8009126:	f7f7 f8c7 	bl	80002b8 <__aeabi_dsub>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4610      	mov	r0, r2
 8009130:	4619      	mov	r1, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681c      	ldr	r4, [r3, #0]
 8009136:	f7f7 fd4f 	bl	8000bd8 <__aeabi_d2uiz>
 800913a:	4603      	mov	r3, r0
 800913c:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800913e:	e000      	b.n	8009142 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8009140:	bf00      	nop
	}

	}// fin del switch-case


}
 8009142:	bf00      	nop
 8009144:	372c      	adds	r7, #44	; 0x2c
 8009146:	46bd      	mov	sp, r7
 8009148:	bd90      	pop	{r4, r7, pc}
 800914a:	bf00      	nop
 800914c:	42c80000 	.word	0x42c80000
 8009150:	200133c0 	.word	0x200133c0
 8009154:	40590000 	.word	0x40590000
 8009158:	3ff00000 	.word	0x3ff00000

0800915c <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	2b03      	cmp	r3, #3
 800916a:	d82f      	bhi.n	80091cc <disableOutput+0x70>
 800916c:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <disableOutput+0x18>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	08009185 	.word	0x08009185
 8009178:	08009197 	.word	0x08009197
 800917c:	080091a9 	.word	0x080091a9
 8009180:	080091bb 	.word	0x080091bb
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1a      	ldr	r2, [r3, #32]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0201 	bic.w	r2, r2, #1
 8009192:	621a      	str	r2, [r3, #32]

			break;
 8009194:	e01b      	b.n	80091ce <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6a1a      	ldr	r2, [r3, #32]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0210 	bic.w	r2, r2, #16
 80091a4:	621a      	str	r2, [r3, #32]

			break;
 80091a6:	e012      	b.n	80091ce <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6a1a      	ldr	r2, [r3, #32]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091b6:	621a      	str	r2, [r3, #32]

			break;
 80091b8:	e009      	b.n	80091ce <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6a1a      	ldr	r2, [r3, #32]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091c8:	621a      	str	r2, [r3, #32]

			break;
 80091ca:	e000      	b.n	80091ce <disableOutput+0x72>
		}

		default: {
			break;
 80091cc:	bf00      	nop
		}
		}

	return RESET;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	791b      	ldrb	r3, [r3, #4]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d82f      	bhi.n	800924c <PWMx_Toggle+0x70>
 80091ec:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <PWMx_Toggle+0x18>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	08009205 	.word	0x08009205
 80091f8:	08009217 	.word	0x08009217
 80091fc:	08009229 	.word	0x08009229
 8009200:	0800923b 	.word	0x0800923b
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6a1a      	ldr	r2, [r3, #32]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f082 0202 	eor.w	r2, r2, #2
 8009212:	621a      	str	r2, [r3, #32]

				break;
 8009214:	e01b      	b.n	800924e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6a1a      	ldr	r2, [r3, #32]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f082 0220 	eor.w	r2, r2, #32
 8009224:	621a      	str	r2, [r3, #32]

				break;
 8009226:	e012      	b.n	800924e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8009236:	621a      	str	r2, [r3, #32]

				break;
 8009238:	e009      	b.n	800924e <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6a1a      	ldr	r2, [r3, #32]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8009248:	621a      	str	r2, [r3, #32]

				break;
 800924a:	e000      	b.n	800924e <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800924c:	bf00      	nop
			}
			}


}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop

0800925c <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 8009266:	4b92      	ldr	r3, [pc, #584]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a91      	ldr	r2, [pc, #580]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800926c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009270:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009272:	4b8f      	ldr	r3, [pc, #572]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009278:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800927a:	4b8e      	ldr	r3, [pc, #568]	; (80094b4 <RCC_enableMaxFrequencies+0x258>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a8d      	ldr	r2, [pc, #564]	; (80094b4 <RCC_enableMaxFrequencies+0x258>)
 8009280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009284:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 8009286:	4b8a      	ldr	r3, [pc, #552]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	4a89      	ldr	r2, [pc, #548]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800928c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009290:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	2b08      	cmp	r3, #8
 8009296:	f200 82fc 	bhi.w	8009892 <RCC_enableMaxFrequencies+0x636>
 800929a:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <RCC_enableMaxFrequencies+0x44>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092c5 	.word	0x080092c5
 80092a4:	08009367 	.word	0x08009367
 80092a8:	08009409 	.word	0x08009409
 80092ac:	080094bd 	.word	0x080094bd
 80092b0:	0800955f 	.word	0x0800955f
 80092b4:	08009601 	.word	0x08009601
 80092b8:	080096ad 	.word	0x080096ad
 80092bc:	0800974f 	.word	0x0800974f
 80092c0:	080097f1 	.word	0x080097f1
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80092c4:	4b7a      	ldr	r3, [pc, #488]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a79      	ldr	r2, [pc, #484]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092ce:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80092d0:	4b77      	ldr	r3, [pc, #476]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	4a76      	ldr	r2, [pc, #472]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092d6:	f043 0310 	orr.w	r3, r3, #16
 80092da:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80092dc:	4b74      	ldr	r3, [pc, #464]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	4a73      	ldr	r2, [pc, #460]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80092ec:	4b70      	ldr	r3, [pc, #448]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	4a6f      	ldr	r2, [pc, #444]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092f2:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 80092f6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80092f8:	4b6d      	ldr	r3, [pc, #436]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	4a6c      	ldr	r2, [pc, #432]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80092fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009302:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8009304:	4b6a      	ldr	r3, [pc, #424]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4a69      	ldr	r2, [pc, #420]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800930a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800930e:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009310:	4b67      	ldr	r3, [pc, #412]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	4a66      	ldr	r2, [pc, #408]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800931a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800931c:	4b64      	ldr	r3, [pc, #400]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	4a63      	ldr	r2, [pc, #396]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009326:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8009328:	4b61      	ldr	r3, [pc, #388]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	4a60      	ldr	r2, [pc, #384]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800932e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009332:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009334:	4b5e      	ldr	r3, [pc, #376]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a5d      	ldr	r2, [pc, #372]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800933a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800933e:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009340:	e000      	b.n	8009344 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 8009342:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009344:	4b5a      	ldr	r3, [pc, #360]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f8      	beq.n	8009342 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009350:	4b59      	ldr	r3, [pc, #356]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a58      	ldr	r2, [pc, #352]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 8009356:	f023 030f 	bic.w	r3, r3, #15
 800935a:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800935c:	4b56      	ldr	r3, [pc, #344]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 800935e:	4a56      	ldr	r2, [pc, #344]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6013      	str	r3, [r2, #0]

			break;
 8009364:	e296      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009366:	4b52      	ldr	r3, [pc, #328]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	4a51      	ldr	r2, [pc, #324]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800936c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009370:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009372:	4b4f      	ldr	r3, [pc, #316]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	4a4e      	ldr	r2, [pc, #312]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009378:	f043 0310 	orr.w	r3, r3, #16
 800937c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800937e:	4b4c      	ldr	r3, [pc, #304]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	4a4b      	ldr	r2, [pc, #300]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009384:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800938e:	4b48      	ldr	r3, [pc, #288]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	4a47      	ldr	r2, [pc, #284]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009394:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8009398:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800939a:	4b45      	ldr	r3, [pc, #276]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	4a44      	ldr	r2, [pc, #272]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80093a4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 80093a6:	4b42      	ldr	r3, [pc, #264]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	4a41      	ldr	r2, [pc, #260]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093b0:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80093b2:	4b3f      	ldr	r3, [pc, #252]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	4a3e      	ldr	r2, [pc, #248]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093bc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80093be:	4b3c      	ldr	r3, [pc, #240]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	4a3b      	ldr	r2, [pc, #236]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093c8:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80093ca:	4b39      	ldr	r3, [pc, #228]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	4a38      	ldr	r2, [pc, #224]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093d4:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80093d6:	4b36      	ldr	r3, [pc, #216]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a35      	ldr	r2, [pc, #212]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093e0:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093e2:	e000      	b.n	80093e6 <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 80093e4:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80093e6:	4b32      	ldr	r3, [pc, #200]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f8      	beq.n	80093e4 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80093f2:	4b31      	ldr	r3, [pc, #196]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a30      	ldr	r2, [pc, #192]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 80093f8:	f023 030f 	bic.w	r3, r3, #15
 80093fc:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80093fe:	4b2e      	ldr	r3, [pc, #184]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 8009400:	4a2d      	ldr	r2, [pc, #180]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6013      	str	r3, [r2, #0]

			break;
 8009406:	e245      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009408:	4b29      	ldr	r3, [pc, #164]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4a28      	ldr	r2, [pc, #160]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800940e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009412:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8009414:	4b26      	ldr	r3, [pc, #152]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a25      	ldr	r2, [pc, #148]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800941a:	f043 0310 	orr.w	r3, r3, #16
 800941e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009420:	4b23      	ldr	r3, [pc, #140]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4a22      	ldr	r2, [pc, #136]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009426:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800942a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800942e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8009430:	4b1f      	ldr	r3, [pc, #124]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4a1e      	ldr	r2, [pc, #120]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009436:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800943a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800943c:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009442:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009446:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 8009448:	4b19      	ldr	r3, [pc, #100]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	4a18      	ldr	r2, [pc, #96]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800944e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009452:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009454:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	4a15      	ldr	r2, [pc, #84]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800945a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800945e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009460:	4b13      	ldr	r3, [pc, #76]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	4a12      	ldr	r2, [pc, #72]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009466:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800946a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800946c:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	4a0f      	ldr	r2, [pc, #60]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 8009472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009476:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009478:	4b0d      	ldr	r3, [pc, #52]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a0c      	ldr	r2, [pc, #48]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800947e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009482:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009484:	e000      	b.n	8009488 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 8009486:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009488:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <RCC_enableMaxFrequencies+0x254>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0f8      	beq.n	8009486 <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009494:	4b08      	ldr	r3, [pc, #32]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a07      	ldr	r2, [pc, #28]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 800949a:	f023 030f 	bic.w	r3, r3, #15
 800949e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a04      	ldr	r2, [pc, #16]	; (80094b8 <RCC_enableMaxFrequencies+0x25c>)
 80094a6:	f043 0301 	orr.w	r3, r3, #1
 80094aa:	6013      	str	r3, [r2, #0]


			break;
 80094ac:	e1f2      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
 80094ae:	bf00      	nop
 80094b0:	40023800 	.word	0x40023800
 80094b4:	40007000 	.word	0x40007000
 80094b8:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80094bc:	4b79      	ldr	r3, [pc, #484]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4a78      	ldr	r2, [pc, #480]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094c6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80094c8:	4b76      	ldr	r3, [pc, #472]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4a75      	ldr	r2, [pc, #468]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094ce:	f043 0310 	orr.w	r3, r3, #16
 80094d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80094d4:	4b73      	ldr	r3, [pc, #460]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	4a72      	ldr	r2, [pc, #456]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80094de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 80094e4:	4b6f      	ldr	r3, [pc, #444]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	4a6e      	ldr	r2, [pc, #440]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094ea:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 80094ee:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80094f0:	4b6c      	ldr	r3, [pc, #432]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	4a6b      	ldr	r2, [pc, #428]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80094fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80094fc:	4b69      	ldr	r3, [pc, #420]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80094fe:	4a69      	ldr	r2, [pc, #420]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009504:	4b67      	ldr	r3, [pc, #412]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	4a66      	ldr	r2, [pc, #408]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800950a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800950e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009510:	4b64      	ldr	r3, [pc, #400]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	4a63      	ldr	r2, [pc, #396]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800951a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800951c:	4b61      	ldr	r3, [pc, #388]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	4a60      	ldr	r2, [pc, #384]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009526:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009528:	4b5e      	ldr	r3, [pc, #376]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a5d      	ldr	r2, [pc, #372]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800952e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009532:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009534:	e000      	b.n	8009538 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8009536:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009538:	4b5a      	ldr	r3, [pc, #360]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0f8      	beq.n	8009536 <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009544:	4b58      	ldr	r3, [pc, #352]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a57      	ldr	r2, [pc, #348]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 800954a:	f023 030f 	bic.w	r3, r3, #15
 800954e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8009550:	4b55      	ldr	r3, [pc, #340]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a54      	ldr	r2, [pc, #336]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	6013      	str	r3, [r2, #0]

			break;
 800955c:	e19a      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800955e:	4b51      	ldr	r3, [pc, #324]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	4a50      	ldr	r2, [pc, #320]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009564:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009568:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800956a:	4b4e      	ldr	r3, [pc, #312]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4a4d      	ldr	r2, [pc, #308]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009570:	f043 0310 	orr.w	r3, r3, #16
 8009574:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009576:	4b4b      	ldr	r3, [pc, #300]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	4a4a      	ldr	r2, [pc, #296]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800957c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009584:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8009586:	4b47      	ldr	r3, [pc, #284]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	4a46      	ldr	r2, [pc, #280]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800958c:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8009590:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009592:	4b44      	ldr	r3, [pc, #272]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	4a43      	ldr	r2, [pc, #268]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009598:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800959c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800959e:	4b41      	ldr	r3, [pc, #260]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095a0:	4a40      	ldr	r2, [pc, #256]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80095a6:	4b3f      	ldr	r3, [pc, #252]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	4a3e      	ldr	r2, [pc, #248]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095b0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80095b2:	4b3c      	ldr	r3, [pc, #240]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	4a3b      	ldr	r2, [pc, #236]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095bc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80095be:	4b39      	ldr	r3, [pc, #228]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	4a38      	ldr	r2, [pc, #224]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095c8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80095ca:	4b36      	ldr	r3, [pc, #216]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a35      	ldr	r2, [pc, #212]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095d4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80095d6:	e000      	b.n	80095da <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 80095d8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80095da:	4b32      	ldr	r3, [pc, #200]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0f8      	beq.n	80095d8 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80095e6:	4b30      	ldr	r3, [pc, #192]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a2f      	ldr	r2, [pc, #188]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 80095ec:	f023 030f 	bic.w	r3, r3, #15
 80095f0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 80095f2:	4b2d      	ldr	r3, [pc, #180]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a2c      	ldr	r2, [pc, #176]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	6013      	str	r3, [r2, #0]

			break;
 80095fe:	e149      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	4a27      	ldr	r2, [pc, #156]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009606:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800960a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800960c:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4a24      	ldr	r2, [pc, #144]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009612:	f043 0310 	orr.w	r3, r3, #16
 8009616:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009618:	4b22      	ldr	r3, [pc, #136]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	4a21      	ldr	r2, [pc, #132]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800961e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009626:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8009628:	4b1e      	ldr	r3, [pc, #120]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	4a1d      	ldr	r2, [pc, #116]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800962e:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8009632:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009634:	4b1b      	ldr	r3, [pc, #108]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4a1a      	ldr	r2, [pc, #104]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800963a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800963e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009640:	4b18      	ldr	r3, [pc, #96]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009642:	4a18      	ldr	r2, [pc, #96]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	4a15      	ldr	r2, [pc, #84]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800964e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009652:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	4a12      	ldr	r2, [pc, #72]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800965a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800965e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009660:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	4a0f      	ldr	r2, [pc, #60]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800966a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a0c      	ldr	r2, [pc, #48]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 8009672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009676:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009678:	e000      	b.n	800967c <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800967a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800967c:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <RCC_enableMaxFrequencies+0x448>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0f8      	beq.n	800967a <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009688:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a06      	ldr	r2, [pc, #24]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 800968e:	f023 030f 	bic.w	r3, r3, #15
 8009692:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009694:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a03      	ldr	r2, [pc, #12]	; (80096a8 <RCC_enableMaxFrequencies+0x44c>)
 800969a:	f043 0302 	orr.w	r3, r3, #2
 800969e:	6013      	str	r3, [r2, #0]

			break;
 80096a0:	e0f8      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
 80096a2:	bf00      	nop
 80096a4:	40023800 	.word	0x40023800
 80096a8:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80096ac:	4b84      	ldr	r3, [pc, #528]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4a83      	ldr	r2, [pc, #524]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80096b8:	4b81      	ldr	r3, [pc, #516]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4a80      	ldr	r2, [pc, #512]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096be:	f043 0310 	orr.w	r3, r3, #16
 80096c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80096c4:	4b7e      	ldr	r3, [pc, #504]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a7d      	ldr	r2, [pc, #500]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80096ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 80096d4:	4b7a      	ldr	r3, [pc, #488]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4a79      	ldr	r2, [pc, #484]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096da:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80096de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80096e0:	4b77      	ldr	r3, [pc, #476]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	4a76      	ldr	r2, [pc, #472]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80096ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 80096ec:	4b74      	ldr	r3, [pc, #464]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096ee:	4a74      	ldr	r2, [pc, #464]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80096f4:	4b72      	ldr	r3, [pc, #456]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	4a71      	ldr	r2, [pc, #452]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80096fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fe:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009700:	4b6f      	ldr	r3, [pc, #444]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	4a6e      	ldr	r2, [pc, #440]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009706:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800970a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800970c:	4b6c      	ldr	r3, [pc, #432]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	4a6b      	ldr	r2, [pc, #428]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009712:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009716:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8009718:	4b69      	ldr	r3, [pc, #420]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a68      	ldr	r2, [pc, #416]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800971e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009722:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009724:	e000      	b.n	8009728 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8009726:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009728:	4b65      	ldr	r3, [pc, #404]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0f8      	beq.n	8009726 <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009734:	4b63      	ldr	r3, [pc, #396]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a62      	ldr	r2, [pc, #392]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 800973a:	f023 030f 	bic.w	r3, r3, #15
 800973e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8009740:	4b60      	ldr	r3, [pc, #384]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a5f      	ldr	r2, [pc, #380]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 8009746:	f043 0302 	orr.w	r3, r3, #2
 800974a:	6013      	str	r3, [r2, #0]

			break;
 800974c:	e0a2      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800974e:	4b5c      	ldr	r3, [pc, #368]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	4a5b      	ldr	r2, [pc, #364]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009754:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009758:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800975a:	4b59      	ldr	r3, [pc, #356]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	4a58      	ldr	r2, [pc, #352]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009760:	f043 0310 	orr.w	r3, r3, #16
 8009764:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009766:	4b56      	ldr	r3, [pc, #344]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	4a55      	ldr	r2, [pc, #340]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800976c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009774:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8009776:	4b52      	ldr	r3, [pc, #328]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	4a51      	ldr	r2, [pc, #324]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800977c:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8009780:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009782:	4b4f      	ldr	r3, [pc, #316]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	4a4e      	ldr	r2, [pc, #312]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009788:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800978c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800978e:	4b4c      	ldr	r3, [pc, #304]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009790:	4a4b      	ldr	r2, [pc, #300]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009796:	4b4a      	ldr	r3, [pc, #296]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	4a49      	ldr	r2, [pc, #292]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800979c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097a0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80097a2:	4b47      	ldr	r3, [pc, #284]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	4a46      	ldr	r2, [pc, #280]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097ac:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 80097ae:	4b44      	ldr	r3, [pc, #272]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	4a43      	ldr	r2, [pc, #268]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097b8:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80097ba:	4b41      	ldr	r3, [pc, #260]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a40      	ldr	r2, [pc, #256]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097c4:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80097c6:	e000      	b.n	80097ca <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 80097c8:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80097ca:	4b3d      	ldr	r3, [pc, #244]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0f8      	beq.n	80097c8 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80097d6:	4b3b      	ldr	r3, [pc, #236]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a3a      	ldr	r2, [pc, #232]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 80097dc:	f023 030f 	bic.w	r3, r3, #15
 80097e0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 80097e2:	4b38      	ldr	r3, [pc, #224]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a37      	ldr	r2, [pc, #220]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 80097e8:	f043 0302 	orr.w	r3, r3, #2
 80097ec:	6013      	str	r3, [r2, #0]

			break;
 80097ee:	e051      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80097f0:	4b33      	ldr	r3, [pc, #204]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4a32      	ldr	r2, [pc, #200]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80097fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 80097fc:	4b30      	ldr	r3, [pc, #192]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4a2f      	ldr	r2, [pc, #188]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009802:	f043 0308 	orr.w	r3, r3, #8
 8009806:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8009808:	4b2d      	ldr	r3, [pc, #180]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4a2c      	ldr	r2, [pc, #176]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800980e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009816:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8009818:	4b29      	ldr	r3, [pc, #164]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	4a28      	ldr	r2, [pc, #160]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800981e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8009822:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8009824:	4b26      	ldr	r3, [pc, #152]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4a25      	ldr	r2, [pc, #148]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800982a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800982e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8009830:	4b23      	ldr	r3, [pc, #140]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009832:	4a23      	ldr	r2, [pc, #140]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8009838:	4b21      	ldr	r3, [pc, #132]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	4a20      	ldr	r2, [pc, #128]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800983e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009842:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8009844:	4b1e      	ldr	r3, [pc, #120]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	4a1d      	ldr	r2, [pc, #116]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800984a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800984e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8009850:	4b1b      	ldr	r3, [pc, #108]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009856:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800985a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800985c:	4b18      	ldr	r3, [pc, #96]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a17      	ldr	r2, [pc, #92]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009866:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8009868:	e000      	b.n	800986c <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800986a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800986c:	4b14      	ldr	r3, [pc, #80]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0f8      	beq.n	800986a <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8009878:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a11      	ldr	r2, [pc, #68]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 800987e:	f023 030f 	bic.w	r3, r3, #15
 8009882:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8009884:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a0e      	ldr	r2, [pc, #56]	; (80098c4 <RCC_enableMaxFrequencies+0x668>)
 800988a:	f043 0303 	orr.w	r3, r3, #3
 800988e:	6013      	str	r3, [r2, #0]

			break;
 8009890:	e000      	b.n	8009894 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8009892:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8009894:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	4a09      	ldr	r2, [pc, #36]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 800989a:	f043 0302 	orr.w	r3, r3, #2
 800989e:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80098a0:	e000      	b.n	80098a4 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 80098a2:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <RCC_enableMaxFrequencies+0x664>)
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0f8      	beq.n	80098a2 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	40023800 	.word	0x40023800
 80098c4:	40023c00 	.word	0x40023c00

080098c8 <__NVIC_EnableIRQ>:
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	db0b      	blt.n	80098f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	f003 021f 	and.w	r2, r3, #31
 80098e0:	4907      	ldr	r1, [pc, #28]	; (8009900 <__NVIC_EnableIRQ+0x38>)
 80098e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	2001      	movs	r0, #1
 80098ea:	fa00 f202 	lsl.w	r2, r0, r2
 80098ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	e000e100 	.word	0xe000e100

08009904 <__NVIC_SetPriority>:
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	4603      	mov	r3, r0
 800990c:	6039      	str	r1, [r7, #0]
 800990e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009914:	2b00      	cmp	r3, #0
 8009916:	db0a      	blt.n	800992e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	b2da      	uxtb	r2, r3
 800991c:	490c      	ldr	r1, [pc, #48]	; (8009950 <__NVIC_SetPriority+0x4c>)
 800991e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009922:	0112      	lsls	r2, r2, #4
 8009924:	b2d2      	uxtb	r2, r2
 8009926:	440b      	add	r3, r1
 8009928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800992c:	e00a      	b.n	8009944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	b2da      	uxtb	r2, r3
 8009932:	4908      	ldr	r1, [pc, #32]	; (8009954 <__NVIC_SetPriority+0x50>)
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	f003 030f 	and.w	r3, r3, #15
 800993a:	3b04      	subs	r3, #4
 800993c:	0112      	lsls	r2, r2, #4
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	440b      	add	r3, r1
 8009942:	761a      	strb	r2, [r3, #24]
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	e000e100 	.word	0xe000e100
 8009954:	e000ed00 	.word	0xe000ed00

08009958 <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8009958:	b590      	push	{r4, r7, lr}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009960:	b672      	cpsid	i
}
 8009962:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a91      	ldr	r2, [pc, #580]	; (8009bb0 <USART_Config+0x258>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d106      	bne.n	800997c <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800996e:	4b91      	ldr	r3, [pc, #580]	; (8009bb4 <USART_Config+0x25c>)
 8009970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009972:	4a90      	ldr	r2, [pc, #576]	; (8009bb4 <USART_Config+0x25c>)
 8009974:	f043 0310 	orr.w	r3, r3, #16
 8009978:	6453      	str	r3, [r2, #68]	; 0x44
 800997a:	e018      	b.n	80099ae <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a8d      	ldr	r2, [pc, #564]	; (8009bb8 <USART_Config+0x260>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d106      	bne.n	8009994 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8009986:	4b8b      	ldr	r3, [pc, #556]	; (8009bb4 <USART_Config+0x25c>)
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	4a8a      	ldr	r2, [pc, #552]	; (8009bb4 <USART_Config+0x25c>)
 800998c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009990:	6413      	str	r3, [r2, #64]	; 0x40
 8009992:	e00c      	b.n	80099ae <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a88      	ldr	r2, [pc, #544]	; (8009bbc <USART_Config+0x264>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d106      	bne.n	80099ac <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800999e:	4b85      	ldr	r3, [pc, #532]	; (8009bb4 <USART_Config+0x25c>)
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	4a84      	ldr	r2, [pc, #528]	; (8009bb4 <USART_Config+0x25c>)
 80099a4:	f043 0320 	orr.w	r3, r3, #32
 80099a8:	6453      	str	r3, [r2, #68]	; 0x44
 80099aa:	e000      	b.n	80099ae <USART_Config+0x56>
	}
	else{
		__NOP();
 80099ac:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7a5b      	ldrb	r3, [r3, #9]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d025      	beq.n	8009a12 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	7a5b      	ldrb	r3, [r3, #9]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d110      	bne.n	80099f0 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099dc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ec:	60da      	str	r2, [r3, #12]
 80099ee:	e018      	b.n	8009a22 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fe:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a0e:	60da      	str	r2, [r3, #12]
 8009a10:	e007      	b.n	8009a22 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68da      	ldr	r2, [r3, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a20:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	7a1b      	ldrb	r3, [r3, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d108      	bne.n	8009a3c <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e007      	b.n	8009a4c <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a4a:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	7a9b      	ldrb	r3, [r3, #10]
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d82f      	bhi.n	8009ab4 <USART_Config+0x15c>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <USART_Config+0x104>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a6d 	.word	0x08009a6d
 8009a60:	08009a7f 	.word	0x08009a7f
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	08009aa3 	.word	0x08009aa3
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009a7a:	611a      	str	r2, [r3, #16]
			break;
 8009a7c:	e023      	b.n	8009ac6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a8c:	611a      	str	r2, [r3, #16]
			break;
 8009a8e:	e01a      	b.n	8009ac6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691a      	ldr	r2, [r3, #16]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a9e:	611a      	str	r2, [r3, #16]
			break;
 8009aa0:	e011      	b.n	8009ac6 <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	691a      	ldr	r2, [r3, #16]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009ab0:	611a      	str	r2, [r3, #16]
			break;
 8009ab2:	e008      	b.n	8009ac6 <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	691a      	ldr	r2, [r3, #16]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009ac2:	611a      	str	r2, [r3, #16]
			break;
 8009ac4:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681c      	ldr	r4, [r3, #0]
 8009ace:	4611      	mov	r1, r2
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8d9 	bl	8009c88 <brrCalculus>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	799b      	ldrb	r3, [r3, #6]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d82e      	bhi.n	8009b40 <USART_Config+0x1e8>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <USART_Config+0x190>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b0b 	.word	0x08009b0b
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	08009b2f 	.word	0x08009b2f
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0208 	orr.w	r2, r2, #8
 8009b06:	60da      	str	r2, [r3, #12]
			break;
 8009b08:	e023      	b.n	8009b52 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f042 0204 	orr.w	r2, r2, #4
 8009b18:	60da      	str	r2, [r3, #12]
			break;
 8009b1a:	e01a      	b.n	8009b52 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 020c 	orr.w	r2, r2, #12
 8009b2a:	60da      	str	r2, [r3, #12]
			break;
 8009b2c:	e011      	b.n	8009b52 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 020c 	bic.w	r2, r2, #12
 8009b3c:	60da      	str	r2, [r3, #12]
			break;
 8009b3e:	e008      	b.n	8009b52 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 020c 	bic.w	r2, r2, #12
 8009b4e:	60da      	str	r2, [r3, #12]
			break;
 8009b50:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	799b      	ldrb	r3, [r3, #6]
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d008      	beq.n	8009b6c <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b68:	60da      	str	r2, [r3, #12]
 8009b6a:	e007      	b.n	8009b7c <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b7a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	795b      	ldrb	r3, [r3, #5]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d139      	bne.n	8009bf8 <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0220 	orr.w	r2, r2, #32
 8009b92:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a05      	ldr	r2, [pc, #20]	; (8009bb0 <USART_Config+0x258>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d110      	bne.n	8009bc0 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009b9e:	2025      	movs	r0, #37	; 0x25
 8009ba0:	f7ff fe92 	bl	80098c8 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	2025      	movs	r0, #37	; 0x25
 8009ba8:	f7ff feac 	bl	8009904 <__NVIC_SetPriority>
 8009bac:	e02c      	b.n	8009c08 <USART_Config+0x2b0>
 8009bae:	bf00      	nop
 8009bb0:	40011000 	.word	0x40011000
 8009bb4:	40023800 	.word	0x40023800
 8009bb8:	40004400 	.word	0x40004400
 8009bbc:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a2c      	ldr	r2, [pc, #176]	; (8009c78 <USART_Config+0x320>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d107      	bne.n	8009bda <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009bca:	2026      	movs	r0, #38	; 0x26
 8009bcc:	f7ff fe7c 	bl	80098c8 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	2026      	movs	r0, #38	; 0x26
 8009bd4:	f7ff fe96 	bl	8009904 <__NVIC_SetPriority>
 8009bd8:	e016      	b.n	8009c08 <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a27      	ldr	r2, [pc, #156]	; (8009c7c <USART_Config+0x324>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d107      	bne.n	8009bf4 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8009be4:	2047      	movs	r0, #71	; 0x47
 8009be6:	f7ff fe6f 	bl	80098c8 <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 8009bea:	2101      	movs	r1, #1
 8009bec:	2047      	movs	r0, #71	; 0x47
 8009bee:	f7ff fe89 	bl	8009904 <__NVIC_SetPriority>
 8009bf2:	e009      	b.n	8009c08 <USART_Config+0x2b0>
		}
		else{
				__NOP();
 8009bf4:	bf00      	nop
 8009bf6:	e007      	b.n	8009c08 <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0220 	bic.w	r2, r2, #32
 8009c06:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	791b      	ldrb	r3, [r3, #4]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d124      	bne.n	8009c5a <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c1e:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a16      	ldr	r2, [pc, #88]	; (8009c80 <USART_Config+0x328>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d103      	bne.n	8009c32 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8009c2a:	2025      	movs	r0, #37	; 0x25
 8009c2c:	f7ff fe4c 	bl	80098c8 <__NVIC_EnableIRQ>
 8009c30:	e01b      	b.n	8009c6a <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a10      	ldr	r2, [pc, #64]	; (8009c78 <USART_Config+0x320>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d103      	bne.n	8009c44 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8009c3c:	2026      	movs	r0, #38	; 0x26
 8009c3e:	f7ff fe43 	bl	80098c8 <__NVIC_EnableIRQ>
 8009c42:	e012      	b.n	8009c6a <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a0c      	ldr	r2, [pc, #48]	; (8009c7c <USART_Config+0x324>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d103      	bne.n	8009c56 <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8009c4e:	2047      	movs	r0, #71	; 0x47
 8009c50:	f7ff fe3a 	bl	80098c8 <__NVIC_EnableIRQ>
 8009c54:	e009      	b.n	8009c6a <USART_Config+0x312>
		}
		else{
				__NOP();
 8009c56:	bf00      	nop
 8009c58:	e007      	b.n	8009c6a <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c68:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c6a:	b662      	cpsie	i
}
 8009c6c:	bf00      	nop
	}

	__enable_irq();
}
 8009c6e:	bf00      	nop
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd90      	pop	{r4, r7, pc}
 8009c76:	bf00      	nop
 8009c78:	40004400 	.word	0x40004400
 8009c7c:	40011400 	.word	0x40011400
 8009c80:	40011000 	.word	0x40011000
 8009c84:	00000000 	.word	0x00000000

08009c88 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 8009c88:	b5b0      	push	{r4, r5, r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	79db      	ldrb	r3, [r3, #7]
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	f200 8217 	bhi.w	800a0ca <brrCalculus+0x442>
 8009c9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ca4 <brrCalculus+0x1c>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009daf 	.word	0x08009daf
 8009cac:	08009ec9 	.word	0x08009ec9
 8009cb0:	08009fd1 	.word	0x08009fd1

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 8009cb4:	4980      	ldr	r1, [pc, #512]	; (8009eb8 <brrCalculus+0x230>)
 8009cb6:	a37c      	add	r3, pc, #496	; (adr r3, 8009ea8 <brrCalculus+0x220>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	ee17 0a90 	vmov	r0, s15
 8009cce:	f7f6 fc53 	bl	8000578 <__aeabi_f2d>
 8009cd2:	4b79      	ldr	r3, [pc, #484]	; (8009eb8 <brrCalculus+0x230>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fca6 	bl	8000628 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4975      	ldr	r1, [pc, #468]	; (8009eb8 <brrCalculus+0x230>)
 8009ce2:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009ce6:	4b74      	ldr	r3, [pc, #464]	; (8009eb8 <brrCalculus+0x230>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	4610      	mov	r0, r2
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f7f6 ff4a 	bl	8000b88 <__aeabi_d2iz>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	4b70      	ldr	r3, [pc, #448]	; (8009ebc <brrCalculus+0x234>)
 8009cfa:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009cfc:	4b6e      	ldr	r3, [pc, #440]	; (8009eb8 <brrCalculus+0x230>)
 8009cfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d02:	4b6d      	ldr	r3, [pc, #436]	; (8009eb8 <brrCalculus+0x230>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	f7f6 ff3c 	bl	8000b88 <__aeabi_d2iz>
 8009d10:	4603      	mov	r3, r0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7f6 fc1e 	bl	8000554 <__aeabi_i2d>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	4629      	mov	r1, r5
 8009d20:	f7f6 faca 	bl	80002b8 <__aeabi_dsub>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	f7f6 ff74 	bl	8000c18 <__aeabi_d2f>
 8009d30:	4603      	mov	r3, r0
 8009d32:	4a63      	ldr	r2, [pc, #396]	; (8009ec0 <brrCalculus+0x238>)
 8009d34:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009d36:	4b62      	ldr	r3, [pc, #392]	; (8009ec0 <brrCalculus+0x238>)
 8009d38:	edd3 7a00 	vldr	s15, [r3]
 8009d3c:	2004      	movs	r0, #4
 8009d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d42:	f000 fa6d 	bl	800a220 <roundToNDecimals>
 8009d46:	eef0 7a40 	vmov.f32	s15, s0
 8009d4a:	4b5d      	ldr	r3, [pc, #372]	; (8009ec0 <brrCalculus+0x238>)
 8009d4c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009d50:	4b5b      	ldr	r3, [pc, #364]	; (8009ec0 <brrCalculus+0x238>)
 8009d52:	edd3 7a00 	vldr	s15, [r3]
 8009d56:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d5e:	4b58      	ldr	r3, [pc, #352]	; (8009ec0 <brrCalculus+0x238>)
 8009d60:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009d64:	4b56      	ldr	r3, [pc, #344]	; (8009ec0 <brrCalculus+0x238>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7f6 fc05 	bl	8000578 <__aeabi_f2d>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	ec43 2b10 	vmov	d0, r2, r3
 8009d76:	f003 fac7 	bl	800d308 <round>
 8009d7a:	ec53 2b10 	vmov	r2, r3, d0
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	f7f6 ff49 	bl	8000c18 <__aeabi_d2f>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4a4d      	ldr	r2, [pc, #308]	; (8009ec0 <brrCalculus+0x238>)
 8009d8a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009d8c:	4b4b      	ldr	r3, [pc, #300]	; (8009ebc <brrCalculus+0x234>)
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	4b4a      	ldr	r3, [pc, #296]	; (8009ec0 <brrCalculus+0x238>)
 8009d96:	edd3 7a00 	vldr	s15, [r3]
 8009d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d9e:	ee17 3a90 	vmov	r3, s15
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	4313      	orrs	r3, r2
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	4b46      	ldr	r3, [pc, #280]	; (8009ec4 <brrCalculus+0x23c>)
 8009daa:	801a      	strh	r2, [r3, #0]


		break;
 8009dac:	e18f      	b.n	800a0ce <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 8009dae:	4942      	ldr	r1, [pc, #264]	; (8009eb8 <brrCalculus+0x230>)
 8009db0:	a33f      	add	r3, pc, #252	; (adr r3, 8009eb0 <brrCalculus+0x228>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc4:	ee17 0a90 	vmov	r0, s15
 8009dc8:	f7f6 fbd6 	bl	8000578 <__aeabi_f2d>
 8009dcc:	4b3a      	ldr	r3, [pc, #232]	; (8009eb8 <brrCalculus+0x230>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fc29 	bl	8000628 <__aeabi_dmul>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4937      	ldr	r1, [pc, #220]	; (8009eb8 <brrCalculus+0x230>)
 8009ddc:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009de0:	4b35      	ldr	r3, [pc, #212]	; (8009eb8 <brrCalculus+0x230>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	4610      	mov	r0, r2
 8009de8:	4619      	mov	r1, r3
 8009dea:	f7f6 fecd 	bl	8000b88 <__aeabi_d2iz>
 8009dee:	4603      	mov	r3, r0
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	4b32      	ldr	r3, [pc, #200]	; (8009ebc <brrCalculus+0x234>)
 8009df4:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009df6:	4b30      	ldr	r3, [pc, #192]	; (8009eb8 <brrCalculus+0x230>)
 8009df8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009dfc:	4b2e      	ldr	r3, [pc, #184]	; (8009eb8 <brrCalculus+0x230>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	4610      	mov	r0, r2
 8009e04:	4619      	mov	r1, r3
 8009e06:	f7f6 febf 	bl	8000b88 <__aeabi_d2iz>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7f6 fba1 	bl	8000554 <__aeabi_i2d>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	4620      	mov	r0, r4
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f7f6 fa4d 	bl	80002b8 <__aeabi_dsub>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	4610      	mov	r0, r2
 8009e24:	4619      	mov	r1, r3
 8009e26:	f7f6 fef7 	bl	8000c18 <__aeabi_d2f>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4a24      	ldr	r2, [pc, #144]	; (8009ec0 <brrCalculus+0x238>)
 8009e2e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009e30:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <brrCalculus+0x238>)
 8009e32:	edd3 7a00 	vldr	s15, [r3]
 8009e36:	2004      	movs	r0, #4
 8009e38:	eeb0 0a67 	vmov.f32	s0, s15
 8009e3c:	f000 f9f0 	bl	800a220 <roundToNDecimals>
 8009e40:	eef0 7a40 	vmov.f32	s15, s0
 8009e44:	4b1e      	ldr	r3, [pc, #120]	; (8009ec0 <brrCalculus+0x238>)
 8009e46:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009e4a:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <brrCalculus+0x238>)
 8009e4c:	edd3 7a00 	vldr	s15, [r3]
 8009e50:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e58:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <brrCalculus+0x238>)
 8009e5a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 8009e5e:	4b18      	ldr	r3, [pc, #96]	; (8009ec0 <brrCalculus+0x238>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f6 fb88 	bl	8000578 <__aeabi_f2d>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	ec43 2b10 	vmov	d0, r2, r3
 8009e70:	f003 fa4a 	bl	800d308 <round>
 8009e74:	ec53 2b10 	vmov	r2, r3, d0
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	f7f6 fecc 	bl	8000c18 <__aeabi_d2f>
 8009e80:	4603      	mov	r3, r0
 8009e82:	4a0f      	ldr	r2, [pc, #60]	; (8009ec0 <brrCalculus+0x238>)
 8009e84:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009e86:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <brrCalculus+0x234>)
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	011b      	lsls	r3, r3, #4
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <brrCalculus+0x238>)
 8009e90:	edd3 7a00 	vldr	s15, [r3]
 8009e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e98:	ee17 3a90 	vmov	r3, s15
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <brrCalculus+0x23c>)
 8009ea4:	801a      	strh	r2, [r3, #0]


		break;
 8009ea6:	e112      	b.n	800a0ce <brrCalculus+0x446>
 8009ea8:	b4e81b4f 	.word	0xb4e81b4f
 8009eac:	3edb4e81 	.word	0x3edb4e81
 8009eb0:	b4e81b4f 	.word	0xb4e81b4f
 8009eb4:	3ecb4e81 	.word	0x3ecb4e81
 8009eb8:	200133d0 	.word	0x200133d0
 8009ebc:	200133c4 	.word	0x200133c4
 8009ec0:	200133c8 	.word	0x200133c8
 8009ec4:	200133c2 	.word	0x200133c2
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8009ec8:	4989      	ldr	r1, [pc, #548]	; (800a0f0 <brrCalculus+0x468>)
 8009eca:	a385      	add	r3, pc, #532	; (adr r3, 800a0e0 <brrCalculus+0x458>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ede:	ee17 0a90 	vmov	r0, s15
 8009ee2:	f7f6 fb49 	bl	8000578 <__aeabi_f2d>
 8009ee6:	4b82      	ldr	r3, [pc, #520]	; (800a0f0 <brrCalculus+0x468>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f7f6 fb9c 	bl	8000628 <__aeabi_dmul>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	497e      	ldr	r1, [pc, #504]	; (800a0f0 <brrCalculus+0x468>)
 8009ef6:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8009efa:	4b7d      	ldr	r3, [pc, #500]	; (800a0f0 <brrCalculus+0x468>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	4610      	mov	r0, r2
 8009f02:	4619      	mov	r1, r3
 8009f04:	f7f6 fe40 	bl	8000b88 <__aeabi_d2iz>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	4b79      	ldr	r3, [pc, #484]	; (800a0f4 <brrCalculus+0x46c>)
 8009f0e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8009f10:	4b77      	ldr	r3, [pc, #476]	; (800a0f0 <brrCalculus+0x468>)
 8009f12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f16:	4b76      	ldr	r3, [pc, #472]	; (800a0f0 <brrCalculus+0x468>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4619      	mov	r1, r3
 8009f20:	f7f6 fe32 	bl	8000b88 <__aeabi_d2iz>
 8009f24:	4603      	mov	r3, r0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f6 fb14 	bl	8000554 <__aeabi_i2d>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f9c0 	bl	80002b8 <__aeabi_dsub>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	f7f6 fe6a 	bl	8000c18 <__aeabi_d2f>
 8009f44:	4603      	mov	r3, r0
 8009f46:	4a6c      	ldr	r2, [pc, #432]	; (800a0f8 <brrCalculus+0x470>)
 8009f48:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8009f4a:	4b6b      	ldr	r3, [pc, #428]	; (800a0f8 <brrCalculus+0x470>)
 8009f4c:	edd3 7a00 	vldr	s15, [r3]
 8009f50:	2004      	movs	r0, #4
 8009f52:	eeb0 0a67 	vmov.f32	s0, s15
 8009f56:	f000 f963 	bl	800a220 <roundToNDecimals>
 8009f5a:	eef0 7a40 	vmov.f32	s15, s0
 8009f5e:	4b66      	ldr	r3, [pc, #408]	; (800a0f8 <brrCalculus+0x470>)
 8009f60:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8009f64:	4b64      	ldr	r3, [pc, #400]	; (800a0f8 <brrCalculus+0x470>)
 8009f66:	edd3 7a00 	vldr	s15, [r3]
 8009f6a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8009f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f72:	4b61      	ldr	r3, [pc, #388]	; (800a0f8 <brrCalculus+0x470>)
 8009f74:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 8009f78:	4b5f      	ldr	r3, [pc, #380]	; (800a0f8 <brrCalculus+0x470>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f6 fafb 	bl	8000578 <__aeabi_f2d>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	ec43 2b10 	vmov	d0, r2, r3
 8009f8a:	f003 f9bd 	bl	800d308 <round>
 8009f8e:	ec51 0b10 	vmov	r0, r1, d0
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	4b59      	ldr	r3, [pc, #356]	; (800a0fc <brrCalculus+0x474>)
 8009f98:	f7f6 f990 	bl	80002bc <__adddf3>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	f7f6 fe38 	bl	8000c18 <__aeabi_d2f>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	4a53      	ldr	r2, [pc, #332]	; (800a0f8 <brrCalculus+0x470>)
 8009fac:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 8009fae:	4b51      	ldr	r3, [pc, #324]	; (800a0f4 <brrCalculus+0x46c>)
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	011b      	lsls	r3, r3, #4
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	4b50      	ldr	r3, [pc, #320]	; (800a0f8 <brrCalculus+0x470>)
 8009fb8:	edd3 7a00 	vldr	s15, [r3]
 8009fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fc0:	ee17 3a90 	vmov	r3, s15
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	4b4d      	ldr	r3, [pc, #308]	; (800a100 <brrCalculus+0x478>)
 8009fcc:	801a      	strh	r2, [r3, #0]


		break;
 8009fce:	e07e      	b.n	800a0ce <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8009fd0:	4947      	ldr	r1, [pc, #284]	; (800a0f0 <brrCalculus+0x468>)
 8009fd2:	a345      	add	r3, pc, #276	; (adr r3, 800a0e8 <brrCalculus+0x460>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe6:	ee17 0a90 	vmov	r0, s15
 8009fea:	f7f6 fac5 	bl	8000578 <__aeabi_f2d>
 8009fee:	4b40      	ldr	r3, [pc, #256]	; (800a0f0 <brrCalculus+0x468>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f7f6 fb18 	bl	8000628 <__aeabi_dmul>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	493c      	ldr	r1, [pc, #240]	; (800a0f0 <brrCalculus+0x468>)
 8009ffe:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800a002:	4b3b      	ldr	r3, [pc, #236]	; (800a0f0 <brrCalculus+0x468>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	4610      	mov	r0, r2
 800a00a:	4619      	mov	r1, r3
 800a00c:	f7f6 fdbc 	bl	8000b88 <__aeabi_d2iz>
 800a010:	4603      	mov	r3, r0
 800a012:	b29a      	uxth	r2, r3
 800a014:	4b37      	ldr	r3, [pc, #220]	; (800a0f4 <brrCalculus+0x46c>)
 800a016:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800a018:	4b35      	ldr	r3, [pc, #212]	; (800a0f0 <brrCalculus+0x468>)
 800a01a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a01e:	4b34      	ldr	r3, [pc, #208]	; (800a0f0 <brrCalculus+0x468>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4610      	mov	r0, r2
 800a026:	4619      	mov	r1, r3
 800a028:	f7f6 fdae 	bl	8000b88 <__aeabi_d2iz>
 800a02c:	4603      	mov	r3, r0
 800a02e:	4618      	mov	r0, r3
 800a030:	f7f6 fa90 	bl	8000554 <__aeabi_i2d>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	4620      	mov	r0, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 f93c 	bl	80002b8 <__aeabi_dsub>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4610      	mov	r0, r2
 800a046:	4619      	mov	r1, r3
 800a048:	f7f6 fde6 	bl	8000c18 <__aeabi_d2f>
 800a04c:	4603      	mov	r3, r0
 800a04e:	4a2a      	ldr	r2, [pc, #168]	; (800a0f8 <brrCalculus+0x470>)
 800a050:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800a052:	4b29      	ldr	r3, [pc, #164]	; (800a0f8 <brrCalculus+0x470>)
 800a054:	edd3 7a00 	vldr	s15, [r3]
 800a058:	2004      	movs	r0, #4
 800a05a:	eeb0 0a67 	vmov.f32	s0, s15
 800a05e:	f000 f8df 	bl	800a220 <roundToNDecimals>
 800a062:	eef0 7a40 	vmov.f32	s15, s0
 800a066:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <brrCalculus+0x470>)
 800a068:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800a06c:	4b22      	ldr	r3, [pc, #136]	; (800a0f8 <brrCalculus+0x470>)
 800a06e:	edd3 7a00 	vldr	s15, [r3]
 800a072:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800a076:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a07a:	4b1f      	ldr	r3, [pc, #124]	; (800a0f8 <brrCalculus+0x470>)
 800a07c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800a080:	4b1d      	ldr	r3, [pc, #116]	; (800a0f8 <brrCalculus+0x470>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4618      	mov	r0, r3
 800a086:	f7f6 fa77 	bl	8000578 <__aeabi_f2d>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	ec43 2b10 	vmov	d0, r2, r3
 800a092:	f003 f939 	bl	800d308 <round>
 800a096:	ec53 2b10 	vmov	r2, r3, d0
 800a09a:	4610      	mov	r0, r2
 800a09c:	4619      	mov	r1, r3
 800a09e:	f7f6 fdbb 	bl	8000c18 <__aeabi_d2f>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	4a14      	ldr	r2, [pc, #80]	; (800a0f8 <brrCalculus+0x470>)
 800a0a6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800a0a8:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <brrCalculus+0x46c>)
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	4b11      	ldr	r3, [pc, #68]	; (800a0f8 <brrCalculus+0x470>)
 800a0b2:	edd3 7a00 	vldr	s15, [r3]
 800a0b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ba:	ee17 3a90 	vmov	r3, s15
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <brrCalculus+0x478>)
 800a0c6:	801a      	strh	r2, [r3, #0]


		break;
 800a0c8:	e001      	b.n	800a0ce <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800a0ca:	bf00      	nop
		break;
 800a0cc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <brrCalculus+0x478>)
 800a0d0:	881b      	ldrh	r3, [r3, #0]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	789abcdf 	.word	0x789abcdf
 800a0e4:	3ec23456 	.word	0x3ec23456
 800a0e8:	789abcdf 	.word	0x789abcdf
 800a0ec:	3ea23456 	.word	0x3ea23456
 800a0f0:	200133d0 	.word	0x200133d0
 800a0f4:	200133c4 	.word	0x200133c4
 800a0f8:	200133c8 	.word	0x200133c8
 800a0fc:	3ff00000 	.word	0x3ff00000
 800a100:	200133c2 	.word	0x200133c2

0800a104 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800a10e:	e000      	b.n	800a112 <writeChar+0xe>
		__NOP();
 800a110:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0f7      	beq.n	800a110 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	605a      	str	r2, [r3, #4]

}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800a13e:	e008      	b.n	800a152 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff ffdc 	bl	800a104 <writeChar>
		msgToSend ++ ;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	3301      	adds	r3, #1
 800a150:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1f2      	bne.n	800a140 <writeMsg+0xc>
	}
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 800a164:	b480      	push	{r7}
 800a166:	af00      	add	r7, sp, #0
	__NOP();
 800a168:	bf00      	nop
}
 800a16a:	bf00      	nop
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 800a174:	b480      	push	{r7}
 800a176:	af00      	add	r7, sp, #0
	__NOP();
 800a178:	bf00      	nop
}
 800a17a:	bf00      	nop
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
	return auxRxData;
 800a188:	4b03      	ldr	r3, [pc, #12]	; (800a198 <getRxData+0x14>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	200133d8 	.word	0x200133d8

0800a19c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800a1a0:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <USART2_IRQHandler+0x24>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0320 	and.w	r3, r3, #32
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <USART2_IRQHandler+0x24>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <USART2_IRQHandler+0x28>)
 800a1b4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800a1b6:	f7ff ffd5 	bl	800a164 <usart2Rx_Callback>
	}

}
 800a1ba:	bf00      	nop
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	40004400 	.word	0x40004400
 800a1c4:	200133d8 	.word	0x200133d8

0800a1c8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <USART1_IRQHandler+0x24>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0320 	and.w	r3, r3, #32
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d006      	beq.n	800a1e6 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800a1d8:	4b04      	ldr	r3, [pc, #16]	; (800a1ec <USART1_IRQHandler+0x24>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	4b04      	ldr	r3, [pc, #16]	; (800a1f0 <USART1_IRQHandler+0x28>)
 800a1e0:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800a1e2:	f7f7 fc9d 	bl	8001b20 <usart1Rx_Callback>
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40011000 	.word	0x40011000
 800a1f0:	200133d8 	.word	0x200133d8

0800a1f4 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800a1f8:	4b07      	ldr	r3, [pc, #28]	; (800a218 <USART6_IRQHandler+0x24>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d006      	beq.n	800a212 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800a204:	4b04      	ldr	r3, [pc, #16]	; (800a218 <USART6_IRQHandler+0x24>)
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	4b04      	ldr	r3, [pc, #16]	; (800a21c <USART6_IRQHandler+0x28>)
 800a20c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800a20e:	f7ff ffb1 	bl	800a174 <usart6Rx_Callback>
	}

}
 800a212:	bf00      	nop
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	40011400 	.word	0x40011400
 800a21c:	200133d8 	.word	0x200133d8

0800a220 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	ed87 0a01 	vstr	s0, [r7, #4]
 800a22a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800a22c:	6838      	ldr	r0, [r7, #0]
 800a22e:	f7f6 f991 	bl	8000554 <__aeabi_i2d>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	ec43 2b11 	vmov	d1, r2, r3
 800a23a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800a2b8 <roundToNDecimals+0x98>
 800a23e:	f003 f905 	bl	800d44c <pow>
 800a242:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7f6 f996 	bl	8000578 <__aeabi_f2d>
 800a24c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a250:	f7f6 f9ea 	bl	8000628 <__aeabi_dmul>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4610      	mov	r0, r2
 800a25a:	4619      	mov	r1, r3
 800a25c:	f7f6 fcdc 	bl	8000c18 <__aeabi_d2f>
 800a260:	4603      	mov	r3, r0
 800a262:	607b      	str	r3, [r7, #4]

    number = round(number);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7f6 f987 	bl	8000578 <__aeabi_f2d>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	ec43 2b10 	vmov	d0, r2, r3
 800a272:	f003 f849 	bl	800d308 <round>
 800a276:	ec53 2b10 	vmov	r2, r3, d0
 800a27a:	4610      	mov	r0, r2
 800a27c:	4619      	mov	r1, r3
 800a27e:	f7f6 fccb 	bl	8000c18 <__aeabi_d2f>
 800a282:	4603      	mov	r3, r0
 800a284:	607b      	str	r3, [r7, #4]

    number /= factor;
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7f6 f976 	bl	8000578 <__aeabi_f2d>
 800a28c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a290:	f7f6 faf4 	bl	800087c <__aeabi_ddiv>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4610      	mov	r0, r2
 800a29a:	4619      	mov	r1, r3
 800a29c:	f7f6 fcbc 	bl	8000c18 <__aeabi_d2f>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	607b      	str	r3, [r7, #4]

    return number;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	ee07 3a90 	vmov	s15, r3
}
 800a2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	f3af 8000 	nop.w
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	40240000 	.word	0x40240000

0800a2c0 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2cc:	b672      	cpsid	i
}
 800a2ce:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a12      	ldr	r2, [pc, #72]	; (800a320 <usart_Set_Priority+0x60>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d105      	bne.n	800a2e6 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	2025      	movs	r0, #37	; 0x25
 800a2e0:	f7ff fb10 	bl	8009904 <__NVIC_SetPriority>
 800a2e4:	e016      	b.n	800a314 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a0e      	ldr	r2, [pc, #56]	; (800a324 <usart_Set_Priority+0x64>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d105      	bne.n	800a2fc <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	2026      	movs	r0, #38	; 0x26
 800a2f6:	f7ff fb05 	bl	8009904 <__NVIC_SetPriority>
 800a2fa:	e00b      	b.n	800a314 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a09      	ldr	r2, [pc, #36]	; (800a328 <usart_Set_Priority+0x68>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d105      	bne.n	800a312 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	4619      	mov	r1, r3
 800a30a:	2047      	movs	r0, #71	; 0x47
 800a30c:	f7ff fafa 	bl	8009904 <__NVIC_SetPriority>
 800a310:	e000      	b.n	800a314 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800a312:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a314:	b662      	cpsie	i
}
 800a316:	bf00      	nop



	__enable_irq();

}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40011000 	.word	0x40011000
 800a324:	40004400 	.word	0x40004400
 800a328:	40011400 	.word	0x40011400

0800a32c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a89      	ldr	r2, [pc, #548]	; (800a560 <i2c_config+0x234>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d106      	bne.n	800a34c <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800a33e:	4b89      	ldr	r3, [pc, #548]	; (800a564 <i2c_config+0x238>)
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	4a88      	ldr	r2, [pc, #544]	; (800a564 <i2c_config+0x238>)
 800a344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a348:	6413      	str	r3, [r2, #64]	; 0x40
 800a34a:	e016      	b.n	800a37a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a85      	ldr	r2, [pc, #532]	; (800a568 <i2c_config+0x23c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d106      	bne.n	800a364 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800a356:	4b83      	ldr	r3, [pc, #524]	; (800a564 <i2c_config+0x238>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	4a82      	ldr	r2, [pc, #520]	; (800a564 <i2c_config+0x238>)
 800a35c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a360:	6413      	str	r3, [r2, #64]	; 0x40
 800a362:	e00a      	b.n	800a37a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a80      	ldr	r2, [pc, #512]	; (800a56c <i2c_config+0x240>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d105      	bne.n	800a37a <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800a36e:	4b7d      	ldr	r3, [pc, #500]	; (800a564 <i2c_config+0x238>)
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	4a7c      	ldr	r2, [pc, #496]	; (800a564 <i2c_config+0x238>)
 800a374:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a378:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0201 	bic.w	r2, r2, #1
 800a388:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a38a:	e000      	b.n	800a38e <i2c_config+0x62>
		__NOP();
 800a38c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1f7      	bne.n	800a38c <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3aa:	601a      	str	r2, [r3, #0]

	__NOP();
 800a3ac:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3bc:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a3cc:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	79db      	ldrb	r3, [r3, #7]
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d108      	bne.n	800a3e8 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f042 0210 	orr.w	r2, r2, #16
 800a3e4:	605a      	str	r2, [r3, #4]
 800a3e6:	e018      	b.n	800a41a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	79db      	ldrb	r3, [r3, #7]
 800a3ec:	2b19      	cmp	r3, #25
 800a3ee:	d108      	bne.n	800a402 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0219 	orr.w	r2, r2, #25
 800a3fe:	605a      	str	r2, [r3, #4]
 800a400:	e00b      	b.n	800a41a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	79db      	ldrb	r3, [r3, #7]
 800a406:	2b32      	cmp	r3, #50	; 0x32
 800a408:	d107      	bne.n	800a41a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800a418:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2200      	movs	r2, #0
 800a428:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	795b      	ldrb	r3, [r3, #5]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d15c      	bne.n	800a4ec <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69da      	ldr	r2, [r3, #28]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a440:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	79db      	ldrb	r3, [r3, #7]
 800a446:	2b32      	cmp	r3, #50	; 0x32
 800a448:	d03f      	beq.n	800a4ca <i2c_config+0x19e>
 800a44a:	2b32      	cmp	r3, #50	; 0x32
 800a44c:	f300 80b2 	bgt.w	800a5b4 <i2c_config+0x288>
 800a450:	2b19      	cmp	r3, #25
 800a452:	d029      	beq.n	800a4a8 <i2c_config+0x17c>
 800a454:	2b19      	cmp	r3, #25
 800a456:	f300 80ad 	bgt.w	800a5b4 <i2c_config+0x288>
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d002      	beq.n	800a464 <i2c_config+0x138>
 800a45e:	2b10      	cmp	r3, #16
 800a460:	d011      	beq.n	800a486 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800a462:	e0a7      	b.n	800a5b4 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	69da      	ldr	r2, [r3, #28]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0214 	orr.w	r2, r2, #20
 800a472:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6a1a      	ldr	r2, [r3, #32]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0205 	orr.w	r2, r2, #5
 800a482:	621a      	str	r2, [r3, #32]
				break;
 800a484:	e099      	b.n	800a5ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69da      	ldr	r2, [r3, #28]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a494:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6a1a      	ldr	r2, [r3, #32]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f042 0211 	orr.w	r2, r2, #17
 800a4a4:	621a      	str	r2, [r3, #32]
				break;
 800a4a6:	e088      	b.n	800a5ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	69da      	ldr	r2, [r3, #28]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800a4b6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6a1a      	ldr	r2, [r3, #32]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0215 	orr.w	r2, r2, #21
 800a4c6:	621a      	str	r2, [r3, #32]
				break;
 800a4c8:	e077      	b.n	800a5ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69da      	ldr	r2, [r3, #28]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800a4d8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6a1a      	ldr	r2, [r3, #32]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800a4e8:	621a      	str	r2, [r3, #32]
				break;
 800a4ea:	e066      	b.n	800a5ba <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69da      	ldr	r2, [r3, #28]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4fa:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	79db      	ldrb	r3, [r3, #7]
 800a500:	2b32      	cmp	r3, #50	; 0x32
 800a502:	d046      	beq.n	800a592 <i2c_config+0x266>
 800a504:	2b32      	cmp	r3, #50	; 0x32
 800a506:	dc57      	bgt.n	800a5b8 <i2c_config+0x28c>
 800a508:	2b19      	cmp	r3, #25
 800a50a:	d031      	beq.n	800a570 <i2c_config+0x244>
 800a50c:	2b19      	cmp	r3, #25
 800a50e:	dc53      	bgt.n	800a5b8 <i2c_config+0x28c>
 800a510:	2b04      	cmp	r3, #4
 800a512:	d002      	beq.n	800a51a <i2c_config+0x1ee>
 800a514:	2b10      	cmp	r3, #16
 800a516:	d011      	beq.n	800a53c <i2c_config+0x210>


				break;
			}default:{

				break;
 800a518:	e04e      	b.n	800a5b8 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69da      	ldr	r2, [r3, #28]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f042 0203 	orr.w	r2, r2, #3
 800a528:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6a1a      	ldr	r2, [r3, #32]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f042 0202 	orr.w	r2, r2, #2
 800a538:	621a      	str	r2, [r3, #32]
				break;
 800a53a:	e03e      	b.n	800a5ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	69da      	ldr	r2, [r3, #28]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 020d 	orr.w	r2, r2, #13
 800a54a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a1a      	ldr	r2, [r3, #32]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0206 	orr.w	r2, r2, #6
 800a55a:	621a      	str	r2, [r3, #32]
				break;
 800a55c:	e02d      	b.n	800a5ba <i2c_config+0x28e>
 800a55e:	bf00      	nop
 800a560:	40005400 	.word	0x40005400
 800a564:	40023800 	.word	0x40023800
 800a568:	40005800 	.word	0x40005800
 800a56c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	69da      	ldr	r2, [r3, #28]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f042 0215 	orr.w	r2, r2, #21
 800a57e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6a1a      	ldr	r2, [r3, #32]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0208 	orr.w	r2, r2, #8
 800a58e:	621a      	str	r2, [r3, #32]
				break;
 800a590:	e013      	b.n	800a5ba <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	69da      	ldr	r2, [r3, #28]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800a5a0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6a1a      	ldr	r2, [r3, #32]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f042 0210 	orr.w	r2, r2, #16
 800a5b0:	621a      	str	r2, [r3, #32]
				break;
 800a5b2:	e002      	b.n	800a5ba <i2c_config+0x28e>
				break;
 800a5b4:	bf00      	nop
 800a5b6:	e002      	b.n	800a5be <i2c_config+0x292>
				break;
 800a5b8:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a5ba:	e000      	b.n	800a5be <i2c_config+0x292>
		__NOP();
 800a5bc:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f7      	bne.n	800a5bc <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]


}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5fe:	601a      	str	r2, [r3, #0]
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7a1b      	ldrb	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a62a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a62c:	e000      	b.n	800a630 <i2c_startTransaction+0x24>
		__NOP();
 800a62e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1f7      	bne.n	800a62e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a64c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a64e:	e000      	b.n	800a652 <i2c_startTransaction+0x46>
		__NOP();
 800a650:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0f7      	beq.n	800a650 <i2c_startTransaction+0x44>
	}
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7a1b      	ldrb	r3, [r3, #8]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a68c:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a69c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a69e:	e000      	b.n	800a6a2 <i2c_reStartTransaction+0x34>
		__NOP();
 800a6a0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0f7      	beq.n	800a6a0 <i2c_reStartTransaction+0x32>
	}
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800a6be:	b480      	push	{r7}
 800a6c0:	b083      	sub	sp, #12
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6d4:	601a      	str	r2, [r3, #0]
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800a6e2:	b480      	push	{r7}
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	005a      	lsls	r2, r3, #1
 800a6fa:	78bb      	ldrb	r3, [r7, #2]
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a704:	e000      	b.n	800a708 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800a706:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0f7      	beq.n	800a706 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	73fb      	strb	r3, [r7, #15]

}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	460b      	mov	r3, r1
 800a73c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	78fa      	ldrb	r2, [r7, #3]
 800a744:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a746:	e000      	b.n	800a74a <i2c_sendMemoryAddress+0x18>
		__NOP();
 800a748:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0f7      	beq.n	800a748 <i2c_sendMemoryAddress+0x16>
	}
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a77a:	e000      	b.n	800a77e <i2c_sendDataByte+0x18>
		__NOP();
 800a77c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0f7      	beq.n	800a77c <i2c_sendDataByte+0x16>
	}
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a7a2:	e000      	b.n	800a7a6 <i2c_readDataByte+0xc>
		__NOP();
 800a7a4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d0f7      	beq.n	800a7a4 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	799b      	ldrb	r3, [r3, #6]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <__errno>:
 800a7d0:	4b01      	ldr	r3, [pc, #4]	; (800a7d8 <__errno+0x8>)
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	20000024 	.word	0x20000024

0800a7dc <__libc_init_array>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4d0d      	ldr	r5, [pc, #52]	; (800a814 <__libc_init_array+0x38>)
 800a7e0:	4c0d      	ldr	r4, [pc, #52]	; (800a818 <__libc_init_array+0x3c>)
 800a7e2:	1b64      	subs	r4, r4, r5
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	42a6      	cmp	r6, r4
 800a7ea:	d109      	bne.n	800a800 <__libc_init_array+0x24>
 800a7ec:	4d0b      	ldr	r5, [pc, #44]	; (800a81c <__libc_init_array+0x40>)
 800a7ee:	4c0c      	ldr	r4, [pc, #48]	; (800a820 <__libc_init_array+0x44>)
 800a7f0:	f004 ff56 	bl	800f6a0 <_init>
 800a7f4:	1b64      	subs	r4, r4, r5
 800a7f6:	10a4      	asrs	r4, r4, #2
 800a7f8:	2600      	movs	r6, #0
 800a7fa:	42a6      	cmp	r6, r4
 800a7fc:	d105      	bne.n	800a80a <__libc_init_array+0x2e>
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	f855 3b04 	ldr.w	r3, [r5], #4
 800a804:	4798      	blx	r3
 800a806:	3601      	adds	r6, #1
 800a808:	e7ee      	b.n	800a7e8 <__libc_init_array+0xc>
 800a80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80e:	4798      	blx	r3
 800a810:	3601      	adds	r6, #1
 800a812:	e7f2      	b.n	800a7fa <__libc_init_array+0x1e>
 800a814:	0800ff58 	.word	0x0800ff58
 800a818:	0800ff58 	.word	0x0800ff58
 800a81c:	0800ff58 	.word	0x0800ff58
 800a820:	0800ff5c 	.word	0x0800ff5c

0800a824 <malloc>:
 800a824:	4b02      	ldr	r3, [pc, #8]	; (800a830 <malloc+0xc>)
 800a826:	4601      	mov	r1, r0
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	f000 b885 	b.w	800a938 <_malloc_r>
 800a82e:	bf00      	nop
 800a830:	20000024 	.word	0x20000024

0800a834 <memcpy>:
 800a834:	440a      	add	r2, r1
 800a836:	4291      	cmp	r1, r2
 800a838:	f100 33ff 	add.w	r3, r0, #4294967295
 800a83c:	d100      	bne.n	800a840 <memcpy+0xc>
 800a83e:	4770      	bx	lr
 800a840:	b510      	push	{r4, lr}
 800a842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a84a:	4291      	cmp	r1, r2
 800a84c:	d1f9      	bne.n	800a842 <memcpy+0xe>
 800a84e:	bd10      	pop	{r4, pc}

0800a850 <memset>:
 800a850:	4402      	add	r2, r0
 800a852:	4603      	mov	r3, r0
 800a854:	4293      	cmp	r3, r2
 800a856:	d100      	bne.n	800a85a <memset+0xa>
 800a858:	4770      	bx	lr
 800a85a:	f803 1b01 	strb.w	r1, [r3], #1
 800a85e:	e7f9      	b.n	800a854 <memset+0x4>

0800a860 <_free_r>:
 800a860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a862:	2900      	cmp	r1, #0
 800a864:	d044      	beq.n	800a8f0 <_free_r+0x90>
 800a866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a86a:	9001      	str	r0, [sp, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f1a1 0404 	sub.w	r4, r1, #4
 800a872:	bfb8      	it	lt
 800a874:	18e4      	addlt	r4, r4, r3
 800a876:	f001 fbcd 	bl	800c014 <__malloc_lock>
 800a87a:	4a1e      	ldr	r2, [pc, #120]	; (800a8f4 <_free_r+0x94>)
 800a87c:	9801      	ldr	r0, [sp, #4]
 800a87e:	6813      	ldr	r3, [r2, #0]
 800a880:	b933      	cbnz	r3, 800a890 <_free_r+0x30>
 800a882:	6063      	str	r3, [r4, #4]
 800a884:	6014      	str	r4, [r2, #0]
 800a886:	b003      	add	sp, #12
 800a888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a88c:	f001 bbc8 	b.w	800c020 <__malloc_unlock>
 800a890:	42a3      	cmp	r3, r4
 800a892:	d908      	bls.n	800a8a6 <_free_r+0x46>
 800a894:	6825      	ldr	r5, [r4, #0]
 800a896:	1961      	adds	r1, r4, r5
 800a898:	428b      	cmp	r3, r1
 800a89a:	bf01      	itttt	eq
 800a89c:	6819      	ldreq	r1, [r3, #0]
 800a89e:	685b      	ldreq	r3, [r3, #4]
 800a8a0:	1949      	addeq	r1, r1, r5
 800a8a2:	6021      	streq	r1, [r4, #0]
 800a8a4:	e7ed      	b.n	800a882 <_free_r+0x22>
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	b10b      	cbz	r3, 800a8b0 <_free_r+0x50>
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	d9fa      	bls.n	800a8a6 <_free_r+0x46>
 800a8b0:	6811      	ldr	r1, [r2, #0]
 800a8b2:	1855      	adds	r5, r2, r1
 800a8b4:	42a5      	cmp	r5, r4
 800a8b6:	d10b      	bne.n	800a8d0 <_free_r+0x70>
 800a8b8:	6824      	ldr	r4, [r4, #0]
 800a8ba:	4421      	add	r1, r4
 800a8bc:	1854      	adds	r4, r2, r1
 800a8be:	42a3      	cmp	r3, r4
 800a8c0:	6011      	str	r1, [r2, #0]
 800a8c2:	d1e0      	bne.n	800a886 <_free_r+0x26>
 800a8c4:	681c      	ldr	r4, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	6053      	str	r3, [r2, #4]
 800a8ca:	4421      	add	r1, r4
 800a8cc:	6011      	str	r1, [r2, #0]
 800a8ce:	e7da      	b.n	800a886 <_free_r+0x26>
 800a8d0:	d902      	bls.n	800a8d8 <_free_r+0x78>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	6003      	str	r3, [r0, #0]
 800a8d6:	e7d6      	b.n	800a886 <_free_r+0x26>
 800a8d8:	6825      	ldr	r5, [r4, #0]
 800a8da:	1961      	adds	r1, r4, r5
 800a8dc:	428b      	cmp	r3, r1
 800a8de:	bf04      	itt	eq
 800a8e0:	6819      	ldreq	r1, [r3, #0]
 800a8e2:	685b      	ldreq	r3, [r3, #4]
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	bf04      	itt	eq
 800a8e8:	1949      	addeq	r1, r1, r5
 800a8ea:	6021      	streq	r1, [r4, #0]
 800a8ec:	6054      	str	r4, [r2, #4]
 800a8ee:	e7ca      	b.n	800a886 <_free_r+0x26>
 800a8f0:	b003      	add	sp, #12
 800a8f2:	bd30      	pop	{r4, r5, pc}
 800a8f4:	200133dc 	.word	0x200133dc

0800a8f8 <sbrk_aligned>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	4e0e      	ldr	r6, [pc, #56]	; (800a934 <sbrk_aligned+0x3c>)
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	6831      	ldr	r1, [r6, #0]
 800a900:	4605      	mov	r5, r0
 800a902:	b911      	cbnz	r1, 800a90a <sbrk_aligned+0x12>
 800a904:	f000 fcf6 	bl	800b2f4 <_sbrk_r>
 800a908:	6030      	str	r0, [r6, #0]
 800a90a:	4621      	mov	r1, r4
 800a90c:	4628      	mov	r0, r5
 800a90e:	f000 fcf1 	bl	800b2f4 <_sbrk_r>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d00a      	beq.n	800a92c <sbrk_aligned+0x34>
 800a916:	1cc4      	adds	r4, r0, #3
 800a918:	f024 0403 	bic.w	r4, r4, #3
 800a91c:	42a0      	cmp	r0, r4
 800a91e:	d007      	beq.n	800a930 <sbrk_aligned+0x38>
 800a920:	1a21      	subs	r1, r4, r0
 800a922:	4628      	mov	r0, r5
 800a924:	f000 fce6 	bl	800b2f4 <_sbrk_r>
 800a928:	3001      	adds	r0, #1
 800a92a:	d101      	bne.n	800a930 <sbrk_aligned+0x38>
 800a92c:	f04f 34ff 	mov.w	r4, #4294967295
 800a930:	4620      	mov	r0, r4
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	200133e0 	.word	0x200133e0

0800a938 <_malloc_r>:
 800a938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93c:	1ccd      	adds	r5, r1, #3
 800a93e:	f025 0503 	bic.w	r5, r5, #3
 800a942:	3508      	adds	r5, #8
 800a944:	2d0c      	cmp	r5, #12
 800a946:	bf38      	it	cc
 800a948:	250c      	movcc	r5, #12
 800a94a:	2d00      	cmp	r5, #0
 800a94c:	4607      	mov	r7, r0
 800a94e:	db01      	blt.n	800a954 <_malloc_r+0x1c>
 800a950:	42a9      	cmp	r1, r5
 800a952:	d905      	bls.n	800a960 <_malloc_r+0x28>
 800a954:	230c      	movs	r3, #12
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	2600      	movs	r6, #0
 800a95a:	4630      	mov	r0, r6
 800a95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a960:	4e2e      	ldr	r6, [pc, #184]	; (800aa1c <_malloc_r+0xe4>)
 800a962:	f001 fb57 	bl	800c014 <__malloc_lock>
 800a966:	6833      	ldr	r3, [r6, #0]
 800a968:	461c      	mov	r4, r3
 800a96a:	bb34      	cbnz	r4, 800a9ba <_malloc_r+0x82>
 800a96c:	4629      	mov	r1, r5
 800a96e:	4638      	mov	r0, r7
 800a970:	f7ff ffc2 	bl	800a8f8 <sbrk_aligned>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	4604      	mov	r4, r0
 800a978:	d14d      	bne.n	800aa16 <_malloc_r+0xde>
 800a97a:	6834      	ldr	r4, [r6, #0]
 800a97c:	4626      	mov	r6, r4
 800a97e:	2e00      	cmp	r6, #0
 800a980:	d140      	bne.n	800aa04 <_malloc_r+0xcc>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	4631      	mov	r1, r6
 800a986:	4638      	mov	r0, r7
 800a988:	eb04 0803 	add.w	r8, r4, r3
 800a98c:	f000 fcb2 	bl	800b2f4 <_sbrk_r>
 800a990:	4580      	cmp	r8, r0
 800a992:	d13a      	bne.n	800aa0a <_malloc_r+0xd2>
 800a994:	6821      	ldr	r1, [r4, #0]
 800a996:	3503      	adds	r5, #3
 800a998:	1a6d      	subs	r5, r5, r1
 800a99a:	f025 0503 	bic.w	r5, r5, #3
 800a99e:	3508      	adds	r5, #8
 800a9a0:	2d0c      	cmp	r5, #12
 800a9a2:	bf38      	it	cc
 800a9a4:	250c      	movcc	r5, #12
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7ff ffa5 	bl	800a8f8 <sbrk_aligned>
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	d02b      	beq.n	800aa0a <_malloc_r+0xd2>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	442b      	add	r3, r5
 800a9b6:	6023      	str	r3, [r4, #0]
 800a9b8:	e00e      	b.n	800a9d8 <_malloc_r+0xa0>
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	1b52      	subs	r2, r2, r5
 800a9be:	d41e      	bmi.n	800a9fe <_malloc_r+0xc6>
 800a9c0:	2a0b      	cmp	r2, #11
 800a9c2:	d916      	bls.n	800a9f2 <_malloc_r+0xba>
 800a9c4:	1961      	adds	r1, r4, r5
 800a9c6:	42a3      	cmp	r3, r4
 800a9c8:	6025      	str	r5, [r4, #0]
 800a9ca:	bf18      	it	ne
 800a9cc:	6059      	strne	r1, [r3, #4]
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	bf08      	it	eq
 800a9d2:	6031      	streq	r1, [r6, #0]
 800a9d4:	5162      	str	r2, [r4, r5]
 800a9d6:	604b      	str	r3, [r1, #4]
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f104 060b 	add.w	r6, r4, #11
 800a9de:	f001 fb1f 	bl	800c020 <__malloc_unlock>
 800a9e2:	f026 0607 	bic.w	r6, r6, #7
 800a9e6:	1d23      	adds	r3, r4, #4
 800a9e8:	1af2      	subs	r2, r6, r3
 800a9ea:	d0b6      	beq.n	800a95a <_malloc_r+0x22>
 800a9ec:	1b9b      	subs	r3, r3, r6
 800a9ee:	50a3      	str	r3, [r4, r2]
 800a9f0:	e7b3      	b.n	800a95a <_malloc_r+0x22>
 800a9f2:	6862      	ldr	r2, [r4, #4]
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	bf0c      	ite	eq
 800a9f8:	6032      	streq	r2, [r6, #0]
 800a9fa:	605a      	strne	r2, [r3, #4]
 800a9fc:	e7ec      	b.n	800a9d8 <_malloc_r+0xa0>
 800a9fe:	4623      	mov	r3, r4
 800aa00:	6864      	ldr	r4, [r4, #4]
 800aa02:	e7b2      	b.n	800a96a <_malloc_r+0x32>
 800aa04:	4634      	mov	r4, r6
 800aa06:	6876      	ldr	r6, [r6, #4]
 800aa08:	e7b9      	b.n	800a97e <_malloc_r+0x46>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	603b      	str	r3, [r7, #0]
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f001 fb06 	bl	800c020 <__malloc_unlock>
 800aa14:	e7a1      	b.n	800a95a <_malloc_r+0x22>
 800aa16:	6025      	str	r5, [r4, #0]
 800aa18:	e7de      	b.n	800a9d8 <_malloc_r+0xa0>
 800aa1a:	bf00      	nop
 800aa1c:	200133dc 	.word	0x200133dc

0800aa20 <__cvt>:
 800aa20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	ec55 4b10 	vmov	r4, r5, d0
 800aa28:	2d00      	cmp	r5, #0
 800aa2a:	460e      	mov	r6, r1
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	462b      	mov	r3, r5
 800aa30:	bfbb      	ittet	lt
 800aa32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa36:	461d      	movlt	r5, r3
 800aa38:	2300      	movge	r3, #0
 800aa3a:	232d      	movlt	r3, #45	; 0x2d
 800aa3c:	700b      	strb	r3, [r1, #0]
 800aa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa44:	4691      	mov	r9, r2
 800aa46:	f023 0820 	bic.w	r8, r3, #32
 800aa4a:	bfbc      	itt	lt
 800aa4c:	4622      	movlt	r2, r4
 800aa4e:	4614      	movlt	r4, r2
 800aa50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa54:	d005      	beq.n	800aa62 <__cvt+0x42>
 800aa56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aa5a:	d100      	bne.n	800aa5e <__cvt+0x3e>
 800aa5c:	3601      	adds	r6, #1
 800aa5e:	2102      	movs	r1, #2
 800aa60:	e000      	b.n	800aa64 <__cvt+0x44>
 800aa62:	2103      	movs	r1, #3
 800aa64:	ab03      	add	r3, sp, #12
 800aa66:	9301      	str	r3, [sp, #4]
 800aa68:	ab02      	add	r3, sp, #8
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	ec45 4b10 	vmov	d0, r4, r5
 800aa70:	4653      	mov	r3, sl
 800aa72:	4632      	mov	r2, r6
 800aa74:	f000 fcdc 	bl	800b430 <_dtoa_r>
 800aa78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	d102      	bne.n	800aa86 <__cvt+0x66>
 800aa80:	f019 0f01 	tst.w	r9, #1
 800aa84:	d022      	beq.n	800aacc <__cvt+0xac>
 800aa86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa8a:	eb07 0906 	add.w	r9, r7, r6
 800aa8e:	d110      	bne.n	800aab2 <__cvt+0x92>
 800aa90:	783b      	ldrb	r3, [r7, #0]
 800aa92:	2b30      	cmp	r3, #48	; 0x30
 800aa94:	d10a      	bne.n	800aaac <__cvt+0x8c>
 800aa96:	2200      	movs	r2, #0
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	f7f6 f82b 	bl	8000af8 <__aeabi_dcmpeq>
 800aaa2:	b918      	cbnz	r0, 800aaac <__cvt+0x8c>
 800aaa4:	f1c6 0601 	rsb	r6, r6, #1
 800aaa8:	f8ca 6000 	str.w	r6, [sl]
 800aaac:	f8da 3000 	ldr.w	r3, [sl]
 800aab0:	4499      	add	r9, r3
 800aab2:	2200      	movs	r2, #0
 800aab4:	2300      	movs	r3, #0
 800aab6:	4620      	mov	r0, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7f6 f81d 	bl	8000af8 <__aeabi_dcmpeq>
 800aabe:	b108      	cbz	r0, 800aac4 <__cvt+0xa4>
 800aac0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aac4:	2230      	movs	r2, #48	; 0x30
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	454b      	cmp	r3, r9
 800aaca:	d307      	bcc.n	800aadc <__cvt+0xbc>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aad0:	1bdb      	subs	r3, r3, r7
 800aad2:	4638      	mov	r0, r7
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	b004      	add	sp, #16
 800aad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aadc:	1c59      	adds	r1, r3, #1
 800aade:	9103      	str	r1, [sp, #12]
 800aae0:	701a      	strb	r2, [r3, #0]
 800aae2:	e7f0      	b.n	800aac6 <__cvt+0xa6>

0800aae4 <__exponent>:
 800aae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aae6:	4603      	mov	r3, r0
 800aae8:	2900      	cmp	r1, #0
 800aaea:	bfb8      	it	lt
 800aaec:	4249      	neglt	r1, r1
 800aaee:	f803 2b02 	strb.w	r2, [r3], #2
 800aaf2:	bfb4      	ite	lt
 800aaf4:	222d      	movlt	r2, #45	; 0x2d
 800aaf6:	222b      	movge	r2, #43	; 0x2b
 800aaf8:	2909      	cmp	r1, #9
 800aafa:	7042      	strb	r2, [r0, #1]
 800aafc:	dd2a      	ble.n	800ab54 <__exponent+0x70>
 800aafe:	f10d 0407 	add.w	r4, sp, #7
 800ab02:	46a4      	mov	ip, r4
 800ab04:	270a      	movs	r7, #10
 800ab06:	46a6      	mov	lr, r4
 800ab08:	460a      	mov	r2, r1
 800ab0a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab0e:	fb07 1516 	mls	r5, r7, r6, r1
 800ab12:	3530      	adds	r5, #48	; 0x30
 800ab14:	2a63      	cmp	r2, #99	; 0x63
 800ab16:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab1e:	4631      	mov	r1, r6
 800ab20:	dcf1      	bgt.n	800ab06 <__exponent+0x22>
 800ab22:	3130      	adds	r1, #48	; 0x30
 800ab24:	f1ae 0502 	sub.w	r5, lr, #2
 800ab28:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab2c:	1c44      	adds	r4, r0, #1
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4561      	cmp	r1, ip
 800ab32:	d30a      	bcc.n	800ab4a <__exponent+0x66>
 800ab34:	f10d 0209 	add.w	r2, sp, #9
 800ab38:	eba2 020e 	sub.w	r2, r2, lr
 800ab3c:	4565      	cmp	r5, ip
 800ab3e:	bf88      	it	hi
 800ab40:	2200      	movhi	r2, #0
 800ab42:	4413      	add	r3, r2
 800ab44:	1a18      	subs	r0, r3, r0
 800ab46:	b003      	add	sp, #12
 800ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab52:	e7ed      	b.n	800ab30 <__exponent+0x4c>
 800ab54:	2330      	movs	r3, #48	; 0x30
 800ab56:	3130      	adds	r1, #48	; 0x30
 800ab58:	7083      	strb	r3, [r0, #2]
 800ab5a:	70c1      	strb	r1, [r0, #3]
 800ab5c:	1d03      	adds	r3, r0, #4
 800ab5e:	e7f1      	b.n	800ab44 <__exponent+0x60>

0800ab60 <_printf_float>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	ed2d 8b02 	vpush	{d8}
 800ab68:	b08d      	sub	sp, #52	; 0x34
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab70:	4616      	mov	r6, r2
 800ab72:	461f      	mov	r7, r3
 800ab74:	4605      	mov	r5, r0
 800ab76:	f001 fa49 	bl	800c00c <_localeconv_r>
 800ab7a:	f8d0 a000 	ldr.w	sl, [r0]
 800ab7e:	4650      	mov	r0, sl
 800ab80:	f7f5 fb38 	bl	80001f4 <strlen>
 800ab84:	2300      	movs	r3, #0
 800ab86:	930a      	str	r3, [sp, #40]	; 0x28
 800ab88:	6823      	ldr	r3, [r4, #0]
 800ab8a:	9305      	str	r3, [sp, #20]
 800ab8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ab94:	3307      	adds	r3, #7
 800ab96:	f023 0307 	bic.w	r3, r3, #7
 800ab9a:	f103 0208 	add.w	r2, r3, #8
 800ab9e:	f8c8 2000 	str.w	r2, [r8]
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800abae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	f8cd 8018 	str.w	r8, [sp, #24]
 800abb8:	ee08 0a10 	vmov	s16, r0
 800abbc:	4b9f      	ldr	r3, [pc, #636]	; (800ae3c <_printf_float+0x2dc>)
 800abbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abc2:	f04f 32ff 	mov.w	r2, #4294967295
 800abc6:	f7f5 ffc9 	bl	8000b5c <__aeabi_dcmpun>
 800abca:	bb88      	cbnz	r0, 800ac30 <_printf_float+0xd0>
 800abcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abd0:	4b9a      	ldr	r3, [pc, #616]	; (800ae3c <_printf_float+0x2dc>)
 800abd2:	f04f 32ff 	mov.w	r2, #4294967295
 800abd6:	f7f5 ffa3 	bl	8000b20 <__aeabi_dcmple>
 800abda:	bb48      	cbnz	r0, 800ac30 <_printf_float+0xd0>
 800abdc:	2200      	movs	r2, #0
 800abde:	2300      	movs	r3, #0
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 ff92 	bl	8000b0c <__aeabi_dcmplt>
 800abe8:	b110      	cbz	r0, 800abf0 <_printf_float+0x90>
 800abea:	232d      	movs	r3, #45	; 0x2d
 800abec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abf0:	4b93      	ldr	r3, [pc, #588]	; (800ae40 <_printf_float+0x2e0>)
 800abf2:	4894      	ldr	r0, [pc, #592]	; (800ae44 <_printf_float+0x2e4>)
 800abf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800abf8:	bf94      	ite	ls
 800abfa:	4698      	movls	r8, r3
 800abfc:	4680      	movhi	r8, r0
 800abfe:	2303      	movs	r3, #3
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	9b05      	ldr	r3, [sp, #20]
 800ac04:	f023 0204 	bic.w	r2, r3, #4
 800ac08:	6022      	str	r2, [r4, #0]
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	9700      	str	r7, [sp, #0]
 800ac10:	4633      	mov	r3, r6
 800ac12:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac14:	4621      	mov	r1, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f9d8 	bl	800afcc <_printf_common>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f040 8090 	bne.w	800ad42 <_printf_float+0x1e2>
 800ac22:	f04f 30ff 	mov.w	r0, #4294967295
 800ac26:	b00d      	add	sp, #52	; 0x34
 800ac28:	ecbd 8b02 	vpop	{d8}
 800ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	4640      	mov	r0, r8
 800ac36:	4649      	mov	r1, r9
 800ac38:	f7f5 ff90 	bl	8000b5c <__aeabi_dcmpun>
 800ac3c:	b140      	cbz	r0, 800ac50 <_printf_float+0xf0>
 800ac3e:	464b      	mov	r3, r9
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	bfbc      	itt	lt
 800ac44:	232d      	movlt	r3, #45	; 0x2d
 800ac46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac4a:	487f      	ldr	r0, [pc, #508]	; (800ae48 <_printf_float+0x2e8>)
 800ac4c:	4b7f      	ldr	r3, [pc, #508]	; (800ae4c <_printf_float+0x2ec>)
 800ac4e:	e7d1      	b.n	800abf4 <_printf_float+0x94>
 800ac50:	6863      	ldr	r3, [r4, #4]
 800ac52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ac56:	9206      	str	r2, [sp, #24]
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	d13f      	bne.n	800acdc <_printf_float+0x17c>
 800ac5c:	2306      	movs	r3, #6
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	9b05      	ldr	r3, [sp, #20]
 800ac62:	6861      	ldr	r1, [r4, #4]
 800ac64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9303      	str	r3, [sp, #12]
 800ac6c:	ab0a      	add	r3, sp, #40	; 0x28
 800ac6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ac72:	ab09      	add	r3, sp, #36	; 0x24
 800ac74:	ec49 8b10 	vmov	d0, r8, r9
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	6022      	str	r2, [r4, #0]
 800ac7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac80:	4628      	mov	r0, r5
 800ac82:	f7ff fecd 	bl	800aa20 <__cvt>
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac8a:	2b47      	cmp	r3, #71	; 0x47
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	d108      	bne.n	800aca2 <_printf_float+0x142>
 800ac90:	1cc8      	adds	r0, r1, #3
 800ac92:	db02      	blt.n	800ac9a <_printf_float+0x13a>
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	4299      	cmp	r1, r3
 800ac98:	dd41      	ble.n	800ad1e <_printf_float+0x1be>
 800ac9a:	f1ab 0b02 	sub.w	fp, fp, #2
 800ac9e:	fa5f fb8b 	uxtb.w	fp, fp
 800aca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aca6:	d820      	bhi.n	800acea <_printf_float+0x18a>
 800aca8:	3901      	subs	r1, #1
 800acaa:	465a      	mov	r2, fp
 800acac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acb0:	9109      	str	r1, [sp, #36]	; 0x24
 800acb2:	f7ff ff17 	bl	800aae4 <__exponent>
 800acb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acb8:	1813      	adds	r3, r2, r0
 800acba:	2a01      	cmp	r2, #1
 800acbc:	4681      	mov	r9, r0
 800acbe:	6123      	str	r3, [r4, #16]
 800acc0:	dc02      	bgt.n	800acc8 <_printf_float+0x168>
 800acc2:	6822      	ldr	r2, [r4, #0]
 800acc4:	07d2      	lsls	r2, r2, #31
 800acc6:	d501      	bpl.n	800accc <_printf_float+0x16c>
 800acc8:	3301      	adds	r3, #1
 800acca:	6123      	str	r3, [r4, #16]
 800accc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d09c      	beq.n	800ac0e <_printf_float+0xae>
 800acd4:	232d      	movs	r3, #45	; 0x2d
 800acd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acda:	e798      	b.n	800ac0e <_printf_float+0xae>
 800acdc:	9a06      	ldr	r2, [sp, #24]
 800acde:	2a47      	cmp	r2, #71	; 0x47
 800ace0:	d1be      	bne.n	800ac60 <_printf_float+0x100>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1bc      	bne.n	800ac60 <_printf_float+0x100>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e7b9      	b.n	800ac5e <_printf_float+0xfe>
 800acea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800acee:	d118      	bne.n	800ad22 <_printf_float+0x1c2>
 800acf0:	2900      	cmp	r1, #0
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	dd0b      	ble.n	800ad0e <_printf_float+0x1ae>
 800acf6:	6121      	str	r1, [r4, #16]
 800acf8:	b913      	cbnz	r3, 800ad00 <_printf_float+0x1a0>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	07d0      	lsls	r0, r2, #31
 800acfe:	d502      	bpl.n	800ad06 <_printf_float+0x1a6>
 800ad00:	3301      	adds	r3, #1
 800ad02:	440b      	add	r3, r1
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad08:	f04f 0900 	mov.w	r9, #0
 800ad0c:	e7de      	b.n	800accc <_printf_float+0x16c>
 800ad0e:	b913      	cbnz	r3, 800ad16 <_printf_float+0x1b6>
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	07d2      	lsls	r2, r2, #31
 800ad14:	d501      	bpl.n	800ad1a <_printf_float+0x1ba>
 800ad16:	3302      	adds	r3, #2
 800ad18:	e7f4      	b.n	800ad04 <_printf_float+0x1a4>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e7f2      	b.n	800ad04 <_printf_float+0x1a4>
 800ad1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad24:	4299      	cmp	r1, r3
 800ad26:	db05      	blt.n	800ad34 <_printf_float+0x1d4>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	6121      	str	r1, [r4, #16]
 800ad2c:	07d8      	lsls	r0, r3, #31
 800ad2e:	d5ea      	bpl.n	800ad06 <_printf_float+0x1a6>
 800ad30:	1c4b      	adds	r3, r1, #1
 800ad32:	e7e7      	b.n	800ad04 <_printf_float+0x1a4>
 800ad34:	2900      	cmp	r1, #0
 800ad36:	bfd4      	ite	le
 800ad38:	f1c1 0202 	rsble	r2, r1, #2
 800ad3c:	2201      	movgt	r2, #1
 800ad3e:	4413      	add	r3, r2
 800ad40:	e7e0      	b.n	800ad04 <_printf_float+0x1a4>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	055a      	lsls	r2, r3, #21
 800ad46:	d407      	bmi.n	800ad58 <_printf_float+0x1f8>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	4642      	mov	r2, r8
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	d12c      	bne.n	800adb0 <_printf_float+0x250>
 800ad56:	e764      	b.n	800ac22 <_printf_float+0xc2>
 800ad58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad5c:	f240 80e0 	bls.w	800af20 <_printf_float+0x3c0>
 800ad60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad64:	2200      	movs	r2, #0
 800ad66:	2300      	movs	r3, #0
 800ad68:	f7f5 fec6 	bl	8000af8 <__aeabi_dcmpeq>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d034      	beq.n	800adda <_printf_float+0x27a>
 800ad70:	4a37      	ldr	r2, [pc, #220]	; (800ae50 <_printf_float+0x2f0>)
 800ad72:	2301      	movs	r3, #1
 800ad74:	4631      	mov	r1, r6
 800ad76:	4628      	mov	r0, r5
 800ad78:	47b8      	blx	r7
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f43f af51 	beq.w	800ac22 <_printf_float+0xc2>
 800ad80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad84:	429a      	cmp	r2, r3
 800ad86:	db02      	blt.n	800ad8e <_printf_float+0x22e>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	07d8      	lsls	r0, r3, #31
 800ad8c:	d510      	bpl.n	800adb0 <_printf_float+0x250>
 800ad8e:	ee18 3a10 	vmov	r3, s16
 800ad92:	4652      	mov	r2, sl
 800ad94:	4631      	mov	r1, r6
 800ad96:	4628      	mov	r0, r5
 800ad98:	47b8      	blx	r7
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	f43f af41 	beq.w	800ac22 <_printf_float+0xc2>
 800ada0:	f04f 0800 	mov.w	r8, #0
 800ada4:	f104 091a 	add.w	r9, r4, #26
 800ada8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adaa:	3b01      	subs	r3, #1
 800adac:	4543      	cmp	r3, r8
 800adae:	dc09      	bgt.n	800adc4 <_printf_float+0x264>
 800adb0:	6823      	ldr	r3, [r4, #0]
 800adb2:	079b      	lsls	r3, r3, #30
 800adb4:	f100 8105 	bmi.w	800afc2 <_printf_float+0x462>
 800adb8:	68e0      	ldr	r0, [r4, #12]
 800adba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adbc:	4298      	cmp	r0, r3
 800adbe:	bfb8      	it	lt
 800adc0:	4618      	movlt	r0, r3
 800adc2:	e730      	b.n	800ac26 <_printf_float+0xc6>
 800adc4:	2301      	movs	r3, #1
 800adc6:	464a      	mov	r2, r9
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f af27 	beq.w	800ac22 <_printf_float+0xc2>
 800add4:	f108 0801 	add.w	r8, r8, #1
 800add8:	e7e6      	b.n	800ada8 <_printf_float+0x248>
 800adda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800addc:	2b00      	cmp	r3, #0
 800adde:	dc39      	bgt.n	800ae54 <_printf_float+0x2f4>
 800ade0:	4a1b      	ldr	r2, [pc, #108]	; (800ae50 <_printf_float+0x2f0>)
 800ade2:	2301      	movs	r3, #1
 800ade4:	4631      	mov	r1, r6
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b8      	blx	r7
 800adea:	3001      	adds	r0, #1
 800adec:	f43f af19 	beq.w	800ac22 <_printf_float+0xc2>
 800adf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adf4:	4313      	orrs	r3, r2
 800adf6:	d102      	bne.n	800adfe <_printf_float+0x29e>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	07d9      	lsls	r1, r3, #31
 800adfc:	d5d8      	bpl.n	800adb0 <_printf_float+0x250>
 800adfe:	ee18 3a10 	vmov	r3, s16
 800ae02:	4652      	mov	r2, sl
 800ae04:	4631      	mov	r1, r6
 800ae06:	4628      	mov	r0, r5
 800ae08:	47b8      	blx	r7
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	f43f af09 	beq.w	800ac22 <_printf_float+0xc2>
 800ae10:	f04f 0900 	mov.w	r9, #0
 800ae14:	f104 0a1a 	add.w	sl, r4, #26
 800ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1a:	425b      	negs	r3, r3
 800ae1c:	454b      	cmp	r3, r9
 800ae1e:	dc01      	bgt.n	800ae24 <_printf_float+0x2c4>
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	e792      	b.n	800ad4a <_printf_float+0x1ea>
 800ae24:	2301      	movs	r3, #1
 800ae26:	4652      	mov	r2, sl
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f43f aef7 	beq.w	800ac22 <_printf_float+0xc2>
 800ae34:	f109 0901 	add.w	r9, r9, #1
 800ae38:	e7ee      	b.n	800ae18 <_printf_float+0x2b8>
 800ae3a:	bf00      	nop
 800ae3c:	7fefffff 	.word	0x7fefffff
 800ae40:	0800f904 	.word	0x0800f904
 800ae44:	0800f908 	.word	0x0800f908
 800ae48:	0800f910 	.word	0x0800f910
 800ae4c:	0800f90c 	.word	0x0800f90c
 800ae50:	0800f914 	.word	0x0800f914
 800ae54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	bfa8      	it	ge
 800ae5c:	461a      	movge	r2, r3
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	4691      	mov	r9, r2
 800ae62:	dc37      	bgt.n	800aed4 <_printf_float+0x374>
 800ae64:	f04f 0b00 	mov.w	fp, #0
 800ae68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae6c:	f104 021a 	add.w	r2, r4, #26
 800ae70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	eba3 0309 	sub.w	r3, r3, r9
 800ae78:	455b      	cmp	r3, fp
 800ae7a:	dc33      	bgt.n	800aee4 <_printf_float+0x384>
 800ae7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae80:	429a      	cmp	r2, r3
 800ae82:	db3b      	blt.n	800aefc <_printf_float+0x39c>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	07da      	lsls	r2, r3, #31
 800ae88:	d438      	bmi.n	800aefc <_printf_float+0x39c>
 800ae8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae8c:	9a05      	ldr	r2, [sp, #20]
 800ae8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae90:	1a9a      	subs	r2, r3, r2
 800ae92:	eba3 0901 	sub.w	r9, r3, r1
 800ae96:	4591      	cmp	r9, r2
 800ae98:	bfa8      	it	ge
 800ae9a:	4691      	movge	r9, r2
 800ae9c:	f1b9 0f00 	cmp.w	r9, #0
 800aea0:	dc35      	bgt.n	800af0e <_printf_float+0x3ae>
 800aea2:	f04f 0800 	mov.w	r8, #0
 800aea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aeaa:	f104 0a1a 	add.w	sl, r4, #26
 800aeae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeb2:	1a9b      	subs	r3, r3, r2
 800aeb4:	eba3 0309 	sub.w	r3, r3, r9
 800aeb8:	4543      	cmp	r3, r8
 800aeba:	f77f af79 	ble.w	800adb0 <_printf_float+0x250>
 800aebe:	2301      	movs	r3, #1
 800aec0:	4652      	mov	r2, sl
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f aeaa 	beq.w	800ac22 <_printf_float+0xc2>
 800aece:	f108 0801 	add.w	r8, r8, #1
 800aed2:	e7ec      	b.n	800aeae <_printf_float+0x34e>
 800aed4:	4613      	mov	r3, r2
 800aed6:	4631      	mov	r1, r6
 800aed8:	4642      	mov	r2, r8
 800aeda:	4628      	mov	r0, r5
 800aedc:	47b8      	blx	r7
 800aede:	3001      	adds	r0, #1
 800aee0:	d1c0      	bne.n	800ae64 <_printf_float+0x304>
 800aee2:	e69e      	b.n	800ac22 <_printf_float+0xc2>
 800aee4:	2301      	movs	r3, #1
 800aee6:	4631      	mov	r1, r6
 800aee8:	4628      	mov	r0, r5
 800aeea:	9205      	str	r2, [sp, #20]
 800aeec:	47b8      	blx	r7
 800aeee:	3001      	adds	r0, #1
 800aef0:	f43f ae97 	beq.w	800ac22 <_printf_float+0xc2>
 800aef4:	9a05      	ldr	r2, [sp, #20]
 800aef6:	f10b 0b01 	add.w	fp, fp, #1
 800aefa:	e7b9      	b.n	800ae70 <_printf_float+0x310>
 800aefc:	ee18 3a10 	vmov	r3, s16
 800af00:	4652      	mov	r2, sl
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	47b8      	blx	r7
 800af08:	3001      	adds	r0, #1
 800af0a:	d1be      	bne.n	800ae8a <_printf_float+0x32a>
 800af0c:	e689      	b.n	800ac22 <_printf_float+0xc2>
 800af0e:	9a05      	ldr	r2, [sp, #20]
 800af10:	464b      	mov	r3, r9
 800af12:	4442      	add	r2, r8
 800af14:	4631      	mov	r1, r6
 800af16:	4628      	mov	r0, r5
 800af18:	47b8      	blx	r7
 800af1a:	3001      	adds	r0, #1
 800af1c:	d1c1      	bne.n	800aea2 <_printf_float+0x342>
 800af1e:	e680      	b.n	800ac22 <_printf_float+0xc2>
 800af20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af22:	2a01      	cmp	r2, #1
 800af24:	dc01      	bgt.n	800af2a <_printf_float+0x3ca>
 800af26:	07db      	lsls	r3, r3, #31
 800af28:	d538      	bpl.n	800af9c <_printf_float+0x43c>
 800af2a:	2301      	movs	r3, #1
 800af2c:	4642      	mov	r2, r8
 800af2e:	4631      	mov	r1, r6
 800af30:	4628      	mov	r0, r5
 800af32:	47b8      	blx	r7
 800af34:	3001      	adds	r0, #1
 800af36:	f43f ae74 	beq.w	800ac22 <_printf_float+0xc2>
 800af3a:	ee18 3a10 	vmov	r3, s16
 800af3e:	4652      	mov	r2, sl
 800af40:	4631      	mov	r1, r6
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	f43f ae6b 	beq.w	800ac22 <_printf_float+0xc2>
 800af4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af50:	2200      	movs	r2, #0
 800af52:	2300      	movs	r3, #0
 800af54:	f7f5 fdd0 	bl	8000af8 <__aeabi_dcmpeq>
 800af58:	b9d8      	cbnz	r0, 800af92 <_printf_float+0x432>
 800af5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5c:	f108 0201 	add.w	r2, r8, #1
 800af60:	3b01      	subs	r3, #1
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	d10e      	bne.n	800af8a <_printf_float+0x42a>
 800af6c:	e659      	b.n	800ac22 <_printf_float+0xc2>
 800af6e:	2301      	movs	r3, #1
 800af70:	4652      	mov	r2, sl
 800af72:	4631      	mov	r1, r6
 800af74:	4628      	mov	r0, r5
 800af76:	47b8      	blx	r7
 800af78:	3001      	adds	r0, #1
 800af7a:	f43f ae52 	beq.w	800ac22 <_printf_float+0xc2>
 800af7e:	f108 0801 	add.w	r8, r8, #1
 800af82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af84:	3b01      	subs	r3, #1
 800af86:	4543      	cmp	r3, r8
 800af88:	dcf1      	bgt.n	800af6e <_printf_float+0x40e>
 800af8a:	464b      	mov	r3, r9
 800af8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af90:	e6dc      	b.n	800ad4c <_printf_float+0x1ec>
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	f104 0a1a 	add.w	sl, r4, #26
 800af9a:	e7f2      	b.n	800af82 <_printf_float+0x422>
 800af9c:	2301      	movs	r3, #1
 800af9e:	4642      	mov	r2, r8
 800afa0:	e7df      	b.n	800af62 <_printf_float+0x402>
 800afa2:	2301      	movs	r3, #1
 800afa4:	464a      	mov	r2, r9
 800afa6:	4631      	mov	r1, r6
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b8      	blx	r7
 800afac:	3001      	adds	r0, #1
 800afae:	f43f ae38 	beq.w	800ac22 <_printf_float+0xc2>
 800afb2:	f108 0801 	add.w	r8, r8, #1
 800afb6:	68e3      	ldr	r3, [r4, #12]
 800afb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afba:	1a5b      	subs	r3, r3, r1
 800afbc:	4543      	cmp	r3, r8
 800afbe:	dcf0      	bgt.n	800afa2 <_printf_float+0x442>
 800afc0:	e6fa      	b.n	800adb8 <_printf_float+0x258>
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	f104 0919 	add.w	r9, r4, #25
 800afca:	e7f4      	b.n	800afb6 <_printf_float+0x456>

0800afcc <_printf_common>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	4616      	mov	r6, r2
 800afd2:	4699      	mov	r9, r3
 800afd4:	688a      	ldr	r2, [r1, #8]
 800afd6:	690b      	ldr	r3, [r1, #16]
 800afd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afdc:	4293      	cmp	r3, r2
 800afde:	bfb8      	it	lt
 800afe0:	4613      	movlt	r3, r2
 800afe2:	6033      	str	r3, [r6, #0]
 800afe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afe8:	4607      	mov	r7, r0
 800afea:	460c      	mov	r4, r1
 800afec:	b10a      	cbz	r2, 800aff2 <_printf_common+0x26>
 800afee:	3301      	adds	r3, #1
 800aff0:	6033      	str	r3, [r6, #0]
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	0699      	lsls	r1, r3, #26
 800aff6:	bf42      	ittt	mi
 800aff8:	6833      	ldrmi	r3, [r6, #0]
 800affa:	3302      	addmi	r3, #2
 800affc:	6033      	strmi	r3, [r6, #0]
 800affe:	6825      	ldr	r5, [r4, #0]
 800b000:	f015 0506 	ands.w	r5, r5, #6
 800b004:	d106      	bne.n	800b014 <_printf_common+0x48>
 800b006:	f104 0a19 	add.w	sl, r4, #25
 800b00a:	68e3      	ldr	r3, [r4, #12]
 800b00c:	6832      	ldr	r2, [r6, #0]
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	42ab      	cmp	r3, r5
 800b012:	dc26      	bgt.n	800b062 <_printf_common+0x96>
 800b014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b018:	1e13      	subs	r3, r2, #0
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	bf18      	it	ne
 800b01e:	2301      	movne	r3, #1
 800b020:	0692      	lsls	r2, r2, #26
 800b022:	d42b      	bmi.n	800b07c <_printf_common+0xb0>
 800b024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b028:	4649      	mov	r1, r9
 800b02a:	4638      	mov	r0, r7
 800b02c:	47c0      	blx	r8
 800b02e:	3001      	adds	r0, #1
 800b030:	d01e      	beq.n	800b070 <_printf_common+0xa4>
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	68e5      	ldr	r5, [r4, #12]
 800b036:	6832      	ldr	r2, [r6, #0]
 800b038:	f003 0306 	and.w	r3, r3, #6
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	bf08      	it	eq
 800b040:	1aad      	subeq	r5, r5, r2
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	6922      	ldr	r2, [r4, #16]
 800b046:	bf0c      	ite	eq
 800b048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b04c:	2500      	movne	r5, #0
 800b04e:	4293      	cmp	r3, r2
 800b050:	bfc4      	itt	gt
 800b052:	1a9b      	subgt	r3, r3, r2
 800b054:	18ed      	addgt	r5, r5, r3
 800b056:	2600      	movs	r6, #0
 800b058:	341a      	adds	r4, #26
 800b05a:	42b5      	cmp	r5, r6
 800b05c:	d11a      	bne.n	800b094 <_printf_common+0xc8>
 800b05e:	2000      	movs	r0, #0
 800b060:	e008      	b.n	800b074 <_printf_common+0xa8>
 800b062:	2301      	movs	r3, #1
 800b064:	4652      	mov	r2, sl
 800b066:	4649      	mov	r1, r9
 800b068:	4638      	mov	r0, r7
 800b06a:	47c0      	blx	r8
 800b06c:	3001      	adds	r0, #1
 800b06e:	d103      	bne.n	800b078 <_printf_common+0xac>
 800b070:	f04f 30ff 	mov.w	r0, #4294967295
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	3501      	adds	r5, #1
 800b07a:	e7c6      	b.n	800b00a <_printf_common+0x3e>
 800b07c:	18e1      	adds	r1, r4, r3
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	2030      	movs	r0, #48	; 0x30
 800b082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b086:	4422      	add	r2, r4
 800b088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b08c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b090:	3302      	adds	r3, #2
 800b092:	e7c7      	b.n	800b024 <_printf_common+0x58>
 800b094:	2301      	movs	r3, #1
 800b096:	4622      	mov	r2, r4
 800b098:	4649      	mov	r1, r9
 800b09a:	4638      	mov	r0, r7
 800b09c:	47c0      	blx	r8
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d0e6      	beq.n	800b070 <_printf_common+0xa4>
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	e7d9      	b.n	800b05a <_printf_common+0x8e>
	...

0800b0a8 <_printf_i>:
 800b0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ac:	7e0f      	ldrb	r7, [r1, #24]
 800b0ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0b0:	2f78      	cmp	r7, #120	; 0x78
 800b0b2:	4691      	mov	r9, r2
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	469a      	mov	sl, r3
 800b0ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0be:	d807      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0c0:	2f62      	cmp	r7, #98	; 0x62
 800b0c2:	d80a      	bhi.n	800b0da <_printf_i+0x32>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	f000 80d8 	beq.w	800b27a <_printf_i+0x1d2>
 800b0ca:	2f58      	cmp	r7, #88	; 0x58
 800b0cc:	f000 80a3 	beq.w	800b216 <_printf_i+0x16e>
 800b0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0d8:	e03a      	b.n	800b150 <_printf_i+0xa8>
 800b0da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0de:	2b15      	cmp	r3, #21
 800b0e0:	d8f6      	bhi.n	800b0d0 <_printf_i+0x28>
 800b0e2:	a101      	add	r1, pc, #4	; (adr r1, 800b0e8 <_printf_i+0x40>)
 800b0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b155 	.word	0x0800b155
 800b0f0:	0800b0d1 	.word	0x0800b0d1
 800b0f4:	0800b0d1 	.word	0x0800b0d1
 800b0f8:	0800b0d1 	.word	0x0800b0d1
 800b0fc:	0800b0d1 	.word	0x0800b0d1
 800b100:	0800b155 	.word	0x0800b155
 800b104:	0800b0d1 	.word	0x0800b0d1
 800b108:	0800b0d1 	.word	0x0800b0d1
 800b10c:	0800b0d1 	.word	0x0800b0d1
 800b110:	0800b0d1 	.word	0x0800b0d1
 800b114:	0800b261 	.word	0x0800b261
 800b118:	0800b185 	.word	0x0800b185
 800b11c:	0800b243 	.word	0x0800b243
 800b120:	0800b0d1 	.word	0x0800b0d1
 800b124:	0800b0d1 	.word	0x0800b0d1
 800b128:	0800b283 	.word	0x0800b283
 800b12c:	0800b0d1 	.word	0x0800b0d1
 800b130:	0800b185 	.word	0x0800b185
 800b134:	0800b0d1 	.word	0x0800b0d1
 800b138:	0800b0d1 	.word	0x0800b0d1
 800b13c:	0800b24b 	.word	0x0800b24b
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	1d1a      	adds	r2, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	602a      	str	r2, [r5, #0]
 800b148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b150:	2301      	movs	r3, #1
 800b152:	e0a3      	b.n	800b29c <_printf_i+0x1f4>
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	6829      	ldr	r1, [r5, #0]
 800b158:	0606      	lsls	r6, r0, #24
 800b15a:	f101 0304 	add.w	r3, r1, #4
 800b15e:	d50a      	bpl.n	800b176 <_printf_i+0xce>
 800b160:	680e      	ldr	r6, [r1, #0]
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	2e00      	cmp	r6, #0
 800b166:	da03      	bge.n	800b170 <_printf_i+0xc8>
 800b168:	232d      	movs	r3, #45	; 0x2d
 800b16a:	4276      	negs	r6, r6
 800b16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b170:	485e      	ldr	r0, [pc, #376]	; (800b2ec <_printf_i+0x244>)
 800b172:	230a      	movs	r3, #10
 800b174:	e019      	b.n	800b1aa <_printf_i+0x102>
 800b176:	680e      	ldr	r6, [r1, #0]
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b17e:	bf18      	it	ne
 800b180:	b236      	sxthne	r6, r6
 800b182:	e7ef      	b.n	800b164 <_printf_i+0xbc>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	1d19      	adds	r1, r3, #4
 800b18a:	6029      	str	r1, [r5, #0]
 800b18c:	0601      	lsls	r1, r0, #24
 800b18e:	d501      	bpl.n	800b194 <_printf_i+0xec>
 800b190:	681e      	ldr	r6, [r3, #0]
 800b192:	e002      	b.n	800b19a <_printf_i+0xf2>
 800b194:	0646      	lsls	r6, r0, #25
 800b196:	d5fb      	bpl.n	800b190 <_printf_i+0xe8>
 800b198:	881e      	ldrh	r6, [r3, #0]
 800b19a:	4854      	ldr	r0, [pc, #336]	; (800b2ec <_printf_i+0x244>)
 800b19c:	2f6f      	cmp	r7, #111	; 0x6f
 800b19e:	bf0c      	ite	eq
 800b1a0:	2308      	moveq	r3, #8
 800b1a2:	230a      	movne	r3, #10
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1aa:	6865      	ldr	r5, [r4, #4]
 800b1ac:	60a5      	str	r5, [r4, #8]
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	bfa2      	ittt	ge
 800b1b2:	6821      	ldrge	r1, [r4, #0]
 800b1b4:	f021 0104 	bicge.w	r1, r1, #4
 800b1b8:	6021      	strge	r1, [r4, #0]
 800b1ba:	b90e      	cbnz	r6, 800b1c0 <_printf_i+0x118>
 800b1bc:	2d00      	cmp	r5, #0
 800b1be:	d04d      	beq.n	800b25c <_printf_i+0x1b4>
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b1ca:	5dc7      	ldrb	r7, [r0, r7]
 800b1cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1d0:	4637      	mov	r7, r6
 800b1d2:	42bb      	cmp	r3, r7
 800b1d4:	460e      	mov	r6, r1
 800b1d6:	d9f4      	bls.n	800b1c2 <_printf_i+0x11a>
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d10b      	bne.n	800b1f4 <_printf_i+0x14c>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	07de      	lsls	r6, r3, #31
 800b1e0:	d508      	bpl.n	800b1f4 <_printf_i+0x14c>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	6861      	ldr	r1, [r4, #4]
 800b1e6:	4299      	cmp	r1, r3
 800b1e8:	bfde      	ittt	le
 800b1ea:	2330      	movle	r3, #48	; 0x30
 800b1ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1f4:	1b52      	subs	r2, r2, r5
 800b1f6:	6122      	str	r2, [r4, #16]
 800b1f8:	f8cd a000 	str.w	sl, [sp]
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	aa03      	add	r2, sp, #12
 800b200:	4621      	mov	r1, r4
 800b202:	4640      	mov	r0, r8
 800b204:	f7ff fee2 	bl	800afcc <_printf_common>
 800b208:	3001      	adds	r0, #1
 800b20a:	d14c      	bne.n	800b2a6 <_printf_i+0x1fe>
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295
 800b210:	b004      	add	sp, #16
 800b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b216:	4835      	ldr	r0, [pc, #212]	; (800b2ec <_printf_i+0x244>)
 800b218:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b21c:	6829      	ldr	r1, [r5, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	f851 6b04 	ldr.w	r6, [r1], #4
 800b224:	6029      	str	r1, [r5, #0]
 800b226:	061d      	lsls	r5, r3, #24
 800b228:	d514      	bpl.n	800b254 <_printf_i+0x1ac>
 800b22a:	07df      	lsls	r7, r3, #31
 800b22c:	bf44      	itt	mi
 800b22e:	f043 0320 	orrmi.w	r3, r3, #32
 800b232:	6023      	strmi	r3, [r4, #0]
 800b234:	b91e      	cbnz	r6, 800b23e <_printf_i+0x196>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f023 0320 	bic.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	2310      	movs	r3, #16
 800b240:	e7b0      	b.n	800b1a4 <_printf_i+0xfc>
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	f043 0320 	orr.w	r3, r3, #32
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	2378      	movs	r3, #120	; 0x78
 800b24c:	4828      	ldr	r0, [pc, #160]	; (800b2f0 <_printf_i+0x248>)
 800b24e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b252:	e7e3      	b.n	800b21c <_printf_i+0x174>
 800b254:	0659      	lsls	r1, r3, #25
 800b256:	bf48      	it	mi
 800b258:	b2b6      	uxthmi	r6, r6
 800b25a:	e7e6      	b.n	800b22a <_printf_i+0x182>
 800b25c:	4615      	mov	r5, r2
 800b25e:	e7bb      	b.n	800b1d8 <_printf_i+0x130>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	6826      	ldr	r6, [r4, #0]
 800b264:	6961      	ldr	r1, [r4, #20]
 800b266:	1d18      	adds	r0, r3, #4
 800b268:	6028      	str	r0, [r5, #0]
 800b26a:	0635      	lsls	r5, r6, #24
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	d501      	bpl.n	800b274 <_printf_i+0x1cc>
 800b270:	6019      	str	r1, [r3, #0]
 800b272:	e002      	b.n	800b27a <_printf_i+0x1d2>
 800b274:	0670      	lsls	r0, r6, #25
 800b276:	d5fb      	bpl.n	800b270 <_printf_i+0x1c8>
 800b278:	8019      	strh	r1, [r3, #0]
 800b27a:	2300      	movs	r3, #0
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	4615      	mov	r5, r2
 800b280:	e7ba      	b.n	800b1f8 <_printf_i+0x150>
 800b282:	682b      	ldr	r3, [r5, #0]
 800b284:	1d1a      	adds	r2, r3, #4
 800b286:	602a      	str	r2, [r5, #0]
 800b288:	681d      	ldr	r5, [r3, #0]
 800b28a:	6862      	ldr	r2, [r4, #4]
 800b28c:	2100      	movs	r1, #0
 800b28e:	4628      	mov	r0, r5
 800b290:	f7f4 ffbe 	bl	8000210 <memchr>
 800b294:	b108      	cbz	r0, 800b29a <_printf_i+0x1f2>
 800b296:	1b40      	subs	r0, r0, r5
 800b298:	6060      	str	r0, [r4, #4]
 800b29a:	6863      	ldr	r3, [r4, #4]
 800b29c:	6123      	str	r3, [r4, #16]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a4:	e7a8      	b.n	800b1f8 <_printf_i+0x150>
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	47d0      	blx	sl
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d0ab      	beq.n	800b20c <_printf_i+0x164>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	079b      	lsls	r3, r3, #30
 800b2b8:	d413      	bmi.n	800b2e2 <_printf_i+0x23a>
 800b2ba:	68e0      	ldr	r0, [r4, #12]
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	bfb8      	it	lt
 800b2c2:	4618      	movlt	r0, r3
 800b2c4:	e7a4      	b.n	800b210 <_printf_i+0x168>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	47d0      	blx	sl
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	d09b      	beq.n	800b20c <_printf_i+0x164>
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	9903      	ldr	r1, [sp, #12]
 800b2da:	1a5b      	subs	r3, r3, r1
 800b2dc:	42ab      	cmp	r3, r5
 800b2de:	dcf2      	bgt.n	800b2c6 <_printf_i+0x21e>
 800b2e0:	e7eb      	b.n	800b2ba <_printf_i+0x212>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	f104 0619 	add.w	r6, r4, #25
 800b2e8:	e7f5      	b.n	800b2d6 <_printf_i+0x22e>
 800b2ea:	bf00      	nop
 800b2ec:	0800f916 	.word	0x0800f916
 800b2f0:	0800f927 	.word	0x0800f927

0800b2f4 <_sbrk_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4d06      	ldr	r5, [pc, #24]	; (800b310 <_sbrk_r+0x1c>)
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	f004 f9c0 	bl	800f684 <_sbrk>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_sbrk_r+0x1a>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_sbrk_r+0x1a>
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	200133e4 	.word	0x200133e4

0800b314 <quorem>:
 800b314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	6903      	ldr	r3, [r0, #16]
 800b31a:	690c      	ldr	r4, [r1, #16]
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	4607      	mov	r7, r0
 800b320:	f2c0 8081 	blt.w	800b426 <quorem+0x112>
 800b324:	3c01      	subs	r4, #1
 800b326:	f101 0814 	add.w	r8, r1, #20
 800b32a:	f100 0514 	add.w	r5, r0, #20
 800b32e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b332:	9301      	str	r3, [sp, #4]
 800b334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b33c:	3301      	adds	r3, #1
 800b33e:	429a      	cmp	r2, r3
 800b340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b348:	fbb2 f6f3 	udiv	r6, r2, r3
 800b34c:	d331      	bcc.n	800b3b2 <quorem+0x9e>
 800b34e:	f04f 0e00 	mov.w	lr, #0
 800b352:	4640      	mov	r0, r8
 800b354:	46ac      	mov	ip, r5
 800b356:	46f2      	mov	sl, lr
 800b358:	f850 2b04 	ldr.w	r2, [r0], #4
 800b35c:	b293      	uxth	r3, r2
 800b35e:	fb06 e303 	mla	r3, r6, r3, lr
 800b362:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b366:	b29b      	uxth	r3, r3
 800b368:	ebaa 0303 	sub.w	r3, sl, r3
 800b36c:	f8dc a000 	ldr.w	sl, [ip]
 800b370:	0c12      	lsrs	r2, r2, #16
 800b372:	fa13 f38a 	uxtah	r3, r3, sl
 800b376:	fb06 e202 	mla	r2, r6, r2, lr
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	9b00      	ldr	r3, [sp, #0]
 800b37e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b382:	b292      	uxth	r2, r2
 800b384:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b38c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b390:	4581      	cmp	r9, r0
 800b392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b396:	f84c 3b04 	str.w	r3, [ip], #4
 800b39a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b39e:	d2db      	bcs.n	800b358 <quorem+0x44>
 800b3a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b3a4:	b92b      	cbnz	r3, 800b3b2 <quorem+0x9e>
 800b3a6:	9b01      	ldr	r3, [sp, #4]
 800b3a8:	3b04      	subs	r3, #4
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	d32e      	bcc.n	800b40e <quorem+0xfa>
 800b3b0:	613c      	str	r4, [r7, #16]
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	f001 f8bc 	bl	800c530 <__mcmp>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	db24      	blt.n	800b406 <quorem+0xf2>
 800b3bc:	3601      	adds	r6, #1
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f04f 0c00 	mov.w	ip, #0
 800b3c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3c8:	f8d0 e000 	ldr.w	lr, [r0]
 800b3cc:	b293      	uxth	r3, r2
 800b3ce:	ebac 0303 	sub.w	r3, ip, r3
 800b3d2:	0c12      	lsrs	r2, r2, #16
 800b3d4:	fa13 f38e 	uxtah	r3, r3, lr
 800b3d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3e6:	45c1      	cmp	r9, r8
 800b3e8:	f840 3b04 	str.w	r3, [r0], #4
 800b3ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3f0:	d2e8      	bcs.n	800b3c4 <quorem+0xb0>
 800b3f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3fa:	b922      	cbnz	r2, 800b406 <quorem+0xf2>
 800b3fc:	3b04      	subs	r3, #4
 800b3fe:	429d      	cmp	r5, r3
 800b400:	461a      	mov	r2, r3
 800b402:	d30a      	bcc.n	800b41a <quorem+0x106>
 800b404:	613c      	str	r4, [r7, #16]
 800b406:	4630      	mov	r0, r6
 800b408:	b003      	add	sp, #12
 800b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40e:	6812      	ldr	r2, [r2, #0]
 800b410:	3b04      	subs	r3, #4
 800b412:	2a00      	cmp	r2, #0
 800b414:	d1cc      	bne.n	800b3b0 <quorem+0x9c>
 800b416:	3c01      	subs	r4, #1
 800b418:	e7c7      	b.n	800b3aa <quorem+0x96>
 800b41a:	6812      	ldr	r2, [r2, #0]
 800b41c:	3b04      	subs	r3, #4
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d1f0      	bne.n	800b404 <quorem+0xf0>
 800b422:	3c01      	subs	r4, #1
 800b424:	e7eb      	b.n	800b3fe <quorem+0xea>
 800b426:	2000      	movs	r0, #0
 800b428:	e7ee      	b.n	800b408 <quorem+0xf4>
 800b42a:	0000      	movs	r0, r0
 800b42c:	0000      	movs	r0, r0
	...

0800b430 <_dtoa_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	ed2d 8b04 	vpush	{d8-d9}
 800b438:	ec57 6b10 	vmov	r6, r7, d0
 800b43c:	b093      	sub	sp, #76	; 0x4c
 800b43e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b444:	9106      	str	r1, [sp, #24]
 800b446:	ee10 aa10 	vmov	sl, s0
 800b44a:	4604      	mov	r4, r0
 800b44c:	9209      	str	r2, [sp, #36]	; 0x24
 800b44e:	930c      	str	r3, [sp, #48]	; 0x30
 800b450:	46bb      	mov	fp, r7
 800b452:	b975      	cbnz	r5, 800b472 <_dtoa_r+0x42>
 800b454:	2010      	movs	r0, #16
 800b456:	f7ff f9e5 	bl	800a824 <malloc>
 800b45a:	4602      	mov	r2, r0
 800b45c:	6260      	str	r0, [r4, #36]	; 0x24
 800b45e:	b920      	cbnz	r0, 800b46a <_dtoa_r+0x3a>
 800b460:	4ba7      	ldr	r3, [pc, #668]	; (800b700 <_dtoa_r+0x2d0>)
 800b462:	21ea      	movs	r1, #234	; 0xea
 800b464:	48a7      	ldr	r0, [pc, #668]	; (800b704 <_dtoa_r+0x2d4>)
 800b466:	f001 f97b 	bl	800c760 <__assert_func>
 800b46a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b46e:	6005      	str	r5, [r0, #0]
 800b470:	60c5      	str	r5, [r0, #12]
 800b472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b474:	6819      	ldr	r1, [r3, #0]
 800b476:	b151      	cbz	r1, 800b48e <_dtoa_r+0x5e>
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	604a      	str	r2, [r1, #4]
 800b47c:	2301      	movs	r3, #1
 800b47e:	4093      	lsls	r3, r2
 800b480:	608b      	str	r3, [r1, #8]
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fe12 	bl	800c0ac <_Bfree>
 800b488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	1e3b      	subs	r3, r7, #0
 800b490:	bfaa      	itet	ge
 800b492:	2300      	movge	r3, #0
 800b494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b498:	f8c8 3000 	strge.w	r3, [r8]
 800b49c:	4b9a      	ldr	r3, [pc, #616]	; (800b708 <_dtoa_r+0x2d8>)
 800b49e:	bfbc      	itt	lt
 800b4a0:	2201      	movlt	r2, #1
 800b4a2:	f8c8 2000 	strlt.w	r2, [r8]
 800b4a6:	ea33 030b 	bics.w	r3, r3, fp
 800b4aa:	d11b      	bne.n	800b4e4 <_dtoa_r+0xb4>
 800b4ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4b8:	4333      	orrs	r3, r6
 800b4ba:	f000 8592 	beq.w	800bfe2 <_dtoa_r+0xbb2>
 800b4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4c0:	b963      	cbnz	r3, 800b4dc <_dtoa_r+0xac>
 800b4c2:	4b92      	ldr	r3, [pc, #584]	; (800b70c <_dtoa_r+0x2dc>)
 800b4c4:	e022      	b.n	800b50c <_dtoa_r+0xdc>
 800b4c6:	4b92      	ldr	r3, [pc, #584]	; (800b710 <_dtoa_r+0x2e0>)
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	9801      	ldr	r0, [sp, #4]
 800b4d2:	b013      	add	sp, #76	; 0x4c
 800b4d4:	ecbd 8b04 	vpop	{d8-d9}
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	4b8b      	ldr	r3, [pc, #556]	; (800b70c <_dtoa_r+0x2dc>)
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	e7f3      	b.n	800b4cc <_dtoa_r+0x9c>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4650      	mov	r0, sl
 800b4ea:	4659      	mov	r1, fp
 800b4ec:	f7f5 fb04 	bl	8000af8 <__aeabi_dcmpeq>
 800b4f0:	ec4b ab19 	vmov	d9, sl, fp
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	b158      	cbz	r0, 800b510 <_dtoa_r+0xe0>
 800b4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	6013      	str	r3, [r2, #0]
 800b4fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 856b 	beq.w	800bfdc <_dtoa_r+0xbac>
 800b506:	4883      	ldr	r0, [pc, #524]	; (800b714 <_dtoa_r+0x2e4>)
 800b508:	6018      	str	r0, [r3, #0]
 800b50a:	1e43      	subs	r3, r0, #1
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	e7df      	b.n	800b4d0 <_dtoa_r+0xa0>
 800b510:	ec4b ab10 	vmov	d0, sl, fp
 800b514:	aa10      	add	r2, sp, #64	; 0x40
 800b516:	a911      	add	r1, sp, #68	; 0x44
 800b518:	4620      	mov	r0, r4
 800b51a:	f001 f8af 	bl	800c67c <__d2b>
 800b51e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b522:	ee08 0a10 	vmov	s16, r0
 800b526:	2d00      	cmp	r5, #0
 800b528:	f000 8084 	beq.w	800b634 <_dtoa_r+0x204>
 800b52c:	ee19 3a90 	vmov	r3, s19
 800b530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b538:	4656      	mov	r6, sl
 800b53a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b53e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b546:	4b74      	ldr	r3, [pc, #464]	; (800b718 <_dtoa_r+0x2e8>)
 800b548:	2200      	movs	r2, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	4639      	mov	r1, r7
 800b54e:	f7f4 feb3 	bl	80002b8 <__aeabi_dsub>
 800b552:	a365      	add	r3, pc, #404	; (adr r3, 800b6e8 <_dtoa_r+0x2b8>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f5 f866 	bl	8000628 <__aeabi_dmul>
 800b55c:	a364      	add	r3, pc, #400	; (adr r3, 800b6f0 <_dtoa_r+0x2c0>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f4 feab 	bl	80002bc <__adddf3>
 800b566:	4606      	mov	r6, r0
 800b568:	4628      	mov	r0, r5
 800b56a:	460f      	mov	r7, r1
 800b56c:	f7f4 fff2 	bl	8000554 <__aeabi_i2d>
 800b570:	a361      	add	r3, pc, #388	; (adr r3, 800b6f8 <_dtoa_r+0x2c8>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f7f5 f857 	bl	8000628 <__aeabi_dmul>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4630      	mov	r0, r6
 800b580:	4639      	mov	r1, r7
 800b582:	f7f4 fe9b 	bl	80002bc <__adddf3>
 800b586:	4606      	mov	r6, r0
 800b588:	460f      	mov	r7, r1
 800b58a:	f7f5 fafd 	bl	8000b88 <__aeabi_d2iz>
 800b58e:	2200      	movs	r2, #0
 800b590:	9000      	str	r0, [sp, #0]
 800b592:	2300      	movs	r3, #0
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f7f5 fab8 	bl	8000b0c <__aeabi_dcmplt>
 800b59c:	b150      	cbz	r0, 800b5b4 <_dtoa_r+0x184>
 800b59e:	9800      	ldr	r0, [sp, #0]
 800b5a0:	f7f4 ffd8 	bl	8000554 <__aeabi_i2d>
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	463b      	mov	r3, r7
 800b5a8:	f7f5 faa6 	bl	8000af8 <__aeabi_dcmpeq>
 800b5ac:	b910      	cbnz	r0, 800b5b4 <_dtoa_r+0x184>
 800b5ae:	9b00      	ldr	r3, [sp, #0]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	9b00      	ldr	r3, [sp, #0]
 800b5b6:	2b16      	cmp	r3, #22
 800b5b8:	d85a      	bhi.n	800b670 <_dtoa_r+0x240>
 800b5ba:	9a00      	ldr	r2, [sp, #0]
 800b5bc:	4b57      	ldr	r3, [pc, #348]	; (800b71c <_dtoa_r+0x2ec>)
 800b5be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	ec51 0b19 	vmov	r0, r1, d9
 800b5ca:	f7f5 fa9f 	bl	8000b0c <__aeabi_dcmplt>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d050      	beq.n	800b674 <_dtoa_r+0x244>
 800b5d2:	9b00      	ldr	r3, [sp, #0]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5de:	1b5d      	subs	r5, r3, r5
 800b5e0:	1e6b      	subs	r3, r5, #1
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	bf45      	ittet	mi
 800b5e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b5ea:	9304      	strmi	r3, [sp, #16]
 800b5ec:	2300      	movpl	r3, #0
 800b5ee:	2300      	movmi	r3, #0
 800b5f0:	bf4c      	ite	mi
 800b5f2:	9305      	strmi	r3, [sp, #20]
 800b5f4:	9304      	strpl	r3, [sp, #16]
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	db3d      	blt.n	800b678 <_dtoa_r+0x248>
 800b5fc:	9b05      	ldr	r3, [sp, #20]
 800b5fe:	9a00      	ldr	r2, [sp, #0]
 800b600:	920a      	str	r2, [sp, #40]	; 0x28
 800b602:	4413      	add	r3, r2
 800b604:	9305      	str	r3, [sp, #20]
 800b606:	2300      	movs	r3, #0
 800b608:	9307      	str	r3, [sp, #28]
 800b60a:	9b06      	ldr	r3, [sp, #24]
 800b60c:	2b09      	cmp	r3, #9
 800b60e:	f200 8089 	bhi.w	800b724 <_dtoa_r+0x2f4>
 800b612:	2b05      	cmp	r3, #5
 800b614:	bfc4      	itt	gt
 800b616:	3b04      	subgt	r3, #4
 800b618:	9306      	strgt	r3, [sp, #24]
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	f1a3 0302 	sub.w	r3, r3, #2
 800b620:	bfcc      	ite	gt
 800b622:	2500      	movgt	r5, #0
 800b624:	2501      	movle	r5, #1
 800b626:	2b03      	cmp	r3, #3
 800b628:	f200 8087 	bhi.w	800b73a <_dtoa_r+0x30a>
 800b62c:	e8df f003 	tbb	[pc, r3]
 800b630:	59383a2d 	.word	0x59383a2d
 800b634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b638:	441d      	add	r5, r3
 800b63a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b63e:	2b20      	cmp	r3, #32
 800b640:	bfc1      	itttt	gt
 800b642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b64a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b64e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b652:	bfda      	itte	le
 800b654:	f1c3 0320 	rsble	r3, r3, #32
 800b658:	fa06 f003 	lslle.w	r0, r6, r3
 800b65c:	4318      	orrgt	r0, r3
 800b65e:	f7f4 ff69 	bl	8000534 <__aeabi_ui2d>
 800b662:	2301      	movs	r3, #1
 800b664:	4606      	mov	r6, r0
 800b666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b66a:	3d01      	subs	r5, #1
 800b66c:	930e      	str	r3, [sp, #56]	; 0x38
 800b66e:	e76a      	b.n	800b546 <_dtoa_r+0x116>
 800b670:	2301      	movs	r3, #1
 800b672:	e7b2      	b.n	800b5da <_dtoa_r+0x1aa>
 800b674:	900b      	str	r0, [sp, #44]	; 0x2c
 800b676:	e7b1      	b.n	800b5dc <_dtoa_r+0x1ac>
 800b678:	9b04      	ldr	r3, [sp, #16]
 800b67a:	9a00      	ldr	r2, [sp, #0]
 800b67c:	1a9b      	subs	r3, r3, r2
 800b67e:	9304      	str	r3, [sp, #16]
 800b680:	4253      	negs	r3, r2
 800b682:	9307      	str	r3, [sp, #28]
 800b684:	2300      	movs	r3, #0
 800b686:	930a      	str	r3, [sp, #40]	; 0x28
 800b688:	e7bf      	b.n	800b60a <_dtoa_r+0x1da>
 800b68a:	2300      	movs	r3, #0
 800b68c:	9308      	str	r3, [sp, #32]
 800b68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	dc55      	bgt.n	800b740 <_dtoa_r+0x310>
 800b694:	2301      	movs	r3, #1
 800b696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b69a:	461a      	mov	r2, r3
 800b69c:	9209      	str	r2, [sp, #36]	; 0x24
 800b69e:	e00c      	b.n	800b6ba <_dtoa_r+0x28a>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e7f3      	b.n	800b68c <_dtoa_r+0x25c>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a8:	9308      	str	r3, [sp, #32]
 800b6aa:	9b00      	ldr	r3, [sp, #0]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	9303      	str	r3, [sp, #12]
 800b6b6:	bfb8      	it	lt
 800b6b8:	2301      	movlt	r3, #1
 800b6ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6bc:	2200      	movs	r2, #0
 800b6be:	6042      	str	r2, [r0, #4]
 800b6c0:	2204      	movs	r2, #4
 800b6c2:	f102 0614 	add.w	r6, r2, #20
 800b6c6:	429e      	cmp	r6, r3
 800b6c8:	6841      	ldr	r1, [r0, #4]
 800b6ca:	d93d      	bls.n	800b748 <_dtoa_r+0x318>
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f000 fcad 	bl	800c02c <_Balloc>
 800b6d2:	9001      	str	r0, [sp, #4]
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d13b      	bne.n	800b750 <_dtoa_r+0x320>
 800b6d8:	4b11      	ldr	r3, [pc, #68]	; (800b720 <_dtoa_r+0x2f0>)
 800b6da:	4602      	mov	r2, r0
 800b6dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b6e0:	e6c0      	b.n	800b464 <_dtoa_r+0x34>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e7df      	b.n	800b6a6 <_dtoa_r+0x276>
 800b6e6:	bf00      	nop
 800b6e8:	636f4361 	.word	0x636f4361
 800b6ec:	3fd287a7 	.word	0x3fd287a7
 800b6f0:	8b60c8b3 	.word	0x8b60c8b3
 800b6f4:	3fc68a28 	.word	0x3fc68a28
 800b6f8:	509f79fb 	.word	0x509f79fb
 800b6fc:	3fd34413 	.word	0x3fd34413
 800b700:	0800f945 	.word	0x0800f945
 800b704:	0800f95c 	.word	0x0800f95c
 800b708:	7ff00000 	.word	0x7ff00000
 800b70c:	0800f941 	.word	0x0800f941
 800b710:	0800f938 	.word	0x0800f938
 800b714:	0800f915 	.word	0x0800f915
 800b718:	3ff80000 	.word	0x3ff80000
 800b71c:	0800fa50 	.word	0x0800fa50
 800b720:	0800f9b7 	.word	0x0800f9b7
 800b724:	2501      	movs	r5, #1
 800b726:	2300      	movs	r3, #0
 800b728:	9306      	str	r3, [sp, #24]
 800b72a:	9508      	str	r5, [sp, #32]
 800b72c:	f04f 33ff 	mov.w	r3, #4294967295
 800b730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	2312      	movs	r3, #18
 800b738:	e7b0      	b.n	800b69c <_dtoa_r+0x26c>
 800b73a:	2301      	movs	r3, #1
 800b73c:	9308      	str	r3, [sp, #32]
 800b73e:	e7f5      	b.n	800b72c <_dtoa_r+0x2fc>
 800b740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b746:	e7b8      	b.n	800b6ba <_dtoa_r+0x28a>
 800b748:	3101      	adds	r1, #1
 800b74a:	6041      	str	r1, [r0, #4]
 800b74c:	0052      	lsls	r2, r2, #1
 800b74e:	e7b8      	b.n	800b6c2 <_dtoa_r+0x292>
 800b750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b752:	9a01      	ldr	r2, [sp, #4]
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	9b03      	ldr	r3, [sp, #12]
 800b758:	2b0e      	cmp	r3, #14
 800b75a:	f200 809d 	bhi.w	800b898 <_dtoa_r+0x468>
 800b75e:	2d00      	cmp	r5, #0
 800b760:	f000 809a 	beq.w	800b898 <_dtoa_r+0x468>
 800b764:	9b00      	ldr	r3, [sp, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	dd32      	ble.n	800b7d0 <_dtoa_r+0x3a0>
 800b76a:	4ab7      	ldr	r2, [pc, #732]	; (800ba48 <_dtoa_r+0x618>)
 800b76c:	f003 030f 	and.w	r3, r3, #15
 800b770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b774:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	05d8      	lsls	r0, r3, #23
 800b77c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b780:	d516      	bpl.n	800b7b0 <_dtoa_r+0x380>
 800b782:	4bb2      	ldr	r3, [pc, #712]	; (800ba4c <_dtoa_r+0x61c>)
 800b784:	ec51 0b19 	vmov	r0, r1, d9
 800b788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b78c:	f7f5 f876 	bl	800087c <__aeabi_ddiv>
 800b790:	f007 070f 	and.w	r7, r7, #15
 800b794:	4682      	mov	sl, r0
 800b796:	468b      	mov	fp, r1
 800b798:	2503      	movs	r5, #3
 800b79a:	4eac      	ldr	r6, [pc, #688]	; (800ba4c <_dtoa_r+0x61c>)
 800b79c:	b957      	cbnz	r7, 800b7b4 <_dtoa_r+0x384>
 800b79e:	4642      	mov	r2, r8
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	4659      	mov	r1, fp
 800b7a6:	f7f5 f869 	bl	800087c <__aeabi_ddiv>
 800b7aa:	4682      	mov	sl, r0
 800b7ac:	468b      	mov	fp, r1
 800b7ae:	e028      	b.n	800b802 <_dtoa_r+0x3d2>
 800b7b0:	2502      	movs	r5, #2
 800b7b2:	e7f2      	b.n	800b79a <_dtoa_r+0x36a>
 800b7b4:	07f9      	lsls	r1, r7, #31
 800b7b6:	d508      	bpl.n	800b7ca <_dtoa_r+0x39a>
 800b7b8:	4640      	mov	r0, r8
 800b7ba:	4649      	mov	r1, r9
 800b7bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7c0:	f7f4 ff32 	bl	8000628 <__aeabi_dmul>
 800b7c4:	3501      	adds	r5, #1
 800b7c6:	4680      	mov	r8, r0
 800b7c8:	4689      	mov	r9, r1
 800b7ca:	107f      	asrs	r7, r7, #1
 800b7cc:	3608      	adds	r6, #8
 800b7ce:	e7e5      	b.n	800b79c <_dtoa_r+0x36c>
 800b7d0:	f000 809b 	beq.w	800b90a <_dtoa_r+0x4da>
 800b7d4:	9b00      	ldr	r3, [sp, #0]
 800b7d6:	4f9d      	ldr	r7, [pc, #628]	; (800ba4c <_dtoa_r+0x61c>)
 800b7d8:	425e      	negs	r6, r3
 800b7da:	4b9b      	ldr	r3, [pc, #620]	; (800ba48 <_dtoa_r+0x618>)
 800b7dc:	f006 020f 	and.w	r2, r6, #15
 800b7e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	ec51 0b19 	vmov	r0, r1, d9
 800b7ec:	f7f4 ff1c 	bl	8000628 <__aeabi_dmul>
 800b7f0:	1136      	asrs	r6, r6, #4
 800b7f2:	4682      	mov	sl, r0
 800b7f4:	468b      	mov	fp, r1
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2502      	movs	r5, #2
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	d17a      	bne.n	800b8f4 <_dtoa_r+0x4c4>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1d3      	bne.n	800b7aa <_dtoa_r+0x37a>
 800b802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 8082 	beq.w	800b90e <_dtoa_r+0x4de>
 800b80a:	4b91      	ldr	r3, [pc, #580]	; (800ba50 <_dtoa_r+0x620>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	4650      	mov	r0, sl
 800b810:	4659      	mov	r1, fp
 800b812:	f7f5 f97b 	bl	8000b0c <__aeabi_dcmplt>
 800b816:	2800      	cmp	r0, #0
 800b818:	d079      	beq.n	800b90e <_dtoa_r+0x4de>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d076      	beq.n	800b90e <_dtoa_r+0x4de>
 800b820:	9b02      	ldr	r3, [sp, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	dd36      	ble.n	800b894 <_dtoa_r+0x464>
 800b826:	9b00      	ldr	r3, [sp, #0]
 800b828:	4650      	mov	r0, sl
 800b82a:	4659      	mov	r1, fp
 800b82c:	1e5f      	subs	r7, r3, #1
 800b82e:	2200      	movs	r2, #0
 800b830:	4b88      	ldr	r3, [pc, #544]	; (800ba54 <_dtoa_r+0x624>)
 800b832:	f7f4 fef9 	bl	8000628 <__aeabi_dmul>
 800b836:	9e02      	ldr	r6, [sp, #8]
 800b838:	4682      	mov	sl, r0
 800b83a:	468b      	mov	fp, r1
 800b83c:	3501      	adds	r5, #1
 800b83e:	4628      	mov	r0, r5
 800b840:	f7f4 fe88 	bl	8000554 <__aeabi_i2d>
 800b844:	4652      	mov	r2, sl
 800b846:	465b      	mov	r3, fp
 800b848:	f7f4 feee 	bl	8000628 <__aeabi_dmul>
 800b84c:	4b82      	ldr	r3, [pc, #520]	; (800ba58 <_dtoa_r+0x628>)
 800b84e:	2200      	movs	r2, #0
 800b850:	f7f4 fd34 	bl	80002bc <__adddf3>
 800b854:	46d0      	mov	r8, sl
 800b856:	46d9      	mov	r9, fp
 800b858:	4682      	mov	sl, r0
 800b85a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b85e:	2e00      	cmp	r6, #0
 800b860:	d158      	bne.n	800b914 <_dtoa_r+0x4e4>
 800b862:	4b7e      	ldr	r3, [pc, #504]	; (800ba5c <_dtoa_r+0x62c>)
 800b864:	2200      	movs	r2, #0
 800b866:	4640      	mov	r0, r8
 800b868:	4649      	mov	r1, r9
 800b86a:	f7f4 fd25 	bl	80002b8 <__aeabi_dsub>
 800b86e:	4652      	mov	r2, sl
 800b870:	465b      	mov	r3, fp
 800b872:	4680      	mov	r8, r0
 800b874:	4689      	mov	r9, r1
 800b876:	f7f5 f967 	bl	8000b48 <__aeabi_dcmpgt>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f040 8295 	bne.w	800bdaa <_dtoa_r+0x97a>
 800b880:	4652      	mov	r2, sl
 800b882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f5 f93f 	bl	8000b0c <__aeabi_dcmplt>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f040 8289 	bne.w	800bda6 <_dtoa_r+0x976>
 800b894:	ec5b ab19 	vmov	sl, fp, d9
 800b898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f2c0 8148 	blt.w	800bb30 <_dtoa_r+0x700>
 800b8a0:	9a00      	ldr	r2, [sp, #0]
 800b8a2:	2a0e      	cmp	r2, #14
 800b8a4:	f300 8144 	bgt.w	800bb30 <_dtoa_r+0x700>
 800b8a8:	4b67      	ldr	r3, [pc, #412]	; (800ba48 <_dtoa_r+0x618>)
 800b8aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f280 80d5 	bge.w	800ba64 <_dtoa_r+0x634>
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f300 80d1 	bgt.w	800ba64 <_dtoa_r+0x634>
 800b8c2:	f040 826f 	bne.w	800bda4 <_dtoa_r+0x974>
 800b8c6:	4b65      	ldr	r3, [pc, #404]	; (800ba5c <_dtoa_r+0x62c>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	f7f4 feab 	bl	8000628 <__aeabi_dmul>
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	f7f5 f92d 	bl	8000b34 <__aeabi_dcmpge>
 800b8da:	9e03      	ldr	r6, [sp, #12]
 800b8dc:	4637      	mov	r7, r6
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f040 8245 	bne.w	800bd6e <_dtoa_r+0x93e>
 800b8e4:	9d01      	ldr	r5, [sp, #4]
 800b8e6:	2331      	movs	r3, #49	; 0x31
 800b8e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	e240      	b.n	800bd76 <_dtoa_r+0x946>
 800b8f4:	07f2      	lsls	r2, r6, #31
 800b8f6:	d505      	bpl.n	800b904 <_dtoa_r+0x4d4>
 800b8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8fc:	f7f4 fe94 	bl	8000628 <__aeabi_dmul>
 800b900:	3501      	adds	r5, #1
 800b902:	2301      	movs	r3, #1
 800b904:	1076      	asrs	r6, r6, #1
 800b906:	3708      	adds	r7, #8
 800b908:	e777      	b.n	800b7fa <_dtoa_r+0x3ca>
 800b90a:	2502      	movs	r5, #2
 800b90c:	e779      	b.n	800b802 <_dtoa_r+0x3d2>
 800b90e:	9f00      	ldr	r7, [sp, #0]
 800b910:	9e03      	ldr	r6, [sp, #12]
 800b912:	e794      	b.n	800b83e <_dtoa_r+0x40e>
 800b914:	9901      	ldr	r1, [sp, #4]
 800b916:	4b4c      	ldr	r3, [pc, #304]	; (800ba48 <_dtoa_r+0x618>)
 800b918:	4431      	add	r1, r6
 800b91a:	910d      	str	r1, [sp, #52]	; 0x34
 800b91c:	9908      	ldr	r1, [sp, #32]
 800b91e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b926:	2900      	cmp	r1, #0
 800b928:	d043      	beq.n	800b9b2 <_dtoa_r+0x582>
 800b92a:	494d      	ldr	r1, [pc, #308]	; (800ba60 <_dtoa_r+0x630>)
 800b92c:	2000      	movs	r0, #0
 800b92e:	f7f4 ffa5 	bl	800087c <__aeabi_ddiv>
 800b932:	4652      	mov	r2, sl
 800b934:	465b      	mov	r3, fp
 800b936:	f7f4 fcbf 	bl	80002b8 <__aeabi_dsub>
 800b93a:	9d01      	ldr	r5, [sp, #4]
 800b93c:	4682      	mov	sl, r0
 800b93e:	468b      	mov	fp, r1
 800b940:	4649      	mov	r1, r9
 800b942:	4640      	mov	r0, r8
 800b944:	f7f5 f920 	bl	8000b88 <__aeabi_d2iz>
 800b948:	4606      	mov	r6, r0
 800b94a:	f7f4 fe03 	bl	8000554 <__aeabi_i2d>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	4640      	mov	r0, r8
 800b954:	4649      	mov	r1, r9
 800b956:	f7f4 fcaf 	bl	80002b8 <__aeabi_dsub>
 800b95a:	3630      	adds	r6, #48	; 0x30
 800b95c:	f805 6b01 	strb.w	r6, [r5], #1
 800b960:	4652      	mov	r2, sl
 800b962:	465b      	mov	r3, fp
 800b964:	4680      	mov	r8, r0
 800b966:	4689      	mov	r9, r1
 800b968:	f7f5 f8d0 	bl	8000b0c <__aeabi_dcmplt>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d163      	bne.n	800ba38 <_dtoa_r+0x608>
 800b970:	4642      	mov	r2, r8
 800b972:	464b      	mov	r3, r9
 800b974:	4936      	ldr	r1, [pc, #216]	; (800ba50 <_dtoa_r+0x620>)
 800b976:	2000      	movs	r0, #0
 800b978:	f7f4 fc9e 	bl	80002b8 <__aeabi_dsub>
 800b97c:	4652      	mov	r2, sl
 800b97e:	465b      	mov	r3, fp
 800b980:	f7f5 f8c4 	bl	8000b0c <__aeabi_dcmplt>
 800b984:	2800      	cmp	r0, #0
 800b986:	f040 80b5 	bne.w	800baf4 <_dtoa_r+0x6c4>
 800b98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b98c:	429d      	cmp	r5, r3
 800b98e:	d081      	beq.n	800b894 <_dtoa_r+0x464>
 800b990:	4b30      	ldr	r3, [pc, #192]	; (800ba54 <_dtoa_r+0x624>)
 800b992:	2200      	movs	r2, #0
 800b994:	4650      	mov	r0, sl
 800b996:	4659      	mov	r1, fp
 800b998:	f7f4 fe46 	bl	8000628 <__aeabi_dmul>
 800b99c:	4b2d      	ldr	r3, [pc, #180]	; (800ba54 <_dtoa_r+0x624>)
 800b99e:	4682      	mov	sl, r0
 800b9a0:	468b      	mov	fp, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f7f4 fe3e 	bl	8000628 <__aeabi_dmul>
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	4689      	mov	r9, r1
 800b9b0:	e7c6      	b.n	800b940 <_dtoa_r+0x510>
 800b9b2:	4650      	mov	r0, sl
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	f7f4 fe37 	bl	8000628 <__aeabi_dmul>
 800b9ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9bc:	9d01      	ldr	r5, [sp, #4]
 800b9be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9c0:	4682      	mov	sl, r0
 800b9c2:	468b      	mov	fp, r1
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	f7f5 f8de 	bl	8000b88 <__aeabi_d2iz>
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	f7f4 fdc1 	bl	8000554 <__aeabi_i2d>
 800b9d2:	3630      	adds	r6, #48	; 0x30
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4649      	mov	r1, r9
 800b9dc:	f7f4 fc6c 	bl	80002b8 <__aeabi_dsub>
 800b9e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9e6:	429d      	cmp	r5, r3
 800b9e8:	4680      	mov	r8, r0
 800b9ea:	4689      	mov	r9, r1
 800b9ec:	f04f 0200 	mov.w	r2, #0
 800b9f0:	d124      	bne.n	800ba3c <_dtoa_r+0x60c>
 800b9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ba60 <_dtoa_r+0x630>)
 800b9f4:	4650      	mov	r0, sl
 800b9f6:	4659      	mov	r1, fp
 800b9f8:	f7f4 fc60 	bl	80002bc <__adddf3>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4640      	mov	r0, r8
 800ba02:	4649      	mov	r1, r9
 800ba04:	f7f5 f8a0 	bl	8000b48 <__aeabi_dcmpgt>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d173      	bne.n	800baf4 <_dtoa_r+0x6c4>
 800ba0c:	4652      	mov	r2, sl
 800ba0e:	465b      	mov	r3, fp
 800ba10:	4913      	ldr	r1, [pc, #76]	; (800ba60 <_dtoa_r+0x630>)
 800ba12:	2000      	movs	r0, #0
 800ba14:	f7f4 fc50 	bl	80002b8 <__aeabi_dsub>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f5 f874 	bl	8000b0c <__aeabi_dcmplt>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	f43f af35 	beq.w	800b894 <_dtoa_r+0x464>
 800ba2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba2c:	1e6b      	subs	r3, r5, #1
 800ba2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba34:	2b30      	cmp	r3, #48	; 0x30
 800ba36:	d0f8      	beq.n	800ba2a <_dtoa_r+0x5fa>
 800ba38:	9700      	str	r7, [sp, #0]
 800ba3a:	e049      	b.n	800bad0 <_dtoa_r+0x6a0>
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <_dtoa_r+0x624>)
 800ba3e:	f7f4 fdf3 	bl	8000628 <__aeabi_dmul>
 800ba42:	4680      	mov	r8, r0
 800ba44:	4689      	mov	r9, r1
 800ba46:	e7bd      	b.n	800b9c4 <_dtoa_r+0x594>
 800ba48:	0800fa50 	.word	0x0800fa50
 800ba4c:	0800fa28 	.word	0x0800fa28
 800ba50:	3ff00000 	.word	0x3ff00000
 800ba54:	40240000 	.word	0x40240000
 800ba58:	401c0000 	.word	0x401c0000
 800ba5c:	40140000 	.word	0x40140000
 800ba60:	3fe00000 	.word	0x3fe00000
 800ba64:	9d01      	ldr	r5, [sp, #4]
 800ba66:	4656      	mov	r6, sl
 800ba68:	465f      	mov	r7, fp
 800ba6a:	4642      	mov	r2, r8
 800ba6c:	464b      	mov	r3, r9
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 ff03 	bl	800087c <__aeabi_ddiv>
 800ba76:	f7f5 f887 	bl	8000b88 <__aeabi_d2iz>
 800ba7a:	4682      	mov	sl, r0
 800ba7c:	f7f4 fd6a 	bl	8000554 <__aeabi_i2d>
 800ba80:	4642      	mov	r2, r8
 800ba82:	464b      	mov	r3, r9
 800ba84:	f7f4 fdd0 	bl	8000628 <__aeabi_dmul>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ba94:	f7f4 fc10 	bl	80002b8 <__aeabi_dsub>
 800ba98:	f805 6b01 	strb.w	r6, [r5], #1
 800ba9c:	9e01      	ldr	r6, [sp, #4]
 800ba9e:	9f03      	ldr	r7, [sp, #12]
 800baa0:	1bae      	subs	r6, r5, r6
 800baa2:	42b7      	cmp	r7, r6
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	d135      	bne.n	800bb16 <_dtoa_r+0x6e6>
 800baaa:	f7f4 fc07 	bl	80002bc <__adddf3>
 800baae:	4642      	mov	r2, r8
 800bab0:	464b      	mov	r3, r9
 800bab2:	4606      	mov	r6, r0
 800bab4:	460f      	mov	r7, r1
 800bab6:	f7f5 f847 	bl	8000b48 <__aeabi_dcmpgt>
 800baba:	b9d0      	cbnz	r0, 800baf2 <_dtoa_r+0x6c2>
 800babc:	4642      	mov	r2, r8
 800babe:	464b      	mov	r3, r9
 800bac0:	4630      	mov	r0, r6
 800bac2:	4639      	mov	r1, r7
 800bac4:	f7f5 f818 	bl	8000af8 <__aeabi_dcmpeq>
 800bac8:	b110      	cbz	r0, 800bad0 <_dtoa_r+0x6a0>
 800baca:	f01a 0f01 	tst.w	sl, #1
 800bace:	d110      	bne.n	800baf2 <_dtoa_r+0x6c2>
 800bad0:	4620      	mov	r0, r4
 800bad2:	ee18 1a10 	vmov	r1, s16
 800bad6:	f000 fae9 	bl	800c0ac <_Bfree>
 800bada:	2300      	movs	r3, #0
 800badc:	9800      	ldr	r0, [sp, #0]
 800bade:	702b      	strb	r3, [r5, #0]
 800bae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bae2:	3001      	adds	r0, #1
 800bae4:	6018      	str	r0, [r3, #0]
 800bae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f43f acf1 	beq.w	800b4d0 <_dtoa_r+0xa0>
 800baee:	601d      	str	r5, [r3, #0]
 800baf0:	e4ee      	b.n	800b4d0 <_dtoa_r+0xa0>
 800baf2:	9f00      	ldr	r7, [sp, #0]
 800baf4:	462b      	mov	r3, r5
 800baf6:	461d      	mov	r5, r3
 800baf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bafc:	2a39      	cmp	r2, #57	; 0x39
 800bafe:	d106      	bne.n	800bb0e <_dtoa_r+0x6de>
 800bb00:	9a01      	ldr	r2, [sp, #4]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d1f7      	bne.n	800baf6 <_dtoa_r+0x6c6>
 800bb06:	9901      	ldr	r1, [sp, #4]
 800bb08:	2230      	movs	r2, #48	; 0x30
 800bb0a:	3701      	adds	r7, #1
 800bb0c:	700a      	strb	r2, [r1, #0]
 800bb0e:	781a      	ldrb	r2, [r3, #0]
 800bb10:	3201      	adds	r2, #1
 800bb12:	701a      	strb	r2, [r3, #0]
 800bb14:	e790      	b.n	800ba38 <_dtoa_r+0x608>
 800bb16:	4ba6      	ldr	r3, [pc, #664]	; (800bdb0 <_dtoa_r+0x980>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f7f4 fd85 	bl	8000628 <__aeabi_dmul>
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2300      	movs	r3, #0
 800bb22:	4606      	mov	r6, r0
 800bb24:	460f      	mov	r7, r1
 800bb26:	f7f4 ffe7 	bl	8000af8 <__aeabi_dcmpeq>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d09d      	beq.n	800ba6a <_dtoa_r+0x63a>
 800bb2e:	e7cf      	b.n	800bad0 <_dtoa_r+0x6a0>
 800bb30:	9a08      	ldr	r2, [sp, #32]
 800bb32:	2a00      	cmp	r2, #0
 800bb34:	f000 80d7 	beq.w	800bce6 <_dtoa_r+0x8b6>
 800bb38:	9a06      	ldr	r2, [sp, #24]
 800bb3a:	2a01      	cmp	r2, #1
 800bb3c:	f300 80ba 	bgt.w	800bcb4 <_dtoa_r+0x884>
 800bb40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	f000 80b2 	beq.w	800bcac <_dtoa_r+0x87c>
 800bb48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb4c:	9e07      	ldr	r6, [sp, #28]
 800bb4e:	9d04      	ldr	r5, [sp, #16]
 800bb50:	9a04      	ldr	r2, [sp, #16]
 800bb52:	441a      	add	r2, r3
 800bb54:	9204      	str	r2, [sp, #16]
 800bb56:	9a05      	ldr	r2, [sp, #20]
 800bb58:	2101      	movs	r1, #1
 800bb5a:	441a      	add	r2, r3
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	9205      	str	r2, [sp, #20]
 800bb60:	f000 fb5c 	bl	800c21c <__i2b>
 800bb64:	4607      	mov	r7, r0
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	dd0c      	ble.n	800bb84 <_dtoa_r+0x754>
 800bb6a:	9b05      	ldr	r3, [sp, #20]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dd09      	ble.n	800bb84 <_dtoa_r+0x754>
 800bb70:	42ab      	cmp	r3, r5
 800bb72:	9a04      	ldr	r2, [sp, #16]
 800bb74:	bfa8      	it	ge
 800bb76:	462b      	movge	r3, r5
 800bb78:	1ad2      	subs	r2, r2, r3
 800bb7a:	9204      	str	r2, [sp, #16]
 800bb7c:	9a05      	ldr	r2, [sp, #20]
 800bb7e:	1aed      	subs	r5, r5, r3
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	9305      	str	r3, [sp, #20]
 800bb84:	9b07      	ldr	r3, [sp, #28]
 800bb86:	b31b      	cbz	r3, 800bbd0 <_dtoa_r+0x7a0>
 800bb88:	9b08      	ldr	r3, [sp, #32]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 80af 	beq.w	800bcee <_dtoa_r+0x8be>
 800bb90:	2e00      	cmp	r6, #0
 800bb92:	dd13      	ble.n	800bbbc <_dtoa_r+0x78c>
 800bb94:	4639      	mov	r1, r7
 800bb96:	4632      	mov	r2, r6
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 fbff 	bl	800c39c <__pow5mult>
 800bb9e:	ee18 2a10 	vmov	r2, s16
 800bba2:	4601      	mov	r1, r0
 800bba4:	4607      	mov	r7, r0
 800bba6:	4620      	mov	r0, r4
 800bba8:	f000 fb4e 	bl	800c248 <__multiply>
 800bbac:	ee18 1a10 	vmov	r1, s16
 800bbb0:	4680      	mov	r8, r0
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fa7a 	bl	800c0ac <_Bfree>
 800bbb8:	ee08 8a10 	vmov	s16, r8
 800bbbc:	9b07      	ldr	r3, [sp, #28]
 800bbbe:	1b9a      	subs	r2, r3, r6
 800bbc0:	d006      	beq.n	800bbd0 <_dtoa_r+0x7a0>
 800bbc2:	ee18 1a10 	vmov	r1, s16
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f000 fbe8 	bl	800c39c <__pow5mult>
 800bbcc:	ee08 0a10 	vmov	s16, r0
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fb22 	bl	800c21c <__i2b>
 800bbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	4606      	mov	r6, r0
 800bbde:	f340 8088 	ble.w	800bcf2 <_dtoa_r+0x8c2>
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4601      	mov	r1, r0
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 fbd8 	bl	800c39c <__pow5mult>
 800bbec:	9b06      	ldr	r3, [sp, #24]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	4606      	mov	r6, r0
 800bbf2:	f340 8081 	ble.w	800bcf8 <_dtoa_r+0x8c8>
 800bbf6:	f04f 0800 	mov.w	r8, #0
 800bbfa:	6933      	ldr	r3, [r6, #16]
 800bbfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc00:	6918      	ldr	r0, [r3, #16]
 800bc02:	f000 fabb 	bl	800c17c <__hi0bits>
 800bc06:	f1c0 0020 	rsb	r0, r0, #32
 800bc0a:	9b05      	ldr	r3, [sp, #20]
 800bc0c:	4418      	add	r0, r3
 800bc0e:	f010 001f 	ands.w	r0, r0, #31
 800bc12:	f000 8092 	beq.w	800bd3a <_dtoa_r+0x90a>
 800bc16:	f1c0 0320 	rsb	r3, r0, #32
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	f340 808a 	ble.w	800bd34 <_dtoa_r+0x904>
 800bc20:	f1c0 001c 	rsb	r0, r0, #28
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	4403      	add	r3, r0
 800bc28:	9304      	str	r3, [sp, #16]
 800bc2a:	9b05      	ldr	r3, [sp, #20]
 800bc2c:	4403      	add	r3, r0
 800bc2e:	4405      	add	r5, r0
 800bc30:	9305      	str	r3, [sp, #20]
 800bc32:	9b04      	ldr	r3, [sp, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dd07      	ble.n	800bc48 <_dtoa_r+0x818>
 800bc38:	ee18 1a10 	vmov	r1, s16
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 fc06 	bl	800c450 <__lshift>
 800bc44:	ee08 0a10 	vmov	s16, r0
 800bc48:	9b05      	ldr	r3, [sp, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	dd05      	ble.n	800bc5a <_dtoa_r+0x82a>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	461a      	mov	r2, r3
 800bc52:	4620      	mov	r0, r4
 800bc54:	f000 fbfc 	bl	800c450 <__lshift>
 800bc58:	4606      	mov	r6, r0
 800bc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d06e      	beq.n	800bd3e <_dtoa_r+0x90e>
 800bc60:	ee18 0a10 	vmov	r0, s16
 800bc64:	4631      	mov	r1, r6
 800bc66:	f000 fc63 	bl	800c530 <__mcmp>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	da67      	bge.n	800bd3e <_dtoa_r+0x90e>
 800bc6e:	9b00      	ldr	r3, [sp, #0]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	ee18 1a10 	vmov	r1, s16
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	220a      	movs	r2, #10
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f000 fa37 	bl	800c0f0 <__multadd>
 800bc82:	9b08      	ldr	r3, [sp, #32]
 800bc84:	ee08 0a10 	vmov	s16, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 81b1 	beq.w	800bff0 <_dtoa_r+0xbc0>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4639      	mov	r1, r7
 800bc92:	220a      	movs	r2, #10
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 fa2b 	bl	800c0f0 <__multadd>
 800bc9a:	9b02      	ldr	r3, [sp, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	4607      	mov	r7, r0
 800bca0:	f300 808e 	bgt.w	800bdc0 <_dtoa_r+0x990>
 800bca4:	9b06      	ldr	r3, [sp, #24]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	dc51      	bgt.n	800bd4e <_dtoa_r+0x91e>
 800bcaa:	e089      	b.n	800bdc0 <_dtoa_r+0x990>
 800bcac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bcb2:	e74b      	b.n	800bb4c <_dtoa_r+0x71c>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	1e5e      	subs	r6, r3, #1
 800bcb8:	9b07      	ldr	r3, [sp, #28]
 800bcba:	42b3      	cmp	r3, r6
 800bcbc:	bfbf      	itttt	lt
 800bcbe:	9b07      	ldrlt	r3, [sp, #28]
 800bcc0:	9607      	strlt	r6, [sp, #28]
 800bcc2:	1af2      	sublt	r2, r6, r3
 800bcc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bcc6:	bfb6      	itet	lt
 800bcc8:	189b      	addlt	r3, r3, r2
 800bcca:	1b9e      	subge	r6, r3, r6
 800bccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	bfb8      	it	lt
 800bcd2:	2600      	movlt	r6, #0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bfb7      	itett	lt
 800bcd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bcdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bce0:	1a9d      	sublt	r5, r3, r2
 800bce2:	2300      	movlt	r3, #0
 800bce4:	e734      	b.n	800bb50 <_dtoa_r+0x720>
 800bce6:	9e07      	ldr	r6, [sp, #28]
 800bce8:	9d04      	ldr	r5, [sp, #16]
 800bcea:	9f08      	ldr	r7, [sp, #32]
 800bcec:	e73b      	b.n	800bb66 <_dtoa_r+0x736>
 800bcee:	9a07      	ldr	r2, [sp, #28]
 800bcf0:	e767      	b.n	800bbc2 <_dtoa_r+0x792>
 800bcf2:	9b06      	ldr	r3, [sp, #24]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	dc18      	bgt.n	800bd2a <_dtoa_r+0x8fa>
 800bcf8:	f1ba 0f00 	cmp.w	sl, #0
 800bcfc:	d115      	bne.n	800bd2a <_dtoa_r+0x8fa>
 800bcfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd02:	b993      	cbnz	r3, 800bd2a <_dtoa_r+0x8fa>
 800bd04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd08:	0d1b      	lsrs	r3, r3, #20
 800bd0a:	051b      	lsls	r3, r3, #20
 800bd0c:	b183      	cbz	r3, 800bd30 <_dtoa_r+0x900>
 800bd0e:	9b04      	ldr	r3, [sp, #16]
 800bd10:	3301      	adds	r3, #1
 800bd12:	9304      	str	r3, [sp, #16]
 800bd14:	9b05      	ldr	r3, [sp, #20]
 800bd16:	3301      	adds	r3, #1
 800bd18:	9305      	str	r3, [sp, #20]
 800bd1a:	f04f 0801 	mov.w	r8, #1
 800bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	f47f af6a 	bne.w	800bbfa <_dtoa_r+0x7ca>
 800bd26:	2001      	movs	r0, #1
 800bd28:	e76f      	b.n	800bc0a <_dtoa_r+0x7da>
 800bd2a:	f04f 0800 	mov.w	r8, #0
 800bd2e:	e7f6      	b.n	800bd1e <_dtoa_r+0x8ee>
 800bd30:	4698      	mov	r8, r3
 800bd32:	e7f4      	b.n	800bd1e <_dtoa_r+0x8ee>
 800bd34:	f43f af7d 	beq.w	800bc32 <_dtoa_r+0x802>
 800bd38:	4618      	mov	r0, r3
 800bd3a:	301c      	adds	r0, #28
 800bd3c:	e772      	b.n	800bc24 <_dtoa_r+0x7f4>
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dc37      	bgt.n	800bdb4 <_dtoa_r+0x984>
 800bd44:	9b06      	ldr	r3, [sp, #24]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	dd34      	ble.n	800bdb4 <_dtoa_r+0x984>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	9302      	str	r3, [sp, #8]
 800bd4e:	9b02      	ldr	r3, [sp, #8]
 800bd50:	b96b      	cbnz	r3, 800bd6e <_dtoa_r+0x93e>
 800bd52:	4631      	mov	r1, r6
 800bd54:	2205      	movs	r2, #5
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 f9ca 	bl	800c0f0 <__multadd>
 800bd5c:	4601      	mov	r1, r0
 800bd5e:	4606      	mov	r6, r0
 800bd60:	ee18 0a10 	vmov	r0, s16
 800bd64:	f000 fbe4 	bl	800c530 <__mcmp>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	f73f adbb 	bgt.w	800b8e4 <_dtoa_r+0x4b4>
 800bd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd70:	9d01      	ldr	r5, [sp, #4]
 800bd72:	43db      	mvns	r3, r3
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	f04f 0800 	mov.w	r8, #0
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 f995 	bl	800c0ac <_Bfree>
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	f43f aea4 	beq.w	800bad0 <_dtoa_r+0x6a0>
 800bd88:	f1b8 0f00 	cmp.w	r8, #0
 800bd8c:	d005      	beq.n	800bd9a <_dtoa_r+0x96a>
 800bd8e:	45b8      	cmp	r8, r7
 800bd90:	d003      	beq.n	800bd9a <_dtoa_r+0x96a>
 800bd92:	4641      	mov	r1, r8
 800bd94:	4620      	mov	r0, r4
 800bd96:	f000 f989 	bl	800c0ac <_Bfree>
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f000 f985 	bl	800c0ac <_Bfree>
 800bda2:	e695      	b.n	800bad0 <_dtoa_r+0x6a0>
 800bda4:	2600      	movs	r6, #0
 800bda6:	4637      	mov	r7, r6
 800bda8:	e7e1      	b.n	800bd6e <_dtoa_r+0x93e>
 800bdaa:	9700      	str	r7, [sp, #0]
 800bdac:	4637      	mov	r7, r6
 800bdae:	e599      	b.n	800b8e4 <_dtoa_r+0x4b4>
 800bdb0:	40240000 	.word	0x40240000
 800bdb4:	9b08      	ldr	r3, [sp, #32]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 80ca 	beq.w	800bf50 <_dtoa_r+0xb20>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	9302      	str	r3, [sp, #8]
 800bdc0:	2d00      	cmp	r5, #0
 800bdc2:	dd05      	ble.n	800bdd0 <_dtoa_r+0x9a0>
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	462a      	mov	r2, r5
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fb41 	bl	800c450 <__lshift>
 800bdce:	4607      	mov	r7, r0
 800bdd0:	f1b8 0f00 	cmp.w	r8, #0
 800bdd4:	d05b      	beq.n	800be8e <_dtoa_r+0xa5e>
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f000 f927 	bl	800c02c <_Balloc>
 800bdde:	4605      	mov	r5, r0
 800bde0:	b928      	cbnz	r0, 800bdee <_dtoa_r+0x9be>
 800bde2:	4b87      	ldr	r3, [pc, #540]	; (800c000 <_dtoa_r+0xbd0>)
 800bde4:	4602      	mov	r2, r0
 800bde6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bdea:	f7ff bb3b 	b.w	800b464 <_dtoa_r+0x34>
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	3202      	adds	r2, #2
 800bdf2:	0092      	lsls	r2, r2, #2
 800bdf4:	f107 010c 	add.w	r1, r7, #12
 800bdf8:	300c      	adds	r0, #12
 800bdfa:	f7fe fd1b 	bl	800a834 <memcpy>
 800bdfe:	2201      	movs	r2, #1
 800be00:	4629      	mov	r1, r5
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fb24 	bl	800c450 <__lshift>
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	f103 0901 	add.w	r9, r3, #1
 800be0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800be12:	4413      	add	r3, r2
 800be14:	9305      	str	r3, [sp, #20]
 800be16:	f00a 0301 	and.w	r3, sl, #1
 800be1a:	46b8      	mov	r8, r7
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	4607      	mov	r7, r0
 800be20:	4631      	mov	r1, r6
 800be22:	ee18 0a10 	vmov	r0, s16
 800be26:	f7ff fa75 	bl	800b314 <quorem>
 800be2a:	4641      	mov	r1, r8
 800be2c:	9002      	str	r0, [sp, #8]
 800be2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be32:	ee18 0a10 	vmov	r0, s16
 800be36:	f000 fb7b 	bl	800c530 <__mcmp>
 800be3a:	463a      	mov	r2, r7
 800be3c:	9003      	str	r0, [sp, #12]
 800be3e:	4631      	mov	r1, r6
 800be40:	4620      	mov	r0, r4
 800be42:	f000 fb91 	bl	800c568 <__mdiff>
 800be46:	68c2      	ldr	r2, [r0, #12]
 800be48:	f109 3bff 	add.w	fp, r9, #4294967295
 800be4c:	4605      	mov	r5, r0
 800be4e:	bb02      	cbnz	r2, 800be92 <_dtoa_r+0xa62>
 800be50:	4601      	mov	r1, r0
 800be52:	ee18 0a10 	vmov	r0, s16
 800be56:	f000 fb6b 	bl	800c530 <__mcmp>
 800be5a:	4602      	mov	r2, r0
 800be5c:	4629      	mov	r1, r5
 800be5e:	4620      	mov	r0, r4
 800be60:	9207      	str	r2, [sp, #28]
 800be62:	f000 f923 	bl	800c0ac <_Bfree>
 800be66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800be6a:	ea43 0102 	orr.w	r1, r3, r2
 800be6e:	9b04      	ldr	r3, [sp, #16]
 800be70:	430b      	orrs	r3, r1
 800be72:	464d      	mov	r5, r9
 800be74:	d10f      	bne.n	800be96 <_dtoa_r+0xa66>
 800be76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be7a:	d02a      	beq.n	800bed2 <_dtoa_r+0xaa2>
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	dd02      	ble.n	800be88 <_dtoa_r+0xa58>
 800be82:	9b02      	ldr	r3, [sp, #8]
 800be84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800be88:	f88b a000 	strb.w	sl, [fp]
 800be8c:	e775      	b.n	800bd7a <_dtoa_r+0x94a>
 800be8e:	4638      	mov	r0, r7
 800be90:	e7ba      	b.n	800be08 <_dtoa_r+0x9d8>
 800be92:	2201      	movs	r2, #1
 800be94:	e7e2      	b.n	800be5c <_dtoa_r+0xa2c>
 800be96:	9b03      	ldr	r3, [sp, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	db04      	blt.n	800bea6 <_dtoa_r+0xa76>
 800be9c:	9906      	ldr	r1, [sp, #24]
 800be9e:	430b      	orrs	r3, r1
 800bea0:	9904      	ldr	r1, [sp, #16]
 800bea2:	430b      	orrs	r3, r1
 800bea4:	d122      	bne.n	800beec <_dtoa_r+0xabc>
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	ddee      	ble.n	800be88 <_dtoa_r+0xa58>
 800beaa:	ee18 1a10 	vmov	r1, s16
 800beae:	2201      	movs	r2, #1
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 facd 	bl	800c450 <__lshift>
 800beb6:	4631      	mov	r1, r6
 800beb8:	ee08 0a10 	vmov	s16, r0
 800bebc:	f000 fb38 	bl	800c530 <__mcmp>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	dc03      	bgt.n	800becc <_dtoa_r+0xa9c>
 800bec4:	d1e0      	bne.n	800be88 <_dtoa_r+0xa58>
 800bec6:	f01a 0f01 	tst.w	sl, #1
 800beca:	d0dd      	beq.n	800be88 <_dtoa_r+0xa58>
 800becc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bed0:	d1d7      	bne.n	800be82 <_dtoa_r+0xa52>
 800bed2:	2339      	movs	r3, #57	; 0x39
 800bed4:	f88b 3000 	strb.w	r3, [fp]
 800bed8:	462b      	mov	r3, r5
 800beda:	461d      	mov	r5, r3
 800bedc:	3b01      	subs	r3, #1
 800bede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bee2:	2a39      	cmp	r2, #57	; 0x39
 800bee4:	d071      	beq.n	800bfca <_dtoa_r+0xb9a>
 800bee6:	3201      	adds	r2, #1
 800bee8:	701a      	strb	r2, [r3, #0]
 800beea:	e746      	b.n	800bd7a <_dtoa_r+0x94a>
 800beec:	2a00      	cmp	r2, #0
 800beee:	dd07      	ble.n	800bf00 <_dtoa_r+0xad0>
 800bef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bef4:	d0ed      	beq.n	800bed2 <_dtoa_r+0xaa2>
 800bef6:	f10a 0301 	add.w	r3, sl, #1
 800befa:	f88b 3000 	strb.w	r3, [fp]
 800befe:	e73c      	b.n	800bd7a <_dtoa_r+0x94a>
 800bf00:	9b05      	ldr	r3, [sp, #20]
 800bf02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bf06:	4599      	cmp	r9, r3
 800bf08:	d047      	beq.n	800bf9a <_dtoa_r+0xb6a>
 800bf0a:	ee18 1a10 	vmov	r1, s16
 800bf0e:	2300      	movs	r3, #0
 800bf10:	220a      	movs	r2, #10
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 f8ec 	bl	800c0f0 <__multadd>
 800bf18:	45b8      	cmp	r8, r7
 800bf1a:	ee08 0a10 	vmov	s16, r0
 800bf1e:	f04f 0300 	mov.w	r3, #0
 800bf22:	f04f 020a 	mov.w	r2, #10
 800bf26:	4641      	mov	r1, r8
 800bf28:	4620      	mov	r0, r4
 800bf2a:	d106      	bne.n	800bf3a <_dtoa_r+0xb0a>
 800bf2c:	f000 f8e0 	bl	800c0f0 <__multadd>
 800bf30:	4680      	mov	r8, r0
 800bf32:	4607      	mov	r7, r0
 800bf34:	f109 0901 	add.w	r9, r9, #1
 800bf38:	e772      	b.n	800be20 <_dtoa_r+0x9f0>
 800bf3a:	f000 f8d9 	bl	800c0f0 <__multadd>
 800bf3e:	4639      	mov	r1, r7
 800bf40:	4680      	mov	r8, r0
 800bf42:	2300      	movs	r3, #0
 800bf44:	220a      	movs	r2, #10
 800bf46:	4620      	mov	r0, r4
 800bf48:	f000 f8d2 	bl	800c0f0 <__multadd>
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	e7f1      	b.n	800bf34 <_dtoa_r+0xb04>
 800bf50:	9b03      	ldr	r3, [sp, #12]
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	9d01      	ldr	r5, [sp, #4]
 800bf56:	ee18 0a10 	vmov	r0, s16
 800bf5a:	4631      	mov	r1, r6
 800bf5c:	f7ff f9da 	bl	800b314 <quorem>
 800bf60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	f805 ab01 	strb.w	sl, [r5], #1
 800bf6a:	1aea      	subs	r2, r5, r3
 800bf6c:	9b02      	ldr	r3, [sp, #8]
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	dd09      	ble.n	800bf86 <_dtoa_r+0xb56>
 800bf72:	ee18 1a10 	vmov	r1, s16
 800bf76:	2300      	movs	r3, #0
 800bf78:	220a      	movs	r2, #10
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f000 f8b8 	bl	800c0f0 <__multadd>
 800bf80:	ee08 0a10 	vmov	s16, r0
 800bf84:	e7e7      	b.n	800bf56 <_dtoa_r+0xb26>
 800bf86:	9b02      	ldr	r3, [sp, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	bfc8      	it	gt
 800bf8c:	461d      	movgt	r5, r3
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	bfd8      	it	le
 800bf92:	2501      	movle	r5, #1
 800bf94:	441d      	add	r5, r3
 800bf96:	f04f 0800 	mov.w	r8, #0
 800bf9a:	ee18 1a10 	vmov	r1, s16
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f000 fa55 	bl	800c450 <__lshift>
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	ee08 0a10 	vmov	s16, r0
 800bfac:	f000 fac0 	bl	800c530 <__mcmp>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	dc91      	bgt.n	800bed8 <_dtoa_r+0xaa8>
 800bfb4:	d102      	bne.n	800bfbc <_dtoa_r+0xb8c>
 800bfb6:	f01a 0f01 	tst.w	sl, #1
 800bfba:	d18d      	bne.n	800bed8 <_dtoa_r+0xaa8>
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	461d      	mov	r5, r3
 800bfc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfc4:	2a30      	cmp	r2, #48	; 0x30
 800bfc6:	d0fa      	beq.n	800bfbe <_dtoa_r+0xb8e>
 800bfc8:	e6d7      	b.n	800bd7a <_dtoa_r+0x94a>
 800bfca:	9a01      	ldr	r2, [sp, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d184      	bne.n	800beda <_dtoa_r+0xaaa>
 800bfd0:	9b00      	ldr	r3, [sp, #0]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	2331      	movs	r3, #49	; 0x31
 800bfd8:	7013      	strb	r3, [r2, #0]
 800bfda:	e6ce      	b.n	800bd7a <_dtoa_r+0x94a>
 800bfdc:	4b09      	ldr	r3, [pc, #36]	; (800c004 <_dtoa_r+0xbd4>)
 800bfde:	f7ff ba95 	b.w	800b50c <_dtoa_r+0xdc>
 800bfe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f47f aa6e 	bne.w	800b4c6 <_dtoa_r+0x96>
 800bfea:	4b07      	ldr	r3, [pc, #28]	; (800c008 <_dtoa_r+0xbd8>)
 800bfec:	f7ff ba8e 	b.w	800b50c <_dtoa_r+0xdc>
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dcae      	bgt.n	800bf54 <_dtoa_r+0xb24>
 800bff6:	9b06      	ldr	r3, [sp, #24]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	f73f aea8 	bgt.w	800bd4e <_dtoa_r+0x91e>
 800bffe:	e7a9      	b.n	800bf54 <_dtoa_r+0xb24>
 800c000:	0800f9b7 	.word	0x0800f9b7
 800c004:	0800f914 	.word	0x0800f914
 800c008:	0800f938 	.word	0x0800f938

0800c00c <_localeconv_r>:
 800c00c:	4800      	ldr	r0, [pc, #0]	; (800c010 <_localeconv_r+0x4>)
 800c00e:	4770      	bx	lr
 800c010:	20000178 	.word	0x20000178

0800c014 <__malloc_lock>:
 800c014:	4801      	ldr	r0, [pc, #4]	; (800c01c <__malloc_lock+0x8>)
 800c016:	f000 bbd4 	b.w	800c7c2 <__retarget_lock_acquire_recursive>
 800c01a:	bf00      	nop
 800c01c:	200133e8 	.word	0x200133e8

0800c020 <__malloc_unlock>:
 800c020:	4801      	ldr	r0, [pc, #4]	; (800c028 <__malloc_unlock+0x8>)
 800c022:	f000 bbcf 	b.w	800c7c4 <__retarget_lock_release_recursive>
 800c026:	bf00      	nop
 800c028:	200133e8 	.word	0x200133e8

0800c02c <_Balloc>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	b976      	cbnz	r6, 800c054 <_Balloc+0x28>
 800c036:	2010      	movs	r0, #16
 800c038:	f7fe fbf4 	bl	800a824 <malloc>
 800c03c:	4602      	mov	r2, r0
 800c03e:	6260      	str	r0, [r4, #36]	; 0x24
 800c040:	b920      	cbnz	r0, 800c04c <_Balloc+0x20>
 800c042:	4b18      	ldr	r3, [pc, #96]	; (800c0a4 <_Balloc+0x78>)
 800c044:	4818      	ldr	r0, [pc, #96]	; (800c0a8 <_Balloc+0x7c>)
 800c046:	2166      	movs	r1, #102	; 0x66
 800c048:	f000 fb8a 	bl	800c760 <__assert_func>
 800c04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c050:	6006      	str	r6, [r0, #0]
 800c052:	60c6      	str	r6, [r0, #12]
 800c054:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c056:	68f3      	ldr	r3, [r6, #12]
 800c058:	b183      	cbz	r3, 800c07c <_Balloc+0x50>
 800c05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c062:	b9b8      	cbnz	r0, 800c094 <_Balloc+0x68>
 800c064:	2101      	movs	r1, #1
 800c066:	fa01 f605 	lsl.w	r6, r1, r5
 800c06a:	1d72      	adds	r2, r6, #5
 800c06c:	0092      	lsls	r2, r2, #2
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fb60 	bl	800c734 <_calloc_r>
 800c074:	b160      	cbz	r0, 800c090 <_Balloc+0x64>
 800c076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c07a:	e00e      	b.n	800c09a <_Balloc+0x6e>
 800c07c:	2221      	movs	r2, #33	; 0x21
 800c07e:	2104      	movs	r1, #4
 800c080:	4620      	mov	r0, r4
 800c082:	f000 fb57 	bl	800c734 <_calloc_r>
 800c086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c088:	60f0      	str	r0, [r6, #12]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e4      	bne.n	800c05a <_Balloc+0x2e>
 800c090:	2000      	movs	r0, #0
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	6802      	ldr	r2, [r0, #0]
 800c096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c09a:	2300      	movs	r3, #0
 800c09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0a0:	e7f7      	b.n	800c092 <_Balloc+0x66>
 800c0a2:	bf00      	nop
 800c0a4:	0800f945 	.word	0x0800f945
 800c0a8:	0800f9c8 	.word	0x0800f9c8

0800c0ac <_Bfree>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	b976      	cbnz	r6, 800c0d4 <_Bfree+0x28>
 800c0b6:	2010      	movs	r0, #16
 800c0b8:	f7fe fbb4 	bl	800a824 <malloc>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	6268      	str	r0, [r5, #36]	; 0x24
 800c0c0:	b920      	cbnz	r0, 800c0cc <_Bfree+0x20>
 800c0c2:	4b09      	ldr	r3, [pc, #36]	; (800c0e8 <_Bfree+0x3c>)
 800c0c4:	4809      	ldr	r0, [pc, #36]	; (800c0ec <_Bfree+0x40>)
 800c0c6:	218a      	movs	r1, #138	; 0x8a
 800c0c8:	f000 fb4a 	bl	800c760 <__assert_func>
 800c0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0d0:	6006      	str	r6, [r0, #0]
 800c0d2:	60c6      	str	r6, [r0, #12]
 800c0d4:	b13c      	cbz	r4, 800c0e6 <_Bfree+0x3a>
 800c0d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c0d8:	6862      	ldr	r2, [r4, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0e0:	6021      	str	r1, [r4, #0]
 800c0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	0800f945 	.word	0x0800f945
 800c0ec:	0800f9c8 	.word	0x0800f9c8

0800c0f0 <__multadd>:
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	690d      	ldr	r5, [r1, #16]
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	461e      	mov	r6, r3
 800c0fc:	f101 0c14 	add.w	ip, r1, #20
 800c100:	2000      	movs	r0, #0
 800c102:	f8dc 3000 	ldr.w	r3, [ip]
 800c106:	b299      	uxth	r1, r3
 800c108:	fb02 6101 	mla	r1, r2, r1, r6
 800c10c:	0c1e      	lsrs	r6, r3, #16
 800c10e:	0c0b      	lsrs	r3, r1, #16
 800c110:	fb02 3306 	mla	r3, r2, r6, r3
 800c114:	b289      	uxth	r1, r1
 800c116:	3001      	adds	r0, #1
 800c118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c11c:	4285      	cmp	r5, r0
 800c11e:	f84c 1b04 	str.w	r1, [ip], #4
 800c122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c126:	dcec      	bgt.n	800c102 <__multadd+0x12>
 800c128:	b30e      	cbz	r6, 800c16e <__multadd+0x7e>
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	dc19      	bgt.n	800c164 <__multadd+0x74>
 800c130:	6861      	ldr	r1, [r4, #4]
 800c132:	4638      	mov	r0, r7
 800c134:	3101      	adds	r1, #1
 800c136:	f7ff ff79 	bl	800c02c <_Balloc>
 800c13a:	4680      	mov	r8, r0
 800c13c:	b928      	cbnz	r0, 800c14a <__multadd+0x5a>
 800c13e:	4602      	mov	r2, r0
 800c140:	4b0c      	ldr	r3, [pc, #48]	; (800c174 <__multadd+0x84>)
 800c142:	480d      	ldr	r0, [pc, #52]	; (800c178 <__multadd+0x88>)
 800c144:	21b5      	movs	r1, #181	; 0xb5
 800c146:	f000 fb0b 	bl	800c760 <__assert_func>
 800c14a:	6922      	ldr	r2, [r4, #16]
 800c14c:	3202      	adds	r2, #2
 800c14e:	f104 010c 	add.w	r1, r4, #12
 800c152:	0092      	lsls	r2, r2, #2
 800c154:	300c      	adds	r0, #12
 800c156:	f7fe fb6d 	bl	800a834 <memcpy>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7ff ffa5 	bl	800c0ac <_Bfree>
 800c162:	4644      	mov	r4, r8
 800c164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c168:	3501      	adds	r5, #1
 800c16a:	615e      	str	r6, [r3, #20]
 800c16c:	6125      	str	r5, [r4, #16]
 800c16e:	4620      	mov	r0, r4
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	0800f9b7 	.word	0x0800f9b7
 800c178:	0800f9c8 	.word	0x0800f9c8

0800c17c <__hi0bits>:
 800c17c:	0c03      	lsrs	r3, r0, #16
 800c17e:	041b      	lsls	r3, r3, #16
 800c180:	b9d3      	cbnz	r3, 800c1b8 <__hi0bits+0x3c>
 800c182:	0400      	lsls	r0, r0, #16
 800c184:	2310      	movs	r3, #16
 800c186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c18a:	bf04      	itt	eq
 800c18c:	0200      	lsleq	r0, r0, #8
 800c18e:	3308      	addeq	r3, #8
 800c190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c194:	bf04      	itt	eq
 800c196:	0100      	lsleq	r0, r0, #4
 800c198:	3304      	addeq	r3, #4
 800c19a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c19e:	bf04      	itt	eq
 800c1a0:	0080      	lsleq	r0, r0, #2
 800c1a2:	3302      	addeq	r3, #2
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	db05      	blt.n	800c1b4 <__hi0bits+0x38>
 800c1a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1ac:	f103 0301 	add.w	r3, r3, #1
 800c1b0:	bf08      	it	eq
 800c1b2:	2320      	moveq	r3, #32
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	4770      	bx	lr
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e7e4      	b.n	800c186 <__hi0bits+0xa>

0800c1bc <__lo0bits>:
 800c1bc:	6803      	ldr	r3, [r0, #0]
 800c1be:	f013 0207 	ands.w	r2, r3, #7
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	d00b      	beq.n	800c1de <__lo0bits+0x22>
 800c1c6:	07da      	lsls	r2, r3, #31
 800c1c8:	d423      	bmi.n	800c212 <__lo0bits+0x56>
 800c1ca:	0798      	lsls	r0, r3, #30
 800c1cc:	bf49      	itett	mi
 800c1ce:	085b      	lsrmi	r3, r3, #1
 800c1d0:	089b      	lsrpl	r3, r3, #2
 800c1d2:	2001      	movmi	r0, #1
 800c1d4:	600b      	strmi	r3, [r1, #0]
 800c1d6:	bf5c      	itt	pl
 800c1d8:	600b      	strpl	r3, [r1, #0]
 800c1da:	2002      	movpl	r0, #2
 800c1dc:	4770      	bx	lr
 800c1de:	b298      	uxth	r0, r3
 800c1e0:	b9a8      	cbnz	r0, 800c20e <__lo0bits+0x52>
 800c1e2:	0c1b      	lsrs	r3, r3, #16
 800c1e4:	2010      	movs	r0, #16
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	b90a      	cbnz	r2, 800c1ee <__lo0bits+0x32>
 800c1ea:	3008      	adds	r0, #8
 800c1ec:	0a1b      	lsrs	r3, r3, #8
 800c1ee:	071a      	lsls	r2, r3, #28
 800c1f0:	bf04      	itt	eq
 800c1f2:	091b      	lsreq	r3, r3, #4
 800c1f4:	3004      	addeq	r0, #4
 800c1f6:	079a      	lsls	r2, r3, #30
 800c1f8:	bf04      	itt	eq
 800c1fa:	089b      	lsreq	r3, r3, #2
 800c1fc:	3002      	addeq	r0, #2
 800c1fe:	07da      	lsls	r2, r3, #31
 800c200:	d403      	bmi.n	800c20a <__lo0bits+0x4e>
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	f100 0001 	add.w	r0, r0, #1
 800c208:	d005      	beq.n	800c216 <__lo0bits+0x5a>
 800c20a:	600b      	str	r3, [r1, #0]
 800c20c:	4770      	bx	lr
 800c20e:	4610      	mov	r0, r2
 800c210:	e7e9      	b.n	800c1e6 <__lo0bits+0x2a>
 800c212:	2000      	movs	r0, #0
 800c214:	4770      	bx	lr
 800c216:	2020      	movs	r0, #32
 800c218:	4770      	bx	lr
	...

0800c21c <__i2b>:
 800c21c:	b510      	push	{r4, lr}
 800c21e:	460c      	mov	r4, r1
 800c220:	2101      	movs	r1, #1
 800c222:	f7ff ff03 	bl	800c02c <_Balloc>
 800c226:	4602      	mov	r2, r0
 800c228:	b928      	cbnz	r0, 800c236 <__i2b+0x1a>
 800c22a:	4b05      	ldr	r3, [pc, #20]	; (800c240 <__i2b+0x24>)
 800c22c:	4805      	ldr	r0, [pc, #20]	; (800c244 <__i2b+0x28>)
 800c22e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c232:	f000 fa95 	bl	800c760 <__assert_func>
 800c236:	2301      	movs	r3, #1
 800c238:	6144      	str	r4, [r0, #20]
 800c23a:	6103      	str	r3, [r0, #16]
 800c23c:	bd10      	pop	{r4, pc}
 800c23e:	bf00      	nop
 800c240:	0800f9b7 	.word	0x0800f9b7
 800c244:	0800f9c8 	.word	0x0800f9c8

0800c248 <__multiply>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	4691      	mov	r9, r2
 800c24e:	690a      	ldr	r2, [r1, #16]
 800c250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c254:	429a      	cmp	r2, r3
 800c256:	bfb8      	it	lt
 800c258:	460b      	movlt	r3, r1
 800c25a:	460c      	mov	r4, r1
 800c25c:	bfbc      	itt	lt
 800c25e:	464c      	movlt	r4, r9
 800c260:	4699      	movlt	r9, r3
 800c262:	6927      	ldr	r7, [r4, #16]
 800c264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c268:	68a3      	ldr	r3, [r4, #8]
 800c26a:	6861      	ldr	r1, [r4, #4]
 800c26c:	eb07 060a 	add.w	r6, r7, sl
 800c270:	42b3      	cmp	r3, r6
 800c272:	b085      	sub	sp, #20
 800c274:	bfb8      	it	lt
 800c276:	3101      	addlt	r1, #1
 800c278:	f7ff fed8 	bl	800c02c <_Balloc>
 800c27c:	b930      	cbnz	r0, 800c28c <__multiply+0x44>
 800c27e:	4602      	mov	r2, r0
 800c280:	4b44      	ldr	r3, [pc, #272]	; (800c394 <__multiply+0x14c>)
 800c282:	4845      	ldr	r0, [pc, #276]	; (800c398 <__multiply+0x150>)
 800c284:	f240 115d 	movw	r1, #349	; 0x15d
 800c288:	f000 fa6a 	bl	800c760 <__assert_func>
 800c28c:	f100 0514 	add.w	r5, r0, #20
 800c290:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c294:	462b      	mov	r3, r5
 800c296:	2200      	movs	r2, #0
 800c298:	4543      	cmp	r3, r8
 800c29a:	d321      	bcc.n	800c2e0 <__multiply+0x98>
 800c29c:	f104 0314 	add.w	r3, r4, #20
 800c2a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2a4:	f109 0314 	add.w	r3, r9, #20
 800c2a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2ac:	9202      	str	r2, [sp, #8]
 800c2ae:	1b3a      	subs	r2, r7, r4
 800c2b0:	3a15      	subs	r2, #21
 800c2b2:	f022 0203 	bic.w	r2, r2, #3
 800c2b6:	3204      	adds	r2, #4
 800c2b8:	f104 0115 	add.w	r1, r4, #21
 800c2bc:	428f      	cmp	r7, r1
 800c2be:	bf38      	it	cc
 800c2c0:	2204      	movcc	r2, #4
 800c2c2:	9201      	str	r2, [sp, #4]
 800c2c4:	9a02      	ldr	r2, [sp, #8]
 800c2c6:	9303      	str	r3, [sp, #12]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d80c      	bhi.n	800c2e6 <__multiply+0x9e>
 800c2cc:	2e00      	cmp	r6, #0
 800c2ce:	dd03      	ble.n	800c2d8 <__multiply+0x90>
 800c2d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d05a      	beq.n	800c38e <__multiply+0x146>
 800c2d8:	6106      	str	r6, [r0, #16]
 800c2da:	b005      	add	sp, #20
 800c2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e0:	f843 2b04 	str.w	r2, [r3], #4
 800c2e4:	e7d8      	b.n	800c298 <__multiply+0x50>
 800c2e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2ea:	f1ba 0f00 	cmp.w	sl, #0
 800c2ee:	d024      	beq.n	800c33a <__multiply+0xf2>
 800c2f0:	f104 0e14 	add.w	lr, r4, #20
 800c2f4:	46a9      	mov	r9, r5
 800c2f6:	f04f 0c00 	mov.w	ip, #0
 800c2fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2fe:	f8d9 1000 	ldr.w	r1, [r9]
 800c302:	fa1f fb82 	uxth.w	fp, r2
 800c306:	b289      	uxth	r1, r1
 800c308:	fb0a 110b 	mla	r1, sl, fp, r1
 800c30c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c310:	f8d9 2000 	ldr.w	r2, [r9]
 800c314:	4461      	add	r1, ip
 800c316:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c31a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c31e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c322:	b289      	uxth	r1, r1
 800c324:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c328:	4577      	cmp	r7, lr
 800c32a:	f849 1b04 	str.w	r1, [r9], #4
 800c32e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c332:	d8e2      	bhi.n	800c2fa <__multiply+0xb2>
 800c334:	9a01      	ldr	r2, [sp, #4]
 800c336:	f845 c002 	str.w	ip, [r5, r2]
 800c33a:	9a03      	ldr	r2, [sp, #12]
 800c33c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c340:	3304      	adds	r3, #4
 800c342:	f1b9 0f00 	cmp.w	r9, #0
 800c346:	d020      	beq.n	800c38a <__multiply+0x142>
 800c348:	6829      	ldr	r1, [r5, #0]
 800c34a:	f104 0c14 	add.w	ip, r4, #20
 800c34e:	46ae      	mov	lr, r5
 800c350:	f04f 0a00 	mov.w	sl, #0
 800c354:	f8bc b000 	ldrh.w	fp, [ip]
 800c358:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c35c:	fb09 220b 	mla	r2, r9, fp, r2
 800c360:	4492      	add	sl, r2
 800c362:	b289      	uxth	r1, r1
 800c364:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c368:	f84e 1b04 	str.w	r1, [lr], #4
 800c36c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c370:	f8be 1000 	ldrh.w	r1, [lr]
 800c374:	0c12      	lsrs	r2, r2, #16
 800c376:	fb09 1102 	mla	r1, r9, r2, r1
 800c37a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c37e:	4567      	cmp	r7, ip
 800c380:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c384:	d8e6      	bhi.n	800c354 <__multiply+0x10c>
 800c386:	9a01      	ldr	r2, [sp, #4]
 800c388:	50a9      	str	r1, [r5, r2]
 800c38a:	3504      	adds	r5, #4
 800c38c:	e79a      	b.n	800c2c4 <__multiply+0x7c>
 800c38e:	3e01      	subs	r6, #1
 800c390:	e79c      	b.n	800c2cc <__multiply+0x84>
 800c392:	bf00      	nop
 800c394:	0800f9b7 	.word	0x0800f9b7
 800c398:	0800f9c8 	.word	0x0800f9c8

0800c39c <__pow5mult>:
 800c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a0:	4615      	mov	r5, r2
 800c3a2:	f012 0203 	ands.w	r2, r2, #3
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	d007      	beq.n	800c3bc <__pow5mult+0x20>
 800c3ac:	4c25      	ldr	r4, [pc, #148]	; (800c444 <__pow5mult+0xa8>)
 800c3ae:	3a01      	subs	r2, #1
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3b6:	f7ff fe9b 	bl	800c0f0 <__multadd>
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	10ad      	asrs	r5, r5, #2
 800c3be:	d03d      	beq.n	800c43c <__pow5mult+0xa0>
 800c3c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c3c2:	b97c      	cbnz	r4, 800c3e4 <__pow5mult+0x48>
 800c3c4:	2010      	movs	r0, #16
 800c3c6:	f7fe fa2d 	bl	800a824 <malloc>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	6270      	str	r0, [r6, #36]	; 0x24
 800c3ce:	b928      	cbnz	r0, 800c3dc <__pow5mult+0x40>
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	; (800c448 <__pow5mult+0xac>)
 800c3d2:	481e      	ldr	r0, [pc, #120]	; (800c44c <__pow5mult+0xb0>)
 800c3d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c3d8:	f000 f9c2 	bl	800c760 <__assert_func>
 800c3dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3e0:	6004      	str	r4, [r0, #0]
 800c3e2:	60c4      	str	r4, [r0, #12]
 800c3e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c3e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3ec:	b94c      	cbnz	r4, 800c402 <__pow5mult+0x66>
 800c3ee:	f240 2171 	movw	r1, #625	; 0x271
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7ff ff12 	bl	800c21c <__i2b>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3fe:	4604      	mov	r4, r0
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	f04f 0900 	mov.w	r9, #0
 800c406:	07eb      	lsls	r3, r5, #31
 800c408:	d50a      	bpl.n	800c420 <__pow5mult+0x84>
 800c40a:	4639      	mov	r1, r7
 800c40c:	4622      	mov	r2, r4
 800c40e:	4630      	mov	r0, r6
 800c410:	f7ff ff1a 	bl	800c248 <__multiply>
 800c414:	4639      	mov	r1, r7
 800c416:	4680      	mov	r8, r0
 800c418:	4630      	mov	r0, r6
 800c41a:	f7ff fe47 	bl	800c0ac <_Bfree>
 800c41e:	4647      	mov	r7, r8
 800c420:	106d      	asrs	r5, r5, #1
 800c422:	d00b      	beq.n	800c43c <__pow5mult+0xa0>
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	b938      	cbnz	r0, 800c438 <__pow5mult+0x9c>
 800c428:	4622      	mov	r2, r4
 800c42a:	4621      	mov	r1, r4
 800c42c:	4630      	mov	r0, r6
 800c42e:	f7ff ff0b 	bl	800c248 <__multiply>
 800c432:	6020      	str	r0, [r4, #0]
 800c434:	f8c0 9000 	str.w	r9, [r0]
 800c438:	4604      	mov	r4, r0
 800c43a:	e7e4      	b.n	800c406 <__pow5mult+0x6a>
 800c43c:	4638      	mov	r0, r7
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c442:	bf00      	nop
 800c444:	0800fb18 	.word	0x0800fb18
 800c448:	0800f945 	.word	0x0800f945
 800c44c:	0800f9c8 	.word	0x0800f9c8

0800c450 <__lshift>:
 800c450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c454:	460c      	mov	r4, r1
 800c456:	6849      	ldr	r1, [r1, #4]
 800c458:	6923      	ldr	r3, [r4, #16]
 800c45a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	4607      	mov	r7, r0
 800c462:	4691      	mov	r9, r2
 800c464:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c468:	f108 0601 	add.w	r6, r8, #1
 800c46c:	42b3      	cmp	r3, r6
 800c46e:	db0b      	blt.n	800c488 <__lshift+0x38>
 800c470:	4638      	mov	r0, r7
 800c472:	f7ff fddb 	bl	800c02c <_Balloc>
 800c476:	4605      	mov	r5, r0
 800c478:	b948      	cbnz	r0, 800c48e <__lshift+0x3e>
 800c47a:	4602      	mov	r2, r0
 800c47c:	4b2a      	ldr	r3, [pc, #168]	; (800c528 <__lshift+0xd8>)
 800c47e:	482b      	ldr	r0, [pc, #172]	; (800c52c <__lshift+0xdc>)
 800c480:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c484:	f000 f96c 	bl	800c760 <__assert_func>
 800c488:	3101      	adds	r1, #1
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	e7ee      	b.n	800c46c <__lshift+0x1c>
 800c48e:	2300      	movs	r3, #0
 800c490:	f100 0114 	add.w	r1, r0, #20
 800c494:	f100 0210 	add.w	r2, r0, #16
 800c498:	4618      	mov	r0, r3
 800c49a:	4553      	cmp	r3, sl
 800c49c:	db37      	blt.n	800c50e <__lshift+0xbe>
 800c49e:	6920      	ldr	r0, [r4, #16]
 800c4a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4a4:	f104 0314 	add.w	r3, r4, #20
 800c4a8:	f019 091f 	ands.w	r9, r9, #31
 800c4ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4b4:	d02f      	beq.n	800c516 <__lshift+0xc6>
 800c4b6:	f1c9 0e20 	rsb	lr, r9, #32
 800c4ba:	468a      	mov	sl, r1
 800c4bc:	f04f 0c00 	mov.w	ip, #0
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	fa02 f209 	lsl.w	r2, r2, r9
 800c4c6:	ea42 020c 	orr.w	r2, r2, ip
 800c4ca:	f84a 2b04 	str.w	r2, [sl], #4
 800c4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d2:	4298      	cmp	r0, r3
 800c4d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c4d8:	d8f2      	bhi.n	800c4c0 <__lshift+0x70>
 800c4da:	1b03      	subs	r3, r0, r4
 800c4dc:	3b15      	subs	r3, #21
 800c4de:	f023 0303 	bic.w	r3, r3, #3
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	f104 0215 	add.w	r2, r4, #21
 800c4e8:	4290      	cmp	r0, r2
 800c4ea:	bf38      	it	cc
 800c4ec:	2304      	movcc	r3, #4
 800c4ee:	f841 c003 	str.w	ip, [r1, r3]
 800c4f2:	f1bc 0f00 	cmp.w	ip, #0
 800c4f6:	d001      	beq.n	800c4fc <__lshift+0xac>
 800c4f8:	f108 0602 	add.w	r6, r8, #2
 800c4fc:	3e01      	subs	r6, #1
 800c4fe:	4638      	mov	r0, r7
 800c500:	612e      	str	r6, [r5, #16]
 800c502:	4621      	mov	r1, r4
 800c504:	f7ff fdd2 	bl	800c0ac <_Bfree>
 800c508:	4628      	mov	r0, r5
 800c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c512:	3301      	adds	r3, #1
 800c514:	e7c1      	b.n	800c49a <__lshift+0x4a>
 800c516:	3904      	subs	r1, #4
 800c518:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c520:	4298      	cmp	r0, r3
 800c522:	d8f9      	bhi.n	800c518 <__lshift+0xc8>
 800c524:	e7ea      	b.n	800c4fc <__lshift+0xac>
 800c526:	bf00      	nop
 800c528:	0800f9b7 	.word	0x0800f9b7
 800c52c:	0800f9c8 	.word	0x0800f9c8

0800c530 <__mcmp>:
 800c530:	b530      	push	{r4, r5, lr}
 800c532:	6902      	ldr	r2, [r0, #16]
 800c534:	690c      	ldr	r4, [r1, #16]
 800c536:	1b12      	subs	r2, r2, r4
 800c538:	d10e      	bne.n	800c558 <__mcmp+0x28>
 800c53a:	f100 0314 	add.w	r3, r0, #20
 800c53e:	3114      	adds	r1, #20
 800c540:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c544:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c548:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c54c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c550:	42a5      	cmp	r5, r4
 800c552:	d003      	beq.n	800c55c <__mcmp+0x2c>
 800c554:	d305      	bcc.n	800c562 <__mcmp+0x32>
 800c556:	2201      	movs	r2, #1
 800c558:	4610      	mov	r0, r2
 800c55a:	bd30      	pop	{r4, r5, pc}
 800c55c:	4283      	cmp	r3, r0
 800c55e:	d3f3      	bcc.n	800c548 <__mcmp+0x18>
 800c560:	e7fa      	b.n	800c558 <__mcmp+0x28>
 800c562:	f04f 32ff 	mov.w	r2, #4294967295
 800c566:	e7f7      	b.n	800c558 <__mcmp+0x28>

0800c568 <__mdiff>:
 800c568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	460c      	mov	r4, r1
 800c56e:	4606      	mov	r6, r0
 800c570:	4611      	mov	r1, r2
 800c572:	4620      	mov	r0, r4
 800c574:	4690      	mov	r8, r2
 800c576:	f7ff ffdb 	bl	800c530 <__mcmp>
 800c57a:	1e05      	subs	r5, r0, #0
 800c57c:	d110      	bne.n	800c5a0 <__mdiff+0x38>
 800c57e:	4629      	mov	r1, r5
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff fd53 	bl	800c02c <_Balloc>
 800c586:	b930      	cbnz	r0, 800c596 <__mdiff+0x2e>
 800c588:	4b3a      	ldr	r3, [pc, #232]	; (800c674 <__mdiff+0x10c>)
 800c58a:	4602      	mov	r2, r0
 800c58c:	f240 2132 	movw	r1, #562	; 0x232
 800c590:	4839      	ldr	r0, [pc, #228]	; (800c678 <__mdiff+0x110>)
 800c592:	f000 f8e5 	bl	800c760 <__assert_func>
 800c596:	2301      	movs	r3, #1
 800c598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c59c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	bfa4      	itt	ge
 800c5a2:	4643      	movge	r3, r8
 800c5a4:	46a0      	movge	r8, r4
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5ac:	bfa6      	itte	ge
 800c5ae:	461c      	movge	r4, r3
 800c5b0:	2500      	movge	r5, #0
 800c5b2:	2501      	movlt	r5, #1
 800c5b4:	f7ff fd3a 	bl	800c02c <_Balloc>
 800c5b8:	b920      	cbnz	r0, 800c5c4 <__mdiff+0x5c>
 800c5ba:	4b2e      	ldr	r3, [pc, #184]	; (800c674 <__mdiff+0x10c>)
 800c5bc:	4602      	mov	r2, r0
 800c5be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5c2:	e7e5      	b.n	800c590 <__mdiff+0x28>
 800c5c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5c8:	6926      	ldr	r6, [r4, #16]
 800c5ca:	60c5      	str	r5, [r0, #12]
 800c5cc:	f104 0914 	add.w	r9, r4, #20
 800c5d0:	f108 0514 	add.w	r5, r8, #20
 800c5d4:	f100 0e14 	add.w	lr, r0, #20
 800c5d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5e0:	f108 0210 	add.w	r2, r8, #16
 800c5e4:	46f2      	mov	sl, lr
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5f0:	fa1f f883 	uxth.w	r8, r3
 800c5f4:	fa11 f18b 	uxtah	r1, r1, fp
 800c5f8:	0c1b      	lsrs	r3, r3, #16
 800c5fa:	eba1 0808 	sub.w	r8, r1, r8
 800c5fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c606:	fa1f f888 	uxth.w	r8, r8
 800c60a:	1419      	asrs	r1, r3, #16
 800c60c:	454e      	cmp	r6, r9
 800c60e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c612:	f84a 3b04 	str.w	r3, [sl], #4
 800c616:	d8e7      	bhi.n	800c5e8 <__mdiff+0x80>
 800c618:	1b33      	subs	r3, r6, r4
 800c61a:	3b15      	subs	r3, #21
 800c61c:	f023 0303 	bic.w	r3, r3, #3
 800c620:	3304      	adds	r3, #4
 800c622:	3415      	adds	r4, #21
 800c624:	42a6      	cmp	r6, r4
 800c626:	bf38      	it	cc
 800c628:	2304      	movcc	r3, #4
 800c62a:	441d      	add	r5, r3
 800c62c:	4473      	add	r3, lr
 800c62e:	469e      	mov	lr, r3
 800c630:	462e      	mov	r6, r5
 800c632:	4566      	cmp	r6, ip
 800c634:	d30e      	bcc.n	800c654 <__mdiff+0xec>
 800c636:	f10c 0203 	add.w	r2, ip, #3
 800c63a:	1b52      	subs	r2, r2, r5
 800c63c:	f022 0203 	bic.w	r2, r2, #3
 800c640:	3d03      	subs	r5, #3
 800c642:	45ac      	cmp	ip, r5
 800c644:	bf38      	it	cc
 800c646:	2200      	movcc	r2, #0
 800c648:	441a      	add	r2, r3
 800c64a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c64e:	b17b      	cbz	r3, 800c670 <__mdiff+0x108>
 800c650:	6107      	str	r7, [r0, #16]
 800c652:	e7a3      	b.n	800c59c <__mdiff+0x34>
 800c654:	f856 8b04 	ldr.w	r8, [r6], #4
 800c658:	fa11 f288 	uxtah	r2, r1, r8
 800c65c:	1414      	asrs	r4, r2, #16
 800c65e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c662:	b292      	uxth	r2, r2
 800c664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c668:	f84e 2b04 	str.w	r2, [lr], #4
 800c66c:	1421      	asrs	r1, r4, #16
 800c66e:	e7e0      	b.n	800c632 <__mdiff+0xca>
 800c670:	3f01      	subs	r7, #1
 800c672:	e7ea      	b.n	800c64a <__mdiff+0xe2>
 800c674:	0800f9b7 	.word	0x0800f9b7
 800c678:	0800f9c8 	.word	0x0800f9c8

0800c67c <__d2b>:
 800c67c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c680:	4689      	mov	r9, r1
 800c682:	2101      	movs	r1, #1
 800c684:	ec57 6b10 	vmov	r6, r7, d0
 800c688:	4690      	mov	r8, r2
 800c68a:	f7ff fccf 	bl	800c02c <_Balloc>
 800c68e:	4604      	mov	r4, r0
 800c690:	b930      	cbnz	r0, 800c6a0 <__d2b+0x24>
 800c692:	4602      	mov	r2, r0
 800c694:	4b25      	ldr	r3, [pc, #148]	; (800c72c <__d2b+0xb0>)
 800c696:	4826      	ldr	r0, [pc, #152]	; (800c730 <__d2b+0xb4>)
 800c698:	f240 310a 	movw	r1, #778	; 0x30a
 800c69c:	f000 f860 	bl	800c760 <__assert_func>
 800c6a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6a8:	bb35      	cbnz	r5, 800c6f8 <__d2b+0x7c>
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	d028      	beq.n	800c702 <__d2b+0x86>
 800c6b0:	4668      	mov	r0, sp
 800c6b2:	9600      	str	r6, [sp, #0]
 800c6b4:	f7ff fd82 	bl	800c1bc <__lo0bits>
 800c6b8:	9900      	ldr	r1, [sp, #0]
 800c6ba:	b300      	cbz	r0, 800c6fe <__d2b+0x82>
 800c6bc:	9a01      	ldr	r2, [sp, #4]
 800c6be:	f1c0 0320 	rsb	r3, r0, #32
 800c6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c6:	430b      	orrs	r3, r1
 800c6c8:	40c2      	lsrs	r2, r0
 800c6ca:	6163      	str	r3, [r4, #20]
 800c6cc:	9201      	str	r2, [sp, #4]
 800c6ce:	9b01      	ldr	r3, [sp, #4]
 800c6d0:	61a3      	str	r3, [r4, #24]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bf14      	ite	ne
 800c6d6:	2202      	movne	r2, #2
 800c6d8:	2201      	moveq	r2, #1
 800c6da:	6122      	str	r2, [r4, #16]
 800c6dc:	b1d5      	cbz	r5, 800c714 <__d2b+0x98>
 800c6de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6e2:	4405      	add	r5, r0
 800c6e4:	f8c9 5000 	str.w	r5, [r9]
 800c6e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6ec:	f8c8 0000 	str.w	r0, [r8]
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	b003      	add	sp, #12
 800c6f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6fc:	e7d5      	b.n	800c6aa <__d2b+0x2e>
 800c6fe:	6161      	str	r1, [r4, #20]
 800c700:	e7e5      	b.n	800c6ce <__d2b+0x52>
 800c702:	a801      	add	r0, sp, #4
 800c704:	f7ff fd5a 	bl	800c1bc <__lo0bits>
 800c708:	9b01      	ldr	r3, [sp, #4]
 800c70a:	6163      	str	r3, [r4, #20]
 800c70c:	2201      	movs	r2, #1
 800c70e:	6122      	str	r2, [r4, #16]
 800c710:	3020      	adds	r0, #32
 800c712:	e7e3      	b.n	800c6dc <__d2b+0x60>
 800c714:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c71c:	f8c9 0000 	str.w	r0, [r9]
 800c720:	6918      	ldr	r0, [r3, #16]
 800c722:	f7ff fd2b 	bl	800c17c <__hi0bits>
 800c726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c72a:	e7df      	b.n	800c6ec <__d2b+0x70>
 800c72c:	0800f9b7 	.word	0x0800f9b7
 800c730:	0800f9c8 	.word	0x0800f9c8

0800c734 <_calloc_r>:
 800c734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c736:	fba1 2402 	umull	r2, r4, r1, r2
 800c73a:	b94c      	cbnz	r4, 800c750 <_calloc_r+0x1c>
 800c73c:	4611      	mov	r1, r2
 800c73e:	9201      	str	r2, [sp, #4]
 800c740:	f7fe f8fa 	bl	800a938 <_malloc_r>
 800c744:	9a01      	ldr	r2, [sp, #4]
 800c746:	4605      	mov	r5, r0
 800c748:	b930      	cbnz	r0, 800c758 <_calloc_r+0x24>
 800c74a:	4628      	mov	r0, r5
 800c74c:	b003      	add	sp, #12
 800c74e:	bd30      	pop	{r4, r5, pc}
 800c750:	220c      	movs	r2, #12
 800c752:	6002      	str	r2, [r0, #0]
 800c754:	2500      	movs	r5, #0
 800c756:	e7f8      	b.n	800c74a <_calloc_r+0x16>
 800c758:	4621      	mov	r1, r4
 800c75a:	f7fe f879 	bl	800a850 <memset>
 800c75e:	e7f4      	b.n	800c74a <_calloc_r+0x16>

0800c760 <__assert_func>:
 800c760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c762:	4614      	mov	r4, r2
 800c764:	461a      	mov	r2, r3
 800c766:	4b09      	ldr	r3, [pc, #36]	; (800c78c <__assert_func+0x2c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4605      	mov	r5, r0
 800c76c:	68d8      	ldr	r0, [r3, #12]
 800c76e:	b14c      	cbz	r4, 800c784 <__assert_func+0x24>
 800c770:	4b07      	ldr	r3, [pc, #28]	; (800c790 <__assert_func+0x30>)
 800c772:	9100      	str	r1, [sp, #0]
 800c774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c778:	4906      	ldr	r1, [pc, #24]	; (800c794 <__assert_func+0x34>)
 800c77a:	462b      	mov	r3, r5
 800c77c:	f000 f80e 	bl	800c79c <fiprintf>
 800c780:	f000 fa5a 	bl	800cc38 <abort>
 800c784:	4b04      	ldr	r3, [pc, #16]	; (800c798 <__assert_func+0x38>)
 800c786:	461c      	mov	r4, r3
 800c788:	e7f3      	b.n	800c772 <__assert_func+0x12>
 800c78a:	bf00      	nop
 800c78c:	20000024 	.word	0x20000024
 800c790:	0800fb24 	.word	0x0800fb24
 800c794:	0800fb31 	.word	0x0800fb31
 800c798:	0800fb5f 	.word	0x0800fb5f

0800c79c <fiprintf>:
 800c79c:	b40e      	push	{r1, r2, r3}
 800c79e:	b503      	push	{r0, r1, lr}
 800c7a0:	4601      	mov	r1, r0
 800c7a2:	ab03      	add	r3, sp, #12
 800c7a4:	4805      	ldr	r0, [pc, #20]	; (800c7bc <fiprintf+0x20>)
 800c7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7aa:	6800      	ldr	r0, [r0, #0]
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	f000 f845 	bl	800c83c <_vfiprintf_r>
 800c7b2:	b002      	add	sp, #8
 800c7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7b8:	b003      	add	sp, #12
 800c7ba:	4770      	bx	lr
 800c7bc:	20000024 	.word	0x20000024

0800c7c0 <__retarget_lock_init_recursive>:
 800c7c0:	4770      	bx	lr

0800c7c2 <__retarget_lock_acquire_recursive>:
 800c7c2:	4770      	bx	lr

0800c7c4 <__retarget_lock_release_recursive>:
 800c7c4:	4770      	bx	lr

0800c7c6 <__ascii_mbtowc>:
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	b901      	cbnz	r1, 800c7cc <__ascii_mbtowc+0x6>
 800c7ca:	a901      	add	r1, sp, #4
 800c7cc:	b142      	cbz	r2, 800c7e0 <__ascii_mbtowc+0x1a>
 800c7ce:	b14b      	cbz	r3, 800c7e4 <__ascii_mbtowc+0x1e>
 800c7d0:	7813      	ldrb	r3, [r2, #0]
 800c7d2:	600b      	str	r3, [r1, #0]
 800c7d4:	7812      	ldrb	r2, [r2, #0]
 800c7d6:	1e10      	subs	r0, r2, #0
 800c7d8:	bf18      	it	ne
 800c7da:	2001      	movne	r0, #1
 800c7dc:	b002      	add	sp, #8
 800c7de:	4770      	bx	lr
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	e7fb      	b.n	800c7dc <__ascii_mbtowc+0x16>
 800c7e4:	f06f 0001 	mvn.w	r0, #1
 800c7e8:	e7f8      	b.n	800c7dc <__ascii_mbtowc+0x16>

0800c7ea <__sfputc_r>:
 800c7ea:	6893      	ldr	r3, [r2, #8]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	b410      	push	{r4}
 800c7f2:	6093      	str	r3, [r2, #8]
 800c7f4:	da08      	bge.n	800c808 <__sfputc_r+0x1e>
 800c7f6:	6994      	ldr	r4, [r2, #24]
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	db01      	blt.n	800c800 <__sfputc_r+0x16>
 800c7fc:	290a      	cmp	r1, #10
 800c7fe:	d103      	bne.n	800c808 <__sfputc_r+0x1e>
 800c800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c804:	f000 b94a 	b.w	800ca9c <__swbuf_r>
 800c808:	6813      	ldr	r3, [r2, #0]
 800c80a:	1c58      	adds	r0, r3, #1
 800c80c:	6010      	str	r0, [r2, #0]
 800c80e:	7019      	strb	r1, [r3, #0]
 800c810:	4608      	mov	r0, r1
 800c812:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <__sfputs_r>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	4606      	mov	r6, r0
 800c81c:	460f      	mov	r7, r1
 800c81e:	4614      	mov	r4, r2
 800c820:	18d5      	adds	r5, r2, r3
 800c822:	42ac      	cmp	r4, r5
 800c824:	d101      	bne.n	800c82a <__sfputs_r+0x12>
 800c826:	2000      	movs	r0, #0
 800c828:	e007      	b.n	800c83a <__sfputs_r+0x22>
 800c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82e:	463a      	mov	r2, r7
 800c830:	4630      	mov	r0, r6
 800c832:	f7ff ffda 	bl	800c7ea <__sfputc_r>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	d1f3      	bne.n	800c822 <__sfputs_r+0xa>
 800c83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c83c <_vfiprintf_r>:
 800c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	460d      	mov	r5, r1
 800c842:	b09d      	sub	sp, #116	; 0x74
 800c844:	4614      	mov	r4, r2
 800c846:	4698      	mov	r8, r3
 800c848:	4606      	mov	r6, r0
 800c84a:	b118      	cbz	r0, 800c854 <_vfiprintf_r+0x18>
 800c84c:	6983      	ldr	r3, [r0, #24]
 800c84e:	b90b      	cbnz	r3, 800c854 <_vfiprintf_r+0x18>
 800c850:	f000 fb14 	bl	800ce7c <__sinit>
 800c854:	4b89      	ldr	r3, [pc, #548]	; (800ca7c <_vfiprintf_r+0x240>)
 800c856:	429d      	cmp	r5, r3
 800c858:	d11b      	bne.n	800c892 <_vfiprintf_r+0x56>
 800c85a:	6875      	ldr	r5, [r6, #4]
 800c85c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c85e:	07d9      	lsls	r1, r3, #31
 800c860:	d405      	bmi.n	800c86e <_vfiprintf_r+0x32>
 800c862:	89ab      	ldrh	r3, [r5, #12]
 800c864:	059a      	lsls	r2, r3, #22
 800c866:	d402      	bmi.n	800c86e <_vfiprintf_r+0x32>
 800c868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c86a:	f7ff ffaa 	bl	800c7c2 <__retarget_lock_acquire_recursive>
 800c86e:	89ab      	ldrh	r3, [r5, #12]
 800c870:	071b      	lsls	r3, r3, #28
 800c872:	d501      	bpl.n	800c878 <_vfiprintf_r+0x3c>
 800c874:	692b      	ldr	r3, [r5, #16]
 800c876:	b9eb      	cbnz	r3, 800c8b4 <_vfiprintf_r+0x78>
 800c878:	4629      	mov	r1, r5
 800c87a:	4630      	mov	r0, r6
 800c87c:	f000 f96e 	bl	800cb5c <__swsetup_r>
 800c880:	b1c0      	cbz	r0, 800c8b4 <_vfiprintf_r+0x78>
 800c882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c884:	07dc      	lsls	r4, r3, #31
 800c886:	d50e      	bpl.n	800c8a6 <_vfiprintf_r+0x6a>
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	b01d      	add	sp, #116	; 0x74
 800c88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c892:	4b7b      	ldr	r3, [pc, #492]	; (800ca80 <_vfiprintf_r+0x244>)
 800c894:	429d      	cmp	r5, r3
 800c896:	d101      	bne.n	800c89c <_vfiprintf_r+0x60>
 800c898:	68b5      	ldr	r5, [r6, #8]
 800c89a:	e7df      	b.n	800c85c <_vfiprintf_r+0x20>
 800c89c:	4b79      	ldr	r3, [pc, #484]	; (800ca84 <_vfiprintf_r+0x248>)
 800c89e:	429d      	cmp	r5, r3
 800c8a0:	bf08      	it	eq
 800c8a2:	68f5      	ldreq	r5, [r6, #12]
 800c8a4:	e7da      	b.n	800c85c <_vfiprintf_r+0x20>
 800c8a6:	89ab      	ldrh	r3, [r5, #12]
 800c8a8:	0598      	lsls	r0, r3, #22
 800c8aa:	d4ed      	bmi.n	800c888 <_vfiprintf_r+0x4c>
 800c8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ae:	f7ff ff89 	bl	800c7c4 <__retarget_lock_release_recursive>
 800c8b2:	e7e9      	b.n	800c888 <_vfiprintf_r+0x4c>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b8:	2320      	movs	r3, #32
 800c8ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8be:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8c2:	2330      	movs	r3, #48	; 0x30
 800c8c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca88 <_vfiprintf_r+0x24c>
 800c8c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8cc:	f04f 0901 	mov.w	r9, #1
 800c8d0:	4623      	mov	r3, r4
 800c8d2:	469a      	mov	sl, r3
 800c8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8d8:	b10a      	cbz	r2, 800c8de <_vfiprintf_r+0xa2>
 800c8da:	2a25      	cmp	r2, #37	; 0x25
 800c8dc:	d1f9      	bne.n	800c8d2 <_vfiprintf_r+0x96>
 800c8de:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e2:	d00b      	beq.n	800c8fc <_vfiprintf_r+0xc0>
 800c8e4:	465b      	mov	r3, fp
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff ff94 	bl	800c818 <__sfputs_r>
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	f000 80aa 	beq.w	800ca4a <_vfiprintf_r+0x20e>
 800c8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8f8:	445a      	add	r2, fp
 800c8fa:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 80a2 	beq.w	800ca4a <_vfiprintf_r+0x20e>
 800c906:	2300      	movs	r3, #0
 800c908:	f04f 32ff 	mov.w	r2, #4294967295
 800c90c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c910:	f10a 0a01 	add.w	sl, sl, #1
 800c914:	9304      	str	r3, [sp, #16]
 800c916:	9307      	str	r3, [sp, #28]
 800c918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c91c:	931a      	str	r3, [sp, #104]	; 0x68
 800c91e:	4654      	mov	r4, sl
 800c920:	2205      	movs	r2, #5
 800c922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c926:	4858      	ldr	r0, [pc, #352]	; (800ca88 <_vfiprintf_r+0x24c>)
 800c928:	f7f3 fc72 	bl	8000210 <memchr>
 800c92c:	9a04      	ldr	r2, [sp, #16]
 800c92e:	b9d8      	cbnz	r0, 800c968 <_vfiprintf_r+0x12c>
 800c930:	06d1      	lsls	r1, r2, #27
 800c932:	bf44      	itt	mi
 800c934:	2320      	movmi	r3, #32
 800c936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c93a:	0713      	lsls	r3, r2, #28
 800c93c:	bf44      	itt	mi
 800c93e:	232b      	movmi	r3, #43	; 0x2b
 800c940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c944:	f89a 3000 	ldrb.w	r3, [sl]
 800c948:	2b2a      	cmp	r3, #42	; 0x2a
 800c94a:	d015      	beq.n	800c978 <_vfiprintf_r+0x13c>
 800c94c:	9a07      	ldr	r2, [sp, #28]
 800c94e:	4654      	mov	r4, sl
 800c950:	2000      	movs	r0, #0
 800c952:	f04f 0c0a 	mov.w	ip, #10
 800c956:	4621      	mov	r1, r4
 800c958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c95c:	3b30      	subs	r3, #48	; 0x30
 800c95e:	2b09      	cmp	r3, #9
 800c960:	d94e      	bls.n	800ca00 <_vfiprintf_r+0x1c4>
 800c962:	b1b0      	cbz	r0, 800c992 <_vfiprintf_r+0x156>
 800c964:	9207      	str	r2, [sp, #28]
 800c966:	e014      	b.n	800c992 <_vfiprintf_r+0x156>
 800c968:	eba0 0308 	sub.w	r3, r0, r8
 800c96c:	fa09 f303 	lsl.w	r3, r9, r3
 800c970:	4313      	orrs	r3, r2
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	46a2      	mov	sl, r4
 800c976:	e7d2      	b.n	800c91e <_vfiprintf_r+0xe2>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	1d19      	adds	r1, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	9103      	str	r1, [sp, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	bfbb      	ittet	lt
 800c984:	425b      	neglt	r3, r3
 800c986:	f042 0202 	orrlt.w	r2, r2, #2
 800c98a:	9307      	strge	r3, [sp, #28]
 800c98c:	9307      	strlt	r3, [sp, #28]
 800c98e:	bfb8      	it	lt
 800c990:	9204      	strlt	r2, [sp, #16]
 800c992:	7823      	ldrb	r3, [r4, #0]
 800c994:	2b2e      	cmp	r3, #46	; 0x2e
 800c996:	d10c      	bne.n	800c9b2 <_vfiprintf_r+0x176>
 800c998:	7863      	ldrb	r3, [r4, #1]
 800c99a:	2b2a      	cmp	r3, #42	; 0x2a
 800c99c:	d135      	bne.n	800ca0a <_vfiprintf_r+0x1ce>
 800c99e:	9b03      	ldr	r3, [sp, #12]
 800c9a0:	1d1a      	adds	r2, r3, #4
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	9203      	str	r2, [sp, #12]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	bfb8      	it	lt
 800c9aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9ae:	3402      	adds	r4, #2
 800c9b0:	9305      	str	r3, [sp, #20]
 800c9b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca98 <_vfiprintf_r+0x25c>
 800c9b6:	7821      	ldrb	r1, [r4, #0]
 800c9b8:	2203      	movs	r2, #3
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	f7f3 fc28 	bl	8000210 <memchr>
 800c9c0:	b140      	cbz	r0, 800c9d4 <_vfiprintf_r+0x198>
 800c9c2:	2340      	movs	r3, #64	; 0x40
 800c9c4:	eba0 000a 	sub.w	r0, r0, sl
 800c9c8:	fa03 f000 	lsl.w	r0, r3, r0
 800c9cc:	9b04      	ldr	r3, [sp, #16]
 800c9ce:	4303      	orrs	r3, r0
 800c9d0:	3401      	adds	r4, #1
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d8:	482c      	ldr	r0, [pc, #176]	; (800ca8c <_vfiprintf_r+0x250>)
 800c9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9de:	2206      	movs	r2, #6
 800c9e0:	f7f3 fc16 	bl	8000210 <memchr>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d03f      	beq.n	800ca68 <_vfiprintf_r+0x22c>
 800c9e8:	4b29      	ldr	r3, [pc, #164]	; (800ca90 <_vfiprintf_r+0x254>)
 800c9ea:	bb1b      	cbnz	r3, 800ca34 <_vfiprintf_r+0x1f8>
 800c9ec:	9b03      	ldr	r3, [sp, #12]
 800c9ee:	3307      	adds	r3, #7
 800c9f0:	f023 0307 	bic.w	r3, r3, #7
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	9303      	str	r3, [sp, #12]
 800c9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fa:	443b      	add	r3, r7
 800c9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9fe:	e767      	b.n	800c8d0 <_vfiprintf_r+0x94>
 800ca00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca04:	460c      	mov	r4, r1
 800ca06:	2001      	movs	r0, #1
 800ca08:	e7a5      	b.n	800c956 <_vfiprintf_r+0x11a>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	3401      	adds	r4, #1
 800ca0e:	9305      	str	r3, [sp, #20]
 800ca10:	4619      	mov	r1, r3
 800ca12:	f04f 0c0a 	mov.w	ip, #10
 800ca16:	4620      	mov	r0, r4
 800ca18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca1c:	3a30      	subs	r2, #48	; 0x30
 800ca1e:	2a09      	cmp	r2, #9
 800ca20:	d903      	bls.n	800ca2a <_vfiprintf_r+0x1ee>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0c5      	beq.n	800c9b2 <_vfiprintf_r+0x176>
 800ca26:	9105      	str	r1, [sp, #20]
 800ca28:	e7c3      	b.n	800c9b2 <_vfiprintf_r+0x176>
 800ca2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca2e:	4604      	mov	r4, r0
 800ca30:	2301      	movs	r3, #1
 800ca32:	e7f0      	b.n	800ca16 <_vfiprintf_r+0x1da>
 800ca34:	ab03      	add	r3, sp, #12
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	462a      	mov	r2, r5
 800ca3a:	4b16      	ldr	r3, [pc, #88]	; (800ca94 <_vfiprintf_r+0x258>)
 800ca3c:	a904      	add	r1, sp, #16
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7fe f88e 	bl	800ab60 <_printf_float>
 800ca44:	4607      	mov	r7, r0
 800ca46:	1c78      	adds	r0, r7, #1
 800ca48:	d1d6      	bne.n	800c9f8 <_vfiprintf_r+0x1bc>
 800ca4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca4c:	07d9      	lsls	r1, r3, #31
 800ca4e:	d405      	bmi.n	800ca5c <_vfiprintf_r+0x220>
 800ca50:	89ab      	ldrh	r3, [r5, #12]
 800ca52:	059a      	lsls	r2, r3, #22
 800ca54:	d402      	bmi.n	800ca5c <_vfiprintf_r+0x220>
 800ca56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca58:	f7ff feb4 	bl	800c7c4 <__retarget_lock_release_recursive>
 800ca5c:	89ab      	ldrh	r3, [r5, #12]
 800ca5e:	065b      	lsls	r3, r3, #25
 800ca60:	f53f af12 	bmi.w	800c888 <_vfiprintf_r+0x4c>
 800ca64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca66:	e711      	b.n	800c88c <_vfiprintf_r+0x50>
 800ca68:	ab03      	add	r3, sp, #12
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	462a      	mov	r2, r5
 800ca6e:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <_vfiprintf_r+0x258>)
 800ca70:	a904      	add	r1, sp, #16
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7fe fb18 	bl	800b0a8 <_printf_i>
 800ca78:	e7e4      	b.n	800ca44 <_vfiprintf_r+0x208>
 800ca7a:	bf00      	nop
 800ca7c:	0800fc9c 	.word	0x0800fc9c
 800ca80:	0800fcbc 	.word	0x0800fcbc
 800ca84:	0800fc7c 	.word	0x0800fc7c
 800ca88:	0800fb6a 	.word	0x0800fb6a
 800ca8c:	0800fb74 	.word	0x0800fb74
 800ca90:	0800ab61 	.word	0x0800ab61
 800ca94:	0800c819 	.word	0x0800c819
 800ca98:	0800fb70 	.word	0x0800fb70

0800ca9c <__swbuf_r>:
 800ca9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9e:	460e      	mov	r6, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	4605      	mov	r5, r0
 800caa4:	b118      	cbz	r0, 800caae <__swbuf_r+0x12>
 800caa6:	6983      	ldr	r3, [r0, #24]
 800caa8:	b90b      	cbnz	r3, 800caae <__swbuf_r+0x12>
 800caaa:	f000 f9e7 	bl	800ce7c <__sinit>
 800caae:	4b21      	ldr	r3, [pc, #132]	; (800cb34 <__swbuf_r+0x98>)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	d12b      	bne.n	800cb0c <__swbuf_r+0x70>
 800cab4:	686c      	ldr	r4, [r5, #4]
 800cab6:	69a3      	ldr	r3, [r4, #24]
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	071a      	lsls	r2, r3, #28
 800cabe:	d52f      	bpl.n	800cb20 <__swbuf_r+0x84>
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	b36b      	cbz	r3, 800cb20 <__swbuf_r+0x84>
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	6820      	ldr	r0, [r4, #0]
 800cac8:	1ac0      	subs	r0, r0, r3
 800caca:	6963      	ldr	r3, [r4, #20]
 800cacc:	b2f6      	uxtb	r6, r6
 800cace:	4283      	cmp	r3, r0
 800cad0:	4637      	mov	r7, r6
 800cad2:	dc04      	bgt.n	800cade <__swbuf_r+0x42>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 f93c 	bl	800cd54 <_fflush_r>
 800cadc:	bb30      	cbnz	r0, 800cb2c <__swbuf_r+0x90>
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	3b01      	subs	r3, #1
 800cae2:	60a3      	str	r3, [r4, #8]
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	6022      	str	r2, [r4, #0]
 800caea:	701e      	strb	r6, [r3, #0]
 800caec:	6963      	ldr	r3, [r4, #20]
 800caee:	3001      	adds	r0, #1
 800caf0:	4283      	cmp	r3, r0
 800caf2:	d004      	beq.n	800cafe <__swbuf_r+0x62>
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	07db      	lsls	r3, r3, #31
 800caf8:	d506      	bpl.n	800cb08 <__swbuf_r+0x6c>
 800cafa:	2e0a      	cmp	r6, #10
 800cafc:	d104      	bne.n	800cb08 <__swbuf_r+0x6c>
 800cafe:	4621      	mov	r1, r4
 800cb00:	4628      	mov	r0, r5
 800cb02:	f000 f927 	bl	800cd54 <_fflush_r>
 800cb06:	b988      	cbnz	r0, 800cb2c <__swbuf_r+0x90>
 800cb08:	4638      	mov	r0, r7
 800cb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb0c:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <__swbuf_r+0x9c>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d101      	bne.n	800cb16 <__swbuf_r+0x7a>
 800cb12:	68ac      	ldr	r4, [r5, #8]
 800cb14:	e7cf      	b.n	800cab6 <__swbuf_r+0x1a>
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <__swbuf_r+0xa0>)
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	bf08      	it	eq
 800cb1c:	68ec      	ldreq	r4, [r5, #12]
 800cb1e:	e7ca      	b.n	800cab6 <__swbuf_r+0x1a>
 800cb20:	4621      	mov	r1, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	f000 f81a 	bl	800cb5c <__swsetup_r>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0cb      	beq.n	800cac4 <__swbuf_r+0x28>
 800cb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb30:	e7ea      	b.n	800cb08 <__swbuf_r+0x6c>
 800cb32:	bf00      	nop
 800cb34:	0800fc9c 	.word	0x0800fc9c
 800cb38:	0800fcbc 	.word	0x0800fcbc
 800cb3c:	0800fc7c 	.word	0x0800fc7c

0800cb40 <__ascii_wctomb>:
 800cb40:	b149      	cbz	r1, 800cb56 <__ascii_wctomb+0x16>
 800cb42:	2aff      	cmp	r2, #255	; 0xff
 800cb44:	bf85      	ittet	hi
 800cb46:	238a      	movhi	r3, #138	; 0x8a
 800cb48:	6003      	strhi	r3, [r0, #0]
 800cb4a:	700a      	strbls	r2, [r1, #0]
 800cb4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb50:	bf98      	it	ls
 800cb52:	2001      	movls	r0, #1
 800cb54:	4770      	bx	lr
 800cb56:	4608      	mov	r0, r1
 800cb58:	4770      	bx	lr
	...

0800cb5c <__swsetup_r>:
 800cb5c:	4b32      	ldr	r3, [pc, #200]	; (800cc28 <__swsetup_r+0xcc>)
 800cb5e:	b570      	push	{r4, r5, r6, lr}
 800cb60:	681d      	ldr	r5, [r3, #0]
 800cb62:	4606      	mov	r6, r0
 800cb64:	460c      	mov	r4, r1
 800cb66:	b125      	cbz	r5, 800cb72 <__swsetup_r+0x16>
 800cb68:	69ab      	ldr	r3, [r5, #24]
 800cb6a:	b913      	cbnz	r3, 800cb72 <__swsetup_r+0x16>
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	f000 f985 	bl	800ce7c <__sinit>
 800cb72:	4b2e      	ldr	r3, [pc, #184]	; (800cc2c <__swsetup_r+0xd0>)
 800cb74:	429c      	cmp	r4, r3
 800cb76:	d10f      	bne.n	800cb98 <__swsetup_r+0x3c>
 800cb78:	686c      	ldr	r4, [r5, #4]
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb80:	0719      	lsls	r1, r3, #28
 800cb82:	d42c      	bmi.n	800cbde <__swsetup_r+0x82>
 800cb84:	06dd      	lsls	r5, r3, #27
 800cb86:	d411      	bmi.n	800cbac <__swsetup_r+0x50>
 800cb88:	2309      	movs	r3, #9
 800cb8a:	6033      	str	r3, [r6, #0]
 800cb8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	f04f 30ff 	mov.w	r0, #4294967295
 800cb96:	e03e      	b.n	800cc16 <__swsetup_r+0xba>
 800cb98:	4b25      	ldr	r3, [pc, #148]	; (800cc30 <__swsetup_r+0xd4>)
 800cb9a:	429c      	cmp	r4, r3
 800cb9c:	d101      	bne.n	800cba2 <__swsetup_r+0x46>
 800cb9e:	68ac      	ldr	r4, [r5, #8]
 800cba0:	e7eb      	b.n	800cb7a <__swsetup_r+0x1e>
 800cba2:	4b24      	ldr	r3, [pc, #144]	; (800cc34 <__swsetup_r+0xd8>)
 800cba4:	429c      	cmp	r4, r3
 800cba6:	bf08      	it	eq
 800cba8:	68ec      	ldreq	r4, [r5, #12]
 800cbaa:	e7e6      	b.n	800cb7a <__swsetup_r+0x1e>
 800cbac:	0758      	lsls	r0, r3, #29
 800cbae:	d512      	bpl.n	800cbd6 <__swsetup_r+0x7a>
 800cbb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbb2:	b141      	cbz	r1, 800cbc6 <__swsetup_r+0x6a>
 800cbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbb8:	4299      	cmp	r1, r3
 800cbba:	d002      	beq.n	800cbc2 <__swsetup_r+0x66>
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f7fd fe4f 	bl	800a860 <_free_r>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6363      	str	r3, [r4, #52]	; 0x34
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbcc:	81a3      	strh	r3, [r4, #12]
 800cbce:	2300      	movs	r3, #0
 800cbd0:	6063      	str	r3, [r4, #4]
 800cbd2:	6923      	ldr	r3, [r4, #16]
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	f043 0308 	orr.w	r3, r3, #8
 800cbdc:	81a3      	strh	r3, [r4, #12]
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	b94b      	cbnz	r3, 800cbf6 <__swsetup_r+0x9a>
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbec:	d003      	beq.n	800cbf6 <__swsetup_r+0x9a>
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f000 fa05 	bl	800d000 <__smakebuf_r>
 800cbf6:	89a0      	ldrh	r0, [r4, #12]
 800cbf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbfc:	f010 0301 	ands.w	r3, r0, #1
 800cc00:	d00a      	beq.n	800cc18 <__swsetup_r+0xbc>
 800cc02:	2300      	movs	r3, #0
 800cc04:	60a3      	str	r3, [r4, #8]
 800cc06:	6963      	ldr	r3, [r4, #20]
 800cc08:	425b      	negs	r3, r3
 800cc0a:	61a3      	str	r3, [r4, #24]
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	b943      	cbnz	r3, 800cc22 <__swsetup_r+0xc6>
 800cc10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc14:	d1ba      	bne.n	800cb8c <__swsetup_r+0x30>
 800cc16:	bd70      	pop	{r4, r5, r6, pc}
 800cc18:	0781      	lsls	r1, r0, #30
 800cc1a:	bf58      	it	pl
 800cc1c:	6963      	ldrpl	r3, [r4, #20]
 800cc1e:	60a3      	str	r3, [r4, #8]
 800cc20:	e7f4      	b.n	800cc0c <__swsetup_r+0xb0>
 800cc22:	2000      	movs	r0, #0
 800cc24:	e7f7      	b.n	800cc16 <__swsetup_r+0xba>
 800cc26:	bf00      	nop
 800cc28:	20000024 	.word	0x20000024
 800cc2c:	0800fc9c 	.word	0x0800fc9c
 800cc30:	0800fcbc 	.word	0x0800fcbc
 800cc34:	0800fc7c 	.word	0x0800fc7c

0800cc38 <abort>:
 800cc38:	b508      	push	{r3, lr}
 800cc3a:	2006      	movs	r0, #6
 800cc3c:	f000 fa48 	bl	800d0d0 <raise>
 800cc40:	2001      	movs	r0, #1
 800cc42:	f7f6 fae9 	bl	8003218 <_exit>
	...

0800cc48 <__sflush_r>:
 800cc48:	898a      	ldrh	r2, [r1, #12]
 800cc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4e:	4605      	mov	r5, r0
 800cc50:	0710      	lsls	r0, r2, #28
 800cc52:	460c      	mov	r4, r1
 800cc54:	d458      	bmi.n	800cd08 <__sflush_r+0xc0>
 800cc56:	684b      	ldr	r3, [r1, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	dc05      	bgt.n	800cc68 <__sflush_r+0x20>
 800cc5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dc02      	bgt.n	800cc68 <__sflush_r+0x20>
 800cc62:	2000      	movs	r0, #0
 800cc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d0f9      	beq.n	800cc62 <__sflush_r+0x1a>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc74:	682f      	ldr	r7, [r5, #0]
 800cc76:	602b      	str	r3, [r5, #0]
 800cc78:	d032      	beq.n	800cce0 <__sflush_r+0x98>
 800cc7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	075a      	lsls	r2, r3, #29
 800cc80:	d505      	bpl.n	800cc8e <__sflush_r+0x46>
 800cc82:	6863      	ldr	r3, [r4, #4]
 800cc84:	1ac0      	subs	r0, r0, r3
 800cc86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc88:	b10b      	cbz	r3, 800cc8e <__sflush_r+0x46>
 800cc8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc8c:	1ac0      	subs	r0, r0, r3
 800cc8e:	2300      	movs	r3, #0
 800cc90:	4602      	mov	r2, r0
 800cc92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc94:	6a21      	ldr	r1, [r4, #32]
 800cc96:	4628      	mov	r0, r5
 800cc98:	47b0      	blx	r6
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	d106      	bne.n	800ccae <__sflush_r+0x66>
 800cca0:	6829      	ldr	r1, [r5, #0]
 800cca2:	291d      	cmp	r1, #29
 800cca4:	d82c      	bhi.n	800cd00 <__sflush_r+0xb8>
 800cca6:	4a2a      	ldr	r2, [pc, #168]	; (800cd50 <__sflush_r+0x108>)
 800cca8:	40ca      	lsrs	r2, r1
 800ccaa:	07d6      	lsls	r6, r2, #31
 800ccac:	d528      	bpl.n	800cd00 <__sflush_r+0xb8>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	6062      	str	r2, [r4, #4]
 800ccb2:	04d9      	lsls	r1, r3, #19
 800ccb4:	6922      	ldr	r2, [r4, #16]
 800ccb6:	6022      	str	r2, [r4, #0]
 800ccb8:	d504      	bpl.n	800ccc4 <__sflush_r+0x7c>
 800ccba:	1c42      	adds	r2, r0, #1
 800ccbc:	d101      	bne.n	800ccc2 <__sflush_r+0x7a>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b903      	cbnz	r3, 800ccc4 <__sflush_r+0x7c>
 800ccc2:	6560      	str	r0, [r4, #84]	; 0x54
 800ccc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccc6:	602f      	str	r7, [r5, #0]
 800ccc8:	2900      	cmp	r1, #0
 800ccca:	d0ca      	beq.n	800cc62 <__sflush_r+0x1a>
 800cccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd0:	4299      	cmp	r1, r3
 800ccd2:	d002      	beq.n	800ccda <__sflush_r+0x92>
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f7fd fdc3 	bl	800a860 <_free_r>
 800ccda:	2000      	movs	r0, #0
 800ccdc:	6360      	str	r0, [r4, #52]	; 0x34
 800ccde:	e7c1      	b.n	800cc64 <__sflush_r+0x1c>
 800cce0:	6a21      	ldr	r1, [r4, #32]
 800cce2:	2301      	movs	r3, #1
 800cce4:	4628      	mov	r0, r5
 800cce6:	47b0      	blx	r6
 800cce8:	1c41      	adds	r1, r0, #1
 800ccea:	d1c7      	bne.n	800cc7c <__sflush_r+0x34>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d0c4      	beq.n	800cc7c <__sflush_r+0x34>
 800ccf2:	2b1d      	cmp	r3, #29
 800ccf4:	d001      	beq.n	800ccfa <__sflush_r+0xb2>
 800ccf6:	2b16      	cmp	r3, #22
 800ccf8:	d101      	bne.n	800ccfe <__sflush_r+0xb6>
 800ccfa:	602f      	str	r7, [r5, #0]
 800ccfc:	e7b1      	b.n	800cc62 <__sflush_r+0x1a>
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd04:	81a3      	strh	r3, [r4, #12]
 800cd06:	e7ad      	b.n	800cc64 <__sflush_r+0x1c>
 800cd08:	690f      	ldr	r7, [r1, #16]
 800cd0a:	2f00      	cmp	r7, #0
 800cd0c:	d0a9      	beq.n	800cc62 <__sflush_r+0x1a>
 800cd0e:	0793      	lsls	r3, r2, #30
 800cd10:	680e      	ldr	r6, [r1, #0]
 800cd12:	bf08      	it	eq
 800cd14:	694b      	ldreq	r3, [r1, #20]
 800cd16:	600f      	str	r7, [r1, #0]
 800cd18:	bf18      	it	ne
 800cd1a:	2300      	movne	r3, #0
 800cd1c:	eba6 0807 	sub.w	r8, r6, r7
 800cd20:	608b      	str	r3, [r1, #8]
 800cd22:	f1b8 0f00 	cmp.w	r8, #0
 800cd26:	dd9c      	ble.n	800cc62 <__sflush_r+0x1a>
 800cd28:	6a21      	ldr	r1, [r4, #32]
 800cd2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd2c:	4643      	mov	r3, r8
 800cd2e:	463a      	mov	r2, r7
 800cd30:	4628      	mov	r0, r5
 800cd32:	47b0      	blx	r6
 800cd34:	2800      	cmp	r0, #0
 800cd36:	dc06      	bgt.n	800cd46 <__sflush_r+0xfe>
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	e78e      	b.n	800cc64 <__sflush_r+0x1c>
 800cd46:	4407      	add	r7, r0
 800cd48:	eba8 0800 	sub.w	r8, r8, r0
 800cd4c:	e7e9      	b.n	800cd22 <__sflush_r+0xda>
 800cd4e:	bf00      	nop
 800cd50:	20400001 	.word	0x20400001

0800cd54 <_fflush_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	690b      	ldr	r3, [r1, #16]
 800cd58:	4605      	mov	r5, r0
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	b913      	cbnz	r3, 800cd64 <_fflush_r+0x10>
 800cd5e:	2500      	movs	r5, #0
 800cd60:	4628      	mov	r0, r5
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	b118      	cbz	r0, 800cd6e <_fflush_r+0x1a>
 800cd66:	6983      	ldr	r3, [r0, #24]
 800cd68:	b90b      	cbnz	r3, 800cd6e <_fflush_r+0x1a>
 800cd6a:	f000 f887 	bl	800ce7c <__sinit>
 800cd6e:	4b14      	ldr	r3, [pc, #80]	; (800cdc0 <_fflush_r+0x6c>)
 800cd70:	429c      	cmp	r4, r3
 800cd72:	d11b      	bne.n	800cdac <_fflush_r+0x58>
 800cd74:	686c      	ldr	r4, [r5, #4]
 800cd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d0ef      	beq.n	800cd5e <_fflush_r+0xa>
 800cd7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd80:	07d0      	lsls	r0, r2, #31
 800cd82:	d404      	bmi.n	800cd8e <_fflush_r+0x3a>
 800cd84:	0599      	lsls	r1, r3, #22
 800cd86:	d402      	bmi.n	800cd8e <_fflush_r+0x3a>
 800cd88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd8a:	f7ff fd1a 	bl	800c7c2 <__retarget_lock_acquire_recursive>
 800cd8e:	4628      	mov	r0, r5
 800cd90:	4621      	mov	r1, r4
 800cd92:	f7ff ff59 	bl	800cc48 <__sflush_r>
 800cd96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd98:	07da      	lsls	r2, r3, #31
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	d4e0      	bmi.n	800cd60 <_fflush_r+0xc>
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	059b      	lsls	r3, r3, #22
 800cda2:	d4dd      	bmi.n	800cd60 <_fflush_r+0xc>
 800cda4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cda6:	f7ff fd0d 	bl	800c7c4 <__retarget_lock_release_recursive>
 800cdaa:	e7d9      	b.n	800cd60 <_fflush_r+0xc>
 800cdac:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <_fflush_r+0x70>)
 800cdae:	429c      	cmp	r4, r3
 800cdb0:	d101      	bne.n	800cdb6 <_fflush_r+0x62>
 800cdb2:	68ac      	ldr	r4, [r5, #8]
 800cdb4:	e7df      	b.n	800cd76 <_fflush_r+0x22>
 800cdb6:	4b04      	ldr	r3, [pc, #16]	; (800cdc8 <_fflush_r+0x74>)
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	bf08      	it	eq
 800cdbc:	68ec      	ldreq	r4, [r5, #12]
 800cdbe:	e7da      	b.n	800cd76 <_fflush_r+0x22>
 800cdc0:	0800fc9c 	.word	0x0800fc9c
 800cdc4:	0800fcbc 	.word	0x0800fcbc
 800cdc8:	0800fc7c 	.word	0x0800fc7c

0800cdcc <std>:
 800cdcc:	2300      	movs	r3, #0
 800cdce:	b510      	push	{r4, lr}
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	e9c0 3300 	strd	r3, r3, [r0]
 800cdd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdda:	6083      	str	r3, [r0, #8]
 800cddc:	8181      	strh	r1, [r0, #12]
 800cdde:	6643      	str	r3, [r0, #100]	; 0x64
 800cde0:	81c2      	strh	r2, [r0, #14]
 800cde2:	6183      	str	r3, [r0, #24]
 800cde4:	4619      	mov	r1, r3
 800cde6:	2208      	movs	r2, #8
 800cde8:	305c      	adds	r0, #92	; 0x5c
 800cdea:	f7fd fd31 	bl	800a850 <memset>
 800cdee:	4b05      	ldr	r3, [pc, #20]	; (800ce04 <std+0x38>)
 800cdf0:	6263      	str	r3, [r4, #36]	; 0x24
 800cdf2:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <std+0x3c>)
 800cdf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdf6:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <std+0x40>)
 800cdf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <std+0x44>)
 800cdfc:	6224      	str	r4, [r4, #32]
 800cdfe:	6323      	str	r3, [r4, #48]	; 0x30
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	bf00      	nop
 800ce04:	0800d109 	.word	0x0800d109
 800ce08:	0800d12b 	.word	0x0800d12b
 800ce0c:	0800d163 	.word	0x0800d163
 800ce10:	0800d187 	.word	0x0800d187

0800ce14 <_cleanup_r>:
 800ce14:	4901      	ldr	r1, [pc, #4]	; (800ce1c <_cleanup_r+0x8>)
 800ce16:	f000 b8af 	b.w	800cf78 <_fwalk_reent>
 800ce1a:	bf00      	nop
 800ce1c:	0800cd55 	.word	0x0800cd55

0800ce20 <__sfmoreglue>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	2268      	movs	r2, #104	; 0x68
 800ce24:	1e4d      	subs	r5, r1, #1
 800ce26:	4355      	muls	r5, r2
 800ce28:	460e      	mov	r6, r1
 800ce2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce2e:	f7fd fd83 	bl	800a938 <_malloc_r>
 800ce32:	4604      	mov	r4, r0
 800ce34:	b140      	cbz	r0, 800ce48 <__sfmoreglue+0x28>
 800ce36:	2100      	movs	r1, #0
 800ce38:	e9c0 1600 	strd	r1, r6, [r0]
 800ce3c:	300c      	adds	r0, #12
 800ce3e:	60a0      	str	r0, [r4, #8]
 800ce40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce44:	f7fd fd04 	bl	800a850 <memset>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}

0800ce4c <__sfp_lock_acquire>:
 800ce4c:	4801      	ldr	r0, [pc, #4]	; (800ce54 <__sfp_lock_acquire+0x8>)
 800ce4e:	f7ff bcb8 	b.w	800c7c2 <__retarget_lock_acquire_recursive>
 800ce52:	bf00      	nop
 800ce54:	200133e9 	.word	0x200133e9

0800ce58 <__sfp_lock_release>:
 800ce58:	4801      	ldr	r0, [pc, #4]	; (800ce60 <__sfp_lock_release+0x8>)
 800ce5a:	f7ff bcb3 	b.w	800c7c4 <__retarget_lock_release_recursive>
 800ce5e:	bf00      	nop
 800ce60:	200133e9 	.word	0x200133e9

0800ce64 <__sinit_lock_acquire>:
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <__sinit_lock_acquire+0x8>)
 800ce66:	f7ff bcac 	b.w	800c7c2 <__retarget_lock_acquire_recursive>
 800ce6a:	bf00      	nop
 800ce6c:	200133ea 	.word	0x200133ea

0800ce70 <__sinit_lock_release>:
 800ce70:	4801      	ldr	r0, [pc, #4]	; (800ce78 <__sinit_lock_release+0x8>)
 800ce72:	f7ff bca7 	b.w	800c7c4 <__retarget_lock_release_recursive>
 800ce76:	bf00      	nop
 800ce78:	200133ea 	.word	0x200133ea

0800ce7c <__sinit>:
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	4604      	mov	r4, r0
 800ce80:	f7ff fff0 	bl	800ce64 <__sinit_lock_acquire>
 800ce84:	69a3      	ldr	r3, [r4, #24]
 800ce86:	b11b      	cbz	r3, 800ce90 <__sinit+0x14>
 800ce88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce8c:	f7ff bff0 	b.w	800ce70 <__sinit_lock_release>
 800ce90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce94:	6523      	str	r3, [r4, #80]	; 0x50
 800ce96:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <__sinit+0x68>)
 800ce98:	4a13      	ldr	r2, [pc, #76]	; (800cee8 <__sinit+0x6c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce9e:	42a3      	cmp	r3, r4
 800cea0:	bf04      	itt	eq
 800cea2:	2301      	moveq	r3, #1
 800cea4:	61a3      	streq	r3, [r4, #24]
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 f820 	bl	800ceec <__sfp>
 800ceac:	6060      	str	r0, [r4, #4]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 f81c 	bl	800ceec <__sfp>
 800ceb4:	60a0      	str	r0, [r4, #8]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 f818 	bl	800ceec <__sfp>
 800cebc:	2200      	movs	r2, #0
 800cebe:	60e0      	str	r0, [r4, #12]
 800cec0:	2104      	movs	r1, #4
 800cec2:	6860      	ldr	r0, [r4, #4]
 800cec4:	f7ff ff82 	bl	800cdcc <std>
 800cec8:	68a0      	ldr	r0, [r4, #8]
 800ceca:	2201      	movs	r2, #1
 800cecc:	2109      	movs	r1, #9
 800cece:	f7ff ff7d 	bl	800cdcc <std>
 800ced2:	68e0      	ldr	r0, [r4, #12]
 800ced4:	2202      	movs	r2, #2
 800ced6:	2112      	movs	r1, #18
 800ced8:	f7ff ff78 	bl	800cdcc <std>
 800cedc:	2301      	movs	r3, #1
 800cede:	61a3      	str	r3, [r4, #24]
 800cee0:	e7d2      	b.n	800ce88 <__sinit+0xc>
 800cee2:	bf00      	nop
 800cee4:	0800f900 	.word	0x0800f900
 800cee8:	0800ce15 	.word	0x0800ce15

0800ceec <__sfp>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	4607      	mov	r7, r0
 800cef0:	f7ff ffac 	bl	800ce4c <__sfp_lock_acquire>
 800cef4:	4b1e      	ldr	r3, [pc, #120]	; (800cf70 <__sfp+0x84>)
 800cef6:	681e      	ldr	r6, [r3, #0]
 800cef8:	69b3      	ldr	r3, [r6, #24]
 800cefa:	b913      	cbnz	r3, 800cf02 <__sfp+0x16>
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7ff ffbd 	bl	800ce7c <__sinit>
 800cf02:	3648      	adds	r6, #72	; 0x48
 800cf04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	d503      	bpl.n	800cf14 <__sfp+0x28>
 800cf0c:	6833      	ldr	r3, [r6, #0]
 800cf0e:	b30b      	cbz	r3, 800cf54 <__sfp+0x68>
 800cf10:	6836      	ldr	r6, [r6, #0]
 800cf12:	e7f7      	b.n	800cf04 <__sfp+0x18>
 800cf14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf18:	b9d5      	cbnz	r5, 800cf50 <__sfp+0x64>
 800cf1a:	4b16      	ldr	r3, [pc, #88]	; (800cf74 <__sfp+0x88>)
 800cf1c:	60e3      	str	r3, [r4, #12]
 800cf1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf22:	6665      	str	r5, [r4, #100]	; 0x64
 800cf24:	f7ff fc4c 	bl	800c7c0 <__retarget_lock_init_recursive>
 800cf28:	f7ff ff96 	bl	800ce58 <__sfp_lock_release>
 800cf2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf34:	6025      	str	r5, [r4, #0]
 800cf36:	61a5      	str	r5, [r4, #24]
 800cf38:	2208      	movs	r2, #8
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf40:	f7fd fc86 	bl	800a850 <memset>
 800cf44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf50:	3468      	adds	r4, #104	; 0x68
 800cf52:	e7d9      	b.n	800cf08 <__sfp+0x1c>
 800cf54:	2104      	movs	r1, #4
 800cf56:	4638      	mov	r0, r7
 800cf58:	f7ff ff62 	bl	800ce20 <__sfmoreglue>
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	6030      	str	r0, [r6, #0]
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d1d5      	bne.n	800cf10 <__sfp+0x24>
 800cf64:	f7ff ff78 	bl	800ce58 <__sfp_lock_release>
 800cf68:	230c      	movs	r3, #12
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	e7ee      	b.n	800cf4c <__sfp+0x60>
 800cf6e:	bf00      	nop
 800cf70:	0800f900 	.word	0x0800f900
 800cf74:	ffff0001 	.word	0xffff0001

0800cf78 <_fwalk_reent>:
 800cf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	4688      	mov	r8, r1
 800cf80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf84:	2700      	movs	r7, #0
 800cf86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf8a:	f1b9 0901 	subs.w	r9, r9, #1
 800cf8e:	d505      	bpl.n	800cf9c <_fwalk_reent+0x24>
 800cf90:	6824      	ldr	r4, [r4, #0]
 800cf92:	2c00      	cmp	r4, #0
 800cf94:	d1f7      	bne.n	800cf86 <_fwalk_reent+0xe>
 800cf96:	4638      	mov	r0, r7
 800cf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9c:	89ab      	ldrh	r3, [r5, #12]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d907      	bls.n	800cfb2 <_fwalk_reent+0x3a>
 800cfa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	d003      	beq.n	800cfb2 <_fwalk_reent+0x3a>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4630      	mov	r0, r6
 800cfae:	47c0      	blx	r8
 800cfb0:	4307      	orrs	r7, r0
 800cfb2:	3568      	adds	r5, #104	; 0x68
 800cfb4:	e7e9      	b.n	800cf8a <_fwalk_reent+0x12>

0800cfb6 <__swhatbuf_r>:
 800cfb6:	b570      	push	{r4, r5, r6, lr}
 800cfb8:	460e      	mov	r6, r1
 800cfba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfbe:	2900      	cmp	r1, #0
 800cfc0:	b096      	sub	sp, #88	; 0x58
 800cfc2:	4614      	mov	r4, r2
 800cfc4:	461d      	mov	r5, r3
 800cfc6:	da08      	bge.n	800cfda <__swhatbuf_r+0x24>
 800cfc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	602a      	str	r2, [r5, #0]
 800cfd0:	061a      	lsls	r2, r3, #24
 800cfd2:	d410      	bmi.n	800cff6 <__swhatbuf_r+0x40>
 800cfd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfd8:	e00e      	b.n	800cff8 <__swhatbuf_r+0x42>
 800cfda:	466a      	mov	r2, sp
 800cfdc:	f000 f8fa 	bl	800d1d4 <_fstat_r>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	dbf1      	blt.n	800cfc8 <__swhatbuf_r+0x12>
 800cfe4:	9a01      	ldr	r2, [sp, #4]
 800cfe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfee:	425a      	negs	r2, r3
 800cff0:	415a      	adcs	r2, r3
 800cff2:	602a      	str	r2, [r5, #0]
 800cff4:	e7ee      	b.n	800cfd4 <__swhatbuf_r+0x1e>
 800cff6:	2340      	movs	r3, #64	; 0x40
 800cff8:	2000      	movs	r0, #0
 800cffa:	6023      	str	r3, [r4, #0]
 800cffc:	b016      	add	sp, #88	; 0x58
 800cffe:	bd70      	pop	{r4, r5, r6, pc}

0800d000 <__smakebuf_r>:
 800d000:	898b      	ldrh	r3, [r1, #12]
 800d002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d004:	079d      	lsls	r5, r3, #30
 800d006:	4606      	mov	r6, r0
 800d008:	460c      	mov	r4, r1
 800d00a:	d507      	bpl.n	800d01c <__smakebuf_r+0x1c>
 800d00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	6123      	str	r3, [r4, #16]
 800d014:	2301      	movs	r3, #1
 800d016:	6163      	str	r3, [r4, #20]
 800d018:	b002      	add	sp, #8
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	ab01      	add	r3, sp, #4
 800d01e:	466a      	mov	r2, sp
 800d020:	f7ff ffc9 	bl	800cfb6 <__swhatbuf_r>
 800d024:	9900      	ldr	r1, [sp, #0]
 800d026:	4605      	mov	r5, r0
 800d028:	4630      	mov	r0, r6
 800d02a:	f7fd fc85 	bl	800a938 <_malloc_r>
 800d02e:	b948      	cbnz	r0, 800d044 <__smakebuf_r+0x44>
 800d030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d034:	059a      	lsls	r2, r3, #22
 800d036:	d4ef      	bmi.n	800d018 <__smakebuf_r+0x18>
 800d038:	f023 0303 	bic.w	r3, r3, #3
 800d03c:	f043 0302 	orr.w	r3, r3, #2
 800d040:	81a3      	strh	r3, [r4, #12]
 800d042:	e7e3      	b.n	800d00c <__smakebuf_r+0xc>
 800d044:	4b0d      	ldr	r3, [pc, #52]	; (800d07c <__smakebuf_r+0x7c>)
 800d046:	62b3      	str	r3, [r6, #40]	; 0x28
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	6020      	str	r0, [r4, #0]
 800d04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d050:	81a3      	strh	r3, [r4, #12]
 800d052:	9b00      	ldr	r3, [sp, #0]
 800d054:	6163      	str	r3, [r4, #20]
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	6120      	str	r0, [r4, #16]
 800d05a:	b15b      	cbz	r3, 800d074 <__smakebuf_r+0x74>
 800d05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d060:	4630      	mov	r0, r6
 800d062:	f000 f8c9 	bl	800d1f8 <_isatty_r>
 800d066:	b128      	cbz	r0, 800d074 <__smakebuf_r+0x74>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	f043 0301 	orr.w	r3, r3, #1
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	89a0      	ldrh	r0, [r4, #12]
 800d076:	4305      	orrs	r5, r0
 800d078:	81a5      	strh	r5, [r4, #12]
 800d07a:	e7cd      	b.n	800d018 <__smakebuf_r+0x18>
 800d07c:	0800ce15 	.word	0x0800ce15

0800d080 <_raise_r>:
 800d080:	291f      	cmp	r1, #31
 800d082:	b538      	push	{r3, r4, r5, lr}
 800d084:	4604      	mov	r4, r0
 800d086:	460d      	mov	r5, r1
 800d088:	d904      	bls.n	800d094 <_raise_r+0x14>
 800d08a:	2316      	movs	r3, #22
 800d08c:	6003      	str	r3, [r0, #0]
 800d08e:	f04f 30ff 	mov.w	r0, #4294967295
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d096:	b112      	cbz	r2, 800d09e <_raise_r+0x1e>
 800d098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d09c:	b94b      	cbnz	r3, 800d0b2 <_raise_r+0x32>
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f000 f830 	bl	800d104 <_getpid_r>
 800d0a4:	462a      	mov	r2, r5
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0ae:	f000 b817 	b.w	800d0e0 <_kill_r>
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d00a      	beq.n	800d0cc <_raise_r+0x4c>
 800d0b6:	1c59      	adds	r1, r3, #1
 800d0b8:	d103      	bne.n	800d0c2 <_raise_r+0x42>
 800d0ba:	2316      	movs	r3, #22
 800d0bc:	6003      	str	r3, [r0, #0]
 800d0be:	2001      	movs	r0, #1
 800d0c0:	e7e7      	b.n	800d092 <_raise_r+0x12>
 800d0c2:	2400      	movs	r4, #0
 800d0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	4798      	blx	r3
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e7e0      	b.n	800d092 <_raise_r+0x12>

0800d0d0 <raise>:
 800d0d0:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <raise+0xc>)
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	f7ff bfd3 	b.w	800d080 <_raise_r>
 800d0da:	bf00      	nop
 800d0dc:	20000024 	.word	0x20000024

0800d0e0 <_kill_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4d07      	ldr	r5, [pc, #28]	; (800d100 <_kill_r+0x20>)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	602b      	str	r3, [r5, #0]
 800d0ee:	f7f6 f883 	bl	80031f8 <_kill>
 800d0f2:	1c43      	adds	r3, r0, #1
 800d0f4:	d102      	bne.n	800d0fc <_kill_r+0x1c>
 800d0f6:	682b      	ldr	r3, [r5, #0]
 800d0f8:	b103      	cbz	r3, 800d0fc <_kill_r+0x1c>
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	bd38      	pop	{r3, r4, r5, pc}
 800d0fe:	bf00      	nop
 800d100:	200133e4 	.word	0x200133e4

0800d104 <_getpid_r>:
 800d104:	f7f6 b870 	b.w	80031e8 <_getpid>

0800d108 <__sread>:
 800d108:	b510      	push	{r4, lr}
 800d10a:	460c      	mov	r4, r1
 800d10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d110:	f000 f894 	bl	800d23c <_read_r>
 800d114:	2800      	cmp	r0, #0
 800d116:	bfab      	itete	ge
 800d118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d11a:	89a3      	ldrhlt	r3, [r4, #12]
 800d11c:	181b      	addge	r3, r3, r0
 800d11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d122:	bfac      	ite	ge
 800d124:	6563      	strge	r3, [r4, #84]	; 0x54
 800d126:	81a3      	strhlt	r3, [r4, #12]
 800d128:	bd10      	pop	{r4, pc}

0800d12a <__swrite>:
 800d12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12e:	461f      	mov	r7, r3
 800d130:	898b      	ldrh	r3, [r1, #12]
 800d132:	05db      	lsls	r3, r3, #23
 800d134:	4605      	mov	r5, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4616      	mov	r6, r2
 800d13a:	d505      	bpl.n	800d148 <__swrite+0x1e>
 800d13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d140:	2302      	movs	r3, #2
 800d142:	2200      	movs	r2, #0
 800d144:	f000 f868 	bl	800d218 <_lseek_r>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	4632      	mov	r2, r6
 800d156:	463b      	mov	r3, r7
 800d158:	4628      	mov	r0, r5
 800d15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d15e:	f000 b817 	b.w	800d190 <_write_r>

0800d162 <__sseek>:
 800d162:	b510      	push	{r4, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16a:	f000 f855 	bl	800d218 <_lseek_r>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	bf15      	itete	ne
 800d174:	6560      	strne	r0, [r4, #84]	; 0x54
 800d176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d17e:	81a3      	strheq	r3, [r4, #12]
 800d180:	bf18      	it	ne
 800d182:	81a3      	strhne	r3, [r4, #12]
 800d184:	bd10      	pop	{r4, pc}

0800d186 <__sclose>:
 800d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18a:	f000 b813 	b.w	800d1b4 <_close_r>
	...

0800d190 <_write_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_write_r+0x20>)
 800d194:	4604      	mov	r4, r0
 800d196:	4608      	mov	r0, r1
 800d198:	4611      	mov	r1, r2
 800d19a:	2200      	movs	r2, #0
 800d19c:	602a      	str	r2, [r5, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f7f6 f861 	bl	8003266 <_write>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	d102      	bne.n	800d1ae <_write_r+0x1e>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	b103      	cbz	r3, 800d1ae <_write_r+0x1e>
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	bd38      	pop	{r3, r4, r5, pc}
 800d1b0:	200133e4 	.word	0x200133e4

0800d1b4 <_close_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d06      	ldr	r5, [pc, #24]	; (800d1d0 <_close_r+0x1c>)
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	4608      	mov	r0, r1
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	f7f6 f86d 	bl	800329e <_close>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_close_r+0x1a>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_close_r+0x1a>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	200133e4 	.word	0x200133e4

0800d1d4 <_fstat_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d07      	ldr	r5, [pc, #28]	; (800d1f4 <_fstat_r+0x20>)
 800d1d8:	2300      	movs	r3, #0
 800d1da:	4604      	mov	r4, r0
 800d1dc:	4608      	mov	r0, r1
 800d1de:	4611      	mov	r1, r2
 800d1e0:	602b      	str	r3, [r5, #0]
 800d1e2:	f7f6 f868 	bl	80032b6 <_fstat>
 800d1e6:	1c43      	adds	r3, r0, #1
 800d1e8:	d102      	bne.n	800d1f0 <_fstat_r+0x1c>
 800d1ea:	682b      	ldr	r3, [r5, #0]
 800d1ec:	b103      	cbz	r3, 800d1f0 <_fstat_r+0x1c>
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	bd38      	pop	{r3, r4, r5, pc}
 800d1f2:	bf00      	nop
 800d1f4:	200133e4 	.word	0x200133e4

0800d1f8 <_isatty_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d06      	ldr	r5, [pc, #24]	; (800d214 <_isatty_r+0x1c>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	f7f6 f867 	bl	80032d6 <_isatty>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_isatty_r+0x1a>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_isatty_r+0x1a>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	200133e4 	.word	0x200133e4

0800d218 <_lseek_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	; (800d238 <_lseek_r+0x20>)
 800d21c:	4604      	mov	r4, r0
 800d21e:	4608      	mov	r0, r1
 800d220:	4611      	mov	r1, r2
 800d222:	2200      	movs	r2, #0
 800d224:	602a      	str	r2, [r5, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	f7f6 f860 	bl	80032ec <_lseek>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	d102      	bne.n	800d236 <_lseek_r+0x1e>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	b103      	cbz	r3, 800d236 <_lseek_r+0x1e>
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	200133e4 	.word	0x200133e4

0800d23c <_read_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d07      	ldr	r5, [pc, #28]	; (800d25c <_read_r+0x20>)
 800d240:	4604      	mov	r4, r0
 800d242:	4608      	mov	r0, r1
 800d244:	4611      	mov	r1, r2
 800d246:	2200      	movs	r2, #0
 800d248:	602a      	str	r2, [r5, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	f7f5 ffee 	bl	800322c <_read>
 800d250:	1c43      	adds	r3, r0, #1
 800d252:	d102      	bne.n	800d25a <_read_r+0x1e>
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	b103      	cbz	r3, 800d25a <_read_r+0x1e>
 800d258:	6023      	str	r3, [r4, #0]
 800d25a:	bd38      	pop	{r3, r4, r5, pc}
 800d25c:	200133e4 	.word	0x200133e4

0800d260 <cos>:
 800d260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d262:	ec53 2b10 	vmov	r2, r3, d0
 800d266:	4826      	ldr	r0, [pc, #152]	; (800d300 <cos+0xa0>)
 800d268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d26c:	4281      	cmp	r1, r0
 800d26e:	dc06      	bgt.n	800d27e <cos+0x1e>
 800d270:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d2f8 <cos+0x98>
 800d274:	b005      	add	sp, #20
 800d276:	f85d eb04 	ldr.w	lr, [sp], #4
 800d27a:	f001 ba41 	b.w	800e700 <__kernel_cos>
 800d27e:	4821      	ldr	r0, [pc, #132]	; (800d304 <cos+0xa4>)
 800d280:	4281      	cmp	r1, r0
 800d282:	dd09      	ble.n	800d298 <cos+0x38>
 800d284:	ee10 0a10 	vmov	r0, s0
 800d288:	4619      	mov	r1, r3
 800d28a:	f7f3 f815 	bl	80002b8 <__aeabi_dsub>
 800d28e:	ec41 0b10 	vmov	d0, r0, r1
 800d292:	b005      	add	sp, #20
 800d294:	f85d fb04 	ldr.w	pc, [sp], #4
 800d298:	4668      	mov	r0, sp
 800d29a:	f000 ff71 	bl	800e180 <__ieee754_rem_pio2>
 800d29e:	f000 0003 	and.w	r0, r0, #3
 800d2a2:	2801      	cmp	r0, #1
 800d2a4:	d00b      	beq.n	800d2be <cos+0x5e>
 800d2a6:	2802      	cmp	r0, #2
 800d2a8:	d016      	beq.n	800d2d8 <cos+0x78>
 800d2aa:	b9e0      	cbnz	r0, 800d2e6 <cos+0x86>
 800d2ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2b0:	ed9d 0b00 	vldr	d0, [sp]
 800d2b4:	f001 fa24 	bl	800e700 <__kernel_cos>
 800d2b8:	ec51 0b10 	vmov	r0, r1, d0
 800d2bc:	e7e7      	b.n	800d28e <cos+0x2e>
 800d2be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2c2:	ed9d 0b00 	vldr	d0, [sp]
 800d2c6:	f001 fe33 	bl	800ef30 <__kernel_sin>
 800d2ca:	ec53 2b10 	vmov	r2, r3, d0
 800d2ce:	ee10 0a10 	vmov	r0, s0
 800d2d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d2d6:	e7da      	b.n	800d28e <cos+0x2e>
 800d2d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2dc:	ed9d 0b00 	vldr	d0, [sp]
 800d2e0:	f001 fa0e 	bl	800e700 <__kernel_cos>
 800d2e4:	e7f1      	b.n	800d2ca <cos+0x6a>
 800d2e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ea:	ed9d 0b00 	vldr	d0, [sp]
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	f001 fe1e 	bl	800ef30 <__kernel_sin>
 800d2f4:	e7e0      	b.n	800d2b8 <cos+0x58>
 800d2f6:	bf00      	nop
	...
 800d300:	3fe921fb 	.word	0x3fe921fb
 800d304:	7fefffff 	.word	0x7fefffff

0800d308 <round>:
 800d308:	ec51 0b10 	vmov	r0, r1, d0
 800d30c:	b570      	push	{r4, r5, r6, lr}
 800d30e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800d312:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d316:	2c13      	cmp	r4, #19
 800d318:	ee10 2a10 	vmov	r2, s0
 800d31c:	460b      	mov	r3, r1
 800d31e:	dc19      	bgt.n	800d354 <round+0x4c>
 800d320:	2c00      	cmp	r4, #0
 800d322:	da09      	bge.n	800d338 <round+0x30>
 800d324:	3401      	adds	r4, #1
 800d326:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800d32a:	d103      	bne.n	800d334 <round+0x2c>
 800d32c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d330:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d334:	2200      	movs	r2, #0
 800d336:	e028      	b.n	800d38a <round+0x82>
 800d338:	4d15      	ldr	r5, [pc, #84]	; (800d390 <round+0x88>)
 800d33a:	4125      	asrs	r5, r4
 800d33c:	ea01 0605 	and.w	r6, r1, r5
 800d340:	4332      	orrs	r2, r6
 800d342:	d00e      	beq.n	800d362 <round+0x5a>
 800d344:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d348:	fa42 f404 	asr.w	r4, r2, r4
 800d34c:	4423      	add	r3, r4
 800d34e:	ea23 0305 	bic.w	r3, r3, r5
 800d352:	e7ef      	b.n	800d334 <round+0x2c>
 800d354:	2c33      	cmp	r4, #51	; 0x33
 800d356:	dd07      	ble.n	800d368 <round+0x60>
 800d358:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d35c:	d101      	bne.n	800d362 <round+0x5a>
 800d35e:	f7f2 ffad 	bl	80002bc <__adddf3>
 800d362:	ec41 0b10 	vmov	d0, r0, r1
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800d36c:	f04f 35ff 	mov.w	r5, #4294967295
 800d370:	40f5      	lsrs	r5, r6
 800d372:	4228      	tst	r0, r5
 800d374:	d0f5      	beq.n	800d362 <round+0x5a>
 800d376:	2101      	movs	r1, #1
 800d378:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d37c:	fa01 f404 	lsl.w	r4, r1, r4
 800d380:	1912      	adds	r2, r2, r4
 800d382:	bf28      	it	cs
 800d384:	185b      	addcs	r3, r3, r1
 800d386:	ea22 0205 	bic.w	r2, r2, r5
 800d38a:	4619      	mov	r1, r3
 800d38c:	4610      	mov	r0, r2
 800d38e:	e7e8      	b.n	800d362 <round+0x5a>
 800d390:	000fffff 	.word	0x000fffff
 800d394:	00000000 	.word	0x00000000

0800d398 <sin>:
 800d398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d39a:	ec53 2b10 	vmov	r2, r3, d0
 800d39e:	4828      	ldr	r0, [pc, #160]	; (800d440 <sin+0xa8>)
 800d3a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d3a4:	4281      	cmp	r1, r0
 800d3a6:	dc07      	bgt.n	800d3b8 <sin+0x20>
 800d3a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d438 <sin+0xa0>
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	b005      	add	sp, #20
 800d3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3b4:	f001 bdbc 	b.w	800ef30 <__kernel_sin>
 800d3b8:	4822      	ldr	r0, [pc, #136]	; (800d444 <sin+0xac>)
 800d3ba:	4281      	cmp	r1, r0
 800d3bc:	dd09      	ble.n	800d3d2 <sin+0x3a>
 800d3be:	ee10 0a10 	vmov	r0, s0
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	f7f2 ff78 	bl	80002b8 <__aeabi_dsub>
 800d3c8:	ec41 0b10 	vmov	d0, r0, r1
 800d3cc:	b005      	add	sp, #20
 800d3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3d2:	4668      	mov	r0, sp
 800d3d4:	f000 fed4 	bl	800e180 <__ieee754_rem_pio2>
 800d3d8:	f000 0003 	and.w	r0, r0, #3
 800d3dc:	2801      	cmp	r0, #1
 800d3de:	d00c      	beq.n	800d3fa <sin+0x62>
 800d3e0:	2802      	cmp	r0, #2
 800d3e2:	d011      	beq.n	800d408 <sin+0x70>
 800d3e4:	b9f0      	cbnz	r0, 800d424 <sin+0x8c>
 800d3e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3ea:	ed9d 0b00 	vldr	d0, [sp]
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	f001 fd9e 	bl	800ef30 <__kernel_sin>
 800d3f4:	ec51 0b10 	vmov	r0, r1, d0
 800d3f8:	e7e6      	b.n	800d3c8 <sin+0x30>
 800d3fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3fe:	ed9d 0b00 	vldr	d0, [sp]
 800d402:	f001 f97d 	bl	800e700 <__kernel_cos>
 800d406:	e7f5      	b.n	800d3f4 <sin+0x5c>
 800d408:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d40c:	ed9d 0b00 	vldr	d0, [sp]
 800d410:	2001      	movs	r0, #1
 800d412:	f001 fd8d 	bl	800ef30 <__kernel_sin>
 800d416:	ec53 2b10 	vmov	r2, r3, d0
 800d41a:	ee10 0a10 	vmov	r0, s0
 800d41e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d422:	e7d1      	b.n	800d3c8 <sin+0x30>
 800d424:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d428:	ed9d 0b00 	vldr	d0, [sp]
 800d42c:	f001 f968 	bl	800e700 <__kernel_cos>
 800d430:	e7f1      	b.n	800d416 <sin+0x7e>
 800d432:	bf00      	nop
 800d434:	f3af 8000 	nop.w
	...
 800d440:	3fe921fb 	.word	0x3fe921fb
 800d444:	7fefffff 	.word	0x7fefffff

0800d448 <atan2>:
 800d448:	f000 b89e 	b.w	800d588 <__ieee754_atan2>

0800d44c <pow>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	ed2d 8b02 	vpush	{d8}
 800d452:	eeb0 8a40 	vmov.f32	s16, s0
 800d456:	eef0 8a60 	vmov.f32	s17, s1
 800d45a:	ec55 4b11 	vmov	r4, r5, d1
 800d45e:	f000 f95f 	bl	800d720 <__ieee754_pow>
 800d462:	4622      	mov	r2, r4
 800d464:	462b      	mov	r3, r5
 800d466:	4620      	mov	r0, r4
 800d468:	4629      	mov	r1, r5
 800d46a:	ec57 6b10 	vmov	r6, r7, d0
 800d46e:	f7f3 fb75 	bl	8000b5c <__aeabi_dcmpun>
 800d472:	2800      	cmp	r0, #0
 800d474:	d13b      	bne.n	800d4ee <pow+0xa2>
 800d476:	ec51 0b18 	vmov	r0, r1, d8
 800d47a:	2200      	movs	r2, #0
 800d47c:	2300      	movs	r3, #0
 800d47e:	f7f3 fb3b 	bl	8000af8 <__aeabi_dcmpeq>
 800d482:	b1b8      	cbz	r0, 800d4b4 <pow+0x68>
 800d484:	2200      	movs	r2, #0
 800d486:	2300      	movs	r3, #0
 800d488:	4620      	mov	r0, r4
 800d48a:	4629      	mov	r1, r5
 800d48c:	f7f3 fb34 	bl	8000af8 <__aeabi_dcmpeq>
 800d490:	2800      	cmp	r0, #0
 800d492:	d146      	bne.n	800d522 <pow+0xd6>
 800d494:	ec45 4b10 	vmov	d0, r4, r5
 800d498:	f001 ffe3 	bl	800f462 <finite>
 800d49c:	b338      	cbz	r0, 800d4ee <pow+0xa2>
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	f7f3 fb31 	bl	8000b0c <__aeabi_dcmplt>
 800d4aa:	b300      	cbz	r0, 800d4ee <pow+0xa2>
 800d4ac:	f7fd f990 	bl	800a7d0 <__errno>
 800d4b0:	2322      	movs	r3, #34	; 0x22
 800d4b2:	e01b      	b.n	800d4ec <pow+0xa0>
 800d4b4:	ec47 6b10 	vmov	d0, r6, r7
 800d4b8:	f001 ffd3 	bl	800f462 <finite>
 800d4bc:	b9e0      	cbnz	r0, 800d4f8 <pow+0xac>
 800d4be:	eeb0 0a48 	vmov.f32	s0, s16
 800d4c2:	eef0 0a68 	vmov.f32	s1, s17
 800d4c6:	f001 ffcc 	bl	800f462 <finite>
 800d4ca:	b1a8      	cbz	r0, 800d4f8 <pow+0xac>
 800d4cc:	ec45 4b10 	vmov	d0, r4, r5
 800d4d0:	f001 ffc7 	bl	800f462 <finite>
 800d4d4:	b180      	cbz	r0, 800d4f8 <pow+0xac>
 800d4d6:	4632      	mov	r2, r6
 800d4d8:	463b      	mov	r3, r7
 800d4da:	4630      	mov	r0, r6
 800d4dc:	4639      	mov	r1, r7
 800d4de:	f7f3 fb3d 	bl	8000b5c <__aeabi_dcmpun>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d0e2      	beq.n	800d4ac <pow+0x60>
 800d4e6:	f7fd f973 	bl	800a7d0 <__errno>
 800d4ea:	2321      	movs	r3, #33	; 0x21
 800d4ec:	6003      	str	r3, [r0, #0]
 800d4ee:	ecbd 8b02 	vpop	{d8}
 800d4f2:	ec47 6b10 	vmov	d0, r6, r7
 800d4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f3 fafa 	bl	8000af8 <__aeabi_dcmpeq>
 800d504:	2800      	cmp	r0, #0
 800d506:	d0f2      	beq.n	800d4ee <pow+0xa2>
 800d508:	eeb0 0a48 	vmov.f32	s0, s16
 800d50c:	eef0 0a68 	vmov.f32	s1, s17
 800d510:	f001 ffa7 	bl	800f462 <finite>
 800d514:	2800      	cmp	r0, #0
 800d516:	d0ea      	beq.n	800d4ee <pow+0xa2>
 800d518:	ec45 4b10 	vmov	d0, r4, r5
 800d51c:	f001 ffa1 	bl	800f462 <finite>
 800d520:	e7c3      	b.n	800d4aa <pow+0x5e>
 800d522:	4f01      	ldr	r7, [pc, #4]	; (800d528 <pow+0xdc>)
 800d524:	2600      	movs	r6, #0
 800d526:	e7e2      	b.n	800d4ee <pow+0xa2>
 800d528:	3ff00000 	.word	0x3ff00000

0800d52c <sqrt>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	ed2d 8b02 	vpush	{d8}
 800d532:	ec55 4b10 	vmov	r4, r5, d0
 800d536:	f001 f82f 	bl	800e598 <__ieee754_sqrt>
 800d53a:	4622      	mov	r2, r4
 800d53c:	462b      	mov	r3, r5
 800d53e:	4620      	mov	r0, r4
 800d540:	4629      	mov	r1, r5
 800d542:	eeb0 8a40 	vmov.f32	s16, s0
 800d546:	eef0 8a60 	vmov.f32	s17, s1
 800d54a:	f7f3 fb07 	bl	8000b5c <__aeabi_dcmpun>
 800d54e:	b990      	cbnz	r0, 800d576 <sqrt+0x4a>
 800d550:	2200      	movs	r2, #0
 800d552:	2300      	movs	r3, #0
 800d554:	4620      	mov	r0, r4
 800d556:	4629      	mov	r1, r5
 800d558:	f7f3 fad8 	bl	8000b0c <__aeabi_dcmplt>
 800d55c:	b158      	cbz	r0, 800d576 <sqrt+0x4a>
 800d55e:	f7fd f937 	bl	800a7d0 <__errno>
 800d562:	2321      	movs	r3, #33	; 0x21
 800d564:	6003      	str	r3, [r0, #0]
 800d566:	2200      	movs	r2, #0
 800d568:	2300      	movs	r3, #0
 800d56a:	4610      	mov	r0, r2
 800d56c:	4619      	mov	r1, r3
 800d56e:	f7f3 f985 	bl	800087c <__aeabi_ddiv>
 800d572:	ec41 0b18 	vmov	d8, r0, r1
 800d576:	eeb0 0a48 	vmov.f32	s0, s16
 800d57a:	eef0 0a68 	vmov.f32	s1, s17
 800d57e:	ecbd 8b02 	vpop	{d8}
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	0000      	movs	r0, r0
	...

0800d588 <__ieee754_atan2>:
 800d588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d58c:	ec57 6b11 	vmov	r6, r7, d1
 800d590:	4273      	negs	r3, r6
 800d592:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d718 <__ieee754_atan2+0x190>
 800d596:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d59a:	4333      	orrs	r3, r6
 800d59c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d5a0:	4573      	cmp	r3, lr
 800d5a2:	ec51 0b10 	vmov	r0, r1, d0
 800d5a6:	ee11 8a10 	vmov	r8, s2
 800d5aa:	d80a      	bhi.n	800d5c2 <__ieee754_atan2+0x3a>
 800d5ac:	4244      	negs	r4, r0
 800d5ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d5b2:	4304      	orrs	r4, r0
 800d5b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d5b8:	4574      	cmp	r4, lr
 800d5ba:	ee10 9a10 	vmov	r9, s0
 800d5be:	468c      	mov	ip, r1
 800d5c0:	d907      	bls.n	800d5d2 <__ieee754_atan2+0x4a>
 800d5c2:	4632      	mov	r2, r6
 800d5c4:	463b      	mov	r3, r7
 800d5c6:	f7f2 fe79 	bl	80002bc <__adddf3>
 800d5ca:	ec41 0b10 	vmov	d0, r0, r1
 800d5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d5d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d5da:	4334      	orrs	r4, r6
 800d5dc:	d103      	bne.n	800d5e6 <__ieee754_atan2+0x5e>
 800d5de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e2:	f001 bd95 	b.w	800f110 <atan>
 800d5e6:	17bc      	asrs	r4, r7, #30
 800d5e8:	f004 0402 	and.w	r4, r4, #2
 800d5ec:	ea53 0909 	orrs.w	r9, r3, r9
 800d5f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d5f4:	d107      	bne.n	800d606 <__ieee754_atan2+0x7e>
 800d5f6:	2c02      	cmp	r4, #2
 800d5f8:	d060      	beq.n	800d6bc <__ieee754_atan2+0x134>
 800d5fa:	2c03      	cmp	r4, #3
 800d5fc:	d1e5      	bne.n	800d5ca <__ieee754_atan2+0x42>
 800d5fe:	a142      	add	r1, pc, #264	; (adr r1, 800d708 <__ieee754_atan2+0x180>)
 800d600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d604:	e7e1      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d606:	ea52 0808 	orrs.w	r8, r2, r8
 800d60a:	d106      	bne.n	800d61a <__ieee754_atan2+0x92>
 800d60c:	f1bc 0f00 	cmp.w	ip, #0
 800d610:	da5f      	bge.n	800d6d2 <__ieee754_atan2+0x14a>
 800d612:	a13f      	add	r1, pc, #252	; (adr r1, 800d710 <__ieee754_atan2+0x188>)
 800d614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d618:	e7d7      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d61a:	4572      	cmp	r2, lr
 800d61c:	d10f      	bne.n	800d63e <__ieee754_atan2+0xb6>
 800d61e:	4293      	cmp	r3, r2
 800d620:	f104 34ff 	add.w	r4, r4, #4294967295
 800d624:	d107      	bne.n	800d636 <__ieee754_atan2+0xae>
 800d626:	2c02      	cmp	r4, #2
 800d628:	d84c      	bhi.n	800d6c4 <__ieee754_atan2+0x13c>
 800d62a:	4b35      	ldr	r3, [pc, #212]	; (800d700 <__ieee754_atan2+0x178>)
 800d62c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d630:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d634:	e7c9      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d636:	2c02      	cmp	r4, #2
 800d638:	d848      	bhi.n	800d6cc <__ieee754_atan2+0x144>
 800d63a:	4b32      	ldr	r3, [pc, #200]	; (800d704 <__ieee754_atan2+0x17c>)
 800d63c:	e7f6      	b.n	800d62c <__ieee754_atan2+0xa4>
 800d63e:	4573      	cmp	r3, lr
 800d640:	d0e4      	beq.n	800d60c <__ieee754_atan2+0x84>
 800d642:	1a9b      	subs	r3, r3, r2
 800d644:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d648:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d64c:	da1e      	bge.n	800d68c <__ieee754_atan2+0x104>
 800d64e:	2f00      	cmp	r7, #0
 800d650:	da01      	bge.n	800d656 <__ieee754_atan2+0xce>
 800d652:	323c      	adds	r2, #60	; 0x3c
 800d654:	db1e      	blt.n	800d694 <__ieee754_atan2+0x10c>
 800d656:	4632      	mov	r2, r6
 800d658:	463b      	mov	r3, r7
 800d65a:	f7f3 f90f 	bl	800087c <__aeabi_ddiv>
 800d65e:	ec41 0b10 	vmov	d0, r0, r1
 800d662:	f001 fef5 	bl	800f450 <fabs>
 800d666:	f001 fd53 	bl	800f110 <atan>
 800d66a:	ec51 0b10 	vmov	r0, r1, d0
 800d66e:	2c01      	cmp	r4, #1
 800d670:	d013      	beq.n	800d69a <__ieee754_atan2+0x112>
 800d672:	2c02      	cmp	r4, #2
 800d674:	d015      	beq.n	800d6a2 <__ieee754_atan2+0x11a>
 800d676:	2c00      	cmp	r4, #0
 800d678:	d0a7      	beq.n	800d5ca <__ieee754_atan2+0x42>
 800d67a:	a319      	add	r3, pc, #100	; (adr r3, 800d6e0 <__ieee754_atan2+0x158>)
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	f7f2 fe1a 	bl	80002b8 <__aeabi_dsub>
 800d684:	a318      	add	r3, pc, #96	; (adr r3, 800d6e8 <__ieee754_atan2+0x160>)
 800d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68a:	e014      	b.n	800d6b6 <__ieee754_atan2+0x12e>
 800d68c:	a118      	add	r1, pc, #96	; (adr r1, 800d6f0 <__ieee754_atan2+0x168>)
 800d68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d692:	e7ec      	b.n	800d66e <__ieee754_atan2+0xe6>
 800d694:	2000      	movs	r0, #0
 800d696:	2100      	movs	r1, #0
 800d698:	e7e9      	b.n	800d66e <__ieee754_atan2+0xe6>
 800d69a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d69e:	4619      	mov	r1, r3
 800d6a0:	e793      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d6a2:	a30f      	add	r3, pc, #60	; (adr r3, 800d6e0 <__ieee754_atan2+0x158>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f7f2 fe06 	bl	80002b8 <__aeabi_dsub>
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	a10d      	add	r1, pc, #52	; (adr r1, 800d6e8 <__ieee754_atan2+0x160>)
 800d6b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6b6:	f7f2 fdff 	bl	80002b8 <__aeabi_dsub>
 800d6ba:	e786      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d6bc:	a10a      	add	r1, pc, #40	; (adr r1, 800d6e8 <__ieee754_atan2+0x160>)
 800d6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c2:	e782      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d6c4:	a10c      	add	r1, pc, #48	; (adr r1, 800d6f8 <__ieee754_atan2+0x170>)
 800d6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ca:	e77e      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	e77b      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d6d2:	a107      	add	r1, pc, #28	; (adr r1, 800d6f0 <__ieee754_atan2+0x168>)
 800d6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6d8:	e777      	b.n	800d5ca <__ieee754_atan2+0x42>
 800d6da:	bf00      	nop
 800d6dc:	f3af 8000 	nop.w
 800d6e0:	33145c07 	.word	0x33145c07
 800d6e4:	3ca1a626 	.word	0x3ca1a626
 800d6e8:	54442d18 	.word	0x54442d18
 800d6ec:	400921fb 	.word	0x400921fb
 800d6f0:	54442d18 	.word	0x54442d18
 800d6f4:	3ff921fb 	.word	0x3ff921fb
 800d6f8:	54442d18 	.word	0x54442d18
 800d6fc:	3fe921fb 	.word	0x3fe921fb
 800d700:	0800fce0 	.word	0x0800fce0
 800d704:	0800fcf8 	.word	0x0800fcf8
 800d708:	54442d18 	.word	0x54442d18
 800d70c:	c00921fb 	.word	0xc00921fb
 800d710:	54442d18 	.word	0x54442d18
 800d714:	bff921fb 	.word	0xbff921fb
 800d718:	7ff00000 	.word	0x7ff00000
 800d71c:	00000000 	.word	0x00000000

0800d720 <__ieee754_pow>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	ed2d 8b06 	vpush	{d8-d10}
 800d728:	b089      	sub	sp, #36	; 0x24
 800d72a:	ed8d 1b00 	vstr	d1, [sp]
 800d72e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d732:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d736:	ea58 0102 	orrs.w	r1, r8, r2
 800d73a:	ec57 6b10 	vmov	r6, r7, d0
 800d73e:	d115      	bne.n	800d76c <__ieee754_pow+0x4c>
 800d740:	19b3      	adds	r3, r6, r6
 800d742:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d746:	4152      	adcs	r2, r2
 800d748:	4299      	cmp	r1, r3
 800d74a:	4b89      	ldr	r3, [pc, #548]	; (800d970 <__ieee754_pow+0x250>)
 800d74c:	4193      	sbcs	r3, r2
 800d74e:	f080 84d2 	bcs.w	800e0f6 <__ieee754_pow+0x9d6>
 800d752:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d756:	4630      	mov	r0, r6
 800d758:	4639      	mov	r1, r7
 800d75a:	f7f2 fdaf 	bl	80002bc <__adddf3>
 800d75e:	ec41 0b10 	vmov	d0, r0, r1
 800d762:	b009      	add	sp, #36	; 0x24
 800d764:	ecbd 8b06 	vpop	{d8-d10}
 800d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76c:	4b81      	ldr	r3, [pc, #516]	; (800d974 <__ieee754_pow+0x254>)
 800d76e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d772:	429c      	cmp	r4, r3
 800d774:	ee10 aa10 	vmov	sl, s0
 800d778:	463d      	mov	r5, r7
 800d77a:	dc06      	bgt.n	800d78a <__ieee754_pow+0x6a>
 800d77c:	d101      	bne.n	800d782 <__ieee754_pow+0x62>
 800d77e:	2e00      	cmp	r6, #0
 800d780:	d1e7      	bne.n	800d752 <__ieee754_pow+0x32>
 800d782:	4598      	cmp	r8, r3
 800d784:	dc01      	bgt.n	800d78a <__ieee754_pow+0x6a>
 800d786:	d10f      	bne.n	800d7a8 <__ieee754_pow+0x88>
 800d788:	b172      	cbz	r2, 800d7a8 <__ieee754_pow+0x88>
 800d78a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d78e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d792:	ea55 050a 	orrs.w	r5, r5, sl
 800d796:	d1dc      	bne.n	800d752 <__ieee754_pow+0x32>
 800d798:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d79c:	18db      	adds	r3, r3, r3
 800d79e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d7a2:	4152      	adcs	r2, r2
 800d7a4:	429d      	cmp	r5, r3
 800d7a6:	e7d0      	b.n	800d74a <__ieee754_pow+0x2a>
 800d7a8:	2d00      	cmp	r5, #0
 800d7aa:	da3b      	bge.n	800d824 <__ieee754_pow+0x104>
 800d7ac:	4b72      	ldr	r3, [pc, #456]	; (800d978 <__ieee754_pow+0x258>)
 800d7ae:	4598      	cmp	r8, r3
 800d7b0:	dc51      	bgt.n	800d856 <__ieee754_pow+0x136>
 800d7b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d7b6:	4598      	cmp	r8, r3
 800d7b8:	f340 84ac 	ble.w	800e114 <__ieee754_pow+0x9f4>
 800d7bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d7c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7c4:	2b14      	cmp	r3, #20
 800d7c6:	dd0f      	ble.n	800d7e8 <__ieee754_pow+0xc8>
 800d7c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d7cc:	fa22 f103 	lsr.w	r1, r2, r3
 800d7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	f040 849d 	bne.w	800e114 <__ieee754_pow+0x9f4>
 800d7da:	f001 0101 	and.w	r1, r1, #1
 800d7de:	f1c1 0302 	rsb	r3, r1, #2
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	b182      	cbz	r2, 800d808 <__ieee754_pow+0xe8>
 800d7e6:	e05f      	b.n	800d8a8 <__ieee754_pow+0x188>
 800d7e8:	2a00      	cmp	r2, #0
 800d7ea:	d15b      	bne.n	800d8a4 <__ieee754_pow+0x184>
 800d7ec:	f1c3 0314 	rsb	r3, r3, #20
 800d7f0:	fa48 f103 	asr.w	r1, r8, r3
 800d7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d7f8:	4543      	cmp	r3, r8
 800d7fa:	f040 8488 	bne.w	800e10e <__ieee754_pow+0x9ee>
 800d7fe:	f001 0101 	and.w	r1, r1, #1
 800d802:	f1c1 0302 	rsb	r3, r1, #2
 800d806:	9304      	str	r3, [sp, #16]
 800d808:	4b5c      	ldr	r3, [pc, #368]	; (800d97c <__ieee754_pow+0x25c>)
 800d80a:	4598      	cmp	r8, r3
 800d80c:	d132      	bne.n	800d874 <__ieee754_pow+0x154>
 800d80e:	f1b9 0f00 	cmp.w	r9, #0
 800d812:	f280 8478 	bge.w	800e106 <__ieee754_pow+0x9e6>
 800d816:	4959      	ldr	r1, [pc, #356]	; (800d97c <__ieee754_pow+0x25c>)
 800d818:	4632      	mov	r2, r6
 800d81a:	463b      	mov	r3, r7
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7f3 f82d 	bl	800087c <__aeabi_ddiv>
 800d822:	e79c      	b.n	800d75e <__ieee754_pow+0x3e>
 800d824:	2300      	movs	r3, #0
 800d826:	9304      	str	r3, [sp, #16]
 800d828:	2a00      	cmp	r2, #0
 800d82a:	d13d      	bne.n	800d8a8 <__ieee754_pow+0x188>
 800d82c:	4b51      	ldr	r3, [pc, #324]	; (800d974 <__ieee754_pow+0x254>)
 800d82e:	4598      	cmp	r8, r3
 800d830:	d1ea      	bne.n	800d808 <__ieee754_pow+0xe8>
 800d832:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d836:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d83a:	ea53 030a 	orrs.w	r3, r3, sl
 800d83e:	f000 845a 	beq.w	800e0f6 <__ieee754_pow+0x9d6>
 800d842:	4b4f      	ldr	r3, [pc, #316]	; (800d980 <__ieee754_pow+0x260>)
 800d844:	429c      	cmp	r4, r3
 800d846:	dd08      	ble.n	800d85a <__ieee754_pow+0x13a>
 800d848:	f1b9 0f00 	cmp.w	r9, #0
 800d84c:	f2c0 8457 	blt.w	800e0fe <__ieee754_pow+0x9de>
 800d850:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d854:	e783      	b.n	800d75e <__ieee754_pow+0x3e>
 800d856:	2302      	movs	r3, #2
 800d858:	e7e5      	b.n	800d826 <__ieee754_pow+0x106>
 800d85a:	f1b9 0f00 	cmp.w	r9, #0
 800d85e:	f04f 0000 	mov.w	r0, #0
 800d862:	f04f 0100 	mov.w	r1, #0
 800d866:	f6bf af7a 	bge.w	800d75e <__ieee754_pow+0x3e>
 800d86a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d86e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d872:	e774      	b.n	800d75e <__ieee754_pow+0x3e>
 800d874:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d878:	d106      	bne.n	800d888 <__ieee754_pow+0x168>
 800d87a:	4632      	mov	r2, r6
 800d87c:	463b      	mov	r3, r7
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	f7f2 fed1 	bl	8000628 <__aeabi_dmul>
 800d886:	e76a      	b.n	800d75e <__ieee754_pow+0x3e>
 800d888:	4b3e      	ldr	r3, [pc, #248]	; (800d984 <__ieee754_pow+0x264>)
 800d88a:	4599      	cmp	r9, r3
 800d88c:	d10c      	bne.n	800d8a8 <__ieee754_pow+0x188>
 800d88e:	2d00      	cmp	r5, #0
 800d890:	db0a      	blt.n	800d8a8 <__ieee754_pow+0x188>
 800d892:	ec47 6b10 	vmov	d0, r6, r7
 800d896:	b009      	add	sp, #36	; 0x24
 800d898:	ecbd 8b06 	vpop	{d8-d10}
 800d89c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a0:	f000 be7a 	b.w	800e598 <__ieee754_sqrt>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	9304      	str	r3, [sp, #16]
 800d8a8:	ec47 6b10 	vmov	d0, r6, r7
 800d8ac:	f001 fdd0 	bl	800f450 <fabs>
 800d8b0:	ec51 0b10 	vmov	r0, r1, d0
 800d8b4:	f1ba 0f00 	cmp.w	sl, #0
 800d8b8:	d129      	bne.n	800d90e <__ieee754_pow+0x1ee>
 800d8ba:	b124      	cbz	r4, 800d8c6 <__ieee754_pow+0x1a6>
 800d8bc:	4b2f      	ldr	r3, [pc, #188]	; (800d97c <__ieee754_pow+0x25c>)
 800d8be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d123      	bne.n	800d90e <__ieee754_pow+0x1ee>
 800d8c6:	f1b9 0f00 	cmp.w	r9, #0
 800d8ca:	da05      	bge.n	800d8d8 <__ieee754_pow+0x1b8>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	492a      	ldr	r1, [pc, #168]	; (800d97c <__ieee754_pow+0x25c>)
 800d8d4:	f7f2 ffd2 	bl	800087c <__aeabi_ddiv>
 800d8d8:	2d00      	cmp	r5, #0
 800d8da:	f6bf af40 	bge.w	800d75e <__ieee754_pow+0x3e>
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d8e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d8e8:	4323      	orrs	r3, r4
 800d8ea:	d108      	bne.n	800d8fe <__ieee754_pow+0x1de>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	f7f2 fce0 	bl	80002b8 <__aeabi_dsub>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	e78f      	b.n	800d81e <__ieee754_pow+0xfe>
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	2b01      	cmp	r3, #1
 800d902:	f47f af2c 	bne.w	800d75e <__ieee754_pow+0x3e>
 800d906:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d90a:	4619      	mov	r1, r3
 800d90c:	e727      	b.n	800d75e <__ieee754_pow+0x3e>
 800d90e:	0feb      	lsrs	r3, r5, #31
 800d910:	3b01      	subs	r3, #1
 800d912:	9306      	str	r3, [sp, #24]
 800d914:	9a06      	ldr	r2, [sp, #24]
 800d916:	9b04      	ldr	r3, [sp, #16]
 800d918:	4313      	orrs	r3, r2
 800d91a:	d102      	bne.n	800d922 <__ieee754_pow+0x202>
 800d91c:	4632      	mov	r2, r6
 800d91e:	463b      	mov	r3, r7
 800d920:	e7e6      	b.n	800d8f0 <__ieee754_pow+0x1d0>
 800d922:	4b19      	ldr	r3, [pc, #100]	; (800d988 <__ieee754_pow+0x268>)
 800d924:	4598      	cmp	r8, r3
 800d926:	f340 80fb 	ble.w	800db20 <__ieee754_pow+0x400>
 800d92a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d92e:	4598      	cmp	r8, r3
 800d930:	4b13      	ldr	r3, [pc, #76]	; (800d980 <__ieee754_pow+0x260>)
 800d932:	dd0c      	ble.n	800d94e <__ieee754_pow+0x22e>
 800d934:	429c      	cmp	r4, r3
 800d936:	dc0f      	bgt.n	800d958 <__ieee754_pow+0x238>
 800d938:	f1b9 0f00 	cmp.w	r9, #0
 800d93c:	da0f      	bge.n	800d95e <__ieee754_pow+0x23e>
 800d93e:	2000      	movs	r0, #0
 800d940:	b009      	add	sp, #36	; 0x24
 800d942:	ecbd 8b06 	vpop	{d8-d10}
 800d946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94a:	f001 bbd6 	b.w	800f0fa <__math_oflow>
 800d94e:	429c      	cmp	r4, r3
 800d950:	dbf2      	blt.n	800d938 <__ieee754_pow+0x218>
 800d952:	4b0a      	ldr	r3, [pc, #40]	; (800d97c <__ieee754_pow+0x25c>)
 800d954:	429c      	cmp	r4, r3
 800d956:	dd19      	ble.n	800d98c <__ieee754_pow+0x26c>
 800d958:	f1b9 0f00 	cmp.w	r9, #0
 800d95c:	dcef      	bgt.n	800d93e <__ieee754_pow+0x21e>
 800d95e:	2000      	movs	r0, #0
 800d960:	b009      	add	sp, #36	; 0x24
 800d962:	ecbd 8b06 	vpop	{d8-d10}
 800d966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96a:	f001 bbbd 	b.w	800f0e8 <__math_uflow>
 800d96e:	bf00      	nop
 800d970:	fff00000 	.word	0xfff00000
 800d974:	7ff00000 	.word	0x7ff00000
 800d978:	433fffff 	.word	0x433fffff
 800d97c:	3ff00000 	.word	0x3ff00000
 800d980:	3fefffff 	.word	0x3fefffff
 800d984:	3fe00000 	.word	0x3fe00000
 800d988:	41e00000 	.word	0x41e00000
 800d98c:	4b60      	ldr	r3, [pc, #384]	; (800db10 <__ieee754_pow+0x3f0>)
 800d98e:	2200      	movs	r2, #0
 800d990:	f7f2 fc92 	bl	80002b8 <__aeabi_dsub>
 800d994:	a354      	add	r3, pc, #336	; (adr r3, 800dae8 <__ieee754_pow+0x3c8>)
 800d996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99a:	4604      	mov	r4, r0
 800d99c:	460d      	mov	r5, r1
 800d99e:	f7f2 fe43 	bl	8000628 <__aeabi_dmul>
 800d9a2:	a353      	add	r3, pc, #332	; (adr r3, 800daf0 <__ieee754_pow+0x3d0>)
 800d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	460f      	mov	r7, r1
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7f2 fe3a 	bl	8000628 <__aeabi_dmul>
 800d9b4:	4b57      	ldr	r3, [pc, #348]	; (800db14 <__ieee754_pow+0x3f4>)
 800d9b6:	4682      	mov	sl, r0
 800d9b8:	468b      	mov	fp, r1
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4620      	mov	r0, r4
 800d9be:	4629      	mov	r1, r5
 800d9c0:	f7f2 fe32 	bl	8000628 <__aeabi_dmul>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	a14b      	add	r1, pc, #300	; (adr r1, 800daf8 <__ieee754_pow+0x3d8>)
 800d9ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9ce:	f7f2 fc73 	bl	80002b8 <__aeabi_dsub>
 800d9d2:	4622      	mov	r2, r4
 800d9d4:	462b      	mov	r3, r5
 800d9d6:	f7f2 fe27 	bl	8000628 <__aeabi_dmul>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	460b      	mov	r3, r1
 800d9de:	2000      	movs	r0, #0
 800d9e0:	494d      	ldr	r1, [pc, #308]	; (800db18 <__ieee754_pow+0x3f8>)
 800d9e2:	f7f2 fc69 	bl	80002b8 <__aeabi_dsub>
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	4680      	mov	r8, r0
 800d9ea:	4689      	mov	r9, r1
 800d9ec:	462b      	mov	r3, r5
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	f7f2 fe19 	bl	8000628 <__aeabi_dmul>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	4649      	mov	r1, r9
 800d9fe:	f7f2 fe13 	bl	8000628 <__aeabi_dmul>
 800da02:	a33f      	add	r3, pc, #252	; (adr r3, 800db00 <__ieee754_pow+0x3e0>)
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f7f2 fe0e 	bl	8000628 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4650      	mov	r0, sl
 800da12:	4659      	mov	r1, fp
 800da14:	f7f2 fc50 	bl	80002b8 <__aeabi_dsub>
 800da18:	4602      	mov	r2, r0
 800da1a:	460b      	mov	r3, r1
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	4630      	mov	r0, r6
 800da22:	4639      	mov	r1, r7
 800da24:	f7f2 fc4a 	bl	80002bc <__adddf3>
 800da28:	2000      	movs	r0, #0
 800da2a:	4632      	mov	r2, r6
 800da2c:	463b      	mov	r3, r7
 800da2e:	4604      	mov	r4, r0
 800da30:	460d      	mov	r5, r1
 800da32:	f7f2 fc41 	bl	80002b8 <__aeabi_dsub>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4640      	mov	r0, r8
 800da3c:	4649      	mov	r1, r9
 800da3e:	f7f2 fc3b 	bl	80002b8 <__aeabi_dsub>
 800da42:	9b04      	ldr	r3, [sp, #16]
 800da44:	9a06      	ldr	r2, [sp, #24]
 800da46:	3b01      	subs	r3, #1
 800da48:	4313      	orrs	r3, r2
 800da4a:	4682      	mov	sl, r0
 800da4c:	468b      	mov	fp, r1
 800da4e:	f040 81e7 	bne.w	800de20 <__ieee754_pow+0x700>
 800da52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800db08 <__ieee754_pow+0x3e8>
 800da56:	eeb0 8a47 	vmov.f32	s16, s14
 800da5a:	eef0 8a67 	vmov.f32	s17, s15
 800da5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da62:	2600      	movs	r6, #0
 800da64:	4632      	mov	r2, r6
 800da66:	463b      	mov	r3, r7
 800da68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da6c:	f7f2 fc24 	bl	80002b8 <__aeabi_dsub>
 800da70:	4622      	mov	r2, r4
 800da72:	462b      	mov	r3, r5
 800da74:	f7f2 fdd8 	bl	8000628 <__aeabi_dmul>
 800da78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da7c:	4680      	mov	r8, r0
 800da7e:	4689      	mov	r9, r1
 800da80:	4650      	mov	r0, sl
 800da82:	4659      	mov	r1, fp
 800da84:	f7f2 fdd0 	bl	8000628 <__aeabi_dmul>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4640      	mov	r0, r8
 800da8e:	4649      	mov	r1, r9
 800da90:	f7f2 fc14 	bl	80002bc <__adddf3>
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	4680      	mov	r8, r0
 800da9a:	4689      	mov	r9, r1
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	f7f2 fdc2 	bl	8000628 <__aeabi_dmul>
 800daa4:	460b      	mov	r3, r1
 800daa6:	4604      	mov	r4, r0
 800daa8:	460d      	mov	r5, r1
 800daaa:	4602      	mov	r2, r0
 800daac:	4649      	mov	r1, r9
 800daae:	4640      	mov	r0, r8
 800dab0:	f7f2 fc04 	bl	80002bc <__adddf3>
 800dab4:	4b19      	ldr	r3, [pc, #100]	; (800db1c <__ieee754_pow+0x3fc>)
 800dab6:	4299      	cmp	r1, r3
 800dab8:	ec45 4b19 	vmov	d9, r4, r5
 800dabc:	4606      	mov	r6, r0
 800dabe:	460f      	mov	r7, r1
 800dac0:	468b      	mov	fp, r1
 800dac2:	f340 82f1 	ble.w	800e0a8 <__ieee754_pow+0x988>
 800dac6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800daca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dace:	4303      	orrs	r3, r0
 800dad0:	f000 81e4 	beq.w	800de9c <__ieee754_pow+0x77c>
 800dad4:	ec51 0b18 	vmov	r0, r1, d8
 800dad8:	2200      	movs	r2, #0
 800dada:	2300      	movs	r3, #0
 800dadc:	f7f3 f816 	bl	8000b0c <__aeabi_dcmplt>
 800dae0:	3800      	subs	r0, #0
 800dae2:	bf18      	it	ne
 800dae4:	2001      	movne	r0, #1
 800dae6:	e72b      	b.n	800d940 <__ieee754_pow+0x220>
 800dae8:	60000000 	.word	0x60000000
 800daec:	3ff71547 	.word	0x3ff71547
 800daf0:	f85ddf44 	.word	0xf85ddf44
 800daf4:	3e54ae0b 	.word	0x3e54ae0b
 800daf8:	55555555 	.word	0x55555555
 800dafc:	3fd55555 	.word	0x3fd55555
 800db00:	652b82fe 	.word	0x652b82fe
 800db04:	3ff71547 	.word	0x3ff71547
 800db08:	00000000 	.word	0x00000000
 800db0c:	bff00000 	.word	0xbff00000
 800db10:	3ff00000 	.word	0x3ff00000
 800db14:	3fd00000 	.word	0x3fd00000
 800db18:	3fe00000 	.word	0x3fe00000
 800db1c:	408fffff 	.word	0x408fffff
 800db20:	4bd5      	ldr	r3, [pc, #852]	; (800de78 <__ieee754_pow+0x758>)
 800db22:	402b      	ands	r3, r5
 800db24:	2200      	movs	r2, #0
 800db26:	b92b      	cbnz	r3, 800db34 <__ieee754_pow+0x414>
 800db28:	4bd4      	ldr	r3, [pc, #848]	; (800de7c <__ieee754_pow+0x75c>)
 800db2a:	f7f2 fd7d 	bl	8000628 <__aeabi_dmul>
 800db2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800db32:	460c      	mov	r4, r1
 800db34:	1523      	asrs	r3, r4, #20
 800db36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db3a:	4413      	add	r3, r2
 800db3c:	9305      	str	r3, [sp, #20]
 800db3e:	4bd0      	ldr	r3, [pc, #832]	; (800de80 <__ieee754_pow+0x760>)
 800db40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800db44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800db48:	429c      	cmp	r4, r3
 800db4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db4e:	dd08      	ble.n	800db62 <__ieee754_pow+0x442>
 800db50:	4bcc      	ldr	r3, [pc, #816]	; (800de84 <__ieee754_pow+0x764>)
 800db52:	429c      	cmp	r4, r3
 800db54:	f340 8162 	ble.w	800de1c <__ieee754_pow+0x6fc>
 800db58:	9b05      	ldr	r3, [sp, #20]
 800db5a:	3301      	adds	r3, #1
 800db5c:	9305      	str	r3, [sp, #20]
 800db5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800db62:	2400      	movs	r4, #0
 800db64:	00e3      	lsls	r3, r4, #3
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	4bc7      	ldr	r3, [pc, #796]	; (800de88 <__ieee754_pow+0x768>)
 800db6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db6e:	ed93 7b00 	vldr	d7, [r3]
 800db72:	4629      	mov	r1, r5
 800db74:	ec53 2b17 	vmov	r2, r3, d7
 800db78:	eeb0 9a47 	vmov.f32	s18, s14
 800db7c:	eef0 9a67 	vmov.f32	s19, s15
 800db80:	4682      	mov	sl, r0
 800db82:	f7f2 fb99 	bl	80002b8 <__aeabi_dsub>
 800db86:	4652      	mov	r2, sl
 800db88:	4606      	mov	r6, r0
 800db8a:	460f      	mov	r7, r1
 800db8c:	462b      	mov	r3, r5
 800db8e:	ec51 0b19 	vmov	r0, r1, d9
 800db92:	f7f2 fb93 	bl	80002bc <__adddf3>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	2000      	movs	r0, #0
 800db9c:	49bb      	ldr	r1, [pc, #748]	; (800de8c <__ieee754_pow+0x76c>)
 800db9e:	f7f2 fe6d 	bl	800087c <__aeabi_ddiv>
 800dba2:	ec41 0b1a 	vmov	d10, r0, r1
 800dba6:	4602      	mov	r2, r0
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4630      	mov	r0, r6
 800dbac:	4639      	mov	r1, r7
 800dbae:	f7f2 fd3b 	bl	8000628 <__aeabi_dmul>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbb8:	9302      	str	r3, [sp, #8]
 800dbba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dbbe:	46ab      	mov	fp, r5
 800dbc0:	106d      	asrs	r5, r5, #1
 800dbc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dbc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dbca:	ec41 0b18 	vmov	d8, r0, r1
 800dbce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	4640      	mov	r0, r8
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	4614      	mov	r4, r2
 800dbda:	461d      	mov	r5, r3
 800dbdc:	f7f2 fd24 	bl	8000628 <__aeabi_dmul>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	f7f2 fb66 	bl	80002b8 <__aeabi_dsub>
 800dbec:	ec53 2b19 	vmov	r2, r3, d9
 800dbf0:	4606      	mov	r6, r0
 800dbf2:	460f      	mov	r7, r1
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	f7f2 fb5e 	bl	80002b8 <__aeabi_dsub>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4650      	mov	r0, sl
 800dc02:	4659      	mov	r1, fp
 800dc04:	f7f2 fb58 	bl	80002b8 <__aeabi_dsub>
 800dc08:	4642      	mov	r2, r8
 800dc0a:	464b      	mov	r3, r9
 800dc0c:	f7f2 fd0c 	bl	8000628 <__aeabi_dmul>
 800dc10:	4602      	mov	r2, r0
 800dc12:	460b      	mov	r3, r1
 800dc14:	4630      	mov	r0, r6
 800dc16:	4639      	mov	r1, r7
 800dc18:	f7f2 fb4e 	bl	80002b8 <__aeabi_dsub>
 800dc1c:	ec53 2b1a 	vmov	r2, r3, d10
 800dc20:	f7f2 fd02 	bl	8000628 <__aeabi_dmul>
 800dc24:	ec53 2b18 	vmov	r2, r3, d8
 800dc28:	ec41 0b19 	vmov	d9, r0, r1
 800dc2c:	ec51 0b18 	vmov	r0, r1, d8
 800dc30:	f7f2 fcfa 	bl	8000628 <__aeabi_dmul>
 800dc34:	a37c      	add	r3, pc, #496	; (adr r3, 800de28 <__ieee754_pow+0x708>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	f7f2 fcf3 	bl	8000628 <__aeabi_dmul>
 800dc42:	a37b      	add	r3, pc, #492	; (adr r3, 800de30 <__ieee754_pow+0x710>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	f7f2 fb38 	bl	80002bc <__adddf3>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	462b      	mov	r3, r5
 800dc50:	f7f2 fcea 	bl	8000628 <__aeabi_dmul>
 800dc54:	a378      	add	r3, pc, #480	; (adr r3, 800de38 <__ieee754_pow+0x718>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 fb2f 	bl	80002bc <__adddf3>
 800dc5e:	4622      	mov	r2, r4
 800dc60:	462b      	mov	r3, r5
 800dc62:	f7f2 fce1 	bl	8000628 <__aeabi_dmul>
 800dc66:	a376      	add	r3, pc, #472	; (adr r3, 800de40 <__ieee754_pow+0x720>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f7f2 fb26 	bl	80002bc <__adddf3>
 800dc70:	4622      	mov	r2, r4
 800dc72:	462b      	mov	r3, r5
 800dc74:	f7f2 fcd8 	bl	8000628 <__aeabi_dmul>
 800dc78:	a373      	add	r3, pc, #460	; (adr r3, 800de48 <__ieee754_pow+0x728>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fb1d 	bl	80002bc <__adddf3>
 800dc82:	4622      	mov	r2, r4
 800dc84:	462b      	mov	r3, r5
 800dc86:	f7f2 fccf 	bl	8000628 <__aeabi_dmul>
 800dc8a:	a371      	add	r3, pc, #452	; (adr r3, 800de50 <__ieee754_pow+0x730>)
 800dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc90:	f7f2 fb14 	bl	80002bc <__adddf3>
 800dc94:	4622      	mov	r2, r4
 800dc96:	4606      	mov	r6, r0
 800dc98:	460f      	mov	r7, r1
 800dc9a:	462b      	mov	r3, r5
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fcc2 	bl	8000628 <__aeabi_dmul>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	4630      	mov	r0, r6
 800dcaa:	4639      	mov	r1, r7
 800dcac:	f7f2 fcbc 	bl	8000628 <__aeabi_dmul>
 800dcb0:	4642      	mov	r2, r8
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	464b      	mov	r3, r9
 800dcb8:	ec51 0b18 	vmov	r0, r1, d8
 800dcbc:	f7f2 fafe 	bl	80002bc <__adddf3>
 800dcc0:	ec53 2b19 	vmov	r2, r3, d9
 800dcc4:	f7f2 fcb0 	bl	8000628 <__aeabi_dmul>
 800dcc8:	4622      	mov	r2, r4
 800dcca:	462b      	mov	r3, r5
 800dccc:	f7f2 faf6 	bl	80002bc <__adddf3>
 800dcd0:	4642      	mov	r2, r8
 800dcd2:	4682      	mov	sl, r0
 800dcd4:	468b      	mov	fp, r1
 800dcd6:	464b      	mov	r3, r9
 800dcd8:	4640      	mov	r0, r8
 800dcda:	4649      	mov	r1, r9
 800dcdc:	f7f2 fca4 	bl	8000628 <__aeabi_dmul>
 800dce0:	4b6b      	ldr	r3, [pc, #428]	; (800de90 <__ieee754_pow+0x770>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	4606      	mov	r6, r0
 800dce6:	460f      	mov	r7, r1
 800dce8:	f7f2 fae8 	bl	80002bc <__adddf3>
 800dcec:	4652      	mov	r2, sl
 800dcee:	465b      	mov	r3, fp
 800dcf0:	f7f2 fae4 	bl	80002bc <__adddf3>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4640      	mov	r0, r8
 800dd00:	4649      	mov	r1, r9
 800dd02:	f7f2 fc91 	bl	8000628 <__aeabi_dmul>
 800dd06:	4b62      	ldr	r3, [pc, #392]	; (800de90 <__ieee754_pow+0x770>)
 800dd08:	4680      	mov	r8, r0
 800dd0a:	4689      	mov	r9, r1
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	4620      	mov	r0, r4
 800dd10:	4629      	mov	r1, r5
 800dd12:	f7f2 fad1 	bl	80002b8 <__aeabi_dsub>
 800dd16:	4632      	mov	r2, r6
 800dd18:	463b      	mov	r3, r7
 800dd1a:	f7f2 facd 	bl	80002b8 <__aeabi_dsub>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	4650      	mov	r0, sl
 800dd24:	4659      	mov	r1, fp
 800dd26:	f7f2 fac7 	bl	80002b8 <__aeabi_dsub>
 800dd2a:	ec53 2b18 	vmov	r2, r3, d8
 800dd2e:	f7f2 fc7b 	bl	8000628 <__aeabi_dmul>
 800dd32:	4622      	mov	r2, r4
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	462b      	mov	r3, r5
 800dd3a:	ec51 0b19 	vmov	r0, r1, d9
 800dd3e:	f7f2 fc73 	bl	8000628 <__aeabi_dmul>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4630      	mov	r0, r6
 800dd48:	4639      	mov	r1, r7
 800dd4a:	f7f2 fab7 	bl	80002bc <__adddf3>
 800dd4e:	4606      	mov	r6, r0
 800dd50:	460f      	mov	r7, r1
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4640      	mov	r0, r8
 800dd58:	4649      	mov	r1, r9
 800dd5a:	f7f2 faaf 	bl	80002bc <__adddf3>
 800dd5e:	a33e      	add	r3, pc, #248	; (adr r3, 800de58 <__ieee754_pow+0x738>)
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	2000      	movs	r0, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	460d      	mov	r5, r1
 800dd6a:	f7f2 fc5d 	bl	8000628 <__aeabi_dmul>
 800dd6e:	4642      	mov	r2, r8
 800dd70:	ec41 0b18 	vmov	d8, r0, r1
 800dd74:	464b      	mov	r3, r9
 800dd76:	4620      	mov	r0, r4
 800dd78:	4629      	mov	r1, r5
 800dd7a:	f7f2 fa9d 	bl	80002b8 <__aeabi_dsub>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4630      	mov	r0, r6
 800dd84:	4639      	mov	r1, r7
 800dd86:	f7f2 fa97 	bl	80002b8 <__aeabi_dsub>
 800dd8a:	a335      	add	r3, pc, #212	; (adr r3, 800de60 <__ieee754_pow+0x740>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	f7f2 fc4a 	bl	8000628 <__aeabi_dmul>
 800dd94:	a334      	add	r3, pc, #208	; (adr r3, 800de68 <__ieee754_pow+0x748>)
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	4620      	mov	r0, r4
 800dda0:	4629      	mov	r1, r5
 800dda2:	f7f2 fc41 	bl	8000628 <__aeabi_dmul>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4639      	mov	r1, r7
 800ddae:	f7f2 fa85 	bl	80002bc <__adddf3>
 800ddb2:	9a07      	ldr	r2, [sp, #28]
 800ddb4:	4b37      	ldr	r3, [pc, #220]	; (800de94 <__ieee754_pow+0x774>)
 800ddb6:	4413      	add	r3, r2
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f7f2 fa7e 	bl	80002bc <__adddf3>
 800ddc0:	4682      	mov	sl, r0
 800ddc2:	9805      	ldr	r0, [sp, #20]
 800ddc4:	468b      	mov	fp, r1
 800ddc6:	f7f2 fbc5 	bl	8000554 <__aeabi_i2d>
 800ddca:	9a07      	ldr	r2, [sp, #28]
 800ddcc:	4b32      	ldr	r3, [pc, #200]	; (800de98 <__ieee754_pow+0x778>)
 800ddce:	4413      	add	r3, r2
 800ddd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	460f      	mov	r7, r1
 800ddd8:	4652      	mov	r2, sl
 800ddda:	465b      	mov	r3, fp
 800dddc:	ec51 0b18 	vmov	r0, r1, d8
 800dde0:	f7f2 fa6c 	bl	80002bc <__adddf3>
 800dde4:	4642      	mov	r2, r8
 800dde6:	464b      	mov	r3, r9
 800dde8:	f7f2 fa68 	bl	80002bc <__adddf3>
 800ddec:	4632      	mov	r2, r6
 800ddee:	463b      	mov	r3, r7
 800ddf0:	f7f2 fa64 	bl	80002bc <__adddf3>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	463b      	mov	r3, r7
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	460d      	mov	r5, r1
 800ddfe:	f7f2 fa5b 	bl	80002b8 <__aeabi_dsub>
 800de02:	4642      	mov	r2, r8
 800de04:	464b      	mov	r3, r9
 800de06:	f7f2 fa57 	bl	80002b8 <__aeabi_dsub>
 800de0a:	ec53 2b18 	vmov	r2, r3, d8
 800de0e:	f7f2 fa53 	bl	80002b8 <__aeabi_dsub>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4650      	mov	r0, sl
 800de18:	4659      	mov	r1, fp
 800de1a:	e610      	b.n	800da3e <__ieee754_pow+0x31e>
 800de1c:	2401      	movs	r4, #1
 800de1e:	e6a1      	b.n	800db64 <__ieee754_pow+0x444>
 800de20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800de70 <__ieee754_pow+0x750>
 800de24:	e617      	b.n	800da56 <__ieee754_pow+0x336>
 800de26:	bf00      	nop
 800de28:	4a454eef 	.word	0x4a454eef
 800de2c:	3fca7e28 	.word	0x3fca7e28
 800de30:	93c9db65 	.word	0x93c9db65
 800de34:	3fcd864a 	.word	0x3fcd864a
 800de38:	a91d4101 	.word	0xa91d4101
 800de3c:	3fd17460 	.word	0x3fd17460
 800de40:	518f264d 	.word	0x518f264d
 800de44:	3fd55555 	.word	0x3fd55555
 800de48:	db6fabff 	.word	0xdb6fabff
 800de4c:	3fdb6db6 	.word	0x3fdb6db6
 800de50:	33333303 	.word	0x33333303
 800de54:	3fe33333 	.word	0x3fe33333
 800de58:	e0000000 	.word	0xe0000000
 800de5c:	3feec709 	.word	0x3feec709
 800de60:	dc3a03fd 	.word	0xdc3a03fd
 800de64:	3feec709 	.word	0x3feec709
 800de68:	145b01f5 	.word	0x145b01f5
 800de6c:	be3e2fe0 	.word	0xbe3e2fe0
 800de70:	00000000 	.word	0x00000000
 800de74:	3ff00000 	.word	0x3ff00000
 800de78:	7ff00000 	.word	0x7ff00000
 800de7c:	43400000 	.word	0x43400000
 800de80:	0003988e 	.word	0x0003988e
 800de84:	000bb679 	.word	0x000bb679
 800de88:	0800fd10 	.word	0x0800fd10
 800de8c:	3ff00000 	.word	0x3ff00000
 800de90:	40080000 	.word	0x40080000
 800de94:	0800fd30 	.word	0x0800fd30
 800de98:	0800fd20 	.word	0x0800fd20
 800de9c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e174 <__ieee754_pow+0xa54>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	4640      	mov	r0, r8
 800dea4:	4649      	mov	r1, r9
 800dea6:	f7f2 fa09 	bl	80002bc <__adddf3>
 800deaa:	4622      	mov	r2, r4
 800deac:	ec41 0b1a 	vmov	d10, r0, r1
 800deb0:	462b      	mov	r3, r5
 800deb2:	4630      	mov	r0, r6
 800deb4:	4639      	mov	r1, r7
 800deb6:	f7f2 f9ff 	bl	80002b8 <__aeabi_dsub>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	ec51 0b1a 	vmov	r0, r1, d10
 800dec2:	f7f2 fe41 	bl	8000b48 <__aeabi_dcmpgt>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	f47f ae04 	bne.w	800dad4 <__ieee754_pow+0x3b4>
 800decc:	4aa4      	ldr	r2, [pc, #656]	; (800e160 <__ieee754_pow+0xa40>)
 800dece:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ded2:	4293      	cmp	r3, r2
 800ded4:	f340 8108 	ble.w	800e0e8 <__ieee754_pow+0x9c8>
 800ded8:	151b      	asrs	r3, r3, #20
 800deda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dede:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dee2:	fa4a f303 	asr.w	r3, sl, r3
 800dee6:	445b      	add	r3, fp
 800dee8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800deec:	4e9d      	ldr	r6, [pc, #628]	; (800e164 <__ieee754_pow+0xa44>)
 800deee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800def2:	4116      	asrs	r6, r2
 800def4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800def8:	2000      	movs	r0, #0
 800defa:	ea23 0106 	bic.w	r1, r3, r6
 800defe:	f1c2 0214 	rsb	r2, r2, #20
 800df02:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800df06:	fa4a fa02 	asr.w	sl, sl, r2
 800df0a:	f1bb 0f00 	cmp.w	fp, #0
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	4620      	mov	r0, r4
 800df14:	4629      	mov	r1, r5
 800df16:	bfb8      	it	lt
 800df18:	f1ca 0a00 	rsblt	sl, sl, #0
 800df1c:	f7f2 f9cc 	bl	80002b8 <__aeabi_dsub>
 800df20:	ec41 0b19 	vmov	d9, r0, r1
 800df24:	4642      	mov	r2, r8
 800df26:	464b      	mov	r3, r9
 800df28:	ec51 0b19 	vmov	r0, r1, d9
 800df2c:	f7f2 f9c6 	bl	80002bc <__adddf3>
 800df30:	a37b      	add	r3, pc, #492	; (adr r3, 800e120 <__ieee754_pow+0xa00>)
 800df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df36:	2000      	movs	r0, #0
 800df38:	4604      	mov	r4, r0
 800df3a:	460d      	mov	r5, r1
 800df3c:	f7f2 fb74 	bl	8000628 <__aeabi_dmul>
 800df40:	ec53 2b19 	vmov	r2, r3, d9
 800df44:	4606      	mov	r6, r0
 800df46:	460f      	mov	r7, r1
 800df48:	4620      	mov	r0, r4
 800df4a:	4629      	mov	r1, r5
 800df4c:	f7f2 f9b4 	bl	80002b8 <__aeabi_dsub>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4640      	mov	r0, r8
 800df56:	4649      	mov	r1, r9
 800df58:	f7f2 f9ae 	bl	80002b8 <__aeabi_dsub>
 800df5c:	a372      	add	r3, pc, #456	; (adr r3, 800e128 <__ieee754_pow+0xa08>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	f7f2 fb61 	bl	8000628 <__aeabi_dmul>
 800df66:	a372      	add	r3, pc, #456	; (adr r3, 800e130 <__ieee754_pow+0xa10>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	4680      	mov	r8, r0
 800df6e:	4689      	mov	r9, r1
 800df70:	4620      	mov	r0, r4
 800df72:	4629      	mov	r1, r5
 800df74:	f7f2 fb58 	bl	8000628 <__aeabi_dmul>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4640      	mov	r0, r8
 800df7e:	4649      	mov	r1, r9
 800df80:	f7f2 f99c 	bl	80002bc <__adddf3>
 800df84:	4604      	mov	r4, r0
 800df86:	460d      	mov	r5, r1
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	4630      	mov	r0, r6
 800df8e:	4639      	mov	r1, r7
 800df90:	f7f2 f994 	bl	80002bc <__adddf3>
 800df94:	4632      	mov	r2, r6
 800df96:	463b      	mov	r3, r7
 800df98:	4680      	mov	r8, r0
 800df9a:	4689      	mov	r9, r1
 800df9c:	f7f2 f98c 	bl	80002b8 <__aeabi_dsub>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	460b      	mov	r3, r1
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	f7f2 f986 	bl	80002b8 <__aeabi_dsub>
 800dfac:	4642      	mov	r2, r8
 800dfae:	4606      	mov	r6, r0
 800dfb0:	460f      	mov	r7, r1
 800dfb2:	464b      	mov	r3, r9
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	f7f2 fb36 	bl	8000628 <__aeabi_dmul>
 800dfbc:	a35e      	add	r3, pc, #376	; (adr r3, 800e138 <__ieee754_pow+0xa18>)
 800dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	460d      	mov	r5, r1
 800dfc6:	f7f2 fb2f 	bl	8000628 <__aeabi_dmul>
 800dfca:	a35d      	add	r3, pc, #372	; (adr r3, 800e140 <__ieee754_pow+0xa20>)
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	f7f2 f972 	bl	80002b8 <__aeabi_dsub>
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	462b      	mov	r3, r5
 800dfd8:	f7f2 fb26 	bl	8000628 <__aeabi_dmul>
 800dfdc:	a35a      	add	r3, pc, #360	; (adr r3, 800e148 <__ieee754_pow+0xa28>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	f7f2 f96b 	bl	80002bc <__adddf3>
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	462b      	mov	r3, r5
 800dfea:	f7f2 fb1d 	bl	8000628 <__aeabi_dmul>
 800dfee:	a358      	add	r3, pc, #352	; (adr r3, 800e150 <__ieee754_pow+0xa30>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	f7f2 f960 	bl	80002b8 <__aeabi_dsub>
 800dff8:	4622      	mov	r2, r4
 800dffa:	462b      	mov	r3, r5
 800dffc:	f7f2 fb14 	bl	8000628 <__aeabi_dmul>
 800e000:	a355      	add	r3, pc, #340	; (adr r3, 800e158 <__ieee754_pow+0xa38>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	f7f2 f959 	bl	80002bc <__adddf3>
 800e00a:	4622      	mov	r2, r4
 800e00c:	462b      	mov	r3, r5
 800e00e:	f7f2 fb0b 	bl	8000628 <__aeabi_dmul>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	4640      	mov	r0, r8
 800e018:	4649      	mov	r1, r9
 800e01a:	f7f2 f94d 	bl	80002b8 <__aeabi_dsub>
 800e01e:	4604      	mov	r4, r0
 800e020:	460d      	mov	r5, r1
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
 800e026:	4640      	mov	r0, r8
 800e028:	4649      	mov	r1, r9
 800e02a:	f7f2 fafd 	bl	8000628 <__aeabi_dmul>
 800e02e:	2200      	movs	r2, #0
 800e030:	ec41 0b19 	vmov	d9, r0, r1
 800e034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e038:	4620      	mov	r0, r4
 800e03a:	4629      	mov	r1, r5
 800e03c:	f7f2 f93c 	bl	80002b8 <__aeabi_dsub>
 800e040:	4602      	mov	r2, r0
 800e042:	460b      	mov	r3, r1
 800e044:	ec51 0b19 	vmov	r0, r1, d9
 800e048:	f7f2 fc18 	bl	800087c <__aeabi_ddiv>
 800e04c:	4632      	mov	r2, r6
 800e04e:	4604      	mov	r4, r0
 800e050:	460d      	mov	r5, r1
 800e052:	463b      	mov	r3, r7
 800e054:	4640      	mov	r0, r8
 800e056:	4649      	mov	r1, r9
 800e058:	f7f2 fae6 	bl	8000628 <__aeabi_dmul>
 800e05c:	4632      	mov	r2, r6
 800e05e:	463b      	mov	r3, r7
 800e060:	f7f2 f92c 	bl	80002bc <__adddf3>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4620      	mov	r0, r4
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 f924 	bl	80002b8 <__aeabi_dsub>
 800e070:	4642      	mov	r2, r8
 800e072:	464b      	mov	r3, r9
 800e074:	f7f2 f920 	bl	80002b8 <__aeabi_dsub>
 800e078:	460b      	mov	r3, r1
 800e07a:	4602      	mov	r2, r0
 800e07c:	493a      	ldr	r1, [pc, #232]	; (800e168 <__ieee754_pow+0xa48>)
 800e07e:	2000      	movs	r0, #0
 800e080:	f7f2 f91a 	bl	80002b8 <__aeabi_dsub>
 800e084:	ec41 0b10 	vmov	d0, r0, r1
 800e088:	ee10 3a90 	vmov	r3, s1
 800e08c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e094:	da2b      	bge.n	800e0ee <__ieee754_pow+0x9ce>
 800e096:	4650      	mov	r0, sl
 800e098:	f001 fa6e 	bl	800f578 <scalbn>
 800e09c:	ec51 0b10 	vmov	r0, r1, d0
 800e0a0:	ec53 2b18 	vmov	r2, r3, d8
 800e0a4:	f7ff bbed 	b.w	800d882 <__ieee754_pow+0x162>
 800e0a8:	4b30      	ldr	r3, [pc, #192]	; (800e16c <__ieee754_pow+0xa4c>)
 800e0aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e0ae:	429e      	cmp	r6, r3
 800e0b0:	f77f af0c 	ble.w	800decc <__ieee754_pow+0x7ac>
 800e0b4:	4b2e      	ldr	r3, [pc, #184]	; (800e170 <__ieee754_pow+0xa50>)
 800e0b6:	440b      	add	r3, r1
 800e0b8:	4303      	orrs	r3, r0
 800e0ba:	d009      	beq.n	800e0d0 <__ieee754_pow+0x9b0>
 800e0bc:	ec51 0b18 	vmov	r0, r1, d8
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	f7f2 fd22 	bl	8000b0c <__aeabi_dcmplt>
 800e0c8:	3800      	subs	r0, #0
 800e0ca:	bf18      	it	ne
 800e0cc:	2001      	movne	r0, #1
 800e0ce:	e447      	b.n	800d960 <__ieee754_pow+0x240>
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	f7f2 f8f0 	bl	80002b8 <__aeabi_dsub>
 800e0d8:	4642      	mov	r2, r8
 800e0da:	464b      	mov	r3, r9
 800e0dc:	f7f2 fd2a 	bl	8000b34 <__aeabi_dcmpge>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	f43f aef3 	beq.w	800decc <__ieee754_pow+0x7ac>
 800e0e6:	e7e9      	b.n	800e0bc <__ieee754_pow+0x99c>
 800e0e8:	f04f 0a00 	mov.w	sl, #0
 800e0ec:	e71a      	b.n	800df24 <__ieee754_pow+0x804>
 800e0ee:	ec51 0b10 	vmov	r0, r1, d0
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	e7d4      	b.n	800e0a0 <__ieee754_pow+0x980>
 800e0f6:	491c      	ldr	r1, [pc, #112]	; (800e168 <__ieee754_pow+0xa48>)
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	f7ff bb30 	b.w	800d75e <__ieee754_pow+0x3e>
 800e0fe:	2000      	movs	r0, #0
 800e100:	2100      	movs	r1, #0
 800e102:	f7ff bb2c 	b.w	800d75e <__ieee754_pow+0x3e>
 800e106:	4630      	mov	r0, r6
 800e108:	4639      	mov	r1, r7
 800e10a:	f7ff bb28 	b.w	800d75e <__ieee754_pow+0x3e>
 800e10e:	9204      	str	r2, [sp, #16]
 800e110:	f7ff bb7a 	b.w	800d808 <__ieee754_pow+0xe8>
 800e114:	2300      	movs	r3, #0
 800e116:	f7ff bb64 	b.w	800d7e2 <__ieee754_pow+0xc2>
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w
 800e120:	00000000 	.word	0x00000000
 800e124:	3fe62e43 	.word	0x3fe62e43
 800e128:	fefa39ef 	.word	0xfefa39ef
 800e12c:	3fe62e42 	.word	0x3fe62e42
 800e130:	0ca86c39 	.word	0x0ca86c39
 800e134:	be205c61 	.word	0xbe205c61
 800e138:	72bea4d0 	.word	0x72bea4d0
 800e13c:	3e663769 	.word	0x3e663769
 800e140:	c5d26bf1 	.word	0xc5d26bf1
 800e144:	3ebbbd41 	.word	0x3ebbbd41
 800e148:	af25de2c 	.word	0xaf25de2c
 800e14c:	3f11566a 	.word	0x3f11566a
 800e150:	16bebd93 	.word	0x16bebd93
 800e154:	3f66c16c 	.word	0x3f66c16c
 800e158:	5555553e 	.word	0x5555553e
 800e15c:	3fc55555 	.word	0x3fc55555
 800e160:	3fe00000 	.word	0x3fe00000
 800e164:	000fffff 	.word	0x000fffff
 800e168:	3ff00000 	.word	0x3ff00000
 800e16c:	4090cbff 	.word	0x4090cbff
 800e170:	3f6f3400 	.word	0x3f6f3400
 800e174:	652b82fe 	.word	0x652b82fe
 800e178:	3c971547 	.word	0x3c971547
 800e17c:	00000000 	.word	0x00000000

0800e180 <__ieee754_rem_pio2>:
 800e180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e184:	ed2d 8b02 	vpush	{d8}
 800e188:	ec55 4b10 	vmov	r4, r5, d0
 800e18c:	4bca      	ldr	r3, [pc, #808]	; (800e4b8 <__ieee754_rem_pio2+0x338>)
 800e18e:	b08b      	sub	sp, #44	; 0x2c
 800e190:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e194:	4598      	cmp	r8, r3
 800e196:	4682      	mov	sl, r0
 800e198:	9502      	str	r5, [sp, #8]
 800e19a:	dc08      	bgt.n	800e1ae <__ieee754_rem_pio2+0x2e>
 800e19c:	2200      	movs	r2, #0
 800e19e:	2300      	movs	r3, #0
 800e1a0:	ed80 0b00 	vstr	d0, [r0]
 800e1a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e1a8:	f04f 0b00 	mov.w	fp, #0
 800e1ac:	e028      	b.n	800e200 <__ieee754_rem_pio2+0x80>
 800e1ae:	4bc3      	ldr	r3, [pc, #780]	; (800e4bc <__ieee754_rem_pio2+0x33c>)
 800e1b0:	4598      	cmp	r8, r3
 800e1b2:	dc78      	bgt.n	800e2a6 <__ieee754_rem_pio2+0x126>
 800e1b4:	9b02      	ldr	r3, [sp, #8]
 800e1b6:	4ec2      	ldr	r6, [pc, #776]	; (800e4c0 <__ieee754_rem_pio2+0x340>)
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	ee10 0a10 	vmov	r0, s0
 800e1be:	a3b0      	add	r3, pc, #704	; (adr r3, 800e480 <__ieee754_rem_pio2+0x300>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	dd39      	ble.n	800e23c <__ieee754_rem_pio2+0xbc>
 800e1c8:	f7f2 f876 	bl	80002b8 <__aeabi_dsub>
 800e1cc:	45b0      	cmp	r8, r6
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	d01b      	beq.n	800e20c <__ieee754_rem_pio2+0x8c>
 800e1d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800e488 <__ieee754_rem_pio2+0x308>)
 800e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1da:	f7f2 f86d 	bl	80002b8 <__aeabi_dsub>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	e9ca 2300 	strd	r2, r3, [sl]
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	f7f2 f865 	bl	80002b8 <__aeabi_dsub>
 800e1ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800e488 <__ieee754_rem_pio2+0x308>)
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	f7f2 f860 	bl	80002b8 <__aeabi_dsub>
 800e1f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1fc:	f04f 0b01 	mov.w	fp, #1
 800e200:	4658      	mov	r0, fp
 800e202:	b00b      	add	sp, #44	; 0x2c
 800e204:	ecbd 8b02 	vpop	{d8}
 800e208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e490 <__ieee754_rem_pio2+0x310>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	f7f2 f851 	bl	80002b8 <__aeabi_dsub>
 800e216:	a3a0      	add	r3, pc, #640	; (adr r3, 800e498 <__ieee754_rem_pio2+0x318>)
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	4604      	mov	r4, r0
 800e21e:	460d      	mov	r5, r1
 800e220:	f7f2 f84a 	bl	80002b8 <__aeabi_dsub>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	e9ca 2300 	strd	r2, r3, [sl]
 800e22c:	4620      	mov	r0, r4
 800e22e:	4629      	mov	r1, r5
 800e230:	f7f2 f842 	bl	80002b8 <__aeabi_dsub>
 800e234:	a398      	add	r3, pc, #608	; (adr r3, 800e498 <__ieee754_rem_pio2+0x318>)
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	e7db      	b.n	800e1f4 <__ieee754_rem_pio2+0x74>
 800e23c:	f7f2 f83e 	bl	80002bc <__adddf3>
 800e240:	45b0      	cmp	r8, r6
 800e242:	4604      	mov	r4, r0
 800e244:	460d      	mov	r5, r1
 800e246:	d016      	beq.n	800e276 <__ieee754_rem_pio2+0xf6>
 800e248:	a38f      	add	r3, pc, #572	; (adr r3, 800e488 <__ieee754_rem_pio2+0x308>)
 800e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24e:	f7f2 f835 	bl	80002bc <__adddf3>
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	e9ca 2300 	strd	r2, r3, [sl]
 800e25a:	4620      	mov	r0, r4
 800e25c:	4629      	mov	r1, r5
 800e25e:	f7f2 f82b 	bl	80002b8 <__aeabi_dsub>
 800e262:	a389      	add	r3, pc, #548	; (adr r3, 800e488 <__ieee754_rem_pio2+0x308>)
 800e264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e268:	f7f2 f828 	bl	80002bc <__adddf3>
 800e26c:	f04f 3bff 	mov.w	fp, #4294967295
 800e270:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e274:	e7c4      	b.n	800e200 <__ieee754_rem_pio2+0x80>
 800e276:	a386      	add	r3, pc, #536	; (adr r3, 800e490 <__ieee754_rem_pio2+0x310>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f81e 	bl	80002bc <__adddf3>
 800e280:	a385      	add	r3, pc, #532	; (adr r3, 800e498 <__ieee754_rem_pio2+0x318>)
 800e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e286:	4604      	mov	r4, r0
 800e288:	460d      	mov	r5, r1
 800e28a:	f7f2 f817 	bl	80002bc <__adddf3>
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	e9ca 2300 	strd	r2, r3, [sl]
 800e296:	4620      	mov	r0, r4
 800e298:	4629      	mov	r1, r5
 800e29a:	f7f2 f80d 	bl	80002b8 <__aeabi_dsub>
 800e29e:	a37e      	add	r3, pc, #504	; (adr r3, 800e498 <__ieee754_rem_pio2+0x318>)
 800e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a4:	e7e0      	b.n	800e268 <__ieee754_rem_pio2+0xe8>
 800e2a6:	4b87      	ldr	r3, [pc, #540]	; (800e4c4 <__ieee754_rem_pio2+0x344>)
 800e2a8:	4598      	cmp	r8, r3
 800e2aa:	f300 80d9 	bgt.w	800e460 <__ieee754_rem_pio2+0x2e0>
 800e2ae:	f001 f8cf 	bl	800f450 <fabs>
 800e2b2:	ec55 4b10 	vmov	r4, r5, d0
 800e2b6:	ee10 0a10 	vmov	r0, s0
 800e2ba:	a379      	add	r3, pc, #484	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x320>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	f7f2 f9b1 	bl	8000628 <__aeabi_dmul>
 800e2c6:	4b80      	ldr	r3, [pc, #512]	; (800e4c8 <__ieee754_rem_pio2+0x348>)
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f7f1 fff7 	bl	80002bc <__adddf3>
 800e2ce:	f7f2 fc5b 	bl	8000b88 <__aeabi_d2iz>
 800e2d2:	4683      	mov	fp, r0
 800e2d4:	f7f2 f93e 	bl	8000554 <__aeabi_i2d>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	ec43 2b18 	vmov	d8, r2, r3
 800e2e0:	a367      	add	r3, pc, #412	; (adr r3, 800e480 <__ieee754_rem_pio2+0x300>)
 800e2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e6:	f7f2 f99f 	bl	8000628 <__aeabi_dmul>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	f7f1 ffe1 	bl	80002b8 <__aeabi_dsub>
 800e2f6:	a364      	add	r3, pc, #400	; (adr r3, 800e488 <__ieee754_rem_pio2+0x308>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	4606      	mov	r6, r0
 800e2fe:	460f      	mov	r7, r1
 800e300:	ec51 0b18 	vmov	r0, r1, d8
 800e304:	f7f2 f990 	bl	8000628 <__aeabi_dmul>
 800e308:	f1bb 0f1f 	cmp.w	fp, #31
 800e30c:	4604      	mov	r4, r0
 800e30e:	460d      	mov	r5, r1
 800e310:	dc0d      	bgt.n	800e32e <__ieee754_rem_pio2+0x1ae>
 800e312:	4b6e      	ldr	r3, [pc, #440]	; (800e4cc <__ieee754_rem_pio2+0x34c>)
 800e314:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31c:	4543      	cmp	r3, r8
 800e31e:	d006      	beq.n	800e32e <__ieee754_rem_pio2+0x1ae>
 800e320:	4622      	mov	r2, r4
 800e322:	462b      	mov	r3, r5
 800e324:	4630      	mov	r0, r6
 800e326:	4639      	mov	r1, r7
 800e328:	f7f1 ffc6 	bl	80002b8 <__aeabi_dsub>
 800e32c:	e00f      	b.n	800e34e <__ieee754_rem_pio2+0x1ce>
 800e32e:	462b      	mov	r3, r5
 800e330:	4622      	mov	r2, r4
 800e332:	4630      	mov	r0, r6
 800e334:	4639      	mov	r1, r7
 800e336:	f7f1 ffbf 	bl	80002b8 <__aeabi_dsub>
 800e33a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e33e:	9303      	str	r3, [sp, #12]
 800e340:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e344:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e348:	f1b8 0f10 	cmp.w	r8, #16
 800e34c:	dc02      	bgt.n	800e354 <__ieee754_rem_pio2+0x1d4>
 800e34e:	e9ca 0100 	strd	r0, r1, [sl]
 800e352:	e039      	b.n	800e3c8 <__ieee754_rem_pio2+0x248>
 800e354:	a34e      	add	r3, pc, #312	; (adr r3, 800e490 <__ieee754_rem_pio2+0x310>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	ec51 0b18 	vmov	r0, r1, d8
 800e35e:	f7f2 f963 	bl	8000628 <__aeabi_dmul>
 800e362:	4604      	mov	r4, r0
 800e364:	460d      	mov	r5, r1
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	4630      	mov	r0, r6
 800e36c:	4639      	mov	r1, r7
 800e36e:	f7f1 ffa3 	bl	80002b8 <__aeabi_dsub>
 800e372:	4602      	mov	r2, r0
 800e374:	460b      	mov	r3, r1
 800e376:	4680      	mov	r8, r0
 800e378:	4689      	mov	r9, r1
 800e37a:	4630      	mov	r0, r6
 800e37c:	4639      	mov	r1, r7
 800e37e:	f7f1 ff9b 	bl	80002b8 <__aeabi_dsub>
 800e382:	4622      	mov	r2, r4
 800e384:	462b      	mov	r3, r5
 800e386:	f7f1 ff97 	bl	80002b8 <__aeabi_dsub>
 800e38a:	a343      	add	r3, pc, #268	; (adr r3, 800e498 <__ieee754_rem_pio2+0x318>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	4604      	mov	r4, r0
 800e392:	460d      	mov	r5, r1
 800e394:	ec51 0b18 	vmov	r0, r1, d8
 800e398:	f7f2 f946 	bl	8000628 <__aeabi_dmul>
 800e39c:	4622      	mov	r2, r4
 800e39e:	462b      	mov	r3, r5
 800e3a0:	f7f1 ff8a 	bl	80002b8 <__aeabi_dsub>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	4640      	mov	r0, r8
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	f7f1 ff82 	bl	80002b8 <__aeabi_dsub>
 800e3b4:	9a03      	ldr	r2, [sp, #12]
 800e3b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	2b31      	cmp	r3, #49	; 0x31
 800e3be:	dc24      	bgt.n	800e40a <__ieee754_rem_pio2+0x28a>
 800e3c0:	e9ca 0100 	strd	r0, r1, [sl]
 800e3c4:	4646      	mov	r6, r8
 800e3c6:	464f      	mov	r7, r9
 800e3c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	4642      	mov	r2, r8
 800e3d0:	464b      	mov	r3, r9
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	f7f1 ff70 	bl	80002b8 <__aeabi_dsub>
 800e3d8:	462b      	mov	r3, r5
 800e3da:	4622      	mov	r2, r4
 800e3dc:	f7f1 ff6c 	bl	80002b8 <__aeabi_dsub>
 800e3e0:	9b02      	ldr	r3, [sp, #8]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3e8:	f6bf af0a 	bge.w	800e200 <__ieee754_rem_pio2+0x80>
 800e3ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e3f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800e3f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3f8:	f8ca 8000 	str.w	r8, [sl]
 800e3fc:	f8ca 0008 	str.w	r0, [sl, #8]
 800e400:	f8ca 300c 	str.w	r3, [sl, #12]
 800e404:	f1cb 0b00 	rsb	fp, fp, #0
 800e408:	e6fa      	b.n	800e200 <__ieee754_rem_pio2+0x80>
 800e40a:	a327      	add	r3, pc, #156	; (adr r3, 800e4a8 <__ieee754_rem_pio2+0x328>)
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	ec51 0b18 	vmov	r0, r1, d8
 800e414:	f7f2 f908 	bl	8000628 <__aeabi_dmul>
 800e418:	4604      	mov	r4, r0
 800e41a:	460d      	mov	r5, r1
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	4640      	mov	r0, r8
 800e422:	4649      	mov	r1, r9
 800e424:	f7f1 ff48 	bl	80002b8 <__aeabi_dsub>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4606      	mov	r6, r0
 800e42e:	460f      	mov	r7, r1
 800e430:	4640      	mov	r0, r8
 800e432:	4649      	mov	r1, r9
 800e434:	f7f1 ff40 	bl	80002b8 <__aeabi_dsub>
 800e438:	4622      	mov	r2, r4
 800e43a:	462b      	mov	r3, r5
 800e43c:	f7f1 ff3c 	bl	80002b8 <__aeabi_dsub>
 800e440:	a31b      	add	r3, pc, #108	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x330>)
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	ec51 0b18 	vmov	r0, r1, d8
 800e44e:	f7f2 f8eb 	bl	8000628 <__aeabi_dmul>
 800e452:	4622      	mov	r2, r4
 800e454:	462b      	mov	r3, r5
 800e456:	f7f1 ff2f 	bl	80002b8 <__aeabi_dsub>
 800e45a:	4604      	mov	r4, r0
 800e45c:	460d      	mov	r5, r1
 800e45e:	e75f      	b.n	800e320 <__ieee754_rem_pio2+0x1a0>
 800e460:	4b1b      	ldr	r3, [pc, #108]	; (800e4d0 <__ieee754_rem_pio2+0x350>)
 800e462:	4598      	cmp	r8, r3
 800e464:	dd36      	ble.n	800e4d4 <__ieee754_rem_pio2+0x354>
 800e466:	ee10 2a10 	vmov	r2, s0
 800e46a:	462b      	mov	r3, r5
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f1 ff22 	bl	80002b8 <__aeabi_dsub>
 800e474:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e478:	e9ca 0100 	strd	r0, r1, [sl]
 800e47c:	e694      	b.n	800e1a8 <__ieee754_rem_pio2+0x28>
 800e47e:	bf00      	nop
 800e480:	54400000 	.word	0x54400000
 800e484:	3ff921fb 	.word	0x3ff921fb
 800e488:	1a626331 	.word	0x1a626331
 800e48c:	3dd0b461 	.word	0x3dd0b461
 800e490:	1a600000 	.word	0x1a600000
 800e494:	3dd0b461 	.word	0x3dd0b461
 800e498:	2e037073 	.word	0x2e037073
 800e49c:	3ba3198a 	.word	0x3ba3198a
 800e4a0:	6dc9c883 	.word	0x6dc9c883
 800e4a4:	3fe45f30 	.word	0x3fe45f30
 800e4a8:	2e000000 	.word	0x2e000000
 800e4ac:	3ba3198a 	.word	0x3ba3198a
 800e4b0:	252049c1 	.word	0x252049c1
 800e4b4:	397b839a 	.word	0x397b839a
 800e4b8:	3fe921fb 	.word	0x3fe921fb
 800e4bc:	4002d97b 	.word	0x4002d97b
 800e4c0:	3ff921fb 	.word	0x3ff921fb
 800e4c4:	413921fb 	.word	0x413921fb
 800e4c8:	3fe00000 	.word	0x3fe00000
 800e4cc:	0800fd40 	.word	0x0800fd40
 800e4d0:	7fefffff 	.word	0x7fefffff
 800e4d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e4d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e4dc:	ee10 0a10 	vmov	r0, s0
 800e4e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e4e4:	ee10 6a10 	vmov	r6, s0
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	f7f2 fb4d 	bl	8000b88 <__aeabi_d2iz>
 800e4ee:	f7f2 f831 	bl	8000554 <__aeabi_i2d>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4fe:	f7f1 fedb 	bl	80002b8 <__aeabi_dsub>
 800e502:	4b23      	ldr	r3, [pc, #140]	; (800e590 <__ieee754_rem_pio2+0x410>)
 800e504:	2200      	movs	r2, #0
 800e506:	f7f2 f88f 	bl	8000628 <__aeabi_dmul>
 800e50a:	460f      	mov	r7, r1
 800e50c:	4606      	mov	r6, r0
 800e50e:	f7f2 fb3b 	bl	8000b88 <__aeabi_d2iz>
 800e512:	f7f2 f81f 	bl	8000554 <__aeabi_i2d>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4630      	mov	r0, r6
 800e51c:	4639      	mov	r1, r7
 800e51e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e522:	f7f1 fec9 	bl	80002b8 <__aeabi_dsub>
 800e526:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <__ieee754_rem_pio2+0x410>)
 800e528:	2200      	movs	r2, #0
 800e52a:	f7f2 f87d 	bl	8000628 <__aeabi_dmul>
 800e52e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e532:	ad04      	add	r5, sp, #16
 800e534:	f04f 0803 	mov.w	r8, #3
 800e538:	46a9      	mov	r9, r5
 800e53a:	2600      	movs	r6, #0
 800e53c:	2700      	movs	r7, #0
 800e53e:	4632      	mov	r2, r6
 800e540:	463b      	mov	r3, r7
 800e542:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e546:	46c3      	mov	fp, r8
 800e548:	3d08      	subs	r5, #8
 800e54a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e54e:	f7f2 fad3 	bl	8000af8 <__aeabi_dcmpeq>
 800e552:	2800      	cmp	r0, #0
 800e554:	d1f3      	bne.n	800e53e <__ieee754_rem_pio2+0x3be>
 800e556:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <__ieee754_rem_pio2+0x414>)
 800e558:	9301      	str	r3, [sp, #4]
 800e55a:	2302      	movs	r3, #2
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	4622      	mov	r2, r4
 800e560:	465b      	mov	r3, fp
 800e562:	4651      	mov	r1, sl
 800e564:	4648      	mov	r0, r9
 800e566:	f000 f993 	bl	800e890 <__kernel_rem_pio2>
 800e56a:	9b02      	ldr	r3, [sp, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	4683      	mov	fp, r0
 800e570:	f6bf ae46 	bge.w	800e200 <__ieee754_rem_pio2+0x80>
 800e574:	e9da 2100 	ldrd	r2, r1, [sl]
 800e578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e57c:	e9ca 2300 	strd	r2, r3, [sl]
 800e580:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e588:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e58c:	e73a      	b.n	800e404 <__ieee754_rem_pio2+0x284>
 800e58e:	bf00      	nop
 800e590:	41700000 	.word	0x41700000
 800e594:	0800fdc0 	.word	0x0800fdc0

0800e598 <__ieee754_sqrt>:
 800e598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e59c:	ec55 4b10 	vmov	r4, r5, d0
 800e5a0:	4e55      	ldr	r6, [pc, #340]	; (800e6f8 <__ieee754_sqrt+0x160>)
 800e5a2:	43ae      	bics	r6, r5
 800e5a4:	ee10 0a10 	vmov	r0, s0
 800e5a8:	ee10 3a10 	vmov	r3, s0
 800e5ac:	462a      	mov	r2, r5
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	d110      	bne.n	800e5d4 <__ieee754_sqrt+0x3c>
 800e5b2:	ee10 2a10 	vmov	r2, s0
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f2 f836 	bl	8000628 <__aeabi_dmul>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	460b      	mov	r3, r1
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	f7f1 fe7a 	bl	80002bc <__adddf3>
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	460d      	mov	r5, r1
 800e5cc:	ec45 4b10 	vmov	d0, r4, r5
 800e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d4:	2d00      	cmp	r5, #0
 800e5d6:	dc10      	bgt.n	800e5fa <__ieee754_sqrt+0x62>
 800e5d8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e5dc:	4330      	orrs	r0, r6
 800e5de:	d0f5      	beq.n	800e5cc <__ieee754_sqrt+0x34>
 800e5e0:	b15d      	cbz	r5, 800e5fa <__ieee754_sqrt+0x62>
 800e5e2:	ee10 2a10 	vmov	r2, s0
 800e5e6:	462b      	mov	r3, r5
 800e5e8:	ee10 0a10 	vmov	r0, s0
 800e5ec:	f7f1 fe64 	bl	80002b8 <__aeabi_dsub>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	f7f2 f942 	bl	800087c <__aeabi_ddiv>
 800e5f8:	e7e6      	b.n	800e5c8 <__ieee754_sqrt+0x30>
 800e5fa:	1512      	asrs	r2, r2, #20
 800e5fc:	d074      	beq.n	800e6e8 <__ieee754_sqrt+0x150>
 800e5fe:	07d4      	lsls	r4, r2, #31
 800e600:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e604:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e60c:	bf5e      	ittt	pl
 800e60e:	0fda      	lsrpl	r2, r3, #31
 800e610:	005b      	lslpl	r3, r3, #1
 800e612:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e616:	2400      	movs	r4, #0
 800e618:	0fda      	lsrs	r2, r3, #31
 800e61a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e61e:	107f      	asrs	r7, r7, #1
 800e620:	005b      	lsls	r3, r3, #1
 800e622:	2516      	movs	r5, #22
 800e624:	4620      	mov	r0, r4
 800e626:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e62a:	1886      	adds	r6, r0, r2
 800e62c:	428e      	cmp	r6, r1
 800e62e:	bfde      	ittt	le
 800e630:	1b89      	suble	r1, r1, r6
 800e632:	18b0      	addle	r0, r6, r2
 800e634:	18a4      	addle	r4, r4, r2
 800e636:	0049      	lsls	r1, r1, #1
 800e638:	3d01      	subs	r5, #1
 800e63a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e63e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e642:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e646:	d1f0      	bne.n	800e62a <__ieee754_sqrt+0x92>
 800e648:	462a      	mov	r2, r5
 800e64a:	f04f 0e20 	mov.w	lr, #32
 800e64e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e652:	4281      	cmp	r1, r0
 800e654:	eb06 0c05 	add.w	ip, r6, r5
 800e658:	dc02      	bgt.n	800e660 <__ieee754_sqrt+0xc8>
 800e65a:	d113      	bne.n	800e684 <__ieee754_sqrt+0xec>
 800e65c:	459c      	cmp	ip, r3
 800e65e:	d811      	bhi.n	800e684 <__ieee754_sqrt+0xec>
 800e660:	f1bc 0f00 	cmp.w	ip, #0
 800e664:	eb0c 0506 	add.w	r5, ip, r6
 800e668:	da43      	bge.n	800e6f2 <__ieee754_sqrt+0x15a>
 800e66a:	2d00      	cmp	r5, #0
 800e66c:	db41      	blt.n	800e6f2 <__ieee754_sqrt+0x15a>
 800e66e:	f100 0801 	add.w	r8, r0, #1
 800e672:	1a09      	subs	r1, r1, r0
 800e674:	459c      	cmp	ip, r3
 800e676:	bf88      	it	hi
 800e678:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e67c:	eba3 030c 	sub.w	r3, r3, ip
 800e680:	4432      	add	r2, r6
 800e682:	4640      	mov	r0, r8
 800e684:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e688:	f1be 0e01 	subs.w	lr, lr, #1
 800e68c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e690:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e694:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e698:	d1db      	bne.n	800e652 <__ieee754_sqrt+0xba>
 800e69a:	430b      	orrs	r3, r1
 800e69c:	d006      	beq.n	800e6ac <__ieee754_sqrt+0x114>
 800e69e:	1c50      	adds	r0, r2, #1
 800e6a0:	bf13      	iteet	ne
 800e6a2:	3201      	addne	r2, #1
 800e6a4:	3401      	addeq	r4, #1
 800e6a6:	4672      	moveq	r2, lr
 800e6a8:	f022 0201 	bicne.w	r2, r2, #1
 800e6ac:	1063      	asrs	r3, r4, #1
 800e6ae:	0852      	lsrs	r2, r2, #1
 800e6b0:	07e1      	lsls	r1, r4, #31
 800e6b2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e6b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e6ba:	bf48      	it	mi
 800e6bc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e6c0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e6c4:	4614      	mov	r4, r2
 800e6c6:	e781      	b.n	800e5cc <__ieee754_sqrt+0x34>
 800e6c8:	0ad9      	lsrs	r1, r3, #11
 800e6ca:	3815      	subs	r0, #21
 800e6cc:	055b      	lsls	r3, r3, #21
 800e6ce:	2900      	cmp	r1, #0
 800e6d0:	d0fa      	beq.n	800e6c8 <__ieee754_sqrt+0x130>
 800e6d2:	02cd      	lsls	r5, r1, #11
 800e6d4:	d50a      	bpl.n	800e6ec <__ieee754_sqrt+0x154>
 800e6d6:	f1c2 0420 	rsb	r4, r2, #32
 800e6da:	fa23 f404 	lsr.w	r4, r3, r4
 800e6de:	1e55      	subs	r5, r2, #1
 800e6e0:	4093      	lsls	r3, r2
 800e6e2:	4321      	orrs	r1, r4
 800e6e4:	1b42      	subs	r2, r0, r5
 800e6e6:	e78a      	b.n	800e5fe <__ieee754_sqrt+0x66>
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	e7f0      	b.n	800e6ce <__ieee754_sqrt+0x136>
 800e6ec:	0049      	lsls	r1, r1, #1
 800e6ee:	3201      	adds	r2, #1
 800e6f0:	e7ef      	b.n	800e6d2 <__ieee754_sqrt+0x13a>
 800e6f2:	4680      	mov	r8, r0
 800e6f4:	e7bd      	b.n	800e672 <__ieee754_sqrt+0xda>
 800e6f6:	bf00      	nop
 800e6f8:	7ff00000 	.word	0x7ff00000
 800e6fc:	00000000 	.word	0x00000000

0800e700 <__kernel_cos>:
 800e700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e704:	ec57 6b10 	vmov	r6, r7, d0
 800e708:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e70c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e710:	ed8d 1b00 	vstr	d1, [sp]
 800e714:	da07      	bge.n	800e726 <__kernel_cos+0x26>
 800e716:	ee10 0a10 	vmov	r0, s0
 800e71a:	4639      	mov	r1, r7
 800e71c:	f7f2 fa34 	bl	8000b88 <__aeabi_d2iz>
 800e720:	2800      	cmp	r0, #0
 800e722:	f000 8088 	beq.w	800e836 <__kernel_cos+0x136>
 800e726:	4632      	mov	r2, r6
 800e728:	463b      	mov	r3, r7
 800e72a:	4630      	mov	r0, r6
 800e72c:	4639      	mov	r1, r7
 800e72e:	f7f1 ff7b 	bl	8000628 <__aeabi_dmul>
 800e732:	4b51      	ldr	r3, [pc, #324]	; (800e878 <__kernel_cos+0x178>)
 800e734:	2200      	movs	r2, #0
 800e736:	4604      	mov	r4, r0
 800e738:	460d      	mov	r5, r1
 800e73a:	f7f1 ff75 	bl	8000628 <__aeabi_dmul>
 800e73e:	a340      	add	r3, pc, #256	; (adr r3, 800e840 <__kernel_cos+0x140>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	4682      	mov	sl, r0
 800e746:	468b      	mov	fp, r1
 800e748:	4620      	mov	r0, r4
 800e74a:	4629      	mov	r1, r5
 800e74c:	f7f1 ff6c 	bl	8000628 <__aeabi_dmul>
 800e750:	a33d      	add	r3, pc, #244	; (adr r3, 800e848 <__kernel_cos+0x148>)
 800e752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e756:	f7f1 fdb1 	bl	80002bc <__adddf3>
 800e75a:	4622      	mov	r2, r4
 800e75c:	462b      	mov	r3, r5
 800e75e:	f7f1 ff63 	bl	8000628 <__aeabi_dmul>
 800e762:	a33b      	add	r3, pc, #236	; (adr r3, 800e850 <__kernel_cos+0x150>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 fda6 	bl	80002b8 <__aeabi_dsub>
 800e76c:	4622      	mov	r2, r4
 800e76e:	462b      	mov	r3, r5
 800e770:	f7f1 ff5a 	bl	8000628 <__aeabi_dmul>
 800e774:	a338      	add	r3, pc, #224	; (adr r3, 800e858 <__kernel_cos+0x158>)
 800e776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77a:	f7f1 fd9f 	bl	80002bc <__adddf3>
 800e77e:	4622      	mov	r2, r4
 800e780:	462b      	mov	r3, r5
 800e782:	f7f1 ff51 	bl	8000628 <__aeabi_dmul>
 800e786:	a336      	add	r3, pc, #216	; (adr r3, 800e860 <__kernel_cos+0x160>)
 800e788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78c:	f7f1 fd94 	bl	80002b8 <__aeabi_dsub>
 800e790:	4622      	mov	r2, r4
 800e792:	462b      	mov	r3, r5
 800e794:	f7f1 ff48 	bl	8000628 <__aeabi_dmul>
 800e798:	a333      	add	r3, pc, #204	; (adr r3, 800e868 <__kernel_cos+0x168>)
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	f7f1 fd8d 	bl	80002bc <__adddf3>
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	462b      	mov	r3, r5
 800e7a6:	f7f1 ff3f 	bl	8000628 <__aeabi_dmul>
 800e7aa:	4622      	mov	r2, r4
 800e7ac:	462b      	mov	r3, r5
 800e7ae:	f7f1 ff3b 	bl	8000628 <__aeabi_dmul>
 800e7b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	460d      	mov	r5, r1
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	f7f1 ff33 	bl	8000628 <__aeabi_dmul>
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	f7f1 fd75 	bl	80002b8 <__aeabi_dsub>
 800e7ce:	4b2b      	ldr	r3, [pc, #172]	; (800e87c <__kernel_cos+0x17c>)
 800e7d0:	4598      	cmp	r8, r3
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	460f      	mov	r7, r1
 800e7d6:	dc10      	bgt.n	800e7fa <__kernel_cos+0xfa>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4650      	mov	r0, sl
 800e7de:	4659      	mov	r1, fp
 800e7e0:	f7f1 fd6a 	bl	80002b8 <__aeabi_dsub>
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4926      	ldr	r1, [pc, #152]	; (800e880 <__kernel_cos+0x180>)
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	f7f1 fd64 	bl	80002b8 <__aeabi_dsub>
 800e7f0:	ec41 0b10 	vmov	d0, r0, r1
 800e7f4:	b003      	add	sp, #12
 800e7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fa:	4b22      	ldr	r3, [pc, #136]	; (800e884 <__kernel_cos+0x184>)
 800e7fc:	4920      	ldr	r1, [pc, #128]	; (800e880 <__kernel_cos+0x180>)
 800e7fe:	4598      	cmp	r8, r3
 800e800:	bfcc      	ite	gt
 800e802:	4d21      	ldrgt	r5, [pc, #132]	; (800e888 <__kernel_cos+0x188>)
 800e804:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e808:	2400      	movs	r4, #0
 800e80a:	4622      	mov	r2, r4
 800e80c:	462b      	mov	r3, r5
 800e80e:	2000      	movs	r0, #0
 800e810:	f7f1 fd52 	bl	80002b8 <__aeabi_dsub>
 800e814:	4622      	mov	r2, r4
 800e816:	4680      	mov	r8, r0
 800e818:	4689      	mov	r9, r1
 800e81a:	462b      	mov	r3, r5
 800e81c:	4650      	mov	r0, sl
 800e81e:	4659      	mov	r1, fp
 800e820:	f7f1 fd4a 	bl	80002b8 <__aeabi_dsub>
 800e824:	4632      	mov	r2, r6
 800e826:	463b      	mov	r3, r7
 800e828:	f7f1 fd46 	bl	80002b8 <__aeabi_dsub>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	4640      	mov	r0, r8
 800e832:	4649      	mov	r1, r9
 800e834:	e7da      	b.n	800e7ec <__kernel_cos+0xec>
 800e836:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e870 <__kernel_cos+0x170>
 800e83a:	e7db      	b.n	800e7f4 <__kernel_cos+0xf4>
 800e83c:	f3af 8000 	nop.w
 800e840:	be8838d4 	.word	0xbe8838d4
 800e844:	bda8fae9 	.word	0xbda8fae9
 800e848:	bdb4b1c4 	.word	0xbdb4b1c4
 800e84c:	3e21ee9e 	.word	0x3e21ee9e
 800e850:	809c52ad 	.word	0x809c52ad
 800e854:	3e927e4f 	.word	0x3e927e4f
 800e858:	19cb1590 	.word	0x19cb1590
 800e85c:	3efa01a0 	.word	0x3efa01a0
 800e860:	16c15177 	.word	0x16c15177
 800e864:	3f56c16c 	.word	0x3f56c16c
 800e868:	5555554c 	.word	0x5555554c
 800e86c:	3fa55555 	.word	0x3fa55555
 800e870:	00000000 	.word	0x00000000
 800e874:	3ff00000 	.word	0x3ff00000
 800e878:	3fe00000 	.word	0x3fe00000
 800e87c:	3fd33332 	.word	0x3fd33332
 800e880:	3ff00000 	.word	0x3ff00000
 800e884:	3fe90000 	.word	0x3fe90000
 800e888:	3fd20000 	.word	0x3fd20000
 800e88c:	00000000 	.word	0x00000000

0800e890 <__kernel_rem_pio2>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	ed2d 8b02 	vpush	{d8}
 800e898:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e89c:	f112 0f14 	cmn.w	r2, #20
 800e8a0:	9308      	str	r3, [sp, #32]
 800e8a2:	9101      	str	r1, [sp, #4]
 800e8a4:	4bc4      	ldr	r3, [pc, #784]	; (800ebb8 <__kernel_rem_pio2+0x328>)
 800e8a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e8a8:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8ae:	9302      	str	r3, [sp, #8]
 800e8b0:	9b08      	ldr	r3, [sp, #32]
 800e8b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8b6:	bfa8      	it	ge
 800e8b8:	1ed4      	subge	r4, r2, #3
 800e8ba:	9306      	str	r3, [sp, #24]
 800e8bc:	bfb2      	itee	lt
 800e8be:	2400      	movlt	r4, #0
 800e8c0:	2318      	movge	r3, #24
 800e8c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e8c6:	f06f 0317 	mvn.w	r3, #23
 800e8ca:	fb04 3303 	mla	r3, r4, r3, r3
 800e8ce:	eb03 0a02 	add.w	sl, r3, r2
 800e8d2:	9b02      	ldr	r3, [sp, #8]
 800e8d4:	9a06      	ldr	r2, [sp, #24]
 800e8d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800eba8 <__kernel_rem_pio2+0x318>
 800e8da:	eb03 0802 	add.w	r8, r3, r2
 800e8de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e8e0:	1aa7      	subs	r7, r4, r2
 800e8e2:	ae22      	add	r6, sp, #136	; 0x88
 800e8e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e8e8:	2500      	movs	r5, #0
 800e8ea:	4545      	cmp	r5, r8
 800e8ec:	dd13      	ble.n	800e916 <__kernel_rem_pio2+0x86>
 800e8ee:	9b08      	ldr	r3, [sp, #32]
 800e8f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800eba8 <__kernel_rem_pio2+0x318>
 800e8f4:	aa22      	add	r2, sp, #136	; 0x88
 800e8f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e8fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e8fe:	f04f 0800 	mov.w	r8, #0
 800e902:	9b02      	ldr	r3, [sp, #8]
 800e904:	4598      	cmp	r8, r3
 800e906:	dc2f      	bgt.n	800e968 <__kernel_rem_pio2+0xd8>
 800e908:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e90c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e910:	462f      	mov	r7, r5
 800e912:	2600      	movs	r6, #0
 800e914:	e01b      	b.n	800e94e <__kernel_rem_pio2+0xbe>
 800e916:	42ef      	cmn	r7, r5
 800e918:	d407      	bmi.n	800e92a <__kernel_rem_pio2+0x9a>
 800e91a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e91e:	f7f1 fe19 	bl	8000554 <__aeabi_i2d>
 800e922:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e926:	3501      	adds	r5, #1
 800e928:	e7df      	b.n	800e8ea <__kernel_rem_pio2+0x5a>
 800e92a:	ec51 0b18 	vmov	r0, r1, d8
 800e92e:	e7f8      	b.n	800e922 <__kernel_rem_pio2+0x92>
 800e930:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e934:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e938:	f7f1 fe76 	bl	8000628 <__aeabi_dmul>
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e944:	f7f1 fcba 	bl	80002bc <__adddf3>
 800e948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e94c:	3601      	adds	r6, #1
 800e94e:	9b06      	ldr	r3, [sp, #24]
 800e950:	429e      	cmp	r6, r3
 800e952:	f1a7 0708 	sub.w	r7, r7, #8
 800e956:	ddeb      	ble.n	800e930 <__kernel_rem_pio2+0xa0>
 800e958:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e95c:	f108 0801 	add.w	r8, r8, #1
 800e960:	ecab 7b02 	vstmia	fp!, {d7}
 800e964:	3508      	adds	r5, #8
 800e966:	e7cc      	b.n	800e902 <__kernel_rem_pio2+0x72>
 800e968:	9b02      	ldr	r3, [sp, #8]
 800e96a:	aa0e      	add	r2, sp, #56	; 0x38
 800e96c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e970:	930d      	str	r3, [sp, #52]	; 0x34
 800e972:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e974:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e978:	9c02      	ldr	r4, [sp, #8]
 800e97a:	930c      	str	r3, [sp, #48]	; 0x30
 800e97c:	00e3      	lsls	r3, r4, #3
 800e97e:	930a      	str	r3, [sp, #40]	; 0x28
 800e980:	ab9a      	add	r3, sp, #616	; 0x268
 800e982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e986:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e98a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e98e:	ab72      	add	r3, sp, #456	; 0x1c8
 800e990:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e994:	46c3      	mov	fp, r8
 800e996:	46a1      	mov	r9, r4
 800e998:	f1b9 0f00 	cmp.w	r9, #0
 800e99c:	f1a5 0508 	sub.w	r5, r5, #8
 800e9a0:	dc77      	bgt.n	800ea92 <__kernel_rem_pio2+0x202>
 800e9a2:	ec47 6b10 	vmov	d0, r6, r7
 800e9a6:	4650      	mov	r0, sl
 800e9a8:	f000 fde6 	bl	800f578 <scalbn>
 800e9ac:	ec57 6b10 	vmov	r6, r7, d0
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e9b6:	ee10 0a10 	vmov	r0, s0
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f7f1 fe34 	bl	8000628 <__aeabi_dmul>
 800e9c0:	ec41 0b10 	vmov	d0, r0, r1
 800e9c4:	f000 fd58 	bl	800f478 <floor>
 800e9c8:	4b7c      	ldr	r3, [pc, #496]	; (800ebbc <__kernel_rem_pio2+0x32c>)
 800e9ca:	ec51 0b10 	vmov	r0, r1, d0
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f7f1 fe2a 	bl	8000628 <__aeabi_dmul>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4630      	mov	r0, r6
 800e9da:	4639      	mov	r1, r7
 800e9dc:	f7f1 fc6c 	bl	80002b8 <__aeabi_dsub>
 800e9e0:	460f      	mov	r7, r1
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	f7f2 f8d0 	bl	8000b88 <__aeabi_d2iz>
 800e9e8:	9004      	str	r0, [sp, #16]
 800e9ea:	f7f1 fdb3 	bl	8000554 <__aeabi_i2d>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	f7f1 fc5f 	bl	80002b8 <__aeabi_dsub>
 800e9fa:	f1ba 0f00 	cmp.w	sl, #0
 800e9fe:	4606      	mov	r6, r0
 800ea00:	460f      	mov	r7, r1
 800ea02:	dd6d      	ble.n	800eae0 <__kernel_rem_pio2+0x250>
 800ea04:	1e62      	subs	r2, r4, #1
 800ea06:	ab0e      	add	r3, sp, #56	; 0x38
 800ea08:	9d04      	ldr	r5, [sp, #16]
 800ea0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea0e:	f1ca 0118 	rsb	r1, sl, #24
 800ea12:	fa40 f301 	asr.w	r3, r0, r1
 800ea16:	441d      	add	r5, r3
 800ea18:	408b      	lsls	r3, r1
 800ea1a:	1ac0      	subs	r0, r0, r3
 800ea1c:	ab0e      	add	r3, sp, #56	; 0x38
 800ea1e:	9504      	str	r5, [sp, #16]
 800ea20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ea24:	f1ca 0317 	rsb	r3, sl, #23
 800ea28:	fa40 fb03 	asr.w	fp, r0, r3
 800ea2c:	f1bb 0f00 	cmp.w	fp, #0
 800ea30:	dd65      	ble.n	800eafe <__kernel_rem_pio2+0x26e>
 800ea32:	9b04      	ldr	r3, [sp, #16]
 800ea34:	2200      	movs	r2, #0
 800ea36:	3301      	adds	r3, #1
 800ea38:	9304      	str	r3, [sp, #16]
 800ea3a:	4615      	mov	r5, r2
 800ea3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ea40:	4294      	cmp	r4, r2
 800ea42:	f300 809c 	bgt.w	800eb7e <__kernel_rem_pio2+0x2ee>
 800ea46:	f1ba 0f00 	cmp.w	sl, #0
 800ea4a:	dd07      	ble.n	800ea5c <__kernel_rem_pio2+0x1cc>
 800ea4c:	f1ba 0f01 	cmp.w	sl, #1
 800ea50:	f000 80c0 	beq.w	800ebd4 <__kernel_rem_pio2+0x344>
 800ea54:	f1ba 0f02 	cmp.w	sl, #2
 800ea58:	f000 80c6 	beq.w	800ebe8 <__kernel_rem_pio2+0x358>
 800ea5c:	f1bb 0f02 	cmp.w	fp, #2
 800ea60:	d14d      	bne.n	800eafe <__kernel_rem_pio2+0x26e>
 800ea62:	4632      	mov	r2, r6
 800ea64:	463b      	mov	r3, r7
 800ea66:	4956      	ldr	r1, [pc, #344]	; (800ebc0 <__kernel_rem_pio2+0x330>)
 800ea68:	2000      	movs	r0, #0
 800ea6a:	f7f1 fc25 	bl	80002b8 <__aeabi_dsub>
 800ea6e:	4606      	mov	r6, r0
 800ea70:	460f      	mov	r7, r1
 800ea72:	2d00      	cmp	r5, #0
 800ea74:	d043      	beq.n	800eafe <__kernel_rem_pio2+0x26e>
 800ea76:	4650      	mov	r0, sl
 800ea78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ebb0 <__kernel_rem_pio2+0x320>
 800ea7c:	f000 fd7c 	bl	800f578 <scalbn>
 800ea80:	4630      	mov	r0, r6
 800ea82:	4639      	mov	r1, r7
 800ea84:	ec53 2b10 	vmov	r2, r3, d0
 800ea88:	f7f1 fc16 	bl	80002b8 <__aeabi_dsub>
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	e035      	b.n	800eafe <__kernel_rem_pio2+0x26e>
 800ea92:	4b4c      	ldr	r3, [pc, #304]	; (800ebc4 <__kernel_rem_pio2+0x334>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	4630      	mov	r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	f7f1 fdc5 	bl	8000628 <__aeabi_dmul>
 800ea9e:	f7f2 f873 	bl	8000b88 <__aeabi_d2iz>
 800eaa2:	f7f1 fd57 	bl	8000554 <__aeabi_i2d>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	ec43 2b18 	vmov	d8, r2, r3
 800eaae:	4b46      	ldr	r3, [pc, #280]	; (800ebc8 <__kernel_rem_pio2+0x338>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	f7f1 fdb9 	bl	8000628 <__aeabi_dmul>
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	4630      	mov	r0, r6
 800eabc:	4639      	mov	r1, r7
 800eabe:	f7f1 fbfb 	bl	80002b8 <__aeabi_dsub>
 800eac2:	f7f2 f861 	bl	8000b88 <__aeabi_d2iz>
 800eac6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaca:	f84b 0b04 	str.w	r0, [fp], #4
 800eace:	ec51 0b18 	vmov	r0, r1, d8
 800ead2:	f7f1 fbf3 	bl	80002bc <__adddf3>
 800ead6:	f109 39ff 	add.w	r9, r9, #4294967295
 800eada:	4606      	mov	r6, r0
 800eadc:	460f      	mov	r7, r1
 800eade:	e75b      	b.n	800e998 <__kernel_rem_pio2+0x108>
 800eae0:	d106      	bne.n	800eaf0 <__kernel_rem_pio2+0x260>
 800eae2:	1e63      	subs	r3, r4, #1
 800eae4:	aa0e      	add	r2, sp, #56	; 0x38
 800eae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eaea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800eaee:	e79d      	b.n	800ea2c <__kernel_rem_pio2+0x19c>
 800eaf0:	4b36      	ldr	r3, [pc, #216]	; (800ebcc <__kernel_rem_pio2+0x33c>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f7f2 f81e 	bl	8000b34 <__aeabi_dcmpge>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d13d      	bne.n	800eb78 <__kernel_rem_pio2+0x2e8>
 800eafc:	4683      	mov	fp, r0
 800eafe:	2200      	movs	r2, #0
 800eb00:	2300      	movs	r3, #0
 800eb02:	4630      	mov	r0, r6
 800eb04:	4639      	mov	r1, r7
 800eb06:	f7f1 fff7 	bl	8000af8 <__aeabi_dcmpeq>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	f000 80c0 	beq.w	800ec90 <__kernel_rem_pio2+0x400>
 800eb10:	1e65      	subs	r5, r4, #1
 800eb12:	462b      	mov	r3, r5
 800eb14:	2200      	movs	r2, #0
 800eb16:	9902      	ldr	r1, [sp, #8]
 800eb18:	428b      	cmp	r3, r1
 800eb1a:	da6c      	bge.n	800ebf6 <__kernel_rem_pio2+0x366>
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	f000 8089 	beq.w	800ec34 <__kernel_rem_pio2+0x3a4>
 800eb22:	ab0e      	add	r3, sp, #56	; 0x38
 800eb24:	f1aa 0a18 	sub.w	sl, sl, #24
 800eb28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f000 80ad 	beq.w	800ec8c <__kernel_rem_pio2+0x3fc>
 800eb32:	4650      	mov	r0, sl
 800eb34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ebb0 <__kernel_rem_pio2+0x320>
 800eb38:	f000 fd1e 	bl	800f578 <scalbn>
 800eb3c:	ab9a      	add	r3, sp, #616	; 0x268
 800eb3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb42:	ec57 6b10 	vmov	r6, r7, d0
 800eb46:	00ec      	lsls	r4, r5, #3
 800eb48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800eb4c:	46aa      	mov	sl, r5
 800eb4e:	f1ba 0f00 	cmp.w	sl, #0
 800eb52:	f280 80d6 	bge.w	800ed02 <__kernel_rem_pio2+0x472>
 800eb56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800eba8 <__kernel_rem_pio2+0x318>
 800eb5a:	462e      	mov	r6, r5
 800eb5c:	2e00      	cmp	r6, #0
 800eb5e:	f2c0 8104 	blt.w	800ed6a <__kernel_rem_pio2+0x4da>
 800eb62:	ab72      	add	r3, sp, #456	; 0x1c8
 800eb64:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eb68:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ebd0 <__kernel_rem_pio2+0x340>
 800eb6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800eb70:	f04f 0800 	mov.w	r8, #0
 800eb74:	1baf      	subs	r7, r5, r6
 800eb76:	e0ea      	b.n	800ed4e <__kernel_rem_pio2+0x4be>
 800eb78:	f04f 0b02 	mov.w	fp, #2
 800eb7c:	e759      	b.n	800ea32 <__kernel_rem_pio2+0x1a2>
 800eb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800eb82:	b955      	cbnz	r5, 800eb9a <__kernel_rem_pio2+0x30a>
 800eb84:	b123      	cbz	r3, 800eb90 <__kernel_rem_pio2+0x300>
 800eb86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb8a:	f8c8 3000 	str.w	r3, [r8]
 800eb8e:	2301      	movs	r3, #1
 800eb90:	3201      	adds	r2, #1
 800eb92:	f108 0804 	add.w	r8, r8, #4
 800eb96:	461d      	mov	r5, r3
 800eb98:	e752      	b.n	800ea40 <__kernel_rem_pio2+0x1b0>
 800eb9a:	1acb      	subs	r3, r1, r3
 800eb9c:	f8c8 3000 	str.w	r3, [r8]
 800eba0:	462b      	mov	r3, r5
 800eba2:	e7f5      	b.n	800eb90 <__kernel_rem_pio2+0x300>
 800eba4:	f3af 8000 	nop.w
	...
 800ebb4:	3ff00000 	.word	0x3ff00000
 800ebb8:	0800ff08 	.word	0x0800ff08
 800ebbc:	40200000 	.word	0x40200000
 800ebc0:	3ff00000 	.word	0x3ff00000
 800ebc4:	3e700000 	.word	0x3e700000
 800ebc8:	41700000 	.word	0x41700000
 800ebcc:	3fe00000 	.word	0x3fe00000
 800ebd0:	0800fec8 	.word	0x0800fec8
 800ebd4:	1e62      	subs	r2, r4, #1
 800ebd6:	ab0e      	add	r3, sp, #56	; 0x38
 800ebd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ebe0:	a90e      	add	r1, sp, #56	; 0x38
 800ebe2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ebe6:	e739      	b.n	800ea5c <__kernel_rem_pio2+0x1cc>
 800ebe8:	1e62      	subs	r2, r4, #1
 800ebea:	ab0e      	add	r3, sp, #56	; 0x38
 800ebec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ebf4:	e7f4      	b.n	800ebe0 <__kernel_rem_pio2+0x350>
 800ebf6:	a90e      	add	r1, sp, #56	; 0x38
 800ebf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	e789      	b.n	800eb16 <__kernel_rem_pio2+0x286>
 800ec02:	3301      	adds	r3, #1
 800ec04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ec08:	2900      	cmp	r1, #0
 800ec0a:	d0fa      	beq.n	800ec02 <__kernel_rem_pio2+0x372>
 800ec0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ec12:	446a      	add	r2, sp
 800ec14:	3a98      	subs	r2, #152	; 0x98
 800ec16:	920a      	str	r2, [sp, #40]	; 0x28
 800ec18:	9a08      	ldr	r2, [sp, #32]
 800ec1a:	18e3      	adds	r3, r4, r3
 800ec1c:	18a5      	adds	r5, r4, r2
 800ec1e:	aa22      	add	r2, sp, #136	; 0x88
 800ec20:	f104 0801 	add.w	r8, r4, #1
 800ec24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ec28:	9304      	str	r3, [sp, #16]
 800ec2a:	9b04      	ldr	r3, [sp, #16]
 800ec2c:	4543      	cmp	r3, r8
 800ec2e:	da04      	bge.n	800ec3a <__kernel_rem_pio2+0x3aa>
 800ec30:	461c      	mov	r4, r3
 800ec32:	e6a3      	b.n	800e97c <__kernel_rem_pio2+0xec>
 800ec34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec36:	2301      	movs	r3, #1
 800ec38:	e7e4      	b.n	800ec04 <__kernel_rem_pio2+0x374>
 800ec3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ec40:	f7f1 fc88 	bl	8000554 <__aeabi_i2d>
 800ec44:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ec48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec4a:	46ab      	mov	fp, r5
 800ec4c:	461c      	mov	r4, r3
 800ec4e:	f04f 0900 	mov.w	r9, #0
 800ec52:	2600      	movs	r6, #0
 800ec54:	2700      	movs	r7, #0
 800ec56:	9b06      	ldr	r3, [sp, #24]
 800ec58:	4599      	cmp	r9, r3
 800ec5a:	dd06      	ble.n	800ec6a <__kernel_rem_pio2+0x3da>
 800ec5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ec62:	f108 0801 	add.w	r8, r8, #1
 800ec66:	930a      	str	r3, [sp, #40]	; 0x28
 800ec68:	e7df      	b.n	800ec2a <__kernel_rem_pio2+0x39a>
 800ec6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ec6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ec72:	f7f1 fcd9 	bl	8000628 <__aeabi_dmul>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	f7f1 fb1d 	bl	80002bc <__adddf3>
 800ec82:	f109 0901 	add.w	r9, r9, #1
 800ec86:	4606      	mov	r6, r0
 800ec88:	460f      	mov	r7, r1
 800ec8a:	e7e4      	b.n	800ec56 <__kernel_rem_pio2+0x3c6>
 800ec8c:	3d01      	subs	r5, #1
 800ec8e:	e748      	b.n	800eb22 <__kernel_rem_pio2+0x292>
 800ec90:	ec47 6b10 	vmov	d0, r6, r7
 800ec94:	f1ca 0000 	rsb	r0, sl, #0
 800ec98:	f000 fc6e 	bl	800f578 <scalbn>
 800ec9c:	ec57 6b10 	vmov	r6, r7, d0
 800eca0:	4ba0      	ldr	r3, [pc, #640]	; (800ef24 <__kernel_rem_pio2+0x694>)
 800eca2:	ee10 0a10 	vmov	r0, s0
 800eca6:	2200      	movs	r2, #0
 800eca8:	4639      	mov	r1, r7
 800ecaa:	f7f1 ff43 	bl	8000b34 <__aeabi_dcmpge>
 800ecae:	b1f8      	cbz	r0, 800ecf0 <__kernel_rem_pio2+0x460>
 800ecb0:	4b9d      	ldr	r3, [pc, #628]	; (800ef28 <__kernel_rem_pio2+0x698>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	f7f1 fcb6 	bl	8000628 <__aeabi_dmul>
 800ecbc:	f7f1 ff64 	bl	8000b88 <__aeabi_d2iz>
 800ecc0:	4680      	mov	r8, r0
 800ecc2:	f7f1 fc47 	bl	8000554 <__aeabi_i2d>
 800ecc6:	4b97      	ldr	r3, [pc, #604]	; (800ef24 <__kernel_rem_pio2+0x694>)
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f7f1 fcad 	bl	8000628 <__aeabi_dmul>
 800ecce:	460b      	mov	r3, r1
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	4639      	mov	r1, r7
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	f7f1 faef 	bl	80002b8 <__aeabi_dsub>
 800ecda:	f7f1 ff55 	bl	8000b88 <__aeabi_d2iz>
 800ecde:	1c65      	adds	r5, r4, #1
 800ece0:	ab0e      	add	r3, sp, #56	; 0x38
 800ece2:	f10a 0a18 	add.w	sl, sl, #24
 800ece6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ecee:	e720      	b.n	800eb32 <__kernel_rem_pio2+0x2a2>
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	4639      	mov	r1, r7
 800ecf4:	f7f1 ff48 	bl	8000b88 <__aeabi_d2iz>
 800ecf8:	ab0e      	add	r3, sp, #56	; 0x38
 800ecfa:	4625      	mov	r5, r4
 800ecfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed00:	e717      	b.n	800eb32 <__kernel_rem_pio2+0x2a2>
 800ed02:	ab0e      	add	r3, sp, #56	; 0x38
 800ed04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ed08:	f7f1 fc24 	bl	8000554 <__aeabi_i2d>
 800ed0c:	4632      	mov	r2, r6
 800ed0e:	463b      	mov	r3, r7
 800ed10:	f7f1 fc8a 	bl	8000628 <__aeabi_dmul>
 800ed14:	4b84      	ldr	r3, [pc, #528]	; (800ef28 <__kernel_rem_pio2+0x698>)
 800ed16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	4639      	mov	r1, r7
 800ed20:	f7f1 fc82 	bl	8000628 <__aeabi_dmul>
 800ed24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed28:	4606      	mov	r6, r0
 800ed2a:	460f      	mov	r7, r1
 800ed2c:	e70f      	b.n	800eb4e <__kernel_rem_pio2+0x2be>
 800ed2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ed32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ed36:	f7f1 fc77 	bl	8000628 <__aeabi_dmul>
 800ed3a:	4602      	mov	r2, r0
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed42:	f7f1 fabb 	bl	80002bc <__adddf3>
 800ed46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed4a:	f108 0801 	add.w	r8, r8, #1
 800ed4e:	9b02      	ldr	r3, [sp, #8]
 800ed50:	4598      	cmp	r8, r3
 800ed52:	dc01      	bgt.n	800ed58 <__kernel_rem_pio2+0x4c8>
 800ed54:	45b8      	cmp	r8, r7
 800ed56:	ddea      	ble.n	800ed2e <__kernel_rem_pio2+0x49e>
 800ed58:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ed5c:	ab4a      	add	r3, sp, #296	; 0x128
 800ed5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ed62:	ed87 7b00 	vstr	d7, [r7]
 800ed66:	3e01      	subs	r6, #1
 800ed68:	e6f8      	b.n	800eb5c <__kernel_rem_pio2+0x2cc>
 800ed6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	dc0b      	bgt.n	800ed88 <__kernel_rem_pio2+0x4f8>
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	dc35      	bgt.n	800ede0 <__kernel_rem_pio2+0x550>
 800ed74:	d059      	beq.n	800ee2a <__kernel_rem_pio2+0x59a>
 800ed76:	9b04      	ldr	r3, [sp, #16]
 800ed78:	f003 0007 	and.w	r0, r3, #7
 800ed7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ed80:	ecbd 8b02 	vpop	{d8}
 800ed84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ed8a:	2b03      	cmp	r3, #3
 800ed8c:	d1f3      	bne.n	800ed76 <__kernel_rem_pio2+0x4e6>
 800ed8e:	ab4a      	add	r3, sp, #296	; 0x128
 800ed90:	4423      	add	r3, r4
 800ed92:	9306      	str	r3, [sp, #24]
 800ed94:	461c      	mov	r4, r3
 800ed96:	469a      	mov	sl, r3
 800ed98:	9502      	str	r5, [sp, #8]
 800ed9a:	9b02      	ldr	r3, [sp, #8]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f1aa 0a08 	sub.w	sl, sl, #8
 800eda2:	dc6b      	bgt.n	800ee7c <__kernel_rem_pio2+0x5ec>
 800eda4:	46aa      	mov	sl, r5
 800eda6:	f1ba 0f01 	cmp.w	sl, #1
 800edaa:	f1a4 0408 	sub.w	r4, r4, #8
 800edae:	f300 8085 	bgt.w	800eebc <__kernel_rem_pio2+0x62c>
 800edb2:	9c06      	ldr	r4, [sp, #24]
 800edb4:	2000      	movs	r0, #0
 800edb6:	3408      	adds	r4, #8
 800edb8:	2100      	movs	r1, #0
 800edba:	2d01      	cmp	r5, #1
 800edbc:	f300 809d 	bgt.w	800eefa <__kernel_rem_pio2+0x66a>
 800edc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800edc4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800edc8:	f1bb 0f00 	cmp.w	fp, #0
 800edcc:	f040 809b 	bne.w	800ef06 <__kernel_rem_pio2+0x676>
 800edd0:	9b01      	ldr	r3, [sp, #4]
 800edd2:	e9c3 5600 	strd	r5, r6, [r3]
 800edd6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800edda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800edde:	e7ca      	b.n	800ed76 <__kernel_rem_pio2+0x4e6>
 800ede0:	3408      	adds	r4, #8
 800ede2:	ab4a      	add	r3, sp, #296	; 0x128
 800ede4:	441c      	add	r4, r3
 800ede6:	462e      	mov	r6, r5
 800ede8:	2000      	movs	r0, #0
 800edea:	2100      	movs	r1, #0
 800edec:	2e00      	cmp	r6, #0
 800edee:	da36      	bge.n	800ee5e <__kernel_rem_pio2+0x5ce>
 800edf0:	f1bb 0f00 	cmp.w	fp, #0
 800edf4:	d039      	beq.n	800ee6a <__kernel_rem_pio2+0x5da>
 800edf6:	4602      	mov	r2, r0
 800edf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edfc:	9c01      	ldr	r4, [sp, #4]
 800edfe:	e9c4 2300 	strd	r2, r3, [r4]
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ee0a:	f7f1 fa55 	bl	80002b8 <__aeabi_dsub>
 800ee0e:	ae4c      	add	r6, sp, #304	; 0x130
 800ee10:	2401      	movs	r4, #1
 800ee12:	42a5      	cmp	r5, r4
 800ee14:	da2c      	bge.n	800ee70 <__kernel_rem_pio2+0x5e0>
 800ee16:	f1bb 0f00 	cmp.w	fp, #0
 800ee1a:	d002      	beq.n	800ee22 <__kernel_rem_pio2+0x592>
 800ee1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee20:	4619      	mov	r1, r3
 800ee22:	9b01      	ldr	r3, [sp, #4]
 800ee24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ee28:	e7a5      	b.n	800ed76 <__kernel_rem_pio2+0x4e6>
 800ee2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ee2e:	eb0d 0403 	add.w	r4, sp, r3
 800ee32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ee36:	2000      	movs	r0, #0
 800ee38:	2100      	movs	r1, #0
 800ee3a:	2d00      	cmp	r5, #0
 800ee3c:	da09      	bge.n	800ee52 <__kernel_rem_pio2+0x5c2>
 800ee3e:	f1bb 0f00 	cmp.w	fp, #0
 800ee42:	d002      	beq.n	800ee4a <__kernel_rem_pio2+0x5ba>
 800ee44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee48:	4619      	mov	r1, r3
 800ee4a:	9b01      	ldr	r3, [sp, #4]
 800ee4c:	e9c3 0100 	strd	r0, r1, [r3]
 800ee50:	e791      	b.n	800ed76 <__kernel_rem_pio2+0x4e6>
 800ee52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee56:	f7f1 fa31 	bl	80002bc <__adddf3>
 800ee5a:	3d01      	subs	r5, #1
 800ee5c:	e7ed      	b.n	800ee3a <__kernel_rem_pio2+0x5aa>
 800ee5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee62:	f7f1 fa2b 	bl	80002bc <__adddf3>
 800ee66:	3e01      	subs	r6, #1
 800ee68:	e7c0      	b.n	800edec <__kernel_rem_pio2+0x55c>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	e7c5      	b.n	800edfc <__kernel_rem_pio2+0x56c>
 800ee70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ee74:	f7f1 fa22 	bl	80002bc <__adddf3>
 800ee78:	3401      	adds	r4, #1
 800ee7a:	e7ca      	b.n	800ee12 <__kernel_rem_pio2+0x582>
 800ee7c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ee84:	9b02      	ldr	r3, [sp, #8]
 800ee86:	3b01      	subs	r3, #1
 800ee88:	9302      	str	r3, [sp, #8]
 800ee8a:	4632      	mov	r2, r6
 800ee8c:	463b      	mov	r3, r7
 800ee8e:	4640      	mov	r0, r8
 800ee90:	4649      	mov	r1, r9
 800ee92:	f7f1 fa13 	bl	80002bc <__adddf3>
 800ee96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	4640      	mov	r0, r8
 800eea0:	4649      	mov	r1, r9
 800eea2:	f7f1 fa09 	bl	80002b8 <__aeabi_dsub>
 800eea6:	4632      	mov	r2, r6
 800eea8:	463b      	mov	r3, r7
 800eeaa:	f7f1 fa07 	bl	80002bc <__adddf3>
 800eeae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800eeb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eeb6:	ed8a 7b00 	vstr	d7, [sl]
 800eeba:	e76e      	b.n	800ed9a <__kernel_rem_pio2+0x50a>
 800eebc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800eec0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800eec4:	4640      	mov	r0, r8
 800eec6:	4632      	mov	r2, r6
 800eec8:	463b      	mov	r3, r7
 800eeca:	4649      	mov	r1, r9
 800eecc:	f7f1 f9f6 	bl	80002bc <__adddf3>
 800eed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4640      	mov	r0, r8
 800eeda:	4649      	mov	r1, r9
 800eedc:	f7f1 f9ec 	bl	80002b8 <__aeabi_dsub>
 800eee0:	4632      	mov	r2, r6
 800eee2:	463b      	mov	r3, r7
 800eee4:	f7f1 f9ea 	bl	80002bc <__adddf3>
 800eee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eeec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eef0:	ed84 7b00 	vstr	d7, [r4]
 800eef4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eef8:	e755      	b.n	800eda6 <__kernel_rem_pio2+0x516>
 800eefa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eefe:	f7f1 f9dd 	bl	80002bc <__adddf3>
 800ef02:	3d01      	subs	r5, #1
 800ef04:	e759      	b.n	800edba <__kernel_rem_pio2+0x52a>
 800ef06:	9b01      	ldr	r3, [sp, #4]
 800ef08:	9a01      	ldr	r2, [sp, #4]
 800ef0a:	601d      	str	r5, [r3, #0]
 800ef0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ef10:	605c      	str	r4, [r3, #4]
 800ef12:	609f      	str	r7, [r3, #8]
 800ef14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ef18:	60d3      	str	r3, [r2, #12]
 800ef1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef1e:	6110      	str	r0, [r2, #16]
 800ef20:	6153      	str	r3, [r2, #20]
 800ef22:	e728      	b.n	800ed76 <__kernel_rem_pio2+0x4e6>
 800ef24:	41700000 	.word	0x41700000
 800ef28:	3e700000 	.word	0x3e700000
 800ef2c:	00000000 	.word	0x00000000

0800ef30 <__kernel_sin>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	ed2d 8b04 	vpush	{d8-d9}
 800ef38:	eeb0 8a41 	vmov.f32	s16, s2
 800ef3c:	eef0 8a61 	vmov.f32	s17, s3
 800ef40:	ec55 4b10 	vmov	r4, r5, d0
 800ef44:	b083      	sub	sp, #12
 800ef46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ef4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ef4e:	9001      	str	r0, [sp, #4]
 800ef50:	da06      	bge.n	800ef60 <__kernel_sin+0x30>
 800ef52:	ee10 0a10 	vmov	r0, s0
 800ef56:	4629      	mov	r1, r5
 800ef58:	f7f1 fe16 	bl	8000b88 <__aeabi_d2iz>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d051      	beq.n	800f004 <__kernel_sin+0xd4>
 800ef60:	4622      	mov	r2, r4
 800ef62:	462b      	mov	r3, r5
 800ef64:	4620      	mov	r0, r4
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 fb5e 	bl	8000628 <__aeabi_dmul>
 800ef6c:	4682      	mov	sl, r0
 800ef6e:	468b      	mov	fp, r1
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	4620      	mov	r0, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	f7f1 fb56 	bl	8000628 <__aeabi_dmul>
 800ef7c:	a341      	add	r3, pc, #260	; (adr r3, 800f084 <__kernel_sin+0x154>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	4680      	mov	r8, r0
 800ef84:	4689      	mov	r9, r1
 800ef86:	4650      	mov	r0, sl
 800ef88:	4659      	mov	r1, fp
 800ef8a:	f7f1 fb4d 	bl	8000628 <__aeabi_dmul>
 800ef8e:	a33f      	add	r3, pc, #252	; (adr r3, 800f08c <__kernel_sin+0x15c>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	f7f1 f990 	bl	80002b8 <__aeabi_dsub>
 800ef98:	4652      	mov	r2, sl
 800ef9a:	465b      	mov	r3, fp
 800ef9c:	f7f1 fb44 	bl	8000628 <__aeabi_dmul>
 800efa0:	a33c      	add	r3, pc, #240	; (adr r3, 800f094 <__kernel_sin+0x164>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 f989 	bl	80002bc <__adddf3>
 800efaa:	4652      	mov	r2, sl
 800efac:	465b      	mov	r3, fp
 800efae:	f7f1 fb3b 	bl	8000628 <__aeabi_dmul>
 800efb2:	a33a      	add	r3, pc, #232	; (adr r3, 800f09c <__kernel_sin+0x16c>)
 800efb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb8:	f7f1 f97e 	bl	80002b8 <__aeabi_dsub>
 800efbc:	4652      	mov	r2, sl
 800efbe:	465b      	mov	r3, fp
 800efc0:	f7f1 fb32 	bl	8000628 <__aeabi_dmul>
 800efc4:	a337      	add	r3, pc, #220	; (adr r3, 800f0a4 <__kernel_sin+0x174>)
 800efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efca:	f7f1 f977 	bl	80002bc <__adddf3>
 800efce:	9b01      	ldr	r3, [sp, #4]
 800efd0:	4606      	mov	r6, r0
 800efd2:	460f      	mov	r7, r1
 800efd4:	b9eb      	cbnz	r3, 800f012 <__kernel_sin+0xe2>
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	4650      	mov	r0, sl
 800efdc:	4659      	mov	r1, fp
 800efde:	f7f1 fb23 	bl	8000628 <__aeabi_dmul>
 800efe2:	a325      	add	r3, pc, #148	; (adr r3, 800f078 <__kernel_sin+0x148>)
 800efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe8:	f7f1 f966 	bl	80002b8 <__aeabi_dsub>
 800efec:	4642      	mov	r2, r8
 800efee:	464b      	mov	r3, r9
 800eff0:	f7f1 fb1a 	bl	8000628 <__aeabi_dmul>
 800eff4:	4602      	mov	r2, r0
 800eff6:	460b      	mov	r3, r1
 800eff8:	4620      	mov	r0, r4
 800effa:	4629      	mov	r1, r5
 800effc:	f7f1 f95e 	bl	80002bc <__adddf3>
 800f000:	4604      	mov	r4, r0
 800f002:	460d      	mov	r5, r1
 800f004:	ec45 4b10 	vmov	d0, r4, r5
 800f008:	b003      	add	sp, #12
 800f00a:	ecbd 8b04 	vpop	{d8-d9}
 800f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f012:	4b1b      	ldr	r3, [pc, #108]	; (800f080 <__kernel_sin+0x150>)
 800f014:	ec51 0b18 	vmov	r0, r1, d8
 800f018:	2200      	movs	r2, #0
 800f01a:	f7f1 fb05 	bl	8000628 <__aeabi_dmul>
 800f01e:	4632      	mov	r2, r6
 800f020:	ec41 0b19 	vmov	d9, r0, r1
 800f024:	463b      	mov	r3, r7
 800f026:	4640      	mov	r0, r8
 800f028:	4649      	mov	r1, r9
 800f02a:	f7f1 fafd 	bl	8000628 <__aeabi_dmul>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	ec51 0b19 	vmov	r0, r1, d9
 800f036:	f7f1 f93f 	bl	80002b8 <__aeabi_dsub>
 800f03a:	4652      	mov	r2, sl
 800f03c:	465b      	mov	r3, fp
 800f03e:	f7f1 faf3 	bl	8000628 <__aeabi_dmul>
 800f042:	ec53 2b18 	vmov	r2, r3, d8
 800f046:	f7f1 f937 	bl	80002b8 <__aeabi_dsub>
 800f04a:	a30b      	add	r3, pc, #44	; (adr r3, 800f078 <__kernel_sin+0x148>)
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	4606      	mov	r6, r0
 800f052:	460f      	mov	r7, r1
 800f054:	4640      	mov	r0, r8
 800f056:	4649      	mov	r1, r9
 800f058:	f7f1 fae6 	bl	8000628 <__aeabi_dmul>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4630      	mov	r0, r6
 800f062:	4639      	mov	r1, r7
 800f064:	f7f1 f92a 	bl	80002bc <__adddf3>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 f922 	bl	80002b8 <__aeabi_dsub>
 800f074:	e7c4      	b.n	800f000 <__kernel_sin+0xd0>
 800f076:	bf00      	nop
 800f078:	55555549 	.word	0x55555549
 800f07c:	3fc55555 	.word	0x3fc55555
 800f080:	3fe00000 	.word	0x3fe00000
 800f084:	5acfd57c 	.word	0x5acfd57c
 800f088:	3de5d93a 	.word	0x3de5d93a
 800f08c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f090:	3e5ae5e6 	.word	0x3e5ae5e6
 800f094:	57b1fe7d 	.word	0x57b1fe7d
 800f098:	3ec71de3 	.word	0x3ec71de3
 800f09c:	19c161d5 	.word	0x19c161d5
 800f0a0:	3f2a01a0 	.word	0x3f2a01a0
 800f0a4:	1110f8a6 	.word	0x1110f8a6
 800f0a8:	3f811111 	.word	0x3f811111

0800f0ac <with_errno>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	4616      	mov	r6, r2
 800f0b4:	f7fb fb8c 	bl	800a7d0 <__errno>
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	6006      	str	r6, [r0, #0]
 800f0bc:	4620      	mov	r0, r4
 800f0be:	bd70      	pop	{r4, r5, r6, pc}

0800f0c0 <xflow>:
 800f0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0c2:	4614      	mov	r4, r2
 800f0c4:	461d      	mov	r5, r3
 800f0c6:	b108      	cbz	r0, 800f0cc <xflow+0xc>
 800f0c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0cc:	e9cd 2300 	strd	r2, r3, [sp]
 800f0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	f7f1 faa6 	bl	8000628 <__aeabi_dmul>
 800f0dc:	2222      	movs	r2, #34	; 0x22
 800f0de:	b003      	add	sp, #12
 800f0e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0e4:	f7ff bfe2 	b.w	800f0ac <with_errno>

0800f0e8 <__math_uflow>:
 800f0e8:	b508      	push	{r3, lr}
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0f0:	f7ff ffe6 	bl	800f0c0 <xflow>
 800f0f4:	ec41 0b10 	vmov	d0, r0, r1
 800f0f8:	bd08      	pop	{r3, pc}

0800f0fa <__math_oflow>:
 800f0fa:	b508      	push	{r3, lr}
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f102:	f7ff ffdd 	bl	800f0c0 <xflow>
 800f106:	ec41 0b10 	vmov	d0, r0, r1
 800f10a:	bd08      	pop	{r3, pc}
 800f10c:	0000      	movs	r0, r0
	...

0800f110 <atan>:
 800f110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	ec55 4b10 	vmov	r4, r5, d0
 800f118:	4bc3      	ldr	r3, [pc, #780]	; (800f428 <atan+0x318>)
 800f11a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f11e:	429e      	cmp	r6, r3
 800f120:	46ab      	mov	fp, r5
 800f122:	dd18      	ble.n	800f156 <atan+0x46>
 800f124:	4bc1      	ldr	r3, [pc, #772]	; (800f42c <atan+0x31c>)
 800f126:	429e      	cmp	r6, r3
 800f128:	dc01      	bgt.n	800f12e <atan+0x1e>
 800f12a:	d109      	bne.n	800f140 <atan+0x30>
 800f12c:	b144      	cbz	r4, 800f140 <atan+0x30>
 800f12e:	4622      	mov	r2, r4
 800f130:	462b      	mov	r3, r5
 800f132:	4620      	mov	r0, r4
 800f134:	4629      	mov	r1, r5
 800f136:	f7f1 f8c1 	bl	80002bc <__adddf3>
 800f13a:	4604      	mov	r4, r0
 800f13c:	460d      	mov	r5, r1
 800f13e:	e006      	b.n	800f14e <atan+0x3e>
 800f140:	f1bb 0f00 	cmp.w	fp, #0
 800f144:	f300 8131 	bgt.w	800f3aa <atan+0x29a>
 800f148:	a59b      	add	r5, pc, #620	; (adr r5, 800f3b8 <atan+0x2a8>)
 800f14a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f14e:	ec45 4b10 	vmov	d0, r4, r5
 800f152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f156:	4bb6      	ldr	r3, [pc, #728]	; (800f430 <atan+0x320>)
 800f158:	429e      	cmp	r6, r3
 800f15a:	dc14      	bgt.n	800f186 <atan+0x76>
 800f15c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f160:	429e      	cmp	r6, r3
 800f162:	dc0d      	bgt.n	800f180 <atan+0x70>
 800f164:	a396      	add	r3, pc, #600	; (adr r3, 800f3c0 <atan+0x2b0>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	ee10 0a10 	vmov	r0, s0
 800f16e:	4629      	mov	r1, r5
 800f170:	f7f1 f8a4 	bl	80002bc <__adddf3>
 800f174:	4baf      	ldr	r3, [pc, #700]	; (800f434 <atan+0x324>)
 800f176:	2200      	movs	r2, #0
 800f178:	f7f1 fce6 	bl	8000b48 <__aeabi_dcmpgt>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d1e6      	bne.n	800f14e <atan+0x3e>
 800f180:	f04f 3aff 	mov.w	sl, #4294967295
 800f184:	e02b      	b.n	800f1de <atan+0xce>
 800f186:	f000 f963 	bl	800f450 <fabs>
 800f18a:	4bab      	ldr	r3, [pc, #684]	; (800f438 <atan+0x328>)
 800f18c:	429e      	cmp	r6, r3
 800f18e:	ec55 4b10 	vmov	r4, r5, d0
 800f192:	f300 80bf 	bgt.w	800f314 <atan+0x204>
 800f196:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f19a:	429e      	cmp	r6, r3
 800f19c:	f300 80a0 	bgt.w	800f2e0 <atan+0x1d0>
 800f1a0:	ee10 2a10 	vmov	r2, s0
 800f1a4:	ee10 0a10 	vmov	r0, s0
 800f1a8:	462b      	mov	r3, r5
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	f7f1 f886 	bl	80002bc <__adddf3>
 800f1b0:	4ba0      	ldr	r3, [pc, #640]	; (800f434 <atan+0x324>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f7f1 f880 	bl	80002b8 <__aeabi_dsub>
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	4606      	mov	r6, r0
 800f1bc:	460f      	mov	r7, r1
 800f1be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	f7f1 f879 	bl	80002bc <__adddf3>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	4639      	mov	r1, r7
 800f1d2:	f7f1 fb53 	bl	800087c <__aeabi_ddiv>
 800f1d6:	f04f 0a00 	mov.w	sl, #0
 800f1da:	4604      	mov	r4, r0
 800f1dc:	460d      	mov	r5, r1
 800f1de:	4622      	mov	r2, r4
 800f1e0:	462b      	mov	r3, r5
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	f7f1 fa1f 	bl	8000628 <__aeabi_dmul>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4680      	mov	r8, r0
 800f1f0:	4689      	mov	r9, r1
 800f1f2:	f7f1 fa19 	bl	8000628 <__aeabi_dmul>
 800f1f6:	a374      	add	r3, pc, #464	; (adr r3, 800f3c8 <atan+0x2b8>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	460f      	mov	r7, r1
 800f200:	f7f1 fa12 	bl	8000628 <__aeabi_dmul>
 800f204:	a372      	add	r3, pc, #456	; (adr r3, 800f3d0 <atan+0x2c0>)
 800f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20a:	f7f1 f857 	bl	80002bc <__adddf3>
 800f20e:	4632      	mov	r2, r6
 800f210:	463b      	mov	r3, r7
 800f212:	f7f1 fa09 	bl	8000628 <__aeabi_dmul>
 800f216:	a370      	add	r3, pc, #448	; (adr r3, 800f3d8 <atan+0x2c8>)
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f7f1 f84e 	bl	80002bc <__adddf3>
 800f220:	4632      	mov	r2, r6
 800f222:	463b      	mov	r3, r7
 800f224:	f7f1 fa00 	bl	8000628 <__aeabi_dmul>
 800f228:	a36d      	add	r3, pc, #436	; (adr r3, 800f3e0 <atan+0x2d0>)
 800f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22e:	f7f1 f845 	bl	80002bc <__adddf3>
 800f232:	4632      	mov	r2, r6
 800f234:	463b      	mov	r3, r7
 800f236:	f7f1 f9f7 	bl	8000628 <__aeabi_dmul>
 800f23a:	a36b      	add	r3, pc, #428	; (adr r3, 800f3e8 <atan+0x2d8>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	f7f1 f83c 	bl	80002bc <__adddf3>
 800f244:	4632      	mov	r2, r6
 800f246:	463b      	mov	r3, r7
 800f248:	f7f1 f9ee 	bl	8000628 <__aeabi_dmul>
 800f24c:	a368      	add	r3, pc, #416	; (adr r3, 800f3f0 <atan+0x2e0>)
 800f24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f252:	f7f1 f833 	bl	80002bc <__adddf3>
 800f256:	4642      	mov	r2, r8
 800f258:	464b      	mov	r3, r9
 800f25a:	f7f1 f9e5 	bl	8000628 <__aeabi_dmul>
 800f25e:	a366      	add	r3, pc, #408	; (adr r3, 800f3f8 <atan+0x2e8>)
 800f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f264:	4680      	mov	r8, r0
 800f266:	4689      	mov	r9, r1
 800f268:	4630      	mov	r0, r6
 800f26a:	4639      	mov	r1, r7
 800f26c:	f7f1 f9dc 	bl	8000628 <__aeabi_dmul>
 800f270:	a363      	add	r3, pc, #396	; (adr r3, 800f400 <atan+0x2f0>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f7f1 f81f 	bl	80002b8 <__aeabi_dsub>
 800f27a:	4632      	mov	r2, r6
 800f27c:	463b      	mov	r3, r7
 800f27e:	f7f1 f9d3 	bl	8000628 <__aeabi_dmul>
 800f282:	a361      	add	r3, pc, #388	; (adr r3, 800f408 <atan+0x2f8>)
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	f7f1 f816 	bl	80002b8 <__aeabi_dsub>
 800f28c:	4632      	mov	r2, r6
 800f28e:	463b      	mov	r3, r7
 800f290:	f7f1 f9ca 	bl	8000628 <__aeabi_dmul>
 800f294:	a35e      	add	r3, pc, #376	; (adr r3, 800f410 <atan+0x300>)
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	f7f1 f80d 	bl	80002b8 <__aeabi_dsub>
 800f29e:	4632      	mov	r2, r6
 800f2a0:	463b      	mov	r3, r7
 800f2a2:	f7f1 f9c1 	bl	8000628 <__aeabi_dmul>
 800f2a6:	a35c      	add	r3, pc, #368	; (adr r3, 800f418 <atan+0x308>)
 800f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ac:	f7f1 f804 	bl	80002b8 <__aeabi_dsub>
 800f2b0:	4632      	mov	r2, r6
 800f2b2:	463b      	mov	r3, r7
 800f2b4:	f7f1 f9b8 	bl	8000628 <__aeabi_dmul>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4640      	mov	r0, r8
 800f2be:	4649      	mov	r1, r9
 800f2c0:	f7f0 fffc 	bl	80002bc <__adddf3>
 800f2c4:	4622      	mov	r2, r4
 800f2c6:	462b      	mov	r3, r5
 800f2c8:	f7f1 f9ae 	bl	8000628 <__aeabi_dmul>
 800f2cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	d14b      	bne.n	800f36e <atan+0x25e>
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	4629      	mov	r1, r5
 800f2da:	f7f0 ffed 	bl	80002b8 <__aeabi_dsub>
 800f2de:	e72c      	b.n	800f13a <atan+0x2a>
 800f2e0:	ee10 0a10 	vmov	r0, s0
 800f2e4:	4b53      	ldr	r3, [pc, #332]	; (800f434 <atan+0x324>)
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	f7f0 ffe5 	bl	80002b8 <__aeabi_dsub>
 800f2ee:	4b51      	ldr	r3, [pc, #324]	; (800f434 <atan+0x324>)
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	4629      	mov	r1, r5
 800f2fa:	f7f0 ffdf 	bl	80002bc <__adddf3>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	4630      	mov	r0, r6
 800f304:	4639      	mov	r1, r7
 800f306:	f7f1 fab9 	bl	800087c <__aeabi_ddiv>
 800f30a:	f04f 0a01 	mov.w	sl, #1
 800f30e:	4604      	mov	r4, r0
 800f310:	460d      	mov	r5, r1
 800f312:	e764      	b.n	800f1de <atan+0xce>
 800f314:	4b49      	ldr	r3, [pc, #292]	; (800f43c <atan+0x32c>)
 800f316:	429e      	cmp	r6, r3
 800f318:	da1d      	bge.n	800f356 <atan+0x246>
 800f31a:	ee10 0a10 	vmov	r0, s0
 800f31e:	4b48      	ldr	r3, [pc, #288]	; (800f440 <atan+0x330>)
 800f320:	2200      	movs	r2, #0
 800f322:	4629      	mov	r1, r5
 800f324:	f7f0 ffc8 	bl	80002b8 <__aeabi_dsub>
 800f328:	4b45      	ldr	r3, [pc, #276]	; (800f440 <atan+0x330>)
 800f32a:	4606      	mov	r6, r0
 800f32c:	460f      	mov	r7, r1
 800f32e:	2200      	movs	r2, #0
 800f330:	4620      	mov	r0, r4
 800f332:	4629      	mov	r1, r5
 800f334:	f7f1 f978 	bl	8000628 <__aeabi_dmul>
 800f338:	4b3e      	ldr	r3, [pc, #248]	; (800f434 <atan+0x324>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	f7f0 ffbe 	bl	80002bc <__adddf3>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f1 fa98 	bl	800087c <__aeabi_ddiv>
 800f34c:	f04f 0a02 	mov.w	sl, #2
 800f350:	4604      	mov	r4, r0
 800f352:	460d      	mov	r5, r1
 800f354:	e743      	b.n	800f1de <atan+0xce>
 800f356:	462b      	mov	r3, r5
 800f358:	ee10 2a10 	vmov	r2, s0
 800f35c:	4939      	ldr	r1, [pc, #228]	; (800f444 <atan+0x334>)
 800f35e:	2000      	movs	r0, #0
 800f360:	f7f1 fa8c 	bl	800087c <__aeabi_ddiv>
 800f364:	f04f 0a03 	mov.w	sl, #3
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	e737      	b.n	800f1de <atan+0xce>
 800f36e:	4b36      	ldr	r3, [pc, #216]	; (800f448 <atan+0x338>)
 800f370:	4e36      	ldr	r6, [pc, #216]	; (800f44c <atan+0x33c>)
 800f372:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f376:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f37a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f37e:	f7f0 ff9b 	bl	80002b8 <__aeabi_dsub>
 800f382:	4622      	mov	r2, r4
 800f384:	462b      	mov	r3, r5
 800f386:	f7f0 ff97 	bl	80002b8 <__aeabi_dsub>
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f392:	f7f0 ff91 	bl	80002b8 <__aeabi_dsub>
 800f396:	f1bb 0f00 	cmp.w	fp, #0
 800f39a:	4604      	mov	r4, r0
 800f39c:	460d      	mov	r5, r1
 800f39e:	f6bf aed6 	bge.w	800f14e <atan+0x3e>
 800f3a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3a6:	461d      	mov	r5, r3
 800f3a8:	e6d1      	b.n	800f14e <atan+0x3e>
 800f3aa:	a51d      	add	r5, pc, #116	; (adr r5, 800f420 <atan+0x310>)
 800f3ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f3b0:	e6cd      	b.n	800f14e <atan+0x3e>
 800f3b2:	bf00      	nop
 800f3b4:	f3af 8000 	nop.w
 800f3b8:	54442d18 	.word	0x54442d18
 800f3bc:	bff921fb 	.word	0xbff921fb
 800f3c0:	8800759c 	.word	0x8800759c
 800f3c4:	7e37e43c 	.word	0x7e37e43c
 800f3c8:	e322da11 	.word	0xe322da11
 800f3cc:	3f90ad3a 	.word	0x3f90ad3a
 800f3d0:	24760deb 	.word	0x24760deb
 800f3d4:	3fa97b4b 	.word	0x3fa97b4b
 800f3d8:	a0d03d51 	.word	0xa0d03d51
 800f3dc:	3fb10d66 	.word	0x3fb10d66
 800f3e0:	c54c206e 	.word	0xc54c206e
 800f3e4:	3fb745cd 	.word	0x3fb745cd
 800f3e8:	920083ff 	.word	0x920083ff
 800f3ec:	3fc24924 	.word	0x3fc24924
 800f3f0:	5555550d 	.word	0x5555550d
 800f3f4:	3fd55555 	.word	0x3fd55555
 800f3f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f3fc:	bfa2b444 	.word	0xbfa2b444
 800f400:	52defd9a 	.word	0x52defd9a
 800f404:	3fadde2d 	.word	0x3fadde2d
 800f408:	af749a6d 	.word	0xaf749a6d
 800f40c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f410:	fe231671 	.word	0xfe231671
 800f414:	3fbc71c6 	.word	0x3fbc71c6
 800f418:	9998ebc4 	.word	0x9998ebc4
 800f41c:	3fc99999 	.word	0x3fc99999
 800f420:	54442d18 	.word	0x54442d18
 800f424:	3ff921fb 	.word	0x3ff921fb
 800f428:	440fffff 	.word	0x440fffff
 800f42c:	7ff00000 	.word	0x7ff00000
 800f430:	3fdbffff 	.word	0x3fdbffff
 800f434:	3ff00000 	.word	0x3ff00000
 800f438:	3ff2ffff 	.word	0x3ff2ffff
 800f43c:	40038000 	.word	0x40038000
 800f440:	3ff80000 	.word	0x3ff80000
 800f444:	bff00000 	.word	0xbff00000
 800f448:	0800ff38 	.word	0x0800ff38
 800f44c:	0800ff18 	.word	0x0800ff18

0800f450 <fabs>:
 800f450:	ec51 0b10 	vmov	r0, r1, d0
 800f454:	ee10 2a10 	vmov	r2, s0
 800f458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f45c:	ec43 2b10 	vmov	d0, r2, r3
 800f460:	4770      	bx	lr

0800f462 <finite>:
 800f462:	b082      	sub	sp, #8
 800f464:	ed8d 0b00 	vstr	d0, [sp]
 800f468:	9801      	ldr	r0, [sp, #4]
 800f46a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f46e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f472:	0fc0      	lsrs	r0, r0, #31
 800f474:	b002      	add	sp, #8
 800f476:	4770      	bx	lr

0800f478 <floor>:
 800f478:	ec51 0b10 	vmov	r0, r1, d0
 800f47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f480:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f484:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f488:	2e13      	cmp	r6, #19
 800f48a:	ee10 5a10 	vmov	r5, s0
 800f48e:	ee10 8a10 	vmov	r8, s0
 800f492:	460c      	mov	r4, r1
 800f494:	dc32      	bgt.n	800f4fc <floor+0x84>
 800f496:	2e00      	cmp	r6, #0
 800f498:	da14      	bge.n	800f4c4 <floor+0x4c>
 800f49a:	a333      	add	r3, pc, #204	; (adr r3, 800f568 <floor+0xf0>)
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	f7f0 ff0c 	bl	80002bc <__adddf3>
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f7f1 fb4e 	bl	8000b48 <__aeabi_dcmpgt>
 800f4ac:	b138      	cbz	r0, 800f4be <floor+0x46>
 800f4ae:	2c00      	cmp	r4, #0
 800f4b0:	da57      	bge.n	800f562 <floor+0xea>
 800f4b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f4b6:	431d      	orrs	r5, r3
 800f4b8:	d001      	beq.n	800f4be <floor+0x46>
 800f4ba:	4c2d      	ldr	r4, [pc, #180]	; (800f570 <floor+0xf8>)
 800f4bc:	2500      	movs	r5, #0
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	e025      	b.n	800f510 <floor+0x98>
 800f4c4:	4f2b      	ldr	r7, [pc, #172]	; (800f574 <floor+0xfc>)
 800f4c6:	4137      	asrs	r7, r6
 800f4c8:	ea01 0307 	and.w	r3, r1, r7
 800f4cc:	4303      	orrs	r3, r0
 800f4ce:	d01f      	beq.n	800f510 <floor+0x98>
 800f4d0:	a325      	add	r3, pc, #148	; (adr r3, 800f568 <floor+0xf0>)
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	f7f0 fef1 	bl	80002bc <__adddf3>
 800f4da:	2200      	movs	r2, #0
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f7f1 fb33 	bl	8000b48 <__aeabi_dcmpgt>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d0eb      	beq.n	800f4be <floor+0x46>
 800f4e6:	2c00      	cmp	r4, #0
 800f4e8:	bfbe      	ittt	lt
 800f4ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f4ee:	fa43 f606 	asrlt.w	r6, r3, r6
 800f4f2:	19a4      	addlt	r4, r4, r6
 800f4f4:	ea24 0407 	bic.w	r4, r4, r7
 800f4f8:	2500      	movs	r5, #0
 800f4fa:	e7e0      	b.n	800f4be <floor+0x46>
 800f4fc:	2e33      	cmp	r6, #51	; 0x33
 800f4fe:	dd0b      	ble.n	800f518 <floor+0xa0>
 800f500:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f504:	d104      	bne.n	800f510 <floor+0x98>
 800f506:	ee10 2a10 	vmov	r2, s0
 800f50a:	460b      	mov	r3, r1
 800f50c:	f7f0 fed6 	bl	80002bc <__adddf3>
 800f510:	ec41 0b10 	vmov	d0, r0, r1
 800f514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f518:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295
 800f520:	fa23 f707 	lsr.w	r7, r3, r7
 800f524:	4207      	tst	r7, r0
 800f526:	d0f3      	beq.n	800f510 <floor+0x98>
 800f528:	a30f      	add	r3, pc, #60	; (adr r3, 800f568 <floor+0xf0>)
 800f52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52e:	f7f0 fec5 	bl	80002bc <__adddf3>
 800f532:	2200      	movs	r2, #0
 800f534:	2300      	movs	r3, #0
 800f536:	f7f1 fb07 	bl	8000b48 <__aeabi_dcmpgt>
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d0bf      	beq.n	800f4be <floor+0x46>
 800f53e:	2c00      	cmp	r4, #0
 800f540:	da02      	bge.n	800f548 <floor+0xd0>
 800f542:	2e14      	cmp	r6, #20
 800f544:	d103      	bne.n	800f54e <floor+0xd6>
 800f546:	3401      	adds	r4, #1
 800f548:	ea25 0507 	bic.w	r5, r5, r7
 800f54c:	e7b7      	b.n	800f4be <floor+0x46>
 800f54e:	2301      	movs	r3, #1
 800f550:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f554:	fa03 f606 	lsl.w	r6, r3, r6
 800f558:	4435      	add	r5, r6
 800f55a:	4545      	cmp	r5, r8
 800f55c:	bf38      	it	cc
 800f55e:	18e4      	addcc	r4, r4, r3
 800f560:	e7f2      	b.n	800f548 <floor+0xd0>
 800f562:	2500      	movs	r5, #0
 800f564:	462c      	mov	r4, r5
 800f566:	e7aa      	b.n	800f4be <floor+0x46>
 800f568:	8800759c 	.word	0x8800759c
 800f56c:	7e37e43c 	.word	0x7e37e43c
 800f570:	bff00000 	.word	0xbff00000
 800f574:	000fffff 	.word	0x000fffff

0800f578 <scalbn>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	ec55 4b10 	vmov	r4, r5, d0
 800f57e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f582:	4606      	mov	r6, r0
 800f584:	462b      	mov	r3, r5
 800f586:	b99a      	cbnz	r2, 800f5b0 <scalbn+0x38>
 800f588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f58c:	4323      	orrs	r3, r4
 800f58e:	d036      	beq.n	800f5fe <scalbn+0x86>
 800f590:	4b39      	ldr	r3, [pc, #228]	; (800f678 <scalbn+0x100>)
 800f592:	4629      	mov	r1, r5
 800f594:	ee10 0a10 	vmov	r0, s0
 800f598:	2200      	movs	r2, #0
 800f59a:	f7f1 f845 	bl	8000628 <__aeabi_dmul>
 800f59e:	4b37      	ldr	r3, [pc, #220]	; (800f67c <scalbn+0x104>)
 800f5a0:	429e      	cmp	r6, r3
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	460d      	mov	r5, r1
 800f5a6:	da10      	bge.n	800f5ca <scalbn+0x52>
 800f5a8:	a32b      	add	r3, pc, #172	; (adr r3, 800f658 <scalbn+0xe0>)
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	e03a      	b.n	800f626 <scalbn+0xae>
 800f5b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5b4:	428a      	cmp	r2, r1
 800f5b6:	d10c      	bne.n	800f5d2 <scalbn+0x5a>
 800f5b8:	ee10 2a10 	vmov	r2, s0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f0 fe7c 	bl	80002bc <__adddf3>
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	460d      	mov	r5, r1
 800f5c8:	e019      	b.n	800f5fe <scalbn+0x86>
 800f5ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f5ce:	460b      	mov	r3, r1
 800f5d0:	3a36      	subs	r2, #54	; 0x36
 800f5d2:	4432      	add	r2, r6
 800f5d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f5d8:	428a      	cmp	r2, r1
 800f5da:	dd08      	ble.n	800f5ee <scalbn+0x76>
 800f5dc:	2d00      	cmp	r5, #0
 800f5de:	a120      	add	r1, pc, #128	; (adr r1, 800f660 <scalbn+0xe8>)
 800f5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5e4:	da1c      	bge.n	800f620 <scalbn+0xa8>
 800f5e6:	a120      	add	r1, pc, #128	; (adr r1, 800f668 <scalbn+0xf0>)
 800f5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5ec:	e018      	b.n	800f620 <scalbn+0xa8>
 800f5ee:	2a00      	cmp	r2, #0
 800f5f0:	dd08      	ble.n	800f604 <scalbn+0x8c>
 800f5f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f5f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f5fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f5fe:	ec45 4b10 	vmov	d0, r4, r5
 800f602:	bd70      	pop	{r4, r5, r6, pc}
 800f604:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f608:	da19      	bge.n	800f63e <scalbn+0xc6>
 800f60a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f60e:	429e      	cmp	r6, r3
 800f610:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f614:	dd0a      	ble.n	800f62c <scalbn+0xb4>
 800f616:	a112      	add	r1, pc, #72	; (adr r1, 800f660 <scalbn+0xe8>)
 800f618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1e2      	bne.n	800f5e6 <scalbn+0x6e>
 800f620:	a30f      	add	r3, pc, #60	; (adr r3, 800f660 <scalbn+0xe8>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 ffff 	bl	8000628 <__aeabi_dmul>
 800f62a:	e7cb      	b.n	800f5c4 <scalbn+0x4c>
 800f62c:	a10a      	add	r1, pc, #40	; (adr r1, 800f658 <scalbn+0xe0>)
 800f62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0b8      	beq.n	800f5a8 <scalbn+0x30>
 800f636:	a10e      	add	r1, pc, #56	; (adr r1, 800f670 <scalbn+0xf8>)
 800f638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f63c:	e7b4      	b.n	800f5a8 <scalbn+0x30>
 800f63e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f642:	3236      	adds	r2, #54	; 0x36
 800f644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f648:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f64c:	4620      	mov	r0, r4
 800f64e:	4b0c      	ldr	r3, [pc, #48]	; (800f680 <scalbn+0x108>)
 800f650:	2200      	movs	r2, #0
 800f652:	e7e8      	b.n	800f626 <scalbn+0xae>
 800f654:	f3af 8000 	nop.w
 800f658:	c2f8f359 	.word	0xc2f8f359
 800f65c:	01a56e1f 	.word	0x01a56e1f
 800f660:	8800759c 	.word	0x8800759c
 800f664:	7e37e43c 	.word	0x7e37e43c
 800f668:	8800759c 	.word	0x8800759c
 800f66c:	fe37e43c 	.word	0xfe37e43c
 800f670:	c2f8f359 	.word	0xc2f8f359
 800f674:	81a56e1f 	.word	0x81a56e1f
 800f678:	43500000 	.word	0x43500000
 800f67c:	ffff3cb0 	.word	0xffff3cb0
 800f680:	3c900000 	.word	0x3c900000

0800f684 <_sbrk>:
 800f684:	4a04      	ldr	r2, [pc, #16]	; (800f698 <_sbrk+0x14>)
 800f686:	6811      	ldr	r1, [r2, #0]
 800f688:	4603      	mov	r3, r0
 800f68a:	b909      	cbnz	r1, 800f690 <_sbrk+0xc>
 800f68c:	4903      	ldr	r1, [pc, #12]	; (800f69c <_sbrk+0x18>)
 800f68e:	6011      	str	r1, [r2, #0]
 800f690:	6810      	ldr	r0, [r2, #0]
 800f692:	4403      	add	r3, r0
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	4770      	bx	lr
 800f698:	200133ec 	.word	0x200133ec
 800f69c:	20000513 	.word	0x20000513

0800f6a0 <_init>:
 800f6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a2:	bf00      	nop
 800f6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6a6:	bc08      	pop	{r3}
 800f6a8:	469e      	mov	lr, r3
 800f6aa:	4770      	bx	lr

0800f6ac <_fini>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	bf00      	nop
 800f6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6b2:	bc08      	pop	{r3}
 800f6b4:	469e      	mov	lr, r3
 800f6b6:	4770      	bx	lr
