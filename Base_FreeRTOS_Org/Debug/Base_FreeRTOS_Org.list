
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013220  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  080133c0  080133c0  000233c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140d8  080140d8  00030210  2**0
                  CONTENTS
  4 .ARM          00000000  080140d8  080140d8  00030210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080140d8  080140d8  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140d8  080140d8  000240d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140dc  080140dc  000240dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080140e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013e78  20000210  080142f0  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014088  080142f0  00034088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1f4  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027eb  00000000  00000000  0003f434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00041c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00042928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a46  00000000  00000000  00043520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101f3  00000000  00000000  00055f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062be0  00000000  00000000  00066159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  000c8d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080133a8 	.word	0x080133a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	080133a8 	.word	0x080133a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b095      	sub	sp, #84	; 0x54
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4ba2      	ldr	r3, [pc, #648]	; (8000f48 <main+0x290>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4aa0      	ldr	r2, [pc, #640]	; (8000f48 <main+0x290>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b9f      	ldr	r3, [pc, #636]	; (8000f4c <main+0x294>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a9e      	ldr	r2, [pc, #632]	; (8000f4c <main+0x294>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f00b fcd8 	bl	800c690 <RCC_enableMaxFrequencies>

   	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000ce0:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <main+0x298>)
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	22c8      	movs	r2, #200	; 0xc8
 8000cec:	4999      	ldr	r1, [pc, #612]	; (8000f54 <main+0x29c>)
 8000cee:	489a      	ldr	r0, [pc, #616]	; (8000f58 <main+0x2a0>)
 8000cf0:	f004 fc2e 	bl	8005550 <xTaskCreate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a99      	ldr	r2, [pc, #612]	; (8000f5c <main+0x2a4>)
 8000cf8:	6013      	str	r3, [r2, #0]
							NULL,                   // parametro pasado a la tarea
							3,                      // Prioridad de la tarea
							&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000cfa:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <main+0x2a4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00a      	beq.n	8000d18 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d14:	bf00      	nop
 8000d16:	e7fe      	b.n	8000d16 <main+0x5e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d18:	4b91      	ldr	r3, [pc, #580]	; (8000f60 <main+0x2a8>)
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	22c8      	movs	r2, #200	; 0xc8
 8000d24:	498f      	ldr	r1, [pc, #572]	; (8000f64 <main+0x2ac>)
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <main+0x2b0>)
 8000d28:	f004 fc12 	bl	8005550 <xTaskCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a8b      	ldr	r2, [pc, #556]	; (8000f5c <main+0x2a4>)
 8000d30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d32:	4b8a      	ldr	r3, [pc, #552]	; (8000f5c <main+0x2a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00a      	beq.n	8000d50 <main+0x98>
        __asm volatile
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
    }
 8000d4c:	bf00      	nop
 8000d4e:	e7fe      	b.n	8000d4e <main+0x96>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d50:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <main+0x2b4>)
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2303      	movs	r3, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	22c8      	movs	r2, #200	; 0xc8
 8000d5c:	4984      	ldr	r1, [pc, #528]	; (8000f70 <main+0x2b8>)
 8000d5e:	4885      	ldr	r0, [pc, #532]	; (8000f74 <main+0x2bc>)
 8000d60:	f004 fbf6 	bl	8005550 <xTaskCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <main+0x2a4>)
 8000d68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <main+0x2a4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d00a      	beq.n	8000d88 <main+0xd0>
        __asm volatile
 8000d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8000d84:	bf00      	nop
 8000d86:	e7fe      	b.n	8000d86 <main+0xce>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <main+0x2c0>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	22c8      	movs	r2, #200	; 0xc8
 8000d94:	4979      	ldr	r1, [pc, #484]	; (8000f7c <main+0x2c4>)
 8000d96:	487a      	ldr	r0, [pc, #488]	; (8000f80 <main+0x2c8>)
 8000d98:	f004 fbda 	bl	8005550 <xTaskCreate>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a6f      	ldr	r2, [pc, #444]	; (8000f5c <main+0x2a4>)
 8000da0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <main+0x2a4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00a      	beq.n	8000dc0 <main+0x108>
        __asm volatile
 8000daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dae:	f383 8811 	msr	BASEPRI, r3
 8000db2:	f3bf 8f6f 	isb	sy
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8000dbc:	bf00      	nop
 8000dbe:	e7fe      	b.n	8000dbe <main+0x106>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000dc0:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <main+0x2cc>)
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	22c8      	movs	r2, #200	; 0xc8
 8000dcc:	496e      	ldr	r1, [pc, #440]	; (8000f88 <main+0x2d0>)
 8000dce:	486f      	ldr	r0, [pc, #444]	; (8000f8c <main+0x2d4>)
 8000dd0:	f004 fbbe 	bl	8005550 <xTaskCreate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a61      	ldr	r2, [pc, #388]	; (8000f5c <main+0x2a4>)
 8000dd8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <main+0x2a4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00a      	beq.n	8000df8 <main+0x140>
        __asm volatile
 8000de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8000df4:	bf00      	nop
 8000df6:	e7fe      	b.n	8000df6 <main+0x13e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000df8:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <main+0x2d8>)
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	22c8      	movs	r2, #200	; 0xc8
 8000e04:	4963      	ldr	r1, [pc, #396]	; (8000f94 <main+0x2dc>)
 8000e06:	4864      	ldr	r0, [pc, #400]	; (8000f98 <main+0x2e0>)
 8000e08:	f004 fba2 	bl	8005550 <xTaskCreate>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <main+0x2a4>)
 8000e10:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <main+0x2a4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00a      	beq.n	8000e30 <main+0x178>
        __asm volatile
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8000e2c:	bf00      	nop
 8000e2e:	e7fe      	b.n	8000e2e <main+0x176>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e30:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <main+0x2e4>)
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	2303      	movs	r3, #3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	22c8      	movs	r2, #200	; 0xc8
 8000e3c:	4958      	ldr	r1, [pc, #352]	; (8000fa0 <main+0x2e8>)
 8000e3e:	4859      	ldr	r0, [pc, #356]	; (8000fa4 <main+0x2ec>)
 8000e40:	f004 fb86 	bl	8005550 <xTaskCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a45      	ldr	r2, [pc, #276]	; (8000f5c <main+0x2a4>)
 8000e48:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <main+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d00a      	beq.n	8000e68 <main+0x1b0>
        __asm volatile
 8000e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000e64:	bf00      	nop
 8000e66:	e7fe      	b.n	8000e66 <main+0x1ae>

	 /////////////////////////////////TAREA DE GIRAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Roll,"Task-Roll",STACK_SIZE,NULL,3,&xHandleTask_Roll );
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <main+0x2f0>)
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2300      	movs	r3, #0
 8000e72:	22c8      	movs	r2, #200	; 0xc8
 8000e74:	494d      	ldr	r1, [pc, #308]	; (8000fac <main+0x2f4>)
 8000e76:	484e      	ldr	r0, [pc, #312]	; (8000fb0 <main+0x2f8>)
 8000e78:	f004 fb6a 	bl	8005550 <xTaskCreate>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <main+0x2a4>)
 8000e80:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <main+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d00a      	beq.n	8000ea0 <main+0x1e8>
        __asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000e9c:	bf00      	nop
 8000e9e:	e7fe      	b.n	8000e9e <main+0x1e6>

	 /////////////////////////////////TAREA DE GIRAR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_RollTo,"Task-RollTo",STACK_SIZE,NULL,3,&xHandleTask_Rollto );
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <main+0x2fc>)
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	22c8      	movs	r2, #200	; 0xc8
 8000eac:	4942      	ldr	r1, [pc, #264]	; (8000fb8 <main+0x300>)
 8000eae:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x304>)
 8000eb0:	f004 fb4e 	bl	8005550 <xTaskCreate>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <main+0x2a4>)
 8000eb8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <main+0x2a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d00a      	beq.n	8000ed8 <main+0x220>
        __asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <main+0x21e>

	 /////////////////////////////////TAREA DE REINICIAR VARIABLES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Reinit,"Task-Reinit",STACK_SIZE,NULL,3,&xHandleTask_Reinit );
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x308>)
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2303      	movs	r3, #3
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	22c8      	movs	r2, #200	; 0xc8
 8000ee4:	4937      	ldr	r1, [pc, #220]	; (8000fc4 <main+0x30c>)
 8000ee6:	4838      	ldr	r0, [pc, #224]	; (8000fc8 <main+0x310>)
 8000ee8:	f004 fb32 	bl	8005550 <xTaskCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <main+0x2a4>)
 8000ef0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <main+0x2a4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d00a      	beq.n	8000f10 <main+0x258>
        __asm volatile
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	623b      	str	r3, [r7, #32]
    }
 8000f0c:	bf00      	nop
 8000f0e:	e7fe      	b.n	8000f0e <main+0x256>

	 /////////////////////////////////TAREA DE CUADRADO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Square,"Task-Square",STACK_SIZE,NULL,3,&xHandleTask_Square );
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <main+0x314>)
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2303      	movs	r3, #3
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	22c8      	movs	r2, #200	; 0xc8
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <main+0x318>)
 8000f1e:	482d      	ldr	r0, [pc, #180]	; (8000fd4 <main+0x31c>)
 8000f20:	f004 fb16 	bl	8005550 <xTaskCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <main+0x2a4>)
 8000f28:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <main+0x2a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d052      	beq.n	8000fd8 <main+0x320>
        __asm volatile
 8000f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f36:	f383 8811 	msr	BASEPRI, r3
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	f3bf 8f4f 	dsb	sy
 8000f42:	61fb      	str	r3, [r7, #28]
    }
 8000f44:	bf00      	nop
 8000f46:	e7fe      	b.n	8000f46 <main+0x28e>
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	20000230 	.word	0x20000230
 8000f54:	0801355c 	.word	0x0801355c
 8000f58:	0800166d 	.word	0x0800166d
 8000f5c:	2000022c 	.word	0x2000022c
 8000f60:	20000234 	.word	0x20000234
 8000f64:	08013568 	.word	0x08013568
 8000f68:	0800279d 	.word	0x0800279d
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	08013574 	.word	0x08013574
 8000f74:	080019d1 	.word	0x080019d1
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	08013584 	.word	0x08013584
 8000f80:	08001a25 	.word	0x08001a25
 8000f84:	20000240 	.word	0x20000240
 8000f88:	08013590 	.word	0x08013590
 8000f8c:	08001a91 	.word	0x08001a91
 8000f90:	20000244 	.word	0x20000244
 8000f94:	08013598 	.word	0x08013598
 8000f98:	08001b51 	.word	0x08001b51
 8000f9c:	20000248 	.word	0x20000248
 8000fa0:	080135a8 	.word	0x080135a8
 8000fa4:	08001f25 	.word	0x08001f25
 8000fa8:	2000024c 	.word	0x2000024c
 8000fac:	080135b4 	.word	0x080135b4
 8000fb0:	08002029 	.word	0x08002029
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	080135c0 	.word	0x080135c0
 8000fbc:	08002085 	.word	0x08002085
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	080135cc 	.word	0x080135cc
 8000fc8:	08002721 	.word	0x08002721
 8000fcc:	20000258 	.word	0x20000258
 8000fd0:	080135d8 	.word	0x080135d8
 8000fd4:	080020fd 	.word	0x080020fd


	 /////////////////////////////////TAREA DE ASTAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Astar,"Task-Astar",STACK_SIZE,NULL,3,&xHandleTask_Astar );
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <main+0x4b4>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	22c8      	movs	r2, #200	; 0xc8
 8000fe4:	4962      	ldr	r1, [pc, #392]	; (8001170 <main+0x4b8>)
 8000fe6:	4863      	ldr	r0, [pc, #396]	; (8001174 <main+0x4bc>)
 8000fe8:	f004 fab2 	bl	8005550 <xTaskCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a62      	ldr	r2, [pc, #392]	; (8001178 <main+0x4c0>)
 8000ff0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ff2:	4b61      	ldr	r3, [pc, #388]	; (8001178 <main+0x4c0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00a      	beq.n	8001010 <main+0x358>
        __asm volatile
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	61bb      	str	r3, [r7, #24]
    }
 800100c:	bf00      	nop
 800100e:	e7fe      	b.n	800100e <main+0x356>

	 /////////////////////////////////TAREA DE LLENAR GRID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Grid,"Task-Grid",STACK_SIZE,NULL,3,&xHandleTask_Grid );
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <main+0x4c4>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2303      	movs	r3, #3
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	22c8      	movs	r2, #200	; 0xc8
 800101c:	4958      	ldr	r1, [pc, #352]	; (8001180 <main+0x4c8>)
 800101e:	4859      	ldr	r0, [pc, #356]	; (8001184 <main+0x4cc>)
 8001020:	f004 fa96 	bl	8005550 <xTaskCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a54      	ldr	r2, [pc, #336]	; (8001178 <main+0x4c0>)
 8001028:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x4c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d00a      	beq.n	8001048 <main+0x390>
        __asm volatile
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	617b      	str	r3, [r7, #20]
    }
 8001044:	bf00      	nop
 8001046:	e7fe      	b.n	8001046 <main+0x38e>

	 /////////////////////////////////TAREA DE CREAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_CrOp,"Task-CrOp",STACK_SIZE,NULL,3,&xHandleTask_CrOp );
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <main+0x4d0>)
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2303      	movs	r3, #3
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	22c8      	movs	r2, #200	; 0xc8
 8001054:	494d      	ldr	r1, [pc, #308]	; (800118c <main+0x4d4>)
 8001056:	484e      	ldr	r0, [pc, #312]	; (8001190 <main+0x4d8>)
 8001058:	f004 fa7a 	bl	8005550 <xTaskCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a46      	ldr	r2, [pc, #280]	; (8001178 <main+0x4c0>)
 8001060:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <main+0x4c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00a      	beq.n	8001080 <main+0x3c8>
        __asm volatile
 800106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	613b      	str	r3, [r7, #16]
    }
 800107c:	bf00      	nop
 800107e:	e7fe      	b.n	800107e <main+0x3c6>

	 /////////////////////////////////TAREA DE PROCESAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_PrOp,"Task-PrOp",STACK_SIZE,NULL,3,&xHandleTask_PrOp );
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <main+0x4dc>)
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2303      	movs	r3, #3
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	22c8      	movs	r2, #200	; 0xc8
 800108c:	4942      	ldr	r1, [pc, #264]	; (8001198 <main+0x4e0>)
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <main+0x4e4>)
 8001090:	f004 fa5e 	bl	8005550 <xTaskCreate>
 8001094:	4603      	mov	r3, r0
 8001096:	4a38      	ldr	r2, [pc, #224]	; (8001178 <main+0x4c0>)
 8001098:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <main+0x4c0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00a      	beq.n	80010b8 <main+0x400>
        __asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	60fb      	str	r3, [r7, #12]
    }
 80010b4:	bf00      	nop
 80010b6:	e7fe      	b.n	80010b6 <main+0x3fe>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	2014      	movs	r0, #20
 80010be:	f003 fd19 	bl	8004af4 <xQueueGenericCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <main+0x4e8>)
 80010c6:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <main+0x4e8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10a      	bne.n	80010e6 <main+0x42e>
        __asm volatile
 80010d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d4:	f383 8811 	msr	BASEPRI, r3
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	60bb      	str	r3, [r7, #8]
    }
 80010e2:	bf00      	nop
 80010e4:	e7fe      	b.n	80010e4 <main+0x42c>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 80010e6:	2200      	movs	r2, #0
 80010e8:	2104      	movs	r1, #4
 80010ea:	200a      	movs	r0, #10
 80010ec:	f003 fd02 	bl	8004af4 <xQueueGenericCreate>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <main+0x4ec>)
 80010f4:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <main+0x4ec>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10a      	bne.n	8001114 <main+0x45c>
        __asm volatile
 80010fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	607b      	str	r3, [r7, #4]
    }
 8001110:	bf00      	nop
 8001112:	e7fe      	b.n	8001112 <main+0x45a>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <main+0x4f0>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001120:	4822      	ldr	r0, [pc, #136]	; (80011ac <main+0x4f4>)
 8001122:	f005 faeb 	bl	80066fc <xTimerCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <main+0x4f8>)
 800112a:	6013      	str	r3, [r2, #0]
									 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <main+0x4f8>)
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	f004 fc50 	bl	80059d4 <xTaskGetTickCount>
 8001134:	4602      	mov	r2, r0
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2101      	movs	r1, #1
 8001140:	4620      	mov	r0, r4
 8001142:	f005 fb37 	bl	80067b4 <xTimerGenericCommand>


	inSystem ();
 8001146:	f000 f839 	bl	80011bc <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 800114a:	2102      	movs	r1, #2
 800114c:	4819      	ldr	r0, [pc, #100]	; (80011b4 <main+0x4fc>)
 800114e:	f001 fd5b 	bl	8002c08 <calibracionGyros>
 8001152:	ee10 3a10 	vmov	r3, s0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4915      	ldr	r1, [pc, #84]	; (80011b8 <main+0x500>)
 8001162:	e9c1 2300 	strd	r2, r3, [r1]

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8001166:	f004 fb39 	bl	80057dc <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 800116a:	e7fe      	b.n	800116a <main+0x4b2>
 800116c:	2000025c 	.word	0x2000025c
 8001170:	080135e4 	.word	0x080135e4
 8001174:	0800216d 	.word	0x0800216d
 8001178:	2000022c 	.word	0x2000022c
 800117c:	20000260 	.word	0x20000260
 8001180:	080135f0 	.word	0x080135f0
 8001184:	0800221d 	.word	0x0800221d
 8001188:	20000264 	.word	0x20000264
 800118c:	080135fc 	.word	0x080135fc
 8001190:	080023c1 	.word	0x080023c1
 8001194:	20000268 	.word	0x20000268
 8001198:	08013608 	.word	0x08013608
 800119c:	08002481 	.word	0x08002481
 80011a0:	20000270 	.word	0x20000270
 80011a4:	2000026c 	.word	0x2000026c
 80011a8:	080046dd 	.word	0x080046dd
 80011ac:	08013614 	.word	0x08013614
 80011b0:	20000274 	.word	0x20000274
 80011b4:	20000430 	.word	0x20000430
 80011b8:	20000c10 	.word	0x20000c10

080011bc <inSystem>:

	}
}


void inSystem (void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80011c2:	4baf      	ldr	r3, [pc, #700]	; (8001480 <inSystem+0x2c4>)
 80011c4:	4aaf      	ldr	r2, [pc, #700]	; (8001484 <inSystem+0x2c8>)
 80011c6:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80011c8:	4bad      	ldr	r3, [pc, #692]	; (8001480 <inSystem+0x2c4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80011ce:	4bac      	ldr	r3, [pc, #688]	; (8001480 <inSystem+0x2c4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80011d4:	4baa      	ldr	r3, [pc, #680]	; (8001480 <inSystem+0x2c4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80011da:	4ba9      	ldr	r3, [pc, #676]	; (8001480 <inSystem+0x2c4>)
 80011dc:	2205      	movs	r2, #5
 80011de:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011e0:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <inSystem+0x2c4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <inSystem+0x2c4>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80011ec:	48a4      	ldr	r0, [pc, #656]	; (8001480 <inSystem+0x2c4>)
 80011ee:	f009 fd31 	bl	800ac54 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80011f2:	2101      	movs	r1, #1
 80011f4:	48a2      	ldr	r0, [pc, #648]	; (8001480 <inSystem+0x2c4>)
 80011f6:	f009 fe57 	bl	800aea8 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80011fa:	f007 ff95 	bl	8009128 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <inSystem+0x2cc>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <inSystem+0x2d0>)
 8001204:	4aa2      	ldr	r2, [pc, #648]	; (8001490 <inSystem+0x2d4>)
 8001206:	49a3      	ldr	r1, [pc, #652]	; (8001494 <inSystem+0x2d8>)
 8001208:	48a3      	ldr	r0, [pc, #652]	; (8001498 <inSystem+0x2dc>)
 800120a:	f002 fbe1 	bl	80039d0 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 800120e:	4ba3      	ldr	r3, [pc, #652]	; (800149c <inSystem+0x2e0>)
 8001210:	4a9c      	ldr	r2, [pc, #624]	; (8001484 <inSystem+0x2c8>)
 8001212:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001214:	4ba1      	ldr	r3, [pc, #644]	; (800149c <inSystem+0x2e0>)
 8001216:	2202      	movs	r2, #2
 8001218:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800121a:	4ba0      	ldr	r3, [pc, #640]	; (800149c <inSystem+0x2e0>)
 800121c:	2202      	movs	r2, #2
 800121e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001220:	4b9e      	ldr	r3, [pc, #632]	; (800149c <inSystem+0x2e0>)
 8001222:	2200      	movs	r2, #0
 8001224:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8001226:	4b9d      	ldr	r3, [pc, #628]	; (800149c <inSystem+0x2e0>)
 8001228:	2200      	movs	r2, #0
 800122a:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800122c:	4b9b      	ldr	r3, [pc, #620]	; (800149c <inSystem+0x2e0>)
 800122e:	2200      	movs	r2, #0
 8001230:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001232:	4b9a      	ldr	r3, [pc, #616]	; (800149c <inSystem+0x2e0>)
 8001234:	2202      	movs	r2, #2
 8001236:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001238:	4898      	ldr	r0, [pc, #608]	; (800149c <inSystem+0x2e0>)
 800123a:	f009 fd0b 	bl	800ac54 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 800123e:	4b98      	ldr	r3, [pc, #608]	; (80014a0 <inSystem+0x2e4>)
 8001240:	4a98      	ldr	r2, [pc, #608]	; (80014a4 <inSystem+0x2e8>)
 8001242:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001244:	4b96      	ldr	r3, [pc, #600]	; (80014a0 <inSystem+0x2e4>)
 8001246:	2200      	movs	r2, #0
 8001248:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <inSystem+0x2e4>)
 800124c:	4a96      	ldr	r2, [pc, #600]	; (80014a8 <inSystem+0x2ec>)
 800124e:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001250:	4993      	ldr	r1, [pc, #588]	; (80014a0 <inSystem+0x2e4>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b95      	ldr	r3, [pc, #596]	; (80014ac <inSystem+0x2f0>)
 8001258:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 800125c:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <inSystem+0x2e4>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001262:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <inSystem+0x2e4>)
 8001264:	2201      	movs	r2, #1
 8001266:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001268:	4b8d      	ldr	r3, [pc, #564]	; (80014a0 <inSystem+0x2e4>)
 800126a:	2201      	movs	r2, #1
 800126c:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 800126e:	488c      	ldr	r0, [pc, #560]	; (80014a0 <inSystem+0x2e4>)
 8001270:	f00a fd02 	bl	800bc78 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001274:	488a      	ldr	r0, [pc, #552]	; (80014a0 <inSystem+0x2e4>)
 8001276:	f00a fde9 	bl	800be4c <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800127a:	4b8d      	ldr	r3, [pc, #564]	; (80014b0 <inSystem+0x2f4>)
 800127c:	4a81      	ldr	r2, [pc, #516]	; (8001484 <inSystem+0x2c8>)
 800127e:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <inSystem+0x2f4>)
 8001282:	2202      	movs	r2, #2
 8001284:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001286:	4b8a      	ldr	r3, [pc, #552]	; (80014b0 <inSystem+0x2f4>)
 8001288:	2202      	movs	r2, #2
 800128a:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <inSystem+0x2f4>)
 800128e:	2200      	movs	r2, #0
 8001290:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001292:	4b87      	ldr	r3, [pc, #540]	; (80014b0 <inSystem+0x2f4>)
 8001294:	2201      	movs	r2, #1
 8001296:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001298:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <inSystem+0x2f4>)
 800129a:	2200      	movs	r2, #0
 800129c:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800129e:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <inSystem+0x2f4>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80012a4:	4882      	ldr	r0, [pc, #520]	; (80014b0 <inSystem+0x2f4>)
 80012a6:	f009 fcd5 	bl	800ac54 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <inSystem+0x2f8>)
 80012ac:	4a7d      	ldr	r2, [pc, #500]	; (80014a4 <inSystem+0x2e8>)
 80012ae:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80012b0:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <inSystem+0x2f8>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <inSystem+0x2f8>)
 80012b8:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <inSystem+0x2ec>)
 80012ba:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80012bc:	497d      	ldr	r1, [pc, #500]	; (80014b4 <inSystem+0x2f8>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <inSystem+0x2f0>)
 80012c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <inSystem+0x2f8>)
 80012ca:	2264      	movs	r2, #100	; 0x64
 80012cc:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80012ce:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <inSystem+0x2f8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <inSystem+0x2f8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80012da:	4876      	ldr	r0, [pc, #472]	; (80014b4 <inSystem+0x2f8>)
 80012dc:	f00a fccc 	bl	800bc78 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80012e0:	4874      	ldr	r0, [pc, #464]	; (80014b4 <inSystem+0x2f8>)
 80012e2:	f00a fdb3 	bl	800be4c <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <inSystem+0x2fc>)
 80012e8:	4a74      	ldr	r2, [pc, #464]	; (80014bc <inSystem+0x300>)
 80012ea:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012ec:	4b72      	ldr	r3, [pc, #456]	; (80014b8 <inSystem+0x2fc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <inSystem+0x2fc>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012f8:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <inSystem+0x2fc>)
 80012fa:	220a      	movs	r2, #10
 80012fc:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012fe:	4b6e      	ldr	r3, [pc, #440]	; (80014b8 <inSystem+0x2fc>)
 8001300:	2200      	movs	r2, #0
 8001302:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001304:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <inSystem+0x2fc>)
 8001306:	2200      	movs	r2, #0
 8001308:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800130a:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <inSystem+0x2fc>)
 800130c:	2202      	movs	r2, #2
 800130e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001310:	4869      	ldr	r0, [pc, #420]	; (80014b8 <inSystem+0x2fc>)
 8001312:	f009 fc9f 	bl	800ac54 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001316:	2100      	movs	r1, #0
 8001318:	4867      	ldr	r0, [pc, #412]	; (80014b8 <inSystem+0x2fc>)
 800131a:	f009 fdf0 	bl	800aefe <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <inSystem+0x304>)
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <inSystem+0x300>)
 8001322:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <inSystem+0x304>)
 8001326:	2200      	movs	r2, #0
 8001328:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <inSystem+0x304>)
 800132c:	2201      	movs	r2, #1
 800132e:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <inSystem+0x304>)
 8001332:	220b      	movs	r2, #11
 8001334:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <inSystem+0x304>)
 8001338:	2200      	movs	r2, #0
 800133a:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <inSystem+0x304>)
 800133e:	2200      	movs	r2, #0
 8001340:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <inSystem+0x304>)
 8001344:	2202      	movs	r2, #2
 8001346:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001348:	485d      	ldr	r0, [pc, #372]	; (80014c0 <inSystem+0x304>)
 800134a:	f009 fc83 	bl	800ac54 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 800134e:	2100      	movs	r1, #0
 8001350:	485b      	ldr	r0, [pc, #364]	; (80014c0 <inSystem+0x304>)
 8001352:	f009 fdd4 	bl	800aefe <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <inSystem+0x308>)
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <inSystem+0x300>)
 800135a:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800135c:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <inSystem+0x308>)
 800135e:	2200      	movs	r2, #0
 8001360:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <inSystem+0x308>)
 8001364:	2201      	movs	r2, #1
 8001366:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <inSystem+0x308>)
 800136a:	220c      	movs	r2, #12
 800136c:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <inSystem+0x308>)
 8001370:	2200      	movs	r2, #0
 8001372:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <inSystem+0x308>)
 8001376:	2200      	movs	r2, #0
 8001378:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <inSystem+0x308>)
 800137c:	2202      	movs	r2, #2
 800137e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001380:	4850      	ldr	r0, [pc, #320]	; (80014c4 <inSystem+0x308>)
 8001382:	f009 fc67 	bl	800ac54 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001386:	2100      	movs	r1, #0
 8001388:	484e      	ldr	r0, [pc, #312]	; (80014c4 <inSystem+0x308>)
 800138a:	f009 fdb8 	bl	800aefe <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <inSystem+0x2dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <inSystem+0x30c>)
 8001398:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <inSystem+0x310>)
 800139a:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <inSystem+0x30c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <inSystem+0x30c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <inSystem+0x30c>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <inSystem+0x30c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <inSystem+0x30c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <inSystem+0x30c>)
 80013bc:	2202      	movs	r2, #2
 80013be:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80013c0:	4841      	ldr	r0, [pc, #260]	; (80014c8 <inSystem+0x30c>)
 80013c2:	f009 fc47 	bl	800ac54 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80013c6:	2100      	movs	r1, #0
 80013c8:	483f      	ldr	r0, [pc, #252]	; (80014c8 <inSystem+0x30c>)
 80013ca:	f009 fd98 	bl	800aefe <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <inSystem+0x2dc>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <inSystem+0x314>)
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <inSystem+0x300>)
 80013da:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <inSystem+0x314>)
 80013de:	2200      	movs	r2, #0
 80013e0:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <inSystem+0x314>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <inSystem+0x314>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <inSystem+0x314>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <inSystem+0x314>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <inSystem+0x314>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <inSystem+0x318>)
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <inSystem+0x314>)
 8001404:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <inSystem+0x318>)
 8001408:	2202      	movs	r2, #2
 800140a:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800140c:	4831      	ldr	r0, [pc, #196]	; (80014d4 <inSystem+0x318>)
 800140e:	f008 fb59 	bl	8009ac4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001412:	2106      	movs	r1, #6
 8001414:	482f      	ldr	r0, [pc, #188]	; (80014d4 <inSystem+0x318>)
 8001416:	f009 f9fd 	bl	800a814 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <inSystem+0x31c>)
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <inSystem+0x300>)
 800141e:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <inSystem+0x31c>)
 8001422:	2200      	movs	r2, #0
 8001424:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <inSystem+0x31c>)
 8001428:	2200      	movs	r2, #0
 800142a:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <inSystem+0x31c>)
 800142e:	2203      	movs	r2, #3
 8001430:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <inSystem+0x31c>)
 8001434:	2200      	movs	r2, #0
 8001436:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <inSystem+0x31c>)
 800143a:	2200      	movs	r2, #0
 800143c:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <inSystem+0x31c>)
 8001440:	2202      	movs	r2, #2
 8001442:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <inSystem+0x320>)
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <inSystem+0x31c>)
 8001448:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <inSystem+0x320>)
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001450:	4822      	ldr	r0, [pc, #136]	; (80014dc <inSystem+0x320>)
 8001452:	f008 fb37 	bl	8009ac4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 8001456:	2106      	movs	r1, #6
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <inSystem+0x320>)
 800145a:	f009 f9db 	bl	800a814 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <inSystem+0x324>)
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <inSystem+0x2c8>)
 8001462:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <inSystem+0x324>)
 8001466:	2207      	movs	r2, #7
 8001468:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <inSystem+0x324>)
 800146c:	2202      	movs	r2, #2
 800146e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <inSystem+0x324>)
 8001472:	2200      	movs	r2, #0
 8001474:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <inSystem+0x324>)
 8001478:	2209      	movs	r2, #9
 800147a:	711a      	strb	r2, [r3, #4]
 800147c:	e032      	b.n	80014e4 <inSystem+0x328>
 800147e:	bf00      	nop
 8001480:	20000278 	.word	0x20000278
 8001484:	40020000 	.word	0x40020000
 8001488:	20000614 	.word	0x20000614
 800148c:	2000062c 	.word	0x2000062c
 8001490:	20000648 	.word	0x20000648
 8001494:	20000b68 	.word	0x20000b68
 8001498:	20000440 	.word	0x20000440
 800149c:	20000284 	.word	0x20000284
 80014a0:	20000350 	.word	0x20000350
 80014a4:	40000c00 	.word	0x40000c00
 80014a8:	41e00000 	.word	0x41e00000
 80014ac:	40408000 	.word	0x40408000
 80014b0:	20000290 	.word	0x20000290
 80014b4:	20000370 	.word	0x20000370
 80014b8:	200002c0 	.word	0x200002c0
 80014bc:	40020800 	.word	0x40020800
 80014c0:	200002b4 	.word	0x200002b4
 80014c4:	200002d8 	.word	0x200002d8
 80014c8:	200002cc 	.word	0x200002cc
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	200002e4 	.word	0x200002e4
 80014d4:	20000314 	.word	0x20000314
 80014d8:	200002f0 	.word	0x200002f0
 80014dc:	2000031c 	.word	0x2000031c
 80014e0:	200002a8 	.word	0x200002a8
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <inSystem+0x47c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <inSystem+0x47c>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80014f0:	4851      	ldr	r0, [pc, #324]	; (8001638 <inSystem+0x47c>)
 80014f2:	f009 fbaf 	bl	800ac54 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <inSystem+0x480>)
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <inSystem+0x484>)
 80014fa:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <inSystem+0x480>)
 80014fe:	2207      	movs	r2, #7
 8001500:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <inSystem+0x480>)
 8001504:	2202      	movs	r2, #2
 8001506:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <inSystem+0x480>)
 800150a:	2200      	movs	r2, #0
 800150c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <inSystem+0x480>)
 8001510:	220a      	movs	r2, #10
 8001512:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <inSystem+0x480>)
 8001516:	2200      	movs	r2, #0
 8001518:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <inSystem+0x480>)
 800151c:	2203      	movs	r2, #3
 800151e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001520:	4846      	ldr	r0, [pc, #280]	; (800163c <inSystem+0x480>)
 8001522:	f009 fb97 	bl	800ac54 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART1;
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <inSystem+0x488>)
 8001528:	4a47      	ldr	r2, [pc, #284]	; (8001648 <inSystem+0x48c>)
 800152a:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_100MHz_VELOCITY;
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <inSystem+0x488>)
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <inSystem+0x490>)
 8001530:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <inSystem+0x488>)
 8001534:	2201      	movs	r2, #1
 8001536:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <inSystem+0x488>)
 800153a:	2201      	movs	r2, #1
 800153c:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <inSystem+0x488>)
 8001540:	2200      	movs	r2, #0
 8001542:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <inSystem+0x488>)
 8001546:	2202      	movs	r2, #2
 8001548:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <inSystem+0x488>)
 800154c:	2200      	movs	r2, #0
 800154e:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <inSystem+0x488>)
 8001552:	2200      	movs	r2, #0
 8001554:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <inSystem+0x488>)
 8001558:	2200      	movs	r2, #0
 800155a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800155c:	4839      	ldr	r0, [pc, #228]	; (8001644 <inSystem+0x488>)
 800155e:	f00b fc15 	bl	800cd8c <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001562:	2106      	movs	r1, #6
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <inSystem+0x488>)
 8001566:	f00c f8c3 	bl	800d6f0 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <inSystem+0x494>)
 800156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001570:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <inSystem+0x494>)
 8001574:	2201      	movs	r2, #1
 8001576:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <inSystem+0x494>)
 800157a:	2200      	movs	r2, #0
 800157c:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <inSystem+0x494>)
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <inSystem+0x494>)
 8001588:	2210      	movs	r2, #16
 800158a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <inSystem+0x494>)
 800158e:	f007 fde7 	bl	8009160 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001592:	2106      	movs	r1, #6
 8001594:	482e      	ldr	r0, [pc, #184]	; (8001650 <inSystem+0x494>)
 8001596:	f007 ffa1 	bl	80094dc <TIM_SetPriority>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <inSystem+0x494>)
 800159c:	f008 fa26 	bl	80099ec <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <inSystem+0x498>)
 80015a2:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <inSystem+0x49c>)
 80015a4:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <inSystem+0x498>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <inSystem+0x498>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <inSystem+0x498>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <inSystem+0x498>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <inSystem+0x498>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <inSystem+0x498>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <inSystem+0x4a0>)
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <inSystem+0x49c>)
 80015ce:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <inSystem+0x4a0>)
 80015d2:	2204      	movs	r2, #4
 80015d4:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <inSystem+0x4a0>)
 80015d8:	2202      	movs	r2, #2
 80015da:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <inSystem+0x4a0>)
 80015de:	2209      	movs	r2, #9
 80015e0:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <inSystem+0x4a0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <inSystem+0x4a0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <inSystem+0x4a0>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <inSystem+0x4a4>)
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <inSystem+0x4a8>)
 80015f8:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <inSystem+0x4a4>)
 80015fc:	2232      	movs	r2, #50	; 0x32
 80015fe:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <inSystem+0x4a4>)
 8001602:	2268      	movs	r2, #104	; 0x68
 8001604:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <inSystem+0x4a4>)
 8001608:	2201      	movs	r2, #1
 800160a:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <inSystem+0x4ac>)
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <inSystem+0x498>)
 8001610:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <inSystem+0x4ac>)
 8001614:	4a11      	ldr	r2, [pc, #68]	; (800165c <inSystem+0x4a0>)
 8001616:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <inSystem+0x4ac>)
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <inSystem+0x4a4>)
 800161c:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <inSystem+0x4ac>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <inSystem+0x4ac>)
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <inSystem+0x4ac>)
 800162c:	f009 fcca 	bl	800afc4 <configMPUAccel>

}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002a8 	.word	0x200002a8
 800163c:	2000029c 	.word	0x2000029c
 8001640:	40020000 	.word	0x40020000
 8001644:	20000390 	.word	0x20000390
 8001648:	40011000 	.word	0x40011000
 800164c:	05f5e100 	.word	0x05f5e100
 8001650:	20000324 	.word	0x20000324
 8001654:	200002fc 	.word	0x200002fc
 8001658:	40020400 	.word	0x40020400
 800165c:	20000308 	.word	0x20000308
 8001660:	20000424 	.word	0x20000424
 8001664:	40005400 	.word	0x40005400
 8001668:	20000430 	.word	0x20000430

0800166c <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 8001674:	4bab      	ldr	r3, [pc, #684]	; (8001924 <vTask_Menu+0x2b8>)
 8001676:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here: ";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		if (!end){
 8001678:	4bab      	ldr	r3, [pc, #684]	; (8001928 <vTask_Menu+0x2bc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <vTask_Menu+0x26>
			xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001680:	4baa      	ldr	r3, [pc, #680]	; (800192c <vTask_Menu+0x2c0>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	2300      	movs	r3, #0
 800168a:	f04f 32ff 	mov.w	r2, #4294967295
 800168e:	f003 fab3 	bl	8004bf8 <xQueueGenericSend>
		}
		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f004 fd31 	bl	8006108 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	617b      	str	r3, [r7, #20]

		if (end){
 80016aa:	4b9f      	ldr	r3, [pc, #636]	; (8001928 <vTask_Menu+0x2bc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <vTask_Menu+0x60>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 80016b2:	4b9f      	ldr	r3, [pc, #636]	; (8001930 <vTask_Menu+0x2c4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <vTask_Menu+0x2bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 80016be:	4b9d      	ldr	r3, [pc, #628]	; (8001934 <vTask_Menu+0x2c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 f9ad 	bl	8004a24 <xQueueGenericReset>
 80016ca:	e7d5      	b.n	8001678 <vTask_Menu+0xc>
		}else if (!flag_PrOp){
 80016cc:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <vTask_Menu+0x2cc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8104 	bne.w	80018de <vTask_Menu+0x272>

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	f000 80d4 	beq.w	800188a <vTask_Menu+0x21e>

				switch (cmd->functionType) {
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	f200 8164 	bhi.w	80019b6 <vTask_Menu+0x34a>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <vTask_Menu+0x88>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001711 	.word	0x08001711
 80016f8:	08001747 	.word	0x08001747
 80016fc:	0800177d 	.word	0x0800177d
 8001700:	080017b3 	.word	0x080017b3
 8001704:	080017e9 	.word	0x080017e9
 8001708:	0800181f 	.word	0x0800181f
 800170c:	08001855 	.word	0x08001855
					case 1:{// sGo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001710:	4b86      	ldr	r3, [pc, #536]	; (800192c <vTask_Menu+0x2c0>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	f04f 32ff 	mov.w	r2, #4294967295
 800171a:	4988      	ldr	r1, [pc, #544]	; (800193c <vTask_Menu+0x2d0>)
 800171c:	f003 fa6c 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001720:	4b84      	ldr	r3, [pc, #528]	; (8001934 <vTask_Menu+0x2c8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f97c 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGo;
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <vTask_Menu+0x2c4>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 8001732:	4b83      	ldr	r3, [pc, #524]	; (8001940 <vTask_Menu+0x2d4>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	f004 fd62 	bl	8006208 <xTaskGenericNotify>


						break;
 8001744:	e138      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 2:{// sGoTo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <vTask_Menu+0x2c0>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	497c      	ldr	r1, [pc, #496]	; (8001944 <vTask_Menu+0x2d8>)
 8001752:	f003 fa51 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <vTask_Menu+0x2c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f961 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGoTo;
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <vTask_Menu+0x2c4>)
 8001764:	2202      	movs	r2, #2
 8001766:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 8001768:	4b77      	ldr	r3, [pc, #476]	; (8001948 <vTask_Menu+0x2dc>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	f004 fd47 	bl	8006208 <xTaskGenericNotify>


						break;
 800177a:	e11d      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 3:{ // sRoll
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_3,portMAX_DELAY);
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <vTask_Menu+0x2c0>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	2300      	movs	r3, #0
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	4971      	ldr	r1, [pc, #452]	; (800194c <vTask_Menu+0x2e0>)
 8001788:	f003 fa36 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800178c:	4b69      	ldr	r3, [pc, #420]	; (8001934 <vTask_Menu+0x2c8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f946 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRoll;
 8001798:	4b65      	ldr	r3, [pc, #404]	; (8001930 <vTask_Menu+0x2c4>)
 800179a:	2204      	movs	r2, #4
 800179c:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Roll, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRoll
 800179e:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <vTask_Menu+0x2e4>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	f004 fd2c 	bl	8006208 <xTaskGenericNotify>


						break;
 80017b0:	e102      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 4:{ // sRollTo
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <vTask_Menu+0x2c0>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	4965      	ldr	r1, [pc, #404]	; (8001954 <vTask_Menu+0x2e8>)
 80017be:	f003 fa1b 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017c2:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <vTask_Menu+0x2c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f92b 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRollTo;
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <vTask_Menu+0x2c4>)
 80017d0:	2205      	movs	r2, #5
 80017d2:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Rollto, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80017d4:	4b60      	ldr	r3, [pc, #384]	; (8001958 <vTask_Menu+0x2ec>)
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	f004 fd11 	bl	8006208 <xTaskGenericNotify>


						break;
 80017e6:	e0e7      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 5:{ // Reinit
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_5,portMAX_DELAY);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <vTask_Menu+0x2c0>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	495a      	ldr	r1, [pc, #360]	; (800195c <vTask_Menu+0x2f0>)
 80017f4:	f003 fa00 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <vTask_Menu+0x2c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 f910 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state  = Aux;
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <vTask_Menu+0x2c4>)
 8001806:	2208      	movs	r2, #8
 8001808:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Reinit, 0 ,eNoAction); // NOS VAMOS AL ESTADO Reinit
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <vTask_Menu+0x2f4>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	f004 fcf6 	bl	8006208 <xTaskGenericNotify>


						break;
 800181c:	e0cc      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 6:{ // sSquare
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_6,portMAX_DELAY);
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <vTask_Menu+0x2c0>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	494e      	ldr	r1, [pc, #312]	; (8001964 <vTask_Menu+0x2f8>)
 800182a:	f003 f9e5 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <vTask_Menu+0x2c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f8f5 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sSquare;
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <vTask_Menu+0x2c4>)
 800183c:	2207      	movs	r2, #7
 800183e:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Square, 0 ,eNoAction); // NOS VAMOS AL ESTADO sSquare
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <vTask_Menu+0x2fc>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2300      	movs	r3, #0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	f004 fcdb 	bl	8006208 <xTaskGenericNotify>


						break;
 8001852:	e0b1      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 7:{ // sAstar
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_7,portMAX_DELAY);
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <vTask_Menu+0x2c0>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	f04f 32ff 	mov.w	r2, #4294967295
 800185e:	4943      	ldr	r1, [pc, #268]	; (800196c <vTask_Menu+0x300>)
 8001860:	f003 f9ca 	bl	8004bf8 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <vTask_Menu+0x2c8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f8da 	bl	8004a24 <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sAstar;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <vTask_Menu+0x2c4>)
 8001872:	2206      	movs	r2, #6
 8001874:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Astar, 0 ,eNoAction); // NOS VAMOS AL ESTADO sAstar
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <vTask_Menu+0x304>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	f004 fcc0 	bl	8006208 <xTaskGenericNotify>
						break;
 8001888:	e096      	b.n	80019b8 <vTask_Menu+0x34c>
						///////
						continue;}
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <vTask_Menu+0x2c0>)
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <vTask_Menu+0x308>)
 8001896:	f003 f9af 	bl	8004bf8 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <vTask_Menu+0x30c>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <vTask_Menu+0x2c8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f8bc 	bl	8004a24 <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00c f9e4 	bl	800dc80 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <vTask_Menu+0x310>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	f004 fc9f 	bl	8006208 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f004 fc16 	bl	8006108 <xTaskGenericNotifyWait>
 80018dc:	e6cc      	b.n	8001678 <vTask_Menu+0xc>
			}
		}else{
			// Si estamos aqu es porque llegamos al menu a traves del procesamiento de operaciones
			// solo se cambiara momentaneamente el estado para procesarlo y luego de terminado, se

			switch (cmd->functionType) {
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d002      	beq.n	80018ec <vTask_Menu+0x280>
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d04a      	beq.n	8001980 <vTask_Menu+0x314>
					xTaskNotify(xHandleTask_Rollto,0,eNoAction); // NOS VAMOS AL ESTADO sRollTo

					break;
				}default:{
					///////
					continue;}
 80018ea:	e065      	b.n	80019b8 <vTask_Menu+0x34c>
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <vTask_Menu+0x2c0>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295
 80018f6:	4913      	ldr	r1, [pc, #76]	; (8001944 <vTask_Menu+0x2d8>)
 80018f8:	f003 f97e 	bl	8004bf8 <xQueueGenericSend>
					xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <vTask_Menu+0x2c8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f88e 	bl	8004a24 <xQueueGenericReset>
					next_state = sGoTo;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <vTask_Menu+0x2c4>)
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_GoTo,0,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <vTask_Menu+0x2dc>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	f004 fc74 	bl	8006208 <xTaskGenericNotify>
					break;
 8001920:	e04a      	b.n	80019b8 <vTask_Menu+0x34c>
 8001922:	bf00      	nop
 8001924:	08013620 	.word	0x08013620
 8001928:	2000061d 	.word	0x2000061d
 800192c:	2000026c 	.word	0x2000026c
 8001930:	20000617 	.word	0x20000617
 8001934:	20000270 	.word	0x20000270
 8001938:	2000061f 	.word	0x2000061f
 800193c:	20000008 	.word	0x20000008
 8001940:	20000240 	.word	0x20000240
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000248 	.word	0x20000248
 800194c:	20000010 	.word	0x20000010
 8001950:	2000024c 	.word	0x2000024c
 8001954:	20000014 	.word	0x20000014
 8001958:	20000250 	.word	0x20000250
 800195c:	20000018 	.word	0x20000018
 8001960:	20000254 	.word	0x20000254
 8001964:	2000001c 	.word	0x2000001c
 8001968:	20000258 	.word	0x20000258
 800196c:	20000020 	.word	0x20000020
 8001970:	2000025c 	.word	0x2000025c
 8001974:	20000004 	.word	0x20000004
 8001978:	2000061c 	.word	0x2000061c
 800197c:	20000230 	.word	0x20000230
					xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <vTask_Menu+0x350>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <vTask_Menu+0x354>)
 800198c:	f003 f934 	bl	8004bf8 <xQueueGenericSend>
					xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <vTask_Menu+0x358>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f844 	bl	8004a24 <xQueueGenericReset>
					next_state = sRollTo;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <vTask_Menu+0x35c>)
 800199e:	2205      	movs	r2, #5
 80019a0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Rollto,0,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <vTask_Menu+0x360>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	f004 fc2a 	bl	8006208 <xTaskGenericNotify>
					break;
 80019b4:	e000      	b.n	80019b8 <vTask_Menu+0x34c>
						continue;}
 80019b6:	bf00      	nop
		if (!end){
 80019b8:	e65e      	b.n	8001678 <vTask_Menu+0xc>
 80019ba:	bf00      	nop
 80019bc:	2000026c 	.word	0x2000026c
 80019c0:	20000014 	.word	0x20000014
 80019c4:	20000270 	.word	0x20000270
 80019c8:	20000617 	.word	0x20000617
 80019cc:	20000250 	.word	0x20000250

080019d0 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b098      	sub	sp, #96	; 0x60
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]

   command_t cmd = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2244      	movs	r2, #68	; 0x44
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c f94d 	bl	800dc80 <memset>
   command_t *proc_cmd = {0};
 80019e6:	2300      	movs	r3, #0
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
   uint32_t cmd_procc_addr;

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   xTaskNotifyWait(0,0,&cmd_procc_addr,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	9200      	str	r2, [sp, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2000      	movs	r0, #0
 80019fa:	f004 fb85 	bl	8006108 <xTaskGenericNotifyWait>
	  proc_cmd = (command_t *) cmd_procc_addr;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	657b      	str	r3, [r7, #84]	; 0x54

	   if (!flag_PrOp){
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <vTask_Commands+0x50>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <vTask_Commands+0x46>

		  process_command(&cmd);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fedc 	bl	80027cc <process_command>
 8001a14:	e7e9      	b.n	80019ea <vTask_Commands+0x1a>

	  }else{
		  // Si estamos aqui es porque llego un mensaje escrito en software
		  process_command(proc_cmd);
 8001a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a18:	f000 fed8 	bl	80027cc <process_command>
	   xTaskNotifyWait(0,0,&cmd_procc_addr,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a1c:	e7e5      	b.n	80019ea <vTask_Commands+0x1a>
 8001a1e:	bf00      	nop
 8001a20:	2000061f 	.word	0x2000061f

08001a24 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f004 fb65 	bl	8006108 <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <vTask_Stop+0x58>)
 8001a40:	f001 ffa1 	bl	8003986 <stop>

		Mode_dir.Mode = None;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <vTask_Stop+0x5c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

		 if (end){
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <vTask_Stop+0x60>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <vTask_Stop+0x42>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <vTask_Stop+0x64>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f004 fbd2 	bl	8006208 <xTaskGenericNotify>
 8001a64:	e7e2      	b.n	8001a2c <vTask_Stop+0x8>
		 }else{
			 // Si estamos aqui es porque no se levanto la bandera de end por lo que estamos en un caso de procesamiento de operaciones
			 //Nos vamos de nuevo a procesar operaciones para seguir con la operación siguente

			 xTaskNotify(xHandleTask_PrOp,0, eNoAction); // Nos vamos la tarea de procesamiento de operaciones para repetir el ciclo
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <vTask_Stop+0x68>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	f004 fbc8 	bl	8006208 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a78:	e7d8      	b.n	8001a2c <vTask_Stop+0x8>
 8001a7a:	bf00      	nop
 8001a7c:	20000440 	.word	0x20000440
 8001a80:	20000614 	.word	0x20000614
 8001a84:	2000061d 	.word	0x2000061d
 8001a88:	20000230 	.word	0x20000230
 8001a8c:	20000268 	.word	0x20000268

08001a90 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f004 fb2f 	bl	8006108 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <vTask_Go+0xac>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001ab0:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <vTask_Go+0xb0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <vTask_Go+0xac>)
 8001ab8:	705a      	strb	r2, [r3, #1]

		resetParameters();
 8001aba:	f002 fdf9 	bl	80046b0 <resetParameters>

		parameters_Path_Robot.start_position_x =  parameters_Pos_Robot.xg_position;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <vTask_Go+0xb4>)
 8001ac0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001ac4:	4920      	ldr	r1, [pc, #128]	; (8001b48 <vTask_Go+0xb8>)
 8001ac6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		parameters_Path_Robot.start_position_y =  parameters_Pos_Robot.yg_position;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <vTask_Go+0xb4>)
 8001acc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001ad0:	491d      	ldr	r1, [pc, #116]	; (8001b48 <vTask_Go+0xb8>)
 8001ad2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		parameters_Path_Robot.goal_Position_x =  cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <vTask_Go+0xb4>)
 8001ad8:	ed93 7b04 	vldr	d7, [r3, #16]
 8001adc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ae0:	eef0 0a67 	vmov.f32	s1, s15
 8001ae4:	f00e ffa4 	bl	8010a30 <cos>
 8001ae8:	ec51 0b10 	vmov	r0, r1, d0
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <vTask_Go+0xb8>)
 8001aee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001af2:	f7fe fbe3 	bl	80002bc <__adddf3>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4913      	ldr	r1, [pc, #76]	; (8001b48 <vTask_Go+0xb8>)
 8001afc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		parameters_Path_Robot.goal_Position_y =  sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y;
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <vTask_Go+0xb4>)
 8001b02:	ed93 7b04 	vldr	d7, [r3, #16]
 8001b06:	eeb0 0a47 	vmov.f32	s0, s14
 8001b0a:	eef0 0a67 	vmov.f32	s1, s15
 8001b0e:	f00f f82b 	bl	8010b68 <sin>
 8001b12:	ec51 0b10 	vmov	r0, r1, d0
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <vTask_Go+0xb8>)
 8001b18:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001b1c:	f7fe fbce 	bl	80002bc <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4908      	ldr	r1, [pc, #32]	; (8001b48 <vTask_Go+0xb8>)
 8001b26:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		calculation_parameter_distance(&parameters_Path_Robot);
 8001b2a:	4807      	ldr	r0, [pc, #28]	; (8001b48 <vTask_Go+0xb8>)
 8001b2c:	f009 fe50 	bl	800b7d0 <calculation_parameter_distance>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <vTask_Go+0xac>)
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	4805      	ldr	r0, [pc, #20]	; (8001b4c <vTask_Go+0xbc>)
 8001b36:	f001 fe3b 	bl	80037b0 <On_motor_Straigh_Roll>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001b3a:	e7ad      	b.n	8001a98 <vTask_Go+0x8>
 8001b3c:	20000614 	.word	0x20000614
 8001b40:	20000554 	.word	0x20000554
 8001b44:	20000b68 	.word	0x20000b68
 8001b48:	20000648 	.word	0x20000648
 8001b4c:	20000440 	.word	0x20000440

08001b50 <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af06      	add	r7, sp, #24
 8001b56:	6078      	str	r0, [r7, #4]

	double angleToGo_Relative = 0;
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2000      	movs	r0, #0
 8001b72:	f004 fac9 	bl	8006108 <xTaskGenericNotifyWait>

		 switch (next_state) {
 8001b76:	4ba8      	ldr	r3, [pc, #672]	; (8001e18 <vTask_Control+0x2c8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	f200 8197 	bhi.w	8001eb0 <vTask_Control+0x360>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <vTask_Control+0x38>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001b9d 	.word	0x08001b9d
 8001b8c:	08001bd5 	.word	0x08001bd5
 8001b90:	08001eb1 	.word	0x08001eb1
 8001b94:	08001d13 	.word	0x08001d13
 8001b98:	08001d47 	.word	0x08001d47
			case sGo:{


				go(handler_Motor_Array,
 8001b9c:	4b9f      	ldr	r3, [pc, #636]	; (8001e1c <vTask_Control+0x2cc>)
 8001b9e:	ed93 7b00 	vldr	d7, [r3]
 8001ba2:	4b9f      	ldr	r3, [pc, #636]	; (8001e20 <vTask_Control+0x2d0>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001baa:	4b9e      	ldr	r3, [pc, #632]	; (8001e24 <vTask_Control+0x2d4>)
 8001bac:	9304      	str	r3, [sp, #16]
 8001bae:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <vTask_Control+0x2d8>)
 8001bb0:	9303      	str	r3, [sp, #12]
 8001bb2:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <vTask_Control+0x2dc>)
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	4b9e      	ldr	r3, [pc, #632]	; (8001e30 <vTask_Control+0x2e0>)
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	4b9e      	ldr	r3, [pc, #632]	; (8001e34 <vTask_Control+0x2e4>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc2:	eef0 0a67 	vmov.f32	s1, s15
 8001bc6:	4b9c      	ldr	r3, [pc, #624]	; (8001e38 <vTask_Control+0x2e8>)
 8001bc8:	4a9c      	ldr	r2, [pc, #624]	; (8001e3c <vTask_Control+0x2ec>)
 8001bca:	499d      	ldr	r1, [pc, #628]	; (8001e40 <vTask_Control+0x2f0>)
 8001bcc:	489d      	ldr	r0, [pc, #628]	; (8001e44 <vTask_Control+0x2f4>)
 8001bce:	f002 f9bb 	bl	8003f48 <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				break;
 8001bd2:	e18a      	b.n	8001eea <vTask_Control+0x39a>
			}case sGoTo:{




				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8001bd4:	4b99      	ldr	r3, [pc, #612]	; (8001e3c <vTask_Control+0x2ec>)
 8001bd6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001bda:	4b98      	ldr	r3, [pc, #608]	; (8001e3c <vTask_Control+0x2ec>)
 8001bdc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001be0:	eeb0 1a46 	vmov.f32	s2, s12
 8001be4:	eef0 1a66 	vmov.f32	s3, s13
 8001be8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bec:	eef0 0a67 	vmov.f32	s1, s15
 8001bf0:	4891      	ldr	r0, [pc, #580]	; (8001e38 <vTask_Control+0x2e8>)
 8001bf2:	f009 fee9 	bl	800b9c8 <distance_traveled>
 8001bf6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bfa:	eef0 7a60 	vmov.f32	s15, s1
 8001bfe:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <vTask_Control+0x2f8>)
 8001c00:	ed83 7b00 	vstr	d7, [r3]

				// Función de control del robot
				go(handler_Motor_Array,
 8001c04:	4b85      	ldr	r3, [pc, #532]	; (8001e1c <vTask_Control+0x2cc>)
 8001c06:	ed93 7b00 	vldr	d7, [r3]
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <vTask_Control+0x2d0>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001c12:	4b84      	ldr	r3, [pc, #528]	; (8001e24 <vTask_Control+0x2d4>)
 8001c14:	9304      	str	r3, [sp, #16]
 8001c16:	4b84      	ldr	r3, [pc, #528]	; (8001e28 <vTask_Control+0x2d8>)
 8001c18:	9303      	str	r3, [sp, #12]
 8001c1a:	4b84      	ldr	r3, [pc, #528]	; (8001e2c <vTask_Control+0x2dc>)
 8001c1c:	9302      	str	r3, [sp, #8]
 8001c1e:	4b84      	ldr	r3, [pc, #528]	; (8001e30 <vTask_Control+0x2e0>)
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	4b84      	ldr	r3, [pc, #528]	; (8001e34 <vTask_Control+0x2e4>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	eeb0 0a47 	vmov.f32	s0, s14
 8001c2a:	eef0 0a67 	vmov.f32	s1, s15
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <vTask_Control+0x2e8>)
 8001c30:	4a82      	ldr	r2, [pc, #520]	; (8001e3c <vTask_Control+0x2ec>)
 8001c32:	4983      	ldr	r1, [pc, #524]	; (8001e40 <vTask_Control+0x2f0>)
 8001c34:	4883      	ldr	r0, [pc, #524]	; (8001e44 <vTask_Control+0x2f4>)
 8001c36:	f002 f987 	bl	8003f48 <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				if (!flag_PrOp){
 8001c3a:	4b84      	ldr	r3, [pc, #528]	; (8001e4c <vTask_Control+0x2fc>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d12c      	bne.n	8001c9c <vTask_Control+0x14c>
					if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001c42:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <vTask_Control+0x2f8>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ff9c 	bl	8000b88 <__aeabi_d2iz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfb8      	it	lt
 8001c56:	425b      	neglt	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc7b 	bl	8000554 <__aeabi_i2d>
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <vTask_Control+0x2e8>)
 8001c60:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c64:	2401      	movs	r4, #1
 8001c66:	f7fe ff51 	bl	8000b0c <__aeabi_dcmplt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <vTask_Control+0x124>
 8001c70:	2300      	movs	r3, #0
 8001c72:	461c      	mov	r4, r3
 8001c74:	b2e3      	uxtb	r3, r4
 8001c76:	f083 0301 	eor.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8131 	beq.w	8001ee4 <vTask_Control+0x394>
						// Paramos el proceso
						end = SET;
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <vTask_Control+0x300>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001c88:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <vTask_Control+0x304>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	f004 fab7 	bl	8006208 <xTaskGenericNotify>
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
					}
				}


				break;
 8001c9a:	e123      	b.n	8001ee4 <vTask_Control+0x394>
					if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <vTask_Control+0x2f8>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe ff6f 	bl	8000b88 <__aeabi_d2iz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bfb8      	it	lt
 8001cb0:	425b      	neglt	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc4e 	bl	8000554 <__aeabi_i2d>
 8001cb8:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <vTask_Control+0x2e8>)
 8001cba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001cbe:	2401      	movs	r4, #1
 8001cc0:	f7fe ff24 	bl	8000b0c <__aeabi_dcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <vTask_Control+0x17e>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	461c      	mov	r4, r3
 8001cce:	b2e3      	uxtb	r3, r4
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8104 	beq.w	8001ee4 <vTask_Control+0x394>
						if (parameters_op_Robot.op_Mode == 1){ // Cambiamos el estado de nuevo a sSquare
 8001cdc:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <vTask_Control+0x308>)
 8001cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d103      	bne.n	8001cee <vTask_Control+0x19e>
							next_state = sSquare;
 8001ce6:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <vTask_Control+0x2c8>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <vTask_Control+0x1ae>
						}else if (parameters_op_Robot.op_Mode == 2){ // Cambiamos el estado de nuevo a sAstar para seguir procesando
 8001cee:	4b5a      	ldr	r3, [pc, #360]	; (8001e58 <vTask_Control+0x308>)
 8001cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d102      	bne.n	8001cfe <vTask_Control+0x1ae>
							next_state = sAstar;
 8001cf8:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <vTask_Control+0x2c8>)
 8001cfa:	2206      	movs	r2, #6
 8001cfc:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001cfe:	4b55      	ldr	r3, [pc, #340]	; (8001e54 <vTask_Control+0x304>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	f004 fa7c 	bl	8006208 <xTaskGenericNotify>
				break;
 8001d10:	e0e8      	b.n	8001ee4 <vTask_Control+0x394>
			}case sRoll:{


				// Si llegamos a este comando lo que se quiere es SOLO GIRAR en una cierta direccion
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001d12:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <vTask_Control+0x2cc>)
 8001d14:	ed93 7b00 	vldr	d7, [r3]
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <vTask_Control+0x2d0>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001d20:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <vTask_Control+0x30c>)
 8001d22:	9303      	str	r3, [sp, #12]
 8001d24:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <vTask_Control+0x2d8>)
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <vTask_Control+0x2dc>)
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <vTask_Control+0x2e0>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	eeb0 0a47 	vmov.f32	s0, s14
 8001d34:	eef0 0a67 	vmov.f32	s1, s15
 8001d38:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <vTask_Control+0x2e8>)
 8001d3a:	4a40      	ldr	r2, [pc, #256]	; (8001e3c <vTask_Control+0x2ec>)
 8001d3c:	4940      	ldr	r1, [pc, #256]	; (8001e40 <vTask_Control+0x2f0>)
 8001d3e:	4841      	ldr	r0, [pc, #260]	; (8001e44 <vTask_Control+0x2f4>)
 8001d40:	f002 f99c 	bl	800407c <NOP>
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);

				break;
 8001d44:	e0d1      	b.n	8001eea <vTask_Control+0x39a>


				// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <vTask_Control+0x2ec>)
 8001d48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d4c:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <vTask_Control+0x310>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f7fe fab1 	bl	80002b8 <__aeabi_dsub>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe ff13 	bl	8000b88 <__aeabi_d2iz>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bfb8      	it	lt
 8001d68:	425b      	neglt	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbf2 	bl	8000554 <__aeabi_i2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <vTask_Control+0x2cc>)
 8001d7a:	ed93 7b00 	vldr	d7, [r3]
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <vTask_Control+0x2d0>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <vTask_Control+0x30c>)
 8001d88:	9303      	str	r3, [sp, #12]
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <vTask_Control+0x2d8>)
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <vTask_Control+0x2dc>)
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <vTask_Control+0x2e0>)
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	eeb0 0a47 	vmov.f32	s0, s14
 8001d9a:	eef0 0a67 	vmov.f32	s1, s15
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <vTask_Control+0x2e8>)
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <vTask_Control+0x2ec>)
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <vTask_Control+0x2f0>)
 8001da4:	4827      	ldr	r0, [pc, #156]	; (8001e44 <vTask_Control+0x2f4>)
 8001da6:	f002 f969 	bl	800407c <NOP>
					data,
					Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <vTask_Control+0x2e8>)
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbd0 	bl	8000554 <__aeabi_i2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	2101      	movs	r1, #1
 8001dba:	460c      	mov	r4, r1
 8001dbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dc0:	f7fe fea4 	bl	8000b0c <__aeabi_dcmplt>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <vTask_Control+0x27e>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	461c      	mov	r4, r3
 8001dce:	b2e3      	uxtb	r3, r4
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <vTask_Control+0x29e>
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <vTask_Control+0x314>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	bf0c      	ite	eq
 8001de2:	2301      	moveq	r3, #1
 8001de4:	2300      	movne	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <vTask_Control+0x314>)
 8001dec:	701a      	strb	r2, [r3, #0]

				// Paramos el robot
				if (Done){
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <vTask_Control+0x314>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d078      	beq.n	8001ee8 <vTask_Control+0x398>
					if (!flag_PrOp){
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <vTask_Control+0x2fc>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d134      	bne.n	8001e68 <vTask_Control+0x318>
						// Paramos el proceso
						end = SET;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <vTask_Control+0x300>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <vTask_Control+0x304>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	f004 f9f9 	bl	8006208 <xTaskGenericNotify>
 8001e16:	e041      	b.n	8001e9c <vTask_Control+0x34c>
 8001e18:	20000617 	.word	0x20000617
 8001e1c:	20000c10 	.word	0x20000c10
 8001e20:	20000614 	.word	0x20000614
 8001e24:	200005d4 	.word	0x200005d4
 8001e28:	2000061a 	.word	0x2000061a
 8001e2c:	20000619 	.word	0x20000619
 8001e30:	20000618 	.word	0x20000618
 8001e34:	2000062c 	.word	0x2000062c
 8001e38:	20000648 	.word	0x20000648
 8001e3c:	20000b68 	.word	0x20000b68
 8001e40:	20000430 	.word	0x20000430
 8001e44:	20000440 	.word	0x20000440
 8001e48:	20000c30 	.word	0x20000c30
 8001e4c:	2000061f 	.word	0x2000061f
 8001e50:	2000061d 	.word	0x2000061d
 8001e54:	2000023c 	.word	0x2000023c
 8001e58:	20000be8 	.word	0x20000be8
 8001e5c:	20000594 	.word	0x20000594
 8001e60:	20000c50 	.word	0x20000c50
 8001e64:	2000061b 	.word	0x2000061b
					}else{
						if (parameters_op_Robot.op_Mode == 1){ // Cambiamos el estado de nuevo a sSquare
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <vTask_Control+0x39c>)
 8001e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d103      	bne.n	8001e7a <vTask_Control+0x32a>
							next_state = sSquare;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <vTask_Control+0x3a0>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e007      	b.n	8001e8a <vTask_Control+0x33a>
						}else if (parameters_op_Robot.op_Mode == 2){ // Cambiamos el estado de nuevo a sAstar para seguir procesando
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <vTask_Control+0x39c>)
 8001e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d102      	bne.n	8001e8a <vTask_Control+0x33a>
							next_state = sAstar;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <vTask_Control+0x3a0>)
 8001e86:	2206      	movs	r2, #6
 8001e88:	701a      	strb	r2, [r3, #0]
						}
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <vTask_Control+0x3a4>)
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	f004 f9b6 	bl	8006208 <xTaskGenericNotify>
					}

					angleToGo_Relative = 0; // Reseteamos
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e9c7 2302 	strd	r2, r3, [r7, #8]
					Done = RESET; // Reseteamos la bandera
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <vTask_Control+0x3a8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001eae:	e01b      	b.n	8001ee8 <vTask_Control+0x398>
			}
			default:{
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <vTask_Control+0x3ac>)
 8001eb2:	ed93 7b00 	vldr	d7, [r3]
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <vTask_Control+0x3b0>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <vTask_Control+0x3b4>)
 8001ec0:	9303      	str	r3, [sp, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <vTask_Control+0x3b8>)
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <vTask_Control+0x3bc>)
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <vTask_Control+0x3c0>)
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed2:	eef0 0a67 	vmov.f32	s1, s15
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <vTask_Control+0x3c4>)
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <vTask_Control+0x3c8>)
 8001eda:	4910      	ldr	r1, [pc, #64]	; (8001f1c <vTask_Control+0x3cc>)
 8001edc:	4810      	ldr	r0, [pc, #64]	; (8001f20 <vTask_Control+0x3d0>)
 8001ede:	f002 f8cd 	bl	800407c <NOP>
					&flag_angulo,
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);
				break;}
 8001ee2:	e002      	b.n	8001eea <vTask_Control+0x39a>
				break;
 8001ee4:	bf00      	nop
 8001ee6:	e63d      	b.n	8001b64 <vTask_Control+0x14>
				break;
 8001ee8:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001eea:	e63b      	b.n	8001b64 <vTask_Control+0x14>
 8001eec:	20000be8 	.word	0x20000be8
 8001ef0:	20000617 	.word	0x20000617
 8001ef4:	2000023c 	.word	0x2000023c
 8001ef8:	2000061b 	.word	0x2000061b
 8001efc:	20000c10 	.word	0x20000c10
 8001f00:	20000614 	.word	0x20000614
 8001f04:	20000594 	.word	0x20000594
 8001f08:	2000061a 	.word	0x2000061a
 8001f0c:	20000619 	.word	0x20000619
 8001f10:	20000618 	.word	0x20000618
 8001f14:	20000648 	.word	0x20000648
 8001f18:	20000b68 	.word	0x20000b68
 8001f1c:	20000430 	.word	0x20000430
 8001f20:	20000440 	.word	0x20000440

08001f24 <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f004 f8e5 	bl	8006108 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <vTask_GoTo+0xec>)
 8001f40:	2202      	movs	r2, #2
 8001f42:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001f44:	4b33      	ldr	r3, [pc, #204]	; (8002014 <vTask_GoTo+0xf0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <vTask_GoTo+0xec>)
 8001f4c:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 8001f4e:	4b32      	ldr	r3, [pc, #200]	; (8002018 <vTask_GoTo+0xf4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe faee 	bl	8000534 <__aeabi_ui2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	492f      	ldr	r1, [pc, #188]	; (800201c <vTask_GoTo+0xf8>)
 8001f5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		resetParameters();
 8001f62:	f002 fba5 	bl	80046b0 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <vTask_GoTo+0xec>)
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	482d      	ldr	r0, [pc, #180]	; (8002020 <vTask_GoTo+0xfc>)
 8001f6c:	f001 fc20 	bl	80037b0 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <vTask_GoTo+0x100>)
 8001f72:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001f76:	4929      	ldr	r1, [pc, #164]	; (800201c <vTask_GoTo+0xf8>)
 8001f78:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <vTask_GoTo+0x100>)
 8001f7e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001f82:	4926      	ldr	r1, [pc, #152]	; (800201c <vTask_GoTo+0xf8>)
 8001f84:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <vTask_GoTo+0xf8>)
 8001f8a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <vTask_GoTo+0x100>)
 8001f90:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f94:	eeb0 0a47 	vmov.f32	s0, s14
 8001f98:	eef0 0a67 	vmov.f32	s1, s15
 8001f9c:	f00e fd48 	bl	8010a30 <cos>
 8001fa0:	ec53 2b10 	vmov	r2, r3, d0
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe fb3e 	bl	8000628 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <vTask_GoTo+0xf8>)
 8001fb6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001fba:	f7fe f97f 	bl	80002bc <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4916      	ldr	r1, [pc, #88]	; (800201c <vTask_GoTo+0xf8>)
 8001fc4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <vTask_GoTo+0xf8>)
 8001fca:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <vTask_GoTo+0x100>)
 8001fd0:	ed93 7b04 	vldr	d7, [r3, #16]
 8001fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd8:	eef0 0a67 	vmov.f32	s1, s15
 8001fdc:	f00e fdc4 	bl	8010b68 <sin>
 8001fe0:	ec53 2b10 	vmov	r2, r3, d0
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <vTask_GoTo+0xf8>)
 8001ff6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4906      	ldr	r1, [pc, #24]	; (800201c <vTask_GoTo+0xf8>)
 8002004:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <vTask_GoTo+0xf8>)
 800200a:	f009 fbe1 	bl	800b7d0 <calculation_parameter_distance>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800200e:	e78d      	b.n	8001f2c <vTask_GoTo+0x8>
 8002010:	20000614 	.word	0x20000614
 8002014:	20000554 	.word	0x20000554
 8002018:	20000558 	.word	0x20000558
 800201c:	20000648 	.word	0x20000648
 8002020:	20000440 	.word	0x20000440
 8002024:	20000b68 	.word	0x20000b68

08002028 <vTask_Roll>:

////////////////////////////////////////////////////////////////////////ROLL STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Roll( void * pvParameters ){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af02      	add	r7, sp, #8
 800202e:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002030:	f04f 33ff 	mov.w	r3, #4294967295
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2000      	movs	r0, #0
 800203e:	f004 f863 	bl	8006108 <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
		Mode_dir.Mode = Mode = Roll;
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <vTask_Roll+0x48>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <vTask_Roll+0x48>)
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <vTask_Roll+0x4c>)
 800204e:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <vTask_Roll+0x50>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <vTask_Roll+0x4c>)
 8002058:	705a      	strb	r2, [r3, #1]

		resetParameters();
 800205a:	f002 fb29 	bl	80046b0 <resetParameters>


		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <vTask_Roll+0x4c>)
 8002060:	6819      	ldr	r1, [r3, #0]
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <vTask_Roll+0x54>)
 8002064:	f001 fba4 	bl	80037b0 <On_motor_Straigh_Roll>

		Done = RESET; // Reseteamos la bandera
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <vTask_Roll+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800206e:	e7df      	b.n	8002030 <vTask_Roll+0x8>
 8002070:	20000616 	.word	0x20000616
 8002074:	20000614 	.word	0x20000614
 8002078:	20000554 	.word	0x20000554
 800207c:	20000440 	.word	0x20000440
 8002080:	2000061b 	.word	0x2000061b

08002084 <vTask_RollTo>:

////////////////////////////////////////////////////////////////////////ROLLTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_RollTo( void * pvParameters ){
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af02      	add	r7, sp, #8
 800208a:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f004 f835 	bl	8006108 <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
 		Mode_dir.Mode = Mode = Roll;
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <vTask_RollTo+0x58>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <vTask_RollTo+0x58>)
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <vTask_RollTo+0x5c>)
 80020aa:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <vTask_RollTo+0x60>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <vTask_RollTo+0x5c>)
 80020b4:	705a      	strb	r2, [r3, #1]

		// Almacenamos el angulo al que se quiere ir
		parameters_Path_Robot.angle = sparam;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <vTask_RollTo+0x64>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <vTask_RollTo+0x68>)
 80020be:	649a      	str	r2, [r3, #72]	; 0x48

		angle_start = parameters_Pos_Robot.grad_global; // seteamos el angulo actual global
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <vTask_RollTo+0x6c>)
 80020c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020c6:	490b      	ldr	r1, [pc, #44]	; (80020f4 <vTask_RollTo+0x70>)
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]

		resetParameters();
 80020cc:	f002 faf0 	bl	80046b0 <resetParameters>

		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <vTask_RollTo+0x5c>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	4808      	ldr	r0, [pc, #32]	; (80020f8 <vTask_RollTo+0x74>)
 80020d6:	f001 fb6b 	bl	80037b0 <On_motor_Straigh_Roll>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80020da:	e7d7      	b.n	800208c <vTask_RollTo+0x8>
 80020dc:	20000616 	.word	0x20000616
 80020e0:	20000614 	.word	0x20000614
 80020e4:	20000554 	.word	0x20000554
 80020e8:	20000558 	.word	0x20000558
 80020ec:	20000648 	.word	0x20000648
 80020f0:	20000b68 	.word	0x20000b68
 80020f4:	20000c50 	.word	0x20000c50
 80020f8:	20000440 	.word	0x20000440

080020fc <vTask_Square>:


////////////////////////////////////////////////////////////////////////SQUARE STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Square( void * pvParameters ){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	2300      	movs	r3, #0
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2000      	movs	r0, #0
 8002112:	f003 fff9 	bl	8006108 <xTaskGenericNotifyWait>

		square_dir  = fparam; // Direccion del cuadrado
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <vTask_Square+0x58>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <vTask_Square+0x5c>)
 800211e:	701a      	strb	r2, [r3, #0]
		square_side = sparam; // lado del cuadrado en cm
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <vTask_Square+0x60>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa05 	bl	8000534 <__aeabi_ui2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	490c      	ldr	r1, [pc, #48]	; (8002160 <vTask_Square+0x64>)
 8002130:	e9c1 2300 	strd	r2, r3, [r1]
		parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <vTask_Square+0x68>)
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2020 	strb.w	r2, [r3, #32]
		resetParameters();
 800213c:	f002 fab8 	bl	80046b0 <resetParameters>

		xTaskNotify(xHandleTask_CrOp,0,eNoAction);
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <vTask_Square+0x6c>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	2300      	movs	r3, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	f004 f85b 	bl	8006208 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002152:	e7d7      	b.n	8002104 <vTask_Square+0x8>
 8002154:	20000554 	.word	0x20000554
 8002158:	20000c38 	.word	0x20000c38
 800215c:	20000558 	.word	0x20000558
 8002160:	20000c40 	.word	0x20000c40
 8002164:	20000be8 	.word	0x20000be8
 8002168:	20000264 	.word	0x20000264

0800216c <vTask_Astar>:


////////////////////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Astar( void * pvParameters ){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af02      	add	r7, sp, #8
 8002172:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	2000      	movs	r0, #0
 8002182:	f003 ffc1 	bl	8006108 <xTaskGenericNotifyWait>

		//////////////////////////////////////////////  ASTAR - Algoritm setup//////////////////////////////////////////////////////////

		// Solo necesitamos definir las distancias paralela y diagonal de la malla
		handlerAstarParameters.parallelDistance  = fparam;
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <vTask_Astar+0x80>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <vTask_Astar+0x84>)
 8002194:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = sparam;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <vTask_Astar+0x88>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <vTask_Astar+0x84>)
 80021a6:	edc3 7a01 	vstr	s15, [r3, #4]

		flag_Astar = SET;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <vTask_Astar+0x8c>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]

		resetParameters();
 80021b0:	f002 fa7e 	bl	80046b0 <resetParameters>

		writeMsg(&handlerUSART, msg_InsertGrid);
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <vTask_Astar+0x90>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4811      	ldr	r0, [pc, #68]	; (8002200 <vTask_Astar+0x94>)
 80021bc:	f00b f9d2 	bl	800d564 <writeMsg>

		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 80021c0:	4910      	ldr	r1, [pc, #64]	; (8002204 <vTask_Astar+0x98>)
 80021c2:	480f      	ldr	r0, [pc, #60]	; (8002200 <vTask_Astar+0x94>)
 80021c4:	f00b f9ce 	bl	800d564 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 80021c8:	490f      	ldr	r1, [pc, #60]	; (8002208 <vTask_Astar+0x9c>)
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <vTask_Astar+0x94>)
 80021cc:	f00b f9ca 	bl	800d564 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 80021d0:	490e      	ldr	r1, [pc, #56]	; (800220c <vTask_Astar+0xa0>)
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <vTask_Astar+0x94>)
 80021d4:	f00b f9c6 	bl	800d564 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <vTask_Astar+0xa4>)
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <vTask_Astar+0x94>)
 80021dc:	f00b f9c2 	bl	800d564 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 80021e0:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <vTask_Astar+0xa8>)
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <vTask_Astar+0xac>)
 80021e4:	4806      	ldr	r0, [pc, #24]	; (8002200 <vTask_Astar+0x94>)
 80021e6:	f006 fe19 	bl	8008e1c <initSerialComunication>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80021ea:	e7c3      	b.n	8002174 <vTask_Astar+0x8>
 80021ec:	20000554 	.word	0x20000554
 80021f0:	200004d8 	.word	0x200004d8
 80021f4:	20000558 	.word	0x20000558
 80021f8:	2000061e 	.word	0x2000061e
 80021fc:	20000028 	.word	0x20000028
 8002200:	20000390 	.word	0x20000390
 8002204:	080137fc 	.word	0x080137fc
 8002208:	08013834 	.word	0x08013834
 800220c:	0801386c 	.word	0x0801386c
 8002210:	080138a4 	.word	0x080138a4
 8002214:	200002a8 	.word	0x200002a8
 8002218:	2000029c 	.word	0x2000029c

0800221c <vTask_Grid>:

	}

}

void vTask_Grid( void * pvParameters ){
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2000      	movs	r0, #0
 8002232:	f003 ff69 	bl	8006108 <xTaskGenericNotifyWait>

		 status = xQueueReceive(xQueue_InputData, &item ,0);
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <vTask_Grid+0x158>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f107 010b 	add.w	r1, r7, #11
 800223e:	2200      	movs	r2, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fe81 	bl	8004f48 <xQueueReceive>
 8002246:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d152      	bne.n	80022f4 <vTask_Grid+0xd8>

			if (item != '\0'){
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d04f      	beq.n	80022f4 <vTask_Grid+0xd8>

				if (item == 'z'){
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	2b7a      	cmp	r3, #122	; 0x7a
 8002258:	d117      	bne.n	800228a <vTask_Grid+0x6e>
					memset(stringMatrix, 0, sizeof(stringMatrix));
 800225a:	2231      	movs	r2, #49	; 0x31
 800225c:	2100      	movs	r1, #0
 800225e:	4846      	ldr	r0, [pc, #280]	; (8002378 <vTask_Grid+0x15c>)
 8002260:	f00b fd0e 	bl	800dc80 <memset>
					stringRow    = 0;
 8002264:	4b45      	ldr	r3, [pc, #276]	; (800237c <vTask_Grid+0x160>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 800226a:	4b45      	ldr	r3, [pc, #276]	; (8002380 <vTask_Grid+0x164>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n-------String Vaciado-----\n\r");
 8002270:	4944      	ldr	r1, [pc, #272]	; (8002384 <vTask_Grid+0x168>)
 8002272:	4845      	ldr	r0, [pc, #276]	; (8002388 <vTask_Grid+0x16c>)
 8002274:	f00b f976 	bl	800d564 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 8002278:	4b44      	ldr	r3, [pc, #272]	; (800238c <vTask_Grid+0x170>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4842      	ldr	r0, [pc, #264]	; (8002388 <vTask_Grid+0x16c>)
 8002280:	f00b f970 	bl	800d564 <writeMsg>
					item = '\0';
 8002284:	2300      	movs	r3, #0
 8002286:	72fb      	strb	r3, [r7, #11]
 8002288:	e034      	b.n	80022f4 <vTask_Grid+0xd8>
				}else if (item != '@'){
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	d026      	beq.n	80022de <vTask_Grid+0xc2>
						if (item != '\n'){
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	2b0a      	cmp	r3, #10
 8002294:	d017      	beq.n	80022c6 <vTask_Grid+0xaa>
							stringMatrix[stringRow][stringColumn] = item;
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <vTask_Grid+0x160>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <vTask_Grid+0x164>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461c      	mov	r4, r3
 80022a2:	7af8      	ldrb	r0, [r7, #11]
 80022a4:	4a34      	ldr	r2, [pc, #208]	; (8002378 <vTask_Grid+0x15c>)
 80022a6:	460b      	mov	r3, r1
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1a5b      	subs	r3, r3, r1
 80022ac:	4413      	add	r3, r2
 80022ae:	4423      	add	r3, r4
 80022b0:	4602      	mov	r2, r0
 80022b2:	701a      	strb	r2, [r3, #0]
							stringColumn++;
 80022b4:	4b32      	ldr	r3, [pc, #200]	; (8002380 <vTask_Grid+0x164>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <vTask_Grid+0x164>)
 80022be:	701a      	strb	r2, [r3, #0]
							item = '\0';
 80022c0:	2300      	movs	r3, #0
 80022c2:	72fb      	strb	r3, [r7, #11]
 80022c4:	e016      	b.n	80022f4 <vTask_Grid+0xd8>
						}else{
							stringRow++;
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <vTask_Grid+0x160>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <vTask_Grid+0x160>)
 80022d0:	701a      	strb	r2, [r3, #0]
							stringColumn = 0;
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <vTask_Grid+0x164>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
							item = '\0';
 80022d8:	2300      	movs	r3, #0
 80022da:	72fb      	strb	r3, [r7, #11]
 80022dc:	e00a      	b.n	80022f4 <vTask_Grid+0xd8>
						}
				}else{
					doneTransaction = SET;
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <vTask_Grid+0x174>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]

					flag_Astar = RESET;
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <vTask_Grid+0x178>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <vTask_Grid+0x164>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
					item = '\0';
 80022f0:	2300      	movs	r3, #0
 80022f2:	72fb      	strb	r3, [r7, #11]
				}
			}
		}

		// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
		if (doneTransaction){
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <vTask_Grid+0x174>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d093      	beq.n	8002224 <vTask_Grid+0x8>

			starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <vTask_Grid+0x17c>)
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <vTask_Grid+0x180>)
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <vTask_Grid+0x184>)
 8002306:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <vTask_Grid+0x188>)
 8002308:	4927      	ldr	r1, [pc, #156]	; (80023a8 <vTask_Grid+0x18c>)
 800230a:	481b      	ldr	r0, [pc, #108]	; (8002378 <vTask_Grid+0x15c>)
 800230c:	f005 f984 	bl	8007618 <findShorterWay>
 8002310:	4603      	mov	r3, r0
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <vTask_Grid+0x190>)
 8002316:	701a      	strb	r2, [r3, #0]

			if (starWorking){
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <vTask_Grid+0x190>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d022      	beq.n	8002366 <vTask_Grid+0x14a>
				// si se llego hasta aca es porque Astar si funciona correctamente

				memset(stringMatrix, 0, sizeof(stringMatrix));
 8002320:	2231      	movs	r2, #49	; 0x31
 8002322:	2100      	movs	r1, #0
 8002324:	4814      	ldr	r0, [pc, #80]	; (8002378 <vTask_Grid+0x15c>)
 8002326:	f00b fcab 	bl	800dc80 <memset>
				stringRow    = 0;
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <vTask_Grid+0x160>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <vTask_Grid+0x164>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 8002336:	491e      	ldr	r1, [pc, #120]	; (80023b0 <vTask_Grid+0x194>)
 8002338:	4813      	ldr	r0, [pc, #76]	; (8002388 <vTask_Grid+0x16c>)
 800233a:	f00b f913 	bl	800d564 <writeMsg>

				flag_Astar = RESET;
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <vTask_Grid+0x178>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <vTask_Grid+0x174>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
				parameters_op_Robot.op_Mode = 2; // SETEAMOS EN 2 PARA OPERACIONES DE ASTAR
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <vTask_Grid+0x198>)
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2020 	strb.w	r2, [r3, #32]
				xTaskNotify(xHandleTask_CrOp,0,eNoAction);
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <vTask_Grid+0x19c>)
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	f003 ff52 	bl	8006208 <xTaskGenericNotify>
 8002364:	e75e      	b.n	8002224 <vTask_Grid+0x8>

			}else{
				writeMsg(&handlerUSART, msg_NotWorking);
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <vTask_Grid+0x1a0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	4806      	ldr	r0, [pc, #24]	; (8002388 <vTask_Grid+0x16c>)
 800236e:	f00b f8f9 	bl	800d564 <writeMsg>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002372:	e757      	b.n	8002224 <vTask_Grid+0x8>
 8002374:	20000270 	.word	0x20000270
 8002378:	20000560 	.word	0x20000560
 800237c:	20000592 	.word	0x20000592
 8002380:	20000591 	.word	0x20000591
 8002384:	080138dc 	.word	0x080138dc
 8002388:	20000390 	.word	0x20000390
 800238c:	20000028 	.word	0x20000028
 8002390:	2000052c 	.word	0x2000052c
 8002394:	2000061e 	.word	0x2000061e
 8002398:	20013fb8 	.word	0x20013fb8
 800239c:	200004e4 	.word	0x200004e4
 80023a0:	200004d8 	.word	0x200004d8
 80023a4:	20013aec 	.word	0x20013aec
 80023a8:	20013f84 	.word	0x20013f84
 80023ac:	20000593 	.word	0x20000593
 80023b0:	080138fc 	.word	0x080138fc
 80023b4:	20000be8 	.word	0x20000be8
 80023b8:	20000264 	.word	0x20000264
 80023bc:	20000024 	.word	0x20000024

080023c0 <vTask_CrOp>:
	}// End of the while

}


void vTask_CrOp( void * pvParameters ){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f003 fe97 	bl	8006108 <xTaskGenericNotifyWait>

		// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
		switch (parameters_op_Robot.op_Mode) {
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <vTask_CrOp+0x94>)
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d002      	beq.n	80023ea <vTask_CrOp+0x2a>
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d01d      	beq.n	8002424 <vTask_CrOp+0x64>
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros

				break;

			}
			default:{break;}
 80023e8:	e033      	b.n	8002452 <vTask_CrOp+0x92>
				create_square_operations(square_side,
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <vTask_CrOp+0x98>)
 80023ec:	ed93 7b00 	vldr	d7, [r3]
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <vTask_CrOp+0x9c>)
 80023f2:	7818      	ldrb	r0, [r3, #0]
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <vTask_CrOp+0xa0>)
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <vTask_CrOp+0xa4>)
 80023fa:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <vTask_CrOp+0xa8>)
 80023fc:	491b      	ldr	r1, [pc, #108]	; (800246c <vTask_CrOp+0xac>)
 80023fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002402:	eef0 0a67 	vmov.f32	s1, s15
 8002406:	f002 f80f 	bl	8004428 <create_square_operations>
				counter_operation = 0;
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <vTask_CrOp+0xb0>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <vTask_CrOp+0xb4>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2300      	movs	r3, #0
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	f003 fef3 	bl	8006208 <xTaskGenericNotify>
				break;
 8002422:	e016      	b.n	8002452 <vTask_CrOp+0x92>
				create_Astar_operations(&handlerAstarParameters,
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <vTask_CrOp+0xa0>)
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <vTask_CrOp+0xa4>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <vTask_CrOp+0xa8>)
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <vTask_CrOp+0xac>)
 8002430:	4911      	ldr	r1, [pc, #68]	; (8002478 <vTask_CrOp+0xb8>)
 8002432:	4812      	ldr	r0, [pc, #72]	; (800247c <vTask_CrOp+0xbc>)
 8002434:	f006 fd5c 	bl	8008ef0 <create_Astar_operations>
				counter_operation = 0;
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <vTask_CrOp+0xb0>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <vTask_CrOp+0xb4>)
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	f003 fedc 	bl	8006208 <xTaskGenericNotify>
				break;
 8002450:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002452:	e7b9      	b.n	80023c8 <vTask_CrOp+0x8>
 8002454:	20000be8 	.word	0x20000be8
 8002458:	20000c40 	.word	0x20000c40
 800245c:	20000c38 	.word	0x20000c38
 8002460:	20000b68 	.word	0x20000b68
 8002464:	20000648 	.word	0x20000648
 8002468:	20000bb8 	.word	0x20000bb8
 800246c:	200006b8 	.word	0x200006b8
 8002470:	20000c48 	.word	0x20000c48
 8002474:	20000254 	.word	0x20000254
 8002478:	20013fb8 	.word	0x20013fb8
 800247c:	200004d8 	.word	0x200004d8

08002480 <vTask_PrOp>:

	}

}

void vTask_PrOp( void * pvParameters ){
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b096      	sub	sp, #88	; 0x58
 8002484:	af02      	add	r7, sp, #8
 8002486:	6078      	str	r0, [r7, #4]

	command_t cmd = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2244      	movs	r2, #68	; 0x44
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f00b fbf5 	bl	800dc80 <memset>

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esperar hasta que la notificacion salte
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2000      	movs	r0, #0
 80024a4:	f003 fe30 	bl	8006108 <xTaskGenericNotifyWait>

		// Esperamos 3 segundos
		delay_ms(3000);
 80024a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024ac:	f006 ffde 	bl	800946c <delay_ms>

		// Este caso representa la ejecución de las operaciones almacenadas en la lista de operaciones

		if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 80024b0:	4b8f      	ldr	r3, [pc, #572]	; (80026f0 <vTask_PrOp+0x270>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4a8f      	ldr	r2, [pc, #572]	; (80026f4 <vTask_PrOp+0x274>)
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	3370      	adds	r3, #112	; 0x70
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	f040 8087 	bne.w	80025da <vTask_PrOp+0x15a>

			// Creamos el comando para que haga la tarea respectiva a ir en linea recta

			parameters_Path_Robot.line_Distance =
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 80024cc:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <vTask_PrOp+0x270>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4a88      	ldr	r2, [pc, #544]	; (80026f4 <vTask_PrOp+0x274>)
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	3378      	adds	r3, #120	; 0x78
 80024e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <vTask_PrOp+0x278>)
 80024ea:	f7fe f89d 	bl	8000628 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	4b81      	ldr	r3, [pc, #516]	; (80026fc <vTask_PrOp+0x27c>)
 80024f8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80024fc:	f7fd fedc 	bl	80002b8 <__aeabi_dsub>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	ec43 2b17 	vmov	d7, r2, r3
 8002508:	ed9f 1b77 	vldr	d1, [pc, #476]	; 80026e8 <vTask_PrOp+0x268>
 800250c:	eeb0 0a47 	vmov.f32	s0, s14
 8002510:	eef0 0a67 	vmov.f32	s1, s15
 8002514:	f00e fbb6 	bl	8010c84 <pow>
 8002518:	ec55 4b10 	vmov	r4, r5, d0
						 pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination*10 - parameters_Pos_Robot.yg_position),2));
 800251c:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <vTask_PrOp+0x270>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <vTask_PrOp+0x274>)
 8002524:	460b      	mov	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	3380      	adds	r3, #128	; 0x80
 8002530:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <vTask_PrOp+0x278>)
 800253a:	f7fe f875 	bl	8000628 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <vTask_PrOp+0x27c>)
 8002548:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800254c:	f7fd feb4 	bl	80002b8 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	ec43 2b17 	vmov	d7, r2, r3
 8002558:	ed9f 1b63 	vldr	d1, [pc, #396]	; 80026e8 <vTask_PrOp+0x268>
 800255c:	eeb0 0a47 	vmov.f32	s0, s14
 8002560:	eef0 0a67 	vmov.f32	s1, s15
 8002564:	f00e fb8e 	bl	8010c84 <pow>
 8002568:	ec53 2b10 	vmov	r2, r3, d0
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fd fea4 	bl	80002bc <__adddf3>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	ec43 2b17 	vmov	d7, r2, r3
 800257c:	eeb0 0a47 	vmov.f32	s0, s14
 8002580:	eef0 0a67 	vmov.f32	s1, s15
 8002584:	f00e fbee 	bl	8010d64 <sqrt>
 8002588:	eeb0 7a40 	vmov.f32	s14, s0
 800258c:	eef0 7a60 	vmov.f32	s15, s1
			parameters_Path_Robot.line_Distance =
 8002590:	4b58      	ldr	r3, [pc, #352]	; (80026f4 <vTask_PrOp+0x274>)
 8002592:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40


			sprintf(cmd.payload, "sGoTo %u %u $" , 1 , abs(parameters_Path_Robot.line_Distance)); // Mandamos una direccion hacia adelante
 8002596:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <vTask_PrOp+0x274>)
 8002598:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe faf2 	bl	8000b88 <__aeabi_d2iz>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bfb8      	it	lt
 80025aa:	425b      	neglt	r3, r3
 80025ac:	f107 000c 	add.w	r0, r7, #12
 80025b0:	2201      	movs	r2, #1
 80025b2:	4953      	ldr	r1, [pc, #332]	; (8002700 <vTask_PrOp+0x280>)
 80025b4:	f00c f8c6 	bl	800e744 <siprintf>
			// y ademas la distancia a recorrer

			counter_operation++;
 80025b8:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <vTask_PrOp+0x270>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <vTask_PrOp+0x270>)
 80025c2:	701a      	strb	r2, [r3, #0]

			// Aplicamos la operacion llamando a la tarea respectiva que realiza el asunto, notificamos a ir a


			xTaskNotify(xHandleTask_Commands,(uint32_t) &cmd, eSetValueWithOverwrite); //reiniciamos todos los parametros
 80025c4:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <vTask_PrOp+0x284>)
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	f107 020c 	add.w	r2, r7, #12
 80025cc:	2300      	movs	r3, #0
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2303      	movs	r3, #3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f003 fe18 	bl	8006208 <xTaskGenericNotify>
 80025d8:	e75d      	b.n	8002496 <vTask_PrOp+0x16>

			// fin de la operacion de linea recta

		}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 80025da:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <vTask_PrOp+0x270>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4a44      	ldr	r2, [pc, #272]	; (80026f4 <vTask_PrOp+0x274>)
 80025e2:	460b      	mov	r3, r1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	3370      	adds	r3, #112	; 0x70
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d15c      	bne.n	80026ae <vTask_PrOp+0x22e>
			// Creamos el comando para que haga la tarea para que gire un cierto ángulo

			// metemos el angulo a rotar, ya sea positivo o negativo

			if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 80025f4:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <vTask_PrOp+0x270>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4619      	mov	r1, r3
 80025fa:	4a3e      	ldr	r2, [pc, #248]	; (80026f4 <vTask_PrOp+0x274>)
 80025fc:	460b      	mov	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	3388      	adds	r3, #136	; 0x88
 8002608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f7fe fa7a 	bl	8000b0c <__aeabi_dcmplt>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01b      	beq.n	8002656 <vTask_PrOp+0x1d6>
				sprintf(cmd.payload,
						"sRollto %u %u $" ,
						1 , // CCW
						abs(parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative) - 6);
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <vTask_PrOp+0x270>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4a33      	ldr	r2, [pc, #204]	; (80026f4 <vTask_PrOp+0x274>)
 8002626:	460b      	mov	r3, r1
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	3388      	adds	r3, #136	; 0x88
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7fe faa5 	bl	8000b88 <__aeabi_d2iz>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	bfb8      	it	lt
 8002644:	425b      	neglt	r3, r3
				sprintf(cmd.payload,
 8002646:	3b06      	subs	r3, #6
 8002648:	f107 000c 	add.w	r0, r7, #12
 800264c:	2201      	movs	r2, #1
 800264e:	492e      	ldr	r1, [pc, #184]	; (8002708 <vTask_PrOp+0x288>)
 8002650:	f00c f878 	bl	800e744 <siprintf>
 8002654:	e01a      	b.n	800268c <vTask_PrOp+0x20c>
			}else{
				sprintf(cmd.payload,
						"sRollto %u %u $" ,
						0 , // CW
						abs(parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative) - 6);
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <vTask_PrOp+0x270>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <vTask_PrOp+0x274>)
 800265e:	460b      	mov	r3, r1
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	3388      	adds	r3, #136	; 0x88
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fa89 	bl	8000b88 <__aeabi_d2iz>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	bfb8      	it	lt
 800267c:	425b      	neglt	r3, r3
				sprintf(cmd.payload,
 800267e:	3b06      	subs	r3, #6
 8002680:	f107 000c 	add.w	r0, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	4920      	ldr	r1, [pc, #128]	; (8002708 <vTask_PrOp+0x288>)
 8002688:	f00c f85c 	bl	800e744 <siprintf>
			}


			xTaskNotify(xHandleTask_Commands,(uint32_t) &cmd, eSetValueWithOverwrite); //reiniciamos todos los parametros
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <vTask_PrOp+0x284>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f107 020c 	add.w	r2, r7, #12
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2303      	movs	r3, #3
 800269a:	2100      	movs	r1, #0
 800269c:	f003 fdb4 	bl	8006208 <xTaskGenericNotify>

			counter_operation++;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <vTask_PrOp+0x270>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <vTask_PrOp+0x270>)
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e6f3      	b.n	8002496 <vTask_PrOp+0x16>

		}else{// Al llegar aca es porque se acabaron las operaciones, la ultima operacion sera una operacion nula, lo que indica
			// cerrar el comando de Astar
			memset(parameters_Path_Robot.Operation_List,0, sizeof(parameters_Path_Robot.Operation_List));
 80026ae:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80026b2:	2100      	movs	r1, #0
 80026b4:	4815      	ldr	r0, [pc, #84]	; (800270c <vTask_PrOp+0x28c>)
 80026b6:	f00b fae3 	bl	800dc80 <memset>
			counter_operation = 0;
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <vTask_PrOp+0x270>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
			parameters_op_Robot.op_Mode = 0;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <vTask_PrOp+0x290>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2020 	strb.w	r2, [r3, #32]
			flag_PrOp = RESET; // Paramos el proceso de procesamiento de operaciones y volvemos a el estado normal del programa
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <vTask_PrOp+0x294>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
			end = SET; // Levantamos la bandera de finalizacion y nos vamos a el menu
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <vTask_PrOp+0x298>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]

			xTaskNotify(xHandleTask_Menu,0, eNoAction); //reiniciamos todos los parametros
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <vTask_PrOp+0x29c>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	f003 fd91 	bl	8006208 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esperar hasta que la notificacion salte
 80026e6:	e6d6      	b.n	8002496 <vTask_PrOp+0x16>
 80026e8:	00000000 	.word	0x00000000
 80026ec:	40000000 	.word	0x40000000
 80026f0:	20000c48 	.word	0x20000c48
 80026f4:	20000648 	.word	0x20000648
 80026f8:	40240000 	.word	0x40240000
 80026fc:	20000b68 	.word	0x20000b68
 8002700:	0801391c 	.word	0x0801391c
 8002704:	20000238 	.word	0x20000238
 8002708:	0801392c 	.word	0x0801392c
 800270c:	200006b8 	.word	0x200006b8
 8002710:	20000be8 	.word	0x20000be8
 8002714:	2000061f 	.word	0x2000061f
 8002718:	2000061d 	.word	0x2000061d
 800271c:	20000230 	.word	0x20000230

08002720 <vTask_Reinit>:

///////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Reinit( void * pvParameters ){
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af02      	add	r7, sp, #8
 8002726:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2300      	movs	r3, #0
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2000      	movs	r0, #0
 8002736:	f003 fce7 	bl	8006108 <xTaskGenericNotifyWait>

		 // en este comando reiniciamos las variables del sistema para volver a empezar desde un nuevo punto de referencia
		int_Config_Motor(handler_Motor_Array,
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <vTask_Reinit+0x58>)
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <vTask_Reinit+0x5c>)
 8002740:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <vTask_Reinit+0x60>)
 8002742:	4910      	ldr	r1, [pc, #64]	; (8002784 <vTask_Reinit+0x64>)
 8002744:	4810      	ldr	r0, [pc, #64]	; (8002788 <vTask_Reinit+0x68>)
 8002746:	f001 f943 	bl	80039d0 <int_Config_Motor>
						&parameters_Path_Robot,
						&parameter_PID_distace,
						&Mode_dir);


		if(parameters_op_Robot.op_Mode != 0){ // Modo Square o Astar funcionando
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <vTask_Reinit+0x6c>)
 800274c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <vTask_Reinit+0x4e>
 			// En esta opcion notificamos a la tarea de procesar el comando para ir procesando operacion por operación
			xTaskNotify(xHandleTask_PrOp,0, eNoAction);
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <vTask_Reinit+0x70>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	2300      	movs	r3, #0
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2300      	movs	r3, #0
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	f003 fd51 	bl	8006208 <xTaskGenericNotify>
			flag_PrOp = SET;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <vTask_Reinit+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e7dc      	b.n	8002728 <vTask_Reinit+0x8>
		}else{
			next_state = sMainMenu; // Cambiamos el estado de nuevo al estado principal
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <vTask_Reinit+0x78>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002774:	e7d8      	b.n	8002728 <vTask_Reinit+0x8>
 8002776:	bf00      	nop
 8002778:	20000614 	.word	0x20000614
 800277c:	2000062c 	.word	0x2000062c
 8002780:	20000648 	.word	0x20000648
 8002784:	20000b68 	.word	0x20000b68
 8002788:	20000440 	.word	0x20000440
 800278c:	20000be8 	.word	0x20000be8
 8002790:	20000268 	.word	0x20000268
 8002794:	2000061f 	.word	0x2000061f
 8002798:	20000617 	.word	0x20000617

0800279c <vTask_Print>:

}



void vTask_Print( void * pvParameters ){
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <vTask_Print+0x28>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f107 010c 	add.w	r1, r7, #12
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fbc9 	bl	8004f48 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <vTask_Print+0x2c>)
 80027bc:	f00a fed2 	bl	800d564 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80027c0:	e7f0      	b.n	80027a4 <vTask_Print+0x8>
 80027c2:	bf00      	nop
 80027c4:	2000026c 	.word	0x2000026c
 80027c8:	20000390 	.word	0x20000390

080027cc <process_command>:
   }
}



void process_command (command_t *cmd){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f83d 	bl	8002854 <extract_command>


	if (next_state == sMainMenu){
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <process_command+0x70>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <process_command+0x74>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	2303      	movs	r3, #3
 80027ee:	2100      	movs	r1, #0
 80027f0:	f003 fd0a 	bl	8006208 <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 80027f4:	e01d      	b.n	8002832 <process_command+0x66>
	}else if (!wrong_command && !flag_PrOp){
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <process_command+0x78>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d110      	bne.n	8002820 <process_command+0x54>
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <process_command+0x7c>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <process_command+0x54>
		end = SET;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <process_command+0x80>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <process_command+0x84>)
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	f003 fcf5 	bl	8006208 <xTaskGenericNotify>
}
 800281e:	e008      	b.n	8002832 <process_command+0x66>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <process_command+0x74>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2303      	movs	r3, #3
 800282c:	2100      	movs	r1, #0
 800282e:	f003 fceb 	bl	8006208 <xTaskGenericNotify>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000617 	.word	0x20000617
 8002840:	20000230 	.word	0x20000230
 8002844:	2000061c 	.word	0x2000061c
 8002848:	2000061f 	.word	0x2000061f
 800284c:	2000061d 	.word	0x2000061d
 8002850:	2000023c 	.word	0x2000023c

08002854 <extract_command>:


int extract_command (command_t *cmd){
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af04      	add	r7, sp, #16
 800285a:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

//	status = uxQueueMessagesWaiting(xQueue_InputData);

	if (wrong_command){
 8002860:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <extract_command+0x1c8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d010      	beq.n	800288a <extract_command+0x36>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f00b fa02 	bl	800dc80 <memset>
				xQueueReset(xQueue_InputData);
 800287c:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <extract_command+0x1cc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f002 f8ce 	bl	8004a24 <xQueueGenericReset>
 8002888:	e0c2      	b.n	8002a10 <extract_command+0x1bc>
	}else if (!wrong_command && !flag_PrOp ){
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <extract_command+0x1c8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8090 	bne.w	80029b4 <extract_command+0x160>
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <extract_command+0x1d0>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 808b 	bne.w	80029b4 <extract_command+0x160>

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 800289e:	4b60      	ldr	r3, [pc, #384]	; (8002a20 <extract_command+0x1cc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f107 010f 	add.w	r1, r7, #15
 80028a6:	2200      	movs	r2, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fb4d 	bl	8004f48 <xQueueReceive>
 80028ae:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d106      	bne.n	80028c4 <extract_command+0x70>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	75fa      	strb	r2, [r7, #23]
 80028bc:	461a      	mov	r2, r3
 80028be:	7bf9      	ldrb	r1, [r7, #15]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '$');
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b24      	cmp	r3, #36	; 0x24
 80028c8:	d1e9      	bne.n	800289e <extract_command+0x4a>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	2100      	movs	r1, #0
 80028d0:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//		sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 80028d2:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <extract_command+0x1d4>)
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <extract_command+0x1d8>)
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	4b55      	ldr	r3, [pc, #340]	; (8002a30 <extract_command+0x1dc>)
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <extract_command+0x1e0>)
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <extract_command+0x1e4>)
 80028e4:	4a55      	ldr	r2, [pc, #340]	; (8002a3c <extract_command+0x1e8>)
 80028e6:	4956      	ldr	r1, [pc, #344]	; (8002a40 <extract_command+0x1ec>)
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f001 fbf1 	bl	80040d0 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00b f9c3 	bl	800dc80 <memset>
		xQueueReset(xQueue_InputData);
 80028fa:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <extract_command+0x1cc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f002 f88f 	bl	8004a24 <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 8002906:	494f      	ldr	r1, [pc, #316]	; (8002a44 <extract_command+0x1f0>)
 8002908:	484d      	ldr	r0, [pc, #308]	; (8002a40 <extract_command+0x1ec>)
 800290a:	f7fd fc69 	bl	80001e0 <strcmp>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <extract_command+0xc8>
			cmd->functionType = 1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
 800291a:	e045      	b.n	80029a8 <extract_command+0x154>
		}else if (strcmp(data, "sGoTo") == 0){
 800291c:	494a      	ldr	r1, [pc, #296]	; (8002a48 <extract_command+0x1f4>)
 800291e:	4848      	ldr	r0, [pc, #288]	; (8002a40 <extract_command+0x1ec>)
 8002920:	f7fd fc5e 	bl	80001e0 <strcmp>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <extract_command+0xde>
			cmd->functionType = 2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
 8002930:	e03a      	b.n	80029a8 <extract_command+0x154>
		}else if (strcmp(data, "sRoll") == 0){
 8002932:	4946      	ldr	r1, [pc, #280]	; (8002a4c <extract_command+0x1f8>)
 8002934:	4842      	ldr	r0, [pc, #264]	; (8002a40 <extract_command+0x1ec>)
 8002936:	f7fd fc53 	bl	80001e0 <strcmp>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d103      	bne.n	8002948 <extract_command+0xf4>
			cmd->functionType = 3;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2203      	movs	r2, #3
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
 8002946:	e02f      	b.n	80029a8 <extract_command+0x154>
		}else if (strcmp(data, "sRollto") == 0){
 8002948:	4941      	ldr	r1, [pc, #260]	; (8002a50 <extract_command+0x1fc>)
 800294a:	483d      	ldr	r0, [pc, #244]	; (8002a40 <extract_command+0x1ec>)
 800294c:	f7fd fc48 	bl	80001e0 <strcmp>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <extract_command+0x10a>
			cmd->functionType = 4;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2204      	movs	r2, #4
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
 800295c:	e024      	b.n	80029a8 <extract_command+0x154>
		}else if (strcmp(data, "reinit") == 0){
 800295e:	493d      	ldr	r1, [pc, #244]	; (8002a54 <extract_command+0x200>)
 8002960:	4837      	ldr	r0, [pc, #220]	; (8002a40 <extract_command+0x1ec>)
 8002962:	f7fd fc3d 	bl	80001e0 <strcmp>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d103      	bne.n	8002974 <extract_command+0x120>
			cmd->functionType = 5;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2205      	movs	r2, #5
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
 8002972:	e019      	b.n	80029a8 <extract_command+0x154>
		}else if (strcmp(data, "sSquare") == 0){
 8002974:	4938      	ldr	r1, [pc, #224]	; (8002a58 <extract_command+0x204>)
 8002976:	4832      	ldr	r0, [pc, #200]	; (8002a40 <extract_command+0x1ec>)
 8002978:	f7fd fc32 	bl	80001e0 <strcmp>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <extract_command+0x136>
			cmd->functionType = 6;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2206      	movs	r2, #6
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
 8002988:	e00e      	b.n	80029a8 <extract_command+0x154>
		}else if (strcmp(data, "sAstar") == 0){
 800298a:	4934      	ldr	r1, [pc, #208]	; (8002a5c <extract_command+0x208>)
 800298c:	482c      	ldr	r0, [pc, #176]	; (8002a40 <extract_command+0x1ec>)
 800298e:	f7fd fc27 	bl	80001e0 <strcmp>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <extract_command+0x14c>
			cmd->functionType = 7;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2207      	movs	r2, #7
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
 800299e:	e003      	b.n	80029a8 <extract_command+0x154>
		}else{
			// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
			cmd->functionType = -1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f04f 32ff 	mov.w	r2, #4294967295
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
		}

		memset(data,0,sizeof(data)); // Limpiamos el data
 80029a8:	2240      	movs	r2, #64	; 0x40
 80029aa:	2100      	movs	r1, #0
 80029ac:	4824      	ldr	r0, [pc, #144]	; (8002a40 <extract_command+0x1ec>)
 80029ae:	f00b f967 	bl	800dc80 <memset>
 80029b2:	e02d      	b.n	8002a10 <extract_command+0x1bc>

	}else{
		// Si estamos aqui es porque la bandera de procesamiento de operaciones esta levantada, por lo que se quiere solo procesar
		// un comando desde el codigo, no desde terminal

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <extract_command+0x1d4>)
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <extract_command+0x1d8>)
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <extract_command+0x1dc>)
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <extract_command+0x1e0>)
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <extract_command+0x1e4>)
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <extract_command+0x1e8>)
 80029c8:	491d      	ldr	r1, [pc, #116]	; (8002a40 <extract_command+0x1ec>)
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f001 fb80 	bl	80040d0 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f00b f952 	bl	800dc80 <memset>

		// Solo nos interesan los estados de ir a y girar a
		if (strcmp(data, "sGoTo") == 0){
 80029dc:	491a      	ldr	r1, [pc, #104]	; (8002a48 <extract_command+0x1f4>)
 80029de:	4818      	ldr	r0, [pc, #96]	; (8002a40 <extract_command+0x1ec>)
 80029e0:	f7fd fbfe 	bl	80001e0 <strcmp>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <extract_command+0x19e>
			cmd->functionType = 2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
 80029f0:	e009      	b.n	8002a06 <extract_command+0x1b2>
		}else if (strcmp(data, "sRollto") == 0){
 80029f2:	4917      	ldr	r1, [pc, #92]	; (8002a50 <extract_command+0x1fc>)
 80029f4:	4812      	ldr	r0, [pc, #72]	; (8002a40 <extract_command+0x1ec>)
 80029f6:	f7fd fbf3 	bl	80001e0 <strcmp>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <extract_command+0x1b2>
			cmd->functionType = 4;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2204      	movs	r2, #4
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
		}

		memset(data,0,sizeof(data)); // Limpiamos el data
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	2100      	movs	r1, #0
 8002a0a:	480d      	ldr	r0, [pc, #52]	; (8002a40 <extract_command+0x1ec>)
 8002a0c:	f00b f938 	bl	800dc80 <memset>

	}
	return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2000061c 	.word	0x2000061c
 8002a20:	20000270 	.word	0x20000270
 8002a24:	2000061f 	.word	0x2000061f
 8002a28:	2000055c 	.word	0x2000055c
 8002a2c:	20000558 	.word	0x20000558
 8002a30:	20000554 	.word	0x20000554
 8002a34:	20000548 	.word	0x20000548
 8002a38:	2000053c 	.word	0x2000053c
 8002a3c:	20000530 	.word	0x20000530
 8002a40:	20000594 	.word	0x20000594
 8002a44:	0801393c 	.word	0x0801393c
 8002a48:	08013940 	.word	0x08013940
 8002a4c:	08013948 	.word	0x08013948
 8002a50:	08013950 	.word	0x08013950
 8002a54:	08013958 	.word	0x08013958
 8002a58:	08013960 	.word	0x08013960
 8002a5c:	08013968 	.word	0x08013968

08002a60 <callback_extInt1>:

//Interrupciones de Exti
void callback_extInt1(void){
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <callback_extInt1+0x24>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <callback_extInt1+0x28>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	791a      	ldrb	r2, [r3, #4]
 8002a72:	3201      	adds	r2, #1
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	711a      	strb	r2, [r3, #4]
	}
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000614 	.word	0x20000614
 8002a88:	20000440 	.word	0x20000440

08002a8c <callback_extInt3>:

void callback_extInt3(void){
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <callback_extInt3+0x24>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <callback_extInt3+0x28>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	791a      	ldrb	r2, [r3, #4]
 8002a9e:	3201      	adds	r2, #1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	711a      	strb	r2, [r3, #4]
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000614 	.word	0x20000614
 8002ab4:	20000440 	.word	0x20000440

08002ab8 <usart1Rx_Callback>:



//Interripcion USART2
void usart1Rx_Callback(void){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af02      	add	r7, sp, #8

	rxData = getRxData();
 8002abe:	f00a fd79 	bl	800d5b4 <getRxData>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002ac8:	701a      	strb	r2, [r3, #0]
//	writeChar(&handlerUSART, rxData);

	if (rxData == '\r' && !flag_Astar){
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b0d      	cmp	r3, #13
 8002ad0:	d106      	bne.n	8002ae0 <usart1Rx_Callback+0x28>
 8002ad2:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <usart1Rx_Callback+0xd8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <usart1Rx_Callback+0x28>
		wrong_command = SET;
 8002ada:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <usart1Rx_Callback+0xdc>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <usart1Rx_Callback+0xe0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f002 fcac 	bl	8005446 <xQueueIsQueueFullFromISR>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <usart1Rx_Callback+0xe4>)
 8002af2:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <usart1Rx_Callback+0xe4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d00b      	beq.n	8002b14 <usart1Rx_Callback+0x5c>

		if (rxData != '\r'){
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b0d      	cmp	r3, #13
 8002b02:	d019      	beq.n	8002b38 <usart1Rx_Callback+0x80>
			xQueueSendToBackFromISR(xQueue_InputData,
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <usart1Rx_Callback+0xe0>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	491f      	ldr	r1, [pc, #124]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b0e:	f002 f971 	bl	8004df4 <xQueueGenericSendFromISR>
 8002b12:	e011      	b.n	8002b38 <usart1Rx_Callback+0x80>
									NULL);
		}
	}else{


		if (rxData == '$'){
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b24      	cmp	r3, #36	; 0x24
 8002b1a:	d10d      	bne.n	8002b38 <usart1Rx_Callback+0x80>

			xQueueReceiveFromISR(xQueue_InputData,
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <usart1Rx_Callback+0xe0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	491a      	ldr	r1, [pc, #104]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 faef 	bl	8005108 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <usart1Rx_Callback+0xe0>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2200      	movs	r2, #0
 8002b32:	4916      	ldr	r1, [pc, #88]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b34:	f002 f95e 	bl	8004df4 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (!flag_Astar){
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <usart1Rx_Callback+0xd8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d113      	bne.n	8002b68 <usart1Rx_Callback+0xb0>
		if (rxData == '$' || rxData == '\r'){
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b24      	cmp	r3, #36	; 0x24
 8002b46:	d003      	beq.n	8002b50 <usart1Rx_Callback+0x98>
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b0d      	cmp	r3, #13
 8002b4e:	d116      	bne.n	8002b7e <usart1Rx_Callback+0xc6>
			// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
			xTaskNotifyFromISR(xHandleTask_Commands,
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <usart1Rx_Callback+0xe8>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	f003 fc31 	bl	80063c8 <xTaskGenericNotifyFromISR>
 8002b66:	e00a      	b.n	8002b7e <usart1Rx_Callback+0xc6>
							   NULL);
		//xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

		}
	}else{
		xTaskNotifyFromISR(xHandleTask_Grid,
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <usart1Rx_Callback+0xec>)
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2300      	movs	r3, #0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	f003 fc25 	bl	80063c8 <xTaskGenericNotifyFromISR>
						   0,
						   eNoAction,
						   NULL);
	}

	rxData = '\0';
 8002b7e:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <usart1Rx_Callback+0xd4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000052d 	.word	0x2000052d
 8002b90:	2000061e 	.word	0x2000061e
 8002b94:	2000061c 	.word	0x2000061c
 8002b98:	20000270 	.word	0x20000270
 8002b9c:	2000022c 	.word	0x2000022c
 8002ba0:	20000238 	.word	0x20000238
 8002ba4:	20000260 	.word	0x20000260

08002ba8 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <BasicTimer2_Callback+0x4c>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <BasicTimer2_Callback+0x50>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <BasicTimer2_Callback+0x54>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d803      	bhi.n	8002bca <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <BasicTimer2_Callback+0x58>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e005      	b.n	8002bd6 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <BasicTimer2_Callback+0x54>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <BasicTimer2_Callback+0x54>)
 8002bd4:	801a      	strh	r2, [r3, #0]

	// Solo cuando estemos en alguna operacion diferente a None, se despierta la tarea de control
	xTaskNotifyFromISR(xHandleTask_Control,
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <BasicTimer2_Callback+0x5c>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	f003 fbee 	bl	80063c8 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000618 	.word	0x20000618
 8002bf8:	2000002c 	.word	0x2000002c
 8002bfc:	20000624 	.word	0x20000624
 8002c00:	20000619 	.word	0x20000619
 8002c04:	20000244 	.word	0x20000244

08002c08 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8002c14:	23c8      	movs	r3, #200	; 0xc8
 8002c16:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d061      	beq.n	8002cf8 <calibracionGyros+0xf0>
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	dc70      	bgt.n	8002d1a <calibracionGyros+0x112>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <calibracionGyros+0x60>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d037      	beq.n	8002cb0 <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8002c40:	e06b      	b.n	8002d1a <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f008 fb48 	bl	800b2d8 <readGyro_X>
 8002c48:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c58:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002c5c:	7efb      	ldrb	r3, [r7, #27]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002c62:	2001      	movs	r0, #1
 8002c64:	f006 fc02 	bl	800946c <delay_ms>
			while (contador < numMedidas){
 8002c68:	7efb      	ldrb	r3, [r7, #27]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	8a7a      	ldrh	r2, [r7, #18]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d8e7      	bhi.n	8002c42 <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8002c72:	8a7b      	ldrh	r3, [r7, #18]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c84:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002c88:	e048      	b.n	8002d1c <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f008 fbac 	bl	800b3e8 <readGyro_Y>
 8002c90:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002c94:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002ca4:	7efb      	ldrb	r3, [r7, #27]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002caa:	2001      	movs	r0, #1
 8002cac:	f006 fbde 	bl	800946c <delay_ms>
			while (contador < numMedidas){
 8002cb0:	7efb      	ldrb	r3, [r7, #27]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8a7a      	ldrh	r2, [r7, #18]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d8e7      	bhi.n	8002c8a <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8002cba:	8a7b      	ldrh	r3, [r7, #18]
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ccc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002cd0:	e024      	b.n	8002d1c <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f008 fc10 	bl	800b4f8 <readGyro_Z>
 8002cd8:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002cdc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002cec:	7efb      	ldrb	r3, [r7, #27]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f006 fbba 	bl	800946c <delay_ms>
			while (contador < numMedidas){
 8002cf8:	7efb      	ldrb	r3, [r7, #27]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	8a7a      	ldrh	r2, [r7, #18]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d8e7      	bhi.n	8002cd2 <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8002d02:	8a7b      	ldrh	r3, [r7, #18]
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d14:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002d18:	e000      	b.n	8002d1c <calibracionGyros+0x114>
			break;
 8002d1a:	bf00      	nop
		}
	}


	return promedio;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	ee07 3a90 	vmov	s15, r3
}
 8002d22:	eeb0 0a67 	vmov.f32	s0, s15
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6178      	str	r0, [r7, #20]
 8002d34:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d38:	ed87 1b02 	vstr	d1, [r7, #8]
 8002d3c:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f008 fbda 	bl	800b4f8 <readGyro_Z>
 8002d44:	ee10 3a10 	vmov	r3, s0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc15 	bl	8000578 <__aeabi_f2d>
 8002d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d52:	f7fd fab1 	bl	80002b8 <__aeabi_dsub>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7fd ff5b 	bl	8000c18 <__aeabi_d2f>
 8002d62:	4603      	mov	r3, r0
 8002d64:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8002d66:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d6a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002d6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d72:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002dd8 <getAngle+0xac>
 8002d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d82:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8002d86:	69b8      	ldr	r0, [r7, #24]
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <getAngle+0xb0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbec 	bl	8000578 <__aeabi_f2d>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fa89 	bl	80002bc <__adddf3>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff31 	bl	8000c18 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <getAngle+0xb0>)
 8002dba:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <getAngle+0xb4>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <getAngle+0xb8>)
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <getAngle+0xb8>)
 8002dcc:	801a      	strh	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	447a0000 	.word	0x447a0000
 8002ddc:	20000c18 	.word	0x20000c18
 8002de0:	20000324 	.word	0x20000324
 8002de4:	20000622 	.word	0x20000622

08002de8 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	ed2d 8b02 	vpush	{d8}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8002df8:	793b      	ldrb	r3, [r7, #4]
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	f040 81d4 	bne.w	80031a8 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8002e00:	4bab      	ldr	r3, [pc, #684]	; (80030b0 <get_measuremets_parameters+0x2c8>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4bab      	ldr	r3, [pc, #684]	; (80030b4 <get_measuremets_parameters+0x2cc>)
 8002e08:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8002e0a:	4bab      	ldr	r3, [pc, #684]	; (80030b8 <get_measuremets_parameters+0x2d0>)
 8002e0c:	edd3 6a00 	vldr	s13, [r3]
 8002e10:	4baa      	ldr	r3, [pc, #680]	; (80030bc <get_measuremets_parameters+0x2d4>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e20:	4ba7      	ldr	r3, [pc, #668]	; (80030c0 <get_measuremets_parameters+0x2d8>)
 8002e22:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002e26:	4ba6      	ldr	r3, [pc, #664]	; (80030c0 <get_measuremets_parameters+0x2d8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fba4 	bl	8000578 <__aeabi_f2d>
 8002e30:	a39b      	add	r3, pc, #620	; (adr r3, 80030a0 <get_measuremets_parameters+0x2b8>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fbf7 	bl	8000628 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	4b9f      	ldr	r3, [pc, #636]	; (80030c4 <get_measuremets_parameters+0x2dc>)
 8002e48:	f7fd fd18 	bl	800087c <__aeabi_ddiv>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002e56:	4b98      	ldr	r3, [pc, #608]	; (80030b8 <get_measuremets_parameters+0x2d0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb8c 	bl	8000578 <__aeabi_f2d>
 8002e60:	a38f      	add	r3, pc, #572	; (adr r3, 80030a0 <get_measuremets_parameters+0x2b8>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fbdf 	bl	8000628 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	4b93      	ldr	r3, [pc, #588]	; (80030c4 <get_measuremets_parameters+0x2dc>)
 8002e78:	f7fd fd00 	bl	800087c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	ec43 2b17 	vmov	d7, r2, r3
 8002e84:	eeb0 0a47 	vmov.f32	s0, s14
 8002e88:	eef0 0a67 	vmov.f32	s1, s15
 8002e8c:	f00d fe6c 	bl	8010b68 <sin>
 8002e90:	eeb0 8a40 	vmov.f32	s16, s0
 8002e94:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002e98:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <get_measuremets_parameters+0x2d0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fb6b 	bl	8000578 <__aeabi_f2d>
 8002ea2:	a37f      	add	r3, pc, #508	; (adr r3, 80030a0 <get_measuremets_parameters+0x2b8>)
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f7fd fbbe 	bl	8000628 <__aeabi_dmul>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <get_measuremets_parameters+0x2dc>)
 8002eba:	f7fd fcdf 	bl	800087c <__aeabi_ddiv>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	ec43 2b17 	vmov	d7, r2, r3
 8002ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eca:	eef0 0a67 	vmov.f32	s1, s15
 8002ece:	f00d fdaf 	bl	8010a30 <cos>
 8002ed2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ed6:	eef0 7a60 	vmov.f32	s15, s1
 8002eda:	eeb0 1a47 	vmov.f32	s2, s14
 8002ede:	eef0 1a67 	vmov.f32	s3, s15
 8002ee2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ee6:	eef0 0a68 	vmov.f32	s1, s17
 8002eea:	f00d fec9 	bl	8010c80 <atan2>
 8002eee:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002ef2:	a36d      	add	r3, pc, #436	; (adr r3, 80030a8 <get_measuremets_parameters+0x2c0>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fb96 	bl	8000628 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f0a:	f7fd f9d7 	bl	80002bc <__adddf3>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f1e:	a360      	add	r3, pc, #384	; (adr r3, 80030a0 <get_measuremets_parameters+0x2b8>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fb80 	bl	8000628 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <get_measuremets_parameters+0x2dc>)
 8002f36:	f7fd fca1 	bl	800087c <__aeabi_ddiv>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	ec43 2b17 	vmov	d7, r2, r3
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	eef0 0a67 	vmov.f32	s1, s15
 8002f4a:	f00d fe0d 	bl	8010b68 <sin>
 8002f4e:	eeb0 8a40 	vmov.f32	s16, s0
 8002f52:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f5c:	a350      	add	r3, pc, #320	; (adr r3, 80030a0 <get_measuremets_parameters+0x2b8>)
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f7fd fb61 	bl	8000628 <__aeabi_dmul>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	4b54      	ldr	r3, [pc, #336]	; (80030c4 <get_measuremets_parameters+0x2dc>)
 8002f74:	f7fd fc82 	bl	800087c <__aeabi_ddiv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	ec43 2b17 	vmov	d7, r2, r3
 8002f80:	eeb0 0a47 	vmov.f32	s0, s14
 8002f84:	eef0 0a67 	vmov.f32	s1, s15
 8002f88:	f00d fd52 	bl	8010a30 <cos>
 8002f8c:	eeb0 7a40 	vmov.f32	s14, s0
 8002f90:	eef0 7a60 	vmov.f32	s15, s1
 8002f94:	eeb0 1a47 	vmov.f32	s2, s14
 8002f98:	eef0 1a67 	vmov.f32	s3, s15
 8002f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8002fa0:	eef0 0a68 	vmov.f32	s1, s17
 8002fa4:	f00d fe6c 	bl	8010c80 <atan2>
 8002fa8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fac:	eef0 7a60 	vmov.f32	s15, s1
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	ed93 7b02 	vldr	d7, [r3, #8]
 8002fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8002fc0:	eef0 0a67 	vmov.f32	s1, s15
 8002fc4:	f00d fdd0 	bl	8010b68 <sin>
 8002fc8:	eeb0 8a40 	vmov.f32	s16, s0
 8002fcc:	eef0 8a60 	vmov.f32	s17, s1
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	ed93 7b02 	vldr	d7, [r3, #8]
 8002fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fda:	eef0 0a67 	vmov.f32	s1, s15
 8002fde:	f00d fd27 	bl	8010a30 <cos>
 8002fe2:	eeb0 7a40 	vmov.f32	s14, s0
 8002fe6:	eef0 7a60 	vmov.f32	s15, s1
 8002fea:	eeb0 1a47 	vmov.f32	s2, s14
 8002fee:	eef0 1a67 	vmov.f32	s3, s15
 8002ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff6:	eef0 0a68 	vmov.f32	s1, s17
 8002ffa:	f00d fe41 	bl	8010c80 <atan2>
 8002ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8003002:	eef0 7a60 	vmov.f32	s15, s1
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 800300c:	797b      	ldrb	r3, [r7, #5]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d15e      	bne.n	80030d0 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	791b      	ldrb	r3, [r3, #4]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003020:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <get_measuremets_parameters+0x2e0>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3304      	adds	r3, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	791b      	ldrb	r3, [r3, #4]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <get_measuremets_parameters+0x2e4>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3304      	adds	r3, #4
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	edd3 6a03 	vldr	s13, [r3, #12]
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <get_measuremets_parameters+0x2cc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003072:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <get_measuremets_parameters+0x2cc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3304      	adds	r3, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003096:	edc3 7a02 	vstr	s15, [r3, #8]
 800309a:	e065      	b.n	8003168 <get_measuremets_parameters+0x380>
 800309c:	f3af 8000 	nop.w
 80030a0:	54442d18 	.word	0x54442d18
 80030a4:	400921fb 	.word	0x400921fb
 80030a8:	1a63c1f8 	.word	0x1a63c1f8
 80030ac:	404ca5dc 	.word	0x404ca5dc
 80030b0:	20000622 	.word	0x20000622
 80030b4:	20000628 	.word	0x20000628
 80030b8:	20000c18 	.word	0x20000c18
 80030bc:	20000624 	.word	0x20000624
 80030c0:	20000c1c 	.word	0x20000c1c
 80030c4:	40668000 	.word	0x40668000
 80030c8:	20000030 	.word	0x20000030
 80030cc:	20000034 	.word	0x20000034

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	791b      	ldrb	r3, [r3, #4]
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <get_measuremets_parameters+0x3a8>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	eef1 7a67 	vneg.f32	s15, s15
 80030f0:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3304      	adds	r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	791b      	ldrb	r3, [r3, #4]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <get_measuremets_parameters+0x3ac>)
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	eef1 7a67 	vneg.f32	s15, s15
 8003118:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	edd3 7a03 	vldr	s15, [r3, #12]
 8003124:	eef1 6a67 	vneg.f32	s13, s15
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <get_measuremets_parameters+0x3b0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800313c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3304      	adds	r3, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	edd3 7a03 	vldr	s15, [r3, #12]
 800314a:	eef1 6a67 	vneg.f32	s13, s15
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <get_measuremets_parameters+0x3b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3304      	adds	r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003164:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3304      	adds	r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <get_measuremets_parameters+0x3b4>)
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <get_measuremets_parameters+0x3b8>)
 8003184:	2200      	movs	r2, #0
 8003186:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <get_measuremets_parameters+0x3bc>)
 800318a:	2200      	movs	r2, #0
 800318c:	801a      	strh	r2, [r3, #0]
		time_accumulated = 0;

		//Reiniciamos el contador de acción
		counting_action  = 0;}

}
 800318e:	e2f0      	b.n	8003772 <get_measuremets_parameters+0x98a>
 8003190:	20000030 	.word	0x20000030
 8003194:	20000034 	.word	0x20000034
 8003198:	20000628 	.word	0x20000628
 800319c:	20000c18 	.word	0x20000c18
 80031a0:	20000622 	.word	0x20000622
 80031a4:	20000624 	.word	0x20000624
	else if(operation_mode_dir.Mode == Roll)
 80031a8:	793b      	ldrb	r3, [r7, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 81c8 	bne.w	8003540 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 80031b0:	4bad      	ldr	r3, [pc, #692]	; (8003468 <get_measuremets_parameters+0x680>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4bad      	ldr	r3, [pc, #692]	; (800346c <get_measuremets_parameters+0x684>)
 80031b8:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 80031ba:	4bad      	ldr	r3, [pc, #692]	; (8003470 <get_measuremets_parameters+0x688>)
 80031bc:	edd3 6a00 	vldr	s13, [r3]
 80031c0:	4bac      	ldr	r3, [pc, #688]	; (8003474 <get_measuremets_parameters+0x68c>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d0:	4ba9      	ldr	r3, [pc, #676]	; (8003478 <get_measuremets_parameters+0x690>)
 80031d2:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 80031d6:	4ba8      	ldr	r3, [pc, #672]	; (8003478 <get_measuremets_parameters+0x690>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd f9cc 	bl	8000578 <__aeabi_f2d>
 80031e0:	a39d      	add	r3, pc, #628	; (adr r3, 8003458 <get_measuremets_parameters+0x670>)
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f7fd fa1f 	bl	8000628 <__aeabi_dmul>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	4ba1      	ldr	r3, [pc, #644]	; (800347c <get_measuremets_parameters+0x694>)
 80031f8:	f7fd fb40 	bl	800087c <__aeabi_ddiv>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003206:	4b9a      	ldr	r3, [pc, #616]	; (8003470 <get_measuremets_parameters+0x688>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f9b4 	bl	8000578 <__aeabi_f2d>
 8003210:	a391      	add	r3, pc, #580	; (adr r3, 8003458 <get_measuremets_parameters+0x670>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd fa07 	bl	8000628 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	4b95      	ldr	r3, [pc, #596]	; (800347c <get_measuremets_parameters+0x694>)
 8003228:	f7fd fb28 	bl	800087c <__aeabi_ddiv>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	ec43 2b17 	vmov	d7, r2, r3
 8003234:	eeb0 0a47 	vmov.f32	s0, s14
 8003238:	eef0 0a67 	vmov.f32	s1, s15
 800323c:	f00d fc94 	bl	8010b68 <sin>
 8003240:	eeb0 8a40 	vmov.f32	s16, s0
 8003244:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003248:	4b89      	ldr	r3, [pc, #548]	; (8003470 <get_measuremets_parameters+0x688>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd f993 	bl	8000578 <__aeabi_f2d>
 8003252:	a381      	add	r3, pc, #516	; (adr r3, 8003458 <get_measuremets_parameters+0x670>)
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f7fd f9e6 	bl	8000628 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	4b84      	ldr	r3, [pc, #528]	; (800347c <get_measuremets_parameters+0x694>)
 800326a:	f7fd fb07 	bl	800087c <__aeabi_ddiv>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	ec43 2b17 	vmov	d7, r2, r3
 8003276:	eeb0 0a47 	vmov.f32	s0, s14
 800327a:	eef0 0a67 	vmov.f32	s1, s15
 800327e:	f00d fbd7 	bl	8010a30 <cos>
 8003282:	eeb0 7a40 	vmov.f32	s14, s0
 8003286:	eef0 7a60 	vmov.f32	s15, s1
 800328a:	eeb0 1a47 	vmov.f32	s2, s14
 800328e:	eef0 1a67 	vmov.f32	s3, s15
 8003292:	eeb0 0a48 	vmov.f32	s0, s16
 8003296:	eef0 0a68 	vmov.f32	s1, s17
 800329a:	f00d fcf1 	bl	8010c80 <atan2>
 800329e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80032a2:	a36f      	add	r3, pc, #444	; (adr r3, 8003460 <get_measuremets_parameters+0x678>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f9be 	bl	8000628 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032ba:	f7fc ffff 	bl	80002bc <__adddf3>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80032ce:	a362      	add	r3, pc, #392	; (adr r3, 8003458 <get_measuremets_parameters+0x670>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd f9a8 	bl	8000628 <__aeabi_dmul>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	4b65      	ldr	r3, [pc, #404]	; (800347c <get_measuremets_parameters+0x694>)
 80032e6:	f7fd fac9 	bl	800087c <__aeabi_ddiv>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	ec43 2b17 	vmov	d7, r2, r3
 80032f2:	eeb0 0a47 	vmov.f32	s0, s14
 80032f6:	eef0 0a67 	vmov.f32	s1, s15
 80032fa:	f00d fc35 	bl	8010b68 <sin>
 80032fe:	eeb0 8a40 	vmov.f32	s16, s0
 8003302:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800330c:	a352      	add	r3, pc, #328	; (adr r3, 8003458 <get_measuremets_parameters+0x670>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f989 	bl	8000628 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b56      	ldr	r3, [pc, #344]	; (800347c <get_measuremets_parameters+0x694>)
 8003324:	f7fd faaa 	bl	800087c <__aeabi_ddiv>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	ec43 2b17 	vmov	d7, r2, r3
 8003330:	eeb0 0a47 	vmov.f32	s0, s14
 8003334:	eef0 0a67 	vmov.f32	s1, s15
 8003338:	f00d fb7a 	bl	8010a30 <cos>
 800333c:	eeb0 7a40 	vmov.f32	s14, s0
 8003340:	eef0 7a60 	vmov.f32	s15, s1
 8003344:	eeb0 1a47 	vmov.f32	s2, s14
 8003348:	eef0 1a67 	vmov.f32	s3, s15
 800334c:	eeb0 0a48 	vmov.f32	s0, s16
 8003350:	eef0 0a68 	vmov.f32	s1, s17
 8003354:	f00d fc94 	bl	8010c80 <atan2>
 8003358:	eeb0 7a40 	vmov.f32	s14, s0
 800335c:	eef0 7a60 	vmov.f32	s15, s1
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	ed93 7b02 	vldr	d7, [r3, #8]
 800336c:	eeb0 0a47 	vmov.f32	s0, s14
 8003370:	eef0 0a67 	vmov.f32	s1, s15
 8003374:	f00d fbf8 	bl	8010b68 <sin>
 8003378:	eeb0 8a40 	vmov.f32	s16, s0
 800337c:	eef0 8a60 	vmov.f32	s17, s1
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	ed93 7b02 	vldr	d7, [r3, #8]
 8003386:	eeb0 0a47 	vmov.f32	s0, s14
 800338a:	eef0 0a67 	vmov.f32	s1, s15
 800338e:	f00d fb4f 	bl	8010a30 <cos>
 8003392:	eeb0 7a40 	vmov.f32	s14, s0
 8003396:	eef0 7a60 	vmov.f32	s15, s1
 800339a:	eeb0 1a47 	vmov.f32	s2, s14
 800339e:	eef0 1a67 	vmov.f32	s3, s15
 80033a2:	eeb0 0a48 	vmov.f32	s0, s16
 80033a6:	eef0 0a68 	vmov.f32	s1, s17
 80033aa:	f00d fc69 	bl	8010c80 <atan2>
 80033ae:	eeb0 7a40 	vmov.f32	s14, s0
 80033b2:	eef0 7a60 	vmov.f32	s15, s1
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 80033bc:	797b      	ldrb	r3, [r7, #5]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d162      	bne.n	8003488 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <get_measuremets_parameters+0x698>)
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3304      	adds	r3, #4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <get_measuremets_parameters+0x69c>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3304      	adds	r3, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	eef1 7a67 	vneg.f32	s15, s15
 8003406:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003412:	4b16      	ldr	r3, [pc, #88]	; (800346c <get_measuremets_parameters+0x684>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003426:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	edd3 7a03 	vldr	s15, [r3, #12]
 8003434:	eef1 6a67 	vneg.f32	s13, s15
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <get_measuremets_parameters+0x684>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3304      	adds	r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003452:	e061      	b.n	8003518 <get_measuremets_parameters+0x730>
 8003454:	f3af 8000 	nop.w
 8003458:	54442d18 	.word	0x54442d18
 800345c:	400921fb 	.word	0x400921fb
 8003460:	1a63c1f8 	.word	0x1a63c1f8
 8003464:	404ca5dc 	.word	0x404ca5dc
 8003468:	20000622 	.word	0x20000622
 800346c:	20000628 	.word	0x20000628
 8003470:	20000c18 	.word	0x20000c18
 8003474:	20000624 	.word	0x20000624
 8003478:	20000c1c 	.word	0x20000c1c
 800347c:	40668000 	.word	0x40668000
 8003480:	20000030 	.word	0x20000030
 8003484:	20000034 	.word	0x20000034
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	ee07 3a90 	vmov	s15, r3
 8003492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003496:	4bbe      	ldr	r3, [pc, #760]	; (8003790 <get_measuremets_parameters+0x9a8>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	eef1 7a67 	vneg.f32	s15, s15
 80034a8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3304      	adds	r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	791b      	ldrb	r3, [r3, #4]
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034bc:	4bb5      	ldr	r3, [pc, #724]	; (8003794 <get_measuremets_parameters+0x9ac>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3304      	adds	r3, #4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034cc:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80034d8:	eef1 6a67 	vneg.f32	s13, s15
 80034dc:	4bae      	ldr	r3, [pc, #696]	; (8003798 <get_measuremets_parameters+0x9b0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f0:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3304      	adds	r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	edd3 6a03 	vldr	s13, [r3, #12]
 80034fe:	4ba6      	ldr	r3, [pc, #664]	; (8003798 <get_measuremets_parameters+0x9b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3304      	adds	r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003514:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2200      	movs	r2, #0
 800351e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3304      	adds	r3, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800352a:	4b9c      	ldr	r3, [pc, #624]	; (800379c <get_measuremets_parameters+0x9b4>)
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8003532:	4b9b      	ldr	r3, [pc, #620]	; (80037a0 <get_measuremets_parameters+0x9b8>)
 8003534:	2200      	movs	r2, #0
 8003536:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8003538:	4b9a      	ldr	r3, [pc, #616]	; (80037a4 <get_measuremets_parameters+0x9bc>)
 800353a:	2200      	movs	r2, #0
 800353c:	801a      	strh	r2, [r3, #0]
}
 800353e:	e118      	b.n	8003772 <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 8003540:	4b97      	ldr	r3, [pc, #604]	; (80037a0 <get_measuremets_parameters+0x9b8>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b94      	ldr	r3, [pc, #592]	; (8003798 <get_measuremets_parameters+0x9b0>)
 8003548:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 800354a:	4b94      	ldr	r3, [pc, #592]	; (800379c <get_measuremets_parameters+0x9b4>)
 800354c:	edd3 6a00 	vldr	s13, [r3]
 8003550:	4b94      	ldr	r3, [pc, #592]	; (80037a4 <get_measuremets_parameters+0x9bc>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800355c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <get_measuremets_parameters+0x9c0>)
 8003562:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8003566:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <get_measuremets_parameters+0x9c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd f804 	bl	8000578 <__aeabi_f2d>
 8003570:	a383      	add	r3, pc, #524	; (adr r3, 8003780 <get_measuremets_parameters+0x998>)
 8003572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003576:	f7fd f857 	bl	8000628 <__aeabi_dmul>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	4b89      	ldr	r3, [pc, #548]	; (80037ac <get_measuremets_parameters+0x9c4>)
 8003588:	f7fd f978 	bl	800087c <__aeabi_ddiv>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003596:	4b81      	ldr	r3, [pc, #516]	; (800379c <get_measuremets_parameters+0x9b4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ffec 	bl	8000578 <__aeabi_f2d>
 80035a0:	a377      	add	r3, pc, #476	; (adr r3, 8003780 <get_measuremets_parameters+0x998>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fd f83f 	bl	8000628 <__aeabi_dmul>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	4b7d      	ldr	r3, [pc, #500]	; (80037ac <get_measuremets_parameters+0x9c4>)
 80035b8:	f7fd f960 	bl	800087c <__aeabi_ddiv>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	ec43 2b17 	vmov	d7, r2, r3
 80035c4:	eeb0 0a47 	vmov.f32	s0, s14
 80035c8:	eef0 0a67 	vmov.f32	s1, s15
 80035cc:	f00d facc 	bl	8010b68 <sin>
 80035d0:	eeb0 8a40 	vmov.f32	s16, s0
 80035d4:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80035d8:	4b70      	ldr	r3, [pc, #448]	; (800379c <get_measuremets_parameters+0x9b4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffcb 	bl	8000578 <__aeabi_f2d>
 80035e2:	a367      	add	r3, pc, #412	; (adr r3, 8003780 <get_measuremets_parameters+0x998>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fd f81e 	bl	8000628 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	4b6c      	ldr	r3, [pc, #432]	; (80037ac <get_measuremets_parameters+0x9c4>)
 80035fa:	f7fd f93f 	bl	800087c <__aeabi_ddiv>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	ec43 2b17 	vmov	d7, r2, r3
 8003606:	eeb0 0a47 	vmov.f32	s0, s14
 800360a:	eef0 0a67 	vmov.f32	s1, s15
 800360e:	f00d fa0f 	bl	8010a30 <cos>
 8003612:	eeb0 7a40 	vmov.f32	s14, s0
 8003616:	eef0 7a60 	vmov.f32	s15, s1
 800361a:	eeb0 1a47 	vmov.f32	s2, s14
 800361e:	eef0 1a67 	vmov.f32	s3, s15
 8003622:	eeb0 0a48 	vmov.f32	s0, s16
 8003626:	eef0 0a68 	vmov.f32	s1, s17
 800362a:	f00d fb29 	bl	8010c80 <atan2>
 800362e:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003632:	a355      	add	r3, pc, #340	; (adr r3, 8003788 <get_measuremets_parameters+0x9a0>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fc fff6 	bl	8000628 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800364a:	f7fc fe37 	bl	80002bc <__adddf3>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800365e:	a348      	add	r3, pc, #288	; (adr r3, 8003780 <get_measuremets_parameters+0x998>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ffe0 	bl	8000628 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <get_measuremets_parameters+0x9c4>)
 8003676:	f7fd f901 	bl	800087c <__aeabi_ddiv>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	ec43 2b17 	vmov	d7, r2, r3
 8003682:	eeb0 0a47 	vmov.f32	s0, s14
 8003686:	eef0 0a67 	vmov.f32	s1, s15
 800368a:	f00d fa6d 	bl	8010b68 <sin>
 800368e:	eeb0 8a40 	vmov.f32	s16, s0
 8003692:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800369c:	a338      	add	r3, pc, #224	; (adr r3, 8003780 <get_measuremets_parameters+0x998>)
 800369e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a2:	f7fc ffc1 	bl	8000628 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <get_measuremets_parameters+0x9c4>)
 80036b4:	f7fd f8e2 	bl	800087c <__aeabi_ddiv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	ec43 2b17 	vmov	d7, r2, r3
 80036c0:	eeb0 0a47 	vmov.f32	s0, s14
 80036c4:	eef0 0a67 	vmov.f32	s1, s15
 80036c8:	f00d f9b2 	bl	8010a30 <cos>
 80036cc:	eeb0 7a40 	vmov.f32	s14, s0
 80036d0:	eef0 7a60 	vmov.f32	s15, s1
 80036d4:	eeb0 1a47 	vmov.f32	s2, s14
 80036d8:	eef0 1a67 	vmov.f32	s3, s15
 80036dc:	eeb0 0a48 	vmov.f32	s0, s16
 80036e0:	eef0 0a68 	vmov.f32	s1, s17
 80036e4:	f00d facc 	bl	8010c80 <atan2>
 80036e8:	eeb0 7a40 	vmov.f32	s14, s0
 80036ec:	eef0 7a60 	vmov.f32	s15, s1
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80036fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003700:	eef0 0a67 	vmov.f32	s1, s15
 8003704:	f00d fa30 	bl	8010b68 <sin>
 8003708:	eeb0 8a40 	vmov.f32	s16, s0
 800370c:	eef0 8a60 	vmov.f32	s17, s1
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	ed93 7b02 	vldr	d7, [r3, #8]
 8003716:	eeb0 0a47 	vmov.f32	s0, s14
 800371a:	eef0 0a67 	vmov.f32	s1, s15
 800371e:	f00d f987 	bl	8010a30 <cos>
 8003722:	eeb0 7a40 	vmov.f32	s14, s0
 8003726:	eef0 7a60 	vmov.f32	s15, s1
 800372a:	eeb0 1a47 	vmov.f32	s2, s14
 800372e:	eef0 1a67 	vmov.f32	s3, s15
 8003732:	eeb0 0a48 	vmov.f32	s0, s16
 8003736:	eef0 0a68 	vmov.f32	s1, s17
 800373a:	f00d faa1 	bl	8010c80 <atan2>
 800373e:	eeb0 7a40 	vmov.f32	s14, s0
 8003742:	eef0 7a60 	vmov.f32	s15, s1
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3304      	adds	r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <get_measuremets_parameters+0x9b4>)
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <get_measuremets_parameters+0x9b8>)
 8003768:	2200      	movs	r2, #0
 800376a:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;}
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <get_measuremets_parameters+0x9bc>)
 800376e:	2200      	movs	r2, #0
 8003770:	801a      	strh	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	ecbd 8b02 	vpop	{d8}
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	54442d18 	.word	0x54442d18
 8003784:	400921fb 	.word	0x400921fb
 8003788:	1a63c1f8 	.word	0x1a63c1f8
 800378c:	404ca5dc 	.word	0x404ca5dc
 8003790:	20000030 	.word	0x20000030
 8003794:	20000034 	.word	0x20000034
 8003798:	20000628 	.word	0x20000628
 800379c:	20000c18 	.word	0x20000c18
 80037a0:	20000622 	.word	0x20000622
 80037a4:	20000624 	.word	0x20000624
 80037a8:	20000c1c 	.word	0x20000c1c
 80037ac:	40668000 	.word	0x40668000

080037b0 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 80037ba:	783b      	ldrb	r3, [r7, #0]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d120      	bne.n	8003802 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80037c0:	6839      	ldr	r1, [r7, #0]
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f844 	bl	8003850 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	4618      	mov	r0, r3
 80037d0:	f008 fb4e 	bl	800be70 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f007 fb8e 	bl	800aefe <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	4618      	mov	r0, r3
 80037ec:	f008 fb40 	bl	800be70 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f007 fb7f 	bl	800aefe <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8003800:	e022      	b.n	8003848 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 8003802:	783b      	ldrb	r3, [r7, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d11f      	bne.n	8003848 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f820 	bl	8003850 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fb2a 	bl	800be70 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f007 fb6a 	bl	800aefe <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	4618      	mov	r0, r3
 8003834:	f008 fb1c 	bl	800be70 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f007 fb5b 	bl	800aefe <GPIO_WritePin_Afopt>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 800385a:	783b      	ldrb	r3, [r7, #0]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d143      	bne.n	80038e8 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	7f1a      	ldrb	r2, [r3, #28]
 8003866:	787b      	ldrb	r3, [r7, #1]
 8003868:	429a      	cmp	r2, r3
 800386a:	d018      	beq.n	800389e <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	787a      	ldrb	r2, [r7, #1]
 8003872:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a1a      	ldr	r2, [r3, #32]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	7f1b      	ldrb	r3, [r3, #28]
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f007 fb36 	bl	800aefe <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	4618      	mov	r0, r3
 800389a:	f008 feb9 	bl	800c610 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	7f1a      	ldrb	r2, [r3, #28]
 80038a6:	787b      	ldrb	r3, [r7, #1]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d068      	beq.n	800397e <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	787a      	ldrb	r2, [r7, #1]
 80038b4:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	7f1b      	ldrb	r3, [r3, #28]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f007 fb13 	bl	800aefe <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	4618      	mov	r0, r3
 80038e2:	f008 fe95 	bl	800c610 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 80038e6:	e04a      	b.n	800397e <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 80038e8:	783b      	ldrb	r3, [r7, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d147      	bne.n	800397e <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	7f1a      	ldrb	r2, [r3, #28]
 80038f4:	787b      	ldrb	r3, [r7, #1]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11d      	bne.n	8003936 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 80038fa:	787b      	ldrb	r3, [r7, #1]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2da      	uxtb	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	7f1b      	ldrb	r3, [r3, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f007 faea 	bl	800aefe <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	4618      	mov	r0, r3
 8003932:	f008 fe6d 	bl	800c610 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	7f1a      	ldrb	r2, [r3, #28]
 800393e:	787b      	ldrb	r3, [r7, #1]
 8003940:	429a      	cmp	r2, r3
 8003942:	d01c      	beq.n	800397e <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	787a      	ldrb	r2, [r7, #1]
 800394c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	7f1b      	ldrb	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f007 fac7 	bl	800aefe <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	4618      	mov	r0, r3
 800397a:	f008 fe49 	bl	800c610 <PWMx_Toggle>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	4618      	mov	r0, r3
 8003996:	f008 fdfb 	bl	800c590 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f007 faab 	bl	800aefe <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	4618      	mov	r0, r3
 80039b2:	f008 fded 	bl	800c590 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f007 fa9c 	bl	800aefe <GPIO_WritePin_Afopt>


}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a8d      	ldr	r2, [pc, #564]	; (8003c18 <int_Config_Motor+0x248>)
 80039e2:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid = &parameter_PID_Motor1;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a8c      	ldr	r2, [pc, #560]	; (8003c1c <int_Config_Motor+0x24c>)
 80039ea:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a8b      	ldr	r2, [pc, #556]	; (8003c20 <int_Config_Motor+0x250>)
 80039f2:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8a      	ldr	r2, [pc, #552]	; (8003c24 <int_Config_Motor+0x254>)
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a89      	ldr	r2, [pc, #548]	; (8003c28 <int_Config_Motor+0x258>)
 8003a02:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a88      	ldr	r2, [pc, #544]	; (8003c2c <int_Config_Motor+0x25c>)
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <int_Config_Motor+0x260>)
 8003a44:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a76      	ldr	r2, [pc, #472]	; (8003c34 <int_Config_Motor+0x264>)
 8003a5a:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <int_Config_Motor+0x268>)
 8003a62:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid = &parameter_PID_Motor2;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3304      	adds	r3, #4
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a74      	ldr	r2, [pc, #464]	; (8003c3c <int_Config_Motor+0x26c>)
 8003a6c:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3304      	adds	r3, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <int_Config_Motor+0x250>)
 8003a76:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a70      	ldr	r2, [pc, #448]	; (8003c40 <int_Config_Motor+0x270>)
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3304      	adds	r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6e      	ldr	r2, [pc, #440]	; (8003c44 <int_Config_Motor+0x274>)
 8003a8a:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6d      	ldr	r2, [pc, #436]	; (8003c48 <int_Config_Motor+0x278>)
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a56      	ldr	r2, [pc, #344]	; (8003c30 <int_Config_Motor+0x260>)
 8003ad8:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3304      	adds	r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <int_Config_Motor+0x264>)
 8003af2:	619a      	str	r2, [r3, #24]

	//---------------PID del Angulo-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	60da      	str	r2, [r3, #12]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 0.8;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4a4d      	ldr	r2, [pc, #308]	; (8003c4c <int_Config_Motor+0x27c>)
 8003b18:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	4a4c      	ldr	r2, [pc, #304]	; (8003c50 <int_Config_Motor+0x280>)
 8003b1e:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 2.0;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b26:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	if (!flag_reinit){
 8003bb0:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <int_Config_Motor+0x284>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d123      	bne.n	8003c00 <int_Config_Motor+0x230>
		ptrPathHandler->angle = 0;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	649a      	str	r2, [r3, #72]	; 0x48
		ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPathHandler->line_Distance = 0;
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	}

	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = None;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
	flag_reinit = SET;
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <int_Config_Motor+0x284>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20000448 	.word	0x20000448
 8003c1c:	200004a0 	.word	0x200004a0
 8003c20:	41e00000 	.word	0x41e00000
 8003c24:	200002c0 	.word	0x200002c0
 8003c28:	200002d8 	.word	0x200002d8
 8003c2c:	20000350 	.word	0x20000350
 8003c30:	437a0000 	.word	0x437a0000
 8003c34:	42c80000 	.word	0x42c80000
 8003c38:	20000474 	.word	0x20000474
 8003c3c:	200004bc 	.word	0x200004bc
 8003c40:	200002b4 	.word	0x200002b4
 8003c44:	200002cc 	.word	0x200002cc
 8003c48:	20000370 	.word	0x20000370
 8003c4c:	3f4ccccd 	.word	0x3f4ccccd
 8003c50:	3dcccccd 	.word	0x3dcccccd
 8003c54:	20000620 	.word	0x20000620

08003c58 <PID_control>:

void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler,
				double angle_required){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6178      	str	r0, [r7, #20]
 8003c60:	6139      	str	r1, [r7, #16]
 8003c62:	60fa      	str	r2, [r7, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	ed87 0b00 	vstr	d0, [r7]

	//Conversion de tiempo
	float sampling_time = ((float)
			(
			handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period
 8003c6a:	4b7c      	ldr	r3, [pc, #496]	; (8003e5c <PID_control+0x204>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
			* timeAction_TIMER_Sampling)
 8003c6e:	4a7c      	ldr	r2, [pc, #496]	; (8003e60 <PID_control+0x208>)
 8003c70:	7812      	ldrb	r2, [r2, #0]
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
	float sampling_time = ((float)
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c7e:	eddf 6a79 	vldr	s13, [pc, #484]	; 8003e64 <PID_control+0x20c>
 8003c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c86:	edc7 7a07 	vstr	s15, [r7, #28]
			/ 1000); //[s]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8003c96:	eeb0 1a46 	vmov.f32	s2, s12
 8003c9a:	eef0 1a66 	vmov.f32	s3, s13
 8003c9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca2:	eef0 0a67 	vmov.f32	s1, s15
 8003ca6:	6938      	ldr	r0, [r7, #16]
 8003ca8:	f007 fe3a 	bl	800b920 <distance_to_straight_line>
 8003cac:	ec51 0b10 	vmov	r0, r1, d0
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <PID_control+0x210>)
 8003cb6:	f7fc fde1 	bl	800087c <__aeabi_ddiv>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc ffa9 	bl	8000c18 <__aeabi_d2f>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	61bb      	str	r3, [r7, #24]


	//Aplicacion del PID para el control de la distancia del robot al centro
//	PID_calc(ptrPIDHandler, sampling_time, angle_required, ptrPosHandler->grad_global);
	PID_calc(ptrPIDHandler, sampling_time, 0, distance_recta);
 8003cca:	ed97 1a06 	vldr	s2, [r7, #24]
 8003cce:	eddf 0a67 	vldr	s1, [pc, #412]	; 8003e6c <PID_control+0x214>
 8003cd2:	ed97 0a07 	vldr	s0, [r7, #28]
 8003cd6:	68b8      	ldr	r0, [r7, #8]
 8003cd8:	f000 f8d6 	bl	8003e88 <PID_calc>


	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint + ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	ed93 7a00 	vldr	s14, [r3]
 8003ce2:	4b63      	ldr	r3, [pc, #396]	; (8003e70 <PID_control+0x218>)
 8003ce4:	edd3 7a00 	vldr	s15, [r3]
 8003ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <PID_control+0x21c>)
 8003cee:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint - ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <PID_control+0x218>)
 8003cf4:	ed93 7a00 	vldr	s14, [r3]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d02:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <PID_control+0x220>)
 8003d04:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <PID_control+0x21c>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d1c:	eeb0 1a47 	vmov.f32	s2, s14
 8003d20:	eef0 0a67 	vmov.f32	s1, s15
 8003d24:	ed97 0a07 	vldr	s0, [r7, #28]
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 f8ad 	bl	8003e88 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3304      	adds	r3, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b50      	ldr	r3, [pc, #320]	; (8003e78 <PID_control+0x220>)
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d46:	eeb0 1a47 	vmov.f32	s2, s14
 8003d4a:	eef0 0a67 	vmov.f32	s1, s15
 8003d4e:	ed97 0a07 	vldr	s0, [r7, #28]
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 f898 	bl	8003e88 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d72:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3304      	adds	r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d96:	edc3 7a05 	vstr	s15, [r3, #20]


	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003da2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003e7c <PID_control+0x224>
 8003da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dae:	db04      	blt.n	8003dba <PID_control+0x162>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a32      	ldr	r2, [pc, #200]	; (8003e80 <PID_control+0x228>)
 8003db6:	615a      	str	r2, [r3, #20]
 8003db8:	e00e      	b.n	8003dd8 <PID_control+0x180>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003dc2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	d803      	bhi.n	8003dd8 <PID_control+0x180>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2b      	ldr	r2, [pc, #172]	; (8003e84 <PID_control+0x22c>)
 8003dd6:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	edd3 7a05 	vldr	s15, [r3, #20]
 8003de2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003e7c <PID_control+0x224>
 8003de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	db05      	blt.n	8003dfc <PID_control+0x1a4>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3304      	adds	r3, #4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <PID_control+0x228>)
 8003df8:	615a      	str	r2, [r3, #20]
 8003dfa:	e010      	b.n	8003e1e <PID_control+0x1c6>

	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e06:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	d804      	bhi.n	8003e1e <PID_control+0x1c6>

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3304      	adds	r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <PID_control+0x22c>)
 8003e1c:	615a      	str	r2, [r3, #20]
	}

	updateDuttyCycleAfOpt(ptrMotorhandler[0]->phandlerPWM, ptrMotorhandler[0]->configMotor.new_dutty);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e30:	4610      	mov	r0, r2
 8003e32:	f008 fb9d 	bl	800c570 <updateDuttyCycleAfOpt>
	updateDuttyCycleAfOpt(ptrMotorhandler[1]->phandlerPWM, ptrMotorhandler[1]->configMotor.new_dutty);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3304      	adds	r3, #4
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e48:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f008 fb8f 	bl	800c570 <updateDuttyCycleAfOpt>

}
 8003e52:	bf00      	nop
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000324 	.word	0x20000324
 8003e60:	2000002c 	.word	0x2000002c
 8003e64:	447a0000 	.word	0x447a0000
 8003e68:	408f4000 	.word	0x408f4000
 8003e6c:	00000000 	.word	0x00000000
 8003e70:	20000c20 	.word	0x20000c20
 8003e74:	20000c24 	.word	0x20000c24
 8003e78:	20000c28 	.word	0x20000c28
 8003e7c:	42700000 	.word	0x42700000
 8003e80:	42700000 	.word	0x42700000
 8003e84:	41b80000 	.word	0x41b80000

08003e88 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e94:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e98:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8003e9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ea0:	edd7 7a00 	vldr	s15, [r7]
 8003ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	ed93 7a05 	vldr	s14, [r3, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef0:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd * (ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	ed93 7a06 	vldr	s14, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f0a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f16:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8003f1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	60da      	str	r2, [r3, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	3724      	adds	r7, #36	; 0x24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6178      	str	r0, [r7, #20]
 8003f50:	6139      	str	r1, [r7, #16]
 8003f52:	60fa      	str	r2, [r7, #12]
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	ed97 1b00 	vldr	d1, [r7]
 8003f68:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8004078 <go+0x130>
 8003f6c:	6938      	ldr	r0, [r7, #16]
 8003f6e:	f7fe fedd 	bl	8002d2c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
//		*fcontrol = SET;

	}

	// Control
	if (*fcontrol){
 8003f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d063      	beq.n	8004048 <go+0x100>
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3304      	adds	r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f9e:	ee16 0a90 	vmov	r0, s13
 8003fa2:	f7fc fae9 	bl	8000578 <__aeabi_f2d>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	e9c7 2306 	strd	r2, r3, [r7, #24]


		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003fb4:	eeb0 0a47 	vmov.f32	s0, s14
 8003fb8:	eef0 0a67 	vmov.f32	s1, s15
 8003fbc:	f00c fd38 	bl	8010a30 <cos>
 8003fc0:	ec51 0b10 	vmov	r0, r1, d0
 8003fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc8:	f7fc fb2e 	bl	8000628 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	ed93 7b04 	vldr	d7, [r3, #16]
 8003fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8003fe0:	eef0 0a67 	vmov.f32	s1, s15
 8003fe4:	f00c fdc0 	bl	8010b68 <sin>
 8003fe8:	ec51 0b10 	vmov	r0, r1, d0
 8003fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff0:	f7fc fb1a 	bl	8000628 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	68f9      	ldr	r1, [r7, #12]
 8003ffa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800400a:	f7fc f957 	bl	80002bc <__adddf3>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004024:	f7fc f94a 	bl	80002bc <__adddf3>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler, 0);
 8004032:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8004070 <go+0x128>
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f7ff fe0b 	bl	8003c58 <PID_control>

		*fcontrol = RESET;
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]




	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <go+0x11e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8004050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	6978      	ldr	r0, [r7, #20]
 8004056:	f7fe fec7 	bl	8002de8 <get_measuremets_parameters>

		// bajamos la bandera
		*fMeasurements = RESET;
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
	}
}
 8004066:	bf00      	nop
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
	...

0800407c <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6178      	str	r0, [r7, #20]
 8004084:	6139      	str	r1, [r7, #16]
 8004086:	60fa      	str	r2, [r7, #12]
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	ed97 1b00 	vldr	d1, [r7]
 800409c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80040cc <NOP+0x50>
 80040a0:	6938      	ldr	r0, [r7, #16]
 80040a2:	f7fe fe43 	bl	8002d2c <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 80040b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	f7fe fe95 	bl	8002de8 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
	}

}
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00000000 	.word	0x00000000

080040d0 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 80040d0:	b5b0      	push	{r4, r5, r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]

	int counter = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 80040fa:	e00a      	b.n	8004112 <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	440a      	add	r2, r1
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	701a      	strb	r2, [r3, #0]

			counter++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b20      	cmp	r3, #32
 800411c:	d1ee      	bne.n	80040fc <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4413      	add	r3, r2
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4413      	add	r3, r2
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b24      	cmp	r3, #36	; 0x24
 8004138:	f000 8088 	beq.w	800424c <extract_info+0x17c>
			break;
		}

		count_f = counter;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8004140:	e00d      	b.n	800415e <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8004142:	7e3b      	ldrb	r3, [r7, #24]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	68f9      	ldr	r1, [r7, #12]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	701a      	strb	r2, [r3, #0]

			counter++;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	3301      	adds	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b20      	cmp	r3, #32
 8004168:	d1eb      	bne.n	8004142 <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	7e3b      	ldrb	r3, [r7, #24]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8004174:	7e3b      	ldrb	r3, [r7, #24]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	461a      	mov	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	3301      	adds	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b24      	cmp	r3, #36	; 0x24
 8004194:	d05c      	beq.n	8004250 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 800419a:	e00d      	b.n	80041b8 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	4413      	add	r3, r2
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]

			counter++;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3301      	adds	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d1eb      	bne.n	800419c <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	4413      	add	r3, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b24      	cmp	r3, #36	; 0x24
 80041ee:	d031      	beq.n	8004254 <extract_info+0x184>
			break;
		}

		count_t = counter;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 80041f4:	e00d      	b.n	8004212 <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 80041f6:	7dbb      	ldrb	r3, [r7, #22]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	4413      	add	r3, r2
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	440a      	add	r2, r1
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	701a      	strb	r2, [r3, #0]

			counter++;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b20      	cmp	r3, #32
 800421c:	d1eb      	bne.n	80041f6 <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	7dbb      	ldrb	r3, [r7, #22]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 8004228:	7dbb      	ldrb	r3, [r7, #22]
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	4413      	add	r3, r2
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '$'){
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b24      	cmp	r3, #36	; 0x24
 8004248:	d006      	beq.n	8004258 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 800424a:	e762      	b.n	8004112 <extract_info+0x42>
			break;
 800424c:	bf00      	nop
 800424e:	e004      	b.n	800425a <extract_info+0x18a>
			break;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <extract_info+0x18a>
			break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <extract_info+0x18a>
			break;
 8004258:	bf00      	nop
		}
	}

	counter = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 800425e:	7efb      	ldrb	r3, [r7, #27]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8004264:	2301      	movs	r3, #1
 8004266:	e0d6      	b.n	8004416 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8004268:	7efb      	ldrb	r3, [r7, #27]
 800426a:	3b01      	subs	r3, #1
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e03c      	b.n	80042ea <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8004270:	7efb      	ldrb	r3, [r7, #27]
 8004272:	3b01      	subs	r3, #1
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	bfb8      	it	lt
 800427c:	425b      	neglt	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	3b30      	subs	r3, #48	; 0x30
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc f963 	bl	8000554 <__aeabi_i2d>
 800428e:	4604      	mov	r4, r0
 8004290:	460d      	mov	r5, r1
 8004292:	69f8      	ldr	r0, [r7, #28]
 8004294:	f7fc f95e 	bl	8000554 <__aeabi_i2d>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	ec43 2b11 	vmov	d1, r2, r3
 80042a0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8004420 <extract_info+0x350>
 80042a4:	f00c fcee 	bl	8010c84 <pow>
 80042a8:	ec53 2b10 	vmov	r2, r3, d0
 80042ac:	4620      	mov	r0, r4
 80042ae:	4629      	mov	r1, r5
 80042b0:	f7fc f9ba 	bl	8000628 <__aeabi_dmul>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	461d      	mov	r5, r3
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f937 	bl	8000534 <__aeabi_ui2d>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4620      	mov	r0, r4
 80042cc:	4629      	mov	r1, r5
 80042ce:	f7fb fff5 	bl	80002bc <__adddf3>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fc fc7d 	bl	8000bd8 <__aeabi_d2uiz>
 80042de:	4602      	mov	r2, r0
 80042e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e2:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dabf      	bge.n	8004270 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 80042f0:	7ebb      	ldrb	r3, [r7, #26]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 80042f6:	2302      	movs	r3, #2
 80042f8:	e08d      	b.n	8004416 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 80042fa:	7ebb      	ldrb	r3, [r7, #26]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e03c      	b.n	800437c <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 8004302:	7ebb      	ldrb	r3, [r7, #26]
 8004304:	3b01      	subs	r3, #1
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bfb8      	it	lt
 800430e:	425b      	neglt	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	4413      	add	r3, r2
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	3b30      	subs	r3, #48	; 0x30
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc f91a 	bl	8000554 <__aeabi_i2d>
 8004320:	4604      	mov	r4, r0
 8004322:	460d      	mov	r5, r1
 8004324:	69f8      	ldr	r0, [r7, #28]
 8004326:	f7fc f915 	bl	8000554 <__aeabi_i2d>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	ec43 2b11 	vmov	d1, r2, r3
 8004332:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8004420 <extract_info+0x350>
 8004336:	f00c fca5 	bl	8010c84 <pow>
 800433a:	ec53 2b10 	vmov	r2, r3, d0
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fc f971 	bl	8000628 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4614      	mov	r4, r2
 800434c:	461d      	mov	r5, r3
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc f8ee 	bl	8000534 <__aeabi_ui2d>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fb ffac 	bl	80002bc <__adddf3>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc fc34 	bl	8000bd8 <__aeabi_d2uiz>
 8004370:	4602      	mov	r2, r0
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3b01      	subs	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	dabf      	bge.n	8004302 <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 8004382:	7e7b      	ldrb	r3, [r7, #25]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 8004388:	2303      	movs	r3, #3
 800438a:	e044      	b.n	8004416 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 800438c:	7e7b      	ldrb	r3, [r7, #25]
 800438e:	3b01      	subs	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e03c      	b.n	800440e <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 8004394:	7e7b      	ldrb	r3, [r7, #25]
 8004396:	3b01      	subs	r3, #1
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	bfb8      	it	lt
 80043a0:	425b      	neglt	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	3b30      	subs	r3, #48	; 0x30
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f8d1 	bl	8000554 <__aeabi_i2d>
 80043b2:	4604      	mov	r4, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	69f8      	ldr	r0, [r7, #28]
 80043b8:	f7fc f8cc 	bl	8000554 <__aeabi_i2d>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	ec43 2b11 	vmov	d1, r2, r3
 80043c4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004420 <extract_info+0x350>
 80043c8:	f00c fc5c 	bl	8010c84 <pow>
 80043cc:	ec53 2b10 	vmov	r2, r3, d0
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fc f928 	bl	8000628 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc f8a5 	bl	8000534 <__aeabi_ui2d>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fb ff63 	bl	80002bc <__adddf3>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7fc fbeb 	bl	8000bd8 <__aeabi_d2uiz>
 8004402:	4602      	mov	r2, r0
 8004404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004406:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3b01      	subs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	dabf      	bge.n	8004394 <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bdb0      	pop	{r4, r5, r7, pc}
 800441e:	bf00      	nop
 8004420:	00000000 	.word	0x00000000
 8004424:	40240000 	.word	0x40240000

08004428 <create_square_operations>:
void create_square_operations(double side,
							  uint8_t CW_CCW,
							  Parameters_Operation_t prtList[30],
							  Parameter_build_t *ptrbuild,
							  Parameters_Path_t *ptrPath,
							  Parameters_Position_t *ptrPos){
 8004428:	b5b0      	push	{r4, r5, r7, lr}
 800442a:	b09e      	sub	sp, #120	; 0x78
 800442c:	af00      	add	r7, sp, #0
 800442e:	ed87 0b06 	vstr	d0, [r7, #24]
 8004432:	6139      	str	r1, [r7, #16]
 8004434:	60fa      	str	r2, [r7, #12]
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double finishline_y = 0;
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9c1 2300 	strd	r2, r3, [r1]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 800446e:	68f9      	ldr	r1, [r7, #12]
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// Preguntamos si se quiere recorrer el cuadrado en CW o CCW, no importa donde este situado, comenzara en linea recta como primera operación

	if (CW_CCW == 1) // Se quiere ir en CW
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b01      	cmp	r3, #1
 800448c:	f040 8087 	bne.w	800459e <create_square_operations+0x176>
	{

		// calculo del vector unitario del robot

		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8004490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004494:	ed93 7b04 	vldr	d7, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3310      	adds	r3, #16
 800449c:	4618      	mov	r0, r3
 800449e:	eeb0 0a47 	vmov.f32	s0, s14
 80044a2:	eef0 0a67 	vmov.f32	s1, s15
 80044a6:	f007 fbc5 	bl	800bc34 <unitary_vector>

		double coordenadas_cuadrado[4][2] = {{side,0},
 80044aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80044be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
											 {side,-side},
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044d0:	607b      	str	r3, [r7, #4]
		double coordenadas_cuadrado[4][2] = {{side,0},
 80044d2:	ed97 7b00 	vldr	d7, [r7]
 80044d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
											 {0,-side},
 80044e6:	69bc      	ldr	r4, [r7, #24]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
		double coordenadas_cuadrado[4][2] = {{side,0},
 80044ee:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
											 {0,0}}; // Coordenadas (x,y) destino para hacer el cuadrado


		for (uint8_t i = 0 ; i < 4; i++){
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004510:	e02e      	b.n	8004570 <create_square_operations+0x148>

			// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir


			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 8004512:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	3370      	adds	r3, #112	; 0x70
 800451a:	f107 0208 	add.w	r2, r7, #8
 800451e:	4413      	add	r3, r2
 8004520:	3b58      	subs	r3, #88	; 0x58
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 800452a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	3370      	adds	r3, #112	; 0x70
 8004532:	f107 0208 	add.w	r2, r7, #8
 8004536:	4413      	add	r3, r2
 8004538:	3b50      	subs	r3, #80	; 0x50
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			ptrPath->goal_Position_x = finishline_x;
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004548:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004552:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8004556:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800455a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	6938      	ldr	r0, [r7, #16]
 8004562:	f007 f851 	bl	800b608 <build_Operation>
		for (uint8_t i = 0 ; i < 4; i++){
 8004566:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800456a:	3301      	adds	r3, #1
 800456c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004570:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004574:	2b03      	cmp	r3, #3
 8004576:	d9cc      	bls.n	8004512 <create_square_operations+0xea>

		}


		// Agregamos la operacion nula
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800457e:	ed9f 2b4a 	vldr	d2, [pc, #296]	; 80046a8 <create_square_operations+0x280>
 8004582:	ed9f 1b49 	vldr	d1, [pc, #292]	; 80046a8 <create_square_operations+0x280>
 8004586:	ed9f 0b48 	vldr	d0, [pc, #288]	; 80046a8 <create_square_operations+0x280>
 800458a:	2200      	movs	r2, #0
 800458c:	4619      	mov	r1, r3
 800458e:	6938      	ldr	r0, [r7, #16]
 8004590:	f007 f8da 	bl	800b748 <add_Operation>
		ptrbuild->number_operation = 0;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
		ptrbuild->number_operation = 0;

	}

}
 800459c:	e07d      	b.n	800469a <create_square_operations+0x272>
		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 800459e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a2:	ed93 7b04 	vldr	d7, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3310      	adds	r3, #16
 80045aa:	4618      	mov	r0, r3
 80045ac:	eeb0 0a47 	vmov.f32	s0, s14
 80045b0:	eef0 0a67 	vmov.f32	s1, s15
 80045b4:	f007 fb3e 	bl	800bc34 <unitary_vector>
		double coordenadas_cuadrado[4][2] = {{side,0},
 80045b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80045cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80045d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80045e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (uint8_t i = 0 ; i < 4 ; i++){
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800460e:	e02e      	b.n	800466e <create_square_operations+0x246>
			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 8004610:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	3370      	adds	r3, #112	; 0x70
 8004618:	f107 0208 	add.w	r2, r7, #8
 800461c:	4413      	add	r3, r2
 800461e:	3b58      	subs	r3, #88	; 0x58
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 8004628:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	3370      	adds	r3, #112	; 0x70
 8004630:	f107 0208 	add.w	r2, r7, #8
 8004634:	4413      	add	r3, r2
 8004636:	3b50      	subs	r3, #80	; 0x50
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			ptrPath->goal_Position_x = finishline_x;
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004646:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004650:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8004654:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004658:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f006 ffd2 	bl	800b608 <build_Operation>
		for (uint8_t i = 0 ; i < 4 ; i++){
 8004664:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004668:	3301      	adds	r3, #1
 800466a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800466e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004672:	2b03      	cmp	r3, #3
 8004674:	d9cc      	bls.n	8004610 <create_square_operations+0x1e8>
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 80046a8 <create_square_operations+0x280>
 8004680:	ed9f 1b09 	vldr	d1, [pc, #36]	; 80046a8 <create_square_operations+0x280>
 8004684:	ed9f 0b08 	vldr	d0, [pc, #32]	; 80046a8 <create_square_operations+0x280>
 8004688:	2200      	movs	r2, #0
 800468a:	4619      	mov	r1, r3
 800468c:	6938      	ldr	r0, [r7, #16]
 800468e:	f007 f85b 	bl	800b748 <add_Operation>
		ptrbuild->number_operation = 0;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 800469a:	bf00      	nop
 800469c:	3778      	adds	r7, #120	; 0x78
 800469e:	46bd      	mov	sp, r7
 80046a0:	bdb0      	pop	{r4, r5, r7, pc}
 80046a2:	bf00      	nop
 80046a4:	f3af 8000 	nop.w
	...

080046b0 <resetParameters>:


void resetParameters(void){
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
	fparam = 0;
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <resetParameters+0x20>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
	sparam = 0;
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <resetParameters+0x24>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
	tparam = 0;
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <resetParameters+0x28>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20000554 	.word	0x20000554
 80046d4:	20000558 	.word	0x20000558
 80046d8:	2000055c 	.word	0x2000055c

080046dc <led_state_callback>:

void led_state_callback (TimerHandle_t xTimer){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 80046e4:	4803      	ldr	r0, [pc, #12]	; (80046f4 <led_state_callback+0x18>)
 80046e6:	f006 fc56 	bl	800af96 <GPIOxTooglePin>

}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000278 	.word	0x20000278

080046f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <ITM_SendChar+0x48>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <ITM_SendChar+0x48>)
 8004708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <ITM_SendChar+0x4c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <ITM_SendChar+0x4c>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800471a:	bf00      	nop
 800471c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f8      	beq.n	800471c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800472a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	6013      	str	r3, [r2, #0]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000edfc 	.word	0xe000edfc
 8004744:	e0000e00 	.word	0xe0000e00

08004748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
	return 1;
 800474c:	2301      	movs	r3, #1
}
 800474e:	4618      	mov	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_kill>:

int _kill(int pid, int sig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004762:	f009 fa4d 	bl	800dc00 <__errno>
 8004766:	4603      	mov	r3, r0
 8004768:	2216      	movs	r2, #22
 800476a:	601a      	str	r2, [r3, #0]
	return -1;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_exit>:

void _exit (int status)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004780:	f04f 31ff 	mov.w	r1, #4294967295
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffe7 	bl	8004758 <_kill>
	while (1) {}		/* Make sure we hang here */
 800478a:	e7fe      	b.n	800478a <_exit+0x12>

0800478c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e00a      	b.n	80047b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800479e:	f3af 8000 	nop.w
 80047a2:	4601      	mov	r1, r0
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	60ba      	str	r2, [r7, #8]
 80047aa:	b2ca      	uxtb	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3301      	adds	r3, #1
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dbf0      	blt.n	800479e <_read+0x12>
	}

return len;
 80047bc:	687b      	ldr	r3, [r7, #4]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e009      	b.n	80047ec <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	60ba      	str	r2, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff89 	bl	80046f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dbf1      	blt.n	80047d8 <_write+0x12>
	}
	return len;
 80047f4:	687b      	ldr	r3, [r7, #4]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_close>:

int _close(int file)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
	return -1;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004826:	605a      	str	r2, [r3, #4]
	return 0;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_isatty>:

int _isatty(int file)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
	return 1;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	return 0;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004868:	480d      	ldr	r0, [pc, #52]	; (80048a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800486a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800486c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004870:	480c      	ldr	r0, [pc, #48]	; (80048a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004872:	490d      	ldr	r1, [pc, #52]	; (80048a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <LoopForever+0xe>)
  movs r3, #0
 8004876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004878:	e002      	b.n	8004880 <LoopCopyDataInit>

0800487a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800487a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800487c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800487e:	3304      	adds	r3, #4

08004880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004884:	d3f9      	bcc.n	800487a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004888:	4c0a      	ldr	r4, [pc, #40]	; (80048b4 <LoopForever+0x16>)
  movs r3, #0
 800488a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800488c:	e001      	b.n	8004892 <LoopFillZerobss>

0800488e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800488e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004890:	3204      	adds	r2, #4

08004892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004894:	d3fb      	bcc.n	800488e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004896:	f009 f9b9 	bl	800dc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800489a:	f7fc fa0d 	bl	8000cb8 <main>

0800489e <LoopForever>:

LoopForever:
    b LoopForever
 800489e:	e7fe      	b.n	800489e <LoopForever>
  ldr   r0, =_estack
 80048a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048a8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80048ac:	080140e0 	.word	0x080140e0
  ldr r2, =_sbss
 80048b0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80048b4:	20014088 	.word	0x20014088

080048b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048b8:	e7fe      	b.n	80048b8 <ADC_IRQHandler>

080048ba <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f103 0208 	add.w	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f103 0208 	add.w	r2, r3, #8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f103 0208 	add.w	r2, r3, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048ee:	bf00      	nop
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d103      	bne.n	800497c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e00c      	b.n	8004996 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3308      	adds	r3, #8
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e002      	b.n	800498a <vListInsert+0x2e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d2f6      	bcs.n	8004984 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6892      	ldr	r2, [r2, #8]
 80049e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6852      	ldr	r2, [r2, #4]
 80049ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d103      	bne.n	8004a02 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	1e5a      	subs	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xQueueGenericReset+0x2a>
        __asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60bb      	str	r3, [r7, #8]
    }
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004a4e:	f002 fac3 	bl	8006fd8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	68f9      	ldr	r1, [r7, #12]
 8004a82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	22ff      	movs	r2, #255	; 0xff
 8004a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	22ff      	movs	r2, #255	; 0xff
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d114      	bne.n	8004ace <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01a      	beq.n	8004ae2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3310      	adds	r3, #16
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f8f5 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <xQueueGenericReset+0xcc>)
 8004abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	e009      	b.n	8004ae2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fef1 	bl	80048ba <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff feec 	bl	80048ba <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004ae2:	f002 faa9 	bl	8007038 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004ae6:	2301      	movs	r3, #1
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	e000ed04 	.word	0xe000ed04

08004af4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08c      	sub	sp, #48	; 0x30
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueGenericCreate+0x2a>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	61bb      	str	r3, [r7, #24]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d006      	beq.n	8004b3c <xQueueGenericCreate+0x48>
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d101      	bne.n	8004b40 <xQueueGenericCreate+0x4c>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <xQueueGenericCreate+0x4e>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <xQueueGenericCreate+0x68>
        __asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
    }
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004b62:	d90a      	bls.n	8004b7a <xQueueGenericCreate+0x86>
        __asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	613b      	str	r3, [r7, #16]
    }
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	3350      	adds	r3, #80	; 0x50
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f002 fb4c 	bl	800721c <pvPortMalloc>
 8004b84:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3350      	adds	r3, #80	; 0x50
 8004b94:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b96:	79fa      	ldrb	r2, [r7, #7]
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f805 	bl	8004bb2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
    }
 8004baa:	4618      	mov	r0, r3
 8004bac:	3728      	adds	r7, #40	; 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e002      	b.n	8004bd4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004be0:	2101      	movs	r1, #1
 8004be2:	69b8      	ldr	r0, [r7, #24]
 8004be4:	f7ff ff1e 	bl	8004a24 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c06:	2300      	movs	r3, #0
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericSend+0x32>
        __asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <xQueueGenericSend+0x40>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <xQueueGenericSend+0x44>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <xQueueGenericSend+0x46>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <xQueueGenericSend+0x60>
        __asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d103      	bne.n	8004c66 <xQueueGenericSend+0x6e>
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <xQueueGenericSend+0x72>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <xQueueGenericSend+0x74>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueGenericSend+0x8e>
        __asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	623b      	str	r3, [r7, #32]
    }
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c86:	f001 f9a7 	bl	8005fd8 <xTaskGetSchedulerState>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <xQueueGenericSend+0x9e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSend+0xa2>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSend+0xa4>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericSend+0xbe>
        __asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	61fb      	str	r3, [r7, #28]
    }
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004cb6:	f002 f98f 	bl	8006fd8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <xQueueGenericSend+0xd4>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d129      	bne.n	8004d20 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd2:	f000 faa8 	bl	8005226 <prvCopyDataToQueue>
 8004cd6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d010      	beq.n	8004d02 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	3324      	adds	r3, #36	; 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 ffdb 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004cf0:	4b3f      	ldr	r3, [pc, #252]	; (8004df0 <xQueueGenericSend+0x1f8>)
 8004cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	e00a      	b.n	8004d18 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004d08:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <xQueueGenericSend+0x1f8>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004d18:	f002 f98e 	bl	8007038 <vPortExitCritical>
                return pdPASS;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e063      	b.n	8004de8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004d26:	f002 f987 	bl	8007038 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e05c      	b.n	8004de8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f813 	bl	8005d64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d42:	f002 f979 	bl	8007038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d46:	f000 fd9b 	bl	8005880 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d4a:	f002 f945 	bl	8006fd8 <vPortEnterCritical>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d103      	bne.n	8004d64 <xQueueGenericSend+0x16c>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d103      	bne.n	8004d7a <xQueueGenericSend+0x182>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7a:	f002 f95d 	bl	8007038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d7e:	1d3a      	adds	r2, r7, #4
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 f802 	bl	8005d90 <xTaskCheckForTimeOut>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d124      	bne.n	8004ddc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d94:	f000 fb3f 	bl	8005416 <prvIsQueueFull>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	3310      	adds	r3, #16
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 ff2a 	bl	8005c00 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dae:	f000 faca 	bl	8005346 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004db2:	f000 fd73 	bl	800589c <xTaskResumeAll>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f47f af7c 	bne.w	8004cb6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <xQueueGenericSend+0x1f8>)
 8004dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	e772      	b.n	8004cb6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd2:	f000 fab8 	bl	8005346 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004dd6:	f000 fd61 	bl	800589c <xTaskResumeAll>
 8004dda:	e76c      	b.n	8004cb6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dde:	f000 fab2 	bl	8005346 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004de2:	f000 fd5b 	bl	800589c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004de6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3738      	adds	r7, #56	; 0x38
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b090      	sub	sp, #64	; 0x40
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <xQueueGenericSendFromISR+0x3c>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <xQueueGenericSendFromISR+0x40>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <xQueueGenericSendFromISR+0x42>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d103      	bne.n	8004e5e <xQueueGenericSendFromISR+0x6a>
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <xQueueGenericSendFromISR+0x6e>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <xQueueGenericSendFromISR+0x70>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	623b      	str	r3, [r7, #32]
    }
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e7e:	f002 f98d 	bl	800719c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e82:	f3ef 8211 	mrs	r2, BASEPRI
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	61fa      	str	r2, [r7, #28]
 8004e98:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <xQueueGenericSendFromISR+0xbc>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d13e      	bne.n	8004f2e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ec6:	f000 f9ae 	bl	8005226 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004eca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d112      	bne.n	8004efa <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d025      	beq.n	8004f28 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	3324      	adds	r3, #36	; 0x24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fedd 	bl	8005ca0 <xTaskRemoveFromEventList>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01d      	beq.n	8004f28 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01a      	beq.n	8004f28 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e016      	b.n	8004f28 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004efa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004efe:	2b7f      	cmp	r3, #127	; 0x7f
 8004f00:	d10a      	bne.n	8004f18 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	617b      	str	r3, [r7, #20]
    }
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	b25a      	sxtb	r2, r3
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004f2c:	e001      	b.n	8004f32 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004f3c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3740      	adds	r7, #64	; 0x40
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08c      	sub	sp, #48	; 0x30
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <xQueueReceive+0x30>
        __asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	623b      	str	r3, [r7, #32]
    }
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <xQueueReceive+0x3e>
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <xQueueReceive+0x42>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <xQueueReceive+0x44>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xQueueReceive+0x5e>
        __asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	61fb      	str	r3, [r7, #28]
    }
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fa6:	f001 f817 	bl	8005fd8 <xTaskGetSchedulerState>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <xQueueReceive+0x6e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <xQueueReceive+0x72>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <xQueueReceive+0x74>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xQueueReceive+0x8e>
        __asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	61bb      	str	r3, [r7, #24]
    }
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004fd6:	f001 ffff 	bl	8006fd8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01f      	beq.n	8005026 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fea:	f000 f986 	bl	80052fa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	1e5a      	subs	r2, r3, #1
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00f      	beq.n	800501e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	3310      	adds	r3, #16
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fe4c 	bl	8005ca0 <xTaskRemoveFromEventList>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800500e:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <xQueueReceive+0x1bc>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800501e:	f002 f80b 	bl	8007038 <vPortExitCritical>
                return pdPASS;
 8005022:	2301      	movs	r3, #1
 8005024:	e069      	b.n	80050fa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800502c:	f002 f804 	bl	8007038 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005030:	2300      	movs	r3, #0
 8005032:	e062      	b.n	80050fa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fe90 	bl	8005d64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005048:	f001 fff6 	bl	8007038 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800504c:	f000 fc18 	bl	8005880 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005050:	f001 ffc2 	bl	8006fd8 <vPortEnterCritical>
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800505a:	b25b      	sxtb	r3, r3
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d103      	bne.n	800506a <xQueueReceive+0x122>
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005070:	b25b      	sxtb	r3, r3
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d103      	bne.n	8005080 <xQueueReceive+0x138>
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005080:	f001 ffda 	bl	8007038 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005084:	1d3a      	adds	r2, r7, #4
 8005086:	f107 0310 	add.w	r3, r7, #16
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fe7f 	bl	8005d90 <xTaskCheckForTimeOut>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d123      	bne.n	80050e0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509a:	f000 f9a6 	bl	80053ea <prvIsQueueEmpty>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d017      	beq.n	80050d4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	3324      	adds	r3, #36	; 0x24
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fda7 	bl	8005c00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80050b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b4:	f000 f947 	bl	8005346 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80050b8:	f000 fbf0 	bl	800589c <xTaskResumeAll>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d189      	bne.n	8004fd6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <xQueueReceive+0x1bc>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	e780      	b.n	8004fd6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80050d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d6:	f000 f936 	bl	8005346 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80050da:	f000 fbdf 	bl	800589c <xTaskResumeAll>
 80050de:	e77a      	b.n	8004fd6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80050e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e2:	f000 f930 	bl	8005346 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80050e6:	f000 fbd9 	bl	800589c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ec:	f000 f97d 	bl	80053ea <prvIsQueueEmpty>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f43f af6f 	beq.w	8004fd6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80050f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3730      	adds	r7, #48	; 0x30
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b090      	sub	sp, #64	; 0x40
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10a      	bne.n	8005134 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <xQueueReceiveFromISR+0x3a>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <xQueueReceiveFromISR+0x3e>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <xQueueReceiveFromISR+0x40>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005162:	f002 f81b 	bl	800719c <vPortValidateInterruptPriority>
        __asm volatile
 8005166:	f3ef 8211 	mrs	r2, BASEPRI
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	623a      	str	r2, [r7, #32]
 800517c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800517e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03e      	beq.n	800520c <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800519c:	f000 f8ad 	bl	80052fa <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80051a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d112      	bne.n	80051d8 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d025      	beq.n	8005206 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	3310      	adds	r3, #16
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fd6e 	bl	8005ca0 <xTaskRemoveFromEventList>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01d      	beq.n	8005206 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01a      	beq.n	8005206 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e016      	b.n	8005206 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80051d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80051dc:	2b7f      	cmp	r3, #127	; 0x7f
 80051de:	d10a      	bne.n	80051f6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61bb      	str	r3, [r7, #24]
    }
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051fa:	3301      	adds	r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	b25a      	sxtb	r2, r3
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005206:	2301      	movs	r3, #1
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520a:	e001      	b.n	8005210 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 800520c:	2300      	movs	r3, #0
 800520e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f383 8811 	msr	BASEPRI, r3
    }
 800521a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800521c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800521e:	4618      	mov	r0, r3
 8005220:	3740      	adds	r7, #64	; 0x40
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d14d      	bne.n	80052e8 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fedf 	bl	8006014 <xTaskPriorityDisinherit>
 8005256:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	e043      	b.n	80052e8 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d119      	bne.n	800529a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6858      	ldr	r0, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	461a      	mov	r2, r3
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	f008 fcf7 	bl	800dc64 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	441a      	add	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d32b      	bcc.n	80052e8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	605a      	str	r2, [r3, #4]
 8005298:	e026      	b.n	80052e8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68d8      	ldr	r0, [r3, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	461a      	mov	r2, r3
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	f008 fcdd 	bl	800dc64 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	425b      	negs	r3, r3
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d207      	bcs.n	80052d6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	425b      	negs	r3, r3
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d105      	bne.n	80052e8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80052f0:	697b      	ldr	r3, [r7, #20]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d018      	beq.n	800533e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	d303      	bcc.n	800532e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	461a      	mov	r2, r3
 8005338:	6838      	ldr	r0, [r7, #0]
 800533a:	f008 fc93 	bl	800dc64 <memcpy>
    }
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800534e:	f001 fe43 	bl	8006fd8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005358:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800535a:	e011      	b.n	8005380 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3324      	adds	r3, #36	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fc99 	bl	8005ca0 <xTaskRemoveFromEventList>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005374:	f000 fd72 	bl	8005e5c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	3b01      	subs	r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	dce9      	bgt.n	800535c <prvUnlockQueue+0x16>
 8005388:	e000      	b.n	800538c <prvUnlockQueue+0x46>
                        break;
 800538a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005394:	f001 fe50 	bl	8007038 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005398:	f001 fe1e 	bl	8006fd8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053a2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80053a4:	e011      	b.n	80053ca <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d012      	beq.n	80053d4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3310      	adds	r3, #16
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fc74 	bl	8005ca0 <xTaskRemoveFromEventList>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80053be:	f000 fd4d 	bl	8005e5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dce9      	bgt.n	80053a6 <prvUnlockQueue+0x60>
 80053d2:	e000      	b.n	80053d6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80053d4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80053de:	f001 fe2b 	bl	8007038 <vPortExitCritical>
}
 80053e2:	bf00      	nop
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80053f2:	f001 fdf1 	bl	8006fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e001      	b.n	8005408 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005408:	f001 fe16 	bl	8007038 <vPortExitCritical>

    return xReturn;
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800541e:	f001 fddb 	bl	8006fd8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	429a      	cmp	r2, r3
 800542c:	d102      	bne.n	8005434 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800542e:	2301      	movs	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e001      	b.n	8005438 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005438:	f001 fdfe 	bl	8007038 <vPortExitCritical>

    return xReturn;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005446:	b480      	push	{r7}
 8005448:	b087      	sub	sp, #28
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	60fb      	str	r3, [r7, #12]
    }
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	429a      	cmp	r2, r3
 8005478:	d102      	bne.n	8005480 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e001      	b.n	8005484 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005484:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005486:	4618      	mov	r0, r3
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e014      	b.n	80054ce <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054a4:	4a0f      	ldr	r2, [pc, #60]	; (80054e4 <vQueueAddToRegistry+0x50>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054b0:	490c      	ldr	r1, [pc, #48]	; (80054e4 <vQueueAddToRegistry+0x50>)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80054ba:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <vQueueAddToRegistry+0x50>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80054c6:	e006      	b.n	80054d6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	d9e7      	bls.n	80054a4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000c58 	.word	0x20000c58

080054e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80054f8:	f001 fd6e 	bl	8006fd8 <vPortEnterCritical>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005502:	b25b      	sxtb	r3, r3
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d103      	bne.n	8005512 <vQueueWaitForMessageRestricted+0x2a>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005518:	b25b      	sxtb	r3, r3
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d103      	bne.n	8005528 <vQueueWaitForMessageRestricted+0x40>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005528:	f001 fd86 	bl	8007038 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3324      	adds	r3, #36	; 0x24
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fb83 	bl	8005c48 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005542:	6978      	ldr	r0, [r7, #20]
 8005544:	f7ff feff 	bl	8005346 <prvUnlockQueue>
    }
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	; 0x30
 8005554:	af04      	add	r7, sp, #16
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4618      	mov	r0, r3
 8005566:	f001 fe59 	bl	800721c <pvPortMalloc>
 800556a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005572:	2058      	movs	r0, #88	; 0x58
 8005574:	f001 fe52 	bl	800721c <pvPortMalloc>
 8005578:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
 8005586:	e005      	b.n	8005594 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005588:	6978      	ldr	r0, [r7, #20]
 800558a:	f001 ff27 	bl	80073dc <vPortFree>
 800558e:	e001      	b.n	8005594 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d013      	beq.n	80055c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	2300      	movs	r3, #0
 800559e:	9303      	str	r3, [sp, #12]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	9302      	str	r3, [sp, #8]
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f80e 	bl	80055d2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80055b6:	69f8      	ldr	r0, [r7, #28]
 80055b8:	f000 f8a2 	bl	8005700 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80055bc:	2301      	movs	r3, #1
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e002      	b.n	80055c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055c2:	f04f 33ff 	mov.w	r3, #4294967295
 80055c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80055c8:	69bb      	ldr	r3, [r7, #24]
    }
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b088      	sub	sp, #32
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	461a      	mov	r2, r3
 80055ea:	21a5      	movs	r1, #165	; 0xa5
 80055ec:	f008 fb48 	bl	800dc80 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055fa:	3b01      	subs	r3, #1
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <prvInitialiseNewTask+0x58>
        __asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	617b      	str	r3, [r7, #20]
    }
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01f      	beq.n	8005670 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e012      	b.n	800565c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	7819      	ldrb	r1, [r3, #0]
 800563e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	4413      	add	r3, r2
 8005644:	3334      	adds	r3, #52	; 0x34
 8005646:	460a      	mov	r2, r1
 8005648:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	2b09      	cmp	r3, #9
 8005660:	d9e9      	bls.n	8005636 <prvInitialiseNewTask+0x64>
 8005662:	e000      	b.n	8005666 <prvInitialiseNewTask+0x94>
            {
                break;
 8005664:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800566e:	e003      	b.n	8005678 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	2b04      	cmp	r3, #4
 800567c:	d901      	bls.n	8005682 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800567e:	2304      	movs	r3, #4
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800568c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	2200      	movs	r2, #0
 8005692:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	3304      	adds	r3, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff f92e 	bl	80048fa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	3318      	adds	r3, #24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff f929 	bl	80048fa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	f1c3 0205 	rsb	r2, r3, #5
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	3350      	adds	r3, #80	; 0x50
 80056c2:	2204      	movs	r2, #4
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f008 fada 	bl	800dc80 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	3354      	adds	r3, #84	; 0x54
 80056d0:	2201      	movs	r2, #1
 80056d2:	2100      	movs	r1, #0
 80056d4:	4618      	mov	r0, r3
 80056d6:	f008 fad3 	bl	800dc80 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68f9      	ldr	r1, [r7, #12]
 80056de:	69b8      	ldr	r0, [r7, #24]
 80056e0:	f001 fb48 	bl	8006d74 <pxPortInitialiseStack>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056f6:	bf00      	nop
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005708:	f001 fc66 	bl	8006fd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800570c:	4b2c      	ldr	r3, [pc, #176]	; (80057c0 <prvAddNewTaskToReadyList+0xc0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3301      	adds	r3, #1
 8005712:	4a2b      	ldr	r2, [pc, #172]	; (80057c0 <prvAddNewTaskToReadyList+0xc0>)
 8005714:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005716:	4b2b      	ldr	r3, [pc, #172]	; (80057c4 <prvAddNewTaskToReadyList+0xc4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800571e:	4a29      	ldr	r2, [pc, #164]	; (80057c4 <prvAddNewTaskToReadyList+0xc4>)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <prvAddNewTaskToReadyList+0xc0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d110      	bne.n	800574e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800572c:	f000 fbba 	bl	8005ea4 <prvInitialiseTaskLists>
 8005730:	e00d      	b.n	800574e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005732:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <prvAddNewTaskToReadyList+0xc8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800573a:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <prvAddNewTaskToReadyList+0xc4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	429a      	cmp	r2, r3
 8005746:	d802      	bhi.n	800574e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005748:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <prvAddNewTaskToReadyList+0xc4>)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800574e:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <prvAddNewTaskToReadyList+0xcc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <prvAddNewTaskToReadyList+0xcc>)
 8005756:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005758:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <prvAddNewTaskToReadyList+0xcc>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	2201      	movs	r2, #1
 8005766:	409a      	lsls	r2, r3
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <prvAddNewTaskToReadyList+0xd0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4313      	orrs	r3, r2
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <prvAddNewTaskToReadyList+0xd0>)
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <prvAddNewTaskToReadyList+0xd4>)
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3304      	adds	r3, #4
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f7ff f8c3 	bl	8004914 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800578e:	f001 fc53 	bl	8007038 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005792:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <prvAddNewTaskToReadyList+0xc8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00e      	beq.n	80057b8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <prvAddNewTaskToReadyList+0xc4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d207      	bcs.n	80057b8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <prvAddNewTaskToReadyList+0xd8>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000d70 	.word	0x20000d70
 80057c4:	20000c98 	.word	0x20000c98
 80057c8:	20000d7c 	.word	0x20000d7c
 80057cc:	20000d8c 	.word	0x20000d8c
 80057d0:	20000d78 	.word	0x20000d78
 80057d4:	20000c9c 	.word	0x20000c9c
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80057e2:	4b20      	ldr	r3, [pc, #128]	; (8005864 <vTaskStartScheduler+0x88>)
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	2300      	movs	r3, #0
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	2300      	movs	r3, #0
 80057ec:	2282      	movs	r2, #130	; 0x82
 80057ee:	491e      	ldr	r1, [pc, #120]	; (8005868 <vTaskStartScheduler+0x8c>)
 80057f0:	481e      	ldr	r0, [pc, #120]	; (800586c <vTaskStartScheduler+0x90>)
 80057f2:	f7ff fead 	bl	8005550 <xTaskCreate>
 80057f6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d102      	bne.n	8005804 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80057fe:	f000 ff4b 	bl	8006698 <xTimerCreateTimerTask>
 8005802:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d116      	bne.n	8005838 <vTaskStartScheduler+0x5c>
        __asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	60bb      	str	r3, [r7, #8]
    }
 800581c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800581e:	4b14      	ldr	r3, [pc, #80]	; (8005870 <vTaskStartScheduler+0x94>)
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005826:	4b13      	ldr	r3, [pc, #76]	; (8005874 <vTaskStartScheduler+0x98>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <vTaskStartScheduler+0x9c>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005832:	f001 fb2f 	bl	8006e94 <xPortStartScheduler>
 8005836:	e00e      	b.n	8005856 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d10a      	bne.n	8005856 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	607b      	str	r3, [r7, #4]
    }
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <vTaskStartScheduler+0xa0>)
 8005858:	681b      	ldr	r3, [r3, #0]
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000d94 	.word	0x20000d94
 8005868:	08013970 	.word	0x08013970
 800586c:	08005e75 	.word	0x08005e75
 8005870:	20000d90 	.word	0x20000d90
 8005874:	20000d7c 	.word	0x20000d7c
 8005878:	20000d74 	.word	0x20000d74
 800587c:	20000038 	.word	0x20000038

08005880 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <vTaskSuspendAll+0x18>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	4a03      	ldr	r2, [pc, #12]	; (8005898 <vTaskSuspendAll+0x18>)
 800588c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800588e:	bf00      	nop
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	20000d98 	.word	0x20000d98

0800589c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80058aa:	4b41      	ldr	r3, [pc, #260]	; (80059b0 <xTaskResumeAll+0x114>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	603b      	str	r3, [r7, #0]
    }
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80058c8:	f001 fb86 	bl	8006fd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80058cc:	4b38      	ldr	r3, [pc, #224]	; (80059b0 <xTaskResumeAll+0x114>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	4a37      	ldr	r2, [pc, #220]	; (80059b0 <xTaskResumeAll+0x114>)
 80058d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d6:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <xTaskResumeAll+0x114>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d161      	bne.n	80059a2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058de:	4b35      	ldr	r3, [pc, #212]	; (80059b4 <xTaskResumeAll+0x118>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d05d      	beq.n	80059a2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e6:	e02e      	b.n	8005946 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e8:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <xTaskResumeAll+0x11c>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3318      	adds	r3, #24
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff f86a 	bl	80049ce <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff f865 	bl	80049ce <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	2201      	movs	r2, #1
 800590a:	409a      	lsls	r2, r3
 800590c:	4b2b      	ldr	r3, [pc, #172]	; (80059bc <xTaskResumeAll+0x120>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4313      	orrs	r3, r2
 8005912:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <xTaskResumeAll+0x120>)
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <xTaskResumeAll+0x124>)
 8005924:	441a      	add	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3304      	adds	r3, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7fe fff1 	bl	8004914 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005936:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <xTaskResumeAll+0x128>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	429a      	cmp	r2, r3
 800593e:	d302      	bcc.n	8005946 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005940:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <xTaskResumeAll+0x12c>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005946:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <xTaskResumeAll+0x11c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1cc      	bne.n	80058e8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005954:	f000 fb24 	bl	8005fa0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005958:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <xTaskResumeAll+0x130>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d010      	beq.n	8005986 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005964:	f000 f846 	bl	80059f4 <xTaskIncrementTick>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800596e:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <xTaskResumeAll+0x12c>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3b01      	subs	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f1      	bne.n	8005964 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005980:	4b12      	ldr	r3, [pc, #72]	; (80059cc <xTaskResumeAll+0x130>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <xTaskResumeAll+0x12c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800598e:	2301      	movs	r3, #1
 8005990:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <xTaskResumeAll+0x134>)
 8005994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80059a2:	f001 fb49 	bl	8007038 <vPortExitCritical>

    return xAlreadyYielded;
 80059a6:	68bb      	ldr	r3, [r7, #8]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000d98 	.word	0x20000d98
 80059b4:	20000d70 	.word	0x20000d70
 80059b8:	20000d30 	.word	0x20000d30
 80059bc:	20000d78 	.word	0x20000d78
 80059c0:	20000c9c 	.word	0x20000c9c
 80059c4:	20000c98 	.word	0x20000c98
 80059c8:	20000d84 	.word	0x20000d84
 80059cc:	20000d80 	.word	0x20000d80
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <xTaskGetTickCount+0x1c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80059e0:	687b      	ldr	r3, [r7, #4]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000d74 	.word	0x20000d74

080059f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059fe:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <xTaskIncrementTick+0x128>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d17f      	bne.n	8005b06 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a06:	4b46      	ldr	r3, [pc, #280]	; (8005b20 <xTaskIncrementTick+0x12c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005a0e:	4a44      	ldr	r2, [pc, #272]	; (8005b20 <xTaskIncrementTick+0x12c>)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d120      	bne.n	8005a5c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8005a1a:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <xTaskIncrementTick+0x130>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <xTaskIncrementTick+0x46>
        __asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	603b      	str	r3, [r7, #0]
    }
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTaskIncrementTick+0x44>
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <xTaskIncrementTick+0x130>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <xTaskIncrementTick+0x134>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a37      	ldr	r2, [pc, #220]	; (8005b24 <xTaskIncrementTick+0x130>)
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4a37      	ldr	r2, [pc, #220]	; (8005b28 <xTaskIncrementTick+0x134>)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <xTaskIncrementTick+0x138>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <xTaskIncrementTick+0x138>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	f000 faa2 	bl	8005fa0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005a5c:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <xTaskIncrementTick+0x13c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d348      	bcc.n	8005af8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <xTaskIncrementTick+0x130>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a70:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <xTaskIncrementTick+0x13c>)
 8005a72:	f04f 32ff 	mov.w	r2, #4294967295
 8005a76:	601a      	str	r2, [r3, #0]
                    break;
 8005a78:	e03e      	b.n	8005af8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a7a:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <xTaskIncrementTick+0x130>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d203      	bcs.n	8005a9a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a92:	4a27      	ldr	r2, [pc, #156]	; (8005b30 <xTaskIncrementTick+0x13c>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a98:	e02e      	b.n	8005af8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe ff95 	bl	80049ce <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	3318      	adds	r3, #24
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe ff8c 	bl	80049ce <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	2201      	movs	r2, #1
 8005abc:	409a      	lsls	r2, r3
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <xTaskIncrementTick+0x140>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	4a1b      	ldr	r2, [pc, #108]	; (8005b34 <xTaskIncrementTick+0x140>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <xTaskIncrementTick+0x144>)
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f7fe ff18 	bl	8004914 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4b14      	ldr	r3, [pc, #80]	; (8005b3c <xTaskIncrementTick+0x148>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d3b9      	bcc.n	8005a66 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005af6:	e7b6      	b.n	8005a66 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005af8:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <xTaskIncrementTick+0x14c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e004      	b.n	8005b10 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <xTaskIncrementTick+0x150>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	4a0d      	ldr	r2, [pc, #52]	; (8005b44 <xTaskIncrementTick+0x150>)
 8005b0e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005b10:	697b      	ldr	r3, [r7, #20]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000d98 	.word	0x20000d98
 8005b20:	20000d74 	.word	0x20000d74
 8005b24:	20000d28 	.word	0x20000d28
 8005b28:	20000d2c 	.word	0x20000d2c
 8005b2c:	20000d88 	.word	0x20000d88
 8005b30:	20000d90 	.word	0x20000d90
 8005b34:	20000d78 	.word	0x20000d78
 8005b38:	20000c9c 	.word	0x20000c9c
 8005b3c:	20000c98 	.word	0x20000c98
 8005b40:	20000d84 	.word	0x20000d84
 8005b44:	20000d80 	.word	0x20000d80

08005b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4e:	4b27      	ldr	r3, [pc, #156]	; (8005bec <vTaskSwitchContext+0xa4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005b56:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <vTaskSwitchContext+0xa8>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005b5c:	e03f      	b.n	8005bde <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <vTaskSwitchContext+0xa8>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <vTaskSwitchContext+0xac>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	fab3 f383 	clz	r3, r3
 8005b70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	f1c3 031f 	rsb	r3, r3, #31
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <vTaskSwitchContext+0xb0>)
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
    }
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskSwitchContext+0x5a>
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a12      	ldr	r2, [pc, #72]	; (8005bf8 <vTaskSwitchContext+0xb0>)
 8005bb0:	4413      	add	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d104      	bne.n	8005bd4 <vTaskSwitchContext+0x8c>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <vTaskSwitchContext+0xb4>)
 8005bdc:	6013      	str	r3, [r2, #0]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000d98 	.word	0x20000d98
 8005bf0:	20000d84 	.word	0x20000d84
 8005bf4:	20000d78 	.word	0x20000d78
 8005bf8:	20000c9c 	.word	0x20000c9c
 8005bfc:	20000c98 	.word	0x20000c98

08005c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
    }
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c26:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <vTaskPlaceOnEventList+0x44>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3318      	adds	r3, #24
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fe fe94 	bl	800495c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c34:	2101      	movs	r1, #1
 8005c36:	6838      	ldr	r0, [r7, #0]
 8005c38:	f000 fcc8 	bl	80065cc <prvAddCurrentTaskToDelayedList>
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000c98 	.word	0x20000c98

08005c48 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	617b      	str	r3, [r7, #20]
    }
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3318      	adds	r3, #24
 8005c76:	4619      	mov	r1, r3
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7fe fe4b 	bl	8004914 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005c84:	f04f 33ff 	mov.w	r3, #4294967295
 8005c88:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	68b8      	ldr	r0, [r7, #8]
 8005c8e:	f000 fc9d 	bl	80065cc <prvAddCurrentTaskToDelayedList>
    }
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000c98 	.word	0x20000c98

08005ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	60fb      	str	r3, [r7, #12]
    }
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fe fe7c 	bl	80049ce <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <xTaskRemoveFromEventList+0xac>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11c      	bne.n	8005d18 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fe73 	bl	80049ce <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	2201      	movs	r2, #1
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <xTaskRemoveFromEventList+0xb0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <xTaskRemoveFromEventList+0xb0>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <xTaskRemoveFromEventList+0xb4>)
 8005d08:	441a      	add	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7fe fdff 	bl	8004914 <vListInsertEnd>
 8005d16:	e005      	b.n	8005d24 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	480e      	ldr	r0, [pc, #56]	; (8005d58 <xTaskRemoveFromEventList+0xb8>)
 8005d20:	f7fe fdf8 	bl	8004914 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <xTaskRemoveFromEventList+0xbc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d905      	bls.n	8005d3e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <xTaskRemoveFromEventList+0xc0>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e001      	b.n	8005d42 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d42:	697b      	ldr	r3, [r7, #20]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000d98 	.word	0x20000d98
 8005d50:	20000d78 	.word	0x20000d78
 8005d54:	20000c9c 	.word	0x20000c9c
 8005d58:	20000d30 	.word	0x20000d30
 8005d5c:	20000c98 	.word	0x20000c98
 8005d60:	20000d84 	.word	0x20000d84

08005d64 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <vTaskInternalSetTimeOutState+0x24>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <vTaskInternalSetTimeOutState+0x28>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	605a      	str	r2, [r3, #4]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20000d88 	.word	0x20000d88
 8005d8c:	20000d74 	.word	0x20000d74

08005d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
    }
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
    }
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005dd2:	f001 f901 	bl	8006fd8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	; (8005e54 <xTaskCheckForTimeOut+0xc4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d102      	bne.n	8005df6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e026      	b.n	8005e44 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <xTaskCheckForTimeOut+0xc8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d00a      	beq.n	8005e18 <xTaskCheckForTimeOut+0x88>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d305      	bcc.n	8005e18 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e015      	b.n	8005e44 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d20b      	bcs.n	8005e3a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	1ad2      	subs	r2, r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff ff98 	bl	8005d64 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61fb      	str	r3, [r7, #28]
 8005e38:	e004      	b.n	8005e44 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e44:	f001 f8f8 	bl	8007038 <vPortExitCritical>

    return xReturn;
 8005e48:	69fb      	ldr	r3, [r7, #28]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000d74 	.word	0x20000d74
 8005e58:	20000d88 	.word	0x20000d88

08005e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <vTaskMissedYield+0x14>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20000d84 	.word	0x20000d84

08005e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e7c:	f000 f852 	bl	8005f24 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <prvIdleTask+0x28>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d9f9      	bls.n	8005e7c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <prvIdleTask+0x2c>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e98:	e7f0      	b.n	8005e7c <prvIdleTask+0x8>
 8005e9a:	bf00      	nop
 8005e9c:	20000c9c 	.word	0x20000c9c
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	e00c      	b.n	8005eca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <prvInitialiseTaskLists+0x60>)
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fcfb 	bl	80048ba <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d9ef      	bls.n	8005eb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005ed0:	480d      	ldr	r0, [pc, #52]	; (8005f08 <prvInitialiseTaskLists+0x64>)
 8005ed2:	f7fe fcf2 	bl	80048ba <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005ed6:	480d      	ldr	r0, [pc, #52]	; (8005f0c <prvInitialiseTaskLists+0x68>)
 8005ed8:	f7fe fcef 	bl	80048ba <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005edc:	480c      	ldr	r0, [pc, #48]	; (8005f10 <prvInitialiseTaskLists+0x6c>)
 8005ede:	f7fe fcec 	bl	80048ba <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005ee2:	480c      	ldr	r0, [pc, #48]	; (8005f14 <prvInitialiseTaskLists+0x70>)
 8005ee4:	f7fe fce9 	bl	80048ba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005ee8:	480b      	ldr	r0, [pc, #44]	; (8005f18 <prvInitialiseTaskLists+0x74>)
 8005eea:	f7fe fce6 	bl	80048ba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005eee:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <prvInitialiseTaskLists+0x78>)
 8005ef0:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <prvInitialiseTaskLists+0x64>)
 8005ef2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvInitialiseTaskLists+0x7c>)
 8005ef6:	4a05      	ldr	r2, [pc, #20]	; (8005f0c <prvInitialiseTaskLists+0x68>)
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000c9c 	.word	0x20000c9c
 8005f08:	20000d00 	.word	0x20000d00
 8005f0c:	20000d14 	.word	0x20000d14
 8005f10:	20000d30 	.word	0x20000d30
 8005f14:	20000d44 	.word	0x20000d44
 8005f18:	20000d5c 	.word	0x20000d5c
 8005f1c:	20000d28 	.word	0x20000d28
 8005f20:	20000d2c 	.word	0x20000d2c

08005f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f2a:	e019      	b.n	8005f60 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005f2c:	f001 f854 	bl	8006fd8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f30:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <prvCheckTasksWaitingTermination+0x50>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fd46 	bl	80049ce <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <prvCheckTasksWaitingTermination+0x54>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	4a0b      	ldr	r2, [pc, #44]	; (8005f78 <prvCheckTasksWaitingTermination+0x54>)
 8005f4a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <prvCheckTasksWaitingTermination+0x58>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvCheckTasksWaitingTermination+0x58>)
 8005f54:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005f56:	f001 f86f 	bl	8007038 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f810 	bl	8005f80 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <prvCheckTasksWaitingTermination+0x58>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e1      	bne.n	8005f2c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000d44 	.word	0x20000d44
 8005f78:	20000d70 	.word	0x20000d70
 8005f7c:	20000d58 	.word	0x20000d58

08005f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fa25 	bl	80073dc <vPortFree>
                vPortFree( pxTCB );
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fa22 	bl	80073dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <prvResetNextTaskUnblockTime+0x30>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <prvResetNextTaskUnblockTime+0x34>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005fb6:	e005      	b.n	8005fc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <prvResetNextTaskUnblockTime+0x30>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a04      	ldr	r2, [pc, #16]	; (8005fd4 <prvResetNextTaskUnblockTime+0x34>)
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000d28 	.word	0x20000d28
 8005fd4:	20000d90 	.word	0x20000d90

08005fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005fde:	4b0b      	ldr	r3, [pc, #44]	; (800600c <xTaskGetSchedulerState+0x34>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	e008      	b.n	8005ffe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <xTaskGetSchedulerState+0x38>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	e001      	b.n	8005ffe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005ffe:	687b      	ldr	r3, [r7, #4]
    }
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000d7c 	.word	0x20000d7c
 8006010:	20000d98 	.word	0x20000d98

08006014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d063      	beq.n	80060f2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800602a:	4b34      	ldr	r3, [pc, #208]	; (80060fc <xTaskPriorityDisinherit+0xe8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	429a      	cmp	r2, r3
 8006032:	d00a      	beq.n	800604a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	60fb      	str	r3, [r7, #12]
    }
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60bb      	str	r3, [r7, #8]
    }
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606c:	1e5a      	subs	r2, r3, #1
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607a:	429a      	cmp	r2, r3
 800607c:	d039      	beq.n	80060f2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d135      	bne.n	80060f2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3304      	adds	r3, #4
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fc9f 	bl	80049ce <uxListRemove>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	2201      	movs	r2, #1
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43da      	mvns	r2, r3
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <xTaskPriorityDisinherit+0xec>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4013      	ands	r3, r2
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <xTaskPriorityDisinherit+0xec>)
 80060aa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	f1c3 0205 	rsb	r2, r3, #5
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	2201      	movs	r2, #1
 80060c6:	409a      	lsls	r2, r3
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <xTaskPriorityDisinherit+0xec>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <xTaskPriorityDisinherit+0xec>)
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <xTaskPriorityDisinherit+0xf0>)
 80060e0:	441a      	add	r2, r3
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fe fc13 	bl	8004914 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060f2:	697b      	ldr	r3, [r7, #20]
    }
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000c98 	.word	0x20000c98
 8006100:	20000d78 	.word	0x20000d78
 8006104:	20000c9c 	.word	0x20000c9c

08006108 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	613b      	str	r3, [r7, #16]
    }
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006132:	f000 ff51 	bl	8006fd8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006136:	4b32      	ldr	r3, [pc, #200]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	3354      	adds	r3, #84	; 0x54
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d022      	beq.n	800618e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006148:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	3214      	adds	r2, #20
 8006150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	43d2      	mvns	r2, r2
 8006158:	4011      	ands	r1, r2
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	3214      	adds	r2, #20
 800615e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006162:	4b27      	ldr	r3, [pc, #156]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4413      	add	r3, r2
 800616a:	3354      	adds	r3, #84	; 0x54
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006176:	2101      	movs	r1, #1
 8006178:	6a38      	ldr	r0, [r7, #32]
 800617a:	f000 fa27 	bl	80065cc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800617e:	4b21      	ldr	r3, [pc, #132]	; (8006204 <xTaskGenericNotifyWait+0xfc>)
 8006180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800618e:	f000 ff53 	bl	8007038 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006192:	f000 ff21 	bl	8006fd8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800619c:	4b18      	ldr	r3, [pc, #96]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	3214      	adds	r2, #20
 80061a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80061ac:	4b14      	ldr	r3, [pc, #80]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	3354      	adds	r3, #84	; 0x54
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d002      	beq.n	80061c4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e00e      	b.n	80061e2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80061c4:	4b0e      	ldr	r3, [pc, #56]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	3214      	adds	r2, #20
 80061cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	43d2      	mvns	r2, r2
 80061d4:	4011      	ands	r1, r2
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	3214      	adds	r2, #20
 80061da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80061de:	2301      	movs	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <xTaskGenericNotifyWait+0xf8>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	3354      	adds	r3, #84	; 0x54
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80061f0:	f000 ff22 	bl	8007038 <vPortExitCritical>

        return xReturn;
 80061f4:	697b      	ldr	r3, [r7, #20]
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000c98 	.word	0x20000c98
 8006204:	e000ed04 	.word	0xe000ed04

08006208 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	; 0x30
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006216:	2301      	movs	r3, #1
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	623b      	str	r3, [r7, #32]
    }
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xTaskGenericNotify+0x4a>
        __asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	61fb      	str	r3, [r7, #28]
    }
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006256:	f000 febf 	bl	8006fd8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	2b00      	cmp	r3, #0
 800625e:	d006      	beq.n	800626e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	3214      	adds	r2, #20
 8006266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800626e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4413      	add	r3, r2
 8006274:	3354      	adds	r3, #84	; 0x54
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800627c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	3354      	adds	r3, #84	; 0x54
 8006284:	2202      	movs	r2, #2
 8006286:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	2b04      	cmp	r3, #4
 800628c:	d83b      	bhi.n	8006306 <xTaskGenericNotify+0xfe>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <xTaskGenericNotify+0x8c>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	08006325 	.word	0x08006325
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062dd 	.word	0x080062dd
 80062a4:	080062eb 	.word	0x080062eb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	3214      	adds	r2, #20
 80062ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	ea42 0103 	orr.w	r1, r2, r3
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	3214      	adds	r2, #20
 80062be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062c2:	e032      	b.n	800632a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	3214      	adds	r2, #20
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	3214      	adds	r2, #20
 80062d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062da:	e026      	b.n	800632a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	3214      	adds	r2, #20
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062e8:	e01f      	b.n	800632a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d006      	beq.n	8006300 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	3214      	adds	r2, #20
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80062fe:	e014      	b.n	800632a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006300:	2300      	movs	r3, #0
 8006302:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006304:	e011      	b.n	800632a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006306:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <xTaskGenericNotify+0x1ac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <xTaskGenericNotify+0x120>
        __asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	61bb      	str	r3, [r7, #24]
    }
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <xTaskGenericNotify+0x11a>
                    break;
 8006324:	bf00      	nop
 8006326:	e000      	b.n	800632a <xTaskGenericNotify+0x122>

                    break;
 8006328:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800632a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800632e:	2b01      	cmp	r3, #1
 8006330:	d139      	bne.n	80063a6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fb49 	bl	80049ce <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	2201      	movs	r2, #1
 8006342:	409a      	lsls	r2, r3
 8006344:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <xTaskGenericNotify+0x1b0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4313      	orrs	r3, r2
 800634a:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <xTaskGenericNotify+0x1b0>)
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4a18      	ldr	r2, [pc, #96]	; (80063bc <xTaskGenericNotify+0x1b4>)
 800635c:	441a      	add	r2, r3
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe fad5 	bl	8004914 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <xTaskGenericNotify+0x180>
        __asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	617b      	str	r3, [r7, #20]
    }
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <xTaskGenericNotify+0x1b8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	429a      	cmp	r2, r3
 8006394:	d907      	bls.n	80063a6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <xTaskGenericNotify+0x1bc>)
 8006398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80063a6:	f000 fe47 	bl	8007038 <vPortExitCritical>

        return xReturn;
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80063ac:	4618      	mov	r0, r3
 80063ae:	3730      	adds	r7, #48	; 0x30
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20000d74 	.word	0x20000d74
 80063b8:	20000d78 	.word	0x20000d78
 80063bc:	20000c9c 	.word	0x20000c9c
 80063c0:	20000c98 	.word	0x20000c98
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b090      	sub	sp, #64	; 0x40
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80063d6:	2301      	movs	r3, #1
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006412:	f000 fec3 	bl	800719c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800641a:	f3ef 8211 	mrs	r2, BASEPRI
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	627a      	str	r2, [r7, #36]	; 0x24
 8006430:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006438:	2b00      	cmp	r3, #0
 800643a:	d006      	beq.n	800644a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	3214      	adds	r2, #20
 8006442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006448:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800644a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4413      	add	r3, r2
 8006450:	3354      	adds	r3, #84	; 0x54
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4413      	add	r3, r2
 800645e:	3354      	adds	r3, #84	; 0x54
 8006460:	2202      	movs	r2, #2
 8006462:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	2b04      	cmp	r3, #4
 8006468:	d83b      	bhi.n	80064e2 <xTaskGenericNotifyFromISR+0x11a>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <xTaskGenericNotifyFromISR+0xa8>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006501 	.word	0x08006501
 8006474:	08006485 	.word	0x08006485
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064b9 	.word	0x080064b9
 8006480:	080064c7 	.word	0x080064c7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	3214      	adds	r2, #20
 800648a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	ea42 0103 	orr.w	r1, r2, r3
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	3214      	adds	r2, #20
 800649a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800649e:	e032      	b.n	8006506 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	3214      	adds	r2, #20
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	3214      	adds	r2, #20
 80064b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064b6:	e026      	b.n	8006506 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	3214      	adds	r2, #20
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064c4:	e01f      	b.n	8006506 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d006      	beq.n	80064dc <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	3214      	adds	r2, #20
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80064da:	e014      	b.n	8006506 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80064dc:	2300      	movs	r3, #0
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80064e0:	e011      	b.n	8006506 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80064e2:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <xTaskGenericNotifyFromISR+0x1e8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00c      	beq.n	8006504 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61fb      	str	r3, [r7, #28]
    }
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006500:	bf00      	nop
 8006502:	e000      	b.n	8006506 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006504:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006506:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800650a:	2b01      	cmp	r3, #1
 800650c:	d145      	bne.n	800659a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61bb      	str	r3, [r7, #24]
    }
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800652c:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <xTaskGenericNotifyFromISR+0x1ec>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11c      	bne.n	800656e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	3304      	adds	r3, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe fa48 	bl	80049ce <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	2201      	movs	r2, #1
 8006544:	409a      	lsls	r2, r3
 8006546:	4b1c      	ldr	r3, [pc, #112]	; (80065b8 <xTaskGenericNotifyFromISR+0x1f0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4313      	orrs	r3, r2
 800654c:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <xTaskGenericNotifyFromISR+0x1f0>)
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4a17      	ldr	r2, [pc, #92]	; (80065bc <xTaskGenericNotifyFromISR+0x1f4>)
 800655e:	441a      	add	r2, r3
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7fe f9d4 	bl	8004914 <vListInsertEnd>
 800656c:	e005      	b.n	800657a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	3318      	adds	r3, #24
 8006572:	4619      	mov	r1, r3
 8006574:	4812      	ldr	r0, [pc, #72]	; (80065c0 <xTaskGenericNotifyFromISR+0x1f8>)
 8006576:	f7fe f9cd 	bl	8004914 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <xTaskGenericNotifyFromISR+0x1fc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	429a      	cmp	r2, r3
 8006586:	d908      	bls.n	800659a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800658e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006590:	2201      	movs	r2, #1
 8006592:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <xTaskGenericNotifyFromISR+0x200>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f383 8811 	msr	BASEPRI, r3
    }
 80065a4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80065a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80065a8:	4618      	mov	r0, r3
 80065aa:	3740      	adds	r7, #64	; 0x40
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20000d74 	.word	0x20000d74
 80065b4:	20000d98 	.word	0x20000d98
 80065b8:	20000d78 	.word	0x20000d78
 80065bc:	20000c9c 	.word	0x20000c9c
 80065c0:	20000d30 	.word	0x20000d30
 80065c4:	20000c98 	.word	0x20000c98
 80065c8:	20000d84 	.word	0x20000d84

080065cc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80065d6:	4b29      	ldr	r3, [pc, #164]	; (800667c <prvAddCurrentTaskToDelayedList+0xb0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065dc:	4b28      	ldr	r3, [pc, #160]	; (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe f9f3 	bl	80049ce <uxListRemove>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065ee:	4b24      	ldr	r3, [pc, #144]	; (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	2201      	movs	r2, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43da      	mvns	r2, r3
 80065fc:	4b21      	ldr	r3, [pc, #132]	; (8006684 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4013      	ands	r3, r2
 8006602:	4a20      	ldr	r2, [pc, #128]	; (8006684 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006604:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d10a      	bne.n	8006624 <prvAddCurrentTaskToDelayedList+0x58>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006614:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3304      	adds	r3, #4
 800661a:	4619      	mov	r1, r3
 800661c:	481a      	ldr	r0, [pc, #104]	; (8006688 <prvAddCurrentTaskToDelayedList+0xbc>)
 800661e:	f7fe f979 	bl	8004914 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006622:	e026      	b.n	8006672 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	429a      	cmp	r2, r3
 800663a:	d209      	bcs.n	8006650 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800663c:	4b13      	ldr	r3, [pc, #76]	; (800668c <prvAddCurrentTaskToDelayedList+0xc0>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3304      	adds	r3, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f7fe f987 	bl	800495c <vListInsert>
}
 800664e:	e010      	b.n	8006672 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3304      	adds	r3, #4
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fe f97d 	bl	800495c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006662:	4b0c      	ldr	r3, [pc, #48]	; (8006694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d202      	bcs.n	8006672 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800666c:	4a09      	ldr	r2, [pc, #36]	; (8006694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6013      	str	r3, [r2, #0]
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000d74 	.word	0x20000d74
 8006680:	20000c98 	.word	0x20000c98
 8006684:	20000d78 	.word	0x20000d78
 8006688:	20000d5c 	.word	0x20000d5c
 800668c:	20000d2c 	.word	0x20000d2c
 8006690:	20000d28 	.word	0x20000d28
 8006694:	20000d90 	.word	0x20000d90

08006698 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80066a2:	f000 fb31 	bl	8006d08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80066a6:	4b11      	ldr	r3, [pc, #68]	; (80066ec <xTimerCreateTimerTask+0x54>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <xTimerCreateTimerTask+0x58>)
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	2302      	movs	r3, #2
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	2300      	movs	r3, #0
 80066b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80066bc:	490d      	ldr	r1, [pc, #52]	; (80066f4 <xTimerCreateTimerTask+0x5c>)
 80066be:	480e      	ldr	r0, [pc, #56]	; (80066f8 <xTimerCreateTimerTask+0x60>)
 80066c0:	f7fe ff46 	bl	8005550 <xTaskCreate>
 80066c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	603b      	str	r3, [r7, #0]
    }
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80066e2:	687b      	ldr	r3, [r7, #4]
    }
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20000dcc 	.word	0x20000dcc
 80066f0:	20000dd0 	.word	0x20000dd0
 80066f4:	08013978 	.word	0x08013978
 80066f8:	080068e9 	.word	0x080068e9

080066fc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800670a:	202c      	movs	r0, #44	; 0x2c
 800670c:	f000 fd86 	bl	800721c <pvPortMalloc>
 8006710:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f805 	bl	800673e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006734:	697b      	ldr	r3, [r7, #20]
        }
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	617b      	str	r3, [r7, #20]
    }
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01e      	beq.n	80067ac <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800676e:	f000 facb 	bl	8006d08 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	3304      	adds	r3, #4
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe f8b3 	bl	80048fa <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a0:	f043 0304 	orr.w	r3, r3, #4
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80067ac:	bf00      	nop
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	; 0x28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xTimerGenericCommand+0x2e>
        __asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	623b      	str	r3, [r7, #32]
    }
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80067e2:	4b1a      	ldr	r3, [pc, #104]	; (800684c <xTimerGenericCommand+0x98>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d02a      	beq.n	8006840 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	dc18      	bgt.n	800682e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067fc:	f7ff fbec 	bl	8005fd8 <xTaskGetSchedulerState>
 8006800:	4603      	mov	r3, r0
 8006802:	2b02      	cmp	r3, #2
 8006804:	d109      	bne.n	800681a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <xTimerGenericCommand+0x98>)
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	f107 0114 	add.w	r1, r7, #20
 800680e:	2300      	movs	r3, #0
 8006810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006812:	f7fe f9f1 	bl	8004bf8 <xQueueGenericSend>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24
 8006818:	e012      	b.n	8006840 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800681a:	4b0c      	ldr	r3, [pc, #48]	; (800684c <xTimerGenericCommand+0x98>)
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	f107 0114 	add.w	r1, r7, #20
 8006822:	2300      	movs	r3, #0
 8006824:	2200      	movs	r2, #0
 8006826:	f7fe f9e7 	bl	8004bf8 <xQueueGenericSend>
 800682a:	6278      	str	r0, [r7, #36]	; 0x24
 800682c:	e008      	b.n	8006840 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <xTimerGenericCommand+0x98>)
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f107 0114 	add.w	r1, r7, #20
 8006836:	2300      	movs	r3, #0
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	f7fe fadb 	bl	8004df4 <xQueueGenericSendFromISR>
 800683e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006842:	4618      	mov	r0, r3
 8006844:	3728      	adds	r7, #40	; 0x28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000dcc 	.word	0x20000dcc

08006850 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af02      	add	r7, sp, #8
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685a:	4b22      	ldr	r3, [pc, #136]	; (80068e4 <prvProcessExpiredTimer+0x94>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3304      	adds	r3, #4
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe f8b0 	bl	80049ce <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d022      	beq.n	80068c2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	699a      	ldr	r2, [r3, #24]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	18d1      	adds	r1, r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	6978      	ldr	r0, [r7, #20]
 800688a:	f000 f8d1 	bl	8006a30 <prvInsertTimerInActiveList>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01f      	beq.n	80068d4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006894:	2300      	movs	r3, #0
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	2100      	movs	r1, #0
 800689e:	6978      	ldr	r0, [r7, #20]
 80068a0:	f7ff ff88 	bl	80067b4 <xTimerGenericCommand>
 80068a4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d113      	bne.n	80068d4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
    }
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	6978      	ldr	r0, [r7, #20]
 80068da:	4798      	blx	r3
    }
 80068dc:	bf00      	nop
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000dc4 	.word	0x20000dc4

080068e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f857 	bl	80069a8 <prvGetNextExpireTime>
 80068fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f803 	bl	800690c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006906:	f000 f8d5 	bl	8006ab4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800690a:	e7f1      	b.n	80068f0 <prvTimerTask+0x8>

0800690c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006916:	f7fe ffb3 	bl	8005880 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4618      	mov	r0, r3
 8006920:	f000 f866 	bl	80069f0 <prvSampleTimeNow>
 8006924:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d130      	bne.n	800698e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <prvProcessTimerOrBlockTask+0x3c>
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	429a      	cmp	r2, r3
 8006938:	d806      	bhi.n	8006948 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800693a:	f7fe ffaf 	bl	800589c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff85 	bl	8006850 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006946:	e024      	b.n	8006992 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d008      	beq.n	8006960 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800694e:	4b13      	ldr	r3, [pc, #76]	; (800699c <prvProcessTimerOrBlockTask+0x90>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <prvProcessTimerOrBlockTask+0x50>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <prvProcessTimerOrBlockTask+0x52>
 800695c:	2300      	movs	r3, #0
 800695e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <prvProcessTimerOrBlockTask+0x94>)
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	4619      	mov	r1, r3
 800696e:	f7fe fdbb 	bl	80054e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006972:	f7fe ff93 	bl	800589c <xTaskResumeAll>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvProcessTimerOrBlockTask+0x98>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
    }
 800698c:	e001      	b.n	8006992 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800698e:	f7fe ff85 	bl	800589c <xTaskResumeAll>
    }
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000dc8 	.word	0x20000dc8
 80069a0:	20000dcc 	.word	0x20000dcc
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069b0:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <prvGetNextExpireTime+0x44>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <prvGetNextExpireTime+0x16>
 80069ba:	2201      	movs	r2, #1
 80069bc:	e000      	b.n	80069c0 <prvGetNextExpireTime+0x18>
 80069be:	2200      	movs	r2, #0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <prvGetNextExpireTime+0x44>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e001      	b.n	80069dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80069dc:	68fb      	ldr	r3, [r7, #12]
    }
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000dc4 	.word	0x20000dc4

080069f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80069f8:	f7fe ffec 	bl	80059d4 <xTaskGetTickCount>
 80069fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <prvSampleTimeNow+0x3c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d205      	bcs.n	8006a14 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006a08:	f000 f91a 	bl	8006c40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006a1a:	4a04      	ldr	r2, [pc, #16]	; (8006a2c <prvSampleTimeNow+0x3c>)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006a20:	68fb      	ldr	r3, [r7, #12]
    }
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000dd4 	.word	0x20000dd4

08006a30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d812      	bhi.n	8006a7c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	1ad2      	subs	r2, r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d302      	bcc.n	8006a6a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e01b      	b.n	8006aa2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a6a:	4b10      	ldr	r3, [pc, #64]	; (8006aac <prvInsertTimerInActiveList+0x7c>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7fd ff71 	bl	800495c <vListInsert>
 8006a7a:	e012      	b.n	8006aa2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d206      	bcs.n	8006a92 <prvInsertTimerInActiveList+0x62>
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d302      	bcc.n	8006a92 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e007      	b.n	8006aa2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a92:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <prvInsertTimerInActiveList+0x80>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f7fd ff5d 	bl	800495c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006aa2:	697b      	ldr	r3, [r7, #20]
    }
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000dc8 	.word	0x20000dc8
 8006ab0:	20000dc4 	.word	0x20000dc4

08006ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08c      	sub	sp, #48	; 0x30
 8006ab8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aba:	e0ae      	b.n	8006c1a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f2c0 80aa 	blt.w	8006c18 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fd ff7a 	bl	80049ce <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff87 	bl	80069f0 <prvSampleTimeNow>
 8006ae2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b09      	cmp	r3, #9
 8006ae8:	f200 8097 	bhi.w	8006c1a <prvProcessReceivedCommands+0x166>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <prvProcessReceivedCommands+0x40>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b1d 	.word	0x08006b1d
 8006b00:	08006b91 	.word	0x08006b91
 8006b04:	08006ba5 	.word	0x08006ba5
 8006b08:	08006bef 	.word	0x08006bef
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b1d 	.word	0x08006b1d
 8006b14:	08006b91 	.word	0x08006b91
 8006b18:	08006ba5 	.word	0x08006ba5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	18d1      	adds	r1, r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a3a      	ldr	r2, [r7, #32]
 8006b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b3c:	f7ff ff78 	bl	8006a30 <prvInsertTimerInActiveList>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d069      	beq.n	8006c1a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b4c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d05e      	beq.n	8006c1a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	441a      	add	r2, r3
 8006b64:	2300      	movs	r3, #0
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b6e:	f7ff fe21 	bl	80067b4 <xTimerGenericCommand>
 8006b72:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d14f      	bne.n	8006c1a <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	61bb      	str	r3, [r7, #24]
    }
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b96:	f023 0301 	bic.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006ba2:	e03a      	b.n	8006c1a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	617b      	str	r3, [r7, #20]
    }
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	18d1      	adds	r1, r2, r3
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	6a3a      	ldr	r2, [r7, #32]
 8006be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be8:	f7ff ff22 	bl	8006a30 <prvInsertTimerInActiveList>
                        break;
 8006bec:	e015      	b.n	8006c1a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bfe:	f000 fbed 	bl	80073dc <vPortFree>
 8006c02:	e00a      	b.n	8006c1a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006c16:	e000      	b.n	8006c1a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006c18:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c1a:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <prvProcessReceivedCommands+0x188>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f107 0108 	add.w	r1, r7, #8
 8006c22:	2200      	movs	r2, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe f98f 	bl	8004f48 <xQueueReceive>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f af45 	bne.w	8006abc <prvProcessReceivedCommands+0x8>
        }
    }
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	3728      	adds	r7, #40	; 0x28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000dcc 	.word	0x20000dcc

08006c40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c46:	e048      	b.n	8006cda <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c48:	4b2d      	ldr	r3, [pc, #180]	; (8006d00 <prvSwitchTimerLists+0xc0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c52:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <prvSwitchTimerLists+0xc0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd feb4 	bl	80049ce <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d02e      	beq.n	8006cda <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4413      	add	r3, r2
 8006c84:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d90e      	bls.n	8006cac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c9a:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <prvSwitchTimerLists+0xc0>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	f7fd fe59 	bl	800495c <vListInsert>
 8006caa:	e016      	b.n	8006cda <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff fd7c 	bl	80067b4 <xTimerGenericCommand>
 8006cbc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	603b      	str	r3, [r7, #0]
    }
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <prvSwitchTimerLists+0xc0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1b1      	bne.n	8006c48 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <prvSwitchTimerLists+0xc0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <prvSwitchTimerLists+0xc4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a04      	ldr	r2, [pc, #16]	; (8006d00 <prvSwitchTimerLists+0xc0>)
 8006cf0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006cf2:	4a04      	ldr	r2, [pc, #16]	; (8006d04 <prvSwitchTimerLists+0xc4>)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	6013      	str	r3, [r2, #0]
    }
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000dc4 	.word	0x20000dc4
 8006d04:	20000dc8 	.word	0x20000dc8

08006d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006d0c:	f000 f964 	bl	8006fd8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006d10:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <prvCheckForValidListAndQueue+0x54>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11d      	bne.n	8006d54 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006d18:	4811      	ldr	r0, [pc, #68]	; (8006d60 <prvCheckForValidListAndQueue+0x58>)
 8006d1a:	f7fd fdce 	bl	80048ba <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006d1e:	4811      	ldr	r0, [pc, #68]	; (8006d64 <prvCheckForValidListAndQueue+0x5c>)
 8006d20:	f7fd fdcb 	bl	80048ba <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006d24:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <prvCheckForValidListAndQueue+0x60>)
 8006d26:	4a0e      	ldr	r2, [pc, #56]	; (8006d60 <prvCheckForValidListAndQueue+0x58>)
 8006d28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <prvCheckForValidListAndQueue+0x64>)
 8006d2c:	4a0d      	ldr	r2, [pc, #52]	; (8006d64 <prvCheckForValidListAndQueue+0x5c>)
 8006d2e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006d30:	2200      	movs	r2, #0
 8006d32:	210c      	movs	r1, #12
 8006d34:	200a      	movs	r0, #10
 8006d36:	f7fd fedd 	bl	8004af4 <xQueueGenericCreate>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4a07      	ldr	r2, [pc, #28]	; (8006d5c <prvCheckForValidListAndQueue+0x54>)
 8006d3e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <prvCheckForValidListAndQueue+0x54>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <prvCheckForValidListAndQueue+0x54>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4908      	ldr	r1, [pc, #32]	; (8006d70 <prvCheckForValidListAndQueue+0x68>)
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fba0 	bl	8005494 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006d54:	f000 f970 	bl	8007038 <vPortExitCritical>
    }
 8006d58:	bf00      	nop
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000dcc 	.word	0x20000dcc
 8006d60:	20000d9c 	.word	0x20000d9c
 8006d64:	20000db0 	.word	0x20000db0
 8006d68:	20000dc4 	.word	0x20000dc4
 8006d6c:	20000dc8 	.word	0x20000dc8
 8006d70:	08013980 	.word	0x08013980

08006d74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3b04      	subs	r3, #4
 8006d84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3b04      	subs	r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 0201 	bic.w	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3b04      	subs	r3, #4
 8006da2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006da4:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <pxPortInitialiseStack+0x64>)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3b14      	subs	r3, #20
 8006dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3b04      	subs	r3, #4
 8006dba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f06f 0202 	mvn.w	r2, #2
 8006dc2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3b20      	subs	r3, #32
 8006dc8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006dca:	68fb      	ldr	r3, [r7, #12]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	08006ddd 	.word	0x08006ddd

08006ddc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <prvTaskExitError+0x54>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d00a      	beq.n	8006e06 <prvTaskExitError+0x2a>
        __asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
    }
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <prvTaskExitError+0x28>
        __asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60bb      	str	r3, [r7, #8]
    }
 8006e18:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006e1a:	bf00      	nop
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0fc      	beq.n	8006e1c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	2000003c 	.word	0x2000003c
	...

08006e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <pxCurrentTCBConst2>)
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f380 8809 	msr	PSP, r0
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f380 8811 	msr	BASEPRI, r0
 8006e5a:	4770      	bx	lr
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst2>:
 8006e60:	20000c98 	.word	0x20000c98
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006e68:	4808      	ldr	r0, [pc, #32]	; (8006e8c <prvPortStartFirstTask+0x24>)
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	6800      	ldr	r0, [r0, #0]
 8006e6e:	f380 8808 	msr	MSP, r0
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8814 	msr	CONTROL, r0
 8006e7a:	b662      	cpsie	i
 8006e7c:	b661      	cpsie	f
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	df00      	svc	0
 8006e88:	bf00      	nop
 8006e8a:	0000      	.short	0x0000
 8006e8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop

08006e94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e9a:	4b46      	ldr	r3, [pc, #280]	; (8006fb4 <xPortStartScheduler+0x120>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a46      	ldr	r2, [pc, #280]	; (8006fb8 <xPortStartScheduler+0x124>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d10a      	bne.n	8006eba <xPortStartScheduler+0x26>
        __asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	613b      	str	r3, [r7, #16]
    }
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006eba:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <xPortStartScheduler+0x120>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a3f      	ldr	r2, [pc, #252]	; (8006fbc <xPortStartScheduler+0x128>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d10a      	bne.n	8006eda <xPortStartScheduler+0x46>
        __asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
    }
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006eda:	4b39      	ldr	r3, [pc, #228]	; (8006fc0 <xPortStartScheduler+0x12c>)
 8006edc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	22ff      	movs	r2, #255	; 0xff
 8006eea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <xPortStartScheduler+0x130>)
 8006f00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f02:	4b31      	ldr	r3, [pc, #196]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f04:	2207      	movs	r2, #7
 8006f06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f08:	e009      	b.n	8006f1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b80      	cmp	r3, #128	; 0x80
 8006f28:	d0ef      	beq.n	8006f0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f2a:	4b27      	ldr	r3, [pc, #156]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f1c3 0307 	rsb	r3, r3, #7
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d00a      	beq.n	8006f4c <xPortStartScheduler+0xb8>
        __asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	60bb      	str	r3, [r7, #8]
    }
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f4c:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f56:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f5e:	4a1a      	ldr	r2, [pc, #104]	; (8006fc8 <xPortStartScheduler+0x134>)
 8006f60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006f6a:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <xPortStartScheduler+0x138>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <xPortStartScheduler+0x138>)
 8006f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006f76:	4b15      	ldr	r3, [pc, #84]	; (8006fcc <xPortStartScheduler+0x138>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <xPortStartScheduler+0x138>)
 8006f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006f82:	f000 f8db 	bl	800713c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006f86:	4b12      	ldr	r3, [pc, #72]	; (8006fd0 <xPortStartScheduler+0x13c>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006f8c:	f000 f8fa 	bl	8007184 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f90:	4b10      	ldr	r3, [pc, #64]	; (8006fd4 <xPortStartScheduler+0x140>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <xPortStartScheduler+0x140>)
 8006f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006f9c:	f7ff ff64 	bl	8006e68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006fa0:	f7fe fdd2 	bl	8005b48 <vTaskSwitchContext>
    prvTaskExitError();
 8006fa4:	f7ff ff1a 	bl	8006ddc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	e000ed00 	.word	0xe000ed00
 8006fb8:	410fc271 	.word	0x410fc271
 8006fbc:	410fc270 	.word	0x410fc270
 8006fc0:	e000e400 	.word	0xe000e400
 8006fc4:	20000dd8 	.word	0x20000dd8
 8006fc8:	20000ddc 	.word	0x20000ddc
 8006fcc:	e000ed20 	.word	0xe000ed20
 8006fd0:	2000003c 	.word	0x2000003c
 8006fd4:	e000ef34 	.word	0xe000ef34

08006fd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
        __asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	607b      	str	r3, [r7, #4]
    }
 8006ff0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <vPortEnterCritical+0x58>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	4a0d      	ldr	r2, [pc, #52]	; (8007030 <vPortEnterCritical+0x58>)
 8006ffa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <vPortEnterCritical+0x58>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10f      	bne.n	8007024 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <vPortEnterCritical+0x5c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <vPortEnterCritical+0x4c>
        __asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	603b      	str	r3, [r7, #0]
    }
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <vPortEnterCritical+0x4a>
    }
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	2000003c 	.word	0x2000003c
 8007034:	e000ed04 	.word	0xe000ed04

08007038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <vPortExitCritical+0x50>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <vPortExitCritical+0x24>
        __asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	607b      	str	r3, [r7, #4]
    }
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <vPortExitCritical+0x50>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3b01      	subs	r3, #1
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <vPortExitCritical+0x50>)
 8007064:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <vPortExitCritical+0x50>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <vPortExitCritical+0x42>
 800706e:	2300      	movs	r3, #0
 8007070:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	f383 8811 	msr	BASEPRI, r3
    }
 8007078:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	2000003c 	.word	0x2000003c
 800708c:	00000000 	.word	0x00000000

08007090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007090:	f3ef 8009 	mrs	r0, PSP
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <pxCurrentTCBConst>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	f01e 0f10 	tst.w	lr, #16
 80070a0:	bf08      	it	eq
 80070a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070aa:	6010      	str	r0, [r2, #0]
 80070ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070b4:	f380 8811 	msr	BASEPRI, r0
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f7fe fd42 	bl	8005b48 <vTaskSwitchContext>
 80070c4:	f04f 0000 	mov.w	r0, #0
 80070c8:	f380 8811 	msr	BASEPRI, r0
 80070cc:	bc09      	pop	{r0, r3}
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	6808      	ldr	r0, [r1, #0]
 80070d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d6:	f01e 0f10 	tst.w	lr, #16
 80070da:	bf08      	it	eq
 80070dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070e0:	f380 8809 	msr	PSP, r0
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	f3af 8000 	nop.w

080070f0 <pxCurrentTCBConst>:
 80070f0:	20000c98 	.word	0x20000c98
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop

080070f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
        __asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
    }
 8007110:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007112:	f7fe fc6f 	bl	80059f4 <xTaskIncrementTick>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <SysTick_Handler+0x40>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f383 8811 	msr	BASEPRI, r3
    }
 800712e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007146:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <vPortSetupTimerInterrupt+0x38>)
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <vPortSetupTimerInterrupt+0x3c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <vPortSetupTimerInterrupt+0x40>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	099b      	lsrs	r3, r3, #6
 8007158:	4a09      	ldr	r2, [pc, #36]	; (8007180 <vPortSetupTimerInterrupt+0x44>)
 800715a:	3b01      	subs	r3, #1
 800715c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800715e:	4b04      	ldr	r3, [pc, #16]	; (8007170 <vPortSetupTimerInterrupt+0x34>)
 8007160:	2207      	movs	r2, #7
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000e010 	.word	0xe000e010
 8007174:	e000e018 	.word	0xe000e018
 8007178:	20000000 	.word	0x20000000
 800717c:	10624dd3 	.word	0x10624dd3
 8007180:	e000e014 	.word	0xe000e014

08007184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007194 <vPortEnableVFP+0x10>
 8007188:	6801      	ldr	r1, [r0, #0]
 800718a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800718e:	6001      	str	r1, [r0, #0]
 8007190:	4770      	bx	lr
 8007192:	0000      	.short	0x0000
 8007194:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop

0800719c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80071a2:	f3ef 8305 	mrs	r3, IPSR
 80071a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d914      	bls.n	80071d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071ae:	4a17      	ldr	r2, [pc, #92]	; (800720c <vPortValidateInterruptPriority+0x70>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4413      	add	r3, r2
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071b8:	4b15      	ldr	r3, [pc, #84]	; (8007210 <vPortValidateInterruptPriority+0x74>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	7afa      	ldrb	r2, [r7, #11]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d20a      	bcs.n	80071d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	607b      	str	r3, [r7, #4]
    }
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <vPortValidateInterruptPriority+0x78>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <vPortValidateInterruptPriority+0x7c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d90a      	bls.n	80071fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	603b      	str	r3, [r7, #0]
    }
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <vPortValidateInterruptPriority+0x60>
    }
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	e000e3f0 	.word	0xe000e3f0
 8007210:	20000dd8 	.word	0x20000dd8
 8007214:	e000ed0c 	.word	0xe000ed0c
 8007218:	20000ddc 	.word	0x20000ddc

0800721c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007228:	f7fe fb2a 	bl	8005880 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800722c:	4b65      	ldr	r3, [pc, #404]	; (80073c4 <pvPortMalloc+0x1a8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007234:	f000 f934 	bl	80074a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007238:	4b63      	ldr	r3, [pc, #396]	; (80073c8 <pvPortMalloc+0x1ac>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 80a7 	bne.w	8007394 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d02d      	beq.n	80072a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800724c:	2208      	movs	r2, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	429a      	cmp	r2, r3
 8007256:	d227      	bcs.n	80072a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007258:	2208      	movs	r2, #8
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4413      	add	r3, r2
 800725e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	2b00      	cmp	r3, #0
 8007268:	d021      	beq.n	80072ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f023 0307 	bic.w	r3, r3, #7
 8007270:	3308      	adds	r3, #8
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	d214      	bcs.n	80072a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	3308      	adds	r3, #8
 8007280:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <pvPortMalloc+0x92>
        __asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	617b      	str	r3, [r7, #20]
    }
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a6:	e002      	b.n	80072ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	e000      	b.n	80072b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d06e      	beq.n	8007394 <pvPortMalloc+0x178>
 80072b6:	4b45      	ldr	r3, [pc, #276]	; (80073cc <pvPortMalloc+0x1b0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d869      	bhi.n	8007394 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80072c0:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <pvPortMalloc+0x1b4>)
 80072c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80072c4:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <pvPortMalloc+0x1b4>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ca:	e004      	b.n	80072d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d903      	bls.n	80072e8 <pvPortMalloc+0xcc>
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f1      	bne.n	80072cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80072e8:	4b36      	ldr	r3, [pc, #216]	; (80073c4 <pvPortMalloc+0x1a8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d050      	beq.n	8007394 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2208      	movs	r2, #8
 80072f8:	4413      	add	r3, r2
 80072fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	2308      	movs	r3, #8
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	429a      	cmp	r2, r3
 8007312:	d91f      	bls.n	8007354 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <pvPortMalloc+0x120>
        __asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	613b      	str	r3, [r7, #16]
    }
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800734e:	69b8      	ldr	r0, [r7, #24]
 8007350:	f000 f908 	bl	8007564 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007354:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <pvPortMalloc+0x1b0>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <pvPortMalloc+0x1b0>)
 8007360:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007362:	4b1a      	ldr	r3, [pc, #104]	; (80073cc <pvPortMalloc+0x1b0>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <pvPortMalloc+0x1b8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d203      	bcs.n	8007376 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800736e:	4b17      	ldr	r3, [pc, #92]	; (80073cc <pvPortMalloc+0x1b0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <pvPortMalloc+0x1b8>)
 8007374:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <pvPortMalloc+0x1ac>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	431a      	orrs	r2, r3
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <pvPortMalloc+0x1bc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <pvPortMalloc+0x1bc>)
 8007392:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007394:	f7fe fa82 	bl	800589c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f003 0307 	and.w	r3, r3, #7
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <pvPortMalloc+0x19c>
        __asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	60fb      	str	r3, [r7, #12]
    }
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80073b8:	69fb      	ldr	r3, [r7, #28]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3728      	adds	r7, #40	; 0x28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	200139e8 	.word	0x200139e8
 80073c8:	200139fc 	.word	0x200139fc
 80073cc:	200139ec 	.word	0x200139ec
 80073d0:	200139e0 	.word	0x200139e0
 80073d4:	200139f0 	.word	0x200139f0
 80073d8:	200139f4 	.word	0x200139f4

080073dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04d      	beq.n	800748a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80073ee:	2308      	movs	r3, #8
 80073f0:	425b      	negs	r3, r3
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	4b24      	ldr	r3, [pc, #144]	; (8007494 <vPortFree+0xb8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <vPortFree+0x44>
        __asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60fb      	str	r3, [r7, #12]
    }
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <vPortFree+0x62>
        __asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	60bb      	str	r3, [r7, #8]
    }
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	4b14      	ldr	r3, [pc, #80]	; (8007494 <vPortFree+0xb8>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11a      	bne.n	800748a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	4b0e      	ldr	r3, [pc, #56]	; (8007494 <vPortFree+0xb8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	43db      	mvns	r3, r3
 800745e:	401a      	ands	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007464:	f7fe fa0c 	bl	8005880 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <vPortFree+0xbc>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4413      	add	r3, r2
 8007472:	4a09      	ldr	r2, [pc, #36]	; (8007498 <vPortFree+0xbc>)
 8007474:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007476:	6938      	ldr	r0, [r7, #16]
 8007478:	f000 f874 	bl	8007564 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800747c:	4b07      	ldr	r3, [pc, #28]	; (800749c <vPortFree+0xc0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a06      	ldr	r2, [pc, #24]	; (800749c <vPortFree+0xc0>)
 8007484:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007486:	f7fe fa09 	bl	800589c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800748a:	bf00      	nop
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200139fc 	.word	0x200139fc
 8007498:	200139ec 	.word	0x200139ec
 800749c:	200139f8 	.word	0x200139f8

080074a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80074aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80074ac:	4b27      	ldr	r3, [pc, #156]	; (800754c <prvHeapInit+0xac>)
 80074ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00c      	beq.n	80074d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3307      	adds	r3, #7
 80074be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0307 	bic.w	r3, r3, #7
 80074c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	4a1f      	ldr	r2, [pc, #124]	; (800754c <prvHeapInit+0xac>)
 80074d0:	4413      	add	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074d8:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <prvHeapInit+0xb0>)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <prvHeapInit+0xb0>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	4413      	add	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80074ec:	2208      	movs	r2, #8
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0307 	bic.w	r3, r3, #7
 80074fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4a15      	ldr	r2, [pc, #84]	; (8007554 <prvHeapInit+0xb4>)
 8007500:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007502:	4b14      	ldr	r3, [pc, #80]	; (8007554 <prvHeapInit+0xb4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2200      	movs	r2, #0
 8007508:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <prvHeapInit+0xb4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007520:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <prvHeapInit+0xb4>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <prvHeapInit+0xb8>)
 800752e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a09      	ldr	r2, [pc, #36]	; (800755c <prvHeapInit+0xbc>)
 8007536:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <prvHeapInit+0xc0>)
 800753a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800753e:	601a      	str	r2, [r3, #0]
}
 8007540:	bf00      	nop
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20000de0 	.word	0x20000de0
 8007550:	200139e0 	.word	0x200139e0
 8007554:	200139e8 	.word	0x200139e8
 8007558:	200139f0 	.word	0x200139f0
 800755c:	200139ec 	.word	0x200139ec
 8007560:	200139fc 	.word	0x200139fc

08007564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800756c:	4b28      	ldr	r3, [pc, #160]	; (8007610 <prvInsertBlockIntoFreeList+0xac>)
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e002      	b.n	8007578 <prvInsertBlockIntoFreeList+0x14>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	429a      	cmp	r2, r3
 8007580:	d8f7      	bhi.n	8007572 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d108      	bne.n	80075a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	441a      	add	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	441a      	add	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d118      	bne.n	80075ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <prvInsertBlockIntoFreeList+0xb0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d00d      	beq.n	80075e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	441a      	add	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e008      	b.n	80075f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <prvInsertBlockIntoFreeList+0xb0>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e003      	b.n	80075f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d002      	beq.n	8007602 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007602:	bf00      	nop
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	200139e0 	.word	0x200139e0
 8007614:	200139e8 	.word	0x200139e8

08007618 <findShorterWay>:
int findShorterWay(char terminalGrid[7][7],
				   char Gridcopy[7][7],
				   float matrixCosts[7][7][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[20][2]){
 8007618:	b590      	push	{r4, r7, lr}
 800761a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800761e:	af00      	add	r7, sp, #0
 8007620:	f507 7404 	add.w	r4, r7, #528	; 0x210
 8007624:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 8007628:	6020      	str	r0, [r4, #0]
 800762a:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800762e:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 8007632:	6001      	str	r1, [r0, #0]
 8007634:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007638:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800763c:	600a      	str	r2, [r1, #0]
 800763e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007642:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007646:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8007648:	49c8      	ldr	r1, [pc, #800]	; (800796c <findShorterWay+0x354>)
 800764a:	48c9      	ldr	r0, [pc, #804]	; (8007970 <findShorterWay+0x358>)
 800764c:	f005 ff8a 	bl	800d564 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8007650:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800765c:	2300      	movs	r3, #0
 800765e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t i = 0;
 8007662:	2300      	movs	r3, #0
 8007664:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	uint8_t j = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	int position[2];
	uint8_t numberOfPositions = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	uint8_t counter = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t counterStudy = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[30][4] = {0};
 8007680:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007684:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8007688:	4618      	mov	r0, r3
 800768a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800768e:	461a      	mov	r2, r3
 8007690:	2100      	movs	r1, #0
 8007692:	f006 faf5 	bl	800dc80 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 8007696:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800769a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	f001 fa9c 	bl	8008bdc <getRows>
 80076a4:	4603      	mov	r3, r0
 80076a6:	461a      	mov	r2, r3
 80076a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076ac:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 80076b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	f001 fab1 	bl	8008c24 <getColums>
 80076c2:	4603      	mov	r3, r0
 80076c4:	461a      	mov	r2, r3
 80076c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076ca:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80076d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076d6:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80076da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076de:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 80076e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076e6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	6809      	ldr	r1, [r1, #0]
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	f001 fa21 	bl	8008b36 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 80076f4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80076f8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80076fc:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007700:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007704:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007708:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	f000 ff89 	bl	800862c <setHeuristic>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d012      	beq.n	8007746 <findShorterWay+0x12e>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 8007720:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 8007722:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007726:	f5a3 7104 	sub.w	r1, r3, #528	; 0x210
 800772a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800772e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007732:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8007736:	6809      	ldr	r1, [r1, #0]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f001 f990 	bl	8008a5e <findStart>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01e      	beq.n	8007782 <findShorterWay+0x16a>
 8007744:	e002      	b.n	800774c <findShorterWay+0x134>
    	return 0;
 8007746:	2300      	movs	r3, #0
 8007748:	f000 beb6 	b.w	80084b8 <findShorterWay+0xea0>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 800774c:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 800774e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007754:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007758:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 800775a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800775e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007760:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007764:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8007766:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800776a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800776c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007770:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8007772:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007778:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800777c:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 800777e:	f000 bdc1 	b.w	8008304 <findShorterWay+0xcec>
    	return 0;
 8007782:	2300      	movs	r3, #0
 8007784:	f000 be98 	b.w	80084b8 <findShorterWay+0xea0>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 8007788:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800778c:	691a      	ldr	r2, [r3, #16]
 800778e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007792:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 8007794:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007798:	695a      	ldr	r2, [r3, #20]
 800779a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800779e:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 80077a0:	2300      	movs	r3, #0
 80077a2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80077a6:	e09a      	b.n	80078de <findShorterWay+0x2c6>
    		for (j = 0; j < 3; j++){
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80077ae:	e08c      	b.n	80078ca <findShorterWay+0x2b2>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 80077b0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80077ba:	4413      	add	r3, r2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	dd07      	ble.n	80077d0 <findShorterWay+0x1b8>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 80077c0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80077ca:	4413      	add	r3, r2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dc0e      	bgt.n	80077ee <findShorterWay+0x1d6>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 80077d0:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80077d4:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80077d8:	4613      	mov	r3, r2
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	4413      	add	r3, r2
 80077de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80077e2:	443b      	add	r3, r7
 80077e4:	440b      	add	r3, r1
 80077e6:	3b18      	subs	r3, #24
 80077e8:	2230      	movs	r2, #48	; 0x30
 80077ea:	701a      	strb	r2, [r3, #0]
 80077ec:	e068      	b.n	80078c0 <findShorterWay+0x2a8>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 80077ee:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80077f8:	4413      	add	r3, r2
 80077fa:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80077fe:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	7a12      	ldrb	r2, [r2, #8]
 8007806:	4293      	cmp	r3, r2
 8007808:	dc0d      	bgt.n	8007826 <findShorterWay+0x20e>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 800780a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007814:	4413      	add	r3, r2
 8007816:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800781a:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	7a52      	ldrb	r2, [r2, #9]
 8007822:	4293      	cmp	r3, r2
 8007824:	dd0e      	ble.n	8007844 <findShorterWay+0x22c>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 8007826:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800782a:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800782e:	4613      	mov	r3, r2
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	4413      	add	r3, r2
 8007834:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007838:	443b      	add	r3, r7
 800783a:	440b      	add	r3, r1
 800783c:	3b18      	subs	r3, #24
 800783e:	2230      	movs	r2, #48	; 0x30
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e03d      	b.n	80078c0 <findShorterWay+0x2a8>
    			}else if(i == 1 && j == 1){
 8007844:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007848:	2b01      	cmp	r3, #1
 800784a:	d112      	bne.n	8007872 <findShorterWay+0x25a>
 800784c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10e      	bne.n	8007872 <findShorterWay+0x25a>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8007854:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007858:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800785c:	4613      	mov	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007866:	443b      	add	r3, r7
 8007868:	440b      	add	r3, r1
 800786a:	3b18      	subs	r3, #24
 800786c:	2250      	movs	r2, #80	; 0x50
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	e026      	b.n	80078c0 <findShorterWay+0x2a8>
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8007872:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800787c:	4413      	add	r3, r2
 800787e:	461a      	mov	r2, r3
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	3b07      	subs	r3, #7
 8007888:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800788c:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	18d0      	adds	r0, r2, r3
 8007894:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800789e:	4413      	add	r3, r2
 80078a0:	3b01      	subs	r3, #1
 80078a2:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80078a6:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80078aa:	5cc0      	ldrb	r0, [r0, r3]
 80078ac:	4613      	mov	r3, r2
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078b6:	443b      	add	r3, r7
 80078b8:	440b      	add	r3, r1
 80078ba:	3b18      	subs	r3, #24
 80078bc:	4602      	mov	r2, r0
 80078be:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 80078c0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80078c4:	3301      	adds	r3, #1
 80078c6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80078ca:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	f67f af6e 	bls.w	80077b0 <findShorterWay+0x198>
    	for(i = 0; i < 3; i++){
 80078d4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80078d8:	3301      	adds	r3, #1
 80078da:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80078de:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	f67f af60 	bls.w	80077a8 <findShorterWay+0x190>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 80078e8:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 80078ec:	461a      	mov	r2, r3
 80078ee:	4921      	ldr	r1, [pc, #132]	; (8007974 <findShorterWay+0x35c>)
 80078f0:	4821      	ldr	r0, [pc, #132]	; (8007978 <findShorterWay+0x360>)
 80078f2:	f006 ff27 	bl	800e744 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 80078f6:	4920      	ldr	r1, [pc, #128]	; (8007978 <findShorterWay+0x360>)
 80078f8:	481d      	ldr	r0, [pc, #116]	; (8007970 <findShorterWay+0x358>)
 80078fa:	f005 fe33 	bl	800d564 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007904:	e026      	b.n	8007954 <findShorterWay+0x33c>
			for (j = 0; j < 3; j++){
 8007906:	2300      	movs	r3, #0
 8007908:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800790c:	e015      	b.n	800793a <findShorterWay+0x322>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 800790e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007912:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 8007916:	4613      	mov	r3, r2
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4413      	add	r3, r2
 800791c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007920:	443b      	add	r3, r7
 8007922:	440b      	add	r3, r1
 8007924:	3b18      	subs	r3, #24
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	4619      	mov	r1, r3
 800792a:	4811      	ldr	r0, [pc, #68]	; (8007970 <findShorterWay+0x358>)
 800792c:	f005 fe02 	bl	800d534 <writeChar>
			for (j = 0; j < 3; j++){
 8007930:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007934:	3301      	adds	r3, #1
 8007936:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800793a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800793e:	2b02      	cmp	r3, #2
 8007940:	d9e5      	bls.n	800790e <findShorterWay+0x2f6>
			}
			writeChar(&handlerAstarUsart, '\r');
 8007942:	210d      	movs	r1, #13
 8007944:	480a      	ldr	r0, [pc, #40]	; (8007970 <findShorterWay+0x358>)
 8007946:	f005 fdf5 	bl	800d534 <writeChar>
    	for(i = 0; i < 3; i++){
 800794a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800794e:	3301      	adds	r3, #1
 8007950:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007954:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007958:	2b02      	cmp	r3, #2
 800795a:	d9d4      	bls.n	8007906 <findShorterWay+0x2ee>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 800795c:	210d      	movs	r1, #13
 800795e:	4804      	ldr	r0, [pc, #16]	; (8007970 <findShorterWay+0x358>)
 8007960:	f005 fde8 	bl	800d534 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 800796a:	e01b      	b.n	80079a4 <findShorterWay+0x38c>
 800796c:	08013988 	.word	0x08013988
 8007970:	20013a00 	.word	0x20013a00
 8007974:	080139bc 	.word	0x080139bc
 8007978:	20013aac 	.word	0x20013aac
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 800797c:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8007980:	4613      	mov	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800798a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	4413      	add	r3, r2
 8007992:	4619      	mov	r1, r3
 8007994:	48b2      	ldr	r0, [pc, #712]	; (8007c60 <findShorterWay+0x648>)
 8007996:	f005 fde5 	bl	800d564 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800799a:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 800799e:	3301      	adds	r3, #1
 80079a0:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 80079a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80079a8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	7a1b      	ldrb	r3, [r3, #8]
 80079b0:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3e1      	bcc.n	800797c <findShorterWay+0x364>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 80079b8:	210d      	movs	r1, #13
 80079ba:	48a9      	ldr	r0, [pc, #676]	; (8007c60 <findShorterWay+0x648>)
 80079bc:	f005 fdba 	bl	800d534 <writeChar>


    	for(i = 0; i < 3; i++){
 80079c0:	2300      	movs	r3, #0
 80079c2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80079c6:	e275      	b.n	8007eb4 <findShorterWay+0x89c>
			for (j = 0; j < 3; j++){
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80079ce:	e261      	b.n	8007e94 <findShorterWay+0x87c>
				switch (nineSlotsMatriz[i][j]) {
 80079d0:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80079d4:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80079e2:	443b      	add	r3, r7
 80079e4:	440b      	add	r3, r1
 80079e6:	3b18      	subs	r3, #24
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b73      	cmp	r3, #115	; 0x73
 80079ec:	d074      	beq.n	8007ad8 <findShorterWay+0x4c0>
 80079ee:	2b73      	cmp	r3, #115	; 0x73
 80079f0:	f300 8245 	bgt.w	8007e7e <findShorterWay+0x866>
 80079f4:	2b50      	cmp	r3, #80	; 0x50
 80079f6:	dc65      	bgt.n	8007ac4 <findShorterWay+0x4ac>
 80079f8:	2b23      	cmp	r3, #35	; 0x23
 80079fa:	f2c0 8240 	blt.w	8007e7e <findShorterWay+0x866>
 80079fe:	3b23      	subs	r3, #35	; 0x23
 8007a00:	2b2d      	cmp	r3, #45	; 0x2d
 8007a02:	f200 823c 	bhi.w	8007e7e <findShorterWay+0x866>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <findShorterWay+0x3f4>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007acd 	.word	0x08007acd
 8007a10:	08007e7f 	.word	0x08007e7f
 8007a14:	08007e7f 	.word	0x08007e7f
 8007a18:	08007e7f 	.word	0x08007e7f
 8007a1c:	08007e7f 	.word	0x08007e7f
 8007a20:	08007e7f 	.word	0x08007e7f
 8007a24:	08007e7f 	.word	0x08007e7f
 8007a28:	08007c65 	.word	0x08007c65
 8007a2c:	08007e7f 	.word	0x08007e7f
 8007a30:	08007e7f 	.word	0x08007e7f
 8007a34:	08007e7f 	.word	0x08007e7f
 8007a38:	08007e7f 	.word	0x08007e7f
 8007a3c:	08007e7f 	.word	0x08007e7f
 8007a40:	08007ad5 	.word	0x08007ad5
 8007a44:	08007e7f 	.word	0x08007e7f
 8007a48:	08007e7f 	.word	0x08007e7f
 8007a4c:	08007e7f 	.word	0x08007e7f
 8007a50:	08007e7f 	.word	0x08007e7f
 8007a54:	08007e7f 	.word	0x08007e7f
 8007a58:	08007e7f 	.word	0x08007e7f
 8007a5c:	08007e7f 	.word	0x08007e7f
 8007a60:	08007e7f 	.word	0x08007e7f
 8007a64:	08007e7f 	.word	0x08007e7f
 8007a68:	08007e7f 	.word	0x08007e7f
 8007a6c:	08007e7f 	.word	0x08007e7f
 8007a70:	08007e7f 	.word	0x08007e7f
 8007a74:	08007e7f 	.word	0x08007e7f
 8007a78:	08007e7f 	.word	0x08007e7f
 8007a7c:	08007e7f 	.word	0x08007e7f
 8007a80:	08007e7f 	.word	0x08007e7f
 8007a84:	08007e7f 	.word	0x08007e7f
 8007a88:	08007e7f 	.word	0x08007e7f
 8007a8c:	08007e7f 	.word	0x08007e7f
 8007a90:	08007ad1 	.word	0x08007ad1
 8007a94:	08007e7f 	.word	0x08007e7f
 8007a98:	08007e7f 	.word	0x08007e7f
 8007a9c:	08007e7f 	.word	0x08007e7f
 8007aa0:	08007e7f 	.word	0x08007e7f
 8007aa4:	08007e7f 	.word	0x08007e7f
 8007aa8:	08007e7f 	.word	0x08007e7f
 8007aac:	08007e7f 	.word	0x08007e7f
 8007ab0:	08007e7f 	.word	0x08007e7f
 8007ab4:	08007e7f 	.word	0x08007e7f
 8007ab8:	08007e7f 	.word	0x08007e7f
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	2b65      	cmp	r3, #101	; 0x65
 8007ac6:	f000 81c3 	beq.w	8007e50 <findShorterWay+0x838>
 8007aca:	e1d8      	b.n	8007e7e <findShorterWay+0x866>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 8007acc:	bf00      	nop
						break;
 8007ace:	e1d8      	b.n	8007e82 <findShorterWay+0x86a>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 8007ad0:	bf00      	nop
						break;
 8007ad2:	e1d6      	b.n	8007e82 <findShorterWay+0x86a>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 8007ad4:	bf00      	nop
						break;
 8007ad6:	e1d4      	b.n	8007e82 <findShorterWay+0x86a>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 8007ad8:	bf00      	nop
						break;
 8007ada:	e1d2      	b.n	8007e82 <findShorterWay+0x86a>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 8007adc:	bf00      	nop
						break;
 8007ade:	e1d0      	b.n	8007e82 <findShorterWay+0x86a>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 8007ae0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ae4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007ae8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007aec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 8007af0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007af4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007af8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007afc:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007b00:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	f000 ff3b 	bl	8008986 <setFcost>
 8007b10:	eef0 7a40 	vmov.f32	s15, s0
 8007b14:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b18:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 8007b1c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b20:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b24:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007b2e:	4413      	add	r3, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	23a8      	movs	r3, #168	; 0xa8
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	3ba8      	subs	r3, #168	; 0xa8
 8007b3a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007b3e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007b42:	6812      	ldr	r2, [r2, #0]
 8007b44:	18d1      	adds	r1, r2, r3
 8007b46:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007b50:	4413      	add	r3, r2
 8007b52:	1e5a      	subs	r2, r3, #1
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	440b      	add	r3, r1
 8007b5e:	3304      	adds	r3, #4
 8007b60:	edd3 7a00 	vldr	s15, [r3]
 8007b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	db01      	blt.n	8007b72 <findShorterWay+0x55a>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8007b6e:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 8007b70:	e187      	b.n	8007e82 <findShorterWay+0x86a>
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8007b72:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b76:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007b7a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007b7e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007b82:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f000 fcf3 	bl	8008578 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 8007b92:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b96:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007b9a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007b9e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ba2:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f000 fd0f 	bl	80085d0 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8007bb2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007bb6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007bba:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007bc4:	f000 fc84 	bl	80084d0 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007bc8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007bd2:	4413      	add	r3, r2
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	23a8      	movs	r3, #168	; 0xa8
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	3ba8      	subs	r3, #168	; 0xa8
 8007bde:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007be2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	18d0      	adds	r0, r2, r3
 8007bea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007bf4:	4413      	add	r3, r2
 8007bf6:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007bf8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bfc:	6899      	ldr	r1, [r3, #8]
 8007bfe:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c02:	440b      	add	r3, r1
 8007c04:	4619      	mov	r1, r3
 8007c06:	23a8      	movs	r3, #168	; 0xa8
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	3ba8      	subs	r3, #168	; 0xa8
 8007c0e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007c12:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8007c16:	6809      	ldr	r1, [r1, #0]
 8007c18:	18cc      	adds	r4, r1, r3
 8007c1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c1e:	68d9      	ldr	r1, [r3, #12]
 8007c20:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c24:	440b      	add	r3, r1
 8007c26:	1e59      	subs	r1, r3, #1
 8007c28:	460b      	mov	r3, r1
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	440b      	add	r3, r1
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4423      	add	r3, r4
 8007c32:	3314      	adds	r3, #20
 8007c34:	edd3 7a00 	vldr	s15, [r3]
 8007c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c3c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007c40:	4613      	mov	r3, r2
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	4413      	add	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4403      	add	r3, r0
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007c4e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007c52:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007c56:	0123      	lsls	r3, r4, #4
 8007c58:	440b      	add	r3, r1
 8007c5a:	601a      	str	r2, [r3, #0]
						break;
 8007c5c:	e111      	b.n	8007e82 <findShorterWay+0x86a>
 8007c5e:	bf00      	nop
 8007c60:	20013a00 	.word	0x20013a00
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8007c64:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007c6c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c70:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8007c74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007c78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007c7c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007c80:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007c84:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007c8e:	6800      	ldr	r0, [r0, #0]
 8007c90:	f000 fc72 	bl	8008578 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8007c94:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007c98:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007c9c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007ca0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ca4:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007cae:	6800      	ldr	r0, [r0, #0]
 8007cb0:	f000 fc8e 	bl	80085d0 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8007cb4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007cb8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007cbc:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007cc6:	f000 fc03 	bl	80084d0 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8007cca:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007cd4:	4413      	add	r3, r2
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4613      	mov	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	3b07      	subs	r3, #7
 8007ce0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007ce4:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	441a      	add	r2, r3
 8007cec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cf0:	68d9      	ldr	r1, [r3, #12]
 8007cf2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007cf6:	440b      	add	r3, r1
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	214f      	movs	r1, #79	; 0x4f
 8007cfc:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8007cfe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d08:	4413      	add	r3, r2
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	23a8      	movs	r3, #168	; 0xa8
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	3ba8      	subs	r3, #168	; 0xa8
 8007d14:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d18:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	18d1      	adds	r1, r2, r3
 8007d20:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d2a:	4413      	add	r3, r2
 8007d2c:	1e5a      	subs	r2, r3, #1
 8007d2e:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007d32:	4613      	mov	r3, r2
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	4413      	add	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	440b      	add	r3, r1
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007d44:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007d48:	0103      	lsls	r3, r0, #4
 8007d4a:	440b      	add	r3, r1
 8007d4c:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8007d4e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d58:	4413      	add	r3, r2
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	23a8      	movs	r3, #168	; 0xa8
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	3ba8      	subs	r3, #168	; 0xa8
 8007d64:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007d68:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	18d1      	adds	r1, r2, r3
 8007d70:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d7a:	4413      	add	r3, r2
 8007d7c:	1e5a      	subs	r2, r3, #1
 8007d7e:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007d94:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007d98:	0103      	lsls	r3, r0, #4
 8007d9a:	440b      	add	r3, r1
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8007da0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007daa:	4413      	add	r3, r2
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007db2:	ee07 2a90 	vmov	s15, r2
 8007db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007dbe:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	4413      	add	r3, r2
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8007dcc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007dd6:	4413      	add	r3, r2
 8007dd8:	1e5a      	subs	r2, r3, #1
 8007dda:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007dde:	ee07 2a90 	vmov	s15, r2
 8007de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007de6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007dea:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	4413      	add	r3, r2
 8007df2:	330c      	adds	r3, #12
 8007df4:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8007df8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007e02:	4413      	add	r3, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	23a8      	movs	r3, #168	; 0xa8
 8007e08:	fb02 f303 	mul.w	r3, r2, r3
 8007e0c:	3ba8      	subs	r3, #168	; 0xa8
 8007e0e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e12:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	18d1      	adds	r1, r2, r3
 8007e1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e24:	4413      	add	r3, r2
 8007e26:	1e5a      	subs	r2, r3, #1
 8007e28:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e34:	4613      	mov	r3, r2
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	4413      	add	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	440b      	add	r3, r1
 8007e3e:	3314      	adds	r3, #20
 8007e40:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8007e44:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

						break;
 8007e4e:	e018      	b.n	8007e82 <findShorterWay+0x86a>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8007e50:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007e54:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007e58:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e5c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateParent(ptrChanges, position, matrixCosts);
 8007e60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007e64:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007e68:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007e72:	f000 fb2d 	bl	80084d0 <updateParent>
						shorterWayFound = SET;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						break;
 8007e7c:	e001      	b.n	8007e82 <findShorterWay+0x86a>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e31a      	b.n	80084b8 <findShorterWay+0xea0>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8007e82:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <findShorterWay+0x888>
			for (j = 0; j < 3; j++){
 8007e8a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e8e:	3301      	adds	r3, #1
 8007e90:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007e94:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	f67f ad99 	bls.w	80079d0 <findShorterWay+0x3b8>
 8007e9e:	e000      	b.n	8007ea2 <findShorterWay+0x88a>
					break;
 8007ea0:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8007ea2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <findShorterWay+0x8a8>
    	for(i = 0; i < 3; i++){
 8007eaa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007eae:	3301      	adds	r3, #1
 8007eb0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007eb4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	f67f ad85 	bls.w	80079c8 <findShorterWay+0x3b0>
 8007ebe:	e000      	b.n	8007ec2 <findShorterWay+0x8aa>
				break;
 8007ec0:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8007ec2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 81be 	bne.w	8008248 <findShorterWay+0xc30>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8007ecc:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8007ed0:	f107 0310 	add.w	r3, r7, #16
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007eda:	f000 feb9 	bl	8008c50 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8007ede:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80d7 	beq.w	800809a <findShorterWay+0xa82>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007eec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ef6:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007ef8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f02:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007f04:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f16:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	441a      	add	r2, r3
 8007f1e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	5cd3      	ldrb	r3, [r2, r3]
 8007f26:	2b73      	cmp	r3, #115	; 0x73
 8007f28:	d101      	bne.n	8007f2e <findShorterWay+0x916>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8007f2a:	bf00      	nop
 8007f2c:	e011      	b.n	8007f52 <findShorterWay+0x93a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8007f2e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4613      	mov	r3, r2
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f40:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	441a      	add	r2, r3
 8007f48:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2144      	movs	r1, #68	; 0x44
 8007f50:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8007f52:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f58:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f5c:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	4413      	add	r3, r2
 8007f64:	3308      	adds	r3, #8
 8007f66:	edd3 7a00 	vldr	s15, [r3]
 8007f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f6e:	ee17 2a90 	vmov	r2, s15
 8007f72:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f76:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8007f78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f82:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	4413      	add	r3, r2
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	edd3 7a00 	vldr	s15, [r3]
 8007f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f94:	ee17 2a90 	vmov	r2, s15
 8007f98:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f9c:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007fa4:	e014      	b.n	8007fd0 <findShorterWay+0x9b8>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8007fa6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007faa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007fac:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007fb0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007fb4:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007fb8:	0089      	lsls	r1, r1, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8007fc6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007fca:	3301      	adds	r3, #1
 8007fcc:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007fd0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d9e6      	bls.n	8007fa6 <findShorterWay+0x98e>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007fd8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007fe6:	e03b      	b.n	8008060 <findShorterWay+0xa48>
					for (j = 0 ; j < 4 ; j++){
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007fee:	e02e      	b.n	800804e <findShorterWay+0xa36>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8007ff0:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8007ff4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007ff8:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ffc:	1e58      	subs	r0, r3, #1
 8007ffe:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008002:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8008006:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 800800a:	00a4      	lsls	r4, r4, #2
 800800c:	4422      	add	r2, r4
 800800e:	0092      	lsls	r2, r2, #2
 8008010:	440a      	add	r2, r1
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8008018:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 800801c:	0080      	lsls	r0, r0, #2
 800801e:	4403      	add	r3, r0
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8008026:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 800802a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800802e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008032:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008036:	0089      	lsls	r1, r1, #2
 8008038:	440b      	add	r3, r1
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8008044:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008048:	3301      	adds	r3, #1
 800804a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800804e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008052:	2b03      	cmp	r3, #3
 8008054:	d9cc      	bls.n	8007ff0 <findShorterWay+0x9d8>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8008056:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800805a:	3301      	adds	r3, #1
 800805c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008060:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008064:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008068:	429a      	cmp	r2, r3
 800806a:	d3bd      	bcc.n	8007fe8 <findShorterWay+0x9d0>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 800806c:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008070:	3b01      	subs	r3, #1
 8008072:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8008076:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008080:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8008082:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800808c:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 800808e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008098:	e0d0      	b.n	800823c <findShorterWay+0xc24>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 800809a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080a4:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 80080a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080b0:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 80080b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	461a      	mov	r2, r3
 80080ba:	4613      	mov	r3, r2
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	1a9b      	subs	r3, r3, r2
 80080c0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80080c4:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	441a      	add	r2, r3
 80080cc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	5cd3      	ldrb	r3, [r2, r3]
 80080d4:	2b73      	cmp	r3, #115	; 0x73
 80080d6:	d101      	bne.n	80080dc <findShorterWay+0xac4>
					// Dejamos el char de start tal cual como esta
					__NOP();
 80080d8:	bf00      	nop
 80080da:	e011      	b.n	8008100 <findShorterWay+0xae8>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 80080dc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	461a      	mov	r2, r3
 80080e4:	4613      	mov	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80080ee:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	441a      	add	r2, r3
 80080f6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2144      	movs	r1, #68	; 0x44
 80080fe:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8008100:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800810a:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4413      	add	r3, r2
 8008112:	3308      	adds	r3, #8
 8008114:	edd3 7a00 	vldr	s15, [r3]
 8008118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800811c:	ee17 2a90 	vmov	r2, s15
 8008120:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008124:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8008126:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800812a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008130:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	4413      	add	r3, r2
 8008138:	330c      	adds	r3, #12
 800813a:	edd3 7a00 	vldr	s15, [r3]
 800813e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008142:	ee17 2a90 	vmov	r2, s15
 8008146:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800814a:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 800814c:	2300      	movs	r3, #0
 800814e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008152:	e014      	b.n	800817e <findShorterWay+0xb66>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 8008154:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008158:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800815a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800815e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008162:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008166:	0089      	lsls	r1, r1, #2
 8008168:	440b      	add	r3, r1
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8008174:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008178:	3301      	adds	r3, #1
 800817a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800817e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008182:	2b03      	cmp	r3, #3
 8008184:	d9e6      	bls.n	8008154 <findShorterWay+0xb3c>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8008186:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	b2db      	uxtb	r3, r3
 800818e:	3301      	adds	r3, #1
 8008190:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008194:	e03b      	b.n	800820e <findShorterWay+0xbf6>
					for (j = 0 ; j < 4 ; j++){
 8008196:	2300      	movs	r3, #0
 8008198:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800819c:	e02e      	b.n	80081fc <findShorterWay+0xbe4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 800819e:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 80081a2:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80081a6:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80081aa:	1e58      	subs	r0, r3, #1
 80081ac:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80081b0:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80081b4:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80081b8:	00a4      	lsls	r4, r4, #2
 80081ba:	4422      	add	r2, r4
 80081bc:	0092      	lsls	r2, r2, #2
 80081be:	440a      	add	r2, r1
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80081c6:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80081ca:	0080      	lsls	r0, r0, #2
 80081cc:	4403      	add	r3, r0
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 80081d4:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 80081d8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80081dc:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80081e0:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80081e4:	0089      	lsls	r1, r1, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 80081f2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80081f6:	3301      	adds	r3, #1
 80081f8:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80081fc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008200:	2b03      	cmp	r3, #3
 8008202:	d9cc      	bls.n	800819e <findShorterWay+0xb86>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8008204:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008208:	3301      	adds	r3, #1
 800820a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800820e:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008212:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8008216:	429a      	cmp	r2, r3
 8008218:	d3bd      	bcc.n	8008196 <findShorterWay+0xb7e>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 800821a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 800821e:	3b01      	subs	r3, #1
 8008220:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8008224:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800822e:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8008230:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800823a:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 800823c:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8008240:	3301      	adds	r3, #1
 8008242:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 8008246:	e05d      	b.n	8008304 <findShorterWay+0xcec>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8008248:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			j = ptrChanges->endPos[1];
 8008252:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			while(Gridcopy[i][j] != 's'){
 800825c:	e042      	b.n	80082e4 <findShorterWay+0xccc>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 800825e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008262:	22a8      	movs	r2, #168	; 0xa8
 8008264:	fb02 f303 	mul.w	r3, r2, r3
 8008268:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800826c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	18d1      	adds	r1, r2, r3
 8008274:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008278:	4613      	mov	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4413      	add	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	440b      	add	r3, r1
 8008282:	330c      	adds	r3, #12
 8008284:	edd3 7a00 	vldr	s15, [r3]
 8008288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800828c:	ee17 3a90 	vmov	r3, s15
 8008290:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				position[1] = matrixCosts[i][j][4];
 8008294:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008298:	22a8      	movs	r2, #168	; 0xa8
 800829a:	fb02 f303 	mul.w	r3, r2, r3
 800829e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082a2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	18d1      	adds	r1, r2, r3
 80082aa:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80082ae:	4613      	mov	r3, r2
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4413      	add	r3, r2
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	440b      	add	r3, r1
 80082b8:	3310      	adds	r3, #16
 80082ba:	edd3 7a00 	vldr	s15, [r3]
 80082be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082c2:	ee17 3a90 	vmov	r3, s15
 80082c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

				// actualizamos la nueva posición
				i = position[0];
 80082ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80082ce:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
				j = position[1];
 80082d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80082d6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 80082da:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80082de:	3301      	adds	r3, #1
 80082e0:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			while(Gridcopy[i][j] != 's'){
 80082e4:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80082e8:	4613      	mov	r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082f2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	441a      	add	r2, r3
 80082fa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80082fe:	5cd3      	ldrb	r3, [r2, r3]
 8008300:	2b73      	cmp	r3, #115	; 0x73
 8008302:	d1ac      	bne.n	800825e <findShorterWay+0xc46>
    while(!shorterWayFound){
 8008304:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008308:	2b00      	cmp	r3, #0
 800830a:	f43f aa3d 	beq.w	8007788 <findShorterWay+0x170>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 800830e:	496d      	ldr	r1, [pc, #436]	; (80084c4 <findShorterWay+0xeac>)
 8008310:	486d      	ldr	r0, [pc, #436]	; (80084c8 <findShorterWay+0xeb0>)
 8008312:	f005 f927 	bl	800d564 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 8008316:	210d      	movs	r1, #13
 8008318:	486b      	ldr	r0, [pc, #428]	; (80084c8 <findShorterWay+0xeb0>)
 800831a:	f005 f90b 	bl	800d534 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 800831e:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 8008322:	3301      	adds	r3, #1
 8008324:	b2da      	uxtb	r2, r3
 8008326:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800832a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8008332:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	j = ptrChanges->endPos[1];
 800833c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008346:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800834a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800834e:	e087      	b.n	8008460 <findShorterWay+0xe48>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8008350:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008354:	4613      	mov	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	1a9b      	subs	r3, r3, r2
 800835a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800835e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	441a      	add	r2, r3
 8008366:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800836a:	5cd3      	ldrb	r3, [r2, r3]
 800836c:	2b65      	cmp	r3, #101	; 0x65
 800836e:	d101      	bne.n	8008374 <findShorterWay+0xd5c>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8008370:	bf00      	nop
 8008372:	e020      	b.n	80083b6 <findShorterWay+0xd9e>
    	}else if (Gridcopy[i][j] == 's'){
 8008374:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	1a9b      	subs	r3, r3, r2
 800837e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008382:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	441a      	add	r2, r3
 800838a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800838e:	5cd3      	ldrb	r3, [r2, r3]
 8008390:	2b73      	cmp	r3, #115	; 0x73
 8008392:	d101      	bne.n	8008398 <findShorterWay+0xd80>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8008394:	bf00      	nop
 8008396:	e00e      	b.n	80083b6 <findShorterWay+0xd9e>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8008398:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800839c:	4613      	mov	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	1a9b      	subs	r3, r3, r2
 80083a2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80083a6:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	441a      	add	r2, r3
 80083ae:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80083b2:	2149      	movs	r1, #73	; 0x49
 80083b4:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 80083b6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80083c0:	4413      	add	r3, r2
 80083c2:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80083c6:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 80083c8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80083d2:	4413      	add	r3, r2
 80083d4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80083d8:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 80083da:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80083de:	22a8      	movs	r2, #168	; 0xa8
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80083e8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	18d1      	adds	r1, r2, r3
 80083f0:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80083f4:	4613      	mov	r3, r2
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	4413      	add	r3, r2
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	440b      	add	r3, r1
 80083fe:	330c      	adds	r3, #12
 8008400:	edd3 7a00 	vldr	s15, [r3]
 8008404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008408:	ee17 3a90 	vmov	r3, s15
 800840c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		position[1] = matrixCosts[i][j][4];
 8008410:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008414:	22a8      	movs	r2, #168	; 0xa8
 8008416:	fb02 f303 	mul.w	r3, r2, r3
 800841a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800841e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	18d1      	adds	r1, r2, r3
 8008426:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 800842a:	4613      	mov	r3, r2
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	4413      	add	r3, r2
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	440b      	add	r3, r1
 8008434:	3310      	adds	r3, #16
 8008436:	edd3 7a00 	vldr	s15, [r3]
 800843a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800843e:	ee17 3a90 	vmov	r3, s15
 8008442:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

		// actualizamos la nueva posición
		i = position[0];
 8008446:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800844a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
		j = position[1];
 800844e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008452:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008456:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800845a:	3b01      	subs	r3, #1
 800845c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8008460:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008464:	2b00      	cmp	r3, #0
 8008466:	f6bf af73 	bge.w	8008350 <findShorterWay+0xd38>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800846a:	2300      	movs	r3, #0
 800846c:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8008470:	e013      	b.n	800849a <findShorterWay+0xe82>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8008472:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8008476:	4613      	mov	r3, r2
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008480:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	4413      	add	r3, r2
 8008488:	4619      	mov	r1, r3
 800848a:	480f      	ldr	r0, [pc, #60]	; (80084c8 <findShorterWay+0xeb0>)
 800848c:	f005 f86a 	bl	800d564 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8008490:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8008494:	3301      	adds	r3, #1
 8008496:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 800849a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800849e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	7a1b      	ldrb	r3, [r3, #8]
 80084a6:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d3e1      	bcc.n	8008472 <findShorterWay+0xe5a>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 80084ae:	4907      	ldr	r1, [pc, #28]	; (80084cc <findShorterWay+0xeb4>)
 80084b0:	4805      	ldr	r0, [pc, #20]	; (80084c8 <findShorterWay+0xeb0>)
 80084b2:	f005 f857 	bl	800d564 <writeMsg>

    return 1;
 80084b6:	2301      	movs	r3, #1


}
 80084b8:	4618      	mov	r0, r3
 80084ba:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd90      	pop	{r4, r7, pc}
 80084c2:	bf00      	nop
 80084c4:	080139e4 	.word	0x080139e4
 80084c8:	20013a00 	.word	0x20013a00
 80084cc:	08013a24 	.word	0x08013a24

080084d0 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 80084dc:	68b9      	ldr	r1, [r7, #8]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fa8e 	bl	8008a00 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084ea:	b2d8      	uxtb	r0, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	461a      	mov	r2, r3
 80084f8:	23a8      	movs	r3, #168	; 0xa8
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	3ba8      	subs	r3, #168	; 0xa8
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	18d1      	adds	r1, r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	3304      	adds	r3, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4413      	add	r3, r2
 8008510:	1e5a      	subs	r2, r3, #1
 8008512:	ee07 0a90 	vmov	s15, r0
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	4613      	mov	r3, r2
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4413      	add	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	440b      	add	r3, r1
 8008524:	330c      	adds	r3, #12
 8008526:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008530:	b2d8      	uxtb	r0, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4413      	add	r3, r2
 800853c:	461a      	mov	r2, r3
 800853e:	23a8      	movs	r3, #168	; 0xa8
 8008540:	fb02 f303 	mul.w	r3, r2, r3
 8008544:	3ba8      	subs	r3, #168	; 0xa8
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	18d1      	adds	r1, r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	3304      	adds	r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4413      	add	r3, r2
 8008556:	1e5a      	subs	r2, r3, #1
 8008558:	ee07 0a90 	vmov	s15, r0
 800855c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008560:	4613      	mov	r3, r2
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	440b      	add	r3, r1
 800856a:	3310      	adds	r3, #16
 800856c:	edc3 7a00 	vstr	s15, [r3]

}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4413      	add	r3, r2
 8008590:	461a      	mov	r2, r3
 8008592:	23a8      	movs	r3, #168	; 0xa8
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	3ba8      	subs	r3, #168	; 0xa8
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	18d5      	adds	r5, r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3304      	adds	r3, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4413      	add	r3, r2
 80085aa:	1e5c      	subs	r4, r3, #1
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f901 	bl	80087b8 <setGcost>
 80085b6:	eef0 7a40 	vmov.f32	s15, s0
 80085ba:	4623      	mov	r3, r4
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4423      	add	r3, r4
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	442b      	add	r3, r5
 80085c4:	edc3 7a00 	vstr	s15, [r3]
}
 80085c8:	bf00      	nop
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}

080085d0 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 80085d0:	b5b0      	push	{r4, r5, r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	689a      	ldr	r2, [r3, #8]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4413      	add	r3, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	23a8      	movs	r3, #168	; 0xa8
 80085ec:	fb02 f303 	mul.w	r3, r2, r3
 80085f0:	3ba8      	subs	r3, #168	; 0xa8
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	18d5      	adds	r5, r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	3304      	adds	r3, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4413      	add	r3, r2
 8008602:	1e5c      	subs	r4, r3, #1
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	68b9      	ldr	r1, [r7, #8]
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f9bb 	bl	8008986 <setFcost>
 8008610:	eef0 7a40 	vmov.f32	s15, s0
 8008614:	4623      	mov	r3, r4
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	4423      	add	r3, r4
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	442b      	add	r3, r5
 800861e:	3304      	adds	r3, #4
 8008620:	edc3 7a00 	vstr	s15, [r3]

}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bdb0      	pop	{r4, r5, r7, pc}

0800862c <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[7][7][6] , char Gridcopy[7][7]){
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	68f9      	ldr	r1, [r7, #12]
 800864a:	6838      	ldr	r0, [r7, #0]
 800864c:	f000 fa3d 	bl	8008aca <findEnd>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8008656:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8008658:	2300      	movs	r3, #0
 800865a:	77fb      	strb	r3, [r7, #31]
 800865c:	e0a1      	b.n	80087a2 <setHeuristic+0x176>
		return RESET;
 800865e:	2300      	movs	r3, #0
 8008660:	e0a6      	b.n	80087b0 <setHeuristic+0x184>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8008662:	2300      	movs	r3, #0
 8008664:	77bb      	strb	r3, [r7, #30]
 8008666:	e093      	b.n	8008790 <setHeuristic+0x164>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8008668:	7ffa      	ldrb	r2, [r7, #31]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfb8      	it	lt
 8008674:	425b      	neglt	r3, r3
 8008676:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8008678:	7fba      	ldrb	r2, [r7, #30]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfb8      	it	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	429a      	cmp	r2, r3
 800868e:	dc3e      	bgt.n	800870e <setHeuristic+0xe2>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	ed93 7a01 	vldr	s14, [r3, #4]
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086a8:	ee17 3a90 	vmov	r3, s15
 80086ac:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	ee07 3a90 	vmov	s15, r3
 80086b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	edd3 6a00 	vldr	s13, [r3]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfb8      	it	lt
 80086c8:	425b      	neglt	r3, r3
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086de:	ee17 3a90 	vmov	r3, s15
 80086e2:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 80086e4:	7ffb      	ldrb	r3, [r7, #31]
 80086e6:	22a8      	movs	r2, #168	; 0xa8
 80086e8:	fb02 f303 	mul.w	r3, r2, r3
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	18d1      	adds	r1, r2, r3
 80086f0:	7fba      	ldrb	r2, [r7, #30]
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086fc:	4613      	mov	r3, r2
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	4413      	add	r3, r2
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	440b      	add	r3, r1
 8008706:	3308      	adds	r3, #8
 8008708:	edc3 7a00 	vstr	s15, [r3]
 800870c:	e03d      	b.n	800878a <setHeuristic+0x15e>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	ed93 7a01 	vldr	s14, [r3, #4]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800871e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008722:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008726:	ee17 3a90 	vmov	r3, s15
 800872a:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	edd3 6a00 	vldr	s13, [r3]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	425b      	neglt	r3, r3
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800875c:	ee17 3a90 	vmov	r3, s15
 8008760:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	22a8      	movs	r2, #168	; 0xa8
 8008766:	fb02 f303 	mul.w	r3, r2, r3
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	18d1      	adds	r1, r2, r3
 800876e:	7fba      	ldrb	r2, [r7, #30]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800877a:	4613      	mov	r3, r2
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	4413      	add	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	440b      	add	r3, r1
 8008784:	3308      	adds	r3, #8
 8008786:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800878a:	7fbb      	ldrb	r3, [r7, #30]
 800878c:	3301      	adds	r3, #1
 800878e:	77bb      	strb	r3, [r7, #30]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	7a5b      	ldrb	r3, [r3, #9]
 8008794:	7fba      	ldrb	r2, [r7, #30]
 8008796:	429a      	cmp	r2, r3
 8008798:	f4ff af66 	bcc.w	8008668 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800879c:	7ffb      	ldrb	r3, [r7, #31]
 800879e:	3301      	adds	r3, #1
 80087a0:	77fb      	strb	r3, [r7, #31]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	7a1b      	ldrb	r3, [r3, #8]
 80087a6:	7ffa      	ldrb	r2, [r7, #31]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	f4ff af5a 	bcc.w	8008662 <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 80087ae:	2301      	movs	r3, #1

}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3720      	adds	r7, #32
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80087b8:	b480      	push	{r7}
 80087ba:	b089      	sub	sp, #36	; 0x24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bfb8      	it	lt
 80087e0:	425b      	neglt	r3, r3
 80087e2:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfb8      	it	lt
 80087f2:	425b      	neglt	r3, r3
 80087f4:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4413      	add	r3, r2
 8008800:	1e5a      	subs	r2, r3, #1
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d05d      	beq.n	80088c6 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	3304      	adds	r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4413      	add	r3, r2
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	429a      	cmp	r2, r3
 800881e:	d052      	beq.n	80088c6 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	429a      	cmp	r2, r3
 800882c:	dc25      	bgt.n	800887a <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	ed93 7a01 	vldr	s14, [r3, #4]
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800883e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008842:	ed97 7a07 	vldr	s14, [r7, #28]
 8008846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800884a:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	ed93 7a00 	vldr	s14, [r3]
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfb8      	it	lt
 800885e:	425b      	neglt	r3, r3
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008874:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8008878:	e077      	b.n	800896a <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	ed93 7a00 	vldr	s14, [r3]
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bfb8      	it	lt
 80088aa:	425b      	neglt	r3, r3
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80088bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088c0:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 80088c4:	e051      	b.n	800896a <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	dc25      	bgt.n	8008920 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80088ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088f0:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	ed93 7a00 	vldr	s14, [r3]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfb8      	it	lt
 8008904:	425b      	neglt	r3, r3
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	ed97 7a07 	vldr	s14, [r7, #28]
 8008916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800891a:	edc7 7a07 	vstr	s15, [r7, #28]
 800891e:	e024      	b.n	800896a <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	ed93 7a01 	vldr	s14, [r3, #4]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008934:	ed97 7a07 	vldr	s14, [r7, #28]
 8008938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800893c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	ed93 7a00 	vldr	s14, [r3]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfb8      	it	lt
 8008950:	425b      	neglt	r3, r3
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	69fa      	ldr	r2, [r7, #28]
 800896e:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	ee07 3a90 	vmov	s15, r3
}
 8008978:	eeb0 0a67 	vmov.f32	s0, s15
 800897c:	3724      	adds	r7, #36	; 0x24
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f7ff ff0d 	bl	80087b8 <setGcost>
 800899e:	eef0 7a40 	vmov.f32	s15, s0
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	23a8      	movs	r3, #168	; 0xa8
 80089bc:	fb02 f303 	mul.w	r3, r2, r3
 80089c0:	3ba8      	subs	r3, #168	; 0xa8
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	18d1      	adds	r1, r2, r3
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4413      	add	r3, r2
 80089d2:	1e5a      	subs	r2, r3, #1
 80089d4:	4613      	mov	r3, r2
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	4413      	add	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	440b      	add	r3, r1
 80089de:	3308      	adds	r3, #8
 80089e0:	edd3 7a00 	vldr	s15, [r3]
 80089e4:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	ee07 3a90 	vmov	s15, r3

}
 80089f6:	eeb0 0a67 	vmov.f32	s0, s15
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4413      	add	r3, r2
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d10c      	bne.n	8008a38 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	3304      	adds	r3, #4
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4413      	add	r3, r2
 8008a2a:	1e5a      	subs	r2, r3, #1
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d101      	bne.n	8008a38 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8008a34:	bf00      	nop
 8008a36:	e00c      	b.n	8008a52 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8008a5e:	b480      	push	{r7}
 8008a60:	b087      	sub	sp, #28
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75fb      	strb	r3, [r7, #23]
 8008a6e:	e020      	b.n	8008ab2 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008a70:	2300      	movs	r3, #0
 8008a72:	75bb      	strb	r3, [r7, #22]
 8008a74:	e015      	b.n	8008aa2 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8008a76:	7dfa      	ldrb	r2, [r7, #23]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	441a      	add	r2, r3
 8008a82:	7dbb      	ldrb	r3, [r7, #22]
 8008a84:	5cd3      	ldrb	r3, [r2, r3]
 8008a86:	2b73      	cmp	r3, #115	; 0x73
 8008a88:	d107      	bne.n	8008a9a <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 8008a8a:	7dfa      	ldrb	r2, [r7, #23]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8008a90:	7dba      	ldrb	r2, [r7, #22]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e011      	b.n	8008abe <findStart+0x60>
			}else{
				__NOP();
 8008a9a:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008a9c:	7dbb      	ldrb	r3, [r7, #22]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	75bb      	strb	r3, [r7, #22]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	7a5b      	ldrb	r3, [r3, #9]
 8008aa6:	7dba      	ldrb	r2, [r7, #22]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3e4      	bcc.n	8008a76 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	7a1b      	ldrb	r3, [r3, #8]
 8008ab6:	7dfa      	ldrb	r2, [r7, #23]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d3d9      	bcc.n	8008a70 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8008abc:	2300      	movs	r3, #0



}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <findEnd>:
int findEnd(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 8008aca:	b480      	push	{r7}
 8008acc:	b087      	sub	sp, #28
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]
 8008ada:	e020      	b.n	8008b1e <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008adc:	2300      	movs	r3, #0
 8008ade:	75bb      	strb	r3, [r7, #22]
 8008ae0:	e015      	b.n	8008b0e <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 8008ae2:	7dfa      	ldrb	r2, [r7, #23]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	441a      	add	r2, r3
 8008aee:	7dbb      	ldrb	r3, [r7, #22]
 8008af0:	5cd3      	ldrb	r3, [r2, r3]
 8008af2:	2b65      	cmp	r3, #101	; 0x65
 8008af4:	d107      	bne.n	8008b06 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 8008af6:	7dfa      	ldrb	r2, [r7, #23]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 8008afc:	7dba      	ldrb	r2, [r7, #22]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e011      	b.n	8008b2a <findEnd+0x60>
			}else{
				__NOP();
 8008b06:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008b08:	7dbb      	ldrb	r3, [r7, #22]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	75bb      	strb	r3, [r7, #22]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	7a5b      	ldrb	r3, [r3, #9]
 8008b12:	7dba      	ldrb	r2, [r7, #22]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d3e4      	bcc.n	8008ae2 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	7a1b      	ldrb	r3, [r3, #8]
 8008b22:	7dfa      	ldrb	r2, [r7, #23]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d3d9      	bcc.n	8008adc <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 8008b28:	2300      	movs	r3, #0

}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[7][7], char Gridcopy[7][7]){
 8008b36:	b480      	push	{r7}
 8008b38:	b087      	sub	sp, #28
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e03d      	b.n	8008bc4 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75bb      	strb	r3, [r7, #22]
 8008b4c:	e031      	b.n	8008bb2 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	7a5b      	ldrb	r3, [r3, #9]
 8008b52:	7dba      	ldrb	r2, [r7, #22]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d109      	bne.n	8008b6c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8008b58:	7dfa      	ldrb	r2, [r7, #23]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	441a      	add	r2, r3
 8008b64:	7dbb      	ldrb	r3, [r7, #22]
 8008b66:	210d      	movs	r1, #13
 8008b68:	54d1      	strb	r1, [r2, r3]
 8008b6a:	e01f      	b.n	8008bac <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8008b6c:	7dba      	ldrb	r2, [r7, #22]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	7a5b      	ldrb	r3, [r3, #9]
 8008b72:	3301      	adds	r3, #1
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d109      	bne.n	8008b8c <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8008b78:	7dfa      	ldrb	r2, [r7, #23]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	441a      	add	r2, r3
 8008b84:	7dbb      	ldrb	r3, [r7, #22]
 8008b86:	2100      	movs	r1, #0
 8008b88:	54d1      	strb	r1, [r2, r3]
 8008b8a:	e00f      	b.n	8008bac <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8008b8c:	7dfa      	ldrb	r2, [r7, #23]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	00db      	lsls	r3, r3, #3
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	18d0      	adds	r0, r2, r3
 8008b98:	7db9      	ldrb	r1, [r7, #22]
 8008b9a:	7dfa      	ldrb	r2, [r7, #23]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	7dbb      	ldrb	r3, [r7, #22]
 8008ba8:	5c41      	ldrb	r1, [r0, r1]
 8008baa:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008bac:	7dbb      	ldrb	r3, [r7, #22]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	75bb      	strb	r3, [r7, #22]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	7a5b      	ldrb	r3, [r3, #9]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	dac7      	bge.n	8008b4e <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	7a1b      	ldrb	r3, [r3, #8]
 8008bc8:	7dfa      	ldrb	r2, [r7, #23]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d3bc      	bcc.n	8008b48 <buildMatrixCopy+0x12>
			}
		}
	}

}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	371c      	adds	r7, #28
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[7][7]){
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8008be8:	2300      	movs	r3, #0
 8008bea:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8008bec:	e00a      	b.n	8008c04 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 8008bee:	7bfa      	ldrb	r2, [r7, #15]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	3301      	adds	r3, #1
 8008c02:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8008c04:	7bfa      	ldrb	r2, [r7, #15]
 8008c06:	4613      	mov	r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4413      	add	r3, r2
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1eb      	bne.n	8008bee <getRows+0x12>

	}

	return counterRows;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[7][7]){
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008c30:	e002      	b.n	8008c38 <getColums+0x14>

		counterColumns++;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	3301      	adds	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	5cd3      	ldrb	r3, [r2, r3]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f7      	bne.n	8008c32 <getColums+0xe>

	}

	return counterColumns;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8008c50:	b480      	push	{r7}
 8008c52:	b089      	sub	sp, #36	; 0x24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	77fb      	strb	r3, [r7, #31]
 8008c6e:	e04d      	b.n	8008d0c <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8008c70:	2300      	movs	r3, #0
 8008c72:	77bb      	strb	r3, [r7, #30]
 8008c74:	e034      	b.n	8008ce0 <findLesserValue+0x90>
			if (i == j){
 8008c76:	7ffa      	ldrb	r2, [r7, #31]
 8008c78:	7fbb      	ldrb	r3, [r7, #30]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d101      	bne.n	8008c82 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8008c7e:	bf00      	nop
 8008c80:	e02b      	b.n	8008cda <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8008c82:	7ffb      	ldrb	r3, [r7, #31]
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	4413      	add	r3, r2
 8008c8a:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8008c8e:	7fbb      	ldrb	r3, [r7, #30]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4413      	add	r3, r2
 8008c96:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8008c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca2:	d41a      	bmi.n	8008cda <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8008ca4:	7ffb      	ldrb	r3, [r7, #31]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	4413      	add	r3, r2
 8008cac:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8008cb0:	7fbb      	ldrb	r3, [r7, #30]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8008cbc:	eeb4 7a67 	vcmp.f32	s14, s15
 8008cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc4:	d104      	bne.n	8008cd0 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008cce:	e004      	b.n	8008cda <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8008cd8:	e006      	b.n	8008ce8 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8008cda:	7fbb      	ldrb	r3, [r7, #30]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	77bb      	strb	r3, [r7, #30]
 8008ce0:	7fba      	ldrb	r2, [r7, #30]
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d3c6      	bcc.n	8008c76 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8008ce8:	7fba      	ldrb	r2, [r7, #30]
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d10a      	bne.n	8008d06 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8008cf0:	7ffa      	ldrb	r2, [r7, #31]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8008cf6:	7ffb      	ldrb	r3, [r7, #31]
 8008cf8:	011b      	lsls	r3, r3, #4
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8008d04:	e006      	b.n	8008d14 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8008d06:	7ffb      	ldrb	r3, [r7, #31]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	77fb      	strb	r3, [r7, #31]
 8008d0c:	7ffa      	ldrb	r2, [r7, #31]
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d3ad      	bcc.n	8008c70 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d076      	beq.n	8008e0c <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 8008d1e:	2300      	movs	r3, #0
 8008d20:	77fb      	strb	r3, [r7, #31]
 8008d22:	e06e      	b.n	8008e02 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8008d24:	7ffb      	ldrb	r3, [r7, #31]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	edd3 6a00 	vldr	s13, [r3]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d3a:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 8008d3e:	2300      	movs	r3, #0
 8008d40:	77bb      	strb	r3, [r7, #30]
 8008d42:	e045      	b.n	8008dd0 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8008d44:	7fbb      	ldrb	r3, [r7, #30]
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	edd3 6a00 	vldr	s13, [r3]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d5a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8008d5e:	7ffa      	ldrb	r2, [r7, #31]
 8008d60:	7fbb      	ldrb	r3, [r7, #30]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d101      	bne.n	8008d6a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8008d66:	bf00      	nop
 8008d68:	e02f      	b.n	8008dca <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8008d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d72:	eef4 7a47 	vcmp.f32	s15, s14
 8008d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7a:	d11c      	bne.n	8008db6 <findLesserValue+0x166>
 8008d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d84:	eef4 7a47 	vcmp.f32	s15, s14
 8008d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8c:	d113      	bne.n	8008db6 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8008d8e:	7ffb      	ldrb	r3, [r7, #31]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	4413      	add	r3, r2
 8008d96:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d9a:	7fbb      	ldrb	r3, [r7, #30]
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dae:	d900      	bls.n	8008db2 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8008db0:	e014      	b.n	8008ddc <findLesserValue+0x18c>
						__NOP();
 8008db2:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8008db4:	e009      	b.n	8008dca <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8008db6:	edd7 7a06 	vldr	s15, [r7, #24]
 8008dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dbe:	eef4 7a47 	vcmp.f32	s15, s14
 8008dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc6:	d108      	bne.n	8008dda <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8008dc8:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8008dca:	7fbb      	ldrb	r3, [r7, #30]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	77bb      	strb	r3, [r7, #30]
 8008dd0:	7fba      	ldrb	r2, [r7, #30]
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d3b5      	bcc.n	8008d44 <findLesserValue+0xf4>
 8008dd8:	e000      	b.n	8008ddc <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8008dda:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8008ddc:	7fba      	ldrb	r2, [r7, #30]
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d10b      	bne.n	8008dfc <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8008de4:	7ffa      	ldrb	r2, [r7, #31]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8008dea:	7ffb      	ldrb	r3, [r7, #31]
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	4413      	add	r3, r2
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8008df8:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8008dfa:	e008      	b.n	8008e0e <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8008dfc:	7ffb      	ldrb	r3, [r7, #31]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	77fb      	strb	r3, [r7, #31]
 8008e02:	7ffa      	ldrb	r2, [r7, #31]
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d38c      	bcc.n	8008d24 <findLesserValue+0xd4>
}
 8008e0a:	e000      	b.n	8008e0e <findLesserValue+0x1be>
		__NOP();
 8008e0c:	bf00      	nop
}
 8008e0e:	bf00      	nop
 8008e10:	3724      	adds	r7, #36	; 0x24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e2e:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	4a2b      	ldr	r2, [pc, #172]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e36:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	79da      	ldrb	r2, [r3, #7]
 8008e3c:	4b29      	ldr	r3, [pc, #164]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e3e:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	791a      	ldrb	r2, [r3, #4]
 8008e44:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e46:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	799a      	ldrb	r2, [r3, #6]
 8008e4c:	4b25      	ldr	r3, [pc, #148]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e4e:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	7a5a      	ldrb	r2, [r3, #9]
 8008e54:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e56:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	7a9a      	ldrb	r2, [r3, #10]
 8008e5c:	4b21      	ldr	r3, [pc, #132]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e5e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	7a1a      	ldrb	r2, [r3, #8]
 8008e64:	4b1f      	ldr	r3, [pc, #124]	; (8008ee4 <initSerialComunication+0xc8>)
 8008e66:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1e      	ldr	r2, [pc, #120]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e6e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	7a5a      	ldrb	r2, [r3, #9]
 8008e74:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e76:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	795a      	ldrb	r2, [r3, #5]
 8008e7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e7e:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	7a1a      	ldrb	r2, [r3, #8]
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e86:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	791a      	ldrb	r2, [r3, #4]
 8008e8c:	4b16      	ldr	r3, [pc, #88]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e8e:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	79da      	ldrb	r2, [r3, #7]
 8008e94:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e96:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	799a      	ldrb	r2, [r3, #6]
 8008e9c:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <initSerialComunication+0xcc>)
 8008e9e:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a11      	ldr	r2, [pc, #68]	; (8008eec <initSerialComunication+0xd0>)
 8008ea6:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	7a5a      	ldrb	r2, [r3, #9]
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <initSerialComunication+0xd0>)
 8008eae:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	795a      	ldrb	r2, [r3, #5]
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <initSerialComunication+0xd0>)
 8008eb6:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7a1a      	ldrb	r2, [r3, #8]
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <initSerialComunication+0xd0>)
 8008ebe:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	791a      	ldrb	r2, [r3, #4]
 8008ec4:	4b09      	ldr	r3, [pc, #36]	; (8008eec <initSerialComunication+0xd0>)
 8008ec6:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	79da      	ldrb	r2, [r3, #7]
 8008ecc:	4b07      	ldr	r3, [pc, #28]	; (8008eec <initSerialComunication+0xd0>)
 8008ece:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	799a      	ldrb	r2, [r3, #6]
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <initSerialComunication+0xd0>)
 8008ed6:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	20013a00 	.word	0x20013a00
 8008ee8:	20013a94 	.word	0x20013a94
 8008eec:	20013aa0 	.word	0x20013aa0

08008ef0 <create_Astar_operations>:
void create_Astar_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *ptrbuild,
					   Parameters_Path_t *ptrPath,
					   Parameters_Position_t *ptrPos){
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08e      	sub	sp, #56	; 0x38
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 8008efe:	f04f 0200 	mov.w	r2, #0
 8008f02:	f04f 0300 	mov.w	r3, #0
 8008f06:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	e9c1 2300 	strd	r2, r3, [r1]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f44:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	f04f 0200 	mov.w	r2, #0
 8008f4e:	f04f 0300 	mov.w	r3, #0
 8008f52:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f5e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// calculo del vector unitario del robot


	unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8008f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f64:	ed93 7b04 	vldr	d7, [r3, #16]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	3310      	adds	r3, #16
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8008f72:	eef0 0a67 	vmov.f32	s1, s15
 8008f76:	f002 fe5d 	bl	800bc34 <unitary_vector>




	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f80:	e068      	b.n	8009054 <create_Astar_operations+0x164>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_y = -(shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 8008f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f92:	3301      	adds	r3, #1
 8008f94:	00db      	lsls	r3, r3, #3
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	440b      	add	r3, r1
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	edd3 7a00 	vldr	s15, [r3]
 8008fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb0:	ee17 0a90 	vmov	r0, s15
 8008fb4:	f7f7 fae0 	bl	8000578 <__aeabi_f2d>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dist_to_x = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 8008fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4413      	add	r3, r2
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	440b      	add	r3, r1
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	edd3 7a00 	vldr	s15, [r3]
 8008fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fee:	ee17 0a90 	vmov	r0, s15
 8008ff2:	f7f7 fac1 	bl	8000578 <__aeabi_f2d>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	e9c7 2306 	strd	r2, r3, [r7, #24]

		finishline_x += dist_to_x; // Coordenada x a ir
 8008ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009002:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8009006:	f7f7 f959 	bl	80002bc <__adddf3>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 8009012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800901a:	f7f7 f94f 	bl	80002bc <__adddf3>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		ptrPath->goal_Position_x = finishline_x;
 8009026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009028:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800902c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPath->goal_Position_y = finishline_y;
 8009030:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009036:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 800903a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800903e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f002 fadf 	bl	800b608 <build_Operation>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 800904a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800904e:	3301      	adds	r3, #1
 8009050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009054:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	7a9b      	ldrb	r3, [r3, #10]
 800905c:	3b01      	subs	r3, #1
 800905e:	429a      	cmp	r2, r3
 8009060:	db8f      	blt.n	8008f82 <create_Astar_operations+0x92>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009068:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8009090 <create_Astar_operations+0x1a0>
 800906c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8009090 <create_Astar_operations+0x1a0>
 8009070:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8009090 <create_Astar_operations+0x1a0>
 8009074:	2200      	movs	r2, #0
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f002 fb65 	bl	800b748 <add_Operation>
	ptrbuild->number_operation = 0;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


}
 8009086:	bf00      	nop
 8009088:	3738      	adds	r7, #56	; 0x38
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
	...

08009098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	db0b      	blt.n	80090c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	f003 021f 	and.w	r2, r3, #31
 80090b0:	4907      	ldr	r1, [pc, #28]	; (80090d0 <__NVIC_EnableIRQ+0x38>)
 80090b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	2001      	movs	r0, #1
 80090ba:	fa00 f202 	lsl.w	r2, r0, r2
 80090be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	e000e100 	.word	0xe000e100

080090d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	6039      	str	r1, [r7, #0]
 80090de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	db0a      	blt.n	80090fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	490c      	ldr	r1, [pc, #48]	; (8009120 <__NVIC_SetPriority+0x4c>)
 80090ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f2:	0112      	lsls	r2, r2, #4
 80090f4:	b2d2      	uxtb	r2, r2
 80090f6:	440b      	add	r3, r1
 80090f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090fc:	e00a      	b.n	8009114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	b2da      	uxtb	r2, r3
 8009102:	4908      	ldr	r1, [pc, #32]	; (8009124 <__NVIC_SetPriority+0x50>)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	3b04      	subs	r3, #4
 800910c:	0112      	lsls	r2, r2, #4
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	440b      	add	r3, r1
 8009112:	761a      	strb	r2, [r3, #24]
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	e000e100 	.word	0xe000e100
 8009124:	e000ed00 	.word	0xe000ed00

08009128 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <inTIM4+0x30>)
 800912e:	4a0b      	ldr	r2, [pc, #44]	; (800915c <inTIM4+0x34>)
 8009130:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8009132:	4b09      	ldr	r3, [pc, #36]	; (8009158 <inTIM4+0x30>)
 8009134:	2200      	movs	r2, #0
 8009136:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8009138:	4b07      	ldr	r3, [pc, #28]	; (8009158 <inTIM4+0x30>)
 800913a:	2200      	movs	r2, #0
 800913c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800913e:	4b06      	ldr	r3, [pc, #24]	; (8009158 <inTIM4+0x30>)
 8009140:	f242 7210 	movw	r2, #10000	; 0x2710
 8009144:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8009146:	4b04      	ldr	r3, [pc, #16]	; (8009158 <inTIM4+0x30>)
 8009148:	220a      	movs	r2, #10
 800914a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 800914c:	4802      	ldr	r0, [pc, #8]	; (8009158 <inTIM4+0x30>)
 800914e:	f000 f807 	bl	8009160 <BasicTimer_Config>

}
 8009152:	bf00      	nop
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000338 	.word	0x20000338
 800915c:	40000800 	.word	0x40000800

08009160 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009170:	b672      	cpsid	i
}
 8009172:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a85      	ldr	r2, [pc, #532]	; (8009390 <BasicTimer_Config+0x230>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d106      	bne.n	800918c <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800917e:	4b85      	ldr	r3, [pc, #532]	; (8009394 <BasicTimer_Config+0x234>)
 8009180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009182:	4a84      	ldr	r2, [pc, #528]	; (8009394 <BasicTimer_Config+0x234>)
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	6453      	str	r3, [r2, #68]	; 0x44
 800918a:	e030      	b.n	80091ee <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009194:	d106      	bne.n	80091a4 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8009196:	4b7f      	ldr	r3, [pc, #508]	; (8009394 <BasicTimer_Config+0x234>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	4a7e      	ldr	r2, [pc, #504]	; (8009394 <BasicTimer_Config+0x234>)
 800919c:	f043 0301 	orr.w	r3, r3, #1
 80091a0:	6413      	str	r3, [r2, #64]	; 0x40
 80091a2:	e024      	b.n	80091ee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a7b      	ldr	r2, [pc, #492]	; (8009398 <BasicTimer_Config+0x238>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d106      	bne.n	80091bc <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80091ae:	4b79      	ldr	r3, [pc, #484]	; (8009394 <BasicTimer_Config+0x234>)
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	4a78      	ldr	r2, [pc, #480]	; (8009394 <BasicTimer_Config+0x234>)
 80091b4:	f043 0302 	orr.w	r3, r3, #2
 80091b8:	6413      	str	r3, [r2, #64]	; 0x40
 80091ba:	e018      	b.n	80091ee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a76      	ldr	r2, [pc, #472]	; (800939c <BasicTimer_Config+0x23c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d106      	bne.n	80091d4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80091c6:	4b73      	ldr	r3, [pc, #460]	; (8009394 <BasicTimer_Config+0x234>)
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	4a72      	ldr	r2, [pc, #456]	; (8009394 <BasicTimer_Config+0x234>)
 80091cc:	f043 0304 	orr.w	r3, r3, #4
 80091d0:	6413      	str	r3, [r2, #64]	; 0x40
 80091d2:	e00c      	b.n	80091ee <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a71      	ldr	r2, [pc, #452]	; (80093a0 <BasicTimer_Config+0x240>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d106      	bne.n	80091ec <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80091de:	4b6d      	ldr	r3, [pc, #436]	; (8009394 <BasicTimer_Config+0x234>)
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	4a6c      	ldr	r2, [pc, #432]	; (8009394 <BasicTimer_Config+0x234>)
 80091e4:	f043 0308 	orr.w	r3, r3, #8
 80091e8:	6413      	str	r3, [r2, #64]	; 0x40
 80091ea:	e000      	b.n	80091ee <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 80091ec:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80091fc:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	6892      	ldr	r2, [r2, #8]
 8009206:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	791b      	ldrb	r3, [r3, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f040 80d3 	bne.w	80093b8 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0210 	bic.w	r2, r2, #16
 8009220:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2ba0      	cmp	r3, #160	; 0xa0
 800922c:	d022      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2bc8      	cmp	r3, #200	; 0xc8
 8009232:	d01f      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800923a:	d01b      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009242:	d017      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800924a:	d013      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009252:	d00f      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800925a:	d00b      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009262:	d007      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800926a:	d003      	beq.n	8009274 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009272:	d10b      	bne.n	800928c <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2264      	movs	r2, #100	; 0x64
 800927a:	fb02 f303 	mul.w	r3, r2, r3
 800927e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	3a01      	subs	r2, #1
 8009288:	62da      	str	r2, [r3, #44]	; 0x2c
 800928a:	e07c      	b.n	8009386 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009292:	d029      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800929a:	d025      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d020      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80092ac:	d01c      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d017      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f241 7270 	movw	r2, #6000	; 0x1770
 80092be:	4293      	cmp	r3, r2
 80092c0:	d012      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00d      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80092d2:	d009      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80092da:	4293      	cmp	r3, r2
 80092dc:	d004      	beq.n	80092e8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d10c      	bne.n	8009302 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68da      	ldr	r2, [r3, #12]
 80092ec:	4613      	mov	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	3a01      	subs	r2, #1
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8009300:	e041      	b.n	8009386 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8009308:	d028      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009310:	4293      	cmp	r3, r2
 8009312:	d023      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f247 5230 	movw	r2, #30000	; 0x7530
 800931a:	4293      	cmp	r3, r2
 800931c:	d01e      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f649 4240 	movw	r2, #40000	; 0x9c40
 8009324:	4293      	cmp	r3, r2
 8009326:	d019      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800932e:	4293      	cmp	r3, r2
 8009330:	d014      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009338:	4293      	cmp	r3, r2
 800933a:	d00f      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4a19      	ldr	r2, [pc, #100]	; (80093a4 <BasicTimer_Config+0x244>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00b      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <BasicTimer_Config+0x248>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d007      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	4a17      	ldr	r2, [pc, #92]	; (80093ac <BasicTimer_Config+0x24c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d003      	beq.n	800935c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4a16      	ldr	r2, [pc, #88]	; (80093b0 <BasicTimer_Config+0x250>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d108      	bne.n	800936e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	3a01      	subs	r2, #1
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c
 800936c:	e00b      	b.n	8009386 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	4a10      	ldr	r2, [pc, #64]	; (80093b4 <BasicTimer_Config+0x254>)
 8009374:	fba2 2303 	umull	r2, r3, r2, r3
 8009378:	08db      	lsrs	r3, r3, #3
 800937a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	3a01      	subs	r2, #1
 8009384:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	625a      	str	r2, [r3, #36]	; 0x24
 800938e:	e027      	b.n	80093e0 <BasicTimer_Config+0x280>
 8009390:	40010000 	.word	0x40010000
 8009394:	40023800 	.word	0x40023800
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	00011170 	.word	0x00011170
 80093a8:	00013880 	.word	0x00013880
 80093ac:	00015f90 	.word	0x00015f90
 80093b0:	000186a0 	.word	0x000186a0
 80093b4:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0210 	orr.w	r2, r2, #16
 80093c6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3a01      	subs	r2, #1
 80093d2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3a01      	subs	r2, #1
 80093de:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7c1b      	ldrb	r3, [r3, #16]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d12d      	bne.n	8009444 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0201 	orr.w	r2, r2, #1
 80093f6:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009400:	d103      	bne.n	800940a <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 8009402:	201c      	movs	r0, #28
 8009404:	f7ff fe48 	bl	8009098 <__NVIC_EnableIRQ>
 8009408:	e024      	b.n	8009454 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a14      	ldr	r2, [pc, #80]	; (8009460 <BasicTimer_Config+0x300>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d103      	bne.n	800941c <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 8009414:	201d      	movs	r0, #29
 8009416:	f7ff fe3f 	bl	8009098 <__NVIC_EnableIRQ>
 800941a:	e01b      	b.n	8009454 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a10      	ldr	r2, [pc, #64]	; (8009464 <BasicTimer_Config+0x304>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d103      	bne.n	800942e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8009426:	201e      	movs	r0, #30
 8009428:	f7ff fe36 	bl	8009098 <__NVIC_EnableIRQ>
 800942c:	e012      	b.n	8009454 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a0d      	ldr	r2, [pc, #52]	; (8009468 <BasicTimer_Config+0x308>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d103      	bne.n	8009440 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8009438:	2032      	movs	r0, #50	; 0x32
 800943a:	f7ff fe2d 	bl	8009098 <__NVIC_EnableIRQ>
 800943e:	e009      	b.n	8009454 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8009440:	bf00      	nop
 8009442:	e007      	b.n	8009454 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0201 	bic.w	r2, r2, #1
 8009452:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009454:	b662      	cpsie	i
}
 8009456:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	40000400 	.word	0x40000400
 8009464:	40000800 	.word	0x40000800
 8009468:	40000c00 	.word	0x40000c00

0800946c <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8009476:	4818      	ldr	r0, [pc, #96]	; (80094d8 <delay_ms+0x6c>)
 8009478:	f000 fab8 	bl	80099ec <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	461a      	mov	r2, r3
 8009480:	0092      	lsls	r2, r2, #2
 8009482:	4413      	add	r3, r2
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	b29b      	uxth	r3, r3
 8009488:	3b01      	subs	r3, #1
 800948a:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8009490:	e016      	b.n	80094c0 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8009492:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <delay_ms+0x6c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00f      	beq.n	80094c0 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <delay_ms+0x6c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	3301      	adds	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	89fb      	ldrh	r3, [r7, #14]
 80094ac:	4413      	add	r3, r2
 80094ae:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 80094b0:	4b09      	ldr	r3, [pc, #36]	; (80094d8 <delay_ms+0x6c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691a      	ldr	r2, [r3, #16]
 80094b6:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <delay_ms+0x6c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0201 	bic.w	r2, r2, #1
 80094be:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 80094c0:	89fa      	ldrh	r2, [r7, #14]
 80094c2:	89bb      	ldrh	r3, [r7, #12]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d3e4      	bcc.n	8009492 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 80094c8:	4803      	ldr	r0, [pc, #12]	; (80094d8 <delay_ms+0x6c>)
 80094ca:	f000 faa1 	bl	8009a10 <stopTimer>
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000338 	.word	0x20000338

080094dc <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80094e8:	b672      	cpsid	i
}
 80094ea:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094f4:	d105      	bne.n	8009502 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	4619      	mov	r1, r3
 80094fa:	201c      	movs	r0, #28
 80094fc:	f7ff fdea 	bl	80090d4 <__NVIC_SetPriority>
 8009500:	e021      	b.n	8009546 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a13      	ldr	r2, [pc, #76]	; (8009554 <TIM_SetPriority+0x78>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d105      	bne.n	8009518 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	4619      	mov	r1, r3
 8009510:	201d      	movs	r0, #29
 8009512:	f7ff fddf 	bl	80090d4 <__NVIC_SetPriority>
 8009516:	e016      	b.n	8009546 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a0e      	ldr	r2, [pc, #56]	; (8009558 <TIM_SetPriority+0x7c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d105      	bne.n	800952e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	4619      	mov	r1, r3
 8009526:	201e      	movs	r0, #30
 8009528:	f7ff fdd4 	bl	80090d4 <__NVIC_SetPriority>
 800952c:	e00b      	b.n	8009546 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <TIM_SetPriority+0x80>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d105      	bne.n	8009544 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	4619      	mov	r1, r3
 800953c:	2032      	movs	r0, #50	; 0x32
 800953e:	f7ff fdc9 	bl	80090d4 <__NVIC_SetPriority>
 8009542:	e000      	b.n	8009546 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8009544:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009546:	b662      	cpsie	i
}
 8009548:	bf00      	nop
	}

	__enable_irq();

}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	40000400 	.word	0x40000400
 8009558:	40000800 	.word	0x40000800
 800955c:	40000c00 	.word	0x40000c00

08009560 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009564:	bf00      	nop
}
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009574:	bf00      	nop
}
 8009576:	bf00      	nop
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009584:	bf00      	nop
}
 8009586:	bf00      	nop
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009594:	bf00      	nop
}
 8009596:	bf00      	nop
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095a4:	bf00      	nop
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095b4:	bf00      	nop
}
 80095b6:	bf00      	nop
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80095c0:	b480      	push	{r7}
 80095c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095c4:	bf00      	nop
}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80095d0:	b480      	push	{r7}
 80095d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095d4:	bf00      	nop
}
 80095d6:	bf00      	nop
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095e4:	bf00      	nop
}
 80095e6:	bf00      	nop
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80095f0:	b480      	push	{r7}
 80095f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80095f4:	bf00      	nop
}
 80095f6:	bf00      	nop
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009604:	bf00      	nop
}
 8009606:	bf00      	nop
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009614:	bf00      	nop
}
 8009616:	bf00      	nop
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009624:	bf00      	nop
}
 8009626:	bf00      	nop
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009634:	bf00      	nop
}
 8009636:	bf00      	nop
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009644:	bf00      	nop
}
 8009646:	bf00      	nop
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8009650:	b480      	push	{r7}
 8009652:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009654:	bf00      	nop
}
 8009656:	bf00      	nop
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009664:	bf00      	nop
}
 8009666:	bf00      	nop
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009674:	bf00      	nop
}
 8009676:	bf00      	nop
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8009684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8009692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800969c:	f023 0301 	bic.w	r3, r3, #1
 80096a0:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 80096a2:	f7f9 fa81 	bl	8002ba8 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 80096a6:	e066      	b.n	8009776 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 80096a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d012      	beq.n	80096dc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80096b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80096c0:	f023 0302 	bic.w	r3, r3, #2
 80096c4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80096c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80096d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80096d6:	f7ff ff5b 	bl	8009590 <Capture_TIM2_Ch1_Callback>
}
 80096da:	e04c      	b.n	8009776 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80096dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0304 	and.w	r3, r3, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d012      	beq.n	8009710 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80096ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80096f4:	f023 0304 	bic.w	r3, r3, #4
 80096f8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80096fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009708:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 800970a:	f7ff ff49 	bl	80095a0 <Capture_TIM2_Ch2_Callback>
}
 800970e:	e032      	b.n	8009776 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8009710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d012      	beq.n	8009744 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800971e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009728:	f023 0308 	bic.w	r3, r3, #8
 800972c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800972e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800973c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800973e:	f7ff ff37 	bl	80095b0 <Capture_TIM2_Ch3_Callback>
}
 8009742:	e018      	b.n	8009776 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8009744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	f003 0310 	and.w	r3, r3, #16
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8009752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800975c:	f023 0310 	bic.w	r3, r3, #16
 8009760:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8009762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800976c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009770:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8009772:	f7ff ff25 	bl	80095c0 <Capture_TIM2_Ch4_Callback>
}
 8009776:	bf00      	nop
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8009780:	4b31      	ldr	r3, [pc, #196]	; (8009848 <TIM3_IRQHandler+0xcc>)
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800978c:	4b2e      	ldr	r3, [pc, #184]	; (8009848 <TIM3_IRQHandler+0xcc>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	4a2d      	ldr	r2, [pc, #180]	; (8009848 <TIM3_IRQHandler+0xcc>)
 8009792:	f023 0301 	bic.w	r3, r3, #1
 8009796:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8009798:	f7ff fee2 	bl	8009560 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800979c:	e052      	b.n	8009844 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800979e:	4b2a      	ldr	r3, [pc, #168]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00e      	beq.n	80097c8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 80097aa:	4b27      	ldr	r3, [pc, #156]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	4a26      	ldr	r2, [pc, #152]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097b0:	f023 0302 	bic.w	r3, r3, #2
 80097b4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80097b6:	4b24      	ldr	r3, [pc, #144]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	4a23      	ldr	r2, [pc, #140]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097c0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80097c2:	f7ff ff05 	bl	80095d0 <Capture_TIM3_Ch1_Callback>
}
 80097c6:	e03d      	b.n	8009844 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80097c8:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00e      	beq.n	80097f2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80097d4:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097da:	f023 0304 	bic.w	r3, r3, #4
 80097de:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80097e0:	4b19      	ldr	r3, [pc, #100]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	4a18      	ldr	r2, [pc, #96]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097ea:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80097ec:	f7ff fef8 	bl	80095e0 <Capture_TIM3_Ch2_Callback>
}
 80097f0:	e028      	b.n	8009844 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <TIM3_IRQHandler+0xcc>)
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00e      	beq.n	800981c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80097fe:	4b12      	ldr	r3, [pc, #72]	; (8009848 <TIM3_IRQHandler+0xcc>)
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	4a11      	ldr	r2, [pc, #68]	; (8009848 <TIM3_IRQHandler+0xcc>)
 8009804:	f023 0308 	bic.w	r3, r3, #8
 8009808:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 800980a:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <TIM3_IRQHandler+0xcc>)
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	4a0e      	ldr	r2, [pc, #56]	; (8009848 <TIM3_IRQHandler+0xcc>)
 8009810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009814:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8009816:	f7ff feeb 	bl	80095f0 <Capture_TIM3_Ch3_Callback>
}
 800981a:	e013      	b.n	8009844 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <TIM3_IRQHandler+0xcc>)
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	f003 0310 	and.w	r3, r3, #16
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00d      	beq.n	8009844 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <TIM3_IRQHandler+0xcc>)
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	4a06      	ldr	r2, [pc, #24]	; (8009848 <TIM3_IRQHandler+0xcc>)
 800982e:	f023 0310 	bic.w	r3, r3, #16
 8009832:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8009834:	4b04      	ldr	r3, [pc, #16]	; (8009848 <TIM3_IRQHandler+0xcc>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	4a03      	ldr	r2, [pc, #12]	; (8009848 <TIM3_IRQHandler+0xcc>)
 800983a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800983e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8009840:	f7ff fede 	bl	8009600 <Capture_TIM3_Ch4_Callback>
}
 8009844:	bf00      	nop
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40000400 	.word	0x40000400

0800984c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8009850:	4b31      	ldr	r3, [pc, #196]	; (8009918 <TIM4_IRQHandler+0xcc>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d008      	beq.n	800986e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800985c:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <TIM4_IRQHandler+0xcc>)
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	4a2d      	ldr	r2, [pc, #180]	; (8009918 <TIM4_IRQHandler+0xcc>)
 8009862:	f023 0301 	bic.w	r3, r3, #1
 8009866:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8009868:	f7ff fe82 	bl	8009570 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800986c:	e052      	b.n	8009914 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800986e:	4b2a      	ldr	r3, [pc, #168]	; (8009918 <TIM4_IRQHandler+0xcc>)
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800987a:	4b27      	ldr	r3, [pc, #156]	; (8009918 <TIM4_IRQHandler+0xcc>)
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	4a26      	ldr	r2, [pc, #152]	; (8009918 <TIM4_IRQHandler+0xcc>)
 8009880:	f023 0302 	bic.w	r3, r3, #2
 8009884:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <TIM4_IRQHandler+0xcc>)
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	4a23      	ldr	r2, [pc, #140]	; (8009918 <TIM4_IRQHandler+0xcc>)
 800988c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009890:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8009892:	f7ff febd 	bl	8009610 <Capture_TIM4_Ch1_Callback>
}
 8009896:	e03d      	b.n	8009914 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <TIM4_IRQHandler+0xcc>)
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	4a1b      	ldr	r2, [pc, #108]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098aa:	f023 0304 	bic.w	r3, r3, #4
 80098ae:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80098b0:	4b19      	ldr	r3, [pc, #100]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	4a18      	ldr	r2, [pc, #96]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098ba:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80098bc:	f7ff fec8 	bl	8009650 <Capture_TIM5_Ch2_Callback>
}
 80098c0:	e028      	b.n	8009914 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00e      	beq.n	80098ec <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80098ce:	4b12      	ldr	r3, [pc, #72]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	4a11      	ldr	r2, [pc, #68]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098d4:	f023 0308 	bic.w	r3, r3, #8
 80098d8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80098da:	4b0f      	ldr	r3, [pc, #60]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	4a0e      	ldr	r2, [pc, #56]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098e4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80098e6:	f7ff fe9b 	bl	8009620 <Capture_TIM4_Ch3_Callback>
}
 80098ea:	e013      	b.n	8009914 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80098ec:	4b0a      	ldr	r3, [pc, #40]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00d      	beq.n	8009914 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80098f8:	4b07      	ldr	r3, [pc, #28]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	4a06      	ldr	r2, [pc, #24]	; (8009918 <TIM4_IRQHandler+0xcc>)
 80098fe:	f023 0310 	bic.w	r3, r3, #16
 8009902:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <TIM4_IRQHandler+0xcc>)
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	4a03      	ldr	r2, [pc, #12]	; (8009918 <TIM4_IRQHandler+0xcc>)
 800990a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800990e:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8009910:	f7ff fe8e 	bl	8009630 <Capture_TIM4_Ch4_Callback>
}
 8009914:	bf00      	nop
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40000800 	.word	0x40000800

0800991c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8009920:	4b31      	ldr	r3, [pc, #196]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	d008      	beq.n	800993e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800992c:	4b2e      	ldr	r3, [pc, #184]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	4a2d      	ldr	r2, [pc, #180]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009932:	f023 0301 	bic.w	r3, r3, #1
 8009936:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8009938:	f7ff fe22 	bl	8009580 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800993c:	e052      	b.n	80099e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800993e:	4b2a      	ldr	r3, [pc, #168]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00e      	beq.n	8009968 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800994a:	4b27      	ldr	r3, [pc, #156]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	4a26      	ldr	r2, [pc, #152]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009950:	f023 0302 	bic.w	r3, r3, #2
 8009954:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8009956:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	4a23      	ldr	r2, [pc, #140]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 800995c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009960:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8009962:	f7ff fe6d 	bl	8009640 <Capture_TIM5_Ch1_Callback>
}
 8009966:	e03d      	b.n	80099e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8009968:	4b1f      	ldr	r3, [pc, #124]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8009974:	4b1c      	ldr	r3, [pc, #112]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	4a1b      	ldr	r2, [pc, #108]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 800997a:	f023 0304 	bic.w	r3, r3, #4
 800997e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8009980:	4b19      	ldr	r3, [pc, #100]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	4a18      	ldr	r2, [pc, #96]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800998a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800998c:	f7ff fe60 	bl	8009650 <Capture_TIM5_Ch2_Callback>
}
 8009990:	e028      	b.n	80099e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 0308 	and.w	r3, r3, #8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00e      	beq.n	80099bc <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800999e:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	4a11      	ldr	r2, [pc, #68]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099a4:	f023 0308 	bic.w	r3, r3, #8
 80099a8:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	4a0e      	ldr	r2, [pc, #56]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099b4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80099b6:	f7ff fe53 	bl	8009660 <Capture_TIM5_Ch3_Callback>
}
 80099ba:	e013      	b.n	80099e4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80099bc:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f003 0310 	and.w	r3, r3, #16
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00d      	beq.n	80099e4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80099c8:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	4a06      	ldr	r2, [pc, #24]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099ce:	f023 0310 	bic.w	r3, r3, #16
 80099d2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80099d4:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	4a03      	ldr	r2, [pc, #12]	; (80099e8 <TIM5_IRQHandler+0xcc>)
 80099da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099de:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80099e0:	f7ff fe46 	bl	8009670 <Capture_TIM5_Ch4_Callback>
}
 80099e4:	bf00      	nop
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	40000c00 	.word	0x40000c00

080099ec <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0201 	orr.w	r2, r2, #1
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f022 0201 	bic.w	r2, r2, #1
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <__NVIC_EnableIRQ>:
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	db0b      	blt.n	8009a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	f003 021f 	and.w	r2, r3, #31
 8009a4c:	4907      	ldr	r1, [pc, #28]	; (8009a6c <__NVIC_EnableIRQ+0x38>)
 8009a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	2001      	movs	r0, #1
 8009a56:	fa00 f202 	lsl.w	r2, r0, r2
 8009a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	e000e100 	.word	0xe000e100

08009a70 <__NVIC_SetPriority>:
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	db0a      	blt.n	8009a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	490c      	ldr	r1, [pc, #48]	; (8009abc <__NVIC_SetPriority+0x4c>)
 8009a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a8e:	0112      	lsls	r2, r2, #4
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	440b      	add	r3, r1
 8009a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a98:	e00a      	b.n	8009ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	4908      	ldr	r1, [pc, #32]	; (8009ac0 <__NVIC_SetPriority+0x50>)
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	f003 030f 	and.w	r3, r3, #15
 8009aa6:	3b04      	subs	r3, #4
 8009aa8:	0112      	lsls	r2, r2, #4
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	440b      	add	r3, r1
 8009aae:	761a      	strb	r2, [r3, #24]
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	e000e100 	.word	0xe000e100
 8009ac0:	e000ed00 	.word	0xe000ed00

08009ac4 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f8bf 	bl	800ac54 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8009ad6:	4b96      	ldr	r3, [pc, #600]	; (8009d30 <extInt_Config+0x26c>)
 8009ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009adc:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	791b      	ldrb	r3, [r3, #4]
 8009ae4:	2b0f      	cmp	r3, #15
 8009ae6:	f200 85cd 	bhi.w	800a684 <extInt_Config+0xbc0>
 8009aea:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <extInt_Config+0x2c>)
 8009aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af0:	08009b31 	.word	0x08009b31
 8009af4:	08009be7 	.word	0x08009be7
 8009af8:	08009c9d 	.word	0x08009c9d
 8009afc:	08009d73 	.word	0x08009d73
 8009b00:	08009e29 	.word	0x08009e29
 8009b04:	08009ed7 	.word	0x08009ed7
 8009b08:	08009f9d 	.word	0x08009f9d
 8009b0c:	0800a045 	.word	0x0800a045
 8009b10:	0800a0ed 	.word	0x0800a0ed
 8009b14:	0800a195 	.word	0x0800a195
 8009b18:	0800a25b 	.word	0x0800a25b
 8009b1c:	0800a303 	.word	0x0800a303
 8009b20:	0800a3ab 	.word	0x0800a3ab
 8009b24:	0800a471 	.word	0x0800a471
 8009b28:	0800a517 	.word	0x0800a517
 8009b2c:	0800a5bf 	.word	0x0800a5bf
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8009b30:	4b80      	ldr	r3, [pc, #512]	; (8009d34 <extInt_Config+0x270>)
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	4a7f      	ldr	r2, [pc, #508]	; (8009d34 <extInt_Config+0x270>)
 8009b36:	f023 030f 	bic.w	r3, r3, #15
 8009b3a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a7d      	ldr	r2, [pc, #500]	; (8009d38 <extInt_Config+0x274>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d105      	bne.n	8009b54 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8009b48:	4b7a      	ldr	r3, [pc, #488]	; (8009d34 <extInt_Config+0x270>)
 8009b4a:	4a7a      	ldr	r2, [pc, #488]	; (8009d34 <extInt_Config+0x270>)
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009b50:	f000 bd9a 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a78      	ldr	r2, [pc, #480]	; (8009d3c <extInt_Config+0x278>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d107      	bne.n	8009b70 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8009b60:	4b74      	ldr	r3, [pc, #464]	; (8009d34 <extInt_Config+0x270>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	4a73      	ldr	r2, [pc, #460]	; (8009d34 <extInt_Config+0x270>)
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	6093      	str	r3, [r2, #8]
					break;
 8009b6c:	f000 bd8c 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a72      	ldr	r2, [pc, #456]	; (8009d40 <extInt_Config+0x27c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d107      	bne.n	8009b8c <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8009b7c:	4b6d      	ldr	r3, [pc, #436]	; (8009d34 <extInt_Config+0x270>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	4a6c      	ldr	r2, [pc, #432]	; (8009d34 <extInt_Config+0x270>)
 8009b82:	f043 0302 	orr.w	r3, r3, #2
 8009b86:	6093      	str	r3, [r2, #8]
					break;
 8009b88:	f000 bd7e 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a6c      	ldr	r2, [pc, #432]	; (8009d44 <extInt_Config+0x280>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d107      	bne.n	8009ba8 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8009b98:	4b66      	ldr	r3, [pc, #408]	; (8009d34 <extInt_Config+0x270>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	4a65      	ldr	r2, [pc, #404]	; (8009d34 <extInt_Config+0x270>)
 8009b9e:	f043 0303 	orr.w	r3, r3, #3
 8009ba2:	6093      	str	r3, [r2, #8]
					break;
 8009ba4:	f000 bd70 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a66      	ldr	r2, [pc, #408]	; (8009d48 <extInt_Config+0x284>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d107      	bne.n	8009bc4 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8009bb4:	4b5f      	ldr	r3, [pc, #380]	; (8009d34 <extInt_Config+0x270>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	4a5e      	ldr	r2, [pc, #376]	; (8009d34 <extInt_Config+0x270>)
 8009bba:	f043 0304 	orr.w	r3, r3, #4
 8009bbe:	6093      	str	r3, [r2, #8]
					break;
 8009bc0:	f000 bd62 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a60      	ldr	r2, [pc, #384]	; (8009d4c <extInt_Config+0x288>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d107      	bne.n	8009be0 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8009bd0:	4b58      	ldr	r3, [pc, #352]	; (8009d34 <extInt_Config+0x270>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	4a57      	ldr	r2, [pc, #348]	; (8009d34 <extInt_Config+0x270>)
 8009bd6:	f043 0307 	orr.w	r3, r3, #7
 8009bda:	6093      	str	r3, [r2, #8]
					break;
 8009bdc:	f000 bd54 	b.w	800a688 <extInt_Config+0xbc4>
						__NOP();
 8009be0:	bf00      	nop
					break;
 8009be2:	f000 bd51 	b.w	800a688 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8009be6:	4b53      	ldr	r3, [pc, #332]	; (8009d34 <extInt_Config+0x270>)
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	4a52      	ldr	r2, [pc, #328]	; (8009d34 <extInt_Config+0x270>)
 8009bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bf0:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a4f      	ldr	r2, [pc, #316]	; (8009d38 <extInt_Config+0x274>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d105      	bne.n	8009c0a <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8009bfe:	4b4d      	ldr	r3, [pc, #308]	; (8009d34 <extInt_Config+0x270>)
 8009c00:	4a4c      	ldr	r2, [pc, #304]	; (8009d34 <extInt_Config+0x270>)
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009c06:	f000 bd3f 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a4a      	ldr	r2, [pc, #296]	; (8009d3c <extInt_Config+0x278>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d107      	bne.n	8009c26 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8009c16:	4b47      	ldr	r3, [pc, #284]	; (8009d34 <extInt_Config+0x270>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	4a46      	ldr	r2, [pc, #280]	; (8009d34 <extInt_Config+0x270>)
 8009c1c:	f043 0310 	orr.w	r3, r3, #16
 8009c20:	6093      	str	r3, [r2, #8]
					break;
 8009c22:	f000 bd31 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a44      	ldr	r2, [pc, #272]	; (8009d40 <extInt_Config+0x27c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d107      	bne.n	8009c42 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8009c32:	4b40      	ldr	r3, [pc, #256]	; (8009d34 <extInt_Config+0x270>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	4a3f      	ldr	r2, [pc, #252]	; (8009d34 <extInt_Config+0x270>)
 8009c38:	f043 0320 	orr.w	r3, r3, #32
 8009c3c:	6093      	str	r3, [r2, #8]
					break;
 8009c3e:	f000 bd23 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a3e      	ldr	r2, [pc, #248]	; (8009d44 <extInt_Config+0x280>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d107      	bne.n	8009c5e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8009c4e:	4b39      	ldr	r3, [pc, #228]	; (8009d34 <extInt_Config+0x270>)
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	4a38      	ldr	r2, [pc, #224]	; (8009d34 <extInt_Config+0x270>)
 8009c54:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009c58:	6093      	str	r3, [r2, #8]
					break;
 8009c5a:	f000 bd15 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a38      	ldr	r2, [pc, #224]	; (8009d48 <extInt_Config+0x284>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d107      	bne.n	8009c7a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8009c6a:	4b32      	ldr	r3, [pc, #200]	; (8009d34 <extInt_Config+0x270>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	4a31      	ldr	r2, [pc, #196]	; (8009d34 <extInt_Config+0x270>)
 8009c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c74:	6093      	str	r3, [r2, #8]
					break;
 8009c76:	f000 bd07 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a32      	ldr	r2, [pc, #200]	; (8009d4c <extInt_Config+0x288>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d107      	bne.n	8009c96 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8009c86:	4b2b      	ldr	r3, [pc, #172]	; (8009d34 <extInt_Config+0x270>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <extInt_Config+0x270>)
 8009c8c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009c90:	6093      	str	r3, [r2, #8]
					break;
 8009c92:	f000 bcf9 	b.w	800a688 <extInt_Config+0xbc4>
						__NOP();
 8009c96:	bf00      	nop
					break;
 8009c98:	f000 bcf6 	b.w	800a688 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8009c9c:	4b25      	ldr	r3, [pc, #148]	; (8009d34 <extInt_Config+0x270>)
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	4a24      	ldr	r2, [pc, #144]	; (8009d34 <extInt_Config+0x270>)
 8009ca2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ca6:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a22      	ldr	r2, [pc, #136]	; (8009d38 <extInt_Config+0x274>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d105      	bne.n	8009cc0 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8009cb4:	4b1f      	ldr	r3, [pc, #124]	; (8009d34 <extInt_Config+0x270>)
 8009cb6:	4a1f      	ldr	r2, [pc, #124]	; (8009d34 <extInt_Config+0x270>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009cbc:	f000 bce4 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a1d      	ldr	r2, [pc, #116]	; (8009d3c <extInt_Config+0x278>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d107      	bne.n	8009cdc <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8009ccc:	4b19      	ldr	r3, [pc, #100]	; (8009d34 <extInt_Config+0x270>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	4a18      	ldr	r2, [pc, #96]	; (8009d34 <extInt_Config+0x270>)
 8009cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd6:	6093      	str	r3, [r2, #8]
					break;
 8009cd8:	f000 bcd6 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a17      	ldr	r2, [pc, #92]	; (8009d40 <extInt_Config+0x27c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d107      	bne.n	8009cf8 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8009ce8:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <extInt_Config+0x270>)
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	4a11      	ldr	r2, [pc, #68]	; (8009d34 <extInt_Config+0x270>)
 8009cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009cf2:	6093      	str	r3, [r2, #8]
					break;
 8009cf4:	f000 bcc8 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a11      	ldr	r2, [pc, #68]	; (8009d44 <extInt_Config+0x280>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d107      	bne.n	8009d14 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8009d04:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <extInt_Config+0x270>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	4a0a      	ldr	r2, [pc, #40]	; (8009d34 <extInt_Config+0x270>)
 8009d0a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d0e:	6093      	str	r3, [r2, #8]
					break;
 8009d10:	f000 bcba 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a0b      	ldr	r2, [pc, #44]	; (8009d48 <extInt_Config+0x284>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d117      	bne.n	8009d50 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <extInt_Config+0x270>)
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	4a03      	ldr	r2, [pc, #12]	; (8009d34 <extInt_Config+0x270>)
 8009d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d2a:	6093      	str	r3, [r2, #8]
					break;
 8009d2c:	f000 bcac 	b.w	800a688 <extInt_Config+0xbc4>
 8009d30:	40023800 	.word	0x40023800
 8009d34:	40013800 	.word	0x40013800
 8009d38:	40020000 	.word	0x40020000
 8009d3c:	40020400 	.word	0x40020400
 8009d40:	40020800 	.word	0x40020800
 8009d44:	40020c00 	.word	0x40020c00
 8009d48:	40021000 	.word	0x40021000
 8009d4c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a8a      	ldr	r2, [pc, #552]	; (8009f80 <extInt_Config+0x4bc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d107      	bne.n	8009d6c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8009d5c:	4b89      	ldr	r3, [pc, #548]	; (8009f84 <extInt_Config+0x4c0>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4a88      	ldr	r2, [pc, #544]	; (8009f84 <extInt_Config+0x4c0>)
 8009d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009d66:	6093      	str	r3, [r2, #8]
					break;
 8009d68:	f000 bc8e 	b.w	800a688 <extInt_Config+0xbc4>
						__NOP();
 8009d6c:	bf00      	nop
					break;
 8009d6e:	f000 bc8b 	b.w	800a688 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8009d72:	4b84      	ldr	r3, [pc, #528]	; (8009f84 <extInt_Config+0x4c0>)
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	4a83      	ldr	r2, [pc, #524]	; (8009f84 <extInt_Config+0x4c0>)
 8009d78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d7c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a80      	ldr	r2, [pc, #512]	; (8009f88 <extInt_Config+0x4c4>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d105      	bne.n	8009d96 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8009d8a:	4b7e      	ldr	r3, [pc, #504]	; (8009f84 <extInt_Config+0x4c0>)
 8009d8c:	4a7d      	ldr	r2, [pc, #500]	; (8009f84 <extInt_Config+0x4c0>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009d92:	f000 bc79 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a7b      	ldr	r2, [pc, #492]	; (8009f8c <extInt_Config+0x4c8>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d107      	bne.n	8009db2 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8009da2:	4b78      	ldr	r3, [pc, #480]	; (8009f84 <extInt_Config+0x4c0>)
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	4a77      	ldr	r2, [pc, #476]	; (8009f84 <extInt_Config+0x4c0>)
 8009da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dac:	6093      	str	r3, [r2, #8]
					break;
 8009dae:	f000 bc6b 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a75      	ldr	r2, [pc, #468]	; (8009f90 <extInt_Config+0x4cc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d107      	bne.n	8009dce <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8009dbe:	4b71      	ldr	r3, [pc, #452]	; (8009f84 <extInt_Config+0x4c0>)
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	4a70      	ldr	r2, [pc, #448]	; (8009f84 <extInt_Config+0x4c0>)
 8009dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009dc8:	6093      	str	r3, [r2, #8]
					break;
 8009dca:	f000 bc5d 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a6f      	ldr	r2, [pc, #444]	; (8009f94 <extInt_Config+0x4d0>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d107      	bne.n	8009dea <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8009dda:	4b6a      	ldr	r3, [pc, #424]	; (8009f84 <extInt_Config+0x4c0>)
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	4a69      	ldr	r2, [pc, #420]	; (8009f84 <extInt_Config+0x4c0>)
 8009de0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009de4:	6093      	str	r3, [r2, #8]
					break;
 8009de6:	f000 bc4f 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a69      	ldr	r2, [pc, #420]	; (8009f98 <extInt_Config+0x4d4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d107      	bne.n	8009e06 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8009df6:	4b63      	ldr	r3, [pc, #396]	; (8009f84 <extInt_Config+0x4c0>)
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	4a62      	ldr	r2, [pc, #392]	; (8009f84 <extInt_Config+0x4c0>)
 8009dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e00:	6093      	str	r3, [r2, #8]
					break;
 8009e02:	f000 bc41 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a5c      	ldr	r2, [pc, #368]	; (8009f80 <extInt_Config+0x4bc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d107      	bne.n	8009e22 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8009e12:	4b5c      	ldr	r3, [pc, #368]	; (8009f84 <extInt_Config+0x4c0>)
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	4a5b      	ldr	r2, [pc, #364]	; (8009f84 <extInt_Config+0x4c0>)
 8009e18:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009e1c:	6093      	str	r3, [r2, #8]
					break;
 8009e1e:	f000 bc33 	b.w	800a688 <extInt_Config+0xbc4>
						__NOP();
 8009e22:	bf00      	nop
					break;
 8009e24:	f000 bc30 	b.w	800a688 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8009e28:	4b56      	ldr	r3, [pc, #344]	; (8009f84 <extInt_Config+0x4c0>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	4a55      	ldr	r2, [pc, #340]	; (8009f84 <extInt_Config+0x4c0>)
 8009e2e:	f023 030f 	bic.w	r3, r3, #15
 8009e32:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a53      	ldr	r2, [pc, #332]	; (8009f88 <extInt_Config+0x4c4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d105      	bne.n	8009e4c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8009e40:	4b50      	ldr	r3, [pc, #320]	; (8009f84 <extInt_Config+0x4c0>)
 8009e42:	4a50      	ldr	r2, [pc, #320]	; (8009f84 <extInt_Config+0x4c0>)
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009e48:	f000 bc1e 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a4e      	ldr	r2, [pc, #312]	; (8009f8c <extInt_Config+0x4c8>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d107      	bne.n	8009e68 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8009e58:	4b4a      	ldr	r3, [pc, #296]	; (8009f84 <extInt_Config+0x4c0>)
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	4a49      	ldr	r2, [pc, #292]	; (8009f84 <extInt_Config+0x4c0>)
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	60d3      	str	r3, [r2, #12]
					break;
 8009e64:	f000 bc10 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a48      	ldr	r2, [pc, #288]	; (8009f90 <extInt_Config+0x4cc>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d107      	bne.n	8009e84 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8009e74:	4b43      	ldr	r3, [pc, #268]	; (8009f84 <extInt_Config+0x4c0>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	4a42      	ldr	r2, [pc, #264]	; (8009f84 <extInt_Config+0x4c0>)
 8009e7a:	f043 0302 	orr.w	r3, r3, #2
 8009e7e:	60d3      	str	r3, [r2, #12]
					break;
 8009e80:	f000 bc02 	b.w	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a42      	ldr	r2, [pc, #264]	; (8009f94 <extInt_Config+0x4d0>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d106      	bne.n	8009e9e <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8009e90:	4b3c      	ldr	r3, [pc, #240]	; (8009f84 <extInt_Config+0x4c0>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	4a3b      	ldr	r2, [pc, #236]	; (8009f84 <extInt_Config+0x4c0>)
 8009e96:	f043 0303 	orr.w	r3, r3, #3
 8009e9a:	60d3      	str	r3, [r2, #12]
					break;
 8009e9c:	e3f4      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a3c      	ldr	r2, [pc, #240]	; (8009f98 <extInt_Config+0x4d4>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d106      	bne.n	8009eb8 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8009eaa:	4b36      	ldr	r3, [pc, #216]	; (8009f84 <extInt_Config+0x4c0>)
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	4a35      	ldr	r2, [pc, #212]	; (8009f84 <extInt_Config+0x4c0>)
 8009eb0:	f043 0304 	orr.w	r3, r3, #4
 8009eb4:	60d3      	str	r3, [r2, #12]
					break;
 8009eb6:	e3e7      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a30      	ldr	r2, [pc, #192]	; (8009f80 <extInt_Config+0x4bc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d106      	bne.n	8009ed2 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8009ec4:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <extInt_Config+0x4c0>)
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	4a2e      	ldr	r2, [pc, #184]	; (8009f84 <extInt_Config+0x4c0>)
 8009eca:	f043 0307 	orr.w	r3, r3, #7
 8009ece:	60d3      	str	r3, [r2, #12]
					break;
 8009ed0:	e3da      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 8009ed2:	bf00      	nop
					break;
 8009ed4:	e3d8      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8009ed6:	4b2b      	ldr	r3, [pc, #172]	; (8009f84 <extInt_Config+0x4c0>)
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	4a2a      	ldr	r2, [pc, #168]	; (8009f84 <extInt_Config+0x4c0>)
 8009edc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ee0:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a27      	ldr	r2, [pc, #156]	; (8009f88 <extInt_Config+0x4c4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d104      	bne.n	8009ef8 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8009eee:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <extInt_Config+0x4c0>)
 8009ef0:	4a24      	ldr	r2, [pc, #144]	; (8009f84 <extInt_Config+0x4c0>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009ef6:	e3c7      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a23      	ldr	r2, [pc, #140]	; (8009f8c <extInt_Config+0x4c8>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d106      	bne.n	8009f12 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8009f04:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <extInt_Config+0x4c0>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <extInt_Config+0x4c0>)
 8009f0a:	f043 0310 	orr.w	r3, r3, #16
 8009f0e:	60d3      	str	r3, [r2, #12]
					break;
 8009f10:	e3ba      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a1d      	ldr	r2, [pc, #116]	; (8009f90 <extInt_Config+0x4cc>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d106      	bne.n	8009f2c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8009f1e:	4b19      	ldr	r3, [pc, #100]	; (8009f84 <extInt_Config+0x4c0>)
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	4a18      	ldr	r2, [pc, #96]	; (8009f84 <extInt_Config+0x4c0>)
 8009f24:	f043 0320 	orr.w	r3, r3, #32
 8009f28:	60d3      	str	r3, [r2, #12]
					break;
 8009f2a:	e3ad      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a18      	ldr	r2, [pc, #96]	; (8009f94 <extInt_Config+0x4d0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d106      	bne.n	8009f46 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8009f38:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <extInt_Config+0x4c0>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	4a11      	ldr	r2, [pc, #68]	; (8009f84 <extInt_Config+0x4c0>)
 8009f3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009f42:	60d3      	str	r3, [r2, #12]
					break;
 8009f44:	e3a0      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a12      	ldr	r2, [pc, #72]	; (8009f98 <extInt_Config+0x4d4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d106      	bne.n	8009f60 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8009f52:	4b0c      	ldr	r3, [pc, #48]	; (8009f84 <extInt_Config+0x4c0>)
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	4a0b      	ldr	r2, [pc, #44]	; (8009f84 <extInt_Config+0x4c0>)
 8009f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5c:	60d3      	str	r3, [r2, #12]
					break;
 8009f5e:	e393      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a06      	ldr	r2, [pc, #24]	; (8009f80 <extInt_Config+0x4bc>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d106      	bne.n	8009f7a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <extInt_Config+0x4c0>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	4a04      	ldr	r2, [pc, #16]	; (8009f84 <extInt_Config+0x4c0>)
 8009f72:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009f76:	60d3      	str	r3, [r2, #12]
					break;
 8009f78:	e386      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 8009f7a:	bf00      	nop
					break;
 8009f7c:	e384      	b.n	800a688 <extInt_Config+0xbc4>
 8009f7e:	bf00      	nop
 8009f80:	40021c00 	.word	0x40021c00
 8009f84:	40013800 	.word	0x40013800
 8009f88:	40020000 	.word	0x40020000
 8009f8c:	40020400 	.word	0x40020400
 8009f90:	40020800 	.word	0x40020800
 8009f94:	40020c00 	.word	0x40020c00
 8009f98:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8009f9c:	4b86      	ldr	r3, [pc, #536]	; (800a1b8 <extInt_Config+0x6f4>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4a85      	ldr	r2, [pc, #532]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009fa6:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a83      	ldr	r2, [pc, #524]	; (800a1bc <extInt_Config+0x6f8>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d104      	bne.n	8009fbe <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8009fb4:	4b80      	ldr	r3, [pc, #512]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fb6:	4a80      	ldr	r2, [pc, #512]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009fbc:	e364      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a7e      	ldr	r2, [pc, #504]	; (800a1c0 <extInt_Config+0x6fc>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d106      	bne.n	8009fd8 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8009fca:	4b7b      	ldr	r3, [pc, #492]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	4a7a      	ldr	r2, [pc, #488]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd4:	60d3      	str	r3, [r2, #12]
					break;
 8009fd6:	e357      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a79      	ldr	r2, [pc, #484]	; (800a1c4 <extInt_Config+0x700>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d106      	bne.n	8009ff2 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8009fe4:	4b74      	ldr	r3, [pc, #464]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4a73      	ldr	r2, [pc, #460]	; (800a1b8 <extInt_Config+0x6f4>)
 8009fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009fee:	60d3      	str	r3, [r2, #12]
					break;
 8009ff0:	e34a      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a73      	ldr	r2, [pc, #460]	; (800a1c8 <extInt_Config+0x704>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d106      	bne.n	800a00c <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8009ffe:	4b6e      	ldr	r3, [pc, #440]	; (800a1b8 <extInt_Config+0x6f4>)
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	4a6d      	ldr	r2, [pc, #436]	; (800a1b8 <extInt_Config+0x6f4>)
 800a004:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a008:	60d3      	str	r3, [r2, #12]
					break;
 800a00a:	e33d      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a6e      	ldr	r2, [pc, #440]	; (800a1cc <extInt_Config+0x708>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d106      	bne.n	800a026 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800a018:	4b67      	ldr	r3, [pc, #412]	; (800a1b8 <extInt_Config+0x6f4>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	4a66      	ldr	r2, [pc, #408]	; (800a1b8 <extInt_Config+0x6f4>)
 800a01e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a022:	60d3      	str	r3, [r2, #12]
					break;
 800a024:	e330      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a68      	ldr	r2, [pc, #416]	; (800a1d0 <extInt_Config+0x70c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d106      	bne.n	800a040 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 800a032:	4b61      	ldr	r3, [pc, #388]	; (800a1b8 <extInt_Config+0x6f4>)
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	4a60      	ldr	r2, [pc, #384]	; (800a1b8 <extInt_Config+0x6f4>)
 800a038:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a03c:	60d3      	str	r3, [r2, #12]
					break;
 800a03e:	e323      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a040:	bf00      	nop
					break;
 800a042:	e321      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 800a044:	4b5c      	ldr	r3, [pc, #368]	; (800a1b8 <extInt_Config+0x6f4>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	4a5b      	ldr	r2, [pc, #364]	; (800a1b8 <extInt_Config+0x6f4>)
 800a04a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a04e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a59      	ldr	r2, [pc, #356]	; (800a1bc <extInt_Config+0x6f8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d104      	bne.n	800a066 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800a05c:	4b56      	ldr	r3, [pc, #344]	; (800a1b8 <extInt_Config+0x6f4>)
 800a05e:	4a56      	ldr	r2, [pc, #344]	; (800a1b8 <extInt_Config+0x6f4>)
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 800a064:	e310      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a54      	ldr	r2, [pc, #336]	; (800a1c0 <extInt_Config+0x6fc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d106      	bne.n	800a080 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800a072:	4b51      	ldr	r3, [pc, #324]	; (800a1b8 <extInt_Config+0x6f4>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	4a50      	ldr	r2, [pc, #320]	; (800a1b8 <extInt_Config+0x6f4>)
 800a078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a07c:	60d3      	str	r3, [r2, #12]
					break;
 800a07e:	e303      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a4f      	ldr	r2, [pc, #316]	; (800a1c4 <extInt_Config+0x700>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d106      	bne.n	800a09a <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800a08c:	4b4a      	ldr	r3, [pc, #296]	; (800a1b8 <extInt_Config+0x6f4>)
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	4a49      	ldr	r2, [pc, #292]	; (800a1b8 <extInt_Config+0x6f4>)
 800a092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a096:	60d3      	str	r3, [r2, #12]
					break;
 800a098:	e2f6      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a49      	ldr	r2, [pc, #292]	; (800a1c8 <extInt_Config+0x704>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d106      	bne.n	800a0b4 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800a0a6:	4b44      	ldr	r3, [pc, #272]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	4a43      	ldr	r2, [pc, #268]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0ac:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a0b0:	60d3      	str	r3, [r2, #12]
					break;
 800a0b2:	e2e9      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a44      	ldr	r2, [pc, #272]	; (800a1cc <extInt_Config+0x708>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d106      	bne.n	800a0ce <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 800a0c0:	4b3d      	ldr	r3, [pc, #244]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	4a3c      	ldr	r2, [pc, #240]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0ca:	60d3      	str	r3, [r2, #12]
					break;
 800a0cc:	e2dc      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a3e      	ldr	r2, [pc, #248]	; (800a1d0 <extInt_Config+0x70c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d106      	bne.n	800a0e8 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800a0da:	4b37      	ldr	r3, [pc, #220]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	4a36      	ldr	r2, [pc, #216]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0e0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a0e4:	60d3      	str	r3, [r2, #12]
					break;
 800a0e6:	e2cf      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a0e8:	bf00      	nop
					break;
 800a0ea:	e2cd      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 800a0ec:	4b32      	ldr	r3, [pc, #200]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	4a31      	ldr	r2, [pc, #196]	; (800a1b8 <extInt_Config+0x6f4>)
 800a0f2:	f023 030f 	bic.w	r3, r3, #15
 800a0f6:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a2f      	ldr	r2, [pc, #188]	; (800a1bc <extInt_Config+0x6f8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d104      	bne.n	800a10e <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 800a104:	4b2c      	ldr	r3, [pc, #176]	; (800a1b8 <extInt_Config+0x6f4>)
 800a106:	4a2c      	ldr	r2, [pc, #176]	; (800a1b8 <extInt_Config+0x6f4>)
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a10c:	e2bc      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <extInt_Config+0x6fc>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d106      	bne.n	800a128 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800a11a:	4b27      	ldr	r3, [pc, #156]	; (800a1b8 <extInt_Config+0x6f4>)
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	4a26      	ldr	r2, [pc, #152]	; (800a1b8 <extInt_Config+0x6f4>)
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	6113      	str	r3, [r2, #16]
					break;
 800a126:	e2af      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a25      	ldr	r2, [pc, #148]	; (800a1c4 <extInt_Config+0x700>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d106      	bne.n	800a142 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800a134:	4b20      	ldr	r3, [pc, #128]	; (800a1b8 <extInt_Config+0x6f4>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a1f      	ldr	r2, [pc, #124]	; (800a1b8 <extInt_Config+0x6f4>)
 800a13a:	f043 0302 	orr.w	r3, r3, #2
 800a13e:	6113      	str	r3, [r2, #16]
					break;
 800a140:	e2a2      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1f      	ldr	r2, [pc, #124]	; (800a1c8 <extInt_Config+0x704>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d106      	bne.n	800a15c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800a14e:	4b1a      	ldr	r3, [pc, #104]	; (800a1b8 <extInt_Config+0x6f4>)
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	4a19      	ldr	r2, [pc, #100]	; (800a1b8 <extInt_Config+0x6f4>)
 800a154:	f043 0303 	orr.w	r3, r3, #3
 800a158:	6113      	str	r3, [r2, #16]
					break;
 800a15a:	e295      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a1a      	ldr	r2, [pc, #104]	; (800a1cc <extInt_Config+0x708>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d106      	bne.n	800a176 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800a168:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <extInt_Config+0x6f4>)
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	4a12      	ldr	r2, [pc, #72]	; (800a1b8 <extInt_Config+0x6f4>)
 800a16e:	f043 0304 	orr.w	r3, r3, #4
 800a172:	6113      	str	r3, [r2, #16]
					break;
 800a174:	e288      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <extInt_Config+0x70c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d106      	bne.n	800a190 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800a182:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <extInt_Config+0x6f4>)
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	4a0c      	ldr	r2, [pc, #48]	; (800a1b8 <extInt_Config+0x6f4>)
 800a188:	f043 0307 	orr.w	r3, r3, #7
 800a18c:	6113      	str	r3, [r2, #16]
					break;
 800a18e:	e27b      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a190:	bf00      	nop
					break;
 800a192:	e279      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 800a194:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <extInt_Config+0x6f4>)
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	4a07      	ldr	r2, [pc, #28]	; (800a1b8 <extInt_Config+0x6f4>)
 800a19a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a19e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a05      	ldr	r2, [pc, #20]	; (800a1bc <extInt_Config+0x6f8>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d113      	bne.n	800a1d4 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <extInt_Config+0x6f4>)
 800a1ae:	4a02      	ldr	r2, [pc, #8]	; (800a1b8 <extInt_Config+0x6f4>)
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a1b4:	e268      	b.n	800a688 <extInt_Config+0xbc4>
 800a1b6:	bf00      	nop
 800a1b8:	40013800 	.word	0x40013800
 800a1bc:	40020000 	.word	0x40020000
 800a1c0:	40020400 	.word	0x40020400
 800a1c4:	40020800 	.word	0x40020800
 800a1c8:	40020c00 	.word	0x40020c00
 800a1cc:	40021000 	.word	0x40021000
 800a1d0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a83      	ldr	r2, [pc, #524]	; (800a3e8 <extInt_Config+0x924>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d106      	bne.n	800a1ee <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800a1e0:	4b82      	ldr	r3, [pc, #520]	; (800a3ec <extInt_Config+0x928>)
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	4a81      	ldr	r2, [pc, #516]	; (800a3ec <extInt_Config+0x928>)
 800a1e6:	f043 0310 	orr.w	r3, r3, #16
 800a1ea:	6113      	str	r3, [r2, #16]
					break;
 800a1ec:	e24c      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a7e      	ldr	r2, [pc, #504]	; (800a3f0 <extInt_Config+0x92c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d106      	bne.n	800a208 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800a1fa:	4b7c      	ldr	r3, [pc, #496]	; (800a3ec <extInt_Config+0x928>)
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	4a7b      	ldr	r2, [pc, #492]	; (800a3ec <extInt_Config+0x928>)
 800a200:	f043 0320 	orr.w	r3, r3, #32
 800a204:	6113      	str	r3, [r2, #16]
					break;
 800a206:	e23f      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a79      	ldr	r2, [pc, #484]	; (800a3f4 <extInt_Config+0x930>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d106      	bne.n	800a222 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800a214:	4b75      	ldr	r3, [pc, #468]	; (800a3ec <extInt_Config+0x928>)
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	4a74      	ldr	r2, [pc, #464]	; (800a3ec <extInt_Config+0x928>)
 800a21a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a21e:	6113      	str	r3, [r2, #16]
					break;
 800a220:	e232      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a73      	ldr	r2, [pc, #460]	; (800a3f8 <extInt_Config+0x934>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d106      	bne.n	800a23c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800a22e:	4b6f      	ldr	r3, [pc, #444]	; (800a3ec <extInt_Config+0x928>)
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	4a6e      	ldr	r2, [pc, #440]	; (800a3ec <extInt_Config+0x928>)
 800a234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a238:	6113      	str	r3, [r2, #16]
					break;
 800a23a:	e225      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a6e      	ldr	r2, [pc, #440]	; (800a3fc <extInt_Config+0x938>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d106      	bne.n	800a256 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800a248:	4b68      	ldr	r3, [pc, #416]	; (800a3ec <extInt_Config+0x928>)
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	4a67      	ldr	r2, [pc, #412]	; (800a3ec <extInt_Config+0x928>)
 800a24e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a252:	6113      	str	r3, [r2, #16]
					break;
 800a254:	e218      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a256:	bf00      	nop
					break;
 800a258:	e216      	b.n	800a688 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 800a25a:	4b64      	ldr	r3, [pc, #400]	; (800a3ec <extInt_Config+0x928>)
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	4a63      	ldr	r2, [pc, #396]	; (800a3ec <extInt_Config+0x928>)
 800a260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a264:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a64      	ldr	r2, [pc, #400]	; (800a400 <extInt_Config+0x93c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d104      	bne.n	800a27c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800a272:	4b5e      	ldr	r3, [pc, #376]	; (800a3ec <extInt_Config+0x928>)
 800a274:	4a5d      	ldr	r2, [pc, #372]	; (800a3ec <extInt_Config+0x928>)
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a27a:	e205      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a59      	ldr	r2, [pc, #356]	; (800a3e8 <extInt_Config+0x924>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d106      	bne.n	800a296 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800a288:	4b58      	ldr	r3, [pc, #352]	; (800a3ec <extInt_Config+0x928>)
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	4a57      	ldr	r2, [pc, #348]	; (800a3ec <extInt_Config+0x928>)
 800a28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a292:	6113      	str	r3, [r2, #16]
					break;
 800a294:	e1f8      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a54      	ldr	r2, [pc, #336]	; (800a3f0 <extInt_Config+0x92c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d106      	bne.n	800a2b0 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800a2a2:	4b52      	ldr	r3, [pc, #328]	; (800a3ec <extInt_Config+0x928>)
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	4a51      	ldr	r2, [pc, #324]	; (800a3ec <extInt_Config+0x928>)
 800a2a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2ac:	6113      	str	r3, [r2, #16]
					break;
 800a2ae:	e1eb      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a4f      	ldr	r2, [pc, #316]	; (800a3f4 <extInt_Config+0x930>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d106      	bne.n	800a2ca <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800a2bc:	4b4b      	ldr	r3, [pc, #300]	; (800a3ec <extInt_Config+0x928>)
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	4a4a      	ldr	r2, [pc, #296]	; (800a3ec <extInt_Config+0x928>)
 800a2c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a2c6:	6113      	str	r3, [r2, #16]
					break;
 800a2c8:	e1de      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a49      	ldr	r2, [pc, #292]	; (800a3f8 <extInt_Config+0x934>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d106      	bne.n	800a2e4 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800a2d6:	4b45      	ldr	r3, [pc, #276]	; (800a3ec <extInt_Config+0x928>)
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	4a44      	ldr	r2, [pc, #272]	; (800a3ec <extInt_Config+0x928>)
 800a2dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2e0:	6113      	str	r3, [r2, #16]
					break;
 800a2e2:	e1d1      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a44      	ldr	r2, [pc, #272]	; (800a3fc <extInt_Config+0x938>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d106      	bne.n	800a2fe <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800a2f0:	4b3e      	ldr	r3, [pc, #248]	; (800a3ec <extInt_Config+0x928>)
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	4a3d      	ldr	r2, [pc, #244]	; (800a3ec <extInt_Config+0x928>)
 800a2f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a2fa:	6113      	str	r3, [r2, #16]
					break;
 800a2fc:	e1c4      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a2fe:	bf00      	nop
					break;
 800a300:	e1c2      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 800a302:	4b3a      	ldr	r3, [pc, #232]	; (800a3ec <extInt_Config+0x928>)
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	4a39      	ldr	r2, [pc, #228]	; (800a3ec <extInt_Config+0x928>)
 800a308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a30c:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a3a      	ldr	r2, [pc, #232]	; (800a400 <extInt_Config+0x93c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d104      	bne.n	800a324 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800a31a:	4b34      	ldr	r3, [pc, #208]	; (800a3ec <extInt_Config+0x928>)
 800a31c:	4a33      	ldr	r2, [pc, #204]	; (800a3ec <extInt_Config+0x928>)
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a322:	e1b1      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a2f      	ldr	r2, [pc, #188]	; (800a3e8 <extInt_Config+0x924>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d106      	bne.n	800a33e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800a330:	4b2e      	ldr	r3, [pc, #184]	; (800a3ec <extInt_Config+0x928>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	4a2d      	ldr	r2, [pc, #180]	; (800a3ec <extInt_Config+0x928>)
 800a336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a33a:	6113      	str	r3, [r2, #16]
					break;
 800a33c:	e1a4      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a2a      	ldr	r2, [pc, #168]	; (800a3f0 <extInt_Config+0x92c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d106      	bne.n	800a358 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800a34a:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <extInt_Config+0x928>)
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	4a27      	ldr	r2, [pc, #156]	; (800a3ec <extInt_Config+0x928>)
 800a350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a354:	6113      	str	r3, [r2, #16]
					break;
 800a356:	e197      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a25      	ldr	r2, [pc, #148]	; (800a3f4 <extInt_Config+0x930>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d106      	bne.n	800a372 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800a364:	4b21      	ldr	r3, [pc, #132]	; (800a3ec <extInt_Config+0x928>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	4a20      	ldr	r2, [pc, #128]	; (800a3ec <extInt_Config+0x928>)
 800a36a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a36e:	6113      	str	r3, [r2, #16]
					break;
 800a370:	e18a      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <extInt_Config+0x934>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d106      	bne.n	800a38c <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <extInt_Config+0x928>)
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	4a1a      	ldr	r2, [pc, #104]	; (800a3ec <extInt_Config+0x928>)
 800a384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a388:	6113      	str	r3, [r2, #16]
					break;
 800a38a:	e17d      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1a      	ldr	r2, [pc, #104]	; (800a3fc <extInt_Config+0x938>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d106      	bne.n	800a3a6 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <extInt_Config+0x928>)
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	4a13      	ldr	r2, [pc, #76]	; (800a3ec <extInt_Config+0x928>)
 800a39e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a3a2:	6113      	str	r3, [r2, #16]
					break;
 800a3a4:	e170      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a3a6:	bf00      	nop
					break;
 800a3a8:	e16e      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800a3aa:	4b10      	ldr	r3, [pc, #64]	; (800a3ec <extInt_Config+0x928>)
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	4a0f      	ldr	r2, [pc, #60]	; (800a3ec <extInt_Config+0x928>)
 800a3b0:	f023 030f 	bic.w	r3, r3, #15
 800a3b4:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a10      	ldr	r2, [pc, #64]	; (800a400 <extInt_Config+0x93c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d104      	bne.n	800a3cc <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800a3c2:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <extInt_Config+0x928>)
 800a3c4:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <extInt_Config+0x928>)
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a3ca:	e15d      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a05      	ldr	r2, [pc, #20]	; (800a3e8 <extInt_Config+0x924>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d115      	bne.n	800a404 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800a3d8:	4b04      	ldr	r3, [pc, #16]	; (800a3ec <extInt_Config+0x928>)
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	4a03      	ldr	r2, [pc, #12]	; (800a3ec <extInt_Config+0x928>)
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	6153      	str	r3, [r2, #20]
					break;
 800a3e4:	e150      	b.n	800a688 <extInt_Config+0xbc4>
 800a3e6:	bf00      	nop
 800a3e8:	40020400 	.word	0x40020400
 800a3ec:	40013800 	.word	0x40013800
 800a3f0:	40020800 	.word	0x40020800
 800a3f4:	40020c00 	.word	0x40020c00
 800a3f8:	40021000 	.word	0x40021000
 800a3fc:	40021c00 	.word	0x40021c00
 800a400:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a89      	ldr	r2, [pc, #548]	; (800a630 <extInt_Config+0xb6c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d106      	bne.n	800a41e <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800a410:	4b88      	ldr	r3, [pc, #544]	; (800a634 <extInt_Config+0xb70>)
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	4a87      	ldr	r2, [pc, #540]	; (800a634 <extInt_Config+0xb70>)
 800a416:	f043 0302 	orr.w	r3, r3, #2
 800a41a:	6153      	str	r3, [r2, #20]
					break;
 800a41c:	e134      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a84      	ldr	r2, [pc, #528]	; (800a638 <extInt_Config+0xb74>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d106      	bne.n	800a438 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800a42a:	4b82      	ldr	r3, [pc, #520]	; (800a634 <extInt_Config+0xb70>)
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	4a81      	ldr	r2, [pc, #516]	; (800a634 <extInt_Config+0xb70>)
 800a430:	f043 0303 	orr.w	r3, r3, #3
 800a434:	6153      	str	r3, [r2, #20]
					break;
 800a436:	e127      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a7f      	ldr	r2, [pc, #508]	; (800a63c <extInt_Config+0xb78>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d106      	bne.n	800a452 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800a444:	4b7b      	ldr	r3, [pc, #492]	; (800a634 <extInt_Config+0xb70>)
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	4a7a      	ldr	r2, [pc, #488]	; (800a634 <extInt_Config+0xb70>)
 800a44a:	f043 0304 	orr.w	r3, r3, #4
 800a44e:	6153      	str	r3, [r2, #20]
					break;
 800a450:	e11a      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a79      	ldr	r2, [pc, #484]	; (800a640 <extInt_Config+0xb7c>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d106      	bne.n	800a46c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800a45e:	4b75      	ldr	r3, [pc, #468]	; (800a634 <extInt_Config+0xb70>)
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	4a74      	ldr	r2, [pc, #464]	; (800a634 <extInt_Config+0xb70>)
 800a464:	f043 0307 	orr.w	r3, r3, #7
 800a468:	6153      	str	r3, [r2, #20]
					break;
 800a46a:	e10d      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a46c:	bf00      	nop
					break;
 800a46e:	e10b      	b.n	800a688 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 800a470:	4b70      	ldr	r3, [pc, #448]	; (800a634 <extInt_Config+0xb70>)
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	4a6f      	ldr	r2, [pc, #444]	; (800a634 <extInt_Config+0xb70>)
 800a476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a47a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a70      	ldr	r2, [pc, #448]	; (800a644 <extInt_Config+0xb80>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d104      	bne.n	800a492 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800a488:	4b6a      	ldr	r3, [pc, #424]	; (800a634 <extInt_Config+0xb70>)
 800a48a:	4a6a      	ldr	r2, [pc, #424]	; (800a634 <extInt_Config+0xb70>)
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	6153      	str	r3, [r2, #20]
 800a490:	e041      	b.n	800a516 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a6b      	ldr	r2, [pc, #428]	; (800a648 <extInt_Config+0xb84>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d106      	bne.n	800a4ac <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800a49e:	4b65      	ldr	r3, [pc, #404]	; (800a634 <extInt_Config+0xb70>)
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4a64      	ldr	r2, [pc, #400]	; (800a634 <extInt_Config+0xb70>)
 800a4a4:	f043 0310 	orr.w	r3, r3, #16
 800a4a8:	6153      	str	r3, [r2, #20]
 800a4aa:	e034      	b.n	800a516 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a5f      	ldr	r2, [pc, #380]	; (800a630 <extInt_Config+0xb6c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d106      	bne.n	800a4c6 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800a4b8:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <extInt_Config+0xb70>)
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	4a5d      	ldr	r2, [pc, #372]	; (800a634 <extInt_Config+0xb70>)
 800a4be:	f043 0320 	orr.w	r3, r3, #32
 800a4c2:	6153      	str	r3, [r2, #20]
 800a4c4:	e027      	b.n	800a516 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a5a      	ldr	r2, [pc, #360]	; (800a638 <extInt_Config+0xb74>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d106      	bne.n	800a4e0 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800a4d2:	4b58      	ldr	r3, [pc, #352]	; (800a634 <extInt_Config+0xb70>)
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	4a57      	ldr	r2, [pc, #348]	; (800a634 <extInt_Config+0xb70>)
 800a4d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a4dc:	6153      	str	r3, [r2, #20]
 800a4de:	e01a      	b.n	800a516 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a55      	ldr	r2, [pc, #340]	; (800a63c <extInt_Config+0xb78>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d106      	bne.n	800a4fa <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800a4ec:	4b51      	ldr	r3, [pc, #324]	; (800a634 <extInt_Config+0xb70>)
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	4a50      	ldr	r2, [pc, #320]	; (800a634 <extInt_Config+0xb70>)
 800a4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f6:	6153      	str	r3, [r2, #20]
 800a4f8:	e00d      	b.n	800a516 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a4f      	ldr	r2, [pc, #316]	; (800a640 <extInt_Config+0xb7c>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d106      	bne.n	800a514 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800a506:	4b4b      	ldr	r3, [pc, #300]	; (800a634 <extInt_Config+0xb70>)
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	4a4a      	ldr	r2, [pc, #296]	; (800a634 <extInt_Config+0xb70>)
 800a50c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a510:	6153      	str	r3, [r2, #20]
 800a512:	e000      	b.n	800a516 <extInt_Config+0xa52>

					} else {
						__NOP();
 800a514:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 800a516:	4b47      	ldr	r3, [pc, #284]	; (800a634 <extInt_Config+0xb70>)
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	4a46      	ldr	r2, [pc, #280]	; (800a634 <extInt_Config+0xb70>)
 800a51c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a520:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a46      	ldr	r2, [pc, #280]	; (800a644 <extInt_Config+0xb80>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d104      	bne.n	800a538 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800a52e:	4b41      	ldr	r3, [pc, #260]	; (800a634 <extInt_Config+0xb70>)
 800a530:	4a40      	ldr	r2, [pc, #256]	; (800a634 <extInt_Config+0xb70>)
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a536:	e0a7      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a42      	ldr	r2, [pc, #264]	; (800a648 <extInt_Config+0xb84>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d106      	bne.n	800a552 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800a544:	4b3b      	ldr	r3, [pc, #236]	; (800a634 <extInt_Config+0xb70>)
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	4a3a      	ldr	r2, [pc, #232]	; (800a634 <extInt_Config+0xb70>)
 800a54a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a54e:	6153      	str	r3, [r2, #20]
					break;
 800a550:	e09a      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a35      	ldr	r2, [pc, #212]	; (800a630 <extInt_Config+0xb6c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d106      	bne.n	800a56c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800a55e:	4b35      	ldr	r3, [pc, #212]	; (800a634 <extInt_Config+0xb70>)
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	4a34      	ldr	r2, [pc, #208]	; (800a634 <extInt_Config+0xb70>)
 800a564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a568:	6153      	str	r3, [r2, #20]
					break;
 800a56a:	e08d      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a31      	ldr	r2, [pc, #196]	; (800a638 <extInt_Config+0xb74>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d106      	bne.n	800a586 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800a578:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <extInt_Config+0xb70>)
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	4a2d      	ldr	r2, [pc, #180]	; (800a634 <extInt_Config+0xb70>)
 800a57e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a582:	6153      	str	r3, [r2, #20]
					break;
 800a584:	e080      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a2b      	ldr	r2, [pc, #172]	; (800a63c <extInt_Config+0xb78>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d106      	bne.n	800a5a0 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800a592:	4b28      	ldr	r3, [pc, #160]	; (800a634 <extInt_Config+0xb70>)
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	4a27      	ldr	r2, [pc, #156]	; (800a634 <extInt_Config+0xb70>)
 800a598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a59c:	6153      	str	r3, [r2, #20]
					break;
 800a59e:	e073      	b.n	800a688 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a26      	ldr	r2, [pc, #152]	; (800a640 <extInt_Config+0xb7c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d106      	bne.n	800a5ba <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800a5ac:	4b21      	ldr	r3, [pc, #132]	; (800a634 <extInt_Config+0xb70>)
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	4a20      	ldr	r2, [pc, #128]	; (800a634 <extInt_Config+0xb70>)
 800a5b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a5b6:	6153      	str	r3, [r2, #20]
					break;
 800a5b8:	e066      	b.n	800a688 <extInt_Config+0xbc4>
						__NOP();
 800a5ba:	bf00      	nop
					break;
 800a5bc:	e064      	b.n	800a688 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800a5be:	4b1d      	ldr	r3, [pc, #116]	; (800a634 <extInt_Config+0xb70>)
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	4a1c      	ldr	r2, [pc, #112]	; (800a634 <extInt_Config+0xb70>)
 800a5c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5c8:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a1c      	ldr	r2, [pc, #112]	; (800a644 <extInt_Config+0xb80>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d104      	bne.n	800a5e0 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800a5d6:	4b17      	ldr	r3, [pc, #92]	; (800a634 <extInt_Config+0xb70>)
 800a5d8:	4a16      	ldr	r2, [pc, #88]	; (800a634 <extInt_Config+0xb70>)
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800a5de:	e053      	b.n	800a688 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a18      	ldr	r2, [pc, #96]	; (800a648 <extInt_Config+0xb84>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d106      	bne.n	800a5fa <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800a5ec:	4b11      	ldr	r3, [pc, #68]	; (800a634 <extInt_Config+0xb70>)
 800a5ee:	695b      	ldr	r3, [r3, #20]
 800a5f0:	4a10      	ldr	r2, [pc, #64]	; (800a634 <extInt_Config+0xb70>)
 800a5f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5f6:	6153      	str	r3, [r2, #20]
						break;
 800a5f8:	e046      	b.n	800a688 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a0b      	ldr	r2, [pc, #44]	; (800a630 <extInt_Config+0xb6c>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d106      	bne.n	800a614 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800a606:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <extInt_Config+0xb70>)
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	4a0a      	ldr	r2, [pc, #40]	; (800a634 <extInt_Config+0xb70>)
 800a60c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a610:	6153      	str	r3, [r2, #20]
						break;
 800a612:	e039      	b.n	800a688 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a07      	ldr	r2, [pc, #28]	; (800a638 <extInt_Config+0xb74>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d115      	bne.n	800a64c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800a620:	4b04      	ldr	r3, [pc, #16]	; (800a634 <extInt_Config+0xb70>)
 800a622:	695b      	ldr	r3, [r3, #20]
 800a624:	4a03      	ldr	r2, [pc, #12]	; (800a634 <extInt_Config+0xb70>)
 800a626:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a62a:	6153      	str	r3, [r2, #20]
						break;
 800a62c:	e02c      	b.n	800a688 <extInt_Config+0xbc4>
 800a62e:	bf00      	nop
 800a630:	40020800 	.word	0x40020800
 800a634:	40013800 	.word	0x40013800
 800a638:	40020c00 	.word	0x40020c00
 800a63c:	40021000 	.word	0x40021000
 800a640:	40021c00 	.word	0x40021c00
 800a644:	40020000 	.word	0x40020000
 800a648:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a6c      	ldr	r2, [pc, #432]	; (800a804 <extInt_Config+0xd40>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d106      	bne.n	800a666 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800a658:	4b6b      	ldr	r3, [pc, #428]	; (800a808 <extInt_Config+0xd44>)
 800a65a:	695b      	ldr	r3, [r3, #20]
 800a65c:	4a6a      	ldr	r2, [pc, #424]	; (800a808 <extInt_Config+0xd44>)
 800a65e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a662:	6153      	str	r3, [r2, #20]
						break;
 800a664:	e010      	b.n	800a688 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a67      	ldr	r2, [pc, #412]	; (800a80c <extInt_Config+0xd48>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d106      	bne.n	800a680 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800a672:	4b65      	ldr	r3, [pc, #404]	; (800a808 <extInt_Config+0xd44>)
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	4a64      	ldr	r2, [pc, #400]	; (800a808 <extInt_Config+0xd44>)
 800a678:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a67c:	6153      	str	r3, [r2, #20]
						break;
 800a67e:	e003      	b.n	800a688 <extInt_Config+0xbc4>
							__NOP();
 800a680:	bf00      	nop
						break;
 800a682:	e001      	b.n	800a688 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 800a684:	bf00      	nop
						break;
 800a686:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	791b      	ldrb	r3, [r3, #4]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d020      	beq.n	800a6d2 <extInt_Config+0xc0e>
 800a690:	2b02      	cmp	r3, #2
 800a692:	dc37      	bgt.n	800a704 <extInt_Config+0xc40>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <extInt_Config+0xbda>
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d00d      	beq.n	800a6b8 <extInt_Config+0xbf4>
 800a69c:	e032      	b.n	800a704 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a69e:	4b5c      	ldr	r3, [pc, #368]	; (800a810 <extInt_Config+0xd4c>)
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	7912      	ldrb	r2, [r2, #4]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	408a      	lsls	r2, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4a57      	ldr	r2, [pc, #348]	; (800a810 <extInt_Config+0xd4c>)
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	60d3      	str	r3, [r2, #12]

		break;
 800a6b6:	e027      	b.n	800a708 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a6b8:	4b55      	ldr	r3, [pc, #340]	; (800a810 <extInt_Config+0xd4c>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	7912      	ldrb	r2, [r2, #4]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	408a      	lsls	r2, r1
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4a51      	ldr	r2, [pc, #324]	; (800a810 <extInt_Config+0xd4c>)
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	6093      	str	r3, [r2, #8]

		break;
 800a6d0:	e01a      	b.n	800a708 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a6d2:	4b4f      	ldr	r3, [pc, #316]	; (800a810 <extInt_Config+0xd4c>)
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	7912      	ldrb	r2, [r2, #4]
 800a6dc:	4611      	mov	r1, r2
 800a6de:	2201      	movs	r2, #1
 800a6e0:	408a      	lsls	r2, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4a4a      	ldr	r2, [pc, #296]	; (800a810 <extInt_Config+0xd4c>)
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a6ea:	4b49      	ldr	r3, [pc, #292]	; (800a810 <extInt_Config+0xd4c>)
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6812      	ldr	r2, [r2, #0]
 800a6f2:	7912      	ldrb	r2, [r2, #4]
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	408a      	lsls	r2, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4a44      	ldr	r2, [pc, #272]	; (800a810 <extInt_Config+0xd4c>)
 800a6fe:	430b      	orrs	r3, r1
 800a700:	6093      	str	r3, [r2, #8]

		break;
 800a702:	e001      	b.n	800a708 <extInt_Config+0xc44>

	}default :{

		__NOP();
 800a704:	bf00      	nop
		break;
 800a706:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800a708:	b672      	cpsid	i
}
 800a70a:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a70c:	4b40      	ldr	r3, [pc, #256]	; (800a810 <extInt_Config+0xd4c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	6812      	ldr	r2, [r2, #0]
 800a714:	7912      	ldrb	r2, [r2, #4]
 800a716:	4611      	mov	r1, r2
 800a718:	2201      	movs	r2, #1
 800a71a:	408a      	lsls	r2, r1
 800a71c:	4611      	mov	r1, r2
 800a71e:	4a3c      	ldr	r2, [pc, #240]	; (800a810 <extInt_Config+0xd4c>)
 800a720:	430b      	orrs	r3, r1
 800a722:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	791b      	ldrb	r3, [r3, #4]
 800a72a:	2b0f      	cmp	r3, #15
 800a72c:	d862      	bhi.n	800a7f4 <extInt_Config+0xd30>
 800a72e:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <extInt_Config+0xc70>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a775 	.word	0x0800a775
 800a738:	0800a77d 	.word	0x0800a77d
 800a73c:	0800a785 	.word	0x0800a785
 800a740:	0800a78d 	.word	0x0800a78d
 800a744:	0800a795 	.word	0x0800a795
 800a748:	0800a79d 	.word	0x0800a79d
 800a74c:	0800a7a5 	.word	0x0800a7a5
 800a750:	0800a7ad 	.word	0x0800a7ad
 800a754:	0800a7b5 	.word	0x0800a7b5
 800a758:	0800a7bd 	.word	0x0800a7bd
 800a75c:	0800a7c5 	.word	0x0800a7c5
 800a760:	0800a7cd 	.word	0x0800a7cd
 800a764:	0800a7d5 	.word	0x0800a7d5
 800a768:	0800a7dd 	.word	0x0800a7dd
 800a76c:	0800a7e5 	.word	0x0800a7e5
 800a770:	0800a7ed 	.word	0x0800a7ed
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 800a774:	2006      	movs	r0, #6
 800a776:	f7ff f95d 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a77a:	e03d      	b.n	800a7f8 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800a77c:	2007      	movs	r0, #7
 800a77e:	f7ff f959 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a782:	e039      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 800a784:	2008      	movs	r0, #8
 800a786:	f7ff f955 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a78a:	e035      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800a78c:	2009      	movs	r0, #9
 800a78e:	f7ff f951 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a792:	e031      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 800a794:	200a      	movs	r0, #10
 800a796:	f7ff f94d 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a79a:	e02d      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a79c:	2017      	movs	r0, #23
 800a79e:	f7ff f949 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7a2:	e029      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a7a4:	2017      	movs	r0, #23
 800a7a6:	f7ff f945 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7aa:	e025      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a7ac:	2017      	movs	r0, #23
 800a7ae:	f7ff f941 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7b2:	e021      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a7b4:	2017      	movs	r0, #23
 800a7b6:	f7ff f93d 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7ba:	e01d      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a7bc:	2017      	movs	r0, #23
 800a7be:	f7ff f939 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7c2:	e019      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7c4:	2028      	movs	r0, #40	; 0x28
 800a7c6:	f7ff f935 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7ca:	e015      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7cc:	2028      	movs	r0, #40	; 0x28
 800a7ce:	f7ff f931 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7d2:	e011      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7d4:	2028      	movs	r0, #40	; 0x28
 800a7d6:	f7ff f92d 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7da:	e00d      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7dc:	2028      	movs	r0, #40	; 0x28
 800a7de:	f7ff f929 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7e2:	e009      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7e4:	2028      	movs	r0, #40	; 0x28
 800a7e6:	f7ff f925 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7ea:	e005      	b.n	800a7f8 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7ec:	2028      	movs	r0, #40	; 0x28
 800a7ee:	f7ff f921 	bl	8009a34 <__NVIC_EnableIRQ>
			break;
 800a7f2:	e001      	b.n	800a7f8 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 800a7f4:	bf00      	nop
			break;
 800a7f6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a7f8:	b662      	cpsie	i
}
 800a7fa:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	40021000 	.word	0x40021000
 800a808:	40013800 	.word	0x40013800
 800a80c:	40021c00 	.word	0x40021c00
 800a810:	40013c00 	.word	0x40013c00

0800a814 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a820:	b672      	cpsid	i
}
 800a822:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	791b      	ldrb	r3, [r3, #4]
 800a82a:	2b0f      	cmp	r3, #15
 800a82c:	f200 8084 	bhi.w	800a938 <exti_Set_Priority+0x124>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <exti_Set_Priority+0x24>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a879 	.word	0x0800a879
 800a83c:	0800a885 	.word	0x0800a885
 800a840:	0800a891 	.word	0x0800a891
 800a844:	0800a89d 	.word	0x0800a89d
 800a848:	0800a8a9 	.word	0x0800a8a9
 800a84c:	0800a8b5 	.word	0x0800a8b5
 800a850:	0800a8c1 	.word	0x0800a8c1
 800a854:	0800a8cd 	.word	0x0800a8cd
 800a858:	0800a8d9 	.word	0x0800a8d9
 800a85c:	0800a8e5 	.word	0x0800a8e5
 800a860:	0800a8f1 	.word	0x0800a8f1
 800a864:	0800a8fd 	.word	0x0800a8fd
 800a868:	0800a909 	.word	0x0800a909
 800a86c:	0800a915 	.word	0x0800a915
 800a870:	0800a921 	.word	0x0800a921
 800a874:	0800a92d 	.word	0x0800a92d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	4619      	mov	r1, r3
 800a87c:	2006      	movs	r0, #6
 800a87e:	f7ff f8f7 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a882:	e05b      	b.n	800a93c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800a884:	78fb      	ldrb	r3, [r7, #3]
 800a886:	4619      	mov	r1, r3
 800a888:	2007      	movs	r0, #7
 800a88a:	f7ff f8f1 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a88e:	e055      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	4619      	mov	r1, r3
 800a894:	2008      	movs	r0, #8
 800a896:	f7ff f8eb 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a89a:	e04f      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	4619      	mov	r1, r3
 800a8a0:	2009      	movs	r0, #9
 800a8a2:	f7ff f8e5 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8a6:	e049      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	200a      	movs	r0, #10
 800a8ae:	f7ff f8df 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8b2:	e043      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	2017      	movs	r0, #23
 800a8ba:	f7ff f8d9 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8be:	e03d      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	2017      	movs	r0, #23
 800a8c6:	f7ff f8d3 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8ca:	e037      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	2017      	movs	r0, #23
 800a8d2:	f7ff f8cd 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8d6:	e031      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	2017      	movs	r0, #23
 800a8de:	f7ff f8c7 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8e2:	e02b      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	2017      	movs	r0, #23
 800a8ea:	f7ff f8c1 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8ee:	e025      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	2028      	movs	r0, #40	; 0x28
 800a8f6:	f7ff f8bb 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a8fa:	e01f      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	4619      	mov	r1, r3
 800a900:	2028      	movs	r0, #40	; 0x28
 800a902:	f7ff f8b5 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a906:	e019      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	4619      	mov	r1, r3
 800a90c:	2028      	movs	r0, #40	; 0x28
 800a90e:	f7ff f8af 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a912:	e013      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	4619      	mov	r1, r3
 800a918:	2028      	movs	r0, #40	; 0x28
 800a91a:	f7ff f8a9 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a91e:	e00d      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	4619      	mov	r1, r3
 800a924:	2028      	movs	r0, #40	; 0x28
 800a926:	f7ff f8a3 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a92a:	e007      	b.n	800a93c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a92c:	78fb      	ldrb	r3, [r7, #3]
 800a92e:	4619      	mov	r1, r3
 800a930:	2028      	movs	r0, #40	; 0x28
 800a932:	f7ff f89d 	bl	8009a70 <__NVIC_SetPriority>
				break;
 800a936:	e001      	b.n	800a93c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 800a938:	bf00      	nop
				break;
 800a93a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a93c:	b662      	cpsie	i
}
 800a93e:	bf00      	nop

		}

	__enable_irq();

}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
	__NOP();
 800a94c:	bf00      	nop
}
 800a94e:	bf00      	nop
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
	__NOP();
 800a95c:	bf00      	nop
}
 800a95e:	bf00      	nop
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
	__NOP();
 800a96c:	bf00      	nop
}
 800a96e:	bf00      	nop
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 800a978:	b480      	push	{r7}
 800a97a:	af00      	add	r7, sp, #0
	__NOP();
 800a97c:	bf00      	nop
}
 800a97e:	bf00      	nop
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 800a988:	b480      	push	{r7}
 800a98a:	af00      	add	r7, sp, #0
	__NOP();
 800a98c:	bf00      	nop
}
 800a98e:	bf00      	nop
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
	__NOP();
 800a99c:	bf00      	nop
}
 800a99e:	bf00      	nop
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
	__NOP();
 800a9ac:	bf00      	nop
}
 800a9ae:	bf00      	nop
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 800a9b8:	b480      	push	{r7}
 800a9ba:	af00      	add	r7, sp, #0
	__NOP();
 800a9bc:	bf00      	nop
}
 800a9be:	bf00      	nop
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
	__NOP();
 800a9cc:	bf00      	nop
}
 800a9ce:	bf00      	nop
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
	__NOP();
 800a9dc:	bf00      	nop
}
 800a9de:	bf00      	nop
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
	__NOP();
 800a9ec:	bf00      	nop
}
 800a9ee:	bf00      	nop
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
	__NOP();
 800a9fc:	bf00      	nop
}
 800a9fe:	bf00      	nop
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
	__NOP();
 800aa0c:	bf00      	nop
}
 800aa0e:	bf00      	nop
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
	__NOP();
 800aa1c:	bf00      	nop
}
 800aa1e:	bf00      	nop
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <EXTI0_IRQHandler+0x24>)
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 800aa38:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <EXTI0_IRQHandler+0x24>)
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	4a03      	ldr	r2, [pc, #12]	; (800aa4c <EXTI0_IRQHandler+0x24>)
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 800aa44:	f7ff ff80 	bl	800a948 <callback_extInt0>
	}
}
 800aa48:	bf00      	nop
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	40013c00 	.word	0x40013c00

0800aa50 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800aa54:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <EXTI1_IRQHandler+0x24>)
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800aa60:	4b04      	ldr	r3, [pc, #16]	; (800aa74 <EXTI1_IRQHandler+0x24>)
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	4a03      	ldr	r2, [pc, #12]	; (800aa74 <EXTI1_IRQHandler+0x24>)
 800aa66:	f043 0302 	orr.w	r3, r3, #2
 800aa6a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800aa6c:	f7f7 fff8 	bl	8002a60 <callback_extInt1>
	}
}
 800aa70:	bf00      	nop
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	40013c00 	.word	0x40013c00

0800aa78 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800aa7c:	4b07      	ldr	r3, [pc, #28]	; (800aa9c <EXTI2_IRQHandler+0x24>)
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d007      	beq.n	800aa98 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <EXTI2_IRQHandler+0x24>)
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	4a03      	ldr	r2, [pc, #12]	; (800aa9c <EXTI2_IRQHandler+0x24>)
 800aa8e:	f043 0304 	orr.w	r3, r3, #4
 800aa92:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 800aa94:	f7ff ff60 	bl	800a958 <callback_extInt2>
	}
}
 800aa98:	bf00      	nop
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	40013c00 	.word	0x40013c00

0800aaa0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <EXTI3_IRQHandler+0x24>)
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	f003 0308 	and.w	r3, r3, #8
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d007      	beq.n	800aac0 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 800aab0:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <EXTI3_IRQHandler+0x24>)
 800aab2:	695b      	ldr	r3, [r3, #20]
 800aab4:	4a03      	ldr	r2, [pc, #12]	; (800aac4 <EXTI3_IRQHandler+0x24>)
 800aab6:	f043 0308 	orr.w	r3, r3, #8
 800aaba:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800aabc:	f7f7 ffe6 	bl	8002a8c <callback_extInt3>
	}
}
 800aac0:	bf00      	nop
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	40013c00 	.word	0x40013c00

0800aac8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800aac8:	b580      	push	{r7, lr}
 800aaca:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800aacc:	4b07      	ldr	r3, [pc, #28]	; (800aaec <EXTI4_IRQHandler+0x24>)
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	f003 0310 	and.w	r3, r3, #16
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d007      	beq.n	800aae8 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800aad8:	4b04      	ldr	r3, [pc, #16]	; (800aaec <EXTI4_IRQHandler+0x24>)
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	4a03      	ldr	r2, [pc, #12]	; (800aaec <EXTI4_IRQHandler+0x24>)
 800aade:	f043 0310 	orr.w	r3, r3, #16
 800aae2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800aae4:	f7ff ff40 	bl	800a968 <callback_extInt4>
	}
}
 800aae8:	bf00      	nop
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	40013c00 	.word	0x40013c00

0800aaf0 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800aaf4:	4b26      	ldr	r3, [pc, #152]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	f003 0320 	and.w	r3, r3, #32
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d008      	beq.n	800ab12 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 800ab00:	4b23      	ldr	r3, [pc, #140]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	4a22      	ldr	r2, [pc, #136]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab06:	f043 0320 	orr.w	r3, r3, #32
 800ab0a:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800ab0c:	f7ff ff34 	bl	800a978 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 800ab10:	e03c      	b.n	800ab8c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800ab12:	4b1f      	ldr	r3, [pc, #124]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d008      	beq.n	800ab30 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800ab1e:	4b1c      	ldr	r3, [pc, #112]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	4a1b      	ldr	r2, [pc, #108]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab28:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800ab2a:	f7ff ff2d 	bl	800a988 <callback_extInt6>
}
 800ab2e:	e02d      	b.n	800ab8c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 800ab30:	4b17      	ldr	r3, [pc, #92]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d008      	beq.n	800ab4e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800ab3c:	4b14      	ldr	r3, [pc, #80]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab3e:	695b      	ldr	r3, [r3, #20]
 800ab40:	4a13      	ldr	r2, [pc, #76]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab46:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 800ab48:	f7ff ff26 	bl	800a998 <callback_extInt7>
}
 800ab4c:	e01e      	b.n	800ab8c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800ab4e:	4b10      	ldr	r3, [pc, #64]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d008      	beq.n	800ab6c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab64:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 800ab66:	f7ff ff1f 	bl	800a9a8 <callback_extInt8>
}
 800ab6a:	e00f      	b.n	800ab8c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800ab6c:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d008      	beq.n	800ab8a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 800ab78:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	4a04      	ldr	r2, [pc, #16]	; (800ab90 <EXTI9_5_IRQHandler+0xa0>)
 800ab7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab82:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 800ab84:	f7ff ff18 	bl	800a9b8 <callback_extInt9>
}
 800ab88:	e000      	b.n	800ab8c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800ab8a:	bf00      	nop
}
 800ab8c:	bf00      	nop
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	40013c00 	.word	0x40013c00

0800ab94 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 800ab98:	4b2d      	ldr	r3, [pc, #180]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d008      	beq.n	800abb6 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800aba4:	4b2a      	ldr	r3, [pc, #168]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	4a29      	ldr	r2, [pc, #164]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800abae:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 800abb0:	f7ff ff0a 	bl	800a9c8 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800abb4:	e049      	b.n	800ac4a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800abb6:	4b26      	ldr	r3, [pc, #152]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d008      	beq.n	800abd4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800abc2:	4b23      	ldr	r3, [pc, #140]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	4a22      	ldr	r2, [pc, #136]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abcc:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800abce:	f7ff ff03 	bl	800a9d8 <callback_extInt11>
}
 800abd2:	e03a      	b.n	800ac4a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800abd4:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d008      	beq.n	800abf2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 800abe0:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	4a1a      	ldr	r2, [pc, #104]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800abea:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800abec:	f7ff fefc 	bl	800a9e8 <callback_extInt12>
}
 800abf0:	e02b      	b.n	800ac4a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800abf2:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d008      	beq.n	800ac10 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800abfe:	4b14      	ldr	r3, [pc, #80]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	4a13      	ldr	r2, [pc, #76]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac08:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800ac0a:	f7ff fef5 	bl	800a9f8 <callback_extInt13>
}
 800ac0e:	e01c      	b.n	800ac4a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 800ac10:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d008      	beq.n	800ac2e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800ac1c:	4b0c      	ldr	r3, [pc, #48]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	4a0b      	ldr	r2, [pc, #44]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac26:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 800ac28:	f7ff feee 	bl	800aa08 <callback_extInt14>
}
 800ac2c:	e00d      	b.n	800ac4a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800ac2e:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d007      	beq.n	800ac4a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <EXTI15_10_IRQHandler+0xbc>)
 800ac40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac44:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800ac46:	f7ff fee7 	bl	800aa18 <callback_extInt15>
}
 800ac4a:	bf00      	nop
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40013c00 	.word	0x40013c00

0800ac54 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a88      	ldr	r2, [pc, #544]	; (800ae8c <GPIO_Config+0x238>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d106      	bne.n	800ac7c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800ac6e:	4b88      	ldr	r3, [pc, #544]	; (800ae90 <GPIO_Config+0x23c>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	4a87      	ldr	r2, [pc, #540]	; (800ae90 <GPIO_Config+0x23c>)
 800ac74:	f043 0301 	orr.w	r3, r3, #1
 800ac78:	6313      	str	r3, [r2, #48]	; 0x30
 800ac7a:	e03a      	b.n	800acf2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a84      	ldr	r2, [pc, #528]	; (800ae94 <GPIO_Config+0x240>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d106      	bne.n	800ac94 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800ac86:	4b82      	ldr	r3, [pc, #520]	; (800ae90 <GPIO_Config+0x23c>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8a:	4a81      	ldr	r2, [pc, #516]	; (800ae90 <GPIO_Config+0x23c>)
 800ac8c:	f043 0302 	orr.w	r3, r3, #2
 800ac90:	6313      	str	r3, [r2, #48]	; 0x30
 800ac92:	e02e      	b.n	800acf2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a7f      	ldr	r2, [pc, #508]	; (800ae98 <GPIO_Config+0x244>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d106      	bne.n	800acac <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800ac9e:	4b7c      	ldr	r3, [pc, #496]	; (800ae90 <GPIO_Config+0x23c>)
 800aca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca2:	4a7b      	ldr	r2, [pc, #492]	; (800ae90 <GPIO_Config+0x23c>)
 800aca4:	f043 0304 	orr.w	r3, r3, #4
 800aca8:	6313      	str	r3, [r2, #48]	; 0x30
 800acaa:	e022      	b.n	800acf2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a7a      	ldr	r2, [pc, #488]	; (800ae9c <GPIO_Config+0x248>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d106      	bne.n	800acc4 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800acb6:	4b76      	ldr	r3, [pc, #472]	; (800ae90 <GPIO_Config+0x23c>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	4a75      	ldr	r2, [pc, #468]	; (800ae90 <GPIO_Config+0x23c>)
 800acbc:	f043 0308 	orr.w	r3, r3, #8
 800acc0:	6313      	str	r3, [r2, #48]	; 0x30
 800acc2:	e016      	b.n	800acf2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a75      	ldr	r2, [pc, #468]	; (800aea0 <GPIO_Config+0x24c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d106      	bne.n	800acdc <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800acce:	4b70      	ldr	r3, [pc, #448]	; (800ae90 <GPIO_Config+0x23c>)
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	4a6f      	ldr	r2, [pc, #444]	; (800ae90 <GPIO_Config+0x23c>)
 800acd4:	f043 0310 	orr.w	r3, r3, #16
 800acd8:	6313      	str	r3, [r2, #48]	; 0x30
 800acda:	e00a      	b.n	800acf2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a70      	ldr	r2, [pc, #448]	; (800aea4 <GPIO_Config+0x250>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d105      	bne.n	800acf2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800ace6:	4b6a      	ldr	r3, [pc, #424]	; (800ae90 <GPIO_Config+0x23c>)
 800ace8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acea:	4a69      	ldr	r2, [pc, #420]	; (800ae90 <GPIO_Config+0x23c>)
 800acec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf0:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	795b      	ldrb	r3, [r3, #5]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d143      	bne.n	800ad82 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	791b      	ldrb	r3, [r3, #4]
 800acfe:	2b07      	cmp	r3, #7
 800ad00:	d81f      	bhi.n	800ad42 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6a1a      	ldr	r2, [r3, #32]
 800ad10:	210f      	movs	r1, #15
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	fa01 f303 	lsl.w	r3, r1, r3
 800ad18:	43db      	mvns	r3, r3
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	400a      	ands	r2, r1
 800ad22:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6a1a      	ldr	r2, [r3, #32]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7a5b      	ldrb	r3, [r3, #9]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	fa01 f303 	lsl.w	r3, r1, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	621a      	str	r2, [r3, #32]
 800ad40:	e01f      	b.n	800ad82 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	791b      	ldrb	r3, [r3, #4]
 800ad46:	3b08      	subs	r3, #8
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad52:	210f      	movs	r1, #15
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5a:	43db      	mvns	r3, r3
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	400a      	ands	r2, r1
 800ad64:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	7a5b      	ldrb	r3, [r3, #9]
 800ad70:	4619      	mov	r1, r3
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	fa01 f303 	lsl.w	r3, r1, r3
 800ad78:	4619      	mov	r1, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	795b      	ldrb	r3, [r3, #5]
 800ad86:	461a      	mov	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	791b      	ldrb	r3, [r3, #4]
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad92:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	791b      	ldrb	r3, [r3, #4]
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	2103      	movs	r1, #3
 800ada2:	fa01 f303 	lsl.w	r3, r1, r3
 800ada6:	43db      	mvns	r3, r3
 800ada8:	4619      	mov	r1, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	400a      	ands	r2, r1
 800adb0:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	6819      	ldr	r1, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	7a1b      	ldrb	r3, [r3, #8]
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	791b      	ldrb	r3, [r3, #4]
 800adcc:	fa02 f303 	lsl.w	r3, r2, r3
 800add0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	791b      	ldrb	r3, [r3, #4]
 800addc:	4619      	mov	r1, r3
 800adde:	2301      	movs	r3, #1
 800ade0:	408b      	lsls	r3, r1
 800ade2:	43db      	mvns	r3, r3
 800ade4:	4619      	mov	r1, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	400a      	ands	r2, r1
 800adec:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	6859      	ldr	r1, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	799b      	ldrb	r3, [r3, #6]
 800ae02:	461a      	mov	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	791b      	ldrb	r3, [r3, #4]
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689a      	ldr	r2, [r3, #8]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	791b      	ldrb	r3, [r3, #4]
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	2103      	movs	r1, #3
 800ae1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae22:	43db      	mvns	r3, r3
 800ae24:	4619      	mov	r1, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	400a      	ands	r2, r1
 800ae2c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6899      	ldr	r1, [r3, #8]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	430a      	orrs	r2, r1
 800ae3c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	79db      	ldrb	r3, [r3, #7]
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	791b      	ldrb	r3, [r3, #4]
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	791b      	ldrb	r3, [r3, #4]
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	2103      	movs	r1, #3
 800ae5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae62:	43db      	mvns	r3, r3
 800ae64:	4619      	mov	r1, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	400a      	ands	r2, r1
 800ae6c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68d9      	ldr	r1, [r3, #12]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800ae7e:	bf00      	nop
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	40020000 	.word	0x40020000
 800ae90:	40023800 	.word	0x40023800
 800ae94:	40020400 	.word	0x40020400
 800ae98:	40020800 	.word	0x40020800
 800ae9c:	40020c00 	.word	0x40020c00
 800aea0:	40021000 	.word	0x40021000
 800aea4:	40021c00 	.word	0x40021c00

0800aea8 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 800aeb4:	78fb      	ldrb	r3, [r7, #3]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d10d      	bne.n	800aed6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	791b      	ldrb	r3, [r3, #4]
 800aec4:	4619      	mov	r1, r3
 800aec6:	2301      	movs	r3, #1
 800aec8:	408b      	lsls	r3, r1
 800aeca:	4619      	mov	r1, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800aed4:	e00d      	b.n	800aef2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	699a      	ldr	r2, [r3, #24]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	791b      	ldrb	r3, [r3, #4]
 800aee0:	3310      	adds	r3, #16
 800aee2:	2101      	movs	r1, #1
 800aee4:	fa01 f303 	lsl.w	r3, r1, r3
 800aee8:	4619      	mov	r1, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	619a      	str	r2, [r3, #24]
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	460b      	mov	r3, r1
 800af08:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10d      	bne.n	800af2c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	699a      	ldr	r2, [r3, #24]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	791b      	ldrb	r3, [r3, #4]
 800af1a:	4619      	mov	r1, r3
 800af1c:	2301      	movs	r3, #1
 800af1e:	408b      	lsls	r3, r1
 800af20:	4619      	mov	r1, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800af2a:	e00d      	b.n	800af48 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	791b      	ldrb	r3, [r3, #4]
 800af36:	3310      	adds	r3, #16
 800af38:	2101      	movs	r1, #1
 800af3a:	fa01 f303 	lsl.w	r3, r1, r3
 800af3e:	4619      	mov	r1, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	619a      	str	r2, [r3, #24]
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	791b      	ldrb	r3, [r3, #4]
 800af64:	461a      	mov	r2, r3
 800af66:	2301      	movs	r3, #1
 800af68:	4093      	lsls	r3, r2
 800af6a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800af74:	897b      	ldrh	r3, [r7, #10]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4013      	ands	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	791b      	ldrb	r3, [r3, #4]
 800af80:	461a      	mov	r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	40d3      	lsrs	r3, r2
 800af86:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800af88:	68fb      	ldr	r3, [r7, #12]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ffd8 	bl	800af54 <GPIO_ReadPin>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bf0c      	ite	eq
 800afae:	2301      	moveq	r3, #1
 800afb0:	2300      	movne	r3, #0
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff76 	bl	800aea8 <GPIO_WritePin>
}
 800afbc:	bf00      	nop
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fe3b 	bl	800ac54 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff fe36 	bl	800ac54 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	4618      	mov	r0, r3
 800afee:	f002 fbb5 	bl	800d75c <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800aff2:	e004      	b.n	800affe <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f94f 	bl	800b298 <WHOIAM>
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0f7      	beq.n	800aff4 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800b004:	216b      	movs	r1, #107	; 0x6b
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f8f1 	bl	800b1ee <readData>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 800b010:	2300      	movs	r3, #0
 800b012:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	461a      	mov	r2, r3
 800b018:	216b      	movs	r1, #107	; 0x6b
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f89c 	bl	800b158 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 800b020:	216b      	movs	r1, #107	; 0x6b
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f8e3 	bl	800b1ee <readData>
 800b028:	4603      	mov	r3, r0
 800b02a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800b02c:	211c      	movs	r1, #28
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f8dd 	bl	800b1ee <readData>
 800b034:	4603      	mov	r3, r0
 800b036:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	f023 0318 	bic.w	r3, r3, #24
 800b03e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b03      	cmp	r3, #3
 800b046:	d833      	bhi.n	800b0b0 <configMPUAccel+0xec>
 800b048:	a201      	add	r2, pc, #4	; (adr r2, 800b050 <configMPUAccel+0x8c>)
 800b04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04e:	bf00      	nop
 800b050:	0800b061 	.word	0x0800b061
 800b054:	0800b06f 	.word	0x0800b06f
 800b058:	0800b085 	.word	0x0800b085
 800b05c:	0800b09b 	.word	0x0800b09b
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	461a      	mov	r2, r3
 800b064:	211c      	movs	r1, #28
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f876 	bl	800b158 <writeData>


				break;
 800b06c:	e021      	b.n	800b0b2 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800b06e:	7bbb      	ldrb	r3, [r7, #14]
 800b070:	f043 0308 	orr.w	r3, r3, #8
 800b074:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	461a      	mov	r2, r3
 800b07a:	211c      	movs	r1, #28
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f86b 	bl	800b158 <writeData>


				break;
 800b082:	e016      	b.n	800b0b2 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	f043 0310 	orr.w	r3, r3, #16
 800b08a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	461a      	mov	r2, r3
 800b090:	211c      	movs	r1, #28
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f860 	bl	800b158 <writeData>


				break;
 800b098:	e00b      	b.n	800b0b2 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	f043 0318 	orr.w	r3, r3, #24
 800b0a0:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	211c      	movs	r1, #28
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f855 	bl	800b158 <writeData>


				break;
 800b0ae:	e000      	b.n	800b0b2 <configMPUAccel+0xee>
			}default:{
				break;
 800b0b0:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800b0b2:	211c      	movs	r1, #28
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f89a 	bl	800b1ee <readData>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800b0be:	211b      	movs	r1, #27
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f894 	bl	800b1ee <readData>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	f023 0318 	bic.w	r3, r3, #24
 800b0d0:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	785b      	ldrb	r3, [r3, #1]
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d832      	bhi.n	800b140 <configMPUAccel+0x17c>
 800b0da:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <configMPUAccel+0x11c>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b0f1 	.word	0x0800b0f1
 800b0e4:	0800b0ff 	.word	0x0800b0ff
 800b0e8:	0800b115 	.word	0x0800b115
 800b0ec:	0800b12b 	.word	0x0800b12b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	211b      	movs	r1, #27
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f82e 	bl	800b158 <writeData>


				break;
 800b0fc:	e021      	b.n	800b142 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	461a      	mov	r2, r3
 800b10a:	211b      	movs	r1, #27
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f823 	bl	800b158 <writeData>


				break;
 800b112:	e016      	b.n	800b142 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	f043 0310 	orr.w	r3, r3, #16
 800b11a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	461a      	mov	r2, r3
 800b120:	211b      	movs	r1, #27
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f818 	bl	800b158 <writeData>


				break;
 800b128:	e00b      	b.n	800b142 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800b12a:	7bbb      	ldrb	r3, [r7, #14]
 800b12c:	f043 0318 	orr.w	r3, r3, #24
 800b130:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	461a      	mov	r2, r3
 800b136:	211b      	movs	r1, #27
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f80d 	bl	800b158 <writeData>


				break;
 800b13e:	e000      	b.n	800b142 <configMPUAccel+0x17e>
			}default:{
				break;
 800b140:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800b142:	211b      	movs	r1, #27
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f852 	bl	800b1ee <readData>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73bb      	strb	r3, [r7, #14]


}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop

0800b158 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	460b      	mov	r3, r1
 800b162:	70fb      	strb	r3, [r7, #3]
 800b164:	4613      	mov	r3, r2
 800b166:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	695a      	ldr	r2, [r3, #20]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b17a:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	4618      	mov	r0, r3
 800b182:	f002 fc5b 	bl	800da3c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68d8      	ldr	r0, [r3, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	791b      	ldrb	r3, [r3, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	4619      	mov	r1, r3
 800b194:	f002 fcbd 	bl	800db12 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	78fa      	ldrb	r2, [r7, #3]
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f002 fcde 	bl	800db62 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b1a6:	e000      	b.n	800b1aa <writeData+0x52>
		__NOP();
 800b1a8:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1f6      	bne.n	800b1a8 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	78ba      	ldrb	r2, [r7, #2]
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f002 fce7 	bl	800db96 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b1c8:	e000      	b.n	800b1cc <writeData+0x74>
		__NOP();
 800b1ca:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f6      	bne.n	800b1ca <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f002 fc19 	bl	800da18 <i2c_stopTransaction>



}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b210:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	4618      	mov	r0, r3
 800b218:	f002 fc10 	bl	800da3c <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68d8      	ldr	r0, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	791b      	ldrb	r3, [r3, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	4619      	mov	r1, r3
 800b22a:	f002 fc72 	bl	800db12 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	78fa      	ldrb	r2, [r7, #3]
 800b234:	4611      	mov	r1, r2
 800b236:	4618      	mov	r0, r3
 800b238:	f002 fc93 	bl	800db62 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b23c:	e000      	b.n	800b240 <readData+0x52>
		__NOP();
 800b23e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f6      	bne.n	800b23e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	4618      	mov	r0, r3
 800b256:	f002 fc22 	bl	800da9e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68d8      	ldr	r0, [r3, #12]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	791b      	ldrb	r3, [r3, #4]
 800b264:	2201      	movs	r2, #1
 800b266:	4619      	mov	r1, r3
 800b268:	f002 fc53 	bl	800db12 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	4618      	mov	r0, r3
 800b272:	f002 fc3c 	bl	800daee <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 fbcc 	bl	800da18 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	4618      	mov	r0, r3
 800b286:	f002 fca0 	bl	800dbca <i2c_readDataByte>
 800b28a:	4603      	mov	r3, r0
 800b28c:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 800b2a8:	2175      	movs	r1, #117	; 0x75
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff ff9f 	bl	800b1ee <readData>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b2ba:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	085b      	lsrs	r3, r3, #1
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bf14      	ite	ne
 800b2c6:	2301      	movne	r3, #1
 800b2c8:	2300      	moveq	r3, #0
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]

}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	f04f 0300 	mov.w	r3, #0
 800b2f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 800b2f8:	2143      	movs	r1, #67	; 0x43
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ff77 	bl	800b1ee <readData>
 800b300:	4603      	mov	r3, r0
 800b302:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 800b304:	2144      	movs	r1, #68	; 0x44
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff ff71 	bl	800b1ee <readData>
 800b30c:	4603      	mov	r3, r0
 800b30e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 800b310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b314:	021b      	lsls	r3, r3, #8
 800b316:	b21a      	sxth	r2, r3
 800b318:	89bb      	ldrh	r3, [r7, #12]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	785b      	ldrb	r3, [r3, #1]
 800b322:	2b03      	cmp	r3, #3
 800b324:	d846      	bhi.n	800b3b4 <readGyro_X+0xdc>
 800b326:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <readGyro_X+0x54>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b33d 	.word	0x0800b33d
 800b330:	0800b35b 	.word	0x0800b35b
 800b334:	0800b379 	.word	0x0800b379
 800b338:	0800b397 	.word	0x0800b397
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800b33c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b340:	4618      	mov	r0, r3
 800b342:	f7f5 f907 	bl	8000554 <__aeabi_i2d>
 800b346:	a325      	add	r3, pc, #148	; (adr r3, 800b3dc <readGyro_X+0x104>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f5 fa96 	bl	800087c <__aeabi_ddiv>
 800b350:	4602      	mov	r2, r0
 800b352:	460b      	mov	r3, r1
 800b354:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b358:	e02d      	b.n	800b3b6 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 800b35a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7f5 f8f8 	bl	8000554 <__aeabi_i2d>
 800b364:	f04f 0200 	mov.w	r2, #0
 800b368:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <readGyro_X+0xf8>)
 800b36a:	f7f5 fa87 	bl	800087c <__aeabi_ddiv>
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b376:	e01e      	b.n	800b3b6 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 800b378:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7f5 f8e9 	bl	8000554 <__aeabi_i2d>
 800b382:	f04f 0200 	mov.w	r2, #0
 800b386:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <readGyro_X+0xfc>)
 800b388:	f7f5 fa78 	bl	800087c <__aeabi_ddiv>
 800b38c:	4602      	mov	r2, r0
 800b38e:	460b      	mov	r3, r1
 800b390:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b394:	e00f      	b.n	800b3b6 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 800b396:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7f5 f8da 	bl	8000554 <__aeabi_i2d>
 800b3a0:	f04f 0200 	mov.w	r2, #0
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <readGyro_X+0x100>)
 800b3a6:	f7f5 fa69 	bl	800087c <__aeabi_ddiv>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b3b2:	e000      	b.n	800b3b6 <readGyro_X+0xde>
		}default:{
			break;
 800b3b4:	bf00      	nop
		}

	}

	return GYROX_R;
 800b3b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b3ba:	f7f5 fc2d 	bl	8000c18 <__aeabi_d2f>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	ee07 3a90 	vmov	s15, r3

}
 800b3c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40508000 	.word	0x40508000
 800b3d4:	40408000 	.word	0x40408000
 800b3d8:	40300000 	.word	0x40300000
 800b3dc:	00000000 	.word	0x00000000
 800b3e0:	40606000 	.word	0x40606000
 800b3e4:	00000000 	.word	0x00000000

0800b3e8 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800b3fc:	f04f 0200 	mov.w	r2, #0
 800b400:	f04f 0300 	mov.w	r3, #0
 800b404:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 800b408:	2145      	movs	r1, #69	; 0x45
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff feef 	bl	800b1ee <readData>
 800b410:	4603      	mov	r3, r0
 800b412:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800b414:	2146      	movs	r1, #70	; 0x46
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff fee9 	bl	800b1ee <readData>
 800b41c:	4603      	mov	r3, r0
 800b41e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 800b420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	b21a      	sxth	r2, r3
 800b428:	89bb      	ldrh	r3, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	785b      	ldrb	r3, [r3, #1]
 800b432:	2b03      	cmp	r3, #3
 800b434:	d846      	bhi.n	800b4c4 <readGyro_Y+0xdc>
 800b436:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <readGyro_Y+0x54>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b44d 	.word	0x0800b44d
 800b440:	0800b46b 	.word	0x0800b46b
 800b444:	0800b489 	.word	0x0800b489
 800b448:	0800b4a7 	.word	0x0800b4a7
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800b44c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b450:	4618      	mov	r0, r3
 800b452:	f7f5 f87f 	bl	8000554 <__aeabi_i2d>
 800b456:	a325      	add	r3, pc, #148	; (adr r3, 800b4ec <readGyro_Y+0x104>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 fa0e 	bl	800087c <__aeabi_ddiv>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b468:	e02d      	b.n	800b4c6 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 800b46a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f5 f870 	bl	8000554 <__aeabi_i2d>
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	4b19      	ldr	r3, [pc, #100]	; (800b4e0 <readGyro_Y+0xf8>)
 800b47a:	f7f5 f9ff 	bl	800087c <__aeabi_ddiv>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b486:	e01e      	b.n	800b4c6 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 800b488:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7f5 f861 	bl	8000554 <__aeabi_i2d>
 800b492:	f04f 0200 	mov.w	r2, #0
 800b496:	4b13      	ldr	r3, [pc, #76]	; (800b4e4 <readGyro_Y+0xfc>)
 800b498:	f7f5 f9f0 	bl	800087c <__aeabi_ddiv>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b4a4:	e00f      	b.n	800b4c6 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 800b4a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f5 f852 	bl	8000554 <__aeabi_i2d>
 800b4b0:	f04f 0200 	mov.w	r2, #0
 800b4b4:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <readGyro_Y+0x100>)
 800b4b6:	f7f5 f9e1 	bl	800087c <__aeabi_ddiv>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b4c2:	e000      	b.n	800b4c6 <readGyro_Y+0xde>
		}default:{
			break;
 800b4c4:	bf00      	nop
		}

	}

	return GYROY_R;
 800b4c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b4ca:	f7f5 fba5 	bl	8000c18 <__aeabi_d2f>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	ee07 3a90 	vmov	s15, r3

}
 800b4d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	40508000 	.word	0x40508000
 800b4e4:	40408000 	.word	0x40408000
 800b4e8:	40300000 	.word	0x40300000
 800b4ec:	00000000 	.word	0x00000000
 800b4f0:	40606000 	.word	0x40606000
 800b4f4:	00000000 	.word	0x00000000

0800b4f8 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800b50c:	f04f 0200 	mov.w	r2, #0
 800b510:	f04f 0300 	mov.w	r3, #0
 800b514:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 800b518:	2147      	movs	r1, #71	; 0x47
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fe67 	bl	800b1ee <readData>
 800b520:	4603      	mov	r3, r0
 800b522:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 800b524:	2148      	movs	r1, #72	; 0x48
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff fe61 	bl	800b1ee <readData>
 800b52c:	4603      	mov	r3, r0
 800b52e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 800b530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	b21a      	sxth	r2, r3
 800b538:	89bb      	ldrh	r3, [r7, #12]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	785b      	ldrb	r3, [r3, #1]
 800b542:	2b03      	cmp	r3, #3
 800b544:	d846      	bhi.n	800b5d4 <readGyro_Z+0xdc>
 800b546:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <readGyro_Z+0x54>)
 800b548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54c:	0800b55d 	.word	0x0800b55d
 800b550:	0800b57b 	.word	0x0800b57b
 800b554:	0800b599 	.word	0x0800b599
 800b558:	0800b5b7 	.word	0x0800b5b7
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800b55c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b560:	4618      	mov	r0, r3
 800b562:	f7f4 fff7 	bl	8000554 <__aeabi_i2d>
 800b566:	a325      	add	r3, pc, #148	; (adr r3, 800b5fc <readGyro_Z+0x104>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f5 f986 	bl	800087c <__aeabi_ddiv>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b578:	e02d      	b.n	800b5d6 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800b57a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f4 ffe8 	bl	8000554 <__aeabi_i2d>
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <readGyro_Z+0xf8>)
 800b58a:	f7f5 f977 	bl	800087c <__aeabi_ddiv>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b596:	e01e      	b.n	800b5d6 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 800b598:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7f4 ffd9 	bl	8000554 <__aeabi_i2d>
 800b5a2:	f04f 0200 	mov.w	r2, #0
 800b5a6:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <readGyro_Z+0xfc>)
 800b5a8:	f7f5 f968 	bl	800087c <__aeabi_ddiv>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b5b4:	e00f      	b.n	800b5d6 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 800b5b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f4 ffca 	bl	8000554 <__aeabi_i2d>
 800b5c0:	f04f 0200 	mov.w	r2, #0
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <readGyro_Z+0x100>)
 800b5c6:	f7f5 f959 	bl	800087c <__aeabi_ddiv>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b5d2:	e000      	b.n	800b5d6 <readGyro_Z+0xde>
		}default:{
			break;
 800b5d4:	bf00      	nop
		}

	}

	return GYROZ_R;
 800b5d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b5da:	f7f5 fb1d 	bl	8000c18 <__aeabi_d2f>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	ee07 3a90 	vmov	s15, r3

}
 800b5e4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	40508000 	.word	0x40508000
 800b5f4:	40408000 	.word	0x40408000
 800b5f8:	40300000 	.word	0x40300000
 800b5fc:	00000000 	.word	0x00000000
 800b600:	40606000 	.word	0x40606000
 800b604:	00000000 	.word	0x00000000

0800b608 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08c      	sub	sp, #48	; 0x30
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6178      	str	r0, [r7, #20]
 800b610:	6139      	str	r1, [r7, #16]
 800b612:	ed87 0b02 	vstr	d0, [r7, #8]
 800b616:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b624:	f7f4 fe48 	bl	80002b8 <__aeabi_dsub>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b63a:	f7f4 fe3d 	bl	80002b8 <__aeabi_dsub>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	3310      	adds	r3, #16
 800b64a:	f107 0218 	add.w	r2, r7, #24
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f9fd 	bl	800ba50 <calculed_ang_turn>
 800b656:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 800b65a:	f04f 0200 	mov.w	r2, #0
 800b65e:	4b38      	ldr	r3, [pc, #224]	; (800b740 <build_Operation+0x138>)
 800b660:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b664:	f7f5 fa70 	bl	8000b48 <__aeabi_dcmpgt>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d020      	beq.n	800b6b0 <build_Operation+0xa8>
 800b66e:	f04f 0200 	mov.w	r2, #0
 800b672:	4b34      	ldr	r3, [pc, #208]	; (800b744 <build_Operation+0x13c>)
 800b674:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b678:	f7f5 fa48 	bl	8000b0c <__aeabi_dcmplt>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d016      	beq.n	800b6b0 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b688:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 800b738 <build_Operation+0x130>
 800b68c:	ed97 1b00 	vldr	d1, [r7]
 800b690:	ed97 0b02 	vldr	d0, [r7, #8]
 800b694:	2201      	movs	r2, #1
 800b696:	4619      	mov	r1, r3
 800b698:	6978      	ldr	r0, [r7, #20]
 800b69a:	f000 f855 	bl	800b748 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b6ae:	e02b      	b.n	800b708 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b6ba:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b738 <build_Operation+0x130>
 800b6be:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b738 <build_Operation+0x130>
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6978      	ldr	r0, [r7, #20]
 800b6c8:	f000 f83e 	bl	800b748 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e2:	ed9f 2b15 	vldr	d2, [pc, #84]	; 800b738 <build_Operation+0x130>
 800b6e6:	ed97 1b00 	vldr	d1, [r7]
 800b6ea:	ed97 0b02 	vldr	d0, [r7, #8]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	6978      	ldr	r0, [r7, #20]
 800b6f4:	f000 f828 	bl	800b748 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6fe:	3301      	adds	r3, #1
 800b700:	b2da      	uxtb	r2, r3
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 800b708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b70c:	6939      	ldr	r1, [r7, #16]
 800b70e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 800b712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b716:	6939      	ldr	r1, [r7, #16]
 800b718:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 800b71c:	6939      	ldr	r1, [r7, #16]
 800b71e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b722:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 800b726:	6939      	ldr	r1, [r7, #16]
 800b728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b72c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800b730:	bf00      	nop
 800b732:	3730      	adds	r7, #48	; 0x30
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
	...
 800b740:	c0140000 	.word	0xc0140000
 800b744:	40140000 	.word	0x40140000

0800b748 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 800b748:	b480      	push	{r7}
 800b74a:	b089      	sub	sp, #36	; 0x24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	61f8      	str	r0, [r7, #28]
 800b750:	460b      	mov	r3, r1
 800b752:	ed87 0b04 	vstr	d0, [r7, #16]
 800b756:	ed87 1b02 	vstr	d1, [r7, #8]
 800b75a:	ed87 2b00 	vstr	d2, [r7]
 800b75e:	76fb      	strb	r3, [r7, #27]
 800b760:	4613      	mov	r3, r2
 800b762:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800b764:	7efa      	ldrb	r2, [r7, #27]
 800b766:	4613      	mov	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	461a      	mov	r2, r3
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	4413      	add	r3, r2
 800b774:	7eba      	ldrb	r2, [r7, #26]
 800b776:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 800b778:	7efa      	ldrb	r2, [r7, #27]
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	461a      	mov	r2, r3
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	1899      	adds	r1, r3, r2
 800b788:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b78c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 800b790:	7efa      	ldrb	r2, [r7, #27]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	00db      	lsls	r3, r3, #3
 800b79a:	461a      	mov	r2, r3
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	1899      	adds	r1, r3, r2
 800b7a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 800b7a8:	7efa      	ldrb	r2, [r7, #27]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	1899      	adds	r1, r3, r2
 800b7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800b7c0:	bf00      	nop
 800b7c2:	3724      	adds	r7, #36	; 0x24
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	0000      	movs	r0, r0
	...

0800b7d0 <calculation_parameter_distance>:

}

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 800b7d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b7d4:	b08a      	sub	sp, #40	; 0x28
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b7e6:	f7f4 fd67 	bl	80002b8 <__aeabi_dsub>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b7fe:	f7f4 fd5b 	bl	80002b8 <__aeabi_dsub>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 800b80a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 800b918 <calculation_parameter_distance+0x148>
 800b80e:	ed97 0b08 	vldr	d0, [r7, #32]
 800b812:	f005 fa37 	bl	8010c84 <pow>
 800b816:	ec59 8b10 	vmov	r8, r9, d0
 800b81a:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 800b918 <calculation_parameter_distance+0x148>
 800b81e:	ed97 0b06 	vldr	d0, [r7, #24]
 800b822:	f005 fa2f 	bl	8010c84 <pow>
 800b826:	ec53 2b10 	vmov	r2, r3, d0
 800b82a:	4640      	mov	r0, r8
 800b82c:	4649      	mov	r1, r9
 800b82e:	f7f4 fd45 	bl	80002bc <__adddf3>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	ec43 2b17 	vmov	d7, r2, r3
 800b83a:	eeb0 0a47 	vmov.f32	s0, s14
 800b83e:	eef0 0a67 	vmov.f32	s1, s15
 800b842:	f005 fa8f 	bl	8010d64 <sqrt>
 800b846:	eeb0 7a40 	vmov.f32	s14, s0
 800b84a:	eef0 7a60 	vmov.f32	s15, s1
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 800b854:	6979      	ldr	r1, [r7, #20]
 800b856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b85a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 800b85e:	6979      	ldr	r1, [r7, #20]
 800b860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b864:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	60bb      	str	r3, [r7, #8]
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b87a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b87e:	f7f4 fed3 	bl	8000628 <__aeabi_dmul>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4690      	mov	r8, r2
 800b888:	4699      	mov	r9, r3
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b894:	f7f4 fec8 	bl	8000628 <__aeabi_dmul>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4640      	mov	r0, r8
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7f4 fd0a 	bl	80002b8 <__aeabi_dsub>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	6979      	ldr	r1, [r7, #20]
 800b8aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b8b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 800b8b8:	6a3c      	ldr	r4, [r7, #32]
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	603b      	str	r3, [r7, #0]
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b8d0:	607b      	str	r3, [r7, #4]
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b8d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b8dc:	f7f4 fea4 	bl	8000628 <__aeabi_dmul>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	461d      	mov	r5, r3
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b8ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8f2:	f7f4 fe99 	bl	8000628 <__aeabi_dmul>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f4 fcdd 	bl	80002bc <__adddf3>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	6979      	ldr	r1, [r7, #20]
 800b908:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 800b90c:	bf00      	nop
 800b90e:	3728      	adds	r7, #40	; 0x28
 800b910:	46bd      	mov	sp, r7
 800b912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b916:	bf00      	nop
 800b918:	00000000 	.word	0x00000000
 800b91c:	40000000 	.word	0x40000000

0800b920 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b920:	b5b0      	push	{r4, r5, r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	6178      	str	r0, [r7, #20]
 800b928:	ed87 0b02 	vstr	d0, [r7, #8]
 800b92c:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b93a:	f7f4 fe75 	bl	8000628 <__aeabi_dmul>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4614      	mov	r4, r2
 800b944:	461d      	mov	r5, r3
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800b94c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b950:	f7f4 fe6a 	bl	8000628 <__aeabi_dmul>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 fcae 	bl	80002bc <__adddf3>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4610      	mov	r0, r2
 800b966:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / (ptrParameterPath->magnitude_director + 0.001));
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b96e:	f7f4 fca5 	bl	80002bc <__adddf3>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
 800b976:	4614      	mov	r4, r2
 800b978:	461d      	mov	r5, r3
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b980:	a30f      	add	r3, pc, #60	; (adr r3, 800b9c0 <distance_to_straight_line+0xa0>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fc99 	bl	80002bc <__adddf3>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	f7f4 ff73 	bl	800087c <__aeabi_ddiv>
 800b996:	4602      	mov	r2, r0
 800b998:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b99a:	4611      	mov	r1, r2
 800b99c:	61b9      	str	r1, [r7, #24]
 800b99e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b9a2:	61fb      	str	r3, [r7, #28]

	return distance;
 800b9a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9a8:	ec43 2b17 	vmov	d7, r2, r3
}
 800b9ac:	eeb0 0a47 	vmov.f32	s0, s14
 800b9b0:	eef0 0a67 	vmov.f32	s1, s15
 800b9b4:	3720      	adds	r7, #32
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w
 800b9c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b9c4:	3f50624d 	.word	0x3f50624d

0800b9c8 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b9c8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6178      	str	r0, [r7, #20]
 800b9d0:	ed87 0b02 	vstr	d0, [r7, #8]
 800b9d4:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b9de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9e2:	f7f4 fe21 	bl	8000628 <__aeabi_dmul>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4614      	mov	r4, r2
 800b9ec:	461d      	mov	r5, r3
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b9f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9f8:	f7f4 fe16 	bl	8000628 <__aeabi_dmul>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4620      	mov	r0, r4
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7f4 fc5a 	bl	80002bc <__adddf3>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800ba16:	f7f4 fc51 	bl	80002bc <__adddf3>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4619      	mov	r1, r3
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800ba28:	f7f4 ff28 	bl	800087c <__aeabi_ddiv>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800ba34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba38:	ec43 2b17 	vmov	d7, r2, r3
}
 800ba3c:	eeb0 0a47 	vmov.f32	s0, s14
 800ba40:	eef0 0a67 	vmov.f32	s1, s15
 800ba44:	3720      	adds	r7, #32
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bdb0      	pop	{r4, r5, r7, pc}
 800ba4a:	0000      	movs	r0, r0
 800ba4c:	0000      	movs	r0, r0
	...

0800ba50 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 800ba50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba54:	b08a      	sub	sp, #40	; 0x28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	3308      	adds	r3, #8
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	f7f4 fddd 	bl	8000628 <__aeabi_dmul>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4690      	mov	r8, r2
 800ba74:	4699      	mov	r9, r3
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 fdd0 	bl	8000628 <__aeabi_dmul>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	f7f4 fc12 	bl	80002b8 <__aeabi_dsub>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	ed93 7b00 	vldr	d7, [r3]
 800baa2:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 800bc20 <calculed_ang_turn+0x1d0>
 800baa6:	eeb0 0a47 	vmov.f32	s0, s14
 800baaa:	eef0 0a67 	vmov.f32	s1, s15
 800baae:	f005 f8e9 	bl	8010c84 <pow>
 800bab2:	ec59 8b10 	vmov	r8, r9, d0
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3308      	adds	r3, #8
 800baba:	ed93 7b00 	vldr	d7, [r3]
 800babe:	ed9f 1b58 	vldr	d1, [pc, #352]	; 800bc20 <calculed_ang_turn+0x1d0>
 800bac2:	eeb0 0a47 	vmov.f32	s0, s14
 800bac6:	eef0 0a67 	vmov.f32	s1, s15
 800baca:	f005 f8db 	bl	8010c84 <pow>
 800bace:	ec53 2b10 	vmov	r2, r3, d0
 800bad2:	4640      	mov	r0, r8
 800bad4:	4649      	mov	r1, r9
 800bad6:	f7f4 fbf1 	bl	80002bc <__adddf3>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	ec43 2b17 	vmov	d7, r2, r3
 800bae2:	eeb0 0a47 	vmov.f32	s0, s14
 800bae6:	eef0 0a67 	vmov.f32	s1, s15
 800baea:	f005 f93b 	bl	8010d64 <sqrt>
 800baee:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	ed93 7b00 	vldr	d7, [r3]
 800baf8:	ed9f 1b49 	vldr	d1, [pc, #292]	; 800bc20 <calculed_ang_turn+0x1d0>
 800bafc:	eeb0 0a47 	vmov.f32	s0, s14
 800bb00:	eef0 0a67 	vmov.f32	s1, s15
 800bb04:	f005 f8be 	bl	8010c84 <pow>
 800bb08:	ec59 8b10 	vmov	r8, r9, d0
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	3308      	adds	r3, #8
 800bb10:	ed93 7b00 	vldr	d7, [r3]
 800bb14:	ed9f 1b42 	vldr	d1, [pc, #264]	; 800bc20 <calculed_ang_turn+0x1d0>
 800bb18:	eeb0 0a47 	vmov.f32	s0, s14
 800bb1c:	eef0 0a67 	vmov.f32	s1, s15
 800bb20:	f005 f8b0 	bl	8010c84 <pow>
 800bb24:	ec53 2b10 	vmov	r2, r3, d0
 800bb28:	4640      	mov	r0, r8
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	f7f4 fbc6 	bl	80002bc <__adddf3>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	ec43 2b17 	vmov	d7, r2, r3
 800bb38:	eeb0 0a47 	vmov.f32	s0, s14
 800bb3c:	eef0 0a67 	vmov.f32	s1, s15
 800bb40:	f005 f910 	bl	8010d64 <sqrt>
 800bb44:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	f7f4 fd68 	bl	8000628 <__aeabi_dmul>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4690      	mov	r8, r2
 800bb5e:	4699      	mov	r9, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	3308      	adds	r3, #8
 800bb64:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f7f4 fd5a 	bl	8000628 <__aeabi_dmul>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	f7f4 fb9e 	bl	80002bc <__adddf3>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4690      	mov	r8, r2
 800bb86:	4699      	mov	r9, r3
 800bb88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb90:	f7f4 fd4a 	bl	8000628 <__aeabi_dmul>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	f7f4 fe6e 	bl	800087c <__aeabi_ddiv>
 800bba0:	4602      	mov	r2, r0
 800bba2:	460b      	mov	r3, r1
 800bba4:	ec43 2b17 	vmov	d7, r2, r3
 800bba8:	eeb0 0a47 	vmov.f32	s0, s14
 800bbac:	eef0 0a67 	vmov.f32	s1, s15
 800bbb0:	f005 f832 	bl	8010c18 <acos>
 800bbb4:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 800bbb8:	f04f 0200 	mov.w	r2, #0
 800bbbc:	4b1c      	ldr	r3, [pc, #112]	; (800bc30 <calculed_ang_turn+0x1e0>)
 800bbbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bbc2:	f7f4 fd31 	bl	8000628 <__aeabi_dmul>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4610      	mov	r0, r2
 800bbcc:	4619      	mov	r1, r3
 800bbce:	a316      	add	r3, pc, #88	; (adr r3, 800bc28 <calculed_ang_turn+0x1d8>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fe52 	bl	800087c <__aeabi_ddiv>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bbec:	f7f4 ff8e 	bl	8000b0c <__aeabi_dcmplt>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <calculed_ang_turn+0x1b2>
 800bbf6:	6a3c      	ldr	r4, [r7, #32]
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800bbfe:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 800bc02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc06:	ec43 2b17 	vmov	d7, r2, r3
}
 800bc0a:	eeb0 0a47 	vmov.f32	s0, s14
 800bc0e:	eef0 0a67 	vmov.f32	s1, s15
 800bc12:	3728      	adds	r7, #40	; 0x28
 800bc14:	46bd      	mov	sp, r7
 800bc16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bc1a:	bf00      	nop
 800bc1c:	f3af 8000 	nop.w
 800bc20:	00000000 	.word	0x00000000
 800bc24:	40000000 	.word	0x40000000
 800bc28:	54442d18 	.word	0x54442d18
 800bc2c:	400921fb 	.word	0x400921fb
 800bc30:	40668000 	.word	0x40668000

0800bc34 <unitary_vector>:



void unitary_vector (double angle,double vector_b[2]){
 800bc34:	b590      	push	{r4, r7, lr}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	ed87 0b02 	vstr	d0, [r7, #8]
 800bc3e:	6078      	str	r0, [r7, #4]

	// Esta función lo que haremos es definir un vector unitario con respecto al angulo actual que tenga el robot
	vector_b[0] = cos(angle);
 800bc40:	ed97 0b02 	vldr	d0, [r7, #8]
 800bc44:	f004 fef4 	bl	8010a30 <cos>
 800bc48:	eeb0 7a40 	vmov.f32	s14, s0
 800bc4c:	eef0 7a60 	vmov.f32	s15, s1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	ed83 7b00 	vstr	d7, [r3]
	vector_b[1] = sin(angle);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f103 0408 	add.w	r4, r3, #8
 800bc5c:	ed97 0b02 	vldr	d0, [r7, #8]
 800bc60:	f004 ff82 	bl	8010b68 <sin>
 800bc64:	eeb0 7a40 	vmov.f32	s14, s0
 800bc68:	eef0 7a60 	vmov.f32	s15, s1
 800bc6c:	ed84 7b00 	vstr	d7, [r4]

}
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd90      	pop	{r4, r7, pc}

0800bc78 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a6c      	ldr	r2, [pc, #432]	; (800be38 <pwm_Config+0x1c0>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d106      	bne.n	800bc98 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800bc8a:	4b6c      	ldr	r3, [pc, #432]	; (800be3c <pwm_Config+0x1c4>)
 800bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8e:	4a6b      	ldr	r2, [pc, #428]	; (800be3c <pwm_Config+0x1c4>)
 800bc90:	f043 0301 	orr.w	r3, r3, #1
 800bc94:	6453      	str	r3, [r2, #68]	; 0x44
 800bc96:	e030      	b.n	800bcfa <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bca0:	d106      	bne.n	800bcb0 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800bca2:	4b66      	ldr	r3, [pc, #408]	; (800be3c <pwm_Config+0x1c4>)
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	4a65      	ldr	r2, [pc, #404]	; (800be3c <pwm_Config+0x1c4>)
 800bca8:	f043 0301 	orr.w	r3, r3, #1
 800bcac:	6413      	str	r3, [r2, #64]	; 0x40
 800bcae:	e024      	b.n	800bcfa <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a62      	ldr	r2, [pc, #392]	; (800be40 <pwm_Config+0x1c8>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d106      	bne.n	800bcc8 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800bcba:	4b60      	ldr	r3, [pc, #384]	; (800be3c <pwm_Config+0x1c4>)
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbe:	4a5f      	ldr	r2, [pc, #380]	; (800be3c <pwm_Config+0x1c4>)
 800bcc0:	f043 0302 	orr.w	r3, r3, #2
 800bcc4:	6413      	str	r3, [r2, #64]	; 0x40
 800bcc6:	e018      	b.n	800bcfa <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a5d      	ldr	r2, [pc, #372]	; (800be44 <pwm_Config+0x1cc>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d106      	bne.n	800bce0 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800bcd2:	4b5a      	ldr	r3, [pc, #360]	; (800be3c <pwm_Config+0x1c4>)
 800bcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd6:	4a59      	ldr	r2, [pc, #356]	; (800be3c <pwm_Config+0x1c4>)
 800bcd8:	f043 0304 	orr.w	r3, r3, #4
 800bcdc:	6413      	str	r3, [r2, #64]	; 0x40
 800bcde:	e00c      	b.n	800bcfa <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a58      	ldr	r2, [pc, #352]	; (800be48 <pwm_Config+0x1d0>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d106      	bne.n	800bcf8 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800bcea:	4b54      	ldr	r3, [pc, #336]	; (800be3c <pwm_Config+0x1c4>)
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	4a53      	ldr	r2, [pc, #332]	; (800be3c <pwm_Config+0x1c4>)
 800bcf0:	f043 0308 	orr.w	r3, r3, #8
 800bcf4:	6413      	str	r3, [r2, #64]	; 0x40
 800bcf6:	e000      	b.n	800bcfa <pwm_Config+0x82>
	}
	else{
		__NOP();
 800bcf8:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bd08:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	7f5b      	ldrb	r3, [r3, #29]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f930 	bl	800bf78 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fa67 	bl	800c1ec <setDuttyCycle>
 800bd1e:	e005      	b.n	800bd2c <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f929 	bl	800bf78 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fb38 	bl	800c39c <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 0210 	bic.w	r2, r2, #16
 800bd3a:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2200      	movs	r2, #0
 800bd42:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	7a1b      	ldrb	r3, [r3, #8]
 800bd48:	2b03      	cmp	r3, #3
 800bd4a:	d86f      	bhi.n	800be2c <pwm_Config+0x1b4>
 800bd4c:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <pwm_Config+0xdc>)
 800bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd52:	bf00      	nop
 800bd54:	0800bd65 	.word	0x0800bd65
 800bd58:	0800bd97 	.word	0x0800bd97
 800bd5c:	0800bdc9 	.word	0x0800bdc9
 800bd60:	0800bdfb 	.word	0x0800bdfb
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699a      	ldr	r2, [r3, #24]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f022 0203 	bic.w	r2, r2, #3
 800bd72:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	699a      	ldr	r2, [r3, #24]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bd82:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699a      	ldr	r2, [r3, #24]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0208 	orr.w	r2, r2, #8
 800bd92:	619a      	str	r2, [r3, #24]


		break;
 800bd94:	e04b      	b.n	800be2e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bda4:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	699a      	ldr	r2, [r3, #24]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800bdb4:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	699a      	ldr	r2, [r3, #24]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdc4:	619a      	str	r2, [r3, #24]

		break;
 800bdc6:	e032      	b.n	800be2e <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	69da      	ldr	r2, [r3, #28]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f022 0203 	bic.w	r2, r2, #3
 800bdd6:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	69da      	ldr	r2, [r3, #28]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bde6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	69da      	ldr	r2, [r3, #28]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f042 0208 	orr.w	r2, r2, #8
 800bdf6:	61da      	str	r2, [r3, #28]

		break;
 800bdf8:	e019      	b.n	800be2e <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	69da      	ldr	r2, [r3, #28]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800be08:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	69da      	ldr	r2, [r3, #28]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800be18:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	69da      	ldr	r2, [r3, #28]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be28:	61da      	str	r2, [r3, #28]

		break;
 800be2a:	e000      	b.n	800be2e <pwm_Config+0x1b6>
	}

	default:{
		break;
 800be2c:	bf00      	nop
	}// fin del switch-case




}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	40010000 	.word	0x40010000
 800be3c:	40023800 	.word	0x40023800
 800be40:	40000400 	.word	0x40000400
 800be44:	40000800 	.word	0x40000800
 800be48:	40000c00 	.word	0x40000c00

0800be4c <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]

}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a3d      	ldr	r2, [pc, #244]	; (800bf74 <enableOutput+0x104>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d13a      	bne.n	800bef8 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be90:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7a1b      	ldrb	r3, [r3, #8]
 800be96:	2b03      	cmp	r3, #3
 800be98:	d862      	bhi.n	800bf60 <enableOutput+0xf0>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <enableOutput+0x30>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beb1 	.word	0x0800beb1
 800bea4:	0800bec3 	.word	0x0800bec3
 800bea8:	0800bed5 	.word	0x0800bed5
 800beac:	0800bee7 	.word	0x0800bee7
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6a1a      	ldr	r2, [r3, #32]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f042 0201 	orr.w	r2, r2, #1
 800bebe:	621a      	str	r2, [r3, #32]

				break;
 800bec0:	e051      	b.n	800bf66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6a1a      	ldr	r2, [r3, #32]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f042 0210 	orr.w	r2, r2, #16
 800bed0:	621a      	str	r2, [r3, #32]

				break;
 800bed2:	e048      	b.n	800bf66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6a1a      	ldr	r2, [r3, #32]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bee2:	621a      	str	r2, [r3, #32]

				break;
 800bee4:	e03f      	b.n	800bf66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	6a1a      	ldr	r2, [r3, #32]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bef4:	621a      	str	r2, [r3, #32]

				break;
 800bef6:	e036      	b.n	800bf66 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	7a1b      	ldrb	r3, [r3, #8]
 800befc:	2b03      	cmp	r3, #3
 800befe:	d831      	bhi.n	800bf64 <enableOutput+0xf4>
 800bf00:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <enableOutput+0x98>)
 800bf02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf06:	bf00      	nop
 800bf08:	0800bf19 	.word	0x0800bf19
 800bf0c:	0800bf2b 	.word	0x0800bf2b
 800bf10:	0800bf3d 	.word	0x0800bf3d
 800bf14:	0800bf4f 	.word	0x0800bf4f
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6a1a      	ldr	r2, [r3, #32]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f042 0201 	orr.w	r2, r2, #1
 800bf26:	621a      	str	r2, [r3, #32]

				break;
 800bf28:	e01d      	b.n	800bf66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6a1a      	ldr	r2, [r3, #32]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f042 0210 	orr.w	r2, r2, #16
 800bf38:	621a      	str	r2, [r3, #32]

				break;
 800bf3a:	e014      	b.n	800bf66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6a1a      	ldr	r2, [r3, #32]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf4a:	621a      	str	r2, [r3, #32]

				break;
 800bf4c:	e00b      	b.n	800bf66 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6a1a      	ldr	r2, [r3, #32]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf5c:	621a      	str	r2, [r3, #32]

				break;
 800bf5e:	e002      	b.n	800bf66 <enableOutput+0xf6>
				break;
 800bf60:	bf00      	nop
 800bf62:	e000      	b.n	800bf66 <enableOutput+0xf6>
			}

			default: {
				break;
 800bf64:	bf00      	nop
			}

		}
	}
	return SET;
 800bf66:	2301      	movs	r3, #1
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	40010000 	.word	0x40010000

0800bf78 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	68d2      	ldr	r2, [r2, #12]
 800bf8c:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b10      	cmp	r3, #16
 800bf98:	d01a      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2b14      	cmp	r3, #20
 800bf9e:	d017      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b1e      	cmp	r3, #30
 800bfa4:	d014      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b28      	cmp	r3, #40	; 0x28
 800bfaa:	d011      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2b32      	cmp	r3, #50	; 0x32
 800bfb0:	d00e      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2b3c      	cmp	r3, #60	; 0x3c
 800bfb6:	d00b      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b46      	cmp	r3, #70	; 0x46
 800bfbc:	d008      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b50      	cmp	r3, #80	; 0x50
 800bfc2:	d005      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2b5a      	cmp	r3, #90	; 0x5a
 800bfc8:	d002      	beq.n	800bfd0 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2b64      	cmp	r3, #100	; 0x64
 800bfce:	d118      	bne.n	800c002 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bfd6:	f04f 0200 	mov.w	r2, #0
 800bfda:	4b7b      	ldr	r3, [pc, #492]	; (800c1c8 <setFrequency+0x250>)
 800bfdc:	f7f4 fb24 	bl	8000628 <__aeabi_dmul>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	f7f4 fdf6 	bl	8000bd8 <__aeabi_d2uiz>
 800bfec:	4603      	mov	r3, r0
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	4b76      	ldr	r3, [pc, #472]	; (800c1cc <setFrequency+0x254>)
 800bff2:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800bff4:	4b75      	ldr	r3, [pc, #468]	; (800c1cc <setFrequency+0x254>)
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	1e5a      	subs	r2, r3, #1
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	62da      	str	r2, [r3, #44]	; 0x2c
 800c000:	e0dd      	b.n	800c1be <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2ba0      	cmp	r3, #160	; 0xa0
 800c006:	d022      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2bc8      	cmp	r3, #200	; 0xc8
 800c00c:	d01f      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c014:	d01b      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800c01c:	d017      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c024:	d013      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800c02c:	d00f      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800c034:	d00b      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800c03c:	d007      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800c044:	d003      	beq.n	800c04e <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c04c:	d118      	bne.n	800c080 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c054:	f04f 0200 	mov.w	r2, #0
 800c058:	4b5d      	ldr	r3, [pc, #372]	; (800c1d0 <setFrequency+0x258>)
 800c05a:	f7f4 fae5 	bl	8000628 <__aeabi_dmul>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4610      	mov	r0, r2
 800c064:	4619      	mov	r1, r3
 800c066:	f7f4 fdb7 	bl	8000bd8 <__aeabi_d2uiz>
 800c06a:	4603      	mov	r3, r0
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	4b57      	ldr	r3, [pc, #348]	; (800c1cc <setFrequency+0x254>)
 800c070:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c072:	4b56      	ldr	r3, [pc, #344]	; (800c1cc <setFrequency+0x254>)
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	1e5a      	subs	r2, r3, #1
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c07e:	e09e      	b.n	800c1be <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c086:	d029      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c08e:	d025      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c096:	4293      	cmp	r3, r2
 800c098:	d020      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800c0a0:	d01c      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d017      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f241 7270 	movw	r2, #6000	; 0x1770
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d012      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d00d      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800c0c6:	d009      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f242 3228 	movw	r2, #9000	; 0x2328
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d004      	beq.n	800c0dc <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f242 7210 	movw	r2, #10000	; 0x2710
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d118      	bne.n	800c10e <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0e2:	f04f 0200 	mov.w	r2, #0
 800c0e6:	4b3b      	ldr	r3, [pc, #236]	; (800c1d4 <setFrequency+0x25c>)
 800c0e8:	f7f4 fa9e 	bl	8000628 <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	f7f4 fd70 	bl	8000bd8 <__aeabi_d2uiz>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	4b33      	ldr	r3, [pc, #204]	; (800c1cc <setFrequency+0x254>)
 800c0fe:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c100:	4b32      	ldr	r3, [pc, #200]	; (800c1cc <setFrequency+0x254>)
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	1e5a      	subs	r2, r3, #1
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c10c:	e057      	b.n	800c1be <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c114:	d028      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d023      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f247 5230 	movw	r2, #30000	; 0x7530
 800c126:	4293      	cmp	r3, r2
 800c128:	d01e      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f649 4240 	movw	r2, #40000	; 0x9c40
 800c130:	4293      	cmp	r3, r2
 800c132:	d019      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d014      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c144:	4293      	cmp	r3, r2
 800c146:	d00f      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4a23      	ldr	r2, [pc, #140]	; (800c1d8 <setFrequency+0x260>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00b      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4a22      	ldr	r2, [pc, #136]	; (800c1dc <setFrequency+0x264>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d007      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	4a21      	ldr	r2, [pc, #132]	; (800c1e0 <setFrequency+0x268>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d003      	beq.n	800c168 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4a20      	ldr	r2, [pc, #128]	; (800c1e4 <setFrequency+0x26c>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d111      	bne.n	800c18c <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c16e:	4610      	mov	r0, r2
 800c170:	4619      	mov	r1, r3
 800c172:	f7f4 fd31 	bl	8000bd8 <__aeabi_d2uiz>
 800c176:	4603      	mov	r3, r0
 800c178:	b29a      	uxth	r2, r3
 800c17a:	4b14      	ldr	r3, [pc, #80]	; (800c1cc <setFrequency+0x254>)
 800c17c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c17e:	4b13      	ldr	r3, [pc, #76]	; (800c1cc <setFrequency+0x254>)
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	1e5a      	subs	r2, r3, #1
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	62da      	str	r2, [r3, #44]	; 0x2c
 800c18a:	e018      	b.n	800c1be <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	4b14      	ldr	r3, [pc, #80]	; (800c1e8 <setFrequency+0x270>)
 800c198:	f7f4 fb70 	bl	800087c <__aeabi_ddiv>
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	f7f4 fd18 	bl	8000bd8 <__aeabi_d2uiz>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <setFrequency+0x254>)
 800c1ae:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c1b0:	4b06      	ldr	r3, [pc, #24]	; (800c1cc <setFrequency+0x254>)
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	1e5a      	subs	r2, r3, #1
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800c1bc:	bf00      	nop
 800c1be:	bf00      	nop
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	408f4000 	.word	0x408f4000
 800c1cc:	20014058 	.word	0x20014058
 800c1d0:	40590000 	.word	0x40590000
 800c1d4:	40240000 	.word	0x40240000
 800c1d8:	00011170 	.word	0x00011170
 800c1dc:	00013880 	.word	0x00013880
 800c1e0:	00015f90 	.word	0x00015f90
 800c1e4:	000186a0 	.word	0x000186a0
 800c1e8:	40340000 	.word	0x40340000

0800c1ec <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800c1ec:	b590      	push	{r4, r7, lr}
 800c1ee:	b08b      	sub	sp, #44	; 0x2c
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	7a1b      	ldrb	r3, [r3, #8]
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	f200 80c3 	bhi.w	800c384 <setDuttyCycle+0x198>
 800c1fe:	a201      	add	r2, pc, #4	; (adr r2, 800c204 <setDuttyCycle+0x18>)
 800c200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c204:	0800c215 	.word	0x0800c215
 800c208:	0800c271 	.word	0x0800c271
 800c20c:	0800c2cd 	.word	0x0800c2cd
 800c210:	0800c329 	.word	0x0800c329
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	ed93 7a06 	vldr	s14, [r3, #24]
 800c21a:	4b5d      	ldr	r3, [pc, #372]	; (800c390 <setDuttyCycle+0x1a4>)
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	ee07 3a90 	vmov	s15, r3
 800c222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c22a:	ee17 0a90 	vmov	r0, s15
 800c22e:	f7f4 f9a3 	bl	8000578 <__aeabi_f2d>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800c23a:	f04f 0200 	mov.w	r2, #0
 800c23e:	4b55      	ldr	r3, [pc, #340]	; (800c394 <setDuttyCycle+0x1a8>)
 800c240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c244:	f7f4 fb1a 	bl	800087c <__aeabi_ddiv>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4610      	mov	r0, r2
 800c24e:	4619      	mov	r1, r3
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	4b50      	ldr	r3, [pc, #320]	; (800c398 <setDuttyCycle+0x1ac>)
 800c256:	f7f4 f82f 	bl	80002b8 <__aeabi_dsub>
 800c25a:	4602      	mov	r2, r0
 800c25c:	460b      	mov	r3, r1
 800c25e:	4610      	mov	r0, r2
 800c260:	4619      	mov	r1, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681c      	ldr	r4, [r3, #0]
 800c266:	f7f4 fcb7 	bl	8000bd8 <__aeabi_d2uiz>
 800c26a:	4603      	mov	r3, r0
 800c26c:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c26e:	e08a      	b.n	800c386 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	ed93 7a06 	vldr	s14, [r3, #24]
 800c276:	4b46      	ldr	r3, [pc, #280]	; (800c390 <setDuttyCycle+0x1a4>)
 800c278:	881b      	ldrh	r3, [r3, #0]
 800c27a:	ee07 3a90 	vmov	s15, r3
 800c27e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c286:	ee17 0a90 	vmov	r0, s15
 800c28a:	f7f4 f975 	bl	8000578 <__aeabi_f2d>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800c296:	f04f 0200 	mov.w	r2, #0
 800c29a:	4b3e      	ldr	r3, [pc, #248]	; (800c394 <setDuttyCycle+0x1a8>)
 800c29c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c2a0:	f7f4 faec 	bl	800087c <__aeabi_ddiv>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	4b39      	ldr	r3, [pc, #228]	; (800c398 <setDuttyCycle+0x1ac>)
 800c2b2:	f7f4 f801 	bl	80002b8 <__aeabi_dsub>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681c      	ldr	r4, [r3, #0]
 800c2c2:	f7f4 fc89 	bl	8000bd8 <__aeabi_d2uiz>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c2ca:	e05c      	b.n	800c386 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2d2:	4b2f      	ldr	r3, [pc, #188]	; (800c390 <setDuttyCycle+0x1a4>)
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e2:	ee17 0a90 	vmov	r0, s15
 800c2e6:	f7f4 f947 	bl	8000578 <__aeabi_f2d>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 800c2f2:	f04f 0200 	mov.w	r2, #0
 800c2f6:	4b27      	ldr	r3, [pc, #156]	; (800c394 <setDuttyCycle+0x1a8>)
 800c2f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c2fc:	f7f4 fabe 	bl	800087c <__aeabi_ddiv>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4610      	mov	r0, r2
 800c306:	4619      	mov	r1, r3
 800c308:	f04f 0200 	mov.w	r2, #0
 800c30c:	4b22      	ldr	r3, [pc, #136]	; (800c398 <setDuttyCycle+0x1ac>)
 800c30e:	f7f3 ffd3 	bl	80002b8 <__aeabi_dsub>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4610      	mov	r0, r2
 800c318:	4619      	mov	r1, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681c      	ldr	r4, [r3, #0]
 800c31e:	f7f4 fc5b 	bl	8000bd8 <__aeabi_d2uiz>
 800c322:	4603      	mov	r3, r0
 800c324:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c326:	e02e      	b.n	800c386 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	ed93 7a06 	vldr	s14, [r3, #24]
 800c32e:	4b18      	ldr	r3, [pc, #96]	; (800c390 <setDuttyCycle+0x1a4>)
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	ee07 3a90 	vmov	s15, r3
 800c336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33e:	ee17 0a90 	vmov	r0, s15
 800c342:	f7f4 f919 	bl	8000578 <__aeabi_f2d>
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800c34e:	f04f 0200 	mov.w	r2, #0
 800c352:	4b10      	ldr	r3, [pc, #64]	; (800c394 <setDuttyCycle+0x1a8>)
 800c354:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c358:	f7f4 fa90 	bl	800087c <__aeabi_ddiv>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4610      	mov	r0, r2
 800c362:	4619      	mov	r1, r3
 800c364:	f04f 0200 	mov.w	r2, #0
 800c368:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <setDuttyCycle+0x1ac>)
 800c36a:	f7f3 ffa5 	bl	80002b8 <__aeabi_dsub>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4610      	mov	r0, r2
 800c374:	4619      	mov	r1, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681c      	ldr	r4, [r3, #0]
 800c37a:	f7f4 fc2d 	bl	8000bd8 <__aeabi_d2uiz>
 800c37e:	4603      	mov	r3, r0
 800c380:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c382:	e000      	b.n	800c386 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 800c384:	bf00      	nop
	}

	}// fin del switch-case

}
 800c386:	bf00      	nop
 800c388:	372c      	adds	r7, #44	; 0x2c
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd90      	pop	{r4, r7, pc}
 800c38e:	bf00      	nop
 800c390:	20014058 	.word	0x20014058
 800c394:	40590000 	.word	0x40590000
 800c398:	3ff00000 	.word	0x3ff00000

0800c39c <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b08b      	sub	sp, #44	; 0x2c
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	7a1b      	ldrb	r3, [r3, #8]
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	f200 80d3 	bhi.w	800c554 <setDuttyCycleAfOpt+0x1b8>
 800c3ae:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <setDuttyCycleAfOpt+0x18>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c3c5 	.word	0x0800c3c5
 800c3b8:	0800c429 	.word	0x0800c429
 800c3bc:	0800c48d 	.word	0x0800c48d
 800c3c0:	0800c4f1 	.word	0x0800c4f1
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c3ca:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c560 <setDuttyCycleAfOpt+0x1c4>
 800c3ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c3d2:	4b64      	ldr	r3, [pc, #400]	; (800c564 <setDuttyCycleAfOpt+0x1c8>)
 800c3d4:	881b      	ldrh	r3, [r3, #0]
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3e2:	ee17 0a90 	vmov	r0, s15
 800c3e6:	f7f4 f8c7 	bl	8000578 <__aeabi_f2d>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800c3f2:	f04f 0200 	mov.w	r2, #0
 800c3f6:	4b5c      	ldr	r3, [pc, #368]	; (800c568 <setDuttyCycleAfOpt+0x1cc>)
 800c3f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3fc:	f7f4 fa3e 	bl	800087c <__aeabi_ddiv>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	4610      	mov	r0, r2
 800c406:	4619      	mov	r1, r3
 800c408:	f04f 0200 	mov.w	r2, #0
 800c40c:	4b57      	ldr	r3, [pc, #348]	; (800c56c <setDuttyCycleAfOpt+0x1d0>)
 800c40e:	f7f3 ff53 	bl	80002b8 <__aeabi_dsub>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	4610      	mov	r0, r2
 800c418:	4619      	mov	r1, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681c      	ldr	r4, [r3, #0]
 800c41e:	f7f4 fbdb 	bl	8000bd8 <__aeabi_d2uiz>
 800c422:	4603      	mov	r3, r0
 800c424:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c426:	e096      	b.n	800c556 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c42e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c560 <setDuttyCycleAfOpt+0x1c4>
 800c432:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c436:	4b4b      	ldr	r3, [pc, #300]	; (800c564 <setDuttyCycleAfOpt+0x1c8>)
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c446:	ee17 0a90 	vmov	r0, s15
 800c44a:	f7f4 f895 	bl	8000578 <__aeabi_f2d>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800c456:	f04f 0200 	mov.w	r2, #0
 800c45a:	4b43      	ldr	r3, [pc, #268]	; (800c568 <setDuttyCycleAfOpt+0x1cc>)
 800c45c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c460:	f7f4 fa0c 	bl	800087c <__aeabi_ddiv>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4610      	mov	r0, r2
 800c46a:	4619      	mov	r1, r3
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	4b3e      	ldr	r3, [pc, #248]	; (800c56c <setDuttyCycleAfOpt+0x1d0>)
 800c472:	f7f3 ff21 	bl	80002b8 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4610      	mov	r0, r2
 800c47c:	4619      	mov	r1, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681c      	ldr	r4, [r3, #0]
 800c482:	f7f4 fba9 	bl	8000bd8 <__aeabi_d2uiz>
 800c486:	4603      	mov	r3, r0
 800c488:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c48a:	e064      	b.n	800c556 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c492:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c560 <setDuttyCycleAfOpt+0x1c4>
 800c496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c49a:	4b32      	ldr	r3, [pc, #200]	; (800c564 <setDuttyCycleAfOpt+0x1c8>)
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	ee07 3a90 	vmov	s15, r3
 800c4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4aa:	ee17 0a90 	vmov	r0, s15
 800c4ae:	f7f4 f863 	bl	8000578 <__aeabi_f2d>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800c4ba:	f04f 0200 	mov.w	r2, #0
 800c4be:	4b2a      	ldr	r3, [pc, #168]	; (800c568 <setDuttyCycleAfOpt+0x1cc>)
 800c4c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c4c4:	f7f4 f9da 	bl	800087c <__aeabi_ddiv>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	4b25      	ldr	r3, [pc, #148]	; (800c56c <setDuttyCycleAfOpt+0x1d0>)
 800c4d6:	f7f3 feef 	bl	80002b8 <__aeabi_dsub>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4610      	mov	r0, r2
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681c      	ldr	r4, [r3, #0]
 800c4e6:	f7f4 fb77 	bl	8000bd8 <__aeabi_d2uiz>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c4ee:	e032      	b.n	800c556 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c4f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c560 <setDuttyCycleAfOpt+0x1c4>
 800c4fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4fe:	4b19      	ldr	r3, [pc, #100]	; (800c564 <setDuttyCycleAfOpt+0x1c8>)
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	ee07 3a90 	vmov	s15, r3
 800c506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c50e:	ee17 0a90 	vmov	r0, s15
 800c512:	f7f4 f831 	bl	8000578 <__aeabi_f2d>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800c51e:	f04f 0200 	mov.w	r2, #0
 800c522:	4b11      	ldr	r3, [pc, #68]	; (800c568 <setDuttyCycleAfOpt+0x1cc>)
 800c524:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c528:	f7f4 f9a8 	bl	800087c <__aeabi_ddiv>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4610      	mov	r0, r2
 800c532:	4619      	mov	r1, r3
 800c534:	f04f 0200 	mov.w	r2, #0
 800c538:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <setDuttyCycleAfOpt+0x1d0>)
 800c53a:	f7f3 febd 	bl	80002b8 <__aeabi_dsub>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4610      	mov	r0, r2
 800c544:	4619      	mov	r1, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681c      	ldr	r4, [r3, #0]
 800c54a:	f7f4 fb45 	bl	8000bd8 <__aeabi_d2uiz>
 800c54e:	4603      	mov	r3, r0
 800c550:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c552:	e000      	b.n	800c556 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 800c554:	bf00      	nop
	}

	}// fin del switch-case


}
 800c556:	bf00      	nop
 800c558:	372c      	adds	r7, #44	; 0x2c
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd90      	pop	{r4, r7, pc}
 800c55e:	bf00      	nop
 800c560:	42c80000 	.word	0x42c80000
 800c564:	20014058 	.word	0x20014058
 800c568:	40590000 	.word	0x40590000
 800c56c:	3ff00000 	.word	0x3ff00000

0800c570 <updateDuttyCycleAfOpt>:
	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
    setDuttyCycle(ptrPwmHandler);
}


void updateDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler, float newDutty){
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	ed87 0a00 	vstr	s0, [r7]

	// Actualizamos el registro que manipula el dutty
	ptrPwmHandler->config.duttyCicle = newDutty;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	619a      	str	r2, [r3, #24]

	// Llamamos a la fucnión que cambia el dutty y cargamos el nuevo valor
	setDuttyCycleAfOpt(ptrPwmHandler);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ff0a 	bl	800c39c <setDuttyCycleAfOpt>

}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	7a1b      	ldrb	r3, [r3, #8]
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d82f      	bhi.n	800c600 <disableOutput+0x70>
 800c5a0:	a201      	add	r2, pc, #4	; (adr r2, 800c5a8 <disableOutput+0x18>)
 800c5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a6:	bf00      	nop
 800c5a8:	0800c5b9 	.word	0x0800c5b9
 800c5ac:	0800c5cb 	.word	0x0800c5cb
 800c5b0:	0800c5dd 	.word	0x0800c5dd
 800c5b4:	0800c5ef 	.word	0x0800c5ef
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6a1a      	ldr	r2, [r3, #32]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 0201 	bic.w	r2, r2, #1
 800c5c6:	621a      	str	r2, [r3, #32]

			break;
 800c5c8:	e01b      	b.n	800c602 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	6a1a      	ldr	r2, [r3, #32]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f022 0210 	bic.w	r2, r2, #16
 800c5d8:	621a      	str	r2, [r3, #32]

			break;
 800c5da:	e012      	b.n	800c602 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6a1a      	ldr	r2, [r3, #32]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5ea:	621a      	str	r2, [r3, #32]

			break;
 800c5ec:	e009      	b.n	800c602 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6a1a      	ldr	r2, [r3, #32]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5fc:	621a      	str	r2, [r3, #32]

			break;
 800c5fe:	e000      	b.n	800c602 <disableOutput+0x72>
		}

		default: {
			break;
 800c600:	bf00      	nop
		}
		}

	return RESET;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7a1b      	ldrb	r3, [r3, #8]
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d82f      	bhi.n	800c680 <PWMx_Toggle+0x70>
 800c620:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <PWMx_Toggle+0x18>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c639 	.word	0x0800c639
 800c62c:	0800c64b 	.word	0x0800c64b
 800c630:	0800c65d 	.word	0x0800c65d
 800c634:	0800c66f 	.word	0x0800c66f
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	6a1a      	ldr	r2, [r3, #32]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f082 0202 	eor.w	r2, r2, #2
 800c646:	621a      	str	r2, [r3, #32]

				break;
 800c648:	e01b      	b.n	800c682 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f082 0220 	eor.w	r2, r2, #32
 800c658:	621a      	str	r2, [r3, #32]

				break;
 800c65a:	e012      	b.n	800c682 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6a1a      	ldr	r2, [r3, #32]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800c66a:	621a      	str	r2, [r3, #32]

				break;
 800c66c:	e009      	b.n	800c682 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6a1a      	ldr	r2, [r3, #32]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c67c:	621a      	str	r2, [r3, #32]

				break;
 800c67e:	e000      	b.n	800c682 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800c680:	bf00      	nop
			}
			}


}
 800c682:	bf00      	nop
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop

0800c690 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 800c69a:	4b92      	ldr	r3, [pc, #584]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a91      	ldr	r2, [pc, #580]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c6a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6a4:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c6a6:	4b8f      	ldr	r3, [pc, #572]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c6a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ac:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800c6ae:	4b8e      	ldr	r3, [pc, #568]	; (800c8e8 <RCC_enableMaxFrequencies+0x258>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a8d      	ldr	r2, [pc, #564]	; (800c8e8 <RCC_enableMaxFrequencies+0x258>)
 800c6b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c6b8:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800c6ba:	4b8a      	ldr	r3, [pc, #552]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	4a89      	ldr	r2, [pc, #548]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c6c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c6c4:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	2b08      	cmp	r3, #8
 800c6ca:	f200 82fc 	bhi.w	800ccc6 <RCC_enableMaxFrequencies+0x636>
 800c6ce:	a201      	add	r2, pc, #4	; (adr r2, 800c6d4 <RCC_enableMaxFrequencies+0x44>)
 800c6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d4:	0800c6f9 	.word	0x0800c6f9
 800c6d8:	0800c79b 	.word	0x0800c79b
 800c6dc:	0800c83d 	.word	0x0800c83d
 800c6e0:	0800c8f1 	.word	0x0800c8f1
 800c6e4:	0800c993 	.word	0x0800c993
 800c6e8:	0800ca35 	.word	0x0800ca35
 800c6ec:	0800cae1 	.word	0x0800cae1
 800c6f0:	0800cb83 	.word	0x0800cb83
 800c6f4:	0800cc25 	.word	0x0800cc25
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c6f8:	4b7a      	ldr	r3, [pc, #488]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	4a79      	ldr	r2, [pc, #484]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c6fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c702:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c704:	4b77      	ldr	r3, [pc, #476]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	4a76      	ldr	r2, [pc, #472]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c70a:	f043 0310 	orr.w	r3, r3, #16
 800c70e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c710:	4b74      	ldr	r3, [pc, #464]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	4a73      	ldr	r2, [pc, #460]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c716:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c71a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c71e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c720:	4b70      	ldr	r3, [pc, #448]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	4a6f      	ldr	r2, [pc, #444]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c726:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c72a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c72c:	4b6d      	ldr	r3, [pc, #436]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	4a6c      	ldr	r2, [pc, #432]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c732:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c736:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c738:	4b6a      	ldr	r3, [pc, #424]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	4a69      	ldr	r2, [pc, #420]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c73e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c742:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c744:	4b67      	ldr	r3, [pc, #412]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	4a66      	ldr	r2, [pc, #408]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c74a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c74e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c750:	4b64      	ldr	r3, [pc, #400]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	4a63      	ldr	r2, [pc, #396]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c75a:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c75c:	4b61      	ldr	r3, [pc, #388]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	4a60      	ldr	r2, [pc, #384]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c766:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c768:	4b5e      	ldr	r3, [pc, #376]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a5d      	ldr	r2, [pc, #372]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c76e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c772:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c774:	e000      	b.n	800c778 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 800c776:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c778:	4b5a      	ldr	r3, [pc, #360]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c780:	2b00      	cmp	r3, #0
 800c782:	d0f8      	beq.n	800c776 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c784:	4b59      	ldr	r3, [pc, #356]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a58      	ldr	r2, [pc, #352]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c78a:	f023 030f 	bic.w	r3, r3, #15
 800c78e:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c790:	4b56      	ldr	r3, [pc, #344]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c792:	4a56      	ldr	r2, [pc, #344]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6013      	str	r3, [r2, #0]

			break;
 800c798:	e296      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c79a:	4b52      	ldr	r3, [pc, #328]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	4a51      	ldr	r2, [pc, #324]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7a4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c7a6:	4b4f      	ldr	r3, [pc, #316]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	4a4e      	ldr	r2, [pc, #312]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7ac:	f043 0310 	orr.w	r3, r3, #16
 800c7b0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c7b2:	4b4c      	ldr	r3, [pc, #304]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	4a4b      	ldr	r2, [pc, #300]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c7bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7c0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c7c2:	4b48      	ldr	r3, [pc, #288]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	4a47      	ldr	r2, [pc, #284]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7c8:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c7cc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c7ce:	4b45      	ldr	r3, [pc, #276]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	4a44      	ldr	r2, [pc, #272]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7d4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c7d8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800c7da:	4b42      	ldr	r3, [pc, #264]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	4a41      	ldr	r2, [pc, #260]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7e4:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c7e6:	4b3f      	ldr	r3, [pc, #252]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	4a3e      	ldr	r2, [pc, #248]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7f0:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c7f2:	4b3c      	ldr	r3, [pc, #240]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	4a3b      	ldr	r2, [pc, #236]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c7f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7fc:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c7fe:	4b39      	ldr	r3, [pc, #228]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	4a38      	ldr	r2, [pc, #224]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c808:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c80a:	4b36      	ldr	r3, [pc, #216]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a35      	ldr	r2, [pc, #212]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c814:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c816:	e000      	b.n	800c81a <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800c818:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c81a:	4b32      	ldr	r3, [pc, #200]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0f8      	beq.n	800c818 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c826:	4b31      	ldr	r3, [pc, #196]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a30      	ldr	r2, [pc, #192]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c82c:	f023 030f 	bic.w	r3, r3, #15
 800c830:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c832:	4b2e      	ldr	r3, [pc, #184]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c834:	4a2d      	ldr	r2, [pc, #180]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6013      	str	r3, [r2, #0]

			break;
 800c83a:	e245      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c83c:	4b29      	ldr	r3, [pc, #164]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4a28      	ldr	r2, [pc, #160]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c846:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c848:	4b26      	ldr	r3, [pc, #152]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a25      	ldr	r2, [pc, #148]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c84e:	f043 0310 	orr.w	r3, r3, #16
 800c852:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c854:	4b23      	ldr	r3, [pc, #140]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	4a22      	ldr	r2, [pc, #136]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c85a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c862:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 800c864:	4b1f      	ldr	r3, [pc, #124]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	4a1e      	ldr	r2, [pc, #120]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c86a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800c86e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c870:	4b1c      	ldr	r3, [pc, #112]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	4a1b      	ldr	r2, [pc, #108]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c876:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c87a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c87c:	4b19      	ldr	r3, [pc, #100]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	4a18      	ldr	r2, [pc, #96]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c886:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c888:	4b16      	ldr	r3, [pc, #88]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	4a15      	ldr	r2, [pc, #84]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c88e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c892:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c894:	4b13      	ldr	r3, [pc, #76]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	4a12      	ldr	r2, [pc, #72]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c89a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c89e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c8a0:	4b10      	ldr	r3, [pc, #64]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	4a0f      	ldr	r2, [pc, #60]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c8a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8aa:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c8ac:	4b0d      	ldr	r3, [pc, #52]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a0c      	ldr	r2, [pc, #48]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c8b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8b6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c8b8:	e000      	b.n	800c8bc <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800c8ba:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c8bc:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <RCC_enableMaxFrequencies+0x254>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0f8      	beq.n	800c8ba <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c8c8:	4b08      	ldr	r3, [pc, #32]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a07      	ldr	r2, [pc, #28]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c8ce:	f023 030f 	bic.w	r3, r3, #15
 800c8d2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c8d4:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a04      	ldr	r2, [pc, #16]	; (800c8ec <RCC_enableMaxFrequencies+0x25c>)
 800c8da:	f043 0301 	orr.w	r3, r3, #1
 800c8de:	6013      	str	r3, [r2, #0]


			break;
 800c8e0:	e1f2      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
 800c8e2:	bf00      	nop
 800c8e4:	40023800 	.word	0x40023800
 800c8e8:	40007000 	.word	0x40007000
 800c8ec:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c8f0:	4b79      	ldr	r3, [pc, #484]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	4a78      	ldr	r2, [pc, #480]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c8f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c8fa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c8fc:	4b76      	ldr	r3, [pc, #472]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	4a75      	ldr	r2, [pc, #468]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c902:	f043 0310 	orr.w	r3, r3, #16
 800c906:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c908:	4b73      	ldr	r3, [pc, #460]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	4a72      	ldr	r2, [pc, #456]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c90e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c916:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800c918:	4b6f      	ldr	r3, [pc, #444]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	4a6e      	ldr	r2, [pc, #440]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c91e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800c922:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c924:	4b6c      	ldr	r3, [pc, #432]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	4a6b      	ldr	r2, [pc, #428]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c92a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c92e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c930:	4b69      	ldr	r3, [pc, #420]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c932:	4a69      	ldr	r2, [pc, #420]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c938:	4b67      	ldr	r3, [pc, #412]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	4a66      	ldr	r2, [pc, #408]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c93e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c942:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c944:	4b64      	ldr	r3, [pc, #400]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	4a63      	ldr	r2, [pc, #396]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c94a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c94e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c950:	4b61      	ldr	r3, [pc, #388]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4a60      	ldr	r2, [pc, #384]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c95a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c95c:	4b5e      	ldr	r3, [pc, #376]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a5d      	ldr	r2, [pc, #372]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c966:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c968:	e000      	b.n	800c96c <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800c96a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c96c:	4b5a      	ldr	r3, [pc, #360]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d0f8      	beq.n	800c96a <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c978:	4b58      	ldr	r3, [pc, #352]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a57      	ldr	r2, [pc, #348]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800c97e:	f023 030f 	bic.w	r3, r3, #15
 800c982:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c984:	4b55      	ldr	r3, [pc, #340]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a54      	ldr	r2, [pc, #336]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800c98a:	f043 0301 	orr.w	r3, r3, #1
 800c98e:	6013      	str	r3, [r2, #0]

			break;
 800c990:	e19a      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c992:	4b51      	ldr	r3, [pc, #324]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	4a50      	ldr	r2, [pc, #320]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c998:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c99c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c99e:	4b4e      	ldr	r3, [pc, #312]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4a4d      	ldr	r2, [pc, #308]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9a4:	f043 0310 	orr.w	r3, r3, #16
 800c9a8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c9aa:	4b4b      	ldr	r3, [pc, #300]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	4a4a      	ldr	r2, [pc, #296]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9b0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c9b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9b8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c9ba:	4b47      	ldr	r3, [pc, #284]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	4a46      	ldr	r2, [pc, #280]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9c0:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c9c4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c9c6:	4b44      	ldr	r3, [pc, #272]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	4a43      	ldr	r2, [pc, #268]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c9d0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c9d2:	4b41      	ldr	r3, [pc, #260]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9d4:	4a40      	ldr	r2, [pc, #256]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c9da:	4b3f      	ldr	r3, [pc, #252]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	4a3e      	ldr	r2, [pc, #248]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9e4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c9e6:	4b3c      	ldr	r3, [pc, #240]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	4a3b      	ldr	r2, [pc, #236]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9f0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c9f2:	4b39      	ldr	r3, [pc, #228]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4a38      	ldr	r2, [pc, #224]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800c9f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c9fc:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c9fe:	4b36      	ldr	r3, [pc, #216]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a35      	ldr	r2, [pc, #212]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca08:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800ca0a:	e000      	b.n	800ca0e <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800ca0c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800ca0e:	4b32      	ldr	r3, [pc, #200]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0f8      	beq.n	800ca0c <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800ca1a:	4b30      	ldr	r3, [pc, #192]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a2f      	ldr	r2, [pc, #188]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800ca20:	f023 030f 	bic.w	r3, r3, #15
 800ca24:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800ca26:	4b2d      	ldr	r3, [pc, #180]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a2c      	ldr	r2, [pc, #176]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800ca2c:	f043 0301 	orr.w	r3, r3, #1
 800ca30:	6013      	str	r3, [r2, #0]

			break;
 800ca32:	e149      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800ca34:	4b28      	ldr	r3, [pc, #160]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	4a27      	ldr	r2, [pc, #156]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca3e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800ca40:	4b25      	ldr	r3, [pc, #148]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	4a24      	ldr	r2, [pc, #144]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca46:	f043 0310 	orr.w	r3, r3, #16
 800ca4a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800ca4c:	4b22      	ldr	r3, [pc, #136]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	4a21      	ldr	r2, [pc, #132]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ca56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca5a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 800ca5c:	4b1e      	ldr	r3, [pc, #120]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4a1d      	ldr	r2, [pc, #116]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca62:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800ca66:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800ca68:	4b1b      	ldr	r3, [pc, #108]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	4a1a      	ldr	r2, [pc, #104]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ca72:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800ca74:	4b18      	ldr	r3, [pc, #96]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca76:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800ca7c:	4b16      	ldr	r3, [pc, #88]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	4a15      	ldr	r2, [pc, #84]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca86:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800ca88:	4b13      	ldr	r3, [pc, #76]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	4a12      	ldr	r2, [pc, #72]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca92:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800ca94:	4b10      	ldr	r3, [pc, #64]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	4a0f      	ldr	r2, [pc, #60]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800ca9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca9e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800caa0:	4b0d      	ldr	r3, [pc, #52]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a0c      	ldr	r2, [pc, #48]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800caa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800caaa:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800caac:	e000      	b.n	800cab0 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800caae:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cab0:	4b09      	ldr	r3, [pc, #36]	; (800cad8 <RCC_enableMaxFrequencies+0x448>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0f8      	beq.n	800caae <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cabc:	4b07      	ldr	r3, [pc, #28]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a06      	ldr	r2, [pc, #24]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800cac2:	f023 030f 	bic.w	r3, r3, #15
 800cac6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a03      	ldr	r2, [pc, #12]	; (800cadc <RCC_enableMaxFrequencies+0x44c>)
 800cace:	f043 0302 	orr.w	r3, r3, #2
 800cad2:	6013      	str	r3, [r2, #0]

			break;
 800cad4:	e0f8      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
 800cad6:	bf00      	nop
 800cad8:	40023800 	.word	0x40023800
 800cadc:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cae0:	4b84      	ldr	r3, [pc, #528]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	4a83      	ldr	r2, [pc, #524]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800caea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800caec:	4b81      	ldr	r3, [pc, #516]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	4a80      	ldr	r2, [pc, #512]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800caf2:	f043 0310 	orr.w	r3, r3, #16
 800caf6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800caf8:	4b7e      	ldr	r3, [pc, #504]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	4a7d      	ldr	r2, [pc, #500]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cafe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cb02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb06:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 800cb08:	4b7a      	ldr	r3, [pc, #488]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	4a79      	ldr	r2, [pc, #484]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb0e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800cb12:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cb14:	4b77      	ldr	r3, [pc, #476]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4a76      	ldr	r2, [pc, #472]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cb1e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cb20:	4b74      	ldr	r3, [pc, #464]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb22:	4a74      	ldr	r2, [pc, #464]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cb28:	4b72      	ldr	r3, [pc, #456]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	4a71      	ldr	r2, [pc, #452]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb32:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cb34:	4b6f      	ldr	r3, [pc, #444]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	4a6e      	ldr	r2, [pc, #440]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb3e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cb40:	4b6c      	ldr	r3, [pc, #432]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	4a6b      	ldr	r2, [pc, #428]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cb4a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cb4c:	4b69      	ldr	r3, [pc, #420]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a68      	ldr	r2, [pc, #416]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb56:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cb58:	e000      	b.n	800cb5c <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 800cb5a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cb5c:	4b65      	ldr	r3, [pc, #404]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0f8      	beq.n	800cb5a <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cb68:	4b63      	ldr	r3, [pc, #396]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a62      	ldr	r2, [pc, #392]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cb6e:	f023 030f 	bic.w	r3, r3, #15
 800cb72:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cb74:	4b60      	ldr	r3, [pc, #384]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a5f      	ldr	r2, [pc, #380]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cb7a:	f043 0302 	orr.w	r3, r3, #2
 800cb7e:	6013      	str	r3, [r2, #0]

			break;
 800cb80:	e0a2      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cb82:	4b5c      	ldr	r3, [pc, #368]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	4a5b      	ldr	r2, [pc, #364]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb8c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800cb8e:	4b59      	ldr	r3, [pc, #356]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	4a58      	ldr	r2, [pc, #352]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb94:	f043 0310 	orr.w	r3, r3, #16
 800cb98:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cb9a:	4b56      	ldr	r3, [pc, #344]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	4a55      	ldr	r2, [pc, #340]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cba0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cba8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800cbaa:	4b52      	ldr	r3, [pc, #328]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	4a51      	ldr	r2, [pc, #324]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbb0:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800cbb4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cbb6:	4b4f      	ldr	r3, [pc, #316]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	4a4e      	ldr	r2, [pc, #312]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbbc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cbc0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cbc2:	4b4c      	ldr	r3, [pc, #304]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbc4:	4a4b      	ldr	r2, [pc, #300]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cbca:	4b4a      	ldr	r3, [pc, #296]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	4a49      	ldr	r2, [pc, #292]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbd4:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cbd6:	4b47      	ldr	r3, [pc, #284]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	4a46      	ldr	r2, [pc, #280]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbe0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cbe2:	4b44      	ldr	r3, [pc, #272]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	4a43      	ldr	r2, [pc, #268]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cbec:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cbee:	4b41      	ldr	r3, [pc, #260]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a40      	ldr	r2, [pc, #256]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cbf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cbf8:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cbfa:	e000      	b.n	800cbfe <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 800cbfc:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cbfe:	4b3d      	ldr	r3, [pc, #244]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d0f8      	beq.n	800cbfc <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cc0a:	4b3b      	ldr	r3, [pc, #236]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a3a      	ldr	r2, [pc, #232]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cc10:	f023 030f 	bic.w	r3, r3, #15
 800cc14:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cc16:	4b38      	ldr	r3, [pc, #224]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a37      	ldr	r2, [pc, #220]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800cc1c:	f043 0302 	orr.w	r3, r3, #2
 800cc20:	6013      	str	r3, [r2, #0]

			break;
 800cc22:	e051      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cc24:	4b33      	ldr	r3, [pc, #204]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4a32      	ldr	r2, [pc, #200]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc2e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800cc30:	4b30      	ldr	r3, [pc, #192]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4a2f      	ldr	r2, [pc, #188]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc36:	f043 0308 	orr.w	r3, r3, #8
 800cc3a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cc3c:	4b2d      	ldr	r3, [pc, #180]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	4a2c      	ldr	r2, [pc, #176]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cc46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc4a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800cc4c:	4b29      	ldr	r3, [pc, #164]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	4a28      	ldr	r2, [pc, #160]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc52:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800cc56:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cc58:	4b26      	ldr	r3, [pc, #152]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	4a25      	ldr	r2, [pc, #148]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cc62:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cc64:	4b23      	ldr	r3, [pc, #140]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc66:	4a23      	ldr	r2, [pc, #140]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cc6c:	4b21      	ldr	r3, [pc, #132]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	4a20      	ldr	r2, [pc, #128]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc76:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cc78:	4b1e      	ldr	r3, [pc, #120]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	4a1d      	ldr	r2, [pc, #116]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc82:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cc84:	4b1b      	ldr	r3, [pc, #108]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	4a1a      	ldr	r2, [pc, #104]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc8e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cc90:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a17      	ldr	r2, [pc, #92]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cc96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc9a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cc9c:	e000      	b.n	800cca0 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800cc9e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cca0:	4b14      	ldr	r3, [pc, #80]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0f8      	beq.n	800cc9e <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800ccac:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a11      	ldr	r2, [pc, #68]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800ccb2:	f023 030f 	bic.w	r3, r3, #15
 800ccb6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800ccb8:	4b0f      	ldr	r3, [pc, #60]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a0e      	ldr	r2, [pc, #56]	; (800ccf8 <RCC_enableMaxFrequencies+0x668>)
 800ccbe:	f043 0303 	orr.w	r3, r3, #3
 800ccc2:	6013      	str	r3, [r2, #0]

			break;
 800ccc4:	e000      	b.n	800ccc8 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800ccc6:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	4a09      	ldr	r2, [pc, #36]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800ccce:	f043 0302 	orr.w	r3, r3, #2
 800ccd2:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800ccd4:	e000      	b.n	800ccd8 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800ccd6:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800ccd8:	4b06      	ldr	r3, [pc, #24]	; (800ccf4 <RCC_enableMaxFrequencies+0x664>)
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	f003 0308 	and.w	r3, r3, #8
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d0f8      	beq.n	800ccd6 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	370c      	adds	r7, #12
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop
 800ccf4:	40023800 	.word	0x40023800
 800ccf8:	40023c00 	.word	0x40023c00

0800ccfc <__NVIC_EnableIRQ>:
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cd06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	db0b      	blt.n	800cd26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	f003 021f 	and.w	r2, r3, #31
 800cd14:	4907      	ldr	r1, [pc, #28]	; (800cd34 <__NVIC_EnableIRQ+0x38>)
 800cd16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd1a:	095b      	lsrs	r3, r3, #5
 800cd1c:	2001      	movs	r0, #1
 800cd1e:	fa00 f202 	lsl.w	r2, r0, r2
 800cd22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	e000e100 	.word	0xe000e100

0800cd38 <__NVIC_SetPriority>:
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	6039      	str	r1, [r7, #0]
 800cd42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cd44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	db0a      	blt.n	800cd62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	490c      	ldr	r1, [pc, #48]	; (800cd84 <__NVIC_SetPriority+0x4c>)
 800cd52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd56:	0112      	lsls	r2, r2, #4
 800cd58:	b2d2      	uxtb	r2, r2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cd60:	e00a      	b.n	800cd78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	4908      	ldr	r1, [pc, #32]	; (800cd88 <__NVIC_SetPriority+0x50>)
 800cd68:	79fb      	ldrb	r3, [r7, #7]
 800cd6a:	f003 030f 	and.w	r3, r3, #15
 800cd6e:	3b04      	subs	r3, #4
 800cd70:	0112      	lsls	r2, r2, #4
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	440b      	add	r3, r1
 800cd76:	761a      	strb	r2, [r3, #24]
}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	e000e100 	.word	0xe000e100
 800cd88:	e000ed00 	.word	0xe000ed00

0800cd8c <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800cd8c:	b590      	push	{r4, r7, lr}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd94:	b672      	cpsid	i
}
 800cd96:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a91      	ldr	r2, [pc, #580]	; (800cfe4 <USART_Config+0x258>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d106      	bne.n	800cdb0 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800cda2:	4b91      	ldr	r3, [pc, #580]	; (800cfe8 <USART_Config+0x25c>)
 800cda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda6:	4a90      	ldr	r2, [pc, #576]	; (800cfe8 <USART_Config+0x25c>)
 800cda8:	f043 0310 	orr.w	r3, r3, #16
 800cdac:	6453      	str	r3, [r2, #68]	; 0x44
 800cdae:	e018      	b.n	800cde2 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a8d      	ldr	r2, [pc, #564]	; (800cfec <USART_Config+0x260>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d106      	bne.n	800cdc8 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800cdba:	4b8b      	ldr	r3, [pc, #556]	; (800cfe8 <USART_Config+0x25c>)
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdbe:	4a8a      	ldr	r2, [pc, #552]	; (800cfe8 <USART_Config+0x25c>)
 800cdc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdc4:	6413      	str	r3, [r2, #64]	; 0x40
 800cdc6:	e00c      	b.n	800cde2 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a88      	ldr	r2, [pc, #544]	; (800cff0 <USART_Config+0x264>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d106      	bne.n	800cde0 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800cdd2:	4b85      	ldr	r3, [pc, #532]	; (800cfe8 <USART_Config+0x25c>)
 800cdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd6:	4a84      	ldr	r2, [pc, #528]	; (800cfe8 <USART_Config+0x25c>)
 800cdd8:	f043 0320 	orr.w	r3, r3, #32
 800cddc:	6453      	str	r3, [r2, #68]	; 0x44
 800cdde:	e000      	b.n	800cde2 <USART_Config+0x56>
	}
	else{
		__NOP();
 800cde0:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2200      	movs	r2, #0
 800cde8:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	7a5b      	ldrb	r3, [r3, #9]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d025      	beq.n	800ce46 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7a5b      	ldrb	r3, [r3, #9]
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d110      	bne.n	800ce24 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68da      	ldr	r2, [r3, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ce10:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68da      	ldr	r2, [r3, #12]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce20:	60da      	str	r2, [r3, #12]
 800ce22:	e018      	b.n	800ce56 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68da      	ldr	r2, [r3, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce32:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce42:	60da      	str	r2, [r3, #12]
 800ce44:	e007      	b.n	800ce56 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68da      	ldr	r2, [r3, #12]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce54:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7a1b      	ldrb	r3, [r3, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d108      	bne.n	800ce70 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ce6c:	60da      	str	r2, [r3, #12]
 800ce6e:	e007      	b.n	800ce80 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68da      	ldr	r2, [r3, #12]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce7e:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7a9b      	ldrb	r3, [r3, #10]
 800ce84:	2b03      	cmp	r3, #3
 800ce86:	d82f      	bhi.n	800cee8 <USART_Config+0x15c>
 800ce88:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <USART_Config+0x104>)
 800ce8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8e:	bf00      	nop
 800ce90:	0800cea1 	.word	0x0800cea1
 800ce94:	0800ceb3 	.word	0x0800ceb3
 800ce98:	0800cec5 	.word	0x0800cec5
 800ce9c:	0800ced7 	.word	0x0800ced7
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ceae:	611a      	str	r2, [r3, #16]
			break;
 800ceb0:	e023      	b.n	800cefa <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	691a      	ldr	r2, [r3, #16]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cec0:	611a      	str	r2, [r3, #16]
			break;
 800cec2:	e01a      	b.n	800cefa <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	691a      	ldr	r2, [r3, #16]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ced2:	611a      	str	r2, [r3, #16]
			break;
 800ced4:	e011      	b.n	800cefa <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	691a      	ldr	r2, [r3, #16]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800cee4:	611a      	str	r2, [r3, #16]
			break;
 800cee6:	e008      	b.n	800cefa <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	691a      	ldr	r2, [r3, #16]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800cef6:	611a      	str	r2, [r3, #16]
			break;
 800cef8:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68da      	ldr	r2, [r3, #12]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681c      	ldr	r4, [r3, #0]
 800cf02:	4611      	mov	r1, r2
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 f8d7 	bl	800d0b8 <brrCalculus>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	799b      	ldrb	r3, [r3, #6]
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d82e      	bhi.n	800cf74 <USART_Config+0x1e8>
 800cf16:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <USART_Config+0x190>)
 800cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf3f 	.word	0x0800cf3f
 800cf24:	0800cf51 	.word	0x0800cf51
 800cf28:	0800cf63 	.word	0x0800cf63
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68da      	ldr	r2, [r3, #12]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f042 0208 	orr.w	r2, r2, #8
 800cf3a:	60da      	str	r2, [r3, #12]
			break;
 800cf3c:	e023      	b.n	800cf86 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68da      	ldr	r2, [r3, #12]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f042 0204 	orr.w	r2, r2, #4
 800cf4c:	60da      	str	r2, [r3, #12]
			break;
 800cf4e:	e01a      	b.n	800cf86 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f042 020c 	orr.w	r2, r2, #12
 800cf5e:	60da      	str	r2, [r3, #12]
			break;
 800cf60:	e011      	b.n	800cf86 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68da      	ldr	r2, [r3, #12]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f022 020c 	bic.w	r2, r2, #12
 800cf70:	60da      	str	r2, [r3, #12]
			break;
 800cf72:	e008      	b.n	800cf86 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 020c 	bic.w	r2, r2, #12
 800cf82:	60da      	str	r2, [r3, #12]
			break;
 800cf84:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	799b      	ldrb	r3, [r3, #6]
 800cf8a:	2b03      	cmp	r3, #3
 800cf8c:	d008      	beq.n	800cfa0 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	e007      	b.n	800cfb0 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68da      	ldr	r2, [r3, #12]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfae:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	795b      	ldrb	r3, [r3, #5]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d139      	bne.n	800d02c <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68da      	ldr	r2, [r3, #12]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f042 0220 	orr.w	r2, r2, #32
 800cfc6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a05      	ldr	r2, [pc, #20]	; (800cfe4 <USART_Config+0x258>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d110      	bne.n	800cff4 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800cfd2:	2025      	movs	r0, #37	; 0x25
 800cfd4:	f7ff fe92 	bl	800ccfc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 800cfd8:	2101      	movs	r1, #1
 800cfda:	2025      	movs	r0, #37	; 0x25
 800cfdc:	f7ff feac 	bl	800cd38 <__NVIC_SetPriority>
 800cfe0:	e02c      	b.n	800d03c <USART_Config+0x2b0>
 800cfe2:	bf00      	nop
 800cfe4:	40011000 	.word	0x40011000
 800cfe8:	40023800 	.word	0x40023800
 800cfec:	40004400 	.word	0x40004400
 800cff0:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a2c      	ldr	r2, [pc, #176]	; (800d0ac <USART_Config+0x320>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d107      	bne.n	800d00e <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800cffe:	2026      	movs	r0, #38	; 0x26
 800d000:	f7ff fe7c 	bl	800ccfc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 800d004:	2101      	movs	r1, #1
 800d006:	2026      	movs	r0, #38	; 0x26
 800d008:	f7ff fe96 	bl	800cd38 <__NVIC_SetPriority>
 800d00c:	e016      	b.n	800d03c <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a27      	ldr	r2, [pc, #156]	; (800d0b0 <USART_Config+0x324>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d107      	bne.n	800d028 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800d018:	2047      	movs	r0, #71	; 0x47
 800d01a:	f7ff fe6f 	bl	800ccfc <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800d01e:	2101      	movs	r1, #1
 800d020:	2047      	movs	r0, #71	; 0x47
 800d022:	f7ff fe89 	bl	800cd38 <__NVIC_SetPriority>
 800d026:	e009      	b.n	800d03c <USART_Config+0x2b0>
		}
		else{
				__NOP();
 800d028:	bf00      	nop
 800d02a:	e007      	b.n	800d03c <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68da      	ldr	r2, [r3, #12]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0220 	bic.w	r2, r2, #32
 800d03a:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	791b      	ldrb	r3, [r3, #4]
 800d040:	2b01      	cmp	r3, #1
 800d042:	d124      	bne.n	800d08e <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68da      	ldr	r2, [r3, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d052:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a16      	ldr	r2, [pc, #88]	; (800d0b4 <USART_Config+0x328>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d103      	bne.n	800d066 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800d05e:	2025      	movs	r0, #37	; 0x25
 800d060:	f7ff fe4c 	bl	800ccfc <__NVIC_EnableIRQ>
 800d064:	e01b      	b.n	800d09e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a10      	ldr	r2, [pc, #64]	; (800d0ac <USART_Config+0x320>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d103      	bne.n	800d078 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800d070:	2026      	movs	r0, #38	; 0x26
 800d072:	f7ff fe43 	bl	800ccfc <__NVIC_EnableIRQ>
 800d076:	e012      	b.n	800d09e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a0c      	ldr	r2, [pc, #48]	; (800d0b0 <USART_Config+0x324>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d103      	bne.n	800d08a <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800d082:	2047      	movs	r0, #71	; 0x47
 800d084:	f7ff fe3a 	bl	800ccfc <__NVIC_EnableIRQ>
 800d088:	e009      	b.n	800d09e <USART_Config+0x312>
		}
		else{
				__NOP();
 800d08a:	bf00      	nop
 800d08c:	e007      	b.n	800d09e <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68da      	ldr	r2, [r3, #12]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d09c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800d09e:	b662      	cpsie	i
}
 800d0a0:	bf00      	nop
	}

	__enable_irq();
}
 800d0a2:	bf00      	nop
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd90      	pop	{r4, r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	40004400 	.word	0x40004400
 800d0b0:	40011400 	.word	0x40011400
 800d0b4:	40011000 	.word	0x40011000

0800d0b8 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 800d0b8:	b5b0      	push	{r4, r5, r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	79db      	ldrb	r3, [r3, #7]
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	f200 8217 	bhi.w	800d4fa <brrCalculus+0x442>
 800d0cc:	a201      	add	r2, pc, #4	; (adr r2, 800d0d4 <brrCalculus+0x1c>)
 800d0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d2:	bf00      	nop
 800d0d4:	0800d0e5 	.word	0x0800d0e5
 800d0d8:	0800d1df 	.word	0x0800d1df
 800d0dc:	0800d2f9 	.word	0x0800d2f9
 800d0e0:	0800d401 	.word	0x0800d401

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800d0e4:	4980      	ldr	r1, [pc, #512]	; (800d2e8 <brrCalculus+0x230>)
 800d0e6:	a37c      	add	r3, pc, #496	; (adr r3, 800d2d8 <brrCalculus+0x220>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fa:	ee17 0a90 	vmov	r0, s15
 800d0fe:	f7f3 fa3b 	bl	8000578 <__aeabi_f2d>
 800d102:	4b79      	ldr	r3, [pc, #484]	; (800d2e8 <brrCalculus+0x230>)
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	f7f3 fa8e 	bl	8000628 <__aeabi_dmul>
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	4975      	ldr	r1, [pc, #468]	; (800d2e8 <brrCalculus+0x230>)
 800d112:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d116:	4b74      	ldr	r3, [pc, #464]	; (800d2e8 <brrCalculus+0x230>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	4610      	mov	r0, r2
 800d11e:	4619      	mov	r1, r3
 800d120:	f7f3 fd32 	bl	8000b88 <__aeabi_d2iz>
 800d124:	4603      	mov	r3, r0
 800d126:	b29a      	uxth	r2, r3
 800d128:	4b70      	ldr	r3, [pc, #448]	; (800d2ec <brrCalculus+0x234>)
 800d12a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d12c:	4b6e      	ldr	r3, [pc, #440]	; (800d2e8 <brrCalculus+0x230>)
 800d12e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d132:	4b6d      	ldr	r3, [pc, #436]	; (800d2e8 <brrCalculus+0x230>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	4610      	mov	r0, r2
 800d13a:	4619      	mov	r1, r3
 800d13c:	f7f3 fd24 	bl	8000b88 <__aeabi_d2iz>
 800d140:	4603      	mov	r3, r0
 800d142:	4618      	mov	r0, r3
 800d144:	f7f3 fa06 	bl	8000554 <__aeabi_i2d>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4620      	mov	r0, r4
 800d14e:	4629      	mov	r1, r5
 800d150:	f7f3 f8b2 	bl	80002b8 <__aeabi_dsub>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4610      	mov	r0, r2
 800d15a:	4619      	mov	r1, r3
 800d15c:	f7f3 fd5c 	bl	8000c18 <__aeabi_d2f>
 800d160:	4603      	mov	r3, r0
 800d162:	4a63      	ldr	r2, [pc, #396]	; (800d2f0 <brrCalculus+0x238>)
 800d164:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d166:	4b62      	ldr	r3, [pc, #392]	; (800d2f0 <brrCalculus+0x238>)
 800d168:	edd3 7a00 	vldr	s15, [r3]
 800d16c:	2004      	movs	r0, #4
 800d16e:	eeb0 0a67 	vmov.f32	s0, s15
 800d172:	f000 fa6d 	bl	800d650 <roundToNDecimals>
 800d176:	eef0 7a40 	vmov.f32	s15, s0
 800d17a:	4b5d      	ldr	r3, [pc, #372]	; (800d2f0 <brrCalculus+0x238>)
 800d17c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d180:	4b5b      	ldr	r3, [pc, #364]	; (800d2f0 <brrCalculus+0x238>)
 800d182:	edd3 7a00 	vldr	s15, [r3]
 800d186:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d18a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d18e:	4b58      	ldr	r3, [pc, #352]	; (800d2f0 <brrCalculus+0x238>)
 800d190:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d194:	4b56      	ldr	r3, [pc, #344]	; (800d2f0 <brrCalculus+0x238>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f3 f9ed 	bl	8000578 <__aeabi_f2d>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	ec43 2b10 	vmov	d0, r2, r3
 800d1a6:	f003 fc97 	bl	8010ad8 <round>
 800d1aa:	ec53 2b10 	vmov	r2, r3, d0
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	f7f3 fd31 	bl	8000c18 <__aeabi_d2f>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	4a4d      	ldr	r2, [pc, #308]	; (800d2f0 <brrCalculus+0x238>)
 800d1ba:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d1bc:	4b4b      	ldr	r3, [pc, #300]	; (800d2ec <brrCalculus+0x234>)
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	4b4a      	ldr	r3, [pc, #296]	; (800d2f0 <brrCalculus+0x238>)
 800d1c6:	edd3 7a00 	vldr	s15, [r3]
 800d1ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ce:	ee17 3a90 	vmov	r3, s15
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	4b46      	ldr	r3, [pc, #280]	; (800d2f4 <brrCalculus+0x23c>)
 800d1da:	801a      	strh	r2, [r3, #0]


		break;
 800d1dc:	e18f      	b.n	800d4fe <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800d1de:	4942      	ldr	r1, [pc, #264]	; (800d2e8 <brrCalculus+0x230>)
 800d1e0:	a33f      	add	r3, pc, #252	; (adr r3, 800d2e0 <brrCalculus+0x228>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	ee07 3a90 	vmov	s15, r3
 800d1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f4:	ee17 0a90 	vmov	r0, s15
 800d1f8:	f7f3 f9be 	bl	8000578 <__aeabi_f2d>
 800d1fc:	4b3a      	ldr	r3, [pc, #232]	; (800d2e8 <brrCalculus+0x230>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f3 fa11 	bl	8000628 <__aeabi_dmul>
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4937      	ldr	r1, [pc, #220]	; (800d2e8 <brrCalculus+0x230>)
 800d20c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d210:	4b35      	ldr	r3, [pc, #212]	; (800d2e8 <brrCalculus+0x230>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	4610      	mov	r0, r2
 800d218:	4619      	mov	r1, r3
 800d21a:	f7f3 fcb5 	bl	8000b88 <__aeabi_d2iz>
 800d21e:	4603      	mov	r3, r0
 800d220:	b29a      	uxth	r2, r3
 800d222:	4b32      	ldr	r3, [pc, #200]	; (800d2ec <brrCalculus+0x234>)
 800d224:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d226:	4b30      	ldr	r3, [pc, #192]	; (800d2e8 <brrCalculus+0x230>)
 800d228:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d22c:	4b2e      	ldr	r3, [pc, #184]	; (800d2e8 <brrCalculus+0x230>)
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	4610      	mov	r0, r2
 800d234:	4619      	mov	r1, r3
 800d236:	f7f3 fca7 	bl	8000b88 <__aeabi_d2iz>
 800d23a:	4603      	mov	r3, r0
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7f3 f989 	bl	8000554 <__aeabi_i2d>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4620      	mov	r0, r4
 800d248:	4629      	mov	r1, r5
 800d24a:	f7f3 f835 	bl	80002b8 <__aeabi_dsub>
 800d24e:	4602      	mov	r2, r0
 800d250:	460b      	mov	r3, r1
 800d252:	4610      	mov	r0, r2
 800d254:	4619      	mov	r1, r3
 800d256:	f7f3 fcdf 	bl	8000c18 <__aeabi_d2f>
 800d25a:	4603      	mov	r3, r0
 800d25c:	4a24      	ldr	r2, [pc, #144]	; (800d2f0 <brrCalculus+0x238>)
 800d25e:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d260:	4b23      	ldr	r3, [pc, #140]	; (800d2f0 <brrCalculus+0x238>)
 800d262:	edd3 7a00 	vldr	s15, [r3]
 800d266:	2004      	movs	r0, #4
 800d268:	eeb0 0a67 	vmov.f32	s0, s15
 800d26c:	f000 f9f0 	bl	800d650 <roundToNDecimals>
 800d270:	eef0 7a40 	vmov.f32	s15, s0
 800d274:	4b1e      	ldr	r3, [pc, #120]	; (800d2f0 <brrCalculus+0x238>)
 800d276:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d27a:	4b1d      	ldr	r3, [pc, #116]	; (800d2f0 <brrCalculus+0x238>)
 800d27c:	edd3 7a00 	vldr	s15, [r3]
 800d280:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d284:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d288:	4b19      	ldr	r3, [pc, #100]	; (800d2f0 <brrCalculus+0x238>)
 800d28a:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d28e:	4b18      	ldr	r3, [pc, #96]	; (800d2f0 <brrCalculus+0x238>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4618      	mov	r0, r3
 800d294:	f7f3 f970 	bl	8000578 <__aeabi_f2d>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	ec43 2b10 	vmov	d0, r2, r3
 800d2a0:	f003 fc1a 	bl	8010ad8 <round>
 800d2a4:	ec53 2b10 	vmov	r2, r3, d0
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f7f3 fcb4 	bl	8000c18 <__aeabi_d2f>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	4a0f      	ldr	r2, [pc, #60]	; (800d2f0 <brrCalculus+0x238>)
 800d2b4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d2b6:	4b0d      	ldr	r3, [pc, #52]	; (800d2ec <brrCalculus+0x234>)
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	011b      	lsls	r3, r3, #4
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <brrCalculus+0x238>)
 800d2c0:	edd3 7a00 	vldr	s15, [r3]
 800d2c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c8:	ee17 3a90 	vmov	r3, s15
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	4313      	orrs	r3, r2
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	4b08      	ldr	r3, [pc, #32]	; (800d2f4 <brrCalculus+0x23c>)
 800d2d4:	801a      	strh	r2, [r3, #0]


		break;
 800d2d6:	e112      	b.n	800d4fe <brrCalculus+0x446>
 800d2d8:	b4e81b4f 	.word	0xb4e81b4f
 800d2dc:	3edb4e81 	.word	0x3edb4e81
 800d2e0:	b4e81b4f 	.word	0xb4e81b4f
 800d2e4:	3ecb4e81 	.word	0x3ecb4e81
 800d2e8:	20014068 	.word	0x20014068
 800d2ec:	2001405c 	.word	0x2001405c
 800d2f0:	20014060 	.word	0x20014060
 800d2f4:	2001405a 	.word	0x2001405a
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 800d2f8:	4989      	ldr	r1, [pc, #548]	; (800d520 <brrCalculus+0x468>)
 800d2fa:	a385      	add	r3, pc, #532	; (adr r3, 800d510 <brrCalculus+0x458>)
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30e:	ee17 0a90 	vmov	r0, s15
 800d312:	f7f3 f931 	bl	8000578 <__aeabi_f2d>
 800d316:	4b82      	ldr	r3, [pc, #520]	; (800d520 <brrCalculus+0x468>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	f7f3 f984 	bl	8000628 <__aeabi_dmul>
 800d320:	4602      	mov	r2, r0
 800d322:	460b      	mov	r3, r1
 800d324:	497e      	ldr	r1, [pc, #504]	; (800d520 <brrCalculus+0x468>)
 800d326:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d32a:	4b7d      	ldr	r3, [pc, #500]	; (800d520 <brrCalculus+0x468>)
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	4610      	mov	r0, r2
 800d332:	4619      	mov	r1, r3
 800d334:	f7f3 fc28 	bl	8000b88 <__aeabi_d2iz>
 800d338:	4603      	mov	r3, r0
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	4b79      	ldr	r3, [pc, #484]	; (800d524 <brrCalculus+0x46c>)
 800d33e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d340:	4b77      	ldr	r3, [pc, #476]	; (800d520 <brrCalculus+0x468>)
 800d342:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d346:	4b76      	ldr	r3, [pc, #472]	; (800d520 <brrCalculus+0x468>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	4610      	mov	r0, r2
 800d34e:	4619      	mov	r1, r3
 800d350:	f7f3 fc1a 	bl	8000b88 <__aeabi_d2iz>
 800d354:	4603      	mov	r3, r0
 800d356:	4618      	mov	r0, r3
 800d358:	f7f3 f8fc 	bl	8000554 <__aeabi_i2d>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	f7f2 ffa8 	bl	80002b8 <__aeabi_dsub>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4610      	mov	r0, r2
 800d36e:	4619      	mov	r1, r3
 800d370:	f7f3 fc52 	bl	8000c18 <__aeabi_d2f>
 800d374:	4603      	mov	r3, r0
 800d376:	4a6c      	ldr	r2, [pc, #432]	; (800d528 <brrCalculus+0x470>)
 800d378:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d37a:	4b6b      	ldr	r3, [pc, #428]	; (800d528 <brrCalculus+0x470>)
 800d37c:	edd3 7a00 	vldr	s15, [r3]
 800d380:	2004      	movs	r0, #4
 800d382:	eeb0 0a67 	vmov.f32	s0, s15
 800d386:	f000 f963 	bl	800d650 <roundToNDecimals>
 800d38a:	eef0 7a40 	vmov.f32	s15, s0
 800d38e:	4b66      	ldr	r3, [pc, #408]	; (800d528 <brrCalculus+0x470>)
 800d390:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d394:	4b64      	ldr	r3, [pc, #400]	; (800d528 <brrCalculus+0x470>)
 800d396:	edd3 7a00 	vldr	s15, [r3]
 800d39a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d39e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3a2:	4b61      	ldr	r3, [pc, #388]	; (800d528 <brrCalculus+0x470>)
 800d3a4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 800d3a8:	4b5f      	ldr	r3, [pc, #380]	; (800d528 <brrCalculus+0x470>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7f3 f8e3 	bl	8000578 <__aeabi_f2d>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	ec43 2b10 	vmov	d0, r2, r3
 800d3ba:	f003 fb8d 	bl	8010ad8 <round>
 800d3be:	ec51 0b10 	vmov	r0, r1, d0
 800d3c2:	f04f 0200 	mov.w	r2, #0
 800d3c6:	4b59      	ldr	r3, [pc, #356]	; (800d52c <brrCalculus+0x474>)
 800d3c8:	f7f2 ff78 	bl	80002bc <__adddf3>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	f7f3 fc20 	bl	8000c18 <__aeabi_d2f>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	4a53      	ldr	r2, [pc, #332]	; (800d528 <brrCalculus+0x470>)
 800d3dc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d3de:	4b51      	ldr	r3, [pc, #324]	; (800d524 <brrCalculus+0x46c>)
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	4b50      	ldr	r3, [pc, #320]	; (800d528 <brrCalculus+0x470>)
 800d3e8:	edd3 7a00 	vldr	s15, [r3]
 800d3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f0:	ee17 3a90 	vmov	r3, s15
 800d3f4:	b29b      	uxth	r3, r3
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	4b4d      	ldr	r3, [pc, #308]	; (800d530 <brrCalculus+0x478>)
 800d3fc:	801a      	strh	r2, [r3, #0]


		break;
 800d3fe:	e07e      	b.n	800d4fe <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 800d400:	4947      	ldr	r1, [pc, #284]	; (800d520 <brrCalculus+0x468>)
 800d402:	a345      	add	r3, pc, #276	; (adr r3, 800d518 <brrCalculus+0x460>)
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	ee07 3a90 	vmov	s15, r3
 800d412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d416:	ee17 0a90 	vmov	r0, s15
 800d41a:	f7f3 f8ad 	bl	8000578 <__aeabi_f2d>
 800d41e:	4b40      	ldr	r3, [pc, #256]	; (800d520 <brrCalculus+0x468>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f3 f900 	bl	8000628 <__aeabi_dmul>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	493c      	ldr	r1, [pc, #240]	; (800d520 <brrCalculus+0x468>)
 800d42e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d432:	4b3b      	ldr	r3, [pc, #236]	; (800d520 <brrCalculus+0x468>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	4610      	mov	r0, r2
 800d43a:	4619      	mov	r1, r3
 800d43c:	f7f3 fba4 	bl	8000b88 <__aeabi_d2iz>
 800d440:	4603      	mov	r3, r0
 800d442:	b29a      	uxth	r2, r3
 800d444:	4b37      	ldr	r3, [pc, #220]	; (800d524 <brrCalculus+0x46c>)
 800d446:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d448:	4b35      	ldr	r3, [pc, #212]	; (800d520 <brrCalculus+0x468>)
 800d44a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d44e:	4b34      	ldr	r3, [pc, #208]	; (800d520 <brrCalculus+0x468>)
 800d450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d454:	4610      	mov	r0, r2
 800d456:	4619      	mov	r1, r3
 800d458:	f7f3 fb96 	bl	8000b88 <__aeabi_d2iz>
 800d45c:	4603      	mov	r3, r0
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f3 f878 	bl	8000554 <__aeabi_i2d>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4620      	mov	r0, r4
 800d46a:	4629      	mov	r1, r5
 800d46c:	f7f2 ff24 	bl	80002b8 <__aeabi_dsub>
 800d470:	4602      	mov	r2, r0
 800d472:	460b      	mov	r3, r1
 800d474:	4610      	mov	r0, r2
 800d476:	4619      	mov	r1, r3
 800d478:	f7f3 fbce 	bl	8000c18 <__aeabi_d2f>
 800d47c:	4603      	mov	r3, r0
 800d47e:	4a2a      	ldr	r2, [pc, #168]	; (800d528 <brrCalculus+0x470>)
 800d480:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d482:	4b29      	ldr	r3, [pc, #164]	; (800d528 <brrCalculus+0x470>)
 800d484:	edd3 7a00 	vldr	s15, [r3]
 800d488:	2004      	movs	r0, #4
 800d48a:	eeb0 0a67 	vmov.f32	s0, s15
 800d48e:	f000 f8df 	bl	800d650 <roundToNDecimals>
 800d492:	eef0 7a40 	vmov.f32	s15, s0
 800d496:	4b24      	ldr	r3, [pc, #144]	; (800d528 <brrCalculus+0x470>)
 800d498:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d49c:	4b22      	ldr	r3, [pc, #136]	; (800d528 <brrCalculus+0x470>)
 800d49e:	edd3 7a00 	vldr	s15, [r3]
 800d4a2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d4a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4aa:	4b1f      	ldr	r3, [pc, #124]	; (800d528 <brrCalculus+0x470>)
 800d4ac:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d4b0:	4b1d      	ldr	r3, [pc, #116]	; (800d528 <brrCalculus+0x470>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f3 f85f 	bl	8000578 <__aeabi_f2d>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	ec43 2b10 	vmov	d0, r2, r3
 800d4c2:	f003 fb09 	bl	8010ad8 <round>
 800d4c6:	ec53 2b10 	vmov	r2, r3, d0
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	f7f3 fba3 	bl	8000c18 <__aeabi_d2f>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	4a14      	ldr	r2, [pc, #80]	; (800d528 <brrCalculus+0x470>)
 800d4d6:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d4d8:	4b12      	ldr	r3, [pc, #72]	; (800d524 <brrCalculus+0x46c>)
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	011b      	lsls	r3, r3, #4
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	4b11      	ldr	r3, [pc, #68]	; (800d528 <brrCalculus+0x470>)
 800d4e2:	edd3 7a00 	vldr	s15, [r3]
 800d4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ea:	ee17 3a90 	vmov	r3, s15
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	4b0e      	ldr	r3, [pc, #56]	; (800d530 <brrCalculus+0x478>)
 800d4f6:	801a      	strh	r2, [r3, #0]


		break;
 800d4f8:	e001      	b.n	800d4fe <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800d4fa:	bf00      	nop
		break;
 800d4fc:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800d4fe:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <brrCalculus+0x478>)
 800d500:	881b      	ldrh	r3, [r3, #0]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bdb0      	pop	{r4, r5, r7, pc}
 800d50a:	bf00      	nop
 800d50c:	f3af 8000 	nop.w
 800d510:	789abcdf 	.word	0x789abcdf
 800d514:	3ec23456 	.word	0x3ec23456
 800d518:	789abcdf 	.word	0x789abcdf
 800d51c:	3ea23456 	.word	0x3ea23456
 800d520:	20014068 	.word	0x20014068
 800d524:	2001405c 	.word	0x2001405c
 800d528:	20014060 	.word	0x20014060
 800d52c:	3ff00000 	.word	0x3ff00000
 800d530:	2001405a 	.word	0x2001405a

0800d534 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d53e:	e000      	b.n	800d542 <writeChar+0xe>
		__NOP();
 800d540:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d0f7      	beq.n	800d540 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	605a      	str	r2, [r3, #4]

}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800d56e:	e008      	b.n	800d582 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f7ff ffdc 	bl	800d534 <writeChar>
		msgToSend ++ ;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	3301      	adds	r3, #1
 800d580:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1f2      	bne.n	800d570 <writeMsg+0xc>
	}
}
 800d58a:	bf00      	nop
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <usart2Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
 800d594:	b480      	push	{r7}
 800d596:	af00      	add	r7, sp, #0
	__NOP();
 800d598:	bf00      	nop
}
 800d59a:	bf00      	nop
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <usart6Rx_Callback>:
__attribute__((weak))	void usart1Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart6Rx_Callback(void){
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0
	__NOP();
 800d5a8:	bf00      	nop
}
 800d5aa:	bf00      	nop
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800d5b4:	b480      	push	{r7}
 800d5b6:	af00      	add	r7, sp, #0
	return auxRxData;
 800d5b8:	4b03      	ldr	r3, [pc, #12]	; (800d5c8 <getRxData+0x14>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	20014070 	.word	0x20014070

0800d5cc <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800d5d0:	4b07      	ldr	r3, [pc, #28]	; (800d5f0 <USART2_IRQHandler+0x24>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0320 	and.w	r3, r3, #32
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d006      	beq.n	800d5ea <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800d5dc:	4b04      	ldr	r3, [pc, #16]	; (800d5f0 <USART2_IRQHandler+0x24>)
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	b2da      	uxtb	r2, r3
 800d5e2:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <USART2_IRQHandler+0x28>)
 800d5e4:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800d5e6:	f7ff ffd5 	bl	800d594 <usart2Rx_Callback>
	}

}
 800d5ea:	bf00      	nop
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	40004400 	.word	0x40004400
 800d5f4:	20014070 	.word	0x20014070

0800d5f8 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800d5fc:	4b07      	ldr	r3, [pc, #28]	; (800d61c <USART1_IRQHandler+0x24>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0320 	and.w	r3, r3, #32
 800d604:	2b00      	cmp	r3, #0
 800d606:	d006      	beq.n	800d616 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800d608:	4b04      	ldr	r3, [pc, #16]	; (800d61c <USART1_IRQHandler+0x24>)
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	4b04      	ldr	r3, [pc, #16]	; (800d620 <USART1_IRQHandler+0x28>)
 800d610:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800d612:	f7f5 fa51 	bl	8002ab8 <usart1Rx_Callback>
	}
}
 800d616:	bf00      	nop
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	40011000 	.word	0x40011000
 800d620:	20014070 	.word	0x20014070

0800d624 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800d628:	4b07      	ldr	r3, [pc, #28]	; (800d648 <USART6_IRQHandler+0x24>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0320 	and.w	r3, r3, #32
 800d630:	2b00      	cmp	r3, #0
 800d632:	d006      	beq.n	800d642 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800d634:	4b04      	ldr	r3, [pc, #16]	; (800d648 <USART6_IRQHandler+0x24>)
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	4b04      	ldr	r3, [pc, #16]	; (800d64c <USART6_IRQHandler+0x28>)
 800d63c:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800d63e:	f7ff ffb1 	bl	800d5a4 <usart6Rx_Callback>
	}

}
 800d642:	bf00      	nop
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	40011400 	.word	0x40011400
 800d64c:	20014070 	.word	0x20014070

0800d650 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	ed87 0a01 	vstr	s0, [r7, #4]
 800d65a:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800d65c:	6838      	ldr	r0, [r7, #0]
 800d65e:	f7f2 ff79 	bl	8000554 <__aeabi_i2d>
 800d662:	4602      	mov	r2, r0
 800d664:	460b      	mov	r3, r1
 800d666:	ec43 2b11 	vmov	d1, r2, r3
 800d66a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800d6e8 <roundToNDecimals+0x98>
 800d66e:	f003 fb09 	bl	8010c84 <pow>
 800d672:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f7f2 ff7e 	bl	8000578 <__aeabi_f2d>
 800d67c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d680:	f7f2 ffd2 	bl	8000628 <__aeabi_dmul>
 800d684:	4602      	mov	r2, r0
 800d686:	460b      	mov	r3, r1
 800d688:	4610      	mov	r0, r2
 800d68a:	4619      	mov	r1, r3
 800d68c:	f7f3 fac4 	bl	8000c18 <__aeabi_d2f>
 800d690:	4603      	mov	r3, r0
 800d692:	607b      	str	r3, [r7, #4]

    number = round(number);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7f2 ff6f 	bl	8000578 <__aeabi_f2d>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	ec43 2b10 	vmov	d0, r2, r3
 800d6a2:	f003 fa19 	bl	8010ad8 <round>
 800d6a6:	ec53 2b10 	vmov	r2, r3, d0
 800d6aa:	4610      	mov	r0, r2
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	f7f3 fab3 	bl	8000c18 <__aeabi_d2f>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	607b      	str	r3, [r7, #4]

    number /= factor;
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f2 ff5e 	bl	8000578 <__aeabi_f2d>
 800d6bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6c0:	f7f3 f8dc 	bl	800087c <__aeabi_ddiv>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	f7f3 faa4 	bl	8000c18 <__aeabi_d2f>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	607b      	str	r3, [r7, #4]

    return number;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	ee07 3a90 	vmov	s15, r3
}
 800d6da:	eeb0 0a67 	vmov.f32	s0, s15
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	f3af 8000 	nop.w
 800d6e8:	00000000 	.word	0x00000000
 800d6ec:	40240000 	.word	0x40240000

0800d6f0 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6fc:	b672      	cpsid	i
}
 800d6fe:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a12      	ldr	r2, [pc, #72]	; (800d750 <usart_Set_Priority+0x60>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d105      	bne.n	800d716 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800d70a:	78fb      	ldrb	r3, [r7, #3]
 800d70c:	4619      	mov	r1, r3
 800d70e:	2025      	movs	r0, #37	; 0x25
 800d710:	f7ff fb12 	bl	800cd38 <__NVIC_SetPriority>
 800d714:	e016      	b.n	800d744 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a0e      	ldr	r2, [pc, #56]	; (800d754 <usart_Set_Priority+0x64>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d105      	bne.n	800d72c <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	4619      	mov	r1, r3
 800d724:	2026      	movs	r0, #38	; 0x26
 800d726:	f7ff fb07 	bl	800cd38 <__NVIC_SetPriority>
 800d72a:	e00b      	b.n	800d744 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a09      	ldr	r2, [pc, #36]	; (800d758 <usart_Set_Priority+0x68>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d105      	bne.n	800d742 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800d736:	78fb      	ldrb	r3, [r7, #3]
 800d738:	4619      	mov	r1, r3
 800d73a:	2047      	movs	r0, #71	; 0x47
 800d73c:	f7ff fafc 	bl	800cd38 <__NVIC_SetPriority>
 800d740:	e000      	b.n	800d744 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800d742:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800d744:	b662      	cpsie	i
}
 800d746:	bf00      	nop



	__enable_irq();

}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	40011000 	.word	0x40011000
 800d754:	40004400 	.word	0x40004400
 800d758:	40011400 	.word	0x40011400

0800d75c <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a89      	ldr	r2, [pc, #548]	; (800d990 <i2c_config+0x234>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d106      	bne.n	800d77c <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800d76e:	4b89      	ldr	r3, [pc, #548]	; (800d994 <i2c_config+0x238>)
 800d770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d772:	4a88      	ldr	r2, [pc, #544]	; (800d994 <i2c_config+0x238>)
 800d774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d778:	6413      	str	r3, [r2, #64]	; 0x40
 800d77a:	e016      	b.n	800d7aa <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a85      	ldr	r2, [pc, #532]	; (800d998 <i2c_config+0x23c>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d106      	bne.n	800d794 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800d786:	4b83      	ldr	r3, [pc, #524]	; (800d994 <i2c_config+0x238>)
 800d788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78a:	4a82      	ldr	r2, [pc, #520]	; (800d994 <i2c_config+0x238>)
 800d78c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d790:	6413      	str	r3, [r2, #64]	; 0x40
 800d792:	e00a      	b.n	800d7aa <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a80      	ldr	r2, [pc, #512]	; (800d99c <i2c_config+0x240>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d105      	bne.n	800d7aa <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800d79e:	4b7d      	ldr	r3, [pc, #500]	; (800d994 <i2c_config+0x238>)
 800d7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a2:	4a7c      	ldr	r2, [pc, #496]	; (800d994 <i2c_config+0x238>)
 800d7a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7a8:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f022 0201 	bic.w	r2, r2, #1
 800d7b8:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d7ba:	e000      	b.n	800d7be <i2c_config+0x62>
		__NOP();
 800d7bc:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	f003 0302 	and.w	r3, r3, #2
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1f7      	bne.n	800d7bc <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d7da:	601a      	str	r2, [r3, #0]

	__NOP();
 800d7dc:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7ec:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	685a      	ldr	r2, [r3, #4]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800d7fc:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	79db      	ldrb	r3, [r3, #7]
 800d802:	2b10      	cmp	r3, #16
 800d804:	d108      	bne.n	800d818 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f042 0210 	orr.w	r2, r2, #16
 800d814:	605a      	str	r2, [r3, #4]
 800d816:	e018      	b.n	800d84a <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	79db      	ldrb	r3, [r3, #7]
 800d81c:	2b19      	cmp	r3, #25
 800d81e:	d108      	bne.n	800d832 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f042 0219 	orr.w	r2, r2, #25
 800d82e:	605a      	str	r2, [r3, #4]
 800d830:	e00b      	b.n	800d84a <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	79db      	ldrb	r3, [r3, #7]
 800d836:	2b32      	cmp	r3, #50	; 0x32
 800d838:	d107      	bne.n	800d84a <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800d848:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2200      	movs	r2, #0
 800d850:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2200      	movs	r2, #0
 800d858:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	795b      	ldrb	r3, [r3, #5]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d15c      	bne.n	800d91c <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	69da      	ldr	r2, [r3, #28]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d870:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	79db      	ldrb	r3, [r3, #7]
 800d876:	2b32      	cmp	r3, #50	; 0x32
 800d878:	d03f      	beq.n	800d8fa <i2c_config+0x19e>
 800d87a:	2b32      	cmp	r3, #50	; 0x32
 800d87c:	f300 80b2 	bgt.w	800d9e4 <i2c_config+0x288>
 800d880:	2b19      	cmp	r3, #25
 800d882:	d029      	beq.n	800d8d8 <i2c_config+0x17c>
 800d884:	2b19      	cmp	r3, #25
 800d886:	f300 80ad 	bgt.w	800d9e4 <i2c_config+0x288>
 800d88a:	2b04      	cmp	r3, #4
 800d88c:	d002      	beq.n	800d894 <i2c_config+0x138>
 800d88e:	2b10      	cmp	r3, #16
 800d890:	d011      	beq.n	800d8b6 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800d892:	e0a7      	b.n	800d9e4 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	69da      	ldr	r2, [r3, #28]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f042 0214 	orr.w	r2, r2, #20
 800d8a2:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6a1a      	ldr	r2, [r3, #32]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0205 	orr.w	r2, r2, #5
 800d8b2:	621a      	str	r2, [r3, #32]
				break;
 800d8b4:	e099      	b.n	800d9ea <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	69da      	ldr	r2, [r3, #28]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d8c4:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6a1a      	ldr	r2, [r3, #32]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0211 	orr.w	r2, r2, #17
 800d8d4:	621a      	str	r2, [r3, #32]
				break;
 800d8d6:	e088      	b.n	800d9ea <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	69da      	ldr	r2, [r3, #28]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800d8e6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6a1a      	ldr	r2, [r3, #32]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f042 0215 	orr.w	r2, r2, #21
 800d8f6:	621a      	str	r2, [r3, #32]
				break;
 800d8f8:	e077      	b.n	800d9ea <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	69da      	ldr	r2, [r3, #28]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800d908:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6a1a      	ldr	r2, [r3, #32]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800d918:	621a      	str	r2, [r3, #32]
				break;
 800d91a:	e066      	b.n	800d9ea <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	69da      	ldr	r2, [r3, #28]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d92a:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	79db      	ldrb	r3, [r3, #7]
 800d930:	2b32      	cmp	r3, #50	; 0x32
 800d932:	d046      	beq.n	800d9c2 <i2c_config+0x266>
 800d934:	2b32      	cmp	r3, #50	; 0x32
 800d936:	dc57      	bgt.n	800d9e8 <i2c_config+0x28c>
 800d938:	2b19      	cmp	r3, #25
 800d93a:	d031      	beq.n	800d9a0 <i2c_config+0x244>
 800d93c:	2b19      	cmp	r3, #25
 800d93e:	dc53      	bgt.n	800d9e8 <i2c_config+0x28c>
 800d940:	2b04      	cmp	r3, #4
 800d942:	d002      	beq.n	800d94a <i2c_config+0x1ee>
 800d944:	2b10      	cmp	r3, #16
 800d946:	d011      	beq.n	800d96c <i2c_config+0x210>


				break;
			}default:{

				break;
 800d948:	e04e      	b.n	800d9e8 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	69da      	ldr	r2, [r3, #28]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f042 0203 	orr.w	r2, r2, #3
 800d958:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6a1a      	ldr	r2, [r3, #32]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f042 0202 	orr.w	r2, r2, #2
 800d968:	621a      	str	r2, [r3, #32]
				break;
 800d96a:	e03e      	b.n	800d9ea <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	69da      	ldr	r2, [r3, #28]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f042 020d 	orr.w	r2, r2, #13
 800d97a:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6a1a      	ldr	r2, [r3, #32]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f042 0206 	orr.w	r2, r2, #6
 800d98a:	621a      	str	r2, [r3, #32]
				break;
 800d98c:	e02d      	b.n	800d9ea <i2c_config+0x28e>
 800d98e:	bf00      	nop
 800d990:	40005400 	.word	0x40005400
 800d994:	40023800 	.word	0x40023800
 800d998:	40005800 	.word	0x40005800
 800d99c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	69da      	ldr	r2, [r3, #28]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f042 0215 	orr.w	r2, r2, #21
 800d9ae:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6a1a      	ldr	r2, [r3, #32]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f042 0208 	orr.w	r2, r2, #8
 800d9be:	621a      	str	r2, [r3, #32]
				break;
 800d9c0:	e013      	b.n	800d9ea <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69da      	ldr	r2, [r3, #28]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800d9d0:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6a1a      	ldr	r2, [r3, #32]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f042 0210 	orr.w	r2, r2, #16
 800d9e0:	621a      	str	r2, [r3, #32]
				break;
 800d9e2:	e002      	b.n	800d9ea <i2c_config+0x28e>
				break;
 800d9e4:	bf00      	nop
 800d9e6:	e002      	b.n	800d9ee <i2c_config+0x292>
				break;
 800d9e8:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d9ea:	e000      	b.n	800d9ee <i2c_config+0x292>
		__NOP();
 800d9ec:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f7      	bne.n	800d9ec <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f042 0201 	orr.w	r2, r2, #1
 800da0a:	601a      	str	r2, [r3, #0]


}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da2e:	601a      	str	r2, [r3, #0]
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	7a1b      	ldrb	r3, [r3, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d009      	beq.n	800da60 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da5a:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800da5c:	e000      	b.n	800da60 <i2c_startTransaction+0x24>
		__NOP();
 800da5e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	f003 0302 	and.w	r3, r3, #2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1f7      	bne.n	800da5e <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da7c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da7e:	e000      	b.n	800da82 <i2c_startTransaction+0x46>
		__NOP();
 800da80:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	695b      	ldr	r3, [r3, #20]
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d0f7      	beq.n	800da80 <i2c_startTransaction+0x44>
	}
}
 800da90:	bf00      	nop
 800da92:	bf00      	nop
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800da9e:	b480      	push	{r7}
 800daa0:	b083      	sub	sp, #12
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	7a1b      	ldrb	r3, [r3, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d007      	beq.n	800dabe <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dabc:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dacc:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800dace:	e000      	b.n	800dad2 <i2c_reStartTransaction+0x34>
		__NOP();
 800dad0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	f003 0301 	and.w	r3, r3, #1
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0f7      	beq.n	800dad0 <i2c_reStartTransaction+0x32>
	}
}
 800dae0:	bf00      	nop
 800dae2:	bf00      	nop
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db04:	601a      	str	r2, [r3, #0]
}
 800db06:	bf00      	nop
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800db12:	b480      	push	{r7}
 800db14:	b085      	sub	sp, #20
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	460b      	mov	r3, r1
 800db1c:	70fb      	strb	r3, [r7, #3]
 800db1e:	4613      	mov	r3, r2
 800db20:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800db26:	78fb      	ldrb	r3, [r7, #3]
 800db28:	005a      	lsls	r2, r3, #1
 800db2a:	78bb      	ldrb	r3, [r7, #2]
 800db2c:	431a      	orrs	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800db34:	e000      	b.n	800db38 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800db36:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	695b      	ldr	r3, [r3, #20]
 800db3e:	f003 0302 	and.w	r3, r3, #2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0f7      	beq.n	800db36 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	73fb      	strb	r3, [r7, #15]

}
 800db56:	bf00      	nop
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	78fa      	ldrb	r2, [r7, #3]
 800db74:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800db76:	e000      	b.n	800db7a <i2c_sendMemoryAddress+0x18>
		__NOP();
 800db78:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db84:	2b00      	cmp	r3, #0
 800db86:	d0f7      	beq.n	800db78 <i2c_sendMemoryAddress+0x16>
	}
}
 800db88:	bf00      	nop
 800db8a:	bf00      	nop
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800db96:	b480      	push	{r7}
 800db98:	b083      	sub	sp, #12
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	78fa      	ldrb	r2, [r7, #3]
 800dba8:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800dbaa:	e000      	b.n	800dbae <i2c_sendDataByte+0x18>
		__NOP();
 800dbac:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	f003 0304 	and.w	r3, r3, #4
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d0f7      	beq.n	800dbac <i2c_sendDataByte+0x16>
	}
}
 800dbbc:	bf00      	nop
 800dbbe:	bf00      	nop
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800dbca:	b480      	push	{r7}
 800dbcc:	b083      	sub	sp, #12
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800dbd2:	e000      	b.n	800dbd6 <i2c_readDataByte+0xc>
		__NOP();
 800dbd4:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	695b      	ldr	r3, [r3, #20]
 800dbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d0f7      	beq.n	800dbd4 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	799b      	ldrb	r3, [r3, #6]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <__errno>:
 800dc00:	4b01      	ldr	r3, [pc, #4]	; (800dc08 <__errno+0x8>)
 800dc02:	6818      	ldr	r0, [r3, #0]
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	20000040 	.word	0x20000040

0800dc0c <__libc_init_array>:
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	4d0d      	ldr	r5, [pc, #52]	; (800dc44 <__libc_init_array+0x38>)
 800dc10:	4c0d      	ldr	r4, [pc, #52]	; (800dc48 <__libc_init_array+0x3c>)
 800dc12:	1b64      	subs	r4, r4, r5
 800dc14:	10a4      	asrs	r4, r4, #2
 800dc16:	2600      	movs	r6, #0
 800dc18:	42a6      	cmp	r6, r4
 800dc1a:	d109      	bne.n	800dc30 <__libc_init_array+0x24>
 800dc1c:	4d0b      	ldr	r5, [pc, #44]	; (800dc4c <__libc_init_array+0x40>)
 800dc1e:	4c0c      	ldr	r4, [pc, #48]	; (800dc50 <__libc_init_array+0x44>)
 800dc20:	f005 fbc2 	bl	80133a8 <_init>
 800dc24:	1b64      	subs	r4, r4, r5
 800dc26:	10a4      	asrs	r4, r4, #2
 800dc28:	2600      	movs	r6, #0
 800dc2a:	42a6      	cmp	r6, r4
 800dc2c:	d105      	bne.n	800dc3a <__libc_init_array+0x2e>
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc34:	4798      	blx	r3
 800dc36:	3601      	adds	r6, #1
 800dc38:	e7ee      	b.n	800dc18 <__libc_init_array+0xc>
 800dc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc3e:	4798      	blx	r3
 800dc40:	3601      	adds	r6, #1
 800dc42:	e7f2      	b.n	800dc2a <__libc_init_array+0x1e>
 800dc44:	080140d8 	.word	0x080140d8
 800dc48:	080140d8 	.word	0x080140d8
 800dc4c:	080140d8 	.word	0x080140d8
 800dc50:	080140dc 	.word	0x080140dc

0800dc54 <malloc>:
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <malloc+0xc>)
 800dc56:	4601      	mov	r1, r0
 800dc58:	6818      	ldr	r0, [r3, #0]
 800dc5a:	f000 b885 	b.w	800dd68 <_malloc_r>
 800dc5e:	bf00      	nop
 800dc60:	20000040 	.word	0x20000040

0800dc64 <memcpy>:
 800dc64:	440a      	add	r2, r1
 800dc66:	4291      	cmp	r1, r2
 800dc68:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc6c:	d100      	bne.n	800dc70 <memcpy+0xc>
 800dc6e:	4770      	bx	lr
 800dc70:	b510      	push	{r4, lr}
 800dc72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc7a:	4291      	cmp	r1, r2
 800dc7c:	d1f9      	bne.n	800dc72 <memcpy+0xe>
 800dc7e:	bd10      	pop	{r4, pc}

0800dc80 <memset>:
 800dc80:	4402      	add	r2, r0
 800dc82:	4603      	mov	r3, r0
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d100      	bne.n	800dc8a <memset+0xa>
 800dc88:	4770      	bx	lr
 800dc8a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc8e:	e7f9      	b.n	800dc84 <memset+0x4>

0800dc90 <_free_r>:
 800dc90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc92:	2900      	cmp	r1, #0
 800dc94:	d044      	beq.n	800dd20 <_free_r+0x90>
 800dc96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc9a:	9001      	str	r0, [sp, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f1a1 0404 	sub.w	r4, r1, #4
 800dca2:	bfb8      	it	lt
 800dca4:	18e4      	addlt	r4, r4, r3
 800dca6:	f001 fbed 	bl	800f484 <__malloc_lock>
 800dcaa:	4a1e      	ldr	r2, [pc, #120]	; (800dd24 <_free_r+0x94>)
 800dcac:	9801      	ldr	r0, [sp, #4]
 800dcae:	6813      	ldr	r3, [r2, #0]
 800dcb0:	b933      	cbnz	r3, 800dcc0 <_free_r+0x30>
 800dcb2:	6063      	str	r3, [r4, #4]
 800dcb4:	6014      	str	r4, [r2, #0]
 800dcb6:	b003      	add	sp, #12
 800dcb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcbc:	f001 bbe8 	b.w	800f490 <__malloc_unlock>
 800dcc0:	42a3      	cmp	r3, r4
 800dcc2:	d908      	bls.n	800dcd6 <_free_r+0x46>
 800dcc4:	6825      	ldr	r5, [r4, #0]
 800dcc6:	1961      	adds	r1, r4, r5
 800dcc8:	428b      	cmp	r3, r1
 800dcca:	bf01      	itttt	eq
 800dccc:	6819      	ldreq	r1, [r3, #0]
 800dcce:	685b      	ldreq	r3, [r3, #4]
 800dcd0:	1949      	addeq	r1, r1, r5
 800dcd2:	6021      	streq	r1, [r4, #0]
 800dcd4:	e7ed      	b.n	800dcb2 <_free_r+0x22>
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	b10b      	cbz	r3, 800dce0 <_free_r+0x50>
 800dcdc:	42a3      	cmp	r3, r4
 800dcde:	d9fa      	bls.n	800dcd6 <_free_r+0x46>
 800dce0:	6811      	ldr	r1, [r2, #0]
 800dce2:	1855      	adds	r5, r2, r1
 800dce4:	42a5      	cmp	r5, r4
 800dce6:	d10b      	bne.n	800dd00 <_free_r+0x70>
 800dce8:	6824      	ldr	r4, [r4, #0]
 800dcea:	4421      	add	r1, r4
 800dcec:	1854      	adds	r4, r2, r1
 800dcee:	42a3      	cmp	r3, r4
 800dcf0:	6011      	str	r1, [r2, #0]
 800dcf2:	d1e0      	bne.n	800dcb6 <_free_r+0x26>
 800dcf4:	681c      	ldr	r4, [r3, #0]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	6053      	str	r3, [r2, #4]
 800dcfa:	4421      	add	r1, r4
 800dcfc:	6011      	str	r1, [r2, #0]
 800dcfe:	e7da      	b.n	800dcb6 <_free_r+0x26>
 800dd00:	d902      	bls.n	800dd08 <_free_r+0x78>
 800dd02:	230c      	movs	r3, #12
 800dd04:	6003      	str	r3, [r0, #0]
 800dd06:	e7d6      	b.n	800dcb6 <_free_r+0x26>
 800dd08:	6825      	ldr	r5, [r4, #0]
 800dd0a:	1961      	adds	r1, r4, r5
 800dd0c:	428b      	cmp	r3, r1
 800dd0e:	bf04      	itt	eq
 800dd10:	6819      	ldreq	r1, [r3, #0]
 800dd12:	685b      	ldreq	r3, [r3, #4]
 800dd14:	6063      	str	r3, [r4, #4]
 800dd16:	bf04      	itt	eq
 800dd18:	1949      	addeq	r1, r1, r5
 800dd1a:	6021      	streq	r1, [r4, #0]
 800dd1c:	6054      	str	r4, [r2, #4]
 800dd1e:	e7ca      	b.n	800dcb6 <_free_r+0x26>
 800dd20:	b003      	add	sp, #12
 800dd22:	bd30      	pop	{r4, r5, pc}
 800dd24:	20014074 	.word	0x20014074

0800dd28 <sbrk_aligned>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4e0e      	ldr	r6, [pc, #56]	; (800dd64 <sbrk_aligned+0x3c>)
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	6831      	ldr	r1, [r6, #0]
 800dd30:	4605      	mov	r5, r0
 800dd32:	b911      	cbnz	r1, 800dd3a <sbrk_aligned+0x12>
 800dd34:	f000 fcf6 	bl	800e724 <_sbrk_r>
 800dd38:	6030      	str	r0, [r6, #0]
 800dd3a:	4621      	mov	r1, r4
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f000 fcf1 	bl	800e724 <_sbrk_r>
 800dd42:	1c43      	adds	r3, r0, #1
 800dd44:	d00a      	beq.n	800dd5c <sbrk_aligned+0x34>
 800dd46:	1cc4      	adds	r4, r0, #3
 800dd48:	f024 0403 	bic.w	r4, r4, #3
 800dd4c:	42a0      	cmp	r0, r4
 800dd4e:	d007      	beq.n	800dd60 <sbrk_aligned+0x38>
 800dd50:	1a21      	subs	r1, r4, r0
 800dd52:	4628      	mov	r0, r5
 800dd54:	f000 fce6 	bl	800e724 <_sbrk_r>
 800dd58:	3001      	adds	r0, #1
 800dd5a:	d101      	bne.n	800dd60 <sbrk_aligned+0x38>
 800dd5c:	f04f 34ff 	mov.w	r4, #4294967295
 800dd60:	4620      	mov	r0, r4
 800dd62:	bd70      	pop	{r4, r5, r6, pc}
 800dd64:	20014078 	.word	0x20014078

0800dd68 <_malloc_r>:
 800dd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6c:	1ccd      	adds	r5, r1, #3
 800dd6e:	f025 0503 	bic.w	r5, r5, #3
 800dd72:	3508      	adds	r5, #8
 800dd74:	2d0c      	cmp	r5, #12
 800dd76:	bf38      	it	cc
 800dd78:	250c      	movcc	r5, #12
 800dd7a:	2d00      	cmp	r5, #0
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	db01      	blt.n	800dd84 <_malloc_r+0x1c>
 800dd80:	42a9      	cmp	r1, r5
 800dd82:	d905      	bls.n	800dd90 <_malloc_r+0x28>
 800dd84:	230c      	movs	r3, #12
 800dd86:	603b      	str	r3, [r7, #0]
 800dd88:	2600      	movs	r6, #0
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd90:	4e2e      	ldr	r6, [pc, #184]	; (800de4c <_malloc_r+0xe4>)
 800dd92:	f001 fb77 	bl	800f484 <__malloc_lock>
 800dd96:	6833      	ldr	r3, [r6, #0]
 800dd98:	461c      	mov	r4, r3
 800dd9a:	bb34      	cbnz	r4, 800ddea <_malloc_r+0x82>
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	4638      	mov	r0, r7
 800dda0:	f7ff ffc2 	bl	800dd28 <sbrk_aligned>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	4604      	mov	r4, r0
 800dda8:	d14d      	bne.n	800de46 <_malloc_r+0xde>
 800ddaa:	6834      	ldr	r4, [r6, #0]
 800ddac:	4626      	mov	r6, r4
 800ddae:	2e00      	cmp	r6, #0
 800ddb0:	d140      	bne.n	800de34 <_malloc_r+0xcc>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	eb04 0803 	add.w	r8, r4, r3
 800ddbc:	f000 fcb2 	bl	800e724 <_sbrk_r>
 800ddc0:	4580      	cmp	r8, r0
 800ddc2:	d13a      	bne.n	800de3a <_malloc_r+0xd2>
 800ddc4:	6821      	ldr	r1, [r4, #0]
 800ddc6:	3503      	adds	r5, #3
 800ddc8:	1a6d      	subs	r5, r5, r1
 800ddca:	f025 0503 	bic.w	r5, r5, #3
 800ddce:	3508      	adds	r5, #8
 800ddd0:	2d0c      	cmp	r5, #12
 800ddd2:	bf38      	it	cc
 800ddd4:	250c      	movcc	r5, #12
 800ddd6:	4629      	mov	r1, r5
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7ff ffa5 	bl	800dd28 <sbrk_aligned>
 800ddde:	3001      	adds	r0, #1
 800dde0:	d02b      	beq.n	800de3a <_malloc_r+0xd2>
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	442b      	add	r3, r5
 800dde6:	6023      	str	r3, [r4, #0]
 800dde8:	e00e      	b.n	800de08 <_malloc_r+0xa0>
 800ddea:	6822      	ldr	r2, [r4, #0]
 800ddec:	1b52      	subs	r2, r2, r5
 800ddee:	d41e      	bmi.n	800de2e <_malloc_r+0xc6>
 800ddf0:	2a0b      	cmp	r2, #11
 800ddf2:	d916      	bls.n	800de22 <_malloc_r+0xba>
 800ddf4:	1961      	adds	r1, r4, r5
 800ddf6:	42a3      	cmp	r3, r4
 800ddf8:	6025      	str	r5, [r4, #0]
 800ddfa:	bf18      	it	ne
 800ddfc:	6059      	strne	r1, [r3, #4]
 800ddfe:	6863      	ldr	r3, [r4, #4]
 800de00:	bf08      	it	eq
 800de02:	6031      	streq	r1, [r6, #0]
 800de04:	5162      	str	r2, [r4, r5]
 800de06:	604b      	str	r3, [r1, #4]
 800de08:	4638      	mov	r0, r7
 800de0a:	f104 060b 	add.w	r6, r4, #11
 800de0e:	f001 fb3f 	bl	800f490 <__malloc_unlock>
 800de12:	f026 0607 	bic.w	r6, r6, #7
 800de16:	1d23      	adds	r3, r4, #4
 800de18:	1af2      	subs	r2, r6, r3
 800de1a:	d0b6      	beq.n	800dd8a <_malloc_r+0x22>
 800de1c:	1b9b      	subs	r3, r3, r6
 800de1e:	50a3      	str	r3, [r4, r2]
 800de20:	e7b3      	b.n	800dd8a <_malloc_r+0x22>
 800de22:	6862      	ldr	r2, [r4, #4]
 800de24:	42a3      	cmp	r3, r4
 800de26:	bf0c      	ite	eq
 800de28:	6032      	streq	r2, [r6, #0]
 800de2a:	605a      	strne	r2, [r3, #4]
 800de2c:	e7ec      	b.n	800de08 <_malloc_r+0xa0>
 800de2e:	4623      	mov	r3, r4
 800de30:	6864      	ldr	r4, [r4, #4]
 800de32:	e7b2      	b.n	800dd9a <_malloc_r+0x32>
 800de34:	4634      	mov	r4, r6
 800de36:	6876      	ldr	r6, [r6, #4]
 800de38:	e7b9      	b.n	800ddae <_malloc_r+0x46>
 800de3a:	230c      	movs	r3, #12
 800de3c:	603b      	str	r3, [r7, #0]
 800de3e:	4638      	mov	r0, r7
 800de40:	f001 fb26 	bl	800f490 <__malloc_unlock>
 800de44:	e7a1      	b.n	800dd8a <_malloc_r+0x22>
 800de46:	6025      	str	r5, [r4, #0]
 800de48:	e7de      	b.n	800de08 <_malloc_r+0xa0>
 800de4a:	bf00      	nop
 800de4c:	20014074 	.word	0x20014074

0800de50 <__cvt>:
 800de50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de54:	ec55 4b10 	vmov	r4, r5, d0
 800de58:	2d00      	cmp	r5, #0
 800de5a:	460e      	mov	r6, r1
 800de5c:	4619      	mov	r1, r3
 800de5e:	462b      	mov	r3, r5
 800de60:	bfbb      	ittet	lt
 800de62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de66:	461d      	movlt	r5, r3
 800de68:	2300      	movge	r3, #0
 800de6a:	232d      	movlt	r3, #45	; 0x2d
 800de6c:	700b      	strb	r3, [r1, #0]
 800de6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de74:	4691      	mov	r9, r2
 800de76:	f023 0820 	bic.w	r8, r3, #32
 800de7a:	bfbc      	itt	lt
 800de7c:	4622      	movlt	r2, r4
 800de7e:	4614      	movlt	r4, r2
 800de80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de84:	d005      	beq.n	800de92 <__cvt+0x42>
 800de86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de8a:	d100      	bne.n	800de8e <__cvt+0x3e>
 800de8c:	3601      	adds	r6, #1
 800de8e:	2102      	movs	r1, #2
 800de90:	e000      	b.n	800de94 <__cvt+0x44>
 800de92:	2103      	movs	r1, #3
 800de94:	ab03      	add	r3, sp, #12
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	ab02      	add	r3, sp, #8
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	ec45 4b10 	vmov	d0, r4, r5
 800dea0:	4653      	mov	r3, sl
 800dea2:	4632      	mov	r2, r6
 800dea4:	f000 fcfc 	bl	800e8a0 <_dtoa_r>
 800dea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800deac:	4607      	mov	r7, r0
 800deae:	d102      	bne.n	800deb6 <__cvt+0x66>
 800deb0:	f019 0f01 	tst.w	r9, #1
 800deb4:	d022      	beq.n	800defc <__cvt+0xac>
 800deb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800deba:	eb07 0906 	add.w	r9, r7, r6
 800debe:	d110      	bne.n	800dee2 <__cvt+0x92>
 800dec0:	783b      	ldrb	r3, [r7, #0]
 800dec2:	2b30      	cmp	r3, #48	; 0x30
 800dec4:	d10a      	bne.n	800dedc <__cvt+0x8c>
 800dec6:	2200      	movs	r2, #0
 800dec8:	2300      	movs	r3, #0
 800deca:	4620      	mov	r0, r4
 800decc:	4629      	mov	r1, r5
 800dece:	f7f2 fe13 	bl	8000af8 <__aeabi_dcmpeq>
 800ded2:	b918      	cbnz	r0, 800dedc <__cvt+0x8c>
 800ded4:	f1c6 0601 	rsb	r6, r6, #1
 800ded8:	f8ca 6000 	str.w	r6, [sl]
 800dedc:	f8da 3000 	ldr.w	r3, [sl]
 800dee0:	4499      	add	r9, r3
 800dee2:	2200      	movs	r2, #0
 800dee4:	2300      	movs	r3, #0
 800dee6:	4620      	mov	r0, r4
 800dee8:	4629      	mov	r1, r5
 800deea:	f7f2 fe05 	bl	8000af8 <__aeabi_dcmpeq>
 800deee:	b108      	cbz	r0, 800def4 <__cvt+0xa4>
 800def0:	f8cd 900c 	str.w	r9, [sp, #12]
 800def4:	2230      	movs	r2, #48	; 0x30
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	454b      	cmp	r3, r9
 800defa:	d307      	bcc.n	800df0c <__cvt+0xbc>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df00:	1bdb      	subs	r3, r3, r7
 800df02:	4638      	mov	r0, r7
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	b004      	add	sp, #16
 800df08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0c:	1c59      	adds	r1, r3, #1
 800df0e:	9103      	str	r1, [sp, #12]
 800df10:	701a      	strb	r2, [r3, #0]
 800df12:	e7f0      	b.n	800def6 <__cvt+0xa6>

0800df14 <__exponent>:
 800df14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df16:	4603      	mov	r3, r0
 800df18:	2900      	cmp	r1, #0
 800df1a:	bfb8      	it	lt
 800df1c:	4249      	neglt	r1, r1
 800df1e:	f803 2b02 	strb.w	r2, [r3], #2
 800df22:	bfb4      	ite	lt
 800df24:	222d      	movlt	r2, #45	; 0x2d
 800df26:	222b      	movge	r2, #43	; 0x2b
 800df28:	2909      	cmp	r1, #9
 800df2a:	7042      	strb	r2, [r0, #1]
 800df2c:	dd2a      	ble.n	800df84 <__exponent+0x70>
 800df2e:	f10d 0407 	add.w	r4, sp, #7
 800df32:	46a4      	mov	ip, r4
 800df34:	270a      	movs	r7, #10
 800df36:	46a6      	mov	lr, r4
 800df38:	460a      	mov	r2, r1
 800df3a:	fb91 f6f7 	sdiv	r6, r1, r7
 800df3e:	fb07 1516 	mls	r5, r7, r6, r1
 800df42:	3530      	adds	r5, #48	; 0x30
 800df44:	2a63      	cmp	r2, #99	; 0x63
 800df46:	f104 34ff 	add.w	r4, r4, #4294967295
 800df4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df4e:	4631      	mov	r1, r6
 800df50:	dcf1      	bgt.n	800df36 <__exponent+0x22>
 800df52:	3130      	adds	r1, #48	; 0x30
 800df54:	f1ae 0502 	sub.w	r5, lr, #2
 800df58:	f804 1c01 	strb.w	r1, [r4, #-1]
 800df5c:	1c44      	adds	r4, r0, #1
 800df5e:	4629      	mov	r1, r5
 800df60:	4561      	cmp	r1, ip
 800df62:	d30a      	bcc.n	800df7a <__exponent+0x66>
 800df64:	f10d 0209 	add.w	r2, sp, #9
 800df68:	eba2 020e 	sub.w	r2, r2, lr
 800df6c:	4565      	cmp	r5, ip
 800df6e:	bf88      	it	hi
 800df70:	2200      	movhi	r2, #0
 800df72:	4413      	add	r3, r2
 800df74:	1a18      	subs	r0, r3, r0
 800df76:	b003      	add	sp, #12
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df82:	e7ed      	b.n	800df60 <__exponent+0x4c>
 800df84:	2330      	movs	r3, #48	; 0x30
 800df86:	3130      	adds	r1, #48	; 0x30
 800df88:	7083      	strb	r3, [r0, #2]
 800df8a:	70c1      	strb	r1, [r0, #3]
 800df8c:	1d03      	adds	r3, r0, #4
 800df8e:	e7f1      	b.n	800df74 <__exponent+0x60>

0800df90 <_printf_float>:
 800df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	ed2d 8b02 	vpush	{d8}
 800df98:	b08d      	sub	sp, #52	; 0x34
 800df9a:	460c      	mov	r4, r1
 800df9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dfa0:	4616      	mov	r6, r2
 800dfa2:	461f      	mov	r7, r3
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	f001 fa69 	bl	800f47c <_localeconv_r>
 800dfaa:	f8d0 a000 	ldr.w	sl, [r0]
 800dfae:	4650      	mov	r0, sl
 800dfb0:	f7f2 f920 	bl	80001f4 <strlen>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	930a      	str	r3, [sp, #40]	; 0x28
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	9305      	str	r3, [sp, #20]
 800dfbc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dfc4:	3307      	adds	r3, #7
 800dfc6:	f023 0307 	bic.w	r3, r3, #7
 800dfca:	f103 0208 	add.w	r2, r3, #8
 800dfce:	f8c8 2000 	str.w	r2, [r8]
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dfda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dfde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfe2:	9307      	str	r3, [sp, #28]
 800dfe4:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfe8:	ee08 0a10 	vmov	s16, r0
 800dfec:	4b9f      	ldr	r3, [pc, #636]	; (800e26c <_printf_float+0x2dc>)
 800dfee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dff2:	f04f 32ff 	mov.w	r2, #4294967295
 800dff6:	f7f2 fdb1 	bl	8000b5c <__aeabi_dcmpun>
 800dffa:	bb88      	cbnz	r0, 800e060 <_printf_float+0xd0>
 800dffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e000:	4b9a      	ldr	r3, [pc, #616]	; (800e26c <_printf_float+0x2dc>)
 800e002:	f04f 32ff 	mov.w	r2, #4294967295
 800e006:	f7f2 fd8b 	bl	8000b20 <__aeabi_dcmple>
 800e00a:	bb48      	cbnz	r0, 800e060 <_printf_float+0xd0>
 800e00c:	2200      	movs	r2, #0
 800e00e:	2300      	movs	r3, #0
 800e010:	4640      	mov	r0, r8
 800e012:	4649      	mov	r1, r9
 800e014:	f7f2 fd7a 	bl	8000b0c <__aeabi_dcmplt>
 800e018:	b110      	cbz	r0, 800e020 <_printf_float+0x90>
 800e01a:	232d      	movs	r3, #45	; 0x2d
 800e01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e020:	4b93      	ldr	r3, [pc, #588]	; (800e270 <_printf_float+0x2e0>)
 800e022:	4894      	ldr	r0, [pc, #592]	; (800e274 <_printf_float+0x2e4>)
 800e024:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e028:	bf94      	ite	ls
 800e02a:	4698      	movls	r8, r3
 800e02c:	4680      	movhi	r8, r0
 800e02e:	2303      	movs	r3, #3
 800e030:	6123      	str	r3, [r4, #16]
 800e032:	9b05      	ldr	r3, [sp, #20]
 800e034:	f023 0204 	bic.w	r2, r3, #4
 800e038:	6022      	str	r2, [r4, #0]
 800e03a:	f04f 0900 	mov.w	r9, #0
 800e03e:	9700      	str	r7, [sp, #0]
 800e040:	4633      	mov	r3, r6
 800e042:	aa0b      	add	r2, sp, #44	; 0x2c
 800e044:	4621      	mov	r1, r4
 800e046:	4628      	mov	r0, r5
 800e048:	f000 f9d8 	bl	800e3fc <_printf_common>
 800e04c:	3001      	adds	r0, #1
 800e04e:	f040 8090 	bne.w	800e172 <_printf_float+0x1e2>
 800e052:	f04f 30ff 	mov.w	r0, #4294967295
 800e056:	b00d      	add	sp, #52	; 0x34
 800e058:	ecbd 8b02 	vpop	{d8}
 800e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e060:	4642      	mov	r2, r8
 800e062:	464b      	mov	r3, r9
 800e064:	4640      	mov	r0, r8
 800e066:	4649      	mov	r1, r9
 800e068:	f7f2 fd78 	bl	8000b5c <__aeabi_dcmpun>
 800e06c:	b140      	cbz	r0, 800e080 <_printf_float+0xf0>
 800e06e:	464b      	mov	r3, r9
 800e070:	2b00      	cmp	r3, #0
 800e072:	bfbc      	itt	lt
 800e074:	232d      	movlt	r3, #45	; 0x2d
 800e076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e07a:	487f      	ldr	r0, [pc, #508]	; (800e278 <_printf_float+0x2e8>)
 800e07c:	4b7f      	ldr	r3, [pc, #508]	; (800e27c <_printf_float+0x2ec>)
 800e07e:	e7d1      	b.n	800e024 <_printf_float+0x94>
 800e080:	6863      	ldr	r3, [r4, #4]
 800e082:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e086:	9206      	str	r2, [sp, #24]
 800e088:	1c5a      	adds	r2, r3, #1
 800e08a:	d13f      	bne.n	800e10c <_printf_float+0x17c>
 800e08c:	2306      	movs	r3, #6
 800e08e:	6063      	str	r3, [r4, #4]
 800e090:	9b05      	ldr	r3, [sp, #20]
 800e092:	6861      	ldr	r1, [r4, #4]
 800e094:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e098:	2300      	movs	r3, #0
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	ab0a      	add	r3, sp, #40	; 0x28
 800e09e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0a2:	ab09      	add	r3, sp, #36	; 0x24
 800e0a4:	ec49 8b10 	vmov	d0, r8, r9
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	6022      	str	r2, [r4, #0]
 800e0ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f7ff fecd 	bl	800de50 <__cvt>
 800e0b6:	9b06      	ldr	r3, [sp, #24]
 800e0b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0ba:	2b47      	cmp	r3, #71	; 0x47
 800e0bc:	4680      	mov	r8, r0
 800e0be:	d108      	bne.n	800e0d2 <_printf_float+0x142>
 800e0c0:	1cc8      	adds	r0, r1, #3
 800e0c2:	db02      	blt.n	800e0ca <_printf_float+0x13a>
 800e0c4:	6863      	ldr	r3, [r4, #4]
 800e0c6:	4299      	cmp	r1, r3
 800e0c8:	dd41      	ble.n	800e14e <_printf_float+0x1be>
 800e0ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800e0ce:	fa5f fb8b 	uxtb.w	fp, fp
 800e0d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0d6:	d820      	bhi.n	800e11a <_printf_float+0x18a>
 800e0d8:	3901      	subs	r1, #1
 800e0da:	465a      	mov	r2, fp
 800e0dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0e0:	9109      	str	r1, [sp, #36]	; 0x24
 800e0e2:	f7ff ff17 	bl	800df14 <__exponent>
 800e0e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0e8:	1813      	adds	r3, r2, r0
 800e0ea:	2a01      	cmp	r2, #1
 800e0ec:	4681      	mov	r9, r0
 800e0ee:	6123      	str	r3, [r4, #16]
 800e0f0:	dc02      	bgt.n	800e0f8 <_printf_float+0x168>
 800e0f2:	6822      	ldr	r2, [r4, #0]
 800e0f4:	07d2      	lsls	r2, r2, #31
 800e0f6:	d501      	bpl.n	800e0fc <_printf_float+0x16c>
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	6123      	str	r3, [r4, #16]
 800e0fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e100:	2b00      	cmp	r3, #0
 800e102:	d09c      	beq.n	800e03e <_printf_float+0xae>
 800e104:	232d      	movs	r3, #45	; 0x2d
 800e106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e10a:	e798      	b.n	800e03e <_printf_float+0xae>
 800e10c:	9a06      	ldr	r2, [sp, #24]
 800e10e:	2a47      	cmp	r2, #71	; 0x47
 800e110:	d1be      	bne.n	800e090 <_printf_float+0x100>
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1bc      	bne.n	800e090 <_printf_float+0x100>
 800e116:	2301      	movs	r3, #1
 800e118:	e7b9      	b.n	800e08e <_printf_float+0xfe>
 800e11a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e11e:	d118      	bne.n	800e152 <_printf_float+0x1c2>
 800e120:	2900      	cmp	r1, #0
 800e122:	6863      	ldr	r3, [r4, #4]
 800e124:	dd0b      	ble.n	800e13e <_printf_float+0x1ae>
 800e126:	6121      	str	r1, [r4, #16]
 800e128:	b913      	cbnz	r3, 800e130 <_printf_float+0x1a0>
 800e12a:	6822      	ldr	r2, [r4, #0]
 800e12c:	07d0      	lsls	r0, r2, #31
 800e12e:	d502      	bpl.n	800e136 <_printf_float+0x1a6>
 800e130:	3301      	adds	r3, #1
 800e132:	440b      	add	r3, r1
 800e134:	6123      	str	r3, [r4, #16]
 800e136:	65a1      	str	r1, [r4, #88]	; 0x58
 800e138:	f04f 0900 	mov.w	r9, #0
 800e13c:	e7de      	b.n	800e0fc <_printf_float+0x16c>
 800e13e:	b913      	cbnz	r3, 800e146 <_printf_float+0x1b6>
 800e140:	6822      	ldr	r2, [r4, #0]
 800e142:	07d2      	lsls	r2, r2, #31
 800e144:	d501      	bpl.n	800e14a <_printf_float+0x1ba>
 800e146:	3302      	adds	r3, #2
 800e148:	e7f4      	b.n	800e134 <_printf_float+0x1a4>
 800e14a:	2301      	movs	r3, #1
 800e14c:	e7f2      	b.n	800e134 <_printf_float+0x1a4>
 800e14e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e154:	4299      	cmp	r1, r3
 800e156:	db05      	blt.n	800e164 <_printf_float+0x1d4>
 800e158:	6823      	ldr	r3, [r4, #0]
 800e15a:	6121      	str	r1, [r4, #16]
 800e15c:	07d8      	lsls	r0, r3, #31
 800e15e:	d5ea      	bpl.n	800e136 <_printf_float+0x1a6>
 800e160:	1c4b      	adds	r3, r1, #1
 800e162:	e7e7      	b.n	800e134 <_printf_float+0x1a4>
 800e164:	2900      	cmp	r1, #0
 800e166:	bfd4      	ite	le
 800e168:	f1c1 0202 	rsble	r2, r1, #2
 800e16c:	2201      	movgt	r2, #1
 800e16e:	4413      	add	r3, r2
 800e170:	e7e0      	b.n	800e134 <_printf_float+0x1a4>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	055a      	lsls	r2, r3, #21
 800e176:	d407      	bmi.n	800e188 <_printf_float+0x1f8>
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	4642      	mov	r2, r8
 800e17c:	4631      	mov	r1, r6
 800e17e:	4628      	mov	r0, r5
 800e180:	47b8      	blx	r7
 800e182:	3001      	adds	r0, #1
 800e184:	d12c      	bne.n	800e1e0 <_printf_float+0x250>
 800e186:	e764      	b.n	800e052 <_printf_float+0xc2>
 800e188:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e18c:	f240 80e0 	bls.w	800e350 <_printf_float+0x3c0>
 800e190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e194:	2200      	movs	r2, #0
 800e196:	2300      	movs	r3, #0
 800e198:	f7f2 fcae 	bl	8000af8 <__aeabi_dcmpeq>
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d034      	beq.n	800e20a <_printf_float+0x27a>
 800e1a0:	4a37      	ldr	r2, [pc, #220]	; (800e280 <_printf_float+0x2f0>)
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	47b8      	blx	r7
 800e1aa:	3001      	adds	r0, #1
 800e1ac:	f43f af51 	beq.w	800e052 <_printf_float+0xc2>
 800e1b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	db02      	blt.n	800e1be <_printf_float+0x22e>
 800e1b8:	6823      	ldr	r3, [r4, #0]
 800e1ba:	07d8      	lsls	r0, r3, #31
 800e1bc:	d510      	bpl.n	800e1e0 <_printf_float+0x250>
 800e1be:	ee18 3a10 	vmov	r3, s16
 800e1c2:	4652      	mov	r2, sl
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	47b8      	blx	r7
 800e1ca:	3001      	adds	r0, #1
 800e1cc:	f43f af41 	beq.w	800e052 <_printf_float+0xc2>
 800e1d0:	f04f 0800 	mov.w	r8, #0
 800e1d4:	f104 091a 	add.w	r9, r4, #26
 800e1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	4543      	cmp	r3, r8
 800e1de:	dc09      	bgt.n	800e1f4 <_printf_float+0x264>
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	079b      	lsls	r3, r3, #30
 800e1e4:	f100 8105 	bmi.w	800e3f2 <_printf_float+0x462>
 800e1e8:	68e0      	ldr	r0, [r4, #12]
 800e1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1ec:	4298      	cmp	r0, r3
 800e1ee:	bfb8      	it	lt
 800e1f0:	4618      	movlt	r0, r3
 800e1f2:	e730      	b.n	800e056 <_printf_float+0xc6>
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	464a      	mov	r2, r9
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	47b8      	blx	r7
 800e1fe:	3001      	adds	r0, #1
 800e200:	f43f af27 	beq.w	800e052 <_printf_float+0xc2>
 800e204:	f108 0801 	add.w	r8, r8, #1
 800e208:	e7e6      	b.n	800e1d8 <_printf_float+0x248>
 800e20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	dc39      	bgt.n	800e284 <_printf_float+0x2f4>
 800e210:	4a1b      	ldr	r2, [pc, #108]	; (800e280 <_printf_float+0x2f0>)
 800e212:	2301      	movs	r3, #1
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	47b8      	blx	r7
 800e21a:	3001      	adds	r0, #1
 800e21c:	f43f af19 	beq.w	800e052 <_printf_float+0xc2>
 800e220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e224:	4313      	orrs	r3, r2
 800e226:	d102      	bne.n	800e22e <_printf_float+0x29e>
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	07d9      	lsls	r1, r3, #31
 800e22c:	d5d8      	bpl.n	800e1e0 <_printf_float+0x250>
 800e22e:	ee18 3a10 	vmov	r3, s16
 800e232:	4652      	mov	r2, sl
 800e234:	4631      	mov	r1, r6
 800e236:	4628      	mov	r0, r5
 800e238:	47b8      	blx	r7
 800e23a:	3001      	adds	r0, #1
 800e23c:	f43f af09 	beq.w	800e052 <_printf_float+0xc2>
 800e240:	f04f 0900 	mov.w	r9, #0
 800e244:	f104 0a1a 	add.w	sl, r4, #26
 800e248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24a:	425b      	negs	r3, r3
 800e24c:	454b      	cmp	r3, r9
 800e24e:	dc01      	bgt.n	800e254 <_printf_float+0x2c4>
 800e250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e252:	e792      	b.n	800e17a <_printf_float+0x1ea>
 800e254:	2301      	movs	r3, #1
 800e256:	4652      	mov	r2, sl
 800e258:	4631      	mov	r1, r6
 800e25a:	4628      	mov	r0, r5
 800e25c:	47b8      	blx	r7
 800e25e:	3001      	adds	r0, #1
 800e260:	f43f aef7 	beq.w	800e052 <_printf_float+0xc2>
 800e264:	f109 0901 	add.w	r9, r9, #1
 800e268:	e7ee      	b.n	800e248 <_printf_float+0x2b8>
 800e26a:	bf00      	nop
 800e26c:	7fefffff 	.word	0x7fefffff
 800e270:	08013a84 	.word	0x08013a84
 800e274:	08013a88 	.word	0x08013a88
 800e278:	08013a90 	.word	0x08013a90
 800e27c:	08013a8c 	.word	0x08013a8c
 800e280:	08013a94 	.word	0x08013a94
 800e284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e288:	429a      	cmp	r2, r3
 800e28a:	bfa8      	it	ge
 800e28c:	461a      	movge	r2, r3
 800e28e:	2a00      	cmp	r2, #0
 800e290:	4691      	mov	r9, r2
 800e292:	dc37      	bgt.n	800e304 <_printf_float+0x374>
 800e294:	f04f 0b00 	mov.w	fp, #0
 800e298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e29c:	f104 021a 	add.w	r2, r4, #26
 800e2a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2a2:	9305      	str	r3, [sp, #20]
 800e2a4:	eba3 0309 	sub.w	r3, r3, r9
 800e2a8:	455b      	cmp	r3, fp
 800e2aa:	dc33      	bgt.n	800e314 <_printf_float+0x384>
 800e2ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	db3b      	blt.n	800e32c <_printf_float+0x39c>
 800e2b4:	6823      	ldr	r3, [r4, #0]
 800e2b6:	07da      	lsls	r2, r3, #31
 800e2b8:	d438      	bmi.n	800e32c <_printf_float+0x39c>
 800e2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2bc:	9a05      	ldr	r2, [sp, #20]
 800e2be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2c0:	1a9a      	subs	r2, r3, r2
 800e2c2:	eba3 0901 	sub.w	r9, r3, r1
 800e2c6:	4591      	cmp	r9, r2
 800e2c8:	bfa8      	it	ge
 800e2ca:	4691      	movge	r9, r2
 800e2cc:	f1b9 0f00 	cmp.w	r9, #0
 800e2d0:	dc35      	bgt.n	800e33e <_printf_float+0x3ae>
 800e2d2:	f04f 0800 	mov.w	r8, #0
 800e2d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2da:	f104 0a1a 	add.w	sl, r4, #26
 800e2de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2e2:	1a9b      	subs	r3, r3, r2
 800e2e4:	eba3 0309 	sub.w	r3, r3, r9
 800e2e8:	4543      	cmp	r3, r8
 800e2ea:	f77f af79 	ble.w	800e1e0 <_printf_float+0x250>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	4652      	mov	r2, sl
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	47b8      	blx	r7
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	f43f aeaa 	beq.w	800e052 <_printf_float+0xc2>
 800e2fe:	f108 0801 	add.w	r8, r8, #1
 800e302:	e7ec      	b.n	800e2de <_printf_float+0x34e>
 800e304:	4613      	mov	r3, r2
 800e306:	4631      	mov	r1, r6
 800e308:	4642      	mov	r2, r8
 800e30a:	4628      	mov	r0, r5
 800e30c:	47b8      	blx	r7
 800e30e:	3001      	adds	r0, #1
 800e310:	d1c0      	bne.n	800e294 <_printf_float+0x304>
 800e312:	e69e      	b.n	800e052 <_printf_float+0xc2>
 800e314:	2301      	movs	r3, #1
 800e316:	4631      	mov	r1, r6
 800e318:	4628      	mov	r0, r5
 800e31a:	9205      	str	r2, [sp, #20]
 800e31c:	47b8      	blx	r7
 800e31e:	3001      	adds	r0, #1
 800e320:	f43f ae97 	beq.w	800e052 <_printf_float+0xc2>
 800e324:	9a05      	ldr	r2, [sp, #20]
 800e326:	f10b 0b01 	add.w	fp, fp, #1
 800e32a:	e7b9      	b.n	800e2a0 <_printf_float+0x310>
 800e32c:	ee18 3a10 	vmov	r3, s16
 800e330:	4652      	mov	r2, sl
 800e332:	4631      	mov	r1, r6
 800e334:	4628      	mov	r0, r5
 800e336:	47b8      	blx	r7
 800e338:	3001      	adds	r0, #1
 800e33a:	d1be      	bne.n	800e2ba <_printf_float+0x32a>
 800e33c:	e689      	b.n	800e052 <_printf_float+0xc2>
 800e33e:	9a05      	ldr	r2, [sp, #20]
 800e340:	464b      	mov	r3, r9
 800e342:	4442      	add	r2, r8
 800e344:	4631      	mov	r1, r6
 800e346:	4628      	mov	r0, r5
 800e348:	47b8      	blx	r7
 800e34a:	3001      	adds	r0, #1
 800e34c:	d1c1      	bne.n	800e2d2 <_printf_float+0x342>
 800e34e:	e680      	b.n	800e052 <_printf_float+0xc2>
 800e350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e352:	2a01      	cmp	r2, #1
 800e354:	dc01      	bgt.n	800e35a <_printf_float+0x3ca>
 800e356:	07db      	lsls	r3, r3, #31
 800e358:	d538      	bpl.n	800e3cc <_printf_float+0x43c>
 800e35a:	2301      	movs	r3, #1
 800e35c:	4642      	mov	r2, r8
 800e35e:	4631      	mov	r1, r6
 800e360:	4628      	mov	r0, r5
 800e362:	47b8      	blx	r7
 800e364:	3001      	adds	r0, #1
 800e366:	f43f ae74 	beq.w	800e052 <_printf_float+0xc2>
 800e36a:	ee18 3a10 	vmov	r3, s16
 800e36e:	4652      	mov	r2, sl
 800e370:	4631      	mov	r1, r6
 800e372:	4628      	mov	r0, r5
 800e374:	47b8      	blx	r7
 800e376:	3001      	adds	r0, #1
 800e378:	f43f ae6b 	beq.w	800e052 <_printf_float+0xc2>
 800e37c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e380:	2200      	movs	r2, #0
 800e382:	2300      	movs	r3, #0
 800e384:	f7f2 fbb8 	bl	8000af8 <__aeabi_dcmpeq>
 800e388:	b9d8      	cbnz	r0, 800e3c2 <_printf_float+0x432>
 800e38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e38c:	f108 0201 	add.w	r2, r8, #1
 800e390:	3b01      	subs	r3, #1
 800e392:	4631      	mov	r1, r6
 800e394:	4628      	mov	r0, r5
 800e396:	47b8      	blx	r7
 800e398:	3001      	adds	r0, #1
 800e39a:	d10e      	bne.n	800e3ba <_printf_float+0x42a>
 800e39c:	e659      	b.n	800e052 <_printf_float+0xc2>
 800e39e:	2301      	movs	r3, #1
 800e3a0:	4652      	mov	r2, sl
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	47b8      	blx	r7
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	f43f ae52 	beq.w	800e052 <_printf_float+0xc2>
 800e3ae:	f108 0801 	add.w	r8, r8, #1
 800e3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	4543      	cmp	r3, r8
 800e3b8:	dcf1      	bgt.n	800e39e <_printf_float+0x40e>
 800e3ba:	464b      	mov	r3, r9
 800e3bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e3c0:	e6dc      	b.n	800e17c <_printf_float+0x1ec>
 800e3c2:	f04f 0800 	mov.w	r8, #0
 800e3c6:	f104 0a1a 	add.w	sl, r4, #26
 800e3ca:	e7f2      	b.n	800e3b2 <_printf_float+0x422>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	4642      	mov	r2, r8
 800e3d0:	e7df      	b.n	800e392 <_printf_float+0x402>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	464a      	mov	r2, r9
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	f43f ae38 	beq.w	800e052 <_printf_float+0xc2>
 800e3e2:	f108 0801 	add.w	r8, r8, #1
 800e3e6:	68e3      	ldr	r3, [r4, #12]
 800e3e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ea:	1a5b      	subs	r3, r3, r1
 800e3ec:	4543      	cmp	r3, r8
 800e3ee:	dcf0      	bgt.n	800e3d2 <_printf_float+0x442>
 800e3f0:	e6fa      	b.n	800e1e8 <_printf_float+0x258>
 800e3f2:	f04f 0800 	mov.w	r8, #0
 800e3f6:	f104 0919 	add.w	r9, r4, #25
 800e3fa:	e7f4      	b.n	800e3e6 <_printf_float+0x456>

0800e3fc <_printf_common>:
 800e3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e400:	4616      	mov	r6, r2
 800e402:	4699      	mov	r9, r3
 800e404:	688a      	ldr	r2, [r1, #8]
 800e406:	690b      	ldr	r3, [r1, #16]
 800e408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e40c:	4293      	cmp	r3, r2
 800e40e:	bfb8      	it	lt
 800e410:	4613      	movlt	r3, r2
 800e412:	6033      	str	r3, [r6, #0]
 800e414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e418:	4607      	mov	r7, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	b10a      	cbz	r2, 800e422 <_printf_common+0x26>
 800e41e:	3301      	adds	r3, #1
 800e420:	6033      	str	r3, [r6, #0]
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	0699      	lsls	r1, r3, #26
 800e426:	bf42      	ittt	mi
 800e428:	6833      	ldrmi	r3, [r6, #0]
 800e42a:	3302      	addmi	r3, #2
 800e42c:	6033      	strmi	r3, [r6, #0]
 800e42e:	6825      	ldr	r5, [r4, #0]
 800e430:	f015 0506 	ands.w	r5, r5, #6
 800e434:	d106      	bne.n	800e444 <_printf_common+0x48>
 800e436:	f104 0a19 	add.w	sl, r4, #25
 800e43a:	68e3      	ldr	r3, [r4, #12]
 800e43c:	6832      	ldr	r2, [r6, #0]
 800e43e:	1a9b      	subs	r3, r3, r2
 800e440:	42ab      	cmp	r3, r5
 800e442:	dc26      	bgt.n	800e492 <_printf_common+0x96>
 800e444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e448:	1e13      	subs	r3, r2, #0
 800e44a:	6822      	ldr	r2, [r4, #0]
 800e44c:	bf18      	it	ne
 800e44e:	2301      	movne	r3, #1
 800e450:	0692      	lsls	r2, r2, #26
 800e452:	d42b      	bmi.n	800e4ac <_printf_common+0xb0>
 800e454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e458:	4649      	mov	r1, r9
 800e45a:	4638      	mov	r0, r7
 800e45c:	47c0      	blx	r8
 800e45e:	3001      	adds	r0, #1
 800e460:	d01e      	beq.n	800e4a0 <_printf_common+0xa4>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	68e5      	ldr	r5, [r4, #12]
 800e466:	6832      	ldr	r2, [r6, #0]
 800e468:	f003 0306 	and.w	r3, r3, #6
 800e46c:	2b04      	cmp	r3, #4
 800e46e:	bf08      	it	eq
 800e470:	1aad      	subeq	r5, r5, r2
 800e472:	68a3      	ldr	r3, [r4, #8]
 800e474:	6922      	ldr	r2, [r4, #16]
 800e476:	bf0c      	ite	eq
 800e478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e47c:	2500      	movne	r5, #0
 800e47e:	4293      	cmp	r3, r2
 800e480:	bfc4      	itt	gt
 800e482:	1a9b      	subgt	r3, r3, r2
 800e484:	18ed      	addgt	r5, r5, r3
 800e486:	2600      	movs	r6, #0
 800e488:	341a      	adds	r4, #26
 800e48a:	42b5      	cmp	r5, r6
 800e48c:	d11a      	bne.n	800e4c4 <_printf_common+0xc8>
 800e48e:	2000      	movs	r0, #0
 800e490:	e008      	b.n	800e4a4 <_printf_common+0xa8>
 800e492:	2301      	movs	r3, #1
 800e494:	4652      	mov	r2, sl
 800e496:	4649      	mov	r1, r9
 800e498:	4638      	mov	r0, r7
 800e49a:	47c0      	blx	r8
 800e49c:	3001      	adds	r0, #1
 800e49e:	d103      	bne.n	800e4a8 <_printf_common+0xac>
 800e4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a8:	3501      	adds	r5, #1
 800e4aa:	e7c6      	b.n	800e43a <_printf_common+0x3e>
 800e4ac:	18e1      	adds	r1, r4, r3
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	2030      	movs	r0, #48	; 0x30
 800e4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4b6:	4422      	add	r2, r4
 800e4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4c0:	3302      	adds	r3, #2
 800e4c2:	e7c7      	b.n	800e454 <_printf_common+0x58>
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	4622      	mov	r2, r4
 800e4c8:	4649      	mov	r1, r9
 800e4ca:	4638      	mov	r0, r7
 800e4cc:	47c0      	blx	r8
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	d0e6      	beq.n	800e4a0 <_printf_common+0xa4>
 800e4d2:	3601      	adds	r6, #1
 800e4d4:	e7d9      	b.n	800e48a <_printf_common+0x8e>
	...

0800e4d8 <_printf_i>:
 800e4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4dc:	7e0f      	ldrb	r7, [r1, #24]
 800e4de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4e0:	2f78      	cmp	r7, #120	; 0x78
 800e4e2:	4691      	mov	r9, r2
 800e4e4:	4680      	mov	r8, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4ee:	d807      	bhi.n	800e500 <_printf_i+0x28>
 800e4f0:	2f62      	cmp	r7, #98	; 0x62
 800e4f2:	d80a      	bhi.n	800e50a <_printf_i+0x32>
 800e4f4:	2f00      	cmp	r7, #0
 800e4f6:	f000 80d8 	beq.w	800e6aa <_printf_i+0x1d2>
 800e4fa:	2f58      	cmp	r7, #88	; 0x58
 800e4fc:	f000 80a3 	beq.w	800e646 <_printf_i+0x16e>
 800e500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e508:	e03a      	b.n	800e580 <_printf_i+0xa8>
 800e50a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e50e:	2b15      	cmp	r3, #21
 800e510:	d8f6      	bhi.n	800e500 <_printf_i+0x28>
 800e512:	a101      	add	r1, pc, #4	; (adr r1, 800e518 <_printf_i+0x40>)
 800e514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e518:	0800e571 	.word	0x0800e571
 800e51c:	0800e585 	.word	0x0800e585
 800e520:	0800e501 	.word	0x0800e501
 800e524:	0800e501 	.word	0x0800e501
 800e528:	0800e501 	.word	0x0800e501
 800e52c:	0800e501 	.word	0x0800e501
 800e530:	0800e585 	.word	0x0800e585
 800e534:	0800e501 	.word	0x0800e501
 800e538:	0800e501 	.word	0x0800e501
 800e53c:	0800e501 	.word	0x0800e501
 800e540:	0800e501 	.word	0x0800e501
 800e544:	0800e691 	.word	0x0800e691
 800e548:	0800e5b5 	.word	0x0800e5b5
 800e54c:	0800e673 	.word	0x0800e673
 800e550:	0800e501 	.word	0x0800e501
 800e554:	0800e501 	.word	0x0800e501
 800e558:	0800e6b3 	.word	0x0800e6b3
 800e55c:	0800e501 	.word	0x0800e501
 800e560:	0800e5b5 	.word	0x0800e5b5
 800e564:	0800e501 	.word	0x0800e501
 800e568:	0800e501 	.word	0x0800e501
 800e56c:	0800e67b 	.word	0x0800e67b
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	1d1a      	adds	r2, r3, #4
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	602a      	str	r2, [r5, #0]
 800e578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e580:	2301      	movs	r3, #1
 800e582:	e0a3      	b.n	800e6cc <_printf_i+0x1f4>
 800e584:	6820      	ldr	r0, [r4, #0]
 800e586:	6829      	ldr	r1, [r5, #0]
 800e588:	0606      	lsls	r6, r0, #24
 800e58a:	f101 0304 	add.w	r3, r1, #4
 800e58e:	d50a      	bpl.n	800e5a6 <_printf_i+0xce>
 800e590:	680e      	ldr	r6, [r1, #0]
 800e592:	602b      	str	r3, [r5, #0]
 800e594:	2e00      	cmp	r6, #0
 800e596:	da03      	bge.n	800e5a0 <_printf_i+0xc8>
 800e598:	232d      	movs	r3, #45	; 0x2d
 800e59a:	4276      	negs	r6, r6
 800e59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5a0:	485e      	ldr	r0, [pc, #376]	; (800e71c <_printf_i+0x244>)
 800e5a2:	230a      	movs	r3, #10
 800e5a4:	e019      	b.n	800e5da <_printf_i+0x102>
 800e5a6:	680e      	ldr	r6, [r1, #0]
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5ae:	bf18      	it	ne
 800e5b0:	b236      	sxthne	r6, r6
 800e5b2:	e7ef      	b.n	800e594 <_printf_i+0xbc>
 800e5b4:	682b      	ldr	r3, [r5, #0]
 800e5b6:	6820      	ldr	r0, [r4, #0]
 800e5b8:	1d19      	adds	r1, r3, #4
 800e5ba:	6029      	str	r1, [r5, #0]
 800e5bc:	0601      	lsls	r1, r0, #24
 800e5be:	d501      	bpl.n	800e5c4 <_printf_i+0xec>
 800e5c0:	681e      	ldr	r6, [r3, #0]
 800e5c2:	e002      	b.n	800e5ca <_printf_i+0xf2>
 800e5c4:	0646      	lsls	r6, r0, #25
 800e5c6:	d5fb      	bpl.n	800e5c0 <_printf_i+0xe8>
 800e5c8:	881e      	ldrh	r6, [r3, #0]
 800e5ca:	4854      	ldr	r0, [pc, #336]	; (800e71c <_printf_i+0x244>)
 800e5cc:	2f6f      	cmp	r7, #111	; 0x6f
 800e5ce:	bf0c      	ite	eq
 800e5d0:	2308      	moveq	r3, #8
 800e5d2:	230a      	movne	r3, #10
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5da:	6865      	ldr	r5, [r4, #4]
 800e5dc:	60a5      	str	r5, [r4, #8]
 800e5de:	2d00      	cmp	r5, #0
 800e5e0:	bfa2      	ittt	ge
 800e5e2:	6821      	ldrge	r1, [r4, #0]
 800e5e4:	f021 0104 	bicge.w	r1, r1, #4
 800e5e8:	6021      	strge	r1, [r4, #0]
 800e5ea:	b90e      	cbnz	r6, 800e5f0 <_printf_i+0x118>
 800e5ec:	2d00      	cmp	r5, #0
 800e5ee:	d04d      	beq.n	800e68c <_printf_i+0x1b4>
 800e5f0:	4615      	mov	r5, r2
 800e5f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5f6:	fb03 6711 	mls	r7, r3, r1, r6
 800e5fa:	5dc7      	ldrb	r7, [r0, r7]
 800e5fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e600:	4637      	mov	r7, r6
 800e602:	42bb      	cmp	r3, r7
 800e604:	460e      	mov	r6, r1
 800e606:	d9f4      	bls.n	800e5f2 <_printf_i+0x11a>
 800e608:	2b08      	cmp	r3, #8
 800e60a:	d10b      	bne.n	800e624 <_printf_i+0x14c>
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	07de      	lsls	r6, r3, #31
 800e610:	d508      	bpl.n	800e624 <_printf_i+0x14c>
 800e612:	6923      	ldr	r3, [r4, #16]
 800e614:	6861      	ldr	r1, [r4, #4]
 800e616:	4299      	cmp	r1, r3
 800e618:	bfde      	ittt	le
 800e61a:	2330      	movle	r3, #48	; 0x30
 800e61c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e620:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e624:	1b52      	subs	r2, r2, r5
 800e626:	6122      	str	r2, [r4, #16]
 800e628:	f8cd a000 	str.w	sl, [sp]
 800e62c:	464b      	mov	r3, r9
 800e62e:	aa03      	add	r2, sp, #12
 800e630:	4621      	mov	r1, r4
 800e632:	4640      	mov	r0, r8
 800e634:	f7ff fee2 	bl	800e3fc <_printf_common>
 800e638:	3001      	adds	r0, #1
 800e63a:	d14c      	bne.n	800e6d6 <_printf_i+0x1fe>
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	b004      	add	sp, #16
 800e642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e646:	4835      	ldr	r0, [pc, #212]	; (800e71c <_printf_i+0x244>)
 800e648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e64c:	6829      	ldr	r1, [r5, #0]
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f851 6b04 	ldr.w	r6, [r1], #4
 800e654:	6029      	str	r1, [r5, #0]
 800e656:	061d      	lsls	r5, r3, #24
 800e658:	d514      	bpl.n	800e684 <_printf_i+0x1ac>
 800e65a:	07df      	lsls	r7, r3, #31
 800e65c:	bf44      	itt	mi
 800e65e:	f043 0320 	orrmi.w	r3, r3, #32
 800e662:	6023      	strmi	r3, [r4, #0]
 800e664:	b91e      	cbnz	r6, 800e66e <_printf_i+0x196>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	f023 0320 	bic.w	r3, r3, #32
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	2310      	movs	r3, #16
 800e670:	e7b0      	b.n	800e5d4 <_printf_i+0xfc>
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	f043 0320 	orr.w	r3, r3, #32
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	2378      	movs	r3, #120	; 0x78
 800e67c:	4828      	ldr	r0, [pc, #160]	; (800e720 <_printf_i+0x248>)
 800e67e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e682:	e7e3      	b.n	800e64c <_printf_i+0x174>
 800e684:	0659      	lsls	r1, r3, #25
 800e686:	bf48      	it	mi
 800e688:	b2b6      	uxthmi	r6, r6
 800e68a:	e7e6      	b.n	800e65a <_printf_i+0x182>
 800e68c:	4615      	mov	r5, r2
 800e68e:	e7bb      	b.n	800e608 <_printf_i+0x130>
 800e690:	682b      	ldr	r3, [r5, #0]
 800e692:	6826      	ldr	r6, [r4, #0]
 800e694:	6961      	ldr	r1, [r4, #20]
 800e696:	1d18      	adds	r0, r3, #4
 800e698:	6028      	str	r0, [r5, #0]
 800e69a:	0635      	lsls	r5, r6, #24
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	d501      	bpl.n	800e6a4 <_printf_i+0x1cc>
 800e6a0:	6019      	str	r1, [r3, #0]
 800e6a2:	e002      	b.n	800e6aa <_printf_i+0x1d2>
 800e6a4:	0670      	lsls	r0, r6, #25
 800e6a6:	d5fb      	bpl.n	800e6a0 <_printf_i+0x1c8>
 800e6a8:	8019      	strh	r1, [r3, #0]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	6123      	str	r3, [r4, #16]
 800e6ae:	4615      	mov	r5, r2
 800e6b0:	e7ba      	b.n	800e628 <_printf_i+0x150>
 800e6b2:	682b      	ldr	r3, [r5, #0]
 800e6b4:	1d1a      	adds	r2, r3, #4
 800e6b6:	602a      	str	r2, [r5, #0]
 800e6b8:	681d      	ldr	r5, [r3, #0]
 800e6ba:	6862      	ldr	r2, [r4, #4]
 800e6bc:	2100      	movs	r1, #0
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f7f1 fda6 	bl	8000210 <memchr>
 800e6c4:	b108      	cbz	r0, 800e6ca <_printf_i+0x1f2>
 800e6c6:	1b40      	subs	r0, r0, r5
 800e6c8:	6060      	str	r0, [r4, #4]
 800e6ca:	6863      	ldr	r3, [r4, #4]
 800e6cc:	6123      	str	r3, [r4, #16]
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6d4:	e7a8      	b.n	800e628 <_printf_i+0x150>
 800e6d6:	6923      	ldr	r3, [r4, #16]
 800e6d8:	462a      	mov	r2, r5
 800e6da:	4649      	mov	r1, r9
 800e6dc:	4640      	mov	r0, r8
 800e6de:	47d0      	blx	sl
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	d0ab      	beq.n	800e63c <_printf_i+0x164>
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	079b      	lsls	r3, r3, #30
 800e6e8:	d413      	bmi.n	800e712 <_printf_i+0x23a>
 800e6ea:	68e0      	ldr	r0, [r4, #12]
 800e6ec:	9b03      	ldr	r3, [sp, #12]
 800e6ee:	4298      	cmp	r0, r3
 800e6f0:	bfb8      	it	lt
 800e6f2:	4618      	movlt	r0, r3
 800e6f4:	e7a4      	b.n	800e640 <_printf_i+0x168>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	4632      	mov	r2, r6
 800e6fa:	4649      	mov	r1, r9
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	47d0      	blx	sl
 800e700:	3001      	adds	r0, #1
 800e702:	d09b      	beq.n	800e63c <_printf_i+0x164>
 800e704:	3501      	adds	r5, #1
 800e706:	68e3      	ldr	r3, [r4, #12]
 800e708:	9903      	ldr	r1, [sp, #12]
 800e70a:	1a5b      	subs	r3, r3, r1
 800e70c:	42ab      	cmp	r3, r5
 800e70e:	dcf2      	bgt.n	800e6f6 <_printf_i+0x21e>
 800e710:	e7eb      	b.n	800e6ea <_printf_i+0x212>
 800e712:	2500      	movs	r5, #0
 800e714:	f104 0619 	add.w	r6, r4, #25
 800e718:	e7f5      	b.n	800e706 <_printf_i+0x22e>
 800e71a:	bf00      	nop
 800e71c:	08013a96 	.word	0x08013a96
 800e720:	08013aa7 	.word	0x08013aa7

0800e724 <_sbrk_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d06      	ldr	r5, [pc, #24]	; (800e740 <_sbrk_r+0x1c>)
 800e728:	2300      	movs	r3, #0
 800e72a:	4604      	mov	r4, r0
 800e72c:	4608      	mov	r0, r1
 800e72e:	602b      	str	r3, [r5, #0]
 800e730:	f004 fe2c 	bl	801338c <_sbrk>
 800e734:	1c43      	adds	r3, r0, #1
 800e736:	d102      	bne.n	800e73e <_sbrk_r+0x1a>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	b103      	cbz	r3, 800e73e <_sbrk_r+0x1a>
 800e73c:	6023      	str	r3, [r4, #0]
 800e73e:	bd38      	pop	{r3, r4, r5, pc}
 800e740:	2001407c 	.word	0x2001407c

0800e744 <siprintf>:
 800e744:	b40e      	push	{r1, r2, r3}
 800e746:	b500      	push	{lr}
 800e748:	b09c      	sub	sp, #112	; 0x70
 800e74a:	ab1d      	add	r3, sp, #116	; 0x74
 800e74c:	9002      	str	r0, [sp, #8]
 800e74e:	9006      	str	r0, [sp, #24]
 800e750:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e754:	4809      	ldr	r0, [pc, #36]	; (800e77c <siprintf+0x38>)
 800e756:	9107      	str	r1, [sp, #28]
 800e758:	9104      	str	r1, [sp, #16]
 800e75a:	4909      	ldr	r1, [pc, #36]	; (800e780 <siprintf+0x3c>)
 800e75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e760:	9105      	str	r1, [sp, #20]
 800e762:	6800      	ldr	r0, [r0, #0]
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	a902      	add	r1, sp, #8
 800e768:	f001 fa8e 	bl	800fc88 <_svfiprintf_r>
 800e76c:	9b02      	ldr	r3, [sp, #8]
 800e76e:	2200      	movs	r2, #0
 800e770:	701a      	strb	r2, [r3, #0]
 800e772:	b01c      	add	sp, #112	; 0x70
 800e774:	f85d eb04 	ldr.w	lr, [sp], #4
 800e778:	b003      	add	sp, #12
 800e77a:	4770      	bx	lr
 800e77c:	20000040 	.word	0x20000040
 800e780:	ffff0208 	.word	0xffff0208

0800e784 <quorem>:
 800e784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	6903      	ldr	r3, [r0, #16]
 800e78a:	690c      	ldr	r4, [r1, #16]
 800e78c:	42a3      	cmp	r3, r4
 800e78e:	4607      	mov	r7, r0
 800e790:	f2c0 8081 	blt.w	800e896 <quorem+0x112>
 800e794:	3c01      	subs	r4, #1
 800e796:	f101 0814 	add.w	r8, r1, #20
 800e79a:	f100 0514 	add.w	r5, r0, #20
 800e79e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7a2:	9301      	str	r3, [sp, #4]
 800e7a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e7a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e7b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e7b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7bc:	d331      	bcc.n	800e822 <quorem+0x9e>
 800e7be:	f04f 0e00 	mov.w	lr, #0
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	46ac      	mov	ip, r5
 800e7c6:	46f2      	mov	sl, lr
 800e7c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7cc:	b293      	uxth	r3, r2
 800e7ce:	fb06 e303 	mla	r3, r6, r3, lr
 800e7d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7dc:	f8dc a000 	ldr.w	sl, [ip]
 800e7e0:	0c12      	lsrs	r2, r2, #16
 800e7e2:	fa13 f38a 	uxtah	r3, r3, sl
 800e7e6:	fb06 e202 	mla	r2, r6, r2, lr
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	9b00      	ldr	r3, [sp, #0]
 800e7ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7f2:	b292      	uxth	r2, r2
 800e7f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800e800:	4581      	cmp	r9, r0
 800e802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e806:	f84c 3b04 	str.w	r3, [ip], #4
 800e80a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e80e:	d2db      	bcs.n	800e7c8 <quorem+0x44>
 800e810:	f855 300b 	ldr.w	r3, [r5, fp]
 800e814:	b92b      	cbnz	r3, 800e822 <quorem+0x9e>
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	3b04      	subs	r3, #4
 800e81a:	429d      	cmp	r5, r3
 800e81c:	461a      	mov	r2, r3
 800e81e:	d32e      	bcc.n	800e87e <quorem+0xfa>
 800e820:	613c      	str	r4, [r7, #16]
 800e822:	4638      	mov	r0, r7
 800e824:	f001 f8bc 	bl	800f9a0 <__mcmp>
 800e828:	2800      	cmp	r0, #0
 800e82a:	db24      	blt.n	800e876 <quorem+0xf2>
 800e82c:	3601      	adds	r6, #1
 800e82e:	4628      	mov	r0, r5
 800e830:	f04f 0c00 	mov.w	ip, #0
 800e834:	f858 2b04 	ldr.w	r2, [r8], #4
 800e838:	f8d0 e000 	ldr.w	lr, [r0]
 800e83c:	b293      	uxth	r3, r2
 800e83e:	ebac 0303 	sub.w	r3, ip, r3
 800e842:	0c12      	lsrs	r2, r2, #16
 800e844:	fa13 f38e 	uxtah	r3, r3, lr
 800e848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e84c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e850:	b29b      	uxth	r3, r3
 800e852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e856:	45c1      	cmp	r9, r8
 800e858:	f840 3b04 	str.w	r3, [r0], #4
 800e85c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e860:	d2e8      	bcs.n	800e834 <quorem+0xb0>
 800e862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e86a:	b922      	cbnz	r2, 800e876 <quorem+0xf2>
 800e86c:	3b04      	subs	r3, #4
 800e86e:	429d      	cmp	r5, r3
 800e870:	461a      	mov	r2, r3
 800e872:	d30a      	bcc.n	800e88a <quorem+0x106>
 800e874:	613c      	str	r4, [r7, #16]
 800e876:	4630      	mov	r0, r6
 800e878:	b003      	add	sp, #12
 800e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e87e:	6812      	ldr	r2, [r2, #0]
 800e880:	3b04      	subs	r3, #4
 800e882:	2a00      	cmp	r2, #0
 800e884:	d1cc      	bne.n	800e820 <quorem+0x9c>
 800e886:	3c01      	subs	r4, #1
 800e888:	e7c7      	b.n	800e81a <quorem+0x96>
 800e88a:	6812      	ldr	r2, [r2, #0]
 800e88c:	3b04      	subs	r3, #4
 800e88e:	2a00      	cmp	r2, #0
 800e890:	d1f0      	bne.n	800e874 <quorem+0xf0>
 800e892:	3c01      	subs	r4, #1
 800e894:	e7eb      	b.n	800e86e <quorem+0xea>
 800e896:	2000      	movs	r0, #0
 800e898:	e7ee      	b.n	800e878 <quorem+0xf4>
 800e89a:	0000      	movs	r0, r0
 800e89c:	0000      	movs	r0, r0
	...

0800e8a0 <_dtoa_r>:
 800e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	ed2d 8b04 	vpush	{d8-d9}
 800e8a8:	ec57 6b10 	vmov	r6, r7, d0
 800e8ac:	b093      	sub	sp, #76	; 0x4c
 800e8ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e8b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e8b4:	9106      	str	r1, [sp, #24]
 800e8b6:	ee10 aa10 	vmov	sl, s0
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e8be:	930c      	str	r3, [sp, #48]	; 0x30
 800e8c0:	46bb      	mov	fp, r7
 800e8c2:	b975      	cbnz	r5, 800e8e2 <_dtoa_r+0x42>
 800e8c4:	2010      	movs	r0, #16
 800e8c6:	f7ff f9c5 	bl	800dc54 <malloc>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	6260      	str	r0, [r4, #36]	; 0x24
 800e8ce:	b920      	cbnz	r0, 800e8da <_dtoa_r+0x3a>
 800e8d0:	4ba7      	ldr	r3, [pc, #668]	; (800eb70 <_dtoa_r+0x2d0>)
 800e8d2:	21ea      	movs	r1, #234	; 0xea
 800e8d4:	48a7      	ldr	r0, [pc, #668]	; (800eb74 <_dtoa_r+0x2d4>)
 800e8d6:	f001 fad7 	bl	800fe88 <__assert_func>
 800e8da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8de:	6005      	str	r5, [r0, #0]
 800e8e0:	60c5      	str	r5, [r0, #12]
 800e8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8e4:	6819      	ldr	r1, [r3, #0]
 800e8e6:	b151      	cbz	r1, 800e8fe <_dtoa_r+0x5e>
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	604a      	str	r2, [r1, #4]
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	4093      	lsls	r3, r2
 800e8f0:	608b      	str	r3, [r1, #8]
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f000 fe12 	bl	800f51c <_Bfree>
 800e8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	1e3b      	subs	r3, r7, #0
 800e900:	bfaa      	itet	ge
 800e902:	2300      	movge	r3, #0
 800e904:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e908:	f8c8 3000 	strge.w	r3, [r8]
 800e90c:	4b9a      	ldr	r3, [pc, #616]	; (800eb78 <_dtoa_r+0x2d8>)
 800e90e:	bfbc      	itt	lt
 800e910:	2201      	movlt	r2, #1
 800e912:	f8c8 2000 	strlt.w	r2, [r8]
 800e916:	ea33 030b 	bics.w	r3, r3, fp
 800e91a:	d11b      	bne.n	800e954 <_dtoa_r+0xb4>
 800e91c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e91e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e922:	6013      	str	r3, [r2, #0]
 800e924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e928:	4333      	orrs	r3, r6
 800e92a:	f000 8592 	beq.w	800f452 <_dtoa_r+0xbb2>
 800e92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e930:	b963      	cbnz	r3, 800e94c <_dtoa_r+0xac>
 800e932:	4b92      	ldr	r3, [pc, #584]	; (800eb7c <_dtoa_r+0x2dc>)
 800e934:	e022      	b.n	800e97c <_dtoa_r+0xdc>
 800e936:	4b92      	ldr	r3, [pc, #584]	; (800eb80 <_dtoa_r+0x2e0>)
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	3308      	adds	r3, #8
 800e93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e93e:	6013      	str	r3, [r2, #0]
 800e940:	9801      	ldr	r0, [sp, #4]
 800e942:	b013      	add	sp, #76	; 0x4c
 800e944:	ecbd 8b04 	vpop	{d8-d9}
 800e948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94c:	4b8b      	ldr	r3, [pc, #556]	; (800eb7c <_dtoa_r+0x2dc>)
 800e94e:	9301      	str	r3, [sp, #4]
 800e950:	3303      	adds	r3, #3
 800e952:	e7f3      	b.n	800e93c <_dtoa_r+0x9c>
 800e954:	2200      	movs	r2, #0
 800e956:	2300      	movs	r3, #0
 800e958:	4650      	mov	r0, sl
 800e95a:	4659      	mov	r1, fp
 800e95c:	f7f2 f8cc 	bl	8000af8 <__aeabi_dcmpeq>
 800e960:	ec4b ab19 	vmov	d9, sl, fp
 800e964:	4680      	mov	r8, r0
 800e966:	b158      	cbz	r0, 800e980 <_dtoa_r+0xe0>
 800e968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e96a:	2301      	movs	r3, #1
 800e96c:	6013      	str	r3, [r2, #0]
 800e96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 856b 	beq.w	800f44c <_dtoa_r+0xbac>
 800e976:	4883      	ldr	r0, [pc, #524]	; (800eb84 <_dtoa_r+0x2e4>)
 800e978:	6018      	str	r0, [r3, #0]
 800e97a:	1e43      	subs	r3, r0, #1
 800e97c:	9301      	str	r3, [sp, #4]
 800e97e:	e7df      	b.n	800e940 <_dtoa_r+0xa0>
 800e980:	ec4b ab10 	vmov	d0, sl, fp
 800e984:	aa10      	add	r2, sp, #64	; 0x40
 800e986:	a911      	add	r1, sp, #68	; 0x44
 800e988:	4620      	mov	r0, r4
 800e98a:	f001 f8af 	bl	800faec <__d2b>
 800e98e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e992:	ee08 0a10 	vmov	s16, r0
 800e996:	2d00      	cmp	r5, #0
 800e998:	f000 8084 	beq.w	800eaa4 <_dtoa_r+0x204>
 800e99c:	ee19 3a90 	vmov	r3, s19
 800e9a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e9a8:	4656      	mov	r6, sl
 800e9aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e9ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e9b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e9b6:	4b74      	ldr	r3, [pc, #464]	; (800eb88 <_dtoa_r+0x2e8>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fc7b 	bl	80002b8 <__aeabi_dsub>
 800e9c2:	a365      	add	r3, pc, #404	; (adr r3, 800eb58 <_dtoa_r+0x2b8>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	f7f1 fe2e 	bl	8000628 <__aeabi_dmul>
 800e9cc:	a364      	add	r3, pc, #400	; (adr r3, 800eb60 <_dtoa_r+0x2c0>)
 800e9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d2:	f7f1 fc73 	bl	80002bc <__adddf3>
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	4628      	mov	r0, r5
 800e9da:	460f      	mov	r7, r1
 800e9dc:	f7f1 fdba 	bl	8000554 <__aeabi_i2d>
 800e9e0:	a361      	add	r3, pc, #388	; (adr r3, 800eb68 <_dtoa_r+0x2c8>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f1 fe1f 	bl	8000628 <__aeabi_dmul>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	f7f1 fc63 	bl	80002bc <__adddf3>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460f      	mov	r7, r1
 800e9fa:	f7f2 f8c5 	bl	8000b88 <__aeabi_d2iz>
 800e9fe:	2200      	movs	r2, #0
 800ea00:	9000      	str	r0, [sp, #0]
 800ea02:	2300      	movs	r3, #0
 800ea04:	4630      	mov	r0, r6
 800ea06:	4639      	mov	r1, r7
 800ea08:	f7f2 f880 	bl	8000b0c <__aeabi_dcmplt>
 800ea0c:	b150      	cbz	r0, 800ea24 <_dtoa_r+0x184>
 800ea0e:	9800      	ldr	r0, [sp, #0]
 800ea10:	f7f1 fda0 	bl	8000554 <__aeabi_i2d>
 800ea14:	4632      	mov	r2, r6
 800ea16:	463b      	mov	r3, r7
 800ea18:	f7f2 f86e 	bl	8000af8 <__aeabi_dcmpeq>
 800ea1c:	b910      	cbnz	r0, 800ea24 <_dtoa_r+0x184>
 800ea1e:	9b00      	ldr	r3, [sp, #0]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	9b00      	ldr	r3, [sp, #0]
 800ea26:	2b16      	cmp	r3, #22
 800ea28:	d85a      	bhi.n	800eae0 <_dtoa_r+0x240>
 800ea2a:	9a00      	ldr	r2, [sp, #0]
 800ea2c:	4b57      	ldr	r3, [pc, #348]	; (800eb8c <_dtoa_r+0x2ec>)
 800ea2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea36:	ec51 0b19 	vmov	r0, r1, d9
 800ea3a:	f7f2 f867 	bl	8000b0c <__aeabi_dcmplt>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d050      	beq.n	800eae4 <_dtoa_r+0x244>
 800ea42:	9b00      	ldr	r3, [sp, #0]
 800ea44:	3b01      	subs	r3, #1
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea4e:	1b5d      	subs	r5, r3, r5
 800ea50:	1e6b      	subs	r3, r5, #1
 800ea52:	9305      	str	r3, [sp, #20]
 800ea54:	bf45      	ittet	mi
 800ea56:	f1c5 0301 	rsbmi	r3, r5, #1
 800ea5a:	9304      	strmi	r3, [sp, #16]
 800ea5c:	2300      	movpl	r3, #0
 800ea5e:	2300      	movmi	r3, #0
 800ea60:	bf4c      	ite	mi
 800ea62:	9305      	strmi	r3, [sp, #20]
 800ea64:	9304      	strpl	r3, [sp, #16]
 800ea66:	9b00      	ldr	r3, [sp, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	db3d      	blt.n	800eae8 <_dtoa_r+0x248>
 800ea6c:	9b05      	ldr	r3, [sp, #20]
 800ea6e:	9a00      	ldr	r2, [sp, #0]
 800ea70:	920a      	str	r2, [sp, #40]	; 0x28
 800ea72:	4413      	add	r3, r2
 800ea74:	9305      	str	r3, [sp, #20]
 800ea76:	2300      	movs	r3, #0
 800ea78:	9307      	str	r3, [sp, #28]
 800ea7a:	9b06      	ldr	r3, [sp, #24]
 800ea7c:	2b09      	cmp	r3, #9
 800ea7e:	f200 8089 	bhi.w	800eb94 <_dtoa_r+0x2f4>
 800ea82:	2b05      	cmp	r3, #5
 800ea84:	bfc4      	itt	gt
 800ea86:	3b04      	subgt	r3, #4
 800ea88:	9306      	strgt	r3, [sp, #24]
 800ea8a:	9b06      	ldr	r3, [sp, #24]
 800ea8c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea90:	bfcc      	ite	gt
 800ea92:	2500      	movgt	r5, #0
 800ea94:	2501      	movle	r5, #1
 800ea96:	2b03      	cmp	r3, #3
 800ea98:	f200 8087 	bhi.w	800ebaa <_dtoa_r+0x30a>
 800ea9c:	e8df f003 	tbb	[pc, r3]
 800eaa0:	59383a2d 	.word	0x59383a2d
 800eaa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eaa8:	441d      	add	r5, r3
 800eaaa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eaae:	2b20      	cmp	r3, #32
 800eab0:	bfc1      	itttt	gt
 800eab2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eab6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eaba:	fa0b f303 	lslgt.w	r3, fp, r3
 800eabe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eac2:	bfda      	itte	le
 800eac4:	f1c3 0320 	rsble	r3, r3, #32
 800eac8:	fa06 f003 	lslle.w	r0, r6, r3
 800eacc:	4318      	orrgt	r0, r3
 800eace:	f7f1 fd31 	bl	8000534 <__aeabi_ui2d>
 800ead2:	2301      	movs	r3, #1
 800ead4:	4606      	mov	r6, r0
 800ead6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eada:	3d01      	subs	r5, #1
 800eadc:	930e      	str	r3, [sp, #56]	; 0x38
 800eade:	e76a      	b.n	800e9b6 <_dtoa_r+0x116>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e7b2      	b.n	800ea4a <_dtoa_r+0x1aa>
 800eae4:	900b      	str	r0, [sp, #44]	; 0x2c
 800eae6:	e7b1      	b.n	800ea4c <_dtoa_r+0x1ac>
 800eae8:	9b04      	ldr	r3, [sp, #16]
 800eaea:	9a00      	ldr	r2, [sp, #0]
 800eaec:	1a9b      	subs	r3, r3, r2
 800eaee:	9304      	str	r3, [sp, #16]
 800eaf0:	4253      	negs	r3, r2
 800eaf2:	9307      	str	r3, [sp, #28]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	930a      	str	r3, [sp, #40]	; 0x28
 800eaf8:	e7bf      	b.n	800ea7a <_dtoa_r+0x1da>
 800eafa:	2300      	movs	r3, #0
 800eafc:	9308      	str	r3, [sp, #32]
 800eafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc55      	bgt.n	800ebb0 <_dtoa_r+0x310>
 800eb04:	2301      	movs	r3, #1
 800eb06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb0e:	e00c      	b.n	800eb2a <_dtoa_r+0x28a>
 800eb10:	2301      	movs	r3, #1
 800eb12:	e7f3      	b.n	800eafc <_dtoa_r+0x25c>
 800eb14:	2300      	movs	r3, #0
 800eb16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb18:	9308      	str	r3, [sp, #32]
 800eb1a:	9b00      	ldr	r3, [sp, #0]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	9302      	str	r3, [sp, #8]
 800eb20:	3301      	adds	r3, #1
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	9303      	str	r3, [sp, #12]
 800eb26:	bfb8      	it	lt
 800eb28:	2301      	movlt	r3, #1
 800eb2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	6042      	str	r2, [r0, #4]
 800eb30:	2204      	movs	r2, #4
 800eb32:	f102 0614 	add.w	r6, r2, #20
 800eb36:	429e      	cmp	r6, r3
 800eb38:	6841      	ldr	r1, [r0, #4]
 800eb3a:	d93d      	bls.n	800ebb8 <_dtoa_r+0x318>
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 fcad 	bl	800f49c <_Balloc>
 800eb42:	9001      	str	r0, [sp, #4]
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d13b      	bne.n	800ebc0 <_dtoa_r+0x320>
 800eb48:	4b11      	ldr	r3, [pc, #68]	; (800eb90 <_dtoa_r+0x2f0>)
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb50:	e6c0      	b.n	800e8d4 <_dtoa_r+0x34>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e7df      	b.n	800eb16 <_dtoa_r+0x276>
 800eb56:	bf00      	nop
 800eb58:	636f4361 	.word	0x636f4361
 800eb5c:	3fd287a7 	.word	0x3fd287a7
 800eb60:	8b60c8b3 	.word	0x8b60c8b3
 800eb64:	3fc68a28 	.word	0x3fc68a28
 800eb68:	509f79fb 	.word	0x509f79fb
 800eb6c:	3fd34413 	.word	0x3fd34413
 800eb70:	08013ac5 	.word	0x08013ac5
 800eb74:	08013adc 	.word	0x08013adc
 800eb78:	7ff00000 	.word	0x7ff00000
 800eb7c:	08013ac1 	.word	0x08013ac1
 800eb80:	08013ab8 	.word	0x08013ab8
 800eb84:	08013a95 	.word	0x08013a95
 800eb88:	3ff80000 	.word	0x3ff80000
 800eb8c:	08013bd0 	.word	0x08013bd0
 800eb90:	08013b37 	.word	0x08013b37
 800eb94:	2501      	movs	r5, #1
 800eb96:	2300      	movs	r3, #0
 800eb98:	9306      	str	r3, [sp, #24]
 800eb9a:	9508      	str	r5, [sp, #32]
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eba0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eba4:	2200      	movs	r2, #0
 800eba6:	2312      	movs	r3, #18
 800eba8:	e7b0      	b.n	800eb0c <_dtoa_r+0x26c>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	9308      	str	r3, [sp, #32]
 800ebae:	e7f5      	b.n	800eb9c <_dtoa_r+0x2fc>
 800ebb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ebb6:	e7b8      	b.n	800eb2a <_dtoa_r+0x28a>
 800ebb8:	3101      	adds	r1, #1
 800ebba:	6041      	str	r1, [r0, #4]
 800ebbc:	0052      	lsls	r2, r2, #1
 800ebbe:	e7b8      	b.n	800eb32 <_dtoa_r+0x292>
 800ebc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebc2:	9a01      	ldr	r2, [sp, #4]
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	2b0e      	cmp	r3, #14
 800ebca:	f200 809d 	bhi.w	800ed08 <_dtoa_r+0x468>
 800ebce:	2d00      	cmp	r5, #0
 800ebd0:	f000 809a 	beq.w	800ed08 <_dtoa_r+0x468>
 800ebd4:	9b00      	ldr	r3, [sp, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	dd32      	ble.n	800ec40 <_dtoa_r+0x3a0>
 800ebda:	4ab7      	ldr	r2, [pc, #732]	; (800eeb8 <_dtoa_r+0x618>)
 800ebdc:	f003 030f 	and.w	r3, r3, #15
 800ebe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebe8:	9b00      	ldr	r3, [sp, #0]
 800ebea:	05d8      	lsls	r0, r3, #23
 800ebec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ebf0:	d516      	bpl.n	800ec20 <_dtoa_r+0x380>
 800ebf2:	4bb2      	ldr	r3, [pc, #712]	; (800eebc <_dtoa_r+0x61c>)
 800ebf4:	ec51 0b19 	vmov	r0, r1, d9
 800ebf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebfc:	f7f1 fe3e 	bl	800087c <__aeabi_ddiv>
 800ec00:	f007 070f 	and.w	r7, r7, #15
 800ec04:	4682      	mov	sl, r0
 800ec06:	468b      	mov	fp, r1
 800ec08:	2503      	movs	r5, #3
 800ec0a:	4eac      	ldr	r6, [pc, #688]	; (800eebc <_dtoa_r+0x61c>)
 800ec0c:	b957      	cbnz	r7, 800ec24 <_dtoa_r+0x384>
 800ec0e:	4642      	mov	r2, r8
 800ec10:	464b      	mov	r3, r9
 800ec12:	4650      	mov	r0, sl
 800ec14:	4659      	mov	r1, fp
 800ec16:	f7f1 fe31 	bl	800087c <__aeabi_ddiv>
 800ec1a:	4682      	mov	sl, r0
 800ec1c:	468b      	mov	fp, r1
 800ec1e:	e028      	b.n	800ec72 <_dtoa_r+0x3d2>
 800ec20:	2502      	movs	r5, #2
 800ec22:	e7f2      	b.n	800ec0a <_dtoa_r+0x36a>
 800ec24:	07f9      	lsls	r1, r7, #31
 800ec26:	d508      	bpl.n	800ec3a <_dtoa_r+0x39a>
 800ec28:	4640      	mov	r0, r8
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec30:	f7f1 fcfa 	bl	8000628 <__aeabi_dmul>
 800ec34:	3501      	adds	r5, #1
 800ec36:	4680      	mov	r8, r0
 800ec38:	4689      	mov	r9, r1
 800ec3a:	107f      	asrs	r7, r7, #1
 800ec3c:	3608      	adds	r6, #8
 800ec3e:	e7e5      	b.n	800ec0c <_dtoa_r+0x36c>
 800ec40:	f000 809b 	beq.w	800ed7a <_dtoa_r+0x4da>
 800ec44:	9b00      	ldr	r3, [sp, #0]
 800ec46:	4f9d      	ldr	r7, [pc, #628]	; (800eebc <_dtoa_r+0x61c>)
 800ec48:	425e      	negs	r6, r3
 800ec4a:	4b9b      	ldr	r3, [pc, #620]	; (800eeb8 <_dtoa_r+0x618>)
 800ec4c:	f006 020f 	and.w	r2, r6, #15
 800ec50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	ec51 0b19 	vmov	r0, r1, d9
 800ec5c:	f7f1 fce4 	bl	8000628 <__aeabi_dmul>
 800ec60:	1136      	asrs	r6, r6, #4
 800ec62:	4682      	mov	sl, r0
 800ec64:	468b      	mov	fp, r1
 800ec66:	2300      	movs	r3, #0
 800ec68:	2502      	movs	r5, #2
 800ec6a:	2e00      	cmp	r6, #0
 800ec6c:	d17a      	bne.n	800ed64 <_dtoa_r+0x4c4>
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1d3      	bne.n	800ec1a <_dtoa_r+0x37a>
 800ec72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 8082 	beq.w	800ed7e <_dtoa_r+0x4de>
 800ec7a:	4b91      	ldr	r3, [pc, #580]	; (800eec0 <_dtoa_r+0x620>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	4650      	mov	r0, sl
 800ec80:	4659      	mov	r1, fp
 800ec82:	f7f1 ff43 	bl	8000b0c <__aeabi_dcmplt>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d079      	beq.n	800ed7e <_dtoa_r+0x4de>
 800ec8a:	9b03      	ldr	r3, [sp, #12]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d076      	beq.n	800ed7e <_dtoa_r+0x4de>
 800ec90:	9b02      	ldr	r3, [sp, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	dd36      	ble.n	800ed04 <_dtoa_r+0x464>
 800ec96:	9b00      	ldr	r3, [sp, #0]
 800ec98:	4650      	mov	r0, sl
 800ec9a:	4659      	mov	r1, fp
 800ec9c:	1e5f      	subs	r7, r3, #1
 800ec9e:	2200      	movs	r2, #0
 800eca0:	4b88      	ldr	r3, [pc, #544]	; (800eec4 <_dtoa_r+0x624>)
 800eca2:	f7f1 fcc1 	bl	8000628 <__aeabi_dmul>
 800eca6:	9e02      	ldr	r6, [sp, #8]
 800eca8:	4682      	mov	sl, r0
 800ecaa:	468b      	mov	fp, r1
 800ecac:	3501      	adds	r5, #1
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f7f1 fc50 	bl	8000554 <__aeabi_i2d>
 800ecb4:	4652      	mov	r2, sl
 800ecb6:	465b      	mov	r3, fp
 800ecb8:	f7f1 fcb6 	bl	8000628 <__aeabi_dmul>
 800ecbc:	4b82      	ldr	r3, [pc, #520]	; (800eec8 <_dtoa_r+0x628>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f7f1 fafc 	bl	80002bc <__adddf3>
 800ecc4:	46d0      	mov	r8, sl
 800ecc6:	46d9      	mov	r9, fp
 800ecc8:	4682      	mov	sl, r0
 800ecca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ecce:	2e00      	cmp	r6, #0
 800ecd0:	d158      	bne.n	800ed84 <_dtoa_r+0x4e4>
 800ecd2:	4b7e      	ldr	r3, [pc, #504]	; (800eecc <_dtoa_r+0x62c>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	4649      	mov	r1, r9
 800ecda:	f7f1 faed 	bl	80002b8 <__aeabi_dsub>
 800ecde:	4652      	mov	r2, sl
 800ece0:	465b      	mov	r3, fp
 800ece2:	4680      	mov	r8, r0
 800ece4:	4689      	mov	r9, r1
 800ece6:	f7f1 ff2f 	bl	8000b48 <__aeabi_dcmpgt>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	f040 8295 	bne.w	800f21a <_dtoa_r+0x97a>
 800ecf0:	4652      	mov	r2, sl
 800ecf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecf6:	4640      	mov	r0, r8
 800ecf8:	4649      	mov	r1, r9
 800ecfa:	f7f1 ff07 	bl	8000b0c <__aeabi_dcmplt>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	f040 8289 	bne.w	800f216 <_dtoa_r+0x976>
 800ed04:	ec5b ab19 	vmov	sl, fp, d9
 800ed08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f2c0 8148 	blt.w	800efa0 <_dtoa_r+0x700>
 800ed10:	9a00      	ldr	r2, [sp, #0]
 800ed12:	2a0e      	cmp	r2, #14
 800ed14:	f300 8144 	bgt.w	800efa0 <_dtoa_r+0x700>
 800ed18:	4b67      	ldr	r3, [pc, #412]	; (800eeb8 <_dtoa_r+0x618>)
 800ed1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f280 80d5 	bge.w	800eed4 <_dtoa_r+0x634>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f300 80d1 	bgt.w	800eed4 <_dtoa_r+0x634>
 800ed32:	f040 826f 	bne.w	800f214 <_dtoa_r+0x974>
 800ed36:	4b65      	ldr	r3, [pc, #404]	; (800eecc <_dtoa_r+0x62c>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	4640      	mov	r0, r8
 800ed3c:	4649      	mov	r1, r9
 800ed3e:	f7f1 fc73 	bl	8000628 <__aeabi_dmul>
 800ed42:	4652      	mov	r2, sl
 800ed44:	465b      	mov	r3, fp
 800ed46:	f7f1 fef5 	bl	8000b34 <__aeabi_dcmpge>
 800ed4a:	9e03      	ldr	r6, [sp, #12]
 800ed4c:	4637      	mov	r7, r6
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	f040 8245 	bne.w	800f1de <_dtoa_r+0x93e>
 800ed54:	9d01      	ldr	r5, [sp, #4]
 800ed56:	2331      	movs	r3, #49	; 0x31
 800ed58:	f805 3b01 	strb.w	r3, [r5], #1
 800ed5c:	9b00      	ldr	r3, [sp, #0]
 800ed5e:	3301      	adds	r3, #1
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	e240      	b.n	800f1e6 <_dtoa_r+0x946>
 800ed64:	07f2      	lsls	r2, r6, #31
 800ed66:	d505      	bpl.n	800ed74 <_dtoa_r+0x4d4>
 800ed68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed6c:	f7f1 fc5c 	bl	8000628 <__aeabi_dmul>
 800ed70:	3501      	adds	r5, #1
 800ed72:	2301      	movs	r3, #1
 800ed74:	1076      	asrs	r6, r6, #1
 800ed76:	3708      	adds	r7, #8
 800ed78:	e777      	b.n	800ec6a <_dtoa_r+0x3ca>
 800ed7a:	2502      	movs	r5, #2
 800ed7c:	e779      	b.n	800ec72 <_dtoa_r+0x3d2>
 800ed7e:	9f00      	ldr	r7, [sp, #0]
 800ed80:	9e03      	ldr	r6, [sp, #12]
 800ed82:	e794      	b.n	800ecae <_dtoa_r+0x40e>
 800ed84:	9901      	ldr	r1, [sp, #4]
 800ed86:	4b4c      	ldr	r3, [pc, #304]	; (800eeb8 <_dtoa_r+0x618>)
 800ed88:	4431      	add	r1, r6
 800ed8a:	910d      	str	r1, [sp, #52]	; 0x34
 800ed8c:	9908      	ldr	r1, [sp, #32]
 800ed8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed96:	2900      	cmp	r1, #0
 800ed98:	d043      	beq.n	800ee22 <_dtoa_r+0x582>
 800ed9a:	494d      	ldr	r1, [pc, #308]	; (800eed0 <_dtoa_r+0x630>)
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	f7f1 fd6d 	bl	800087c <__aeabi_ddiv>
 800eda2:	4652      	mov	r2, sl
 800eda4:	465b      	mov	r3, fp
 800eda6:	f7f1 fa87 	bl	80002b8 <__aeabi_dsub>
 800edaa:	9d01      	ldr	r5, [sp, #4]
 800edac:	4682      	mov	sl, r0
 800edae:	468b      	mov	fp, r1
 800edb0:	4649      	mov	r1, r9
 800edb2:	4640      	mov	r0, r8
 800edb4:	f7f1 fee8 	bl	8000b88 <__aeabi_d2iz>
 800edb8:	4606      	mov	r6, r0
 800edba:	f7f1 fbcb 	bl	8000554 <__aeabi_i2d>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4640      	mov	r0, r8
 800edc4:	4649      	mov	r1, r9
 800edc6:	f7f1 fa77 	bl	80002b8 <__aeabi_dsub>
 800edca:	3630      	adds	r6, #48	; 0x30
 800edcc:	f805 6b01 	strb.w	r6, [r5], #1
 800edd0:	4652      	mov	r2, sl
 800edd2:	465b      	mov	r3, fp
 800edd4:	4680      	mov	r8, r0
 800edd6:	4689      	mov	r9, r1
 800edd8:	f7f1 fe98 	bl	8000b0c <__aeabi_dcmplt>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d163      	bne.n	800eea8 <_dtoa_r+0x608>
 800ede0:	4642      	mov	r2, r8
 800ede2:	464b      	mov	r3, r9
 800ede4:	4936      	ldr	r1, [pc, #216]	; (800eec0 <_dtoa_r+0x620>)
 800ede6:	2000      	movs	r0, #0
 800ede8:	f7f1 fa66 	bl	80002b8 <__aeabi_dsub>
 800edec:	4652      	mov	r2, sl
 800edee:	465b      	mov	r3, fp
 800edf0:	f7f1 fe8c 	bl	8000b0c <__aeabi_dcmplt>
 800edf4:	2800      	cmp	r0, #0
 800edf6:	f040 80b5 	bne.w	800ef64 <_dtoa_r+0x6c4>
 800edfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edfc:	429d      	cmp	r5, r3
 800edfe:	d081      	beq.n	800ed04 <_dtoa_r+0x464>
 800ee00:	4b30      	ldr	r3, [pc, #192]	; (800eec4 <_dtoa_r+0x624>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	4650      	mov	r0, sl
 800ee06:	4659      	mov	r1, fp
 800ee08:	f7f1 fc0e 	bl	8000628 <__aeabi_dmul>
 800ee0c:	4b2d      	ldr	r3, [pc, #180]	; (800eec4 <_dtoa_r+0x624>)
 800ee0e:	4682      	mov	sl, r0
 800ee10:	468b      	mov	fp, r1
 800ee12:	4640      	mov	r0, r8
 800ee14:	4649      	mov	r1, r9
 800ee16:	2200      	movs	r2, #0
 800ee18:	f7f1 fc06 	bl	8000628 <__aeabi_dmul>
 800ee1c:	4680      	mov	r8, r0
 800ee1e:	4689      	mov	r9, r1
 800ee20:	e7c6      	b.n	800edb0 <_dtoa_r+0x510>
 800ee22:	4650      	mov	r0, sl
 800ee24:	4659      	mov	r1, fp
 800ee26:	f7f1 fbff 	bl	8000628 <__aeabi_dmul>
 800ee2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee2c:	9d01      	ldr	r5, [sp, #4]
 800ee2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee30:	4682      	mov	sl, r0
 800ee32:	468b      	mov	fp, r1
 800ee34:	4649      	mov	r1, r9
 800ee36:	4640      	mov	r0, r8
 800ee38:	f7f1 fea6 	bl	8000b88 <__aeabi_d2iz>
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	f7f1 fb89 	bl	8000554 <__aeabi_i2d>
 800ee42:	3630      	adds	r6, #48	; 0x30
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4640      	mov	r0, r8
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fa34 	bl	80002b8 <__aeabi_dsub>
 800ee50:	f805 6b01 	strb.w	r6, [r5], #1
 800ee54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee56:	429d      	cmp	r5, r3
 800ee58:	4680      	mov	r8, r0
 800ee5a:	4689      	mov	r9, r1
 800ee5c:	f04f 0200 	mov.w	r2, #0
 800ee60:	d124      	bne.n	800eeac <_dtoa_r+0x60c>
 800ee62:	4b1b      	ldr	r3, [pc, #108]	; (800eed0 <_dtoa_r+0x630>)
 800ee64:	4650      	mov	r0, sl
 800ee66:	4659      	mov	r1, fp
 800ee68:	f7f1 fa28 	bl	80002bc <__adddf3>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	4640      	mov	r0, r8
 800ee72:	4649      	mov	r1, r9
 800ee74:	f7f1 fe68 	bl	8000b48 <__aeabi_dcmpgt>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d173      	bne.n	800ef64 <_dtoa_r+0x6c4>
 800ee7c:	4652      	mov	r2, sl
 800ee7e:	465b      	mov	r3, fp
 800ee80:	4913      	ldr	r1, [pc, #76]	; (800eed0 <_dtoa_r+0x630>)
 800ee82:	2000      	movs	r0, #0
 800ee84:	f7f1 fa18 	bl	80002b8 <__aeabi_dsub>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	4649      	mov	r1, r9
 800ee90:	f7f1 fe3c 	bl	8000b0c <__aeabi_dcmplt>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	f43f af35 	beq.w	800ed04 <_dtoa_r+0x464>
 800ee9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee9c:	1e6b      	subs	r3, r5, #1
 800ee9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eea0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eea4:	2b30      	cmp	r3, #48	; 0x30
 800eea6:	d0f8      	beq.n	800ee9a <_dtoa_r+0x5fa>
 800eea8:	9700      	str	r7, [sp, #0]
 800eeaa:	e049      	b.n	800ef40 <_dtoa_r+0x6a0>
 800eeac:	4b05      	ldr	r3, [pc, #20]	; (800eec4 <_dtoa_r+0x624>)
 800eeae:	f7f1 fbbb 	bl	8000628 <__aeabi_dmul>
 800eeb2:	4680      	mov	r8, r0
 800eeb4:	4689      	mov	r9, r1
 800eeb6:	e7bd      	b.n	800ee34 <_dtoa_r+0x594>
 800eeb8:	08013bd0 	.word	0x08013bd0
 800eebc:	08013ba8 	.word	0x08013ba8
 800eec0:	3ff00000 	.word	0x3ff00000
 800eec4:	40240000 	.word	0x40240000
 800eec8:	401c0000 	.word	0x401c0000
 800eecc:	40140000 	.word	0x40140000
 800eed0:	3fe00000 	.word	0x3fe00000
 800eed4:	9d01      	ldr	r5, [sp, #4]
 800eed6:	4656      	mov	r6, sl
 800eed8:	465f      	mov	r7, fp
 800eeda:	4642      	mov	r2, r8
 800eedc:	464b      	mov	r3, r9
 800eede:	4630      	mov	r0, r6
 800eee0:	4639      	mov	r1, r7
 800eee2:	f7f1 fccb 	bl	800087c <__aeabi_ddiv>
 800eee6:	f7f1 fe4f 	bl	8000b88 <__aeabi_d2iz>
 800eeea:	4682      	mov	sl, r0
 800eeec:	f7f1 fb32 	bl	8000554 <__aeabi_i2d>
 800eef0:	4642      	mov	r2, r8
 800eef2:	464b      	mov	r3, r9
 800eef4:	f7f1 fb98 	bl	8000628 <__aeabi_dmul>
 800eef8:	4602      	mov	r2, r0
 800eefa:	460b      	mov	r3, r1
 800eefc:	4630      	mov	r0, r6
 800eefe:	4639      	mov	r1, r7
 800ef00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ef04:	f7f1 f9d8 	bl	80002b8 <__aeabi_dsub>
 800ef08:	f805 6b01 	strb.w	r6, [r5], #1
 800ef0c:	9e01      	ldr	r6, [sp, #4]
 800ef0e:	9f03      	ldr	r7, [sp, #12]
 800ef10:	1bae      	subs	r6, r5, r6
 800ef12:	42b7      	cmp	r7, r6
 800ef14:	4602      	mov	r2, r0
 800ef16:	460b      	mov	r3, r1
 800ef18:	d135      	bne.n	800ef86 <_dtoa_r+0x6e6>
 800ef1a:	f7f1 f9cf 	bl	80002bc <__adddf3>
 800ef1e:	4642      	mov	r2, r8
 800ef20:	464b      	mov	r3, r9
 800ef22:	4606      	mov	r6, r0
 800ef24:	460f      	mov	r7, r1
 800ef26:	f7f1 fe0f 	bl	8000b48 <__aeabi_dcmpgt>
 800ef2a:	b9d0      	cbnz	r0, 800ef62 <_dtoa_r+0x6c2>
 800ef2c:	4642      	mov	r2, r8
 800ef2e:	464b      	mov	r3, r9
 800ef30:	4630      	mov	r0, r6
 800ef32:	4639      	mov	r1, r7
 800ef34:	f7f1 fde0 	bl	8000af8 <__aeabi_dcmpeq>
 800ef38:	b110      	cbz	r0, 800ef40 <_dtoa_r+0x6a0>
 800ef3a:	f01a 0f01 	tst.w	sl, #1
 800ef3e:	d110      	bne.n	800ef62 <_dtoa_r+0x6c2>
 800ef40:	4620      	mov	r0, r4
 800ef42:	ee18 1a10 	vmov	r1, s16
 800ef46:	f000 fae9 	bl	800f51c <_Bfree>
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	9800      	ldr	r0, [sp, #0]
 800ef4e:	702b      	strb	r3, [r5, #0]
 800ef50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef52:	3001      	adds	r0, #1
 800ef54:	6018      	str	r0, [r3, #0]
 800ef56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	f43f acf1 	beq.w	800e940 <_dtoa_r+0xa0>
 800ef5e:	601d      	str	r5, [r3, #0]
 800ef60:	e4ee      	b.n	800e940 <_dtoa_r+0xa0>
 800ef62:	9f00      	ldr	r7, [sp, #0]
 800ef64:	462b      	mov	r3, r5
 800ef66:	461d      	mov	r5, r3
 800ef68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef6c:	2a39      	cmp	r2, #57	; 0x39
 800ef6e:	d106      	bne.n	800ef7e <_dtoa_r+0x6de>
 800ef70:	9a01      	ldr	r2, [sp, #4]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d1f7      	bne.n	800ef66 <_dtoa_r+0x6c6>
 800ef76:	9901      	ldr	r1, [sp, #4]
 800ef78:	2230      	movs	r2, #48	; 0x30
 800ef7a:	3701      	adds	r7, #1
 800ef7c:	700a      	strb	r2, [r1, #0]
 800ef7e:	781a      	ldrb	r2, [r3, #0]
 800ef80:	3201      	adds	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
 800ef84:	e790      	b.n	800eea8 <_dtoa_r+0x608>
 800ef86:	4ba6      	ldr	r3, [pc, #664]	; (800f220 <_dtoa_r+0x980>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f7f1 fb4d 	bl	8000628 <__aeabi_dmul>
 800ef8e:	2200      	movs	r2, #0
 800ef90:	2300      	movs	r3, #0
 800ef92:	4606      	mov	r6, r0
 800ef94:	460f      	mov	r7, r1
 800ef96:	f7f1 fdaf 	bl	8000af8 <__aeabi_dcmpeq>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d09d      	beq.n	800eeda <_dtoa_r+0x63a>
 800ef9e:	e7cf      	b.n	800ef40 <_dtoa_r+0x6a0>
 800efa0:	9a08      	ldr	r2, [sp, #32]
 800efa2:	2a00      	cmp	r2, #0
 800efa4:	f000 80d7 	beq.w	800f156 <_dtoa_r+0x8b6>
 800efa8:	9a06      	ldr	r2, [sp, #24]
 800efaa:	2a01      	cmp	r2, #1
 800efac:	f300 80ba 	bgt.w	800f124 <_dtoa_r+0x884>
 800efb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efb2:	2a00      	cmp	r2, #0
 800efb4:	f000 80b2 	beq.w	800f11c <_dtoa_r+0x87c>
 800efb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800efbc:	9e07      	ldr	r6, [sp, #28]
 800efbe:	9d04      	ldr	r5, [sp, #16]
 800efc0:	9a04      	ldr	r2, [sp, #16]
 800efc2:	441a      	add	r2, r3
 800efc4:	9204      	str	r2, [sp, #16]
 800efc6:	9a05      	ldr	r2, [sp, #20]
 800efc8:	2101      	movs	r1, #1
 800efca:	441a      	add	r2, r3
 800efcc:	4620      	mov	r0, r4
 800efce:	9205      	str	r2, [sp, #20]
 800efd0:	f000 fb5c 	bl	800f68c <__i2b>
 800efd4:	4607      	mov	r7, r0
 800efd6:	2d00      	cmp	r5, #0
 800efd8:	dd0c      	ble.n	800eff4 <_dtoa_r+0x754>
 800efda:	9b05      	ldr	r3, [sp, #20]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dd09      	ble.n	800eff4 <_dtoa_r+0x754>
 800efe0:	42ab      	cmp	r3, r5
 800efe2:	9a04      	ldr	r2, [sp, #16]
 800efe4:	bfa8      	it	ge
 800efe6:	462b      	movge	r3, r5
 800efe8:	1ad2      	subs	r2, r2, r3
 800efea:	9204      	str	r2, [sp, #16]
 800efec:	9a05      	ldr	r2, [sp, #20]
 800efee:	1aed      	subs	r5, r5, r3
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	9305      	str	r3, [sp, #20]
 800eff4:	9b07      	ldr	r3, [sp, #28]
 800eff6:	b31b      	cbz	r3, 800f040 <_dtoa_r+0x7a0>
 800eff8:	9b08      	ldr	r3, [sp, #32]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 80af 	beq.w	800f15e <_dtoa_r+0x8be>
 800f000:	2e00      	cmp	r6, #0
 800f002:	dd13      	ble.n	800f02c <_dtoa_r+0x78c>
 800f004:	4639      	mov	r1, r7
 800f006:	4632      	mov	r2, r6
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 fbff 	bl	800f80c <__pow5mult>
 800f00e:	ee18 2a10 	vmov	r2, s16
 800f012:	4601      	mov	r1, r0
 800f014:	4607      	mov	r7, r0
 800f016:	4620      	mov	r0, r4
 800f018:	f000 fb4e 	bl	800f6b8 <__multiply>
 800f01c:	ee18 1a10 	vmov	r1, s16
 800f020:	4680      	mov	r8, r0
 800f022:	4620      	mov	r0, r4
 800f024:	f000 fa7a 	bl	800f51c <_Bfree>
 800f028:	ee08 8a10 	vmov	s16, r8
 800f02c:	9b07      	ldr	r3, [sp, #28]
 800f02e:	1b9a      	subs	r2, r3, r6
 800f030:	d006      	beq.n	800f040 <_dtoa_r+0x7a0>
 800f032:	ee18 1a10 	vmov	r1, s16
 800f036:	4620      	mov	r0, r4
 800f038:	f000 fbe8 	bl	800f80c <__pow5mult>
 800f03c:	ee08 0a10 	vmov	s16, r0
 800f040:	2101      	movs	r1, #1
 800f042:	4620      	mov	r0, r4
 800f044:	f000 fb22 	bl	800f68c <__i2b>
 800f048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	4606      	mov	r6, r0
 800f04e:	f340 8088 	ble.w	800f162 <_dtoa_r+0x8c2>
 800f052:	461a      	mov	r2, r3
 800f054:	4601      	mov	r1, r0
 800f056:	4620      	mov	r0, r4
 800f058:	f000 fbd8 	bl	800f80c <__pow5mult>
 800f05c:	9b06      	ldr	r3, [sp, #24]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	4606      	mov	r6, r0
 800f062:	f340 8081 	ble.w	800f168 <_dtoa_r+0x8c8>
 800f066:	f04f 0800 	mov.w	r8, #0
 800f06a:	6933      	ldr	r3, [r6, #16]
 800f06c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f070:	6918      	ldr	r0, [r3, #16]
 800f072:	f000 fabb 	bl	800f5ec <__hi0bits>
 800f076:	f1c0 0020 	rsb	r0, r0, #32
 800f07a:	9b05      	ldr	r3, [sp, #20]
 800f07c:	4418      	add	r0, r3
 800f07e:	f010 001f 	ands.w	r0, r0, #31
 800f082:	f000 8092 	beq.w	800f1aa <_dtoa_r+0x90a>
 800f086:	f1c0 0320 	rsb	r3, r0, #32
 800f08a:	2b04      	cmp	r3, #4
 800f08c:	f340 808a 	ble.w	800f1a4 <_dtoa_r+0x904>
 800f090:	f1c0 001c 	rsb	r0, r0, #28
 800f094:	9b04      	ldr	r3, [sp, #16]
 800f096:	4403      	add	r3, r0
 800f098:	9304      	str	r3, [sp, #16]
 800f09a:	9b05      	ldr	r3, [sp, #20]
 800f09c:	4403      	add	r3, r0
 800f09e:	4405      	add	r5, r0
 800f0a0:	9305      	str	r3, [sp, #20]
 800f0a2:	9b04      	ldr	r3, [sp, #16]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	dd07      	ble.n	800f0b8 <_dtoa_r+0x818>
 800f0a8:	ee18 1a10 	vmov	r1, s16
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 fc06 	bl	800f8c0 <__lshift>
 800f0b4:	ee08 0a10 	vmov	s16, r0
 800f0b8:	9b05      	ldr	r3, [sp, #20]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	dd05      	ble.n	800f0ca <_dtoa_r+0x82a>
 800f0be:	4631      	mov	r1, r6
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f000 fbfc 	bl	800f8c0 <__lshift>
 800f0c8:	4606      	mov	r6, r0
 800f0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d06e      	beq.n	800f1ae <_dtoa_r+0x90e>
 800f0d0:	ee18 0a10 	vmov	r0, s16
 800f0d4:	4631      	mov	r1, r6
 800f0d6:	f000 fc63 	bl	800f9a0 <__mcmp>
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	da67      	bge.n	800f1ae <_dtoa_r+0x90e>
 800f0de:	9b00      	ldr	r3, [sp, #0]
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	ee18 1a10 	vmov	r1, s16
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	220a      	movs	r2, #10
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	4620      	mov	r0, r4
 800f0ee:	f000 fa37 	bl	800f560 <__multadd>
 800f0f2:	9b08      	ldr	r3, [sp, #32]
 800f0f4:	ee08 0a10 	vmov	s16, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 81b1 	beq.w	800f460 <_dtoa_r+0xbc0>
 800f0fe:	2300      	movs	r3, #0
 800f100:	4639      	mov	r1, r7
 800f102:	220a      	movs	r2, #10
 800f104:	4620      	mov	r0, r4
 800f106:	f000 fa2b 	bl	800f560 <__multadd>
 800f10a:	9b02      	ldr	r3, [sp, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	4607      	mov	r7, r0
 800f110:	f300 808e 	bgt.w	800f230 <_dtoa_r+0x990>
 800f114:	9b06      	ldr	r3, [sp, #24]
 800f116:	2b02      	cmp	r3, #2
 800f118:	dc51      	bgt.n	800f1be <_dtoa_r+0x91e>
 800f11a:	e089      	b.n	800f230 <_dtoa_r+0x990>
 800f11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f122:	e74b      	b.n	800efbc <_dtoa_r+0x71c>
 800f124:	9b03      	ldr	r3, [sp, #12]
 800f126:	1e5e      	subs	r6, r3, #1
 800f128:	9b07      	ldr	r3, [sp, #28]
 800f12a:	42b3      	cmp	r3, r6
 800f12c:	bfbf      	itttt	lt
 800f12e:	9b07      	ldrlt	r3, [sp, #28]
 800f130:	9607      	strlt	r6, [sp, #28]
 800f132:	1af2      	sublt	r2, r6, r3
 800f134:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f136:	bfb6      	itet	lt
 800f138:	189b      	addlt	r3, r3, r2
 800f13a:	1b9e      	subge	r6, r3, r6
 800f13c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f13e:	9b03      	ldr	r3, [sp, #12]
 800f140:	bfb8      	it	lt
 800f142:	2600      	movlt	r6, #0
 800f144:	2b00      	cmp	r3, #0
 800f146:	bfb7      	itett	lt
 800f148:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f14c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f150:	1a9d      	sublt	r5, r3, r2
 800f152:	2300      	movlt	r3, #0
 800f154:	e734      	b.n	800efc0 <_dtoa_r+0x720>
 800f156:	9e07      	ldr	r6, [sp, #28]
 800f158:	9d04      	ldr	r5, [sp, #16]
 800f15a:	9f08      	ldr	r7, [sp, #32]
 800f15c:	e73b      	b.n	800efd6 <_dtoa_r+0x736>
 800f15e:	9a07      	ldr	r2, [sp, #28]
 800f160:	e767      	b.n	800f032 <_dtoa_r+0x792>
 800f162:	9b06      	ldr	r3, [sp, #24]
 800f164:	2b01      	cmp	r3, #1
 800f166:	dc18      	bgt.n	800f19a <_dtoa_r+0x8fa>
 800f168:	f1ba 0f00 	cmp.w	sl, #0
 800f16c:	d115      	bne.n	800f19a <_dtoa_r+0x8fa>
 800f16e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f172:	b993      	cbnz	r3, 800f19a <_dtoa_r+0x8fa>
 800f174:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f178:	0d1b      	lsrs	r3, r3, #20
 800f17a:	051b      	lsls	r3, r3, #20
 800f17c:	b183      	cbz	r3, 800f1a0 <_dtoa_r+0x900>
 800f17e:	9b04      	ldr	r3, [sp, #16]
 800f180:	3301      	adds	r3, #1
 800f182:	9304      	str	r3, [sp, #16]
 800f184:	9b05      	ldr	r3, [sp, #20]
 800f186:	3301      	adds	r3, #1
 800f188:	9305      	str	r3, [sp, #20]
 800f18a:	f04f 0801 	mov.w	r8, #1
 800f18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f190:	2b00      	cmp	r3, #0
 800f192:	f47f af6a 	bne.w	800f06a <_dtoa_r+0x7ca>
 800f196:	2001      	movs	r0, #1
 800f198:	e76f      	b.n	800f07a <_dtoa_r+0x7da>
 800f19a:	f04f 0800 	mov.w	r8, #0
 800f19e:	e7f6      	b.n	800f18e <_dtoa_r+0x8ee>
 800f1a0:	4698      	mov	r8, r3
 800f1a2:	e7f4      	b.n	800f18e <_dtoa_r+0x8ee>
 800f1a4:	f43f af7d 	beq.w	800f0a2 <_dtoa_r+0x802>
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	301c      	adds	r0, #28
 800f1ac:	e772      	b.n	800f094 <_dtoa_r+0x7f4>
 800f1ae:	9b03      	ldr	r3, [sp, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	dc37      	bgt.n	800f224 <_dtoa_r+0x984>
 800f1b4:	9b06      	ldr	r3, [sp, #24]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	dd34      	ble.n	800f224 <_dtoa_r+0x984>
 800f1ba:	9b03      	ldr	r3, [sp, #12]
 800f1bc:	9302      	str	r3, [sp, #8]
 800f1be:	9b02      	ldr	r3, [sp, #8]
 800f1c0:	b96b      	cbnz	r3, 800f1de <_dtoa_r+0x93e>
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	2205      	movs	r2, #5
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 f9ca 	bl	800f560 <__multadd>
 800f1cc:	4601      	mov	r1, r0
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	ee18 0a10 	vmov	r0, s16
 800f1d4:	f000 fbe4 	bl	800f9a0 <__mcmp>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	f73f adbb 	bgt.w	800ed54 <_dtoa_r+0x4b4>
 800f1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e0:	9d01      	ldr	r5, [sp, #4]
 800f1e2:	43db      	mvns	r3, r3
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	f04f 0800 	mov.w	r8, #0
 800f1ea:	4631      	mov	r1, r6
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 f995 	bl	800f51c <_Bfree>
 800f1f2:	2f00      	cmp	r7, #0
 800f1f4:	f43f aea4 	beq.w	800ef40 <_dtoa_r+0x6a0>
 800f1f8:	f1b8 0f00 	cmp.w	r8, #0
 800f1fc:	d005      	beq.n	800f20a <_dtoa_r+0x96a>
 800f1fe:	45b8      	cmp	r8, r7
 800f200:	d003      	beq.n	800f20a <_dtoa_r+0x96a>
 800f202:	4641      	mov	r1, r8
 800f204:	4620      	mov	r0, r4
 800f206:	f000 f989 	bl	800f51c <_Bfree>
 800f20a:	4639      	mov	r1, r7
 800f20c:	4620      	mov	r0, r4
 800f20e:	f000 f985 	bl	800f51c <_Bfree>
 800f212:	e695      	b.n	800ef40 <_dtoa_r+0x6a0>
 800f214:	2600      	movs	r6, #0
 800f216:	4637      	mov	r7, r6
 800f218:	e7e1      	b.n	800f1de <_dtoa_r+0x93e>
 800f21a:	9700      	str	r7, [sp, #0]
 800f21c:	4637      	mov	r7, r6
 800f21e:	e599      	b.n	800ed54 <_dtoa_r+0x4b4>
 800f220:	40240000 	.word	0x40240000
 800f224:	9b08      	ldr	r3, [sp, #32]
 800f226:	2b00      	cmp	r3, #0
 800f228:	f000 80ca 	beq.w	800f3c0 <_dtoa_r+0xb20>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	9302      	str	r3, [sp, #8]
 800f230:	2d00      	cmp	r5, #0
 800f232:	dd05      	ble.n	800f240 <_dtoa_r+0x9a0>
 800f234:	4639      	mov	r1, r7
 800f236:	462a      	mov	r2, r5
 800f238:	4620      	mov	r0, r4
 800f23a:	f000 fb41 	bl	800f8c0 <__lshift>
 800f23e:	4607      	mov	r7, r0
 800f240:	f1b8 0f00 	cmp.w	r8, #0
 800f244:	d05b      	beq.n	800f2fe <_dtoa_r+0xa5e>
 800f246:	6879      	ldr	r1, [r7, #4]
 800f248:	4620      	mov	r0, r4
 800f24a:	f000 f927 	bl	800f49c <_Balloc>
 800f24e:	4605      	mov	r5, r0
 800f250:	b928      	cbnz	r0, 800f25e <_dtoa_r+0x9be>
 800f252:	4b87      	ldr	r3, [pc, #540]	; (800f470 <_dtoa_r+0xbd0>)
 800f254:	4602      	mov	r2, r0
 800f256:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f25a:	f7ff bb3b 	b.w	800e8d4 <_dtoa_r+0x34>
 800f25e:	693a      	ldr	r2, [r7, #16]
 800f260:	3202      	adds	r2, #2
 800f262:	0092      	lsls	r2, r2, #2
 800f264:	f107 010c 	add.w	r1, r7, #12
 800f268:	300c      	adds	r0, #12
 800f26a:	f7fe fcfb 	bl	800dc64 <memcpy>
 800f26e:	2201      	movs	r2, #1
 800f270:	4629      	mov	r1, r5
 800f272:	4620      	mov	r0, r4
 800f274:	f000 fb24 	bl	800f8c0 <__lshift>
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	f103 0901 	add.w	r9, r3, #1
 800f27e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f282:	4413      	add	r3, r2
 800f284:	9305      	str	r3, [sp, #20]
 800f286:	f00a 0301 	and.w	r3, sl, #1
 800f28a:	46b8      	mov	r8, r7
 800f28c:	9304      	str	r3, [sp, #16]
 800f28e:	4607      	mov	r7, r0
 800f290:	4631      	mov	r1, r6
 800f292:	ee18 0a10 	vmov	r0, s16
 800f296:	f7ff fa75 	bl	800e784 <quorem>
 800f29a:	4641      	mov	r1, r8
 800f29c:	9002      	str	r0, [sp, #8]
 800f29e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f2a2:	ee18 0a10 	vmov	r0, s16
 800f2a6:	f000 fb7b 	bl	800f9a0 <__mcmp>
 800f2aa:	463a      	mov	r2, r7
 800f2ac:	9003      	str	r0, [sp, #12]
 800f2ae:	4631      	mov	r1, r6
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	f000 fb91 	bl	800f9d8 <__mdiff>
 800f2b6:	68c2      	ldr	r2, [r0, #12]
 800f2b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800f2bc:	4605      	mov	r5, r0
 800f2be:	bb02      	cbnz	r2, 800f302 <_dtoa_r+0xa62>
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	ee18 0a10 	vmov	r0, s16
 800f2c6:	f000 fb6b 	bl	800f9a0 <__mcmp>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	9207      	str	r2, [sp, #28]
 800f2d2:	f000 f923 	bl	800f51c <_Bfree>
 800f2d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f2da:	ea43 0102 	orr.w	r1, r3, r2
 800f2de:	9b04      	ldr	r3, [sp, #16]
 800f2e0:	430b      	orrs	r3, r1
 800f2e2:	464d      	mov	r5, r9
 800f2e4:	d10f      	bne.n	800f306 <_dtoa_r+0xa66>
 800f2e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2ea:	d02a      	beq.n	800f342 <_dtoa_r+0xaa2>
 800f2ec:	9b03      	ldr	r3, [sp, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	dd02      	ble.n	800f2f8 <_dtoa_r+0xa58>
 800f2f2:	9b02      	ldr	r3, [sp, #8]
 800f2f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f2f8:	f88b a000 	strb.w	sl, [fp]
 800f2fc:	e775      	b.n	800f1ea <_dtoa_r+0x94a>
 800f2fe:	4638      	mov	r0, r7
 800f300:	e7ba      	b.n	800f278 <_dtoa_r+0x9d8>
 800f302:	2201      	movs	r2, #1
 800f304:	e7e2      	b.n	800f2cc <_dtoa_r+0xa2c>
 800f306:	9b03      	ldr	r3, [sp, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	db04      	blt.n	800f316 <_dtoa_r+0xa76>
 800f30c:	9906      	ldr	r1, [sp, #24]
 800f30e:	430b      	orrs	r3, r1
 800f310:	9904      	ldr	r1, [sp, #16]
 800f312:	430b      	orrs	r3, r1
 800f314:	d122      	bne.n	800f35c <_dtoa_r+0xabc>
 800f316:	2a00      	cmp	r2, #0
 800f318:	ddee      	ble.n	800f2f8 <_dtoa_r+0xa58>
 800f31a:	ee18 1a10 	vmov	r1, s16
 800f31e:	2201      	movs	r2, #1
 800f320:	4620      	mov	r0, r4
 800f322:	f000 facd 	bl	800f8c0 <__lshift>
 800f326:	4631      	mov	r1, r6
 800f328:	ee08 0a10 	vmov	s16, r0
 800f32c:	f000 fb38 	bl	800f9a0 <__mcmp>
 800f330:	2800      	cmp	r0, #0
 800f332:	dc03      	bgt.n	800f33c <_dtoa_r+0xa9c>
 800f334:	d1e0      	bne.n	800f2f8 <_dtoa_r+0xa58>
 800f336:	f01a 0f01 	tst.w	sl, #1
 800f33a:	d0dd      	beq.n	800f2f8 <_dtoa_r+0xa58>
 800f33c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f340:	d1d7      	bne.n	800f2f2 <_dtoa_r+0xa52>
 800f342:	2339      	movs	r3, #57	; 0x39
 800f344:	f88b 3000 	strb.w	r3, [fp]
 800f348:	462b      	mov	r3, r5
 800f34a:	461d      	mov	r5, r3
 800f34c:	3b01      	subs	r3, #1
 800f34e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f352:	2a39      	cmp	r2, #57	; 0x39
 800f354:	d071      	beq.n	800f43a <_dtoa_r+0xb9a>
 800f356:	3201      	adds	r2, #1
 800f358:	701a      	strb	r2, [r3, #0]
 800f35a:	e746      	b.n	800f1ea <_dtoa_r+0x94a>
 800f35c:	2a00      	cmp	r2, #0
 800f35e:	dd07      	ble.n	800f370 <_dtoa_r+0xad0>
 800f360:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f364:	d0ed      	beq.n	800f342 <_dtoa_r+0xaa2>
 800f366:	f10a 0301 	add.w	r3, sl, #1
 800f36a:	f88b 3000 	strb.w	r3, [fp]
 800f36e:	e73c      	b.n	800f1ea <_dtoa_r+0x94a>
 800f370:	9b05      	ldr	r3, [sp, #20]
 800f372:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f376:	4599      	cmp	r9, r3
 800f378:	d047      	beq.n	800f40a <_dtoa_r+0xb6a>
 800f37a:	ee18 1a10 	vmov	r1, s16
 800f37e:	2300      	movs	r3, #0
 800f380:	220a      	movs	r2, #10
 800f382:	4620      	mov	r0, r4
 800f384:	f000 f8ec 	bl	800f560 <__multadd>
 800f388:	45b8      	cmp	r8, r7
 800f38a:	ee08 0a10 	vmov	s16, r0
 800f38e:	f04f 0300 	mov.w	r3, #0
 800f392:	f04f 020a 	mov.w	r2, #10
 800f396:	4641      	mov	r1, r8
 800f398:	4620      	mov	r0, r4
 800f39a:	d106      	bne.n	800f3aa <_dtoa_r+0xb0a>
 800f39c:	f000 f8e0 	bl	800f560 <__multadd>
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	4607      	mov	r7, r0
 800f3a4:	f109 0901 	add.w	r9, r9, #1
 800f3a8:	e772      	b.n	800f290 <_dtoa_r+0x9f0>
 800f3aa:	f000 f8d9 	bl	800f560 <__multadd>
 800f3ae:	4639      	mov	r1, r7
 800f3b0:	4680      	mov	r8, r0
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	220a      	movs	r2, #10
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f000 f8d2 	bl	800f560 <__multadd>
 800f3bc:	4607      	mov	r7, r0
 800f3be:	e7f1      	b.n	800f3a4 <_dtoa_r+0xb04>
 800f3c0:	9b03      	ldr	r3, [sp, #12]
 800f3c2:	9302      	str	r3, [sp, #8]
 800f3c4:	9d01      	ldr	r5, [sp, #4]
 800f3c6:	ee18 0a10 	vmov	r0, s16
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	f7ff f9da 	bl	800e784 <quorem>
 800f3d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f3d4:	9b01      	ldr	r3, [sp, #4]
 800f3d6:	f805 ab01 	strb.w	sl, [r5], #1
 800f3da:	1aea      	subs	r2, r5, r3
 800f3dc:	9b02      	ldr	r3, [sp, #8]
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	dd09      	ble.n	800f3f6 <_dtoa_r+0xb56>
 800f3e2:	ee18 1a10 	vmov	r1, s16
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	220a      	movs	r2, #10
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	f000 f8b8 	bl	800f560 <__multadd>
 800f3f0:	ee08 0a10 	vmov	s16, r0
 800f3f4:	e7e7      	b.n	800f3c6 <_dtoa_r+0xb26>
 800f3f6:	9b02      	ldr	r3, [sp, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	bfc8      	it	gt
 800f3fc:	461d      	movgt	r5, r3
 800f3fe:	9b01      	ldr	r3, [sp, #4]
 800f400:	bfd8      	it	le
 800f402:	2501      	movle	r5, #1
 800f404:	441d      	add	r5, r3
 800f406:	f04f 0800 	mov.w	r8, #0
 800f40a:	ee18 1a10 	vmov	r1, s16
 800f40e:	2201      	movs	r2, #1
 800f410:	4620      	mov	r0, r4
 800f412:	f000 fa55 	bl	800f8c0 <__lshift>
 800f416:	4631      	mov	r1, r6
 800f418:	ee08 0a10 	vmov	s16, r0
 800f41c:	f000 fac0 	bl	800f9a0 <__mcmp>
 800f420:	2800      	cmp	r0, #0
 800f422:	dc91      	bgt.n	800f348 <_dtoa_r+0xaa8>
 800f424:	d102      	bne.n	800f42c <_dtoa_r+0xb8c>
 800f426:	f01a 0f01 	tst.w	sl, #1
 800f42a:	d18d      	bne.n	800f348 <_dtoa_r+0xaa8>
 800f42c:	462b      	mov	r3, r5
 800f42e:	461d      	mov	r5, r3
 800f430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f434:	2a30      	cmp	r2, #48	; 0x30
 800f436:	d0fa      	beq.n	800f42e <_dtoa_r+0xb8e>
 800f438:	e6d7      	b.n	800f1ea <_dtoa_r+0x94a>
 800f43a:	9a01      	ldr	r2, [sp, #4]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d184      	bne.n	800f34a <_dtoa_r+0xaaa>
 800f440:	9b00      	ldr	r3, [sp, #0]
 800f442:	3301      	adds	r3, #1
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	2331      	movs	r3, #49	; 0x31
 800f448:	7013      	strb	r3, [r2, #0]
 800f44a:	e6ce      	b.n	800f1ea <_dtoa_r+0x94a>
 800f44c:	4b09      	ldr	r3, [pc, #36]	; (800f474 <_dtoa_r+0xbd4>)
 800f44e:	f7ff ba95 	b.w	800e97c <_dtoa_r+0xdc>
 800f452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f454:	2b00      	cmp	r3, #0
 800f456:	f47f aa6e 	bne.w	800e936 <_dtoa_r+0x96>
 800f45a:	4b07      	ldr	r3, [pc, #28]	; (800f478 <_dtoa_r+0xbd8>)
 800f45c:	f7ff ba8e 	b.w	800e97c <_dtoa_r+0xdc>
 800f460:	9b02      	ldr	r3, [sp, #8]
 800f462:	2b00      	cmp	r3, #0
 800f464:	dcae      	bgt.n	800f3c4 <_dtoa_r+0xb24>
 800f466:	9b06      	ldr	r3, [sp, #24]
 800f468:	2b02      	cmp	r3, #2
 800f46a:	f73f aea8 	bgt.w	800f1be <_dtoa_r+0x91e>
 800f46e:	e7a9      	b.n	800f3c4 <_dtoa_r+0xb24>
 800f470:	08013b37 	.word	0x08013b37
 800f474:	08013a94 	.word	0x08013a94
 800f478:	08013ab8 	.word	0x08013ab8

0800f47c <_localeconv_r>:
 800f47c:	4800      	ldr	r0, [pc, #0]	; (800f480 <_localeconv_r+0x4>)
 800f47e:	4770      	bx	lr
 800f480:	20000194 	.word	0x20000194

0800f484 <__malloc_lock>:
 800f484:	4801      	ldr	r0, [pc, #4]	; (800f48c <__malloc_lock+0x8>)
 800f486:	f000 bd30 	b.w	800feea <__retarget_lock_acquire_recursive>
 800f48a:	bf00      	nop
 800f48c:	20014080 	.word	0x20014080

0800f490 <__malloc_unlock>:
 800f490:	4801      	ldr	r0, [pc, #4]	; (800f498 <__malloc_unlock+0x8>)
 800f492:	f000 bd2b 	b.w	800feec <__retarget_lock_release_recursive>
 800f496:	bf00      	nop
 800f498:	20014080 	.word	0x20014080

0800f49c <_Balloc>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	460d      	mov	r5, r1
 800f4a4:	b976      	cbnz	r6, 800f4c4 <_Balloc+0x28>
 800f4a6:	2010      	movs	r0, #16
 800f4a8:	f7fe fbd4 	bl	800dc54 <malloc>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	6260      	str	r0, [r4, #36]	; 0x24
 800f4b0:	b920      	cbnz	r0, 800f4bc <_Balloc+0x20>
 800f4b2:	4b18      	ldr	r3, [pc, #96]	; (800f514 <_Balloc+0x78>)
 800f4b4:	4818      	ldr	r0, [pc, #96]	; (800f518 <_Balloc+0x7c>)
 800f4b6:	2166      	movs	r1, #102	; 0x66
 800f4b8:	f000 fce6 	bl	800fe88 <__assert_func>
 800f4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4c0:	6006      	str	r6, [r0, #0]
 800f4c2:	60c6      	str	r6, [r0, #12]
 800f4c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f4c6:	68f3      	ldr	r3, [r6, #12]
 800f4c8:	b183      	cbz	r3, 800f4ec <_Balloc+0x50>
 800f4ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4d2:	b9b8      	cbnz	r0, 800f504 <_Balloc+0x68>
 800f4d4:	2101      	movs	r1, #1
 800f4d6:	fa01 f605 	lsl.w	r6, r1, r5
 800f4da:	1d72      	adds	r2, r6, #5
 800f4dc:	0092      	lsls	r2, r2, #2
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f000 fb60 	bl	800fba4 <_calloc_r>
 800f4e4:	b160      	cbz	r0, 800f500 <_Balloc+0x64>
 800f4e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ea:	e00e      	b.n	800f50a <_Balloc+0x6e>
 800f4ec:	2221      	movs	r2, #33	; 0x21
 800f4ee:	2104      	movs	r1, #4
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 fb57 	bl	800fba4 <_calloc_r>
 800f4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4f8:	60f0      	str	r0, [r6, #12]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1e4      	bne.n	800f4ca <_Balloc+0x2e>
 800f500:	2000      	movs	r0, #0
 800f502:	bd70      	pop	{r4, r5, r6, pc}
 800f504:	6802      	ldr	r2, [r0, #0]
 800f506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f50a:	2300      	movs	r3, #0
 800f50c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f510:	e7f7      	b.n	800f502 <_Balloc+0x66>
 800f512:	bf00      	nop
 800f514:	08013ac5 	.word	0x08013ac5
 800f518:	08013b48 	.word	0x08013b48

0800f51c <_Bfree>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
 800f524:	b976      	cbnz	r6, 800f544 <_Bfree+0x28>
 800f526:	2010      	movs	r0, #16
 800f528:	f7fe fb94 	bl	800dc54 <malloc>
 800f52c:	4602      	mov	r2, r0
 800f52e:	6268      	str	r0, [r5, #36]	; 0x24
 800f530:	b920      	cbnz	r0, 800f53c <_Bfree+0x20>
 800f532:	4b09      	ldr	r3, [pc, #36]	; (800f558 <_Bfree+0x3c>)
 800f534:	4809      	ldr	r0, [pc, #36]	; (800f55c <_Bfree+0x40>)
 800f536:	218a      	movs	r1, #138	; 0x8a
 800f538:	f000 fca6 	bl	800fe88 <__assert_func>
 800f53c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f540:	6006      	str	r6, [r0, #0]
 800f542:	60c6      	str	r6, [r0, #12]
 800f544:	b13c      	cbz	r4, 800f556 <_Bfree+0x3a>
 800f546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f548:	6862      	ldr	r2, [r4, #4]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f550:	6021      	str	r1, [r4, #0]
 800f552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f556:	bd70      	pop	{r4, r5, r6, pc}
 800f558:	08013ac5 	.word	0x08013ac5
 800f55c:	08013b48 	.word	0x08013b48

0800f560 <__multadd>:
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	690d      	ldr	r5, [r1, #16]
 800f566:	4607      	mov	r7, r0
 800f568:	460c      	mov	r4, r1
 800f56a:	461e      	mov	r6, r3
 800f56c:	f101 0c14 	add.w	ip, r1, #20
 800f570:	2000      	movs	r0, #0
 800f572:	f8dc 3000 	ldr.w	r3, [ip]
 800f576:	b299      	uxth	r1, r3
 800f578:	fb02 6101 	mla	r1, r2, r1, r6
 800f57c:	0c1e      	lsrs	r6, r3, #16
 800f57e:	0c0b      	lsrs	r3, r1, #16
 800f580:	fb02 3306 	mla	r3, r2, r6, r3
 800f584:	b289      	uxth	r1, r1
 800f586:	3001      	adds	r0, #1
 800f588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f58c:	4285      	cmp	r5, r0
 800f58e:	f84c 1b04 	str.w	r1, [ip], #4
 800f592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f596:	dcec      	bgt.n	800f572 <__multadd+0x12>
 800f598:	b30e      	cbz	r6, 800f5de <__multadd+0x7e>
 800f59a:	68a3      	ldr	r3, [r4, #8]
 800f59c:	42ab      	cmp	r3, r5
 800f59e:	dc19      	bgt.n	800f5d4 <__multadd+0x74>
 800f5a0:	6861      	ldr	r1, [r4, #4]
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	3101      	adds	r1, #1
 800f5a6:	f7ff ff79 	bl	800f49c <_Balloc>
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	b928      	cbnz	r0, 800f5ba <__multadd+0x5a>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	4b0c      	ldr	r3, [pc, #48]	; (800f5e4 <__multadd+0x84>)
 800f5b2:	480d      	ldr	r0, [pc, #52]	; (800f5e8 <__multadd+0x88>)
 800f5b4:	21b5      	movs	r1, #181	; 0xb5
 800f5b6:	f000 fc67 	bl	800fe88 <__assert_func>
 800f5ba:	6922      	ldr	r2, [r4, #16]
 800f5bc:	3202      	adds	r2, #2
 800f5be:	f104 010c 	add.w	r1, r4, #12
 800f5c2:	0092      	lsls	r2, r2, #2
 800f5c4:	300c      	adds	r0, #12
 800f5c6:	f7fe fb4d 	bl	800dc64 <memcpy>
 800f5ca:	4621      	mov	r1, r4
 800f5cc:	4638      	mov	r0, r7
 800f5ce:	f7ff ffa5 	bl	800f51c <_Bfree>
 800f5d2:	4644      	mov	r4, r8
 800f5d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5d8:	3501      	adds	r5, #1
 800f5da:	615e      	str	r6, [r3, #20]
 800f5dc:	6125      	str	r5, [r4, #16]
 800f5de:	4620      	mov	r0, r4
 800f5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e4:	08013b37 	.word	0x08013b37
 800f5e8:	08013b48 	.word	0x08013b48

0800f5ec <__hi0bits>:
 800f5ec:	0c03      	lsrs	r3, r0, #16
 800f5ee:	041b      	lsls	r3, r3, #16
 800f5f0:	b9d3      	cbnz	r3, 800f628 <__hi0bits+0x3c>
 800f5f2:	0400      	lsls	r0, r0, #16
 800f5f4:	2310      	movs	r3, #16
 800f5f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5fa:	bf04      	itt	eq
 800f5fc:	0200      	lsleq	r0, r0, #8
 800f5fe:	3308      	addeq	r3, #8
 800f600:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f604:	bf04      	itt	eq
 800f606:	0100      	lsleq	r0, r0, #4
 800f608:	3304      	addeq	r3, #4
 800f60a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f60e:	bf04      	itt	eq
 800f610:	0080      	lsleq	r0, r0, #2
 800f612:	3302      	addeq	r3, #2
 800f614:	2800      	cmp	r0, #0
 800f616:	db05      	blt.n	800f624 <__hi0bits+0x38>
 800f618:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f61c:	f103 0301 	add.w	r3, r3, #1
 800f620:	bf08      	it	eq
 800f622:	2320      	moveq	r3, #32
 800f624:	4618      	mov	r0, r3
 800f626:	4770      	bx	lr
 800f628:	2300      	movs	r3, #0
 800f62a:	e7e4      	b.n	800f5f6 <__hi0bits+0xa>

0800f62c <__lo0bits>:
 800f62c:	6803      	ldr	r3, [r0, #0]
 800f62e:	f013 0207 	ands.w	r2, r3, #7
 800f632:	4601      	mov	r1, r0
 800f634:	d00b      	beq.n	800f64e <__lo0bits+0x22>
 800f636:	07da      	lsls	r2, r3, #31
 800f638:	d423      	bmi.n	800f682 <__lo0bits+0x56>
 800f63a:	0798      	lsls	r0, r3, #30
 800f63c:	bf49      	itett	mi
 800f63e:	085b      	lsrmi	r3, r3, #1
 800f640:	089b      	lsrpl	r3, r3, #2
 800f642:	2001      	movmi	r0, #1
 800f644:	600b      	strmi	r3, [r1, #0]
 800f646:	bf5c      	itt	pl
 800f648:	600b      	strpl	r3, [r1, #0]
 800f64a:	2002      	movpl	r0, #2
 800f64c:	4770      	bx	lr
 800f64e:	b298      	uxth	r0, r3
 800f650:	b9a8      	cbnz	r0, 800f67e <__lo0bits+0x52>
 800f652:	0c1b      	lsrs	r3, r3, #16
 800f654:	2010      	movs	r0, #16
 800f656:	b2da      	uxtb	r2, r3
 800f658:	b90a      	cbnz	r2, 800f65e <__lo0bits+0x32>
 800f65a:	3008      	adds	r0, #8
 800f65c:	0a1b      	lsrs	r3, r3, #8
 800f65e:	071a      	lsls	r2, r3, #28
 800f660:	bf04      	itt	eq
 800f662:	091b      	lsreq	r3, r3, #4
 800f664:	3004      	addeq	r0, #4
 800f666:	079a      	lsls	r2, r3, #30
 800f668:	bf04      	itt	eq
 800f66a:	089b      	lsreq	r3, r3, #2
 800f66c:	3002      	addeq	r0, #2
 800f66e:	07da      	lsls	r2, r3, #31
 800f670:	d403      	bmi.n	800f67a <__lo0bits+0x4e>
 800f672:	085b      	lsrs	r3, r3, #1
 800f674:	f100 0001 	add.w	r0, r0, #1
 800f678:	d005      	beq.n	800f686 <__lo0bits+0x5a>
 800f67a:	600b      	str	r3, [r1, #0]
 800f67c:	4770      	bx	lr
 800f67e:	4610      	mov	r0, r2
 800f680:	e7e9      	b.n	800f656 <__lo0bits+0x2a>
 800f682:	2000      	movs	r0, #0
 800f684:	4770      	bx	lr
 800f686:	2020      	movs	r0, #32
 800f688:	4770      	bx	lr
	...

0800f68c <__i2b>:
 800f68c:	b510      	push	{r4, lr}
 800f68e:	460c      	mov	r4, r1
 800f690:	2101      	movs	r1, #1
 800f692:	f7ff ff03 	bl	800f49c <_Balloc>
 800f696:	4602      	mov	r2, r0
 800f698:	b928      	cbnz	r0, 800f6a6 <__i2b+0x1a>
 800f69a:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <__i2b+0x24>)
 800f69c:	4805      	ldr	r0, [pc, #20]	; (800f6b4 <__i2b+0x28>)
 800f69e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f6a2:	f000 fbf1 	bl	800fe88 <__assert_func>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	6144      	str	r4, [r0, #20]
 800f6aa:	6103      	str	r3, [r0, #16]
 800f6ac:	bd10      	pop	{r4, pc}
 800f6ae:	bf00      	nop
 800f6b0:	08013b37 	.word	0x08013b37
 800f6b4:	08013b48 	.word	0x08013b48

0800f6b8 <__multiply>:
 800f6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6bc:	4691      	mov	r9, r2
 800f6be:	690a      	ldr	r2, [r1, #16]
 800f6c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	bfb8      	it	lt
 800f6c8:	460b      	movlt	r3, r1
 800f6ca:	460c      	mov	r4, r1
 800f6cc:	bfbc      	itt	lt
 800f6ce:	464c      	movlt	r4, r9
 800f6d0:	4699      	movlt	r9, r3
 800f6d2:	6927      	ldr	r7, [r4, #16]
 800f6d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6d8:	68a3      	ldr	r3, [r4, #8]
 800f6da:	6861      	ldr	r1, [r4, #4]
 800f6dc:	eb07 060a 	add.w	r6, r7, sl
 800f6e0:	42b3      	cmp	r3, r6
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	bfb8      	it	lt
 800f6e6:	3101      	addlt	r1, #1
 800f6e8:	f7ff fed8 	bl	800f49c <_Balloc>
 800f6ec:	b930      	cbnz	r0, 800f6fc <__multiply+0x44>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	4b44      	ldr	r3, [pc, #272]	; (800f804 <__multiply+0x14c>)
 800f6f2:	4845      	ldr	r0, [pc, #276]	; (800f808 <__multiply+0x150>)
 800f6f4:	f240 115d 	movw	r1, #349	; 0x15d
 800f6f8:	f000 fbc6 	bl	800fe88 <__assert_func>
 800f6fc:	f100 0514 	add.w	r5, r0, #20
 800f700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f704:	462b      	mov	r3, r5
 800f706:	2200      	movs	r2, #0
 800f708:	4543      	cmp	r3, r8
 800f70a:	d321      	bcc.n	800f750 <__multiply+0x98>
 800f70c:	f104 0314 	add.w	r3, r4, #20
 800f710:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f714:	f109 0314 	add.w	r3, r9, #20
 800f718:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f71c:	9202      	str	r2, [sp, #8]
 800f71e:	1b3a      	subs	r2, r7, r4
 800f720:	3a15      	subs	r2, #21
 800f722:	f022 0203 	bic.w	r2, r2, #3
 800f726:	3204      	adds	r2, #4
 800f728:	f104 0115 	add.w	r1, r4, #21
 800f72c:	428f      	cmp	r7, r1
 800f72e:	bf38      	it	cc
 800f730:	2204      	movcc	r2, #4
 800f732:	9201      	str	r2, [sp, #4]
 800f734:	9a02      	ldr	r2, [sp, #8]
 800f736:	9303      	str	r3, [sp, #12]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d80c      	bhi.n	800f756 <__multiply+0x9e>
 800f73c:	2e00      	cmp	r6, #0
 800f73e:	dd03      	ble.n	800f748 <__multiply+0x90>
 800f740:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f744:	2b00      	cmp	r3, #0
 800f746:	d05a      	beq.n	800f7fe <__multiply+0x146>
 800f748:	6106      	str	r6, [r0, #16]
 800f74a:	b005      	add	sp, #20
 800f74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f750:	f843 2b04 	str.w	r2, [r3], #4
 800f754:	e7d8      	b.n	800f708 <__multiply+0x50>
 800f756:	f8b3 a000 	ldrh.w	sl, [r3]
 800f75a:	f1ba 0f00 	cmp.w	sl, #0
 800f75e:	d024      	beq.n	800f7aa <__multiply+0xf2>
 800f760:	f104 0e14 	add.w	lr, r4, #20
 800f764:	46a9      	mov	r9, r5
 800f766:	f04f 0c00 	mov.w	ip, #0
 800f76a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f76e:	f8d9 1000 	ldr.w	r1, [r9]
 800f772:	fa1f fb82 	uxth.w	fp, r2
 800f776:	b289      	uxth	r1, r1
 800f778:	fb0a 110b 	mla	r1, sl, fp, r1
 800f77c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f780:	f8d9 2000 	ldr.w	r2, [r9]
 800f784:	4461      	add	r1, ip
 800f786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f78a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f78e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f792:	b289      	uxth	r1, r1
 800f794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f798:	4577      	cmp	r7, lr
 800f79a:	f849 1b04 	str.w	r1, [r9], #4
 800f79e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7a2:	d8e2      	bhi.n	800f76a <__multiply+0xb2>
 800f7a4:	9a01      	ldr	r2, [sp, #4]
 800f7a6:	f845 c002 	str.w	ip, [r5, r2]
 800f7aa:	9a03      	ldr	r2, [sp, #12]
 800f7ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	f1b9 0f00 	cmp.w	r9, #0
 800f7b6:	d020      	beq.n	800f7fa <__multiply+0x142>
 800f7b8:	6829      	ldr	r1, [r5, #0]
 800f7ba:	f104 0c14 	add.w	ip, r4, #20
 800f7be:	46ae      	mov	lr, r5
 800f7c0:	f04f 0a00 	mov.w	sl, #0
 800f7c4:	f8bc b000 	ldrh.w	fp, [ip]
 800f7c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7cc:	fb09 220b 	mla	r2, r9, fp, r2
 800f7d0:	4492      	add	sl, r2
 800f7d2:	b289      	uxth	r1, r1
 800f7d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7d8:	f84e 1b04 	str.w	r1, [lr], #4
 800f7dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7e0:	f8be 1000 	ldrh.w	r1, [lr]
 800f7e4:	0c12      	lsrs	r2, r2, #16
 800f7e6:	fb09 1102 	mla	r1, r9, r2, r1
 800f7ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7ee:	4567      	cmp	r7, ip
 800f7f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7f4:	d8e6      	bhi.n	800f7c4 <__multiply+0x10c>
 800f7f6:	9a01      	ldr	r2, [sp, #4]
 800f7f8:	50a9      	str	r1, [r5, r2]
 800f7fa:	3504      	adds	r5, #4
 800f7fc:	e79a      	b.n	800f734 <__multiply+0x7c>
 800f7fe:	3e01      	subs	r6, #1
 800f800:	e79c      	b.n	800f73c <__multiply+0x84>
 800f802:	bf00      	nop
 800f804:	08013b37 	.word	0x08013b37
 800f808:	08013b48 	.word	0x08013b48

0800f80c <__pow5mult>:
 800f80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f810:	4615      	mov	r5, r2
 800f812:	f012 0203 	ands.w	r2, r2, #3
 800f816:	4606      	mov	r6, r0
 800f818:	460f      	mov	r7, r1
 800f81a:	d007      	beq.n	800f82c <__pow5mult+0x20>
 800f81c:	4c25      	ldr	r4, [pc, #148]	; (800f8b4 <__pow5mult+0xa8>)
 800f81e:	3a01      	subs	r2, #1
 800f820:	2300      	movs	r3, #0
 800f822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f826:	f7ff fe9b 	bl	800f560 <__multadd>
 800f82a:	4607      	mov	r7, r0
 800f82c:	10ad      	asrs	r5, r5, #2
 800f82e:	d03d      	beq.n	800f8ac <__pow5mult+0xa0>
 800f830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f832:	b97c      	cbnz	r4, 800f854 <__pow5mult+0x48>
 800f834:	2010      	movs	r0, #16
 800f836:	f7fe fa0d 	bl	800dc54 <malloc>
 800f83a:	4602      	mov	r2, r0
 800f83c:	6270      	str	r0, [r6, #36]	; 0x24
 800f83e:	b928      	cbnz	r0, 800f84c <__pow5mult+0x40>
 800f840:	4b1d      	ldr	r3, [pc, #116]	; (800f8b8 <__pow5mult+0xac>)
 800f842:	481e      	ldr	r0, [pc, #120]	; (800f8bc <__pow5mult+0xb0>)
 800f844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f848:	f000 fb1e 	bl	800fe88 <__assert_func>
 800f84c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f850:	6004      	str	r4, [r0, #0]
 800f852:	60c4      	str	r4, [r0, #12]
 800f854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f85c:	b94c      	cbnz	r4, 800f872 <__pow5mult+0x66>
 800f85e:	f240 2171 	movw	r1, #625	; 0x271
 800f862:	4630      	mov	r0, r6
 800f864:	f7ff ff12 	bl	800f68c <__i2b>
 800f868:	2300      	movs	r3, #0
 800f86a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f86e:	4604      	mov	r4, r0
 800f870:	6003      	str	r3, [r0, #0]
 800f872:	f04f 0900 	mov.w	r9, #0
 800f876:	07eb      	lsls	r3, r5, #31
 800f878:	d50a      	bpl.n	800f890 <__pow5mult+0x84>
 800f87a:	4639      	mov	r1, r7
 800f87c:	4622      	mov	r2, r4
 800f87e:	4630      	mov	r0, r6
 800f880:	f7ff ff1a 	bl	800f6b8 <__multiply>
 800f884:	4639      	mov	r1, r7
 800f886:	4680      	mov	r8, r0
 800f888:	4630      	mov	r0, r6
 800f88a:	f7ff fe47 	bl	800f51c <_Bfree>
 800f88e:	4647      	mov	r7, r8
 800f890:	106d      	asrs	r5, r5, #1
 800f892:	d00b      	beq.n	800f8ac <__pow5mult+0xa0>
 800f894:	6820      	ldr	r0, [r4, #0]
 800f896:	b938      	cbnz	r0, 800f8a8 <__pow5mult+0x9c>
 800f898:	4622      	mov	r2, r4
 800f89a:	4621      	mov	r1, r4
 800f89c:	4630      	mov	r0, r6
 800f89e:	f7ff ff0b 	bl	800f6b8 <__multiply>
 800f8a2:	6020      	str	r0, [r4, #0]
 800f8a4:	f8c0 9000 	str.w	r9, [r0]
 800f8a8:	4604      	mov	r4, r0
 800f8aa:	e7e4      	b.n	800f876 <__pow5mult+0x6a>
 800f8ac:	4638      	mov	r0, r7
 800f8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8b2:	bf00      	nop
 800f8b4:	08013c98 	.word	0x08013c98
 800f8b8:	08013ac5 	.word	0x08013ac5
 800f8bc:	08013b48 	.word	0x08013b48

0800f8c0 <__lshift>:
 800f8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c4:	460c      	mov	r4, r1
 800f8c6:	6849      	ldr	r1, [r1, #4]
 800f8c8:	6923      	ldr	r3, [r4, #16]
 800f8ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8ce:	68a3      	ldr	r3, [r4, #8]
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	4691      	mov	r9, r2
 800f8d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8d8:	f108 0601 	add.w	r6, r8, #1
 800f8dc:	42b3      	cmp	r3, r6
 800f8de:	db0b      	blt.n	800f8f8 <__lshift+0x38>
 800f8e0:	4638      	mov	r0, r7
 800f8e2:	f7ff fddb 	bl	800f49c <_Balloc>
 800f8e6:	4605      	mov	r5, r0
 800f8e8:	b948      	cbnz	r0, 800f8fe <__lshift+0x3e>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	4b2a      	ldr	r3, [pc, #168]	; (800f998 <__lshift+0xd8>)
 800f8ee:	482b      	ldr	r0, [pc, #172]	; (800f99c <__lshift+0xdc>)
 800f8f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8f4:	f000 fac8 	bl	800fe88 <__assert_func>
 800f8f8:	3101      	adds	r1, #1
 800f8fa:	005b      	lsls	r3, r3, #1
 800f8fc:	e7ee      	b.n	800f8dc <__lshift+0x1c>
 800f8fe:	2300      	movs	r3, #0
 800f900:	f100 0114 	add.w	r1, r0, #20
 800f904:	f100 0210 	add.w	r2, r0, #16
 800f908:	4618      	mov	r0, r3
 800f90a:	4553      	cmp	r3, sl
 800f90c:	db37      	blt.n	800f97e <__lshift+0xbe>
 800f90e:	6920      	ldr	r0, [r4, #16]
 800f910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f914:	f104 0314 	add.w	r3, r4, #20
 800f918:	f019 091f 	ands.w	r9, r9, #31
 800f91c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f924:	d02f      	beq.n	800f986 <__lshift+0xc6>
 800f926:	f1c9 0e20 	rsb	lr, r9, #32
 800f92a:	468a      	mov	sl, r1
 800f92c:	f04f 0c00 	mov.w	ip, #0
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	fa02 f209 	lsl.w	r2, r2, r9
 800f936:	ea42 020c 	orr.w	r2, r2, ip
 800f93a:	f84a 2b04 	str.w	r2, [sl], #4
 800f93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f942:	4298      	cmp	r0, r3
 800f944:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f948:	d8f2      	bhi.n	800f930 <__lshift+0x70>
 800f94a:	1b03      	subs	r3, r0, r4
 800f94c:	3b15      	subs	r3, #21
 800f94e:	f023 0303 	bic.w	r3, r3, #3
 800f952:	3304      	adds	r3, #4
 800f954:	f104 0215 	add.w	r2, r4, #21
 800f958:	4290      	cmp	r0, r2
 800f95a:	bf38      	it	cc
 800f95c:	2304      	movcc	r3, #4
 800f95e:	f841 c003 	str.w	ip, [r1, r3]
 800f962:	f1bc 0f00 	cmp.w	ip, #0
 800f966:	d001      	beq.n	800f96c <__lshift+0xac>
 800f968:	f108 0602 	add.w	r6, r8, #2
 800f96c:	3e01      	subs	r6, #1
 800f96e:	4638      	mov	r0, r7
 800f970:	612e      	str	r6, [r5, #16]
 800f972:	4621      	mov	r1, r4
 800f974:	f7ff fdd2 	bl	800f51c <_Bfree>
 800f978:	4628      	mov	r0, r5
 800f97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f982:	3301      	adds	r3, #1
 800f984:	e7c1      	b.n	800f90a <__lshift+0x4a>
 800f986:	3904      	subs	r1, #4
 800f988:	f853 2b04 	ldr.w	r2, [r3], #4
 800f98c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f990:	4298      	cmp	r0, r3
 800f992:	d8f9      	bhi.n	800f988 <__lshift+0xc8>
 800f994:	e7ea      	b.n	800f96c <__lshift+0xac>
 800f996:	bf00      	nop
 800f998:	08013b37 	.word	0x08013b37
 800f99c:	08013b48 	.word	0x08013b48

0800f9a0 <__mcmp>:
 800f9a0:	b530      	push	{r4, r5, lr}
 800f9a2:	6902      	ldr	r2, [r0, #16]
 800f9a4:	690c      	ldr	r4, [r1, #16]
 800f9a6:	1b12      	subs	r2, r2, r4
 800f9a8:	d10e      	bne.n	800f9c8 <__mcmp+0x28>
 800f9aa:	f100 0314 	add.w	r3, r0, #20
 800f9ae:	3114      	adds	r1, #20
 800f9b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f9b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f9b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f9bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f9c0:	42a5      	cmp	r5, r4
 800f9c2:	d003      	beq.n	800f9cc <__mcmp+0x2c>
 800f9c4:	d305      	bcc.n	800f9d2 <__mcmp+0x32>
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	bd30      	pop	{r4, r5, pc}
 800f9cc:	4283      	cmp	r3, r0
 800f9ce:	d3f3      	bcc.n	800f9b8 <__mcmp+0x18>
 800f9d0:	e7fa      	b.n	800f9c8 <__mcmp+0x28>
 800f9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d6:	e7f7      	b.n	800f9c8 <__mcmp+0x28>

0800f9d8 <__mdiff>:
 800f9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	460c      	mov	r4, r1
 800f9de:	4606      	mov	r6, r0
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	4690      	mov	r8, r2
 800f9e6:	f7ff ffdb 	bl	800f9a0 <__mcmp>
 800f9ea:	1e05      	subs	r5, r0, #0
 800f9ec:	d110      	bne.n	800fa10 <__mdiff+0x38>
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	f7ff fd53 	bl	800f49c <_Balloc>
 800f9f6:	b930      	cbnz	r0, 800fa06 <__mdiff+0x2e>
 800f9f8:	4b3a      	ldr	r3, [pc, #232]	; (800fae4 <__mdiff+0x10c>)
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	f240 2132 	movw	r1, #562	; 0x232
 800fa00:	4839      	ldr	r0, [pc, #228]	; (800fae8 <__mdiff+0x110>)
 800fa02:	f000 fa41 	bl	800fe88 <__assert_func>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa10:	bfa4      	itt	ge
 800fa12:	4643      	movge	r3, r8
 800fa14:	46a0      	movge	r8, r4
 800fa16:	4630      	mov	r0, r6
 800fa18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa1c:	bfa6      	itte	ge
 800fa1e:	461c      	movge	r4, r3
 800fa20:	2500      	movge	r5, #0
 800fa22:	2501      	movlt	r5, #1
 800fa24:	f7ff fd3a 	bl	800f49c <_Balloc>
 800fa28:	b920      	cbnz	r0, 800fa34 <__mdiff+0x5c>
 800fa2a:	4b2e      	ldr	r3, [pc, #184]	; (800fae4 <__mdiff+0x10c>)
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa32:	e7e5      	b.n	800fa00 <__mdiff+0x28>
 800fa34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa38:	6926      	ldr	r6, [r4, #16]
 800fa3a:	60c5      	str	r5, [r0, #12]
 800fa3c:	f104 0914 	add.w	r9, r4, #20
 800fa40:	f108 0514 	add.w	r5, r8, #20
 800fa44:	f100 0e14 	add.w	lr, r0, #20
 800fa48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa50:	f108 0210 	add.w	r2, r8, #16
 800fa54:	46f2      	mov	sl, lr
 800fa56:	2100      	movs	r1, #0
 800fa58:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa60:	fa1f f883 	uxth.w	r8, r3
 800fa64:	fa11 f18b 	uxtah	r1, r1, fp
 800fa68:	0c1b      	lsrs	r3, r3, #16
 800fa6a:	eba1 0808 	sub.w	r8, r1, r8
 800fa6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa76:	fa1f f888 	uxth.w	r8, r8
 800fa7a:	1419      	asrs	r1, r3, #16
 800fa7c:	454e      	cmp	r6, r9
 800fa7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa82:	f84a 3b04 	str.w	r3, [sl], #4
 800fa86:	d8e7      	bhi.n	800fa58 <__mdiff+0x80>
 800fa88:	1b33      	subs	r3, r6, r4
 800fa8a:	3b15      	subs	r3, #21
 800fa8c:	f023 0303 	bic.w	r3, r3, #3
 800fa90:	3304      	adds	r3, #4
 800fa92:	3415      	adds	r4, #21
 800fa94:	42a6      	cmp	r6, r4
 800fa96:	bf38      	it	cc
 800fa98:	2304      	movcc	r3, #4
 800fa9a:	441d      	add	r5, r3
 800fa9c:	4473      	add	r3, lr
 800fa9e:	469e      	mov	lr, r3
 800faa0:	462e      	mov	r6, r5
 800faa2:	4566      	cmp	r6, ip
 800faa4:	d30e      	bcc.n	800fac4 <__mdiff+0xec>
 800faa6:	f10c 0203 	add.w	r2, ip, #3
 800faaa:	1b52      	subs	r2, r2, r5
 800faac:	f022 0203 	bic.w	r2, r2, #3
 800fab0:	3d03      	subs	r5, #3
 800fab2:	45ac      	cmp	ip, r5
 800fab4:	bf38      	it	cc
 800fab6:	2200      	movcc	r2, #0
 800fab8:	441a      	add	r2, r3
 800faba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fabe:	b17b      	cbz	r3, 800fae0 <__mdiff+0x108>
 800fac0:	6107      	str	r7, [r0, #16]
 800fac2:	e7a3      	b.n	800fa0c <__mdiff+0x34>
 800fac4:	f856 8b04 	ldr.w	r8, [r6], #4
 800fac8:	fa11 f288 	uxtah	r2, r1, r8
 800facc:	1414      	asrs	r4, r2, #16
 800face:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fad2:	b292      	uxth	r2, r2
 800fad4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fad8:	f84e 2b04 	str.w	r2, [lr], #4
 800fadc:	1421      	asrs	r1, r4, #16
 800fade:	e7e0      	b.n	800faa2 <__mdiff+0xca>
 800fae0:	3f01      	subs	r7, #1
 800fae2:	e7ea      	b.n	800faba <__mdiff+0xe2>
 800fae4:	08013b37 	.word	0x08013b37
 800fae8:	08013b48 	.word	0x08013b48

0800faec <__d2b>:
 800faec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800faf0:	4689      	mov	r9, r1
 800faf2:	2101      	movs	r1, #1
 800faf4:	ec57 6b10 	vmov	r6, r7, d0
 800faf8:	4690      	mov	r8, r2
 800fafa:	f7ff fccf 	bl	800f49c <_Balloc>
 800fafe:	4604      	mov	r4, r0
 800fb00:	b930      	cbnz	r0, 800fb10 <__d2b+0x24>
 800fb02:	4602      	mov	r2, r0
 800fb04:	4b25      	ldr	r3, [pc, #148]	; (800fb9c <__d2b+0xb0>)
 800fb06:	4826      	ldr	r0, [pc, #152]	; (800fba0 <__d2b+0xb4>)
 800fb08:	f240 310a 	movw	r1, #778	; 0x30a
 800fb0c:	f000 f9bc 	bl	800fe88 <__assert_func>
 800fb10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fb14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb18:	bb35      	cbnz	r5, 800fb68 <__d2b+0x7c>
 800fb1a:	2e00      	cmp	r6, #0
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	d028      	beq.n	800fb72 <__d2b+0x86>
 800fb20:	4668      	mov	r0, sp
 800fb22:	9600      	str	r6, [sp, #0]
 800fb24:	f7ff fd82 	bl	800f62c <__lo0bits>
 800fb28:	9900      	ldr	r1, [sp, #0]
 800fb2a:	b300      	cbz	r0, 800fb6e <__d2b+0x82>
 800fb2c:	9a01      	ldr	r2, [sp, #4]
 800fb2e:	f1c0 0320 	rsb	r3, r0, #32
 800fb32:	fa02 f303 	lsl.w	r3, r2, r3
 800fb36:	430b      	orrs	r3, r1
 800fb38:	40c2      	lsrs	r2, r0
 800fb3a:	6163      	str	r3, [r4, #20]
 800fb3c:	9201      	str	r2, [sp, #4]
 800fb3e:	9b01      	ldr	r3, [sp, #4]
 800fb40:	61a3      	str	r3, [r4, #24]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	bf14      	ite	ne
 800fb46:	2202      	movne	r2, #2
 800fb48:	2201      	moveq	r2, #1
 800fb4a:	6122      	str	r2, [r4, #16]
 800fb4c:	b1d5      	cbz	r5, 800fb84 <__d2b+0x98>
 800fb4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fb52:	4405      	add	r5, r0
 800fb54:	f8c9 5000 	str.w	r5, [r9]
 800fb58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb5c:	f8c8 0000 	str.w	r0, [r8]
 800fb60:	4620      	mov	r0, r4
 800fb62:	b003      	add	sp, #12
 800fb64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb6c:	e7d5      	b.n	800fb1a <__d2b+0x2e>
 800fb6e:	6161      	str	r1, [r4, #20]
 800fb70:	e7e5      	b.n	800fb3e <__d2b+0x52>
 800fb72:	a801      	add	r0, sp, #4
 800fb74:	f7ff fd5a 	bl	800f62c <__lo0bits>
 800fb78:	9b01      	ldr	r3, [sp, #4]
 800fb7a:	6163      	str	r3, [r4, #20]
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	6122      	str	r2, [r4, #16]
 800fb80:	3020      	adds	r0, #32
 800fb82:	e7e3      	b.n	800fb4c <__d2b+0x60>
 800fb84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb8c:	f8c9 0000 	str.w	r0, [r9]
 800fb90:	6918      	ldr	r0, [r3, #16]
 800fb92:	f7ff fd2b 	bl	800f5ec <__hi0bits>
 800fb96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb9a:	e7df      	b.n	800fb5c <__d2b+0x70>
 800fb9c:	08013b37 	.word	0x08013b37
 800fba0:	08013b48 	.word	0x08013b48

0800fba4 <_calloc_r>:
 800fba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fba6:	fba1 2402 	umull	r2, r4, r1, r2
 800fbaa:	b94c      	cbnz	r4, 800fbc0 <_calloc_r+0x1c>
 800fbac:	4611      	mov	r1, r2
 800fbae:	9201      	str	r2, [sp, #4]
 800fbb0:	f7fe f8da 	bl	800dd68 <_malloc_r>
 800fbb4:	9a01      	ldr	r2, [sp, #4]
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	b930      	cbnz	r0, 800fbc8 <_calloc_r+0x24>
 800fbba:	4628      	mov	r0, r5
 800fbbc:	b003      	add	sp, #12
 800fbbe:	bd30      	pop	{r4, r5, pc}
 800fbc0:	220c      	movs	r2, #12
 800fbc2:	6002      	str	r2, [r0, #0]
 800fbc4:	2500      	movs	r5, #0
 800fbc6:	e7f8      	b.n	800fbba <_calloc_r+0x16>
 800fbc8:	4621      	mov	r1, r4
 800fbca:	f7fe f859 	bl	800dc80 <memset>
 800fbce:	e7f4      	b.n	800fbba <_calloc_r+0x16>

0800fbd0 <__ssputs_r>:
 800fbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbd4:	688e      	ldr	r6, [r1, #8]
 800fbd6:	429e      	cmp	r6, r3
 800fbd8:	4682      	mov	sl, r0
 800fbda:	460c      	mov	r4, r1
 800fbdc:	4690      	mov	r8, r2
 800fbde:	461f      	mov	r7, r3
 800fbe0:	d838      	bhi.n	800fc54 <__ssputs_r+0x84>
 800fbe2:	898a      	ldrh	r2, [r1, #12]
 800fbe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbe8:	d032      	beq.n	800fc50 <__ssputs_r+0x80>
 800fbea:	6825      	ldr	r5, [r4, #0]
 800fbec:	6909      	ldr	r1, [r1, #16]
 800fbee:	eba5 0901 	sub.w	r9, r5, r1
 800fbf2:	6965      	ldr	r5, [r4, #20]
 800fbf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	444b      	add	r3, r9
 800fc00:	106d      	asrs	r5, r5, #1
 800fc02:	429d      	cmp	r5, r3
 800fc04:	bf38      	it	cc
 800fc06:	461d      	movcc	r5, r3
 800fc08:	0553      	lsls	r3, r2, #21
 800fc0a:	d531      	bpl.n	800fc70 <__ssputs_r+0xa0>
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	f7fe f8ab 	bl	800dd68 <_malloc_r>
 800fc12:	4606      	mov	r6, r0
 800fc14:	b950      	cbnz	r0, 800fc2c <__ssputs_r+0x5c>
 800fc16:	230c      	movs	r3, #12
 800fc18:	f8ca 3000 	str.w	r3, [sl]
 800fc1c:	89a3      	ldrh	r3, [r4, #12]
 800fc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc22:	81a3      	strh	r3, [r4, #12]
 800fc24:	f04f 30ff 	mov.w	r0, #4294967295
 800fc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc2c:	6921      	ldr	r1, [r4, #16]
 800fc2e:	464a      	mov	r2, r9
 800fc30:	f7fe f818 	bl	800dc64 <memcpy>
 800fc34:	89a3      	ldrh	r3, [r4, #12]
 800fc36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc3e:	81a3      	strh	r3, [r4, #12]
 800fc40:	6126      	str	r6, [r4, #16]
 800fc42:	6165      	str	r5, [r4, #20]
 800fc44:	444e      	add	r6, r9
 800fc46:	eba5 0509 	sub.w	r5, r5, r9
 800fc4a:	6026      	str	r6, [r4, #0]
 800fc4c:	60a5      	str	r5, [r4, #8]
 800fc4e:	463e      	mov	r6, r7
 800fc50:	42be      	cmp	r6, r7
 800fc52:	d900      	bls.n	800fc56 <__ssputs_r+0x86>
 800fc54:	463e      	mov	r6, r7
 800fc56:	6820      	ldr	r0, [r4, #0]
 800fc58:	4632      	mov	r2, r6
 800fc5a:	4641      	mov	r1, r8
 800fc5c:	f000 f959 	bl	800ff12 <memmove>
 800fc60:	68a3      	ldr	r3, [r4, #8]
 800fc62:	1b9b      	subs	r3, r3, r6
 800fc64:	60a3      	str	r3, [r4, #8]
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	4433      	add	r3, r6
 800fc6a:	6023      	str	r3, [r4, #0]
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	e7db      	b.n	800fc28 <__ssputs_r+0x58>
 800fc70:	462a      	mov	r2, r5
 800fc72:	f000 f968 	bl	800ff46 <_realloc_r>
 800fc76:	4606      	mov	r6, r0
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	d1e1      	bne.n	800fc40 <__ssputs_r+0x70>
 800fc7c:	6921      	ldr	r1, [r4, #16]
 800fc7e:	4650      	mov	r0, sl
 800fc80:	f7fe f806 	bl	800dc90 <_free_r>
 800fc84:	e7c7      	b.n	800fc16 <__ssputs_r+0x46>
	...

0800fc88 <_svfiprintf_r>:
 800fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	4698      	mov	r8, r3
 800fc8e:	898b      	ldrh	r3, [r1, #12]
 800fc90:	061b      	lsls	r3, r3, #24
 800fc92:	b09d      	sub	sp, #116	; 0x74
 800fc94:	4607      	mov	r7, r0
 800fc96:	460d      	mov	r5, r1
 800fc98:	4614      	mov	r4, r2
 800fc9a:	d50e      	bpl.n	800fcba <_svfiprintf_r+0x32>
 800fc9c:	690b      	ldr	r3, [r1, #16]
 800fc9e:	b963      	cbnz	r3, 800fcba <_svfiprintf_r+0x32>
 800fca0:	2140      	movs	r1, #64	; 0x40
 800fca2:	f7fe f861 	bl	800dd68 <_malloc_r>
 800fca6:	6028      	str	r0, [r5, #0]
 800fca8:	6128      	str	r0, [r5, #16]
 800fcaa:	b920      	cbnz	r0, 800fcb6 <_svfiprintf_r+0x2e>
 800fcac:	230c      	movs	r3, #12
 800fcae:	603b      	str	r3, [r7, #0]
 800fcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb4:	e0d1      	b.n	800fe5a <_svfiprintf_r+0x1d2>
 800fcb6:	2340      	movs	r3, #64	; 0x40
 800fcb8:	616b      	str	r3, [r5, #20]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	9309      	str	r3, [sp, #36]	; 0x24
 800fcbe:	2320      	movs	r3, #32
 800fcc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcc8:	2330      	movs	r3, #48	; 0x30
 800fcca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe74 <_svfiprintf_r+0x1ec>
 800fcce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcd2:	f04f 0901 	mov.w	r9, #1
 800fcd6:	4623      	mov	r3, r4
 800fcd8:	469a      	mov	sl, r3
 800fcda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcde:	b10a      	cbz	r2, 800fce4 <_svfiprintf_r+0x5c>
 800fce0:	2a25      	cmp	r2, #37	; 0x25
 800fce2:	d1f9      	bne.n	800fcd8 <_svfiprintf_r+0x50>
 800fce4:	ebba 0b04 	subs.w	fp, sl, r4
 800fce8:	d00b      	beq.n	800fd02 <_svfiprintf_r+0x7a>
 800fcea:	465b      	mov	r3, fp
 800fcec:	4622      	mov	r2, r4
 800fcee:	4629      	mov	r1, r5
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	f7ff ff6d 	bl	800fbd0 <__ssputs_r>
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	f000 80aa 	beq.w	800fe50 <_svfiprintf_r+0x1c8>
 800fcfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcfe:	445a      	add	r2, fp
 800fd00:	9209      	str	r2, [sp, #36]	; 0x24
 800fd02:	f89a 3000 	ldrb.w	r3, [sl]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 80a2 	beq.w	800fe50 <_svfiprintf_r+0x1c8>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd16:	f10a 0a01 	add.w	sl, sl, #1
 800fd1a:	9304      	str	r3, [sp, #16]
 800fd1c:	9307      	str	r3, [sp, #28]
 800fd1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd22:	931a      	str	r3, [sp, #104]	; 0x68
 800fd24:	4654      	mov	r4, sl
 800fd26:	2205      	movs	r2, #5
 800fd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd2c:	4851      	ldr	r0, [pc, #324]	; (800fe74 <_svfiprintf_r+0x1ec>)
 800fd2e:	f7f0 fa6f 	bl	8000210 <memchr>
 800fd32:	9a04      	ldr	r2, [sp, #16]
 800fd34:	b9d8      	cbnz	r0, 800fd6e <_svfiprintf_r+0xe6>
 800fd36:	06d0      	lsls	r0, r2, #27
 800fd38:	bf44      	itt	mi
 800fd3a:	2320      	movmi	r3, #32
 800fd3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd40:	0711      	lsls	r1, r2, #28
 800fd42:	bf44      	itt	mi
 800fd44:	232b      	movmi	r3, #43	; 0x2b
 800fd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd4a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd4e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd50:	d015      	beq.n	800fd7e <_svfiprintf_r+0xf6>
 800fd52:	9a07      	ldr	r2, [sp, #28]
 800fd54:	4654      	mov	r4, sl
 800fd56:	2000      	movs	r0, #0
 800fd58:	f04f 0c0a 	mov.w	ip, #10
 800fd5c:	4621      	mov	r1, r4
 800fd5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd62:	3b30      	subs	r3, #48	; 0x30
 800fd64:	2b09      	cmp	r3, #9
 800fd66:	d94e      	bls.n	800fe06 <_svfiprintf_r+0x17e>
 800fd68:	b1b0      	cbz	r0, 800fd98 <_svfiprintf_r+0x110>
 800fd6a:	9207      	str	r2, [sp, #28]
 800fd6c:	e014      	b.n	800fd98 <_svfiprintf_r+0x110>
 800fd6e:	eba0 0308 	sub.w	r3, r0, r8
 800fd72:	fa09 f303 	lsl.w	r3, r9, r3
 800fd76:	4313      	orrs	r3, r2
 800fd78:	9304      	str	r3, [sp, #16]
 800fd7a:	46a2      	mov	sl, r4
 800fd7c:	e7d2      	b.n	800fd24 <_svfiprintf_r+0x9c>
 800fd7e:	9b03      	ldr	r3, [sp, #12]
 800fd80:	1d19      	adds	r1, r3, #4
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	9103      	str	r1, [sp, #12]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	bfbb      	ittet	lt
 800fd8a:	425b      	neglt	r3, r3
 800fd8c:	f042 0202 	orrlt.w	r2, r2, #2
 800fd90:	9307      	strge	r3, [sp, #28]
 800fd92:	9307      	strlt	r3, [sp, #28]
 800fd94:	bfb8      	it	lt
 800fd96:	9204      	strlt	r2, [sp, #16]
 800fd98:	7823      	ldrb	r3, [r4, #0]
 800fd9a:	2b2e      	cmp	r3, #46	; 0x2e
 800fd9c:	d10c      	bne.n	800fdb8 <_svfiprintf_r+0x130>
 800fd9e:	7863      	ldrb	r3, [r4, #1]
 800fda0:	2b2a      	cmp	r3, #42	; 0x2a
 800fda2:	d135      	bne.n	800fe10 <_svfiprintf_r+0x188>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	1d1a      	adds	r2, r3, #4
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	9203      	str	r2, [sp, #12]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfb8      	it	lt
 800fdb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdb4:	3402      	adds	r4, #2
 800fdb6:	9305      	str	r3, [sp, #20]
 800fdb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe84 <_svfiprintf_r+0x1fc>
 800fdbc:	7821      	ldrb	r1, [r4, #0]
 800fdbe:	2203      	movs	r2, #3
 800fdc0:	4650      	mov	r0, sl
 800fdc2:	f7f0 fa25 	bl	8000210 <memchr>
 800fdc6:	b140      	cbz	r0, 800fdda <_svfiprintf_r+0x152>
 800fdc8:	2340      	movs	r3, #64	; 0x40
 800fdca:	eba0 000a 	sub.w	r0, r0, sl
 800fdce:	fa03 f000 	lsl.w	r0, r3, r0
 800fdd2:	9b04      	ldr	r3, [sp, #16]
 800fdd4:	4303      	orrs	r3, r0
 800fdd6:	3401      	adds	r4, #1
 800fdd8:	9304      	str	r3, [sp, #16]
 800fdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdde:	4826      	ldr	r0, [pc, #152]	; (800fe78 <_svfiprintf_r+0x1f0>)
 800fde0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fde4:	2206      	movs	r2, #6
 800fde6:	f7f0 fa13 	bl	8000210 <memchr>
 800fdea:	2800      	cmp	r0, #0
 800fdec:	d038      	beq.n	800fe60 <_svfiprintf_r+0x1d8>
 800fdee:	4b23      	ldr	r3, [pc, #140]	; (800fe7c <_svfiprintf_r+0x1f4>)
 800fdf0:	bb1b      	cbnz	r3, 800fe3a <_svfiprintf_r+0x1b2>
 800fdf2:	9b03      	ldr	r3, [sp, #12]
 800fdf4:	3307      	adds	r3, #7
 800fdf6:	f023 0307 	bic.w	r3, r3, #7
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	9303      	str	r3, [sp, #12]
 800fdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe00:	4433      	add	r3, r6
 800fe02:	9309      	str	r3, [sp, #36]	; 0x24
 800fe04:	e767      	b.n	800fcd6 <_svfiprintf_r+0x4e>
 800fe06:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	2001      	movs	r0, #1
 800fe0e:	e7a5      	b.n	800fd5c <_svfiprintf_r+0xd4>
 800fe10:	2300      	movs	r3, #0
 800fe12:	3401      	adds	r4, #1
 800fe14:	9305      	str	r3, [sp, #20]
 800fe16:	4619      	mov	r1, r3
 800fe18:	f04f 0c0a 	mov.w	ip, #10
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe22:	3a30      	subs	r2, #48	; 0x30
 800fe24:	2a09      	cmp	r2, #9
 800fe26:	d903      	bls.n	800fe30 <_svfiprintf_r+0x1a8>
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d0c5      	beq.n	800fdb8 <_svfiprintf_r+0x130>
 800fe2c:	9105      	str	r1, [sp, #20]
 800fe2e:	e7c3      	b.n	800fdb8 <_svfiprintf_r+0x130>
 800fe30:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe34:	4604      	mov	r4, r0
 800fe36:	2301      	movs	r3, #1
 800fe38:	e7f0      	b.n	800fe1c <_svfiprintf_r+0x194>
 800fe3a:	ab03      	add	r3, sp, #12
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	462a      	mov	r2, r5
 800fe40:	4b0f      	ldr	r3, [pc, #60]	; (800fe80 <_svfiprintf_r+0x1f8>)
 800fe42:	a904      	add	r1, sp, #16
 800fe44:	4638      	mov	r0, r7
 800fe46:	f7fe f8a3 	bl	800df90 <_printf_float>
 800fe4a:	1c42      	adds	r2, r0, #1
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	d1d6      	bne.n	800fdfe <_svfiprintf_r+0x176>
 800fe50:	89ab      	ldrh	r3, [r5, #12]
 800fe52:	065b      	lsls	r3, r3, #25
 800fe54:	f53f af2c 	bmi.w	800fcb0 <_svfiprintf_r+0x28>
 800fe58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe5a:	b01d      	add	sp, #116	; 0x74
 800fe5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe60:	ab03      	add	r3, sp, #12
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	462a      	mov	r2, r5
 800fe66:	4b06      	ldr	r3, [pc, #24]	; (800fe80 <_svfiprintf_r+0x1f8>)
 800fe68:	a904      	add	r1, sp, #16
 800fe6a:	4638      	mov	r0, r7
 800fe6c:	f7fe fb34 	bl	800e4d8 <_printf_i>
 800fe70:	e7eb      	b.n	800fe4a <_svfiprintf_r+0x1c2>
 800fe72:	bf00      	nop
 800fe74:	08013ca4 	.word	0x08013ca4
 800fe78:	08013cae 	.word	0x08013cae
 800fe7c:	0800df91 	.word	0x0800df91
 800fe80:	0800fbd1 	.word	0x0800fbd1
 800fe84:	08013caa 	.word	0x08013caa

0800fe88 <__assert_func>:
 800fe88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe8a:	4614      	mov	r4, r2
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4b09      	ldr	r3, [pc, #36]	; (800feb4 <__assert_func+0x2c>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4605      	mov	r5, r0
 800fe94:	68d8      	ldr	r0, [r3, #12]
 800fe96:	b14c      	cbz	r4, 800feac <__assert_func+0x24>
 800fe98:	4b07      	ldr	r3, [pc, #28]	; (800feb8 <__assert_func+0x30>)
 800fe9a:	9100      	str	r1, [sp, #0]
 800fe9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fea0:	4906      	ldr	r1, [pc, #24]	; (800febc <__assert_func+0x34>)
 800fea2:	462b      	mov	r3, r5
 800fea4:	f000 f80e 	bl	800fec4 <fiprintf>
 800fea8:	f000 faa4 	bl	80103f4 <abort>
 800feac:	4b04      	ldr	r3, [pc, #16]	; (800fec0 <__assert_func+0x38>)
 800feae:	461c      	mov	r4, r3
 800feb0:	e7f3      	b.n	800fe9a <__assert_func+0x12>
 800feb2:	bf00      	nop
 800feb4:	20000040 	.word	0x20000040
 800feb8:	08013cb5 	.word	0x08013cb5
 800febc:	08013cc2 	.word	0x08013cc2
 800fec0:	08013cf0 	.word	0x08013cf0

0800fec4 <fiprintf>:
 800fec4:	b40e      	push	{r1, r2, r3}
 800fec6:	b503      	push	{r0, r1, lr}
 800fec8:	4601      	mov	r1, r0
 800feca:	ab03      	add	r3, sp, #12
 800fecc:	4805      	ldr	r0, [pc, #20]	; (800fee4 <fiprintf+0x20>)
 800fece:	f853 2b04 	ldr.w	r2, [r3], #4
 800fed2:	6800      	ldr	r0, [r0, #0]
 800fed4:	9301      	str	r3, [sp, #4]
 800fed6:	f000 f88f 	bl	800fff8 <_vfiprintf_r>
 800feda:	b002      	add	sp, #8
 800fedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fee0:	b003      	add	sp, #12
 800fee2:	4770      	bx	lr
 800fee4:	20000040 	.word	0x20000040

0800fee8 <__retarget_lock_init_recursive>:
 800fee8:	4770      	bx	lr

0800feea <__retarget_lock_acquire_recursive>:
 800feea:	4770      	bx	lr

0800feec <__retarget_lock_release_recursive>:
 800feec:	4770      	bx	lr

0800feee <__ascii_mbtowc>:
 800feee:	b082      	sub	sp, #8
 800fef0:	b901      	cbnz	r1, 800fef4 <__ascii_mbtowc+0x6>
 800fef2:	a901      	add	r1, sp, #4
 800fef4:	b142      	cbz	r2, 800ff08 <__ascii_mbtowc+0x1a>
 800fef6:	b14b      	cbz	r3, 800ff0c <__ascii_mbtowc+0x1e>
 800fef8:	7813      	ldrb	r3, [r2, #0]
 800fefa:	600b      	str	r3, [r1, #0]
 800fefc:	7812      	ldrb	r2, [r2, #0]
 800fefe:	1e10      	subs	r0, r2, #0
 800ff00:	bf18      	it	ne
 800ff02:	2001      	movne	r0, #1
 800ff04:	b002      	add	sp, #8
 800ff06:	4770      	bx	lr
 800ff08:	4610      	mov	r0, r2
 800ff0a:	e7fb      	b.n	800ff04 <__ascii_mbtowc+0x16>
 800ff0c:	f06f 0001 	mvn.w	r0, #1
 800ff10:	e7f8      	b.n	800ff04 <__ascii_mbtowc+0x16>

0800ff12 <memmove>:
 800ff12:	4288      	cmp	r0, r1
 800ff14:	b510      	push	{r4, lr}
 800ff16:	eb01 0402 	add.w	r4, r1, r2
 800ff1a:	d902      	bls.n	800ff22 <memmove+0x10>
 800ff1c:	4284      	cmp	r4, r0
 800ff1e:	4623      	mov	r3, r4
 800ff20:	d807      	bhi.n	800ff32 <memmove+0x20>
 800ff22:	1e43      	subs	r3, r0, #1
 800ff24:	42a1      	cmp	r1, r4
 800ff26:	d008      	beq.n	800ff3a <memmove+0x28>
 800ff28:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff30:	e7f8      	b.n	800ff24 <memmove+0x12>
 800ff32:	4402      	add	r2, r0
 800ff34:	4601      	mov	r1, r0
 800ff36:	428a      	cmp	r2, r1
 800ff38:	d100      	bne.n	800ff3c <memmove+0x2a>
 800ff3a:	bd10      	pop	{r4, pc}
 800ff3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff44:	e7f7      	b.n	800ff36 <memmove+0x24>

0800ff46 <_realloc_r>:
 800ff46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff4a:	4680      	mov	r8, r0
 800ff4c:	4614      	mov	r4, r2
 800ff4e:	460e      	mov	r6, r1
 800ff50:	b921      	cbnz	r1, 800ff5c <_realloc_r+0x16>
 800ff52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff56:	4611      	mov	r1, r2
 800ff58:	f7fd bf06 	b.w	800dd68 <_malloc_r>
 800ff5c:	b92a      	cbnz	r2, 800ff6a <_realloc_r+0x24>
 800ff5e:	f7fd fe97 	bl	800dc90 <_free_r>
 800ff62:	4625      	mov	r5, r4
 800ff64:	4628      	mov	r0, r5
 800ff66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6a:	f000 fc67 	bl	801083c <_malloc_usable_size_r>
 800ff6e:	4284      	cmp	r4, r0
 800ff70:	4607      	mov	r7, r0
 800ff72:	d802      	bhi.n	800ff7a <_realloc_r+0x34>
 800ff74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff78:	d812      	bhi.n	800ffa0 <_realloc_r+0x5a>
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	f7fd fef3 	bl	800dd68 <_malloc_r>
 800ff82:	4605      	mov	r5, r0
 800ff84:	2800      	cmp	r0, #0
 800ff86:	d0ed      	beq.n	800ff64 <_realloc_r+0x1e>
 800ff88:	42bc      	cmp	r4, r7
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	4631      	mov	r1, r6
 800ff8e:	bf28      	it	cs
 800ff90:	463a      	movcs	r2, r7
 800ff92:	f7fd fe67 	bl	800dc64 <memcpy>
 800ff96:	4631      	mov	r1, r6
 800ff98:	4640      	mov	r0, r8
 800ff9a:	f7fd fe79 	bl	800dc90 <_free_r>
 800ff9e:	e7e1      	b.n	800ff64 <_realloc_r+0x1e>
 800ffa0:	4635      	mov	r5, r6
 800ffa2:	e7df      	b.n	800ff64 <_realloc_r+0x1e>

0800ffa4 <__sfputc_r>:
 800ffa4:	6893      	ldr	r3, [r2, #8]
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	b410      	push	{r4}
 800ffac:	6093      	str	r3, [r2, #8]
 800ffae:	da08      	bge.n	800ffc2 <__sfputc_r+0x1e>
 800ffb0:	6994      	ldr	r4, [r2, #24]
 800ffb2:	42a3      	cmp	r3, r4
 800ffb4:	db01      	blt.n	800ffba <__sfputc_r+0x16>
 800ffb6:	290a      	cmp	r1, #10
 800ffb8:	d103      	bne.n	800ffc2 <__sfputc_r+0x1e>
 800ffba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffbe:	f000 b94b 	b.w	8010258 <__swbuf_r>
 800ffc2:	6813      	ldr	r3, [r2, #0]
 800ffc4:	1c58      	adds	r0, r3, #1
 800ffc6:	6010      	str	r0, [r2, #0]
 800ffc8:	7019      	strb	r1, [r3, #0]
 800ffca:	4608      	mov	r0, r1
 800ffcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffd0:	4770      	bx	lr

0800ffd2 <__sfputs_r>:
 800ffd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd4:	4606      	mov	r6, r0
 800ffd6:	460f      	mov	r7, r1
 800ffd8:	4614      	mov	r4, r2
 800ffda:	18d5      	adds	r5, r2, r3
 800ffdc:	42ac      	cmp	r4, r5
 800ffde:	d101      	bne.n	800ffe4 <__sfputs_r+0x12>
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	e007      	b.n	800fff4 <__sfputs_r+0x22>
 800ffe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffe8:	463a      	mov	r2, r7
 800ffea:	4630      	mov	r0, r6
 800ffec:	f7ff ffda 	bl	800ffa4 <__sfputc_r>
 800fff0:	1c43      	adds	r3, r0, #1
 800fff2:	d1f3      	bne.n	800ffdc <__sfputs_r+0xa>
 800fff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fff8 <_vfiprintf_r>:
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	460d      	mov	r5, r1
 800fffe:	b09d      	sub	sp, #116	; 0x74
 8010000:	4614      	mov	r4, r2
 8010002:	4698      	mov	r8, r3
 8010004:	4606      	mov	r6, r0
 8010006:	b118      	cbz	r0, 8010010 <_vfiprintf_r+0x18>
 8010008:	6983      	ldr	r3, [r0, #24]
 801000a:	b90b      	cbnz	r3, 8010010 <_vfiprintf_r+0x18>
 801000c:	f000 fb14 	bl	8010638 <__sinit>
 8010010:	4b89      	ldr	r3, [pc, #548]	; (8010238 <_vfiprintf_r+0x240>)
 8010012:	429d      	cmp	r5, r3
 8010014:	d11b      	bne.n	801004e <_vfiprintf_r+0x56>
 8010016:	6875      	ldr	r5, [r6, #4]
 8010018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801001a:	07d9      	lsls	r1, r3, #31
 801001c:	d405      	bmi.n	801002a <_vfiprintf_r+0x32>
 801001e:	89ab      	ldrh	r3, [r5, #12]
 8010020:	059a      	lsls	r2, r3, #22
 8010022:	d402      	bmi.n	801002a <_vfiprintf_r+0x32>
 8010024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010026:	f7ff ff60 	bl	800feea <__retarget_lock_acquire_recursive>
 801002a:	89ab      	ldrh	r3, [r5, #12]
 801002c:	071b      	lsls	r3, r3, #28
 801002e:	d501      	bpl.n	8010034 <_vfiprintf_r+0x3c>
 8010030:	692b      	ldr	r3, [r5, #16]
 8010032:	b9eb      	cbnz	r3, 8010070 <_vfiprintf_r+0x78>
 8010034:	4629      	mov	r1, r5
 8010036:	4630      	mov	r0, r6
 8010038:	f000 f96e 	bl	8010318 <__swsetup_r>
 801003c:	b1c0      	cbz	r0, 8010070 <_vfiprintf_r+0x78>
 801003e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010040:	07dc      	lsls	r4, r3, #31
 8010042:	d50e      	bpl.n	8010062 <_vfiprintf_r+0x6a>
 8010044:	f04f 30ff 	mov.w	r0, #4294967295
 8010048:	b01d      	add	sp, #116	; 0x74
 801004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801004e:	4b7b      	ldr	r3, [pc, #492]	; (801023c <_vfiprintf_r+0x244>)
 8010050:	429d      	cmp	r5, r3
 8010052:	d101      	bne.n	8010058 <_vfiprintf_r+0x60>
 8010054:	68b5      	ldr	r5, [r6, #8]
 8010056:	e7df      	b.n	8010018 <_vfiprintf_r+0x20>
 8010058:	4b79      	ldr	r3, [pc, #484]	; (8010240 <_vfiprintf_r+0x248>)
 801005a:	429d      	cmp	r5, r3
 801005c:	bf08      	it	eq
 801005e:	68f5      	ldreq	r5, [r6, #12]
 8010060:	e7da      	b.n	8010018 <_vfiprintf_r+0x20>
 8010062:	89ab      	ldrh	r3, [r5, #12]
 8010064:	0598      	lsls	r0, r3, #22
 8010066:	d4ed      	bmi.n	8010044 <_vfiprintf_r+0x4c>
 8010068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801006a:	f7ff ff3f 	bl	800feec <__retarget_lock_release_recursive>
 801006e:	e7e9      	b.n	8010044 <_vfiprintf_r+0x4c>
 8010070:	2300      	movs	r3, #0
 8010072:	9309      	str	r3, [sp, #36]	; 0x24
 8010074:	2320      	movs	r3, #32
 8010076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801007a:	f8cd 800c 	str.w	r8, [sp, #12]
 801007e:	2330      	movs	r3, #48	; 0x30
 8010080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010244 <_vfiprintf_r+0x24c>
 8010084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010088:	f04f 0901 	mov.w	r9, #1
 801008c:	4623      	mov	r3, r4
 801008e:	469a      	mov	sl, r3
 8010090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010094:	b10a      	cbz	r2, 801009a <_vfiprintf_r+0xa2>
 8010096:	2a25      	cmp	r2, #37	; 0x25
 8010098:	d1f9      	bne.n	801008e <_vfiprintf_r+0x96>
 801009a:	ebba 0b04 	subs.w	fp, sl, r4
 801009e:	d00b      	beq.n	80100b8 <_vfiprintf_r+0xc0>
 80100a0:	465b      	mov	r3, fp
 80100a2:	4622      	mov	r2, r4
 80100a4:	4629      	mov	r1, r5
 80100a6:	4630      	mov	r0, r6
 80100a8:	f7ff ff93 	bl	800ffd2 <__sfputs_r>
 80100ac:	3001      	adds	r0, #1
 80100ae:	f000 80aa 	beq.w	8010206 <_vfiprintf_r+0x20e>
 80100b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100b4:	445a      	add	r2, fp
 80100b6:	9209      	str	r2, [sp, #36]	; 0x24
 80100b8:	f89a 3000 	ldrb.w	r3, [sl]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f000 80a2 	beq.w	8010206 <_vfiprintf_r+0x20e>
 80100c2:	2300      	movs	r3, #0
 80100c4:	f04f 32ff 	mov.w	r2, #4294967295
 80100c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100cc:	f10a 0a01 	add.w	sl, sl, #1
 80100d0:	9304      	str	r3, [sp, #16]
 80100d2:	9307      	str	r3, [sp, #28]
 80100d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100d8:	931a      	str	r3, [sp, #104]	; 0x68
 80100da:	4654      	mov	r4, sl
 80100dc:	2205      	movs	r2, #5
 80100de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e2:	4858      	ldr	r0, [pc, #352]	; (8010244 <_vfiprintf_r+0x24c>)
 80100e4:	f7f0 f894 	bl	8000210 <memchr>
 80100e8:	9a04      	ldr	r2, [sp, #16]
 80100ea:	b9d8      	cbnz	r0, 8010124 <_vfiprintf_r+0x12c>
 80100ec:	06d1      	lsls	r1, r2, #27
 80100ee:	bf44      	itt	mi
 80100f0:	2320      	movmi	r3, #32
 80100f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100f6:	0713      	lsls	r3, r2, #28
 80100f8:	bf44      	itt	mi
 80100fa:	232b      	movmi	r3, #43	; 0x2b
 80100fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010100:	f89a 3000 	ldrb.w	r3, [sl]
 8010104:	2b2a      	cmp	r3, #42	; 0x2a
 8010106:	d015      	beq.n	8010134 <_vfiprintf_r+0x13c>
 8010108:	9a07      	ldr	r2, [sp, #28]
 801010a:	4654      	mov	r4, sl
 801010c:	2000      	movs	r0, #0
 801010e:	f04f 0c0a 	mov.w	ip, #10
 8010112:	4621      	mov	r1, r4
 8010114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010118:	3b30      	subs	r3, #48	; 0x30
 801011a:	2b09      	cmp	r3, #9
 801011c:	d94e      	bls.n	80101bc <_vfiprintf_r+0x1c4>
 801011e:	b1b0      	cbz	r0, 801014e <_vfiprintf_r+0x156>
 8010120:	9207      	str	r2, [sp, #28]
 8010122:	e014      	b.n	801014e <_vfiprintf_r+0x156>
 8010124:	eba0 0308 	sub.w	r3, r0, r8
 8010128:	fa09 f303 	lsl.w	r3, r9, r3
 801012c:	4313      	orrs	r3, r2
 801012e:	9304      	str	r3, [sp, #16]
 8010130:	46a2      	mov	sl, r4
 8010132:	e7d2      	b.n	80100da <_vfiprintf_r+0xe2>
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	1d19      	adds	r1, r3, #4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	9103      	str	r1, [sp, #12]
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfbb      	ittet	lt
 8010140:	425b      	neglt	r3, r3
 8010142:	f042 0202 	orrlt.w	r2, r2, #2
 8010146:	9307      	strge	r3, [sp, #28]
 8010148:	9307      	strlt	r3, [sp, #28]
 801014a:	bfb8      	it	lt
 801014c:	9204      	strlt	r2, [sp, #16]
 801014e:	7823      	ldrb	r3, [r4, #0]
 8010150:	2b2e      	cmp	r3, #46	; 0x2e
 8010152:	d10c      	bne.n	801016e <_vfiprintf_r+0x176>
 8010154:	7863      	ldrb	r3, [r4, #1]
 8010156:	2b2a      	cmp	r3, #42	; 0x2a
 8010158:	d135      	bne.n	80101c6 <_vfiprintf_r+0x1ce>
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	1d1a      	adds	r2, r3, #4
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	9203      	str	r2, [sp, #12]
 8010162:	2b00      	cmp	r3, #0
 8010164:	bfb8      	it	lt
 8010166:	f04f 33ff 	movlt.w	r3, #4294967295
 801016a:	3402      	adds	r4, #2
 801016c:	9305      	str	r3, [sp, #20]
 801016e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010254 <_vfiprintf_r+0x25c>
 8010172:	7821      	ldrb	r1, [r4, #0]
 8010174:	2203      	movs	r2, #3
 8010176:	4650      	mov	r0, sl
 8010178:	f7f0 f84a 	bl	8000210 <memchr>
 801017c:	b140      	cbz	r0, 8010190 <_vfiprintf_r+0x198>
 801017e:	2340      	movs	r3, #64	; 0x40
 8010180:	eba0 000a 	sub.w	r0, r0, sl
 8010184:	fa03 f000 	lsl.w	r0, r3, r0
 8010188:	9b04      	ldr	r3, [sp, #16]
 801018a:	4303      	orrs	r3, r0
 801018c:	3401      	adds	r4, #1
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010194:	482c      	ldr	r0, [pc, #176]	; (8010248 <_vfiprintf_r+0x250>)
 8010196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801019a:	2206      	movs	r2, #6
 801019c:	f7f0 f838 	bl	8000210 <memchr>
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d03f      	beq.n	8010224 <_vfiprintf_r+0x22c>
 80101a4:	4b29      	ldr	r3, [pc, #164]	; (801024c <_vfiprintf_r+0x254>)
 80101a6:	bb1b      	cbnz	r3, 80101f0 <_vfiprintf_r+0x1f8>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	3307      	adds	r3, #7
 80101ac:	f023 0307 	bic.w	r3, r3, #7
 80101b0:	3308      	adds	r3, #8
 80101b2:	9303      	str	r3, [sp, #12]
 80101b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b6:	443b      	add	r3, r7
 80101b8:	9309      	str	r3, [sp, #36]	; 0x24
 80101ba:	e767      	b.n	801008c <_vfiprintf_r+0x94>
 80101bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80101c0:	460c      	mov	r4, r1
 80101c2:	2001      	movs	r0, #1
 80101c4:	e7a5      	b.n	8010112 <_vfiprintf_r+0x11a>
 80101c6:	2300      	movs	r3, #0
 80101c8:	3401      	adds	r4, #1
 80101ca:	9305      	str	r3, [sp, #20]
 80101cc:	4619      	mov	r1, r3
 80101ce:	f04f 0c0a 	mov.w	ip, #10
 80101d2:	4620      	mov	r0, r4
 80101d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101d8:	3a30      	subs	r2, #48	; 0x30
 80101da:	2a09      	cmp	r2, #9
 80101dc:	d903      	bls.n	80101e6 <_vfiprintf_r+0x1ee>
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d0c5      	beq.n	801016e <_vfiprintf_r+0x176>
 80101e2:	9105      	str	r1, [sp, #20]
 80101e4:	e7c3      	b.n	801016e <_vfiprintf_r+0x176>
 80101e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80101ea:	4604      	mov	r4, r0
 80101ec:	2301      	movs	r3, #1
 80101ee:	e7f0      	b.n	80101d2 <_vfiprintf_r+0x1da>
 80101f0:	ab03      	add	r3, sp, #12
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	462a      	mov	r2, r5
 80101f6:	4b16      	ldr	r3, [pc, #88]	; (8010250 <_vfiprintf_r+0x258>)
 80101f8:	a904      	add	r1, sp, #16
 80101fa:	4630      	mov	r0, r6
 80101fc:	f7fd fec8 	bl	800df90 <_printf_float>
 8010200:	4607      	mov	r7, r0
 8010202:	1c78      	adds	r0, r7, #1
 8010204:	d1d6      	bne.n	80101b4 <_vfiprintf_r+0x1bc>
 8010206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010208:	07d9      	lsls	r1, r3, #31
 801020a:	d405      	bmi.n	8010218 <_vfiprintf_r+0x220>
 801020c:	89ab      	ldrh	r3, [r5, #12]
 801020e:	059a      	lsls	r2, r3, #22
 8010210:	d402      	bmi.n	8010218 <_vfiprintf_r+0x220>
 8010212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010214:	f7ff fe6a 	bl	800feec <__retarget_lock_release_recursive>
 8010218:	89ab      	ldrh	r3, [r5, #12]
 801021a:	065b      	lsls	r3, r3, #25
 801021c:	f53f af12 	bmi.w	8010044 <_vfiprintf_r+0x4c>
 8010220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010222:	e711      	b.n	8010048 <_vfiprintf_r+0x50>
 8010224:	ab03      	add	r3, sp, #12
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	462a      	mov	r2, r5
 801022a:	4b09      	ldr	r3, [pc, #36]	; (8010250 <_vfiprintf_r+0x258>)
 801022c:	a904      	add	r1, sp, #16
 801022e:	4630      	mov	r0, r6
 8010230:	f7fe f952 	bl	800e4d8 <_printf_i>
 8010234:	e7e4      	b.n	8010200 <_vfiprintf_r+0x208>
 8010236:	bf00      	nop
 8010238:	08013e1c 	.word	0x08013e1c
 801023c:	08013e3c 	.word	0x08013e3c
 8010240:	08013dfc 	.word	0x08013dfc
 8010244:	08013ca4 	.word	0x08013ca4
 8010248:	08013cae 	.word	0x08013cae
 801024c:	0800df91 	.word	0x0800df91
 8010250:	0800ffd3 	.word	0x0800ffd3
 8010254:	08013caa 	.word	0x08013caa

08010258 <__swbuf_r>:
 8010258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025a:	460e      	mov	r6, r1
 801025c:	4614      	mov	r4, r2
 801025e:	4605      	mov	r5, r0
 8010260:	b118      	cbz	r0, 801026a <__swbuf_r+0x12>
 8010262:	6983      	ldr	r3, [r0, #24]
 8010264:	b90b      	cbnz	r3, 801026a <__swbuf_r+0x12>
 8010266:	f000 f9e7 	bl	8010638 <__sinit>
 801026a:	4b21      	ldr	r3, [pc, #132]	; (80102f0 <__swbuf_r+0x98>)
 801026c:	429c      	cmp	r4, r3
 801026e:	d12b      	bne.n	80102c8 <__swbuf_r+0x70>
 8010270:	686c      	ldr	r4, [r5, #4]
 8010272:	69a3      	ldr	r3, [r4, #24]
 8010274:	60a3      	str	r3, [r4, #8]
 8010276:	89a3      	ldrh	r3, [r4, #12]
 8010278:	071a      	lsls	r2, r3, #28
 801027a:	d52f      	bpl.n	80102dc <__swbuf_r+0x84>
 801027c:	6923      	ldr	r3, [r4, #16]
 801027e:	b36b      	cbz	r3, 80102dc <__swbuf_r+0x84>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	6820      	ldr	r0, [r4, #0]
 8010284:	1ac0      	subs	r0, r0, r3
 8010286:	6963      	ldr	r3, [r4, #20]
 8010288:	b2f6      	uxtb	r6, r6
 801028a:	4283      	cmp	r3, r0
 801028c:	4637      	mov	r7, r6
 801028e:	dc04      	bgt.n	801029a <__swbuf_r+0x42>
 8010290:	4621      	mov	r1, r4
 8010292:	4628      	mov	r0, r5
 8010294:	f000 f93c 	bl	8010510 <_fflush_r>
 8010298:	bb30      	cbnz	r0, 80102e8 <__swbuf_r+0x90>
 801029a:	68a3      	ldr	r3, [r4, #8]
 801029c:	3b01      	subs	r3, #1
 801029e:	60a3      	str	r3, [r4, #8]
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	6022      	str	r2, [r4, #0]
 80102a6:	701e      	strb	r6, [r3, #0]
 80102a8:	6963      	ldr	r3, [r4, #20]
 80102aa:	3001      	adds	r0, #1
 80102ac:	4283      	cmp	r3, r0
 80102ae:	d004      	beq.n	80102ba <__swbuf_r+0x62>
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	07db      	lsls	r3, r3, #31
 80102b4:	d506      	bpl.n	80102c4 <__swbuf_r+0x6c>
 80102b6:	2e0a      	cmp	r6, #10
 80102b8:	d104      	bne.n	80102c4 <__swbuf_r+0x6c>
 80102ba:	4621      	mov	r1, r4
 80102bc:	4628      	mov	r0, r5
 80102be:	f000 f927 	bl	8010510 <_fflush_r>
 80102c2:	b988      	cbnz	r0, 80102e8 <__swbuf_r+0x90>
 80102c4:	4638      	mov	r0, r7
 80102c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102c8:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <__swbuf_r+0x9c>)
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d101      	bne.n	80102d2 <__swbuf_r+0x7a>
 80102ce:	68ac      	ldr	r4, [r5, #8]
 80102d0:	e7cf      	b.n	8010272 <__swbuf_r+0x1a>
 80102d2:	4b09      	ldr	r3, [pc, #36]	; (80102f8 <__swbuf_r+0xa0>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	bf08      	it	eq
 80102d8:	68ec      	ldreq	r4, [r5, #12]
 80102da:	e7ca      	b.n	8010272 <__swbuf_r+0x1a>
 80102dc:	4621      	mov	r1, r4
 80102de:	4628      	mov	r0, r5
 80102e0:	f000 f81a 	bl	8010318 <__swsetup_r>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d0cb      	beq.n	8010280 <__swbuf_r+0x28>
 80102e8:	f04f 37ff 	mov.w	r7, #4294967295
 80102ec:	e7ea      	b.n	80102c4 <__swbuf_r+0x6c>
 80102ee:	bf00      	nop
 80102f0:	08013e1c 	.word	0x08013e1c
 80102f4:	08013e3c 	.word	0x08013e3c
 80102f8:	08013dfc 	.word	0x08013dfc

080102fc <__ascii_wctomb>:
 80102fc:	b149      	cbz	r1, 8010312 <__ascii_wctomb+0x16>
 80102fe:	2aff      	cmp	r2, #255	; 0xff
 8010300:	bf85      	ittet	hi
 8010302:	238a      	movhi	r3, #138	; 0x8a
 8010304:	6003      	strhi	r3, [r0, #0]
 8010306:	700a      	strbls	r2, [r1, #0]
 8010308:	f04f 30ff 	movhi.w	r0, #4294967295
 801030c:	bf98      	it	ls
 801030e:	2001      	movls	r0, #1
 8010310:	4770      	bx	lr
 8010312:	4608      	mov	r0, r1
 8010314:	4770      	bx	lr
	...

08010318 <__swsetup_r>:
 8010318:	4b32      	ldr	r3, [pc, #200]	; (80103e4 <__swsetup_r+0xcc>)
 801031a:	b570      	push	{r4, r5, r6, lr}
 801031c:	681d      	ldr	r5, [r3, #0]
 801031e:	4606      	mov	r6, r0
 8010320:	460c      	mov	r4, r1
 8010322:	b125      	cbz	r5, 801032e <__swsetup_r+0x16>
 8010324:	69ab      	ldr	r3, [r5, #24]
 8010326:	b913      	cbnz	r3, 801032e <__swsetup_r+0x16>
 8010328:	4628      	mov	r0, r5
 801032a:	f000 f985 	bl	8010638 <__sinit>
 801032e:	4b2e      	ldr	r3, [pc, #184]	; (80103e8 <__swsetup_r+0xd0>)
 8010330:	429c      	cmp	r4, r3
 8010332:	d10f      	bne.n	8010354 <__swsetup_r+0x3c>
 8010334:	686c      	ldr	r4, [r5, #4]
 8010336:	89a3      	ldrh	r3, [r4, #12]
 8010338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801033c:	0719      	lsls	r1, r3, #28
 801033e:	d42c      	bmi.n	801039a <__swsetup_r+0x82>
 8010340:	06dd      	lsls	r5, r3, #27
 8010342:	d411      	bmi.n	8010368 <__swsetup_r+0x50>
 8010344:	2309      	movs	r3, #9
 8010346:	6033      	str	r3, [r6, #0]
 8010348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801034c:	81a3      	strh	r3, [r4, #12]
 801034e:	f04f 30ff 	mov.w	r0, #4294967295
 8010352:	e03e      	b.n	80103d2 <__swsetup_r+0xba>
 8010354:	4b25      	ldr	r3, [pc, #148]	; (80103ec <__swsetup_r+0xd4>)
 8010356:	429c      	cmp	r4, r3
 8010358:	d101      	bne.n	801035e <__swsetup_r+0x46>
 801035a:	68ac      	ldr	r4, [r5, #8]
 801035c:	e7eb      	b.n	8010336 <__swsetup_r+0x1e>
 801035e:	4b24      	ldr	r3, [pc, #144]	; (80103f0 <__swsetup_r+0xd8>)
 8010360:	429c      	cmp	r4, r3
 8010362:	bf08      	it	eq
 8010364:	68ec      	ldreq	r4, [r5, #12]
 8010366:	e7e6      	b.n	8010336 <__swsetup_r+0x1e>
 8010368:	0758      	lsls	r0, r3, #29
 801036a:	d512      	bpl.n	8010392 <__swsetup_r+0x7a>
 801036c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801036e:	b141      	cbz	r1, 8010382 <__swsetup_r+0x6a>
 8010370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010374:	4299      	cmp	r1, r3
 8010376:	d002      	beq.n	801037e <__swsetup_r+0x66>
 8010378:	4630      	mov	r0, r6
 801037a:	f7fd fc89 	bl	800dc90 <_free_r>
 801037e:	2300      	movs	r3, #0
 8010380:	6363      	str	r3, [r4, #52]	; 0x34
 8010382:	89a3      	ldrh	r3, [r4, #12]
 8010384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010388:	81a3      	strh	r3, [r4, #12]
 801038a:	2300      	movs	r3, #0
 801038c:	6063      	str	r3, [r4, #4]
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	f043 0308 	orr.w	r3, r3, #8
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	6923      	ldr	r3, [r4, #16]
 801039c:	b94b      	cbnz	r3, 80103b2 <__swsetup_r+0x9a>
 801039e:	89a3      	ldrh	r3, [r4, #12]
 80103a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103a8:	d003      	beq.n	80103b2 <__swsetup_r+0x9a>
 80103aa:	4621      	mov	r1, r4
 80103ac:	4630      	mov	r0, r6
 80103ae:	f000 fa05 	bl	80107bc <__smakebuf_r>
 80103b2:	89a0      	ldrh	r0, [r4, #12]
 80103b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103b8:	f010 0301 	ands.w	r3, r0, #1
 80103bc:	d00a      	beq.n	80103d4 <__swsetup_r+0xbc>
 80103be:	2300      	movs	r3, #0
 80103c0:	60a3      	str	r3, [r4, #8]
 80103c2:	6963      	ldr	r3, [r4, #20]
 80103c4:	425b      	negs	r3, r3
 80103c6:	61a3      	str	r3, [r4, #24]
 80103c8:	6923      	ldr	r3, [r4, #16]
 80103ca:	b943      	cbnz	r3, 80103de <__swsetup_r+0xc6>
 80103cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80103d0:	d1ba      	bne.n	8010348 <__swsetup_r+0x30>
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	0781      	lsls	r1, r0, #30
 80103d6:	bf58      	it	pl
 80103d8:	6963      	ldrpl	r3, [r4, #20]
 80103da:	60a3      	str	r3, [r4, #8]
 80103dc:	e7f4      	b.n	80103c8 <__swsetup_r+0xb0>
 80103de:	2000      	movs	r0, #0
 80103e0:	e7f7      	b.n	80103d2 <__swsetup_r+0xba>
 80103e2:	bf00      	nop
 80103e4:	20000040 	.word	0x20000040
 80103e8:	08013e1c 	.word	0x08013e1c
 80103ec:	08013e3c 	.word	0x08013e3c
 80103f0:	08013dfc 	.word	0x08013dfc

080103f4 <abort>:
 80103f4:	b508      	push	{r3, lr}
 80103f6:	2006      	movs	r0, #6
 80103f8:	f000 fa50 	bl	801089c <raise>
 80103fc:	2001      	movs	r0, #1
 80103fe:	f7f4 f9bb 	bl	8004778 <_exit>
	...

08010404 <__sflush_r>:
 8010404:	898a      	ldrh	r2, [r1, #12]
 8010406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040a:	4605      	mov	r5, r0
 801040c:	0710      	lsls	r0, r2, #28
 801040e:	460c      	mov	r4, r1
 8010410:	d458      	bmi.n	80104c4 <__sflush_r+0xc0>
 8010412:	684b      	ldr	r3, [r1, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	dc05      	bgt.n	8010424 <__sflush_r+0x20>
 8010418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801041a:	2b00      	cmp	r3, #0
 801041c:	dc02      	bgt.n	8010424 <__sflush_r+0x20>
 801041e:	2000      	movs	r0, #0
 8010420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010426:	2e00      	cmp	r6, #0
 8010428:	d0f9      	beq.n	801041e <__sflush_r+0x1a>
 801042a:	2300      	movs	r3, #0
 801042c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010430:	682f      	ldr	r7, [r5, #0]
 8010432:	602b      	str	r3, [r5, #0]
 8010434:	d032      	beq.n	801049c <__sflush_r+0x98>
 8010436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010438:	89a3      	ldrh	r3, [r4, #12]
 801043a:	075a      	lsls	r2, r3, #29
 801043c:	d505      	bpl.n	801044a <__sflush_r+0x46>
 801043e:	6863      	ldr	r3, [r4, #4]
 8010440:	1ac0      	subs	r0, r0, r3
 8010442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010444:	b10b      	cbz	r3, 801044a <__sflush_r+0x46>
 8010446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010448:	1ac0      	subs	r0, r0, r3
 801044a:	2300      	movs	r3, #0
 801044c:	4602      	mov	r2, r0
 801044e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010450:	6a21      	ldr	r1, [r4, #32]
 8010452:	4628      	mov	r0, r5
 8010454:	47b0      	blx	r6
 8010456:	1c43      	adds	r3, r0, #1
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	d106      	bne.n	801046a <__sflush_r+0x66>
 801045c:	6829      	ldr	r1, [r5, #0]
 801045e:	291d      	cmp	r1, #29
 8010460:	d82c      	bhi.n	80104bc <__sflush_r+0xb8>
 8010462:	4a2a      	ldr	r2, [pc, #168]	; (801050c <__sflush_r+0x108>)
 8010464:	40ca      	lsrs	r2, r1
 8010466:	07d6      	lsls	r6, r2, #31
 8010468:	d528      	bpl.n	80104bc <__sflush_r+0xb8>
 801046a:	2200      	movs	r2, #0
 801046c:	6062      	str	r2, [r4, #4]
 801046e:	04d9      	lsls	r1, r3, #19
 8010470:	6922      	ldr	r2, [r4, #16]
 8010472:	6022      	str	r2, [r4, #0]
 8010474:	d504      	bpl.n	8010480 <__sflush_r+0x7c>
 8010476:	1c42      	adds	r2, r0, #1
 8010478:	d101      	bne.n	801047e <__sflush_r+0x7a>
 801047a:	682b      	ldr	r3, [r5, #0]
 801047c:	b903      	cbnz	r3, 8010480 <__sflush_r+0x7c>
 801047e:	6560      	str	r0, [r4, #84]	; 0x54
 8010480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010482:	602f      	str	r7, [r5, #0]
 8010484:	2900      	cmp	r1, #0
 8010486:	d0ca      	beq.n	801041e <__sflush_r+0x1a>
 8010488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801048c:	4299      	cmp	r1, r3
 801048e:	d002      	beq.n	8010496 <__sflush_r+0x92>
 8010490:	4628      	mov	r0, r5
 8010492:	f7fd fbfd 	bl	800dc90 <_free_r>
 8010496:	2000      	movs	r0, #0
 8010498:	6360      	str	r0, [r4, #52]	; 0x34
 801049a:	e7c1      	b.n	8010420 <__sflush_r+0x1c>
 801049c:	6a21      	ldr	r1, [r4, #32]
 801049e:	2301      	movs	r3, #1
 80104a0:	4628      	mov	r0, r5
 80104a2:	47b0      	blx	r6
 80104a4:	1c41      	adds	r1, r0, #1
 80104a6:	d1c7      	bne.n	8010438 <__sflush_r+0x34>
 80104a8:	682b      	ldr	r3, [r5, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d0c4      	beq.n	8010438 <__sflush_r+0x34>
 80104ae:	2b1d      	cmp	r3, #29
 80104b0:	d001      	beq.n	80104b6 <__sflush_r+0xb2>
 80104b2:	2b16      	cmp	r3, #22
 80104b4:	d101      	bne.n	80104ba <__sflush_r+0xb6>
 80104b6:	602f      	str	r7, [r5, #0]
 80104b8:	e7b1      	b.n	801041e <__sflush_r+0x1a>
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104c0:	81a3      	strh	r3, [r4, #12]
 80104c2:	e7ad      	b.n	8010420 <__sflush_r+0x1c>
 80104c4:	690f      	ldr	r7, [r1, #16]
 80104c6:	2f00      	cmp	r7, #0
 80104c8:	d0a9      	beq.n	801041e <__sflush_r+0x1a>
 80104ca:	0793      	lsls	r3, r2, #30
 80104cc:	680e      	ldr	r6, [r1, #0]
 80104ce:	bf08      	it	eq
 80104d0:	694b      	ldreq	r3, [r1, #20]
 80104d2:	600f      	str	r7, [r1, #0]
 80104d4:	bf18      	it	ne
 80104d6:	2300      	movne	r3, #0
 80104d8:	eba6 0807 	sub.w	r8, r6, r7
 80104dc:	608b      	str	r3, [r1, #8]
 80104de:	f1b8 0f00 	cmp.w	r8, #0
 80104e2:	dd9c      	ble.n	801041e <__sflush_r+0x1a>
 80104e4:	6a21      	ldr	r1, [r4, #32]
 80104e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104e8:	4643      	mov	r3, r8
 80104ea:	463a      	mov	r2, r7
 80104ec:	4628      	mov	r0, r5
 80104ee:	47b0      	blx	r6
 80104f0:	2800      	cmp	r0, #0
 80104f2:	dc06      	bgt.n	8010502 <__sflush_r+0xfe>
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104fa:	81a3      	strh	r3, [r4, #12]
 80104fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010500:	e78e      	b.n	8010420 <__sflush_r+0x1c>
 8010502:	4407      	add	r7, r0
 8010504:	eba8 0800 	sub.w	r8, r8, r0
 8010508:	e7e9      	b.n	80104de <__sflush_r+0xda>
 801050a:	bf00      	nop
 801050c:	20400001 	.word	0x20400001

08010510 <_fflush_r>:
 8010510:	b538      	push	{r3, r4, r5, lr}
 8010512:	690b      	ldr	r3, [r1, #16]
 8010514:	4605      	mov	r5, r0
 8010516:	460c      	mov	r4, r1
 8010518:	b913      	cbnz	r3, 8010520 <_fflush_r+0x10>
 801051a:	2500      	movs	r5, #0
 801051c:	4628      	mov	r0, r5
 801051e:	bd38      	pop	{r3, r4, r5, pc}
 8010520:	b118      	cbz	r0, 801052a <_fflush_r+0x1a>
 8010522:	6983      	ldr	r3, [r0, #24]
 8010524:	b90b      	cbnz	r3, 801052a <_fflush_r+0x1a>
 8010526:	f000 f887 	bl	8010638 <__sinit>
 801052a:	4b14      	ldr	r3, [pc, #80]	; (801057c <_fflush_r+0x6c>)
 801052c:	429c      	cmp	r4, r3
 801052e:	d11b      	bne.n	8010568 <_fflush_r+0x58>
 8010530:	686c      	ldr	r4, [r5, #4]
 8010532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d0ef      	beq.n	801051a <_fflush_r+0xa>
 801053a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801053c:	07d0      	lsls	r0, r2, #31
 801053e:	d404      	bmi.n	801054a <_fflush_r+0x3a>
 8010540:	0599      	lsls	r1, r3, #22
 8010542:	d402      	bmi.n	801054a <_fflush_r+0x3a>
 8010544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010546:	f7ff fcd0 	bl	800feea <__retarget_lock_acquire_recursive>
 801054a:	4628      	mov	r0, r5
 801054c:	4621      	mov	r1, r4
 801054e:	f7ff ff59 	bl	8010404 <__sflush_r>
 8010552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010554:	07da      	lsls	r2, r3, #31
 8010556:	4605      	mov	r5, r0
 8010558:	d4e0      	bmi.n	801051c <_fflush_r+0xc>
 801055a:	89a3      	ldrh	r3, [r4, #12]
 801055c:	059b      	lsls	r3, r3, #22
 801055e:	d4dd      	bmi.n	801051c <_fflush_r+0xc>
 8010560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010562:	f7ff fcc3 	bl	800feec <__retarget_lock_release_recursive>
 8010566:	e7d9      	b.n	801051c <_fflush_r+0xc>
 8010568:	4b05      	ldr	r3, [pc, #20]	; (8010580 <_fflush_r+0x70>)
 801056a:	429c      	cmp	r4, r3
 801056c:	d101      	bne.n	8010572 <_fflush_r+0x62>
 801056e:	68ac      	ldr	r4, [r5, #8]
 8010570:	e7df      	b.n	8010532 <_fflush_r+0x22>
 8010572:	4b04      	ldr	r3, [pc, #16]	; (8010584 <_fflush_r+0x74>)
 8010574:	429c      	cmp	r4, r3
 8010576:	bf08      	it	eq
 8010578:	68ec      	ldreq	r4, [r5, #12]
 801057a:	e7da      	b.n	8010532 <_fflush_r+0x22>
 801057c:	08013e1c 	.word	0x08013e1c
 8010580:	08013e3c 	.word	0x08013e3c
 8010584:	08013dfc 	.word	0x08013dfc

08010588 <std>:
 8010588:	2300      	movs	r3, #0
 801058a:	b510      	push	{r4, lr}
 801058c:	4604      	mov	r4, r0
 801058e:	e9c0 3300 	strd	r3, r3, [r0]
 8010592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010596:	6083      	str	r3, [r0, #8]
 8010598:	8181      	strh	r1, [r0, #12]
 801059a:	6643      	str	r3, [r0, #100]	; 0x64
 801059c:	81c2      	strh	r2, [r0, #14]
 801059e:	6183      	str	r3, [r0, #24]
 80105a0:	4619      	mov	r1, r3
 80105a2:	2208      	movs	r2, #8
 80105a4:	305c      	adds	r0, #92	; 0x5c
 80105a6:	f7fd fb6b 	bl	800dc80 <memset>
 80105aa:	4b05      	ldr	r3, [pc, #20]	; (80105c0 <std+0x38>)
 80105ac:	6263      	str	r3, [r4, #36]	; 0x24
 80105ae:	4b05      	ldr	r3, [pc, #20]	; (80105c4 <std+0x3c>)
 80105b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80105b2:	4b05      	ldr	r3, [pc, #20]	; (80105c8 <std+0x40>)
 80105b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105b6:	4b05      	ldr	r3, [pc, #20]	; (80105cc <std+0x44>)
 80105b8:	6224      	str	r4, [r4, #32]
 80105ba:	6323      	str	r3, [r4, #48]	; 0x30
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	bf00      	nop
 80105c0:	080108d5 	.word	0x080108d5
 80105c4:	080108f7 	.word	0x080108f7
 80105c8:	0801092f 	.word	0x0801092f
 80105cc:	08010953 	.word	0x08010953

080105d0 <_cleanup_r>:
 80105d0:	4901      	ldr	r1, [pc, #4]	; (80105d8 <_cleanup_r+0x8>)
 80105d2:	f000 b8af 	b.w	8010734 <_fwalk_reent>
 80105d6:	bf00      	nop
 80105d8:	08010511 	.word	0x08010511

080105dc <__sfmoreglue>:
 80105dc:	b570      	push	{r4, r5, r6, lr}
 80105de:	2268      	movs	r2, #104	; 0x68
 80105e0:	1e4d      	subs	r5, r1, #1
 80105e2:	4355      	muls	r5, r2
 80105e4:	460e      	mov	r6, r1
 80105e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105ea:	f7fd fbbd 	bl	800dd68 <_malloc_r>
 80105ee:	4604      	mov	r4, r0
 80105f0:	b140      	cbz	r0, 8010604 <__sfmoreglue+0x28>
 80105f2:	2100      	movs	r1, #0
 80105f4:	e9c0 1600 	strd	r1, r6, [r0]
 80105f8:	300c      	adds	r0, #12
 80105fa:	60a0      	str	r0, [r4, #8]
 80105fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010600:	f7fd fb3e 	bl	800dc80 <memset>
 8010604:	4620      	mov	r0, r4
 8010606:	bd70      	pop	{r4, r5, r6, pc}

08010608 <__sfp_lock_acquire>:
 8010608:	4801      	ldr	r0, [pc, #4]	; (8010610 <__sfp_lock_acquire+0x8>)
 801060a:	f7ff bc6e 	b.w	800feea <__retarget_lock_acquire_recursive>
 801060e:	bf00      	nop
 8010610:	20014081 	.word	0x20014081

08010614 <__sfp_lock_release>:
 8010614:	4801      	ldr	r0, [pc, #4]	; (801061c <__sfp_lock_release+0x8>)
 8010616:	f7ff bc69 	b.w	800feec <__retarget_lock_release_recursive>
 801061a:	bf00      	nop
 801061c:	20014081 	.word	0x20014081

08010620 <__sinit_lock_acquire>:
 8010620:	4801      	ldr	r0, [pc, #4]	; (8010628 <__sinit_lock_acquire+0x8>)
 8010622:	f7ff bc62 	b.w	800feea <__retarget_lock_acquire_recursive>
 8010626:	bf00      	nop
 8010628:	20014082 	.word	0x20014082

0801062c <__sinit_lock_release>:
 801062c:	4801      	ldr	r0, [pc, #4]	; (8010634 <__sinit_lock_release+0x8>)
 801062e:	f7ff bc5d 	b.w	800feec <__retarget_lock_release_recursive>
 8010632:	bf00      	nop
 8010634:	20014082 	.word	0x20014082

08010638 <__sinit>:
 8010638:	b510      	push	{r4, lr}
 801063a:	4604      	mov	r4, r0
 801063c:	f7ff fff0 	bl	8010620 <__sinit_lock_acquire>
 8010640:	69a3      	ldr	r3, [r4, #24]
 8010642:	b11b      	cbz	r3, 801064c <__sinit+0x14>
 8010644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010648:	f7ff bff0 	b.w	801062c <__sinit_lock_release>
 801064c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010650:	6523      	str	r3, [r4, #80]	; 0x50
 8010652:	4b13      	ldr	r3, [pc, #76]	; (80106a0 <__sinit+0x68>)
 8010654:	4a13      	ldr	r2, [pc, #76]	; (80106a4 <__sinit+0x6c>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	62a2      	str	r2, [r4, #40]	; 0x28
 801065a:	42a3      	cmp	r3, r4
 801065c:	bf04      	itt	eq
 801065e:	2301      	moveq	r3, #1
 8010660:	61a3      	streq	r3, [r4, #24]
 8010662:	4620      	mov	r0, r4
 8010664:	f000 f820 	bl	80106a8 <__sfp>
 8010668:	6060      	str	r0, [r4, #4]
 801066a:	4620      	mov	r0, r4
 801066c:	f000 f81c 	bl	80106a8 <__sfp>
 8010670:	60a0      	str	r0, [r4, #8]
 8010672:	4620      	mov	r0, r4
 8010674:	f000 f818 	bl	80106a8 <__sfp>
 8010678:	2200      	movs	r2, #0
 801067a:	60e0      	str	r0, [r4, #12]
 801067c:	2104      	movs	r1, #4
 801067e:	6860      	ldr	r0, [r4, #4]
 8010680:	f7ff ff82 	bl	8010588 <std>
 8010684:	68a0      	ldr	r0, [r4, #8]
 8010686:	2201      	movs	r2, #1
 8010688:	2109      	movs	r1, #9
 801068a:	f7ff ff7d 	bl	8010588 <std>
 801068e:	68e0      	ldr	r0, [r4, #12]
 8010690:	2202      	movs	r2, #2
 8010692:	2112      	movs	r1, #18
 8010694:	f7ff ff78 	bl	8010588 <std>
 8010698:	2301      	movs	r3, #1
 801069a:	61a3      	str	r3, [r4, #24]
 801069c:	e7d2      	b.n	8010644 <__sinit+0xc>
 801069e:	bf00      	nop
 80106a0:	08013a80 	.word	0x08013a80
 80106a4:	080105d1 	.word	0x080105d1

080106a8 <__sfp>:
 80106a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106aa:	4607      	mov	r7, r0
 80106ac:	f7ff ffac 	bl	8010608 <__sfp_lock_acquire>
 80106b0:	4b1e      	ldr	r3, [pc, #120]	; (801072c <__sfp+0x84>)
 80106b2:	681e      	ldr	r6, [r3, #0]
 80106b4:	69b3      	ldr	r3, [r6, #24]
 80106b6:	b913      	cbnz	r3, 80106be <__sfp+0x16>
 80106b8:	4630      	mov	r0, r6
 80106ba:	f7ff ffbd 	bl	8010638 <__sinit>
 80106be:	3648      	adds	r6, #72	; 0x48
 80106c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80106c4:	3b01      	subs	r3, #1
 80106c6:	d503      	bpl.n	80106d0 <__sfp+0x28>
 80106c8:	6833      	ldr	r3, [r6, #0]
 80106ca:	b30b      	cbz	r3, 8010710 <__sfp+0x68>
 80106cc:	6836      	ldr	r6, [r6, #0]
 80106ce:	e7f7      	b.n	80106c0 <__sfp+0x18>
 80106d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80106d4:	b9d5      	cbnz	r5, 801070c <__sfp+0x64>
 80106d6:	4b16      	ldr	r3, [pc, #88]	; (8010730 <__sfp+0x88>)
 80106d8:	60e3      	str	r3, [r4, #12]
 80106da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80106de:	6665      	str	r5, [r4, #100]	; 0x64
 80106e0:	f7ff fc02 	bl	800fee8 <__retarget_lock_init_recursive>
 80106e4:	f7ff ff96 	bl	8010614 <__sfp_lock_release>
 80106e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80106ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80106f0:	6025      	str	r5, [r4, #0]
 80106f2:	61a5      	str	r5, [r4, #24]
 80106f4:	2208      	movs	r2, #8
 80106f6:	4629      	mov	r1, r5
 80106f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106fc:	f7fd fac0 	bl	800dc80 <memset>
 8010700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010708:	4620      	mov	r0, r4
 801070a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801070c:	3468      	adds	r4, #104	; 0x68
 801070e:	e7d9      	b.n	80106c4 <__sfp+0x1c>
 8010710:	2104      	movs	r1, #4
 8010712:	4638      	mov	r0, r7
 8010714:	f7ff ff62 	bl	80105dc <__sfmoreglue>
 8010718:	4604      	mov	r4, r0
 801071a:	6030      	str	r0, [r6, #0]
 801071c:	2800      	cmp	r0, #0
 801071e:	d1d5      	bne.n	80106cc <__sfp+0x24>
 8010720:	f7ff ff78 	bl	8010614 <__sfp_lock_release>
 8010724:	230c      	movs	r3, #12
 8010726:	603b      	str	r3, [r7, #0]
 8010728:	e7ee      	b.n	8010708 <__sfp+0x60>
 801072a:	bf00      	nop
 801072c:	08013a80 	.word	0x08013a80
 8010730:	ffff0001 	.word	0xffff0001

08010734 <_fwalk_reent>:
 8010734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010738:	4606      	mov	r6, r0
 801073a:	4688      	mov	r8, r1
 801073c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010740:	2700      	movs	r7, #0
 8010742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010746:	f1b9 0901 	subs.w	r9, r9, #1
 801074a:	d505      	bpl.n	8010758 <_fwalk_reent+0x24>
 801074c:	6824      	ldr	r4, [r4, #0]
 801074e:	2c00      	cmp	r4, #0
 8010750:	d1f7      	bne.n	8010742 <_fwalk_reent+0xe>
 8010752:	4638      	mov	r0, r7
 8010754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010758:	89ab      	ldrh	r3, [r5, #12]
 801075a:	2b01      	cmp	r3, #1
 801075c:	d907      	bls.n	801076e <_fwalk_reent+0x3a>
 801075e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010762:	3301      	adds	r3, #1
 8010764:	d003      	beq.n	801076e <_fwalk_reent+0x3a>
 8010766:	4629      	mov	r1, r5
 8010768:	4630      	mov	r0, r6
 801076a:	47c0      	blx	r8
 801076c:	4307      	orrs	r7, r0
 801076e:	3568      	adds	r5, #104	; 0x68
 8010770:	e7e9      	b.n	8010746 <_fwalk_reent+0x12>

08010772 <__swhatbuf_r>:
 8010772:	b570      	push	{r4, r5, r6, lr}
 8010774:	460e      	mov	r6, r1
 8010776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801077a:	2900      	cmp	r1, #0
 801077c:	b096      	sub	sp, #88	; 0x58
 801077e:	4614      	mov	r4, r2
 8010780:	461d      	mov	r5, r3
 8010782:	da08      	bge.n	8010796 <__swhatbuf_r+0x24>
 8010784:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010788:	2200      	movs	r2, #0
 801078a:	602a      	str	r2, [r5, #0]
 801078c:	061a      	lsls	r2, r3, #24
 801078e:	d410      	bmi.n	80107b2 <__swhatbuf_r+0x40>
 8010790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010794:	e00e      	b.n	80107b4 <__swhatbuf_r+0x42>
 8010796:	466a      	mov	r2, sp
 8010798:	f000 f902 	bl	80109a0 <_fstat_r>
 801079c:	2800      	cmp	r0, #0
 801079e:	dbf1      	blt.n	8010784 <__swhatbuf_r+0x12>
 80107a0:	9a01      	ldr	r2, [sp, #4]
 80107a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107aa:	425a      	negs	r2, r3
 80107ac:	415a      	adcs	r2, r3
 80107ae:	602a      	str	r2, [r5, #0]
 80107b0:	e7ee      	b.n	8010790 <__swhatbuf_r+0x1e>
 80107b2:	2340      	movs	r3, #64	; 0x40
 80107b4:	2000      	movs	r0, #0
 80107b6:	6023      	str	r3, [r4, #0]
 80107b8:	b016      	add	sp, #88	; 0x58
 80107ba:	bd70      	pop	{r4, r5, r6, pc}

080107bc <__smakebuf_r>:
 80107bc:	898b      	ldrh	r3, [r1, #12]
 80107be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107c0:	079d      	lsls	r5, r3, #30
 80107c2:	4606      	mov	r6, r0
 80107c4:	460c      	mov	r4, r1
 80107c6:	d507      	bpl.n	80107d8 <__smakebuf_r+0x1c>
 80107c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107cc:	6023      	str	r3, [r4, #0]
 80107ce:	6123      	str	r3, [r4, #16]
 80107d0:	2301      	movs	r3, #1
 80107d2:	6163      	str	r3, [r4, #20]
 80107d4:	b002      	add	sp, #8
 80107d6:	bd70      	pop	{r4, r5, r6, pc}
 80107d8:	ab01      	add	r3, sp, #4
 80107da:	466a      	mov	r2, sp
 80107dc:	f7ff ffc9 	bl	8010772 <__swhatbuf_r>
 80107e0:	9900      	ldr	r1, [sp, #0]
 80107e2:	4605      	mov	r5, r0
 80107e4:	4630      	mov	r0, r6
 80107e6:	f7fd fabf 	bl	800dd68 <_malloc_r>
 80107ea:	b948      	cbnz	r0, 8010800 <__smakebuf_r+0x44>
 80107ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107f0:	059a      	lsls	r2, r3, #22
 80107f2:	d4ef      	bmi.n	80107d4 <__smakebuf_r+0x18>
 80107f4:	f023 0303 	bic.w	r3, r3, #3
 80107f8:	f043 0302 	orr.w	r3, r3, #2
 80107fc:	81a3      	strh	r3, [r4, #12]
 80107fe:	e7e3      	b.n	80107c8 <__smakebuf_r+0xc>
 8010800:	4b0d      	ldr	r3, [pc, #52]	; (8010838 <__smakebuf_r+0x7c>)
 8010802:	62b3      	str	r3, [r6, #40]	; 0x28
 8010804:	89a3      	ldrh	r3, [r4, #12]
 8010806:	6020      	str	r0, [r4, #0]
 8010808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	9b00      	ldr	r3, [sp, #0]
 8010810:	6163      	str	r3, [r4, #20]
 8010812:	9b01      	ldr	r3, [sp, #4]
 8010814:	6120      	str	r0, [r4, #16]
 8010816:	b15b      	cbz	r3, 8010830 <__smakebuf_r+0x74>
 8010818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801081c:	4630      	mov	r0, r6
 801081e:	f000 f8d1 	bl	80109c4 <_isatty_r>
 8010822:	b128      	cbz	r0, 8010830 <__smakebuf_r+0x74>
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	f023 0303 	bic.w	r3, r3, #3
 801082a:	f043 0301 	orr.w	r3, r3, #1
 801082e:	81a3      	strh	r3, [r4, #12]
 8010830:	89a0      	ldrh	r0, [r4, #12]
 8010832:	4305      	orrs	r5, r0
 8010834:	81a5      	strh	r5, [r4, #12]
 8010836:	e7cd      	b.n	80107d4 <__smakebuf_r+0x18>
 8010838:	080105d1 	.word	0x080105d1

0801083c <_malloc_usable_size_r>:
 801083c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010840:	1f18      	subs	r0, r3, #4
 8010842:	2b00      	cmp	r3, #0
 8010844:	bfbc      	itt	lt
 8010846:	580b      	ldrlt	r3, [r1, r0]
 8010848:	18c0      	addlt	r0, r0, r3
 801084a:	4770      	bx	lr

0801084c <_raise_r>:
 801084c:	291f      	cmp	r1, #31
 801084e:	b538      	push	{r3, r4, r5, lr}
 8010850:	4604      	mov	r4, r0
 8010852:	460d      	mov	r5, r1
 8010854:	d904      	bls.n	8010860 <_raise_r+0x14>
 8010856:	2316      	movs	r3, #22
 8010858:	6003      	str	r3, [r0, #0]
 801085a:	f04f 30ff 	mov.w	r0, #4294967295
 801085e:	bd38      	pop	{r3, r4, r5, pc}
 8010860:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010862:	b112      	cbz	r2, 801086a <_raise_r+0x1e>
 8010864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010868:	b94b      	cbnz	r3, 801087e <_raise_r+0x32>
 801086a:	4620      	mov	r0, r4
 801086c:	f000 f830 	bl	80108d0 <_getpid_r>
 8010870:	462a      	mov	r2, r5
 8010872:	4601      	mov	r1, r0
 8010874:	4620      	mov	r0, r4
 8010876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801087a:	f000 b817 	b.w	80108ac <_kill_r>
 801087e:	2b01      	cmp	r3, #1
 8010880:	d00a      	beq.n	8010898 <_raise_r+0x4c>
 8010882:	1c59      	adds	r1, r3, #1
 8010884:	d103      	bne.n	801088e <_raise_r+0x42>
 8010886:	2316      	movs	r3, #22
 8010888:	6003      	str	r3, [r0, #0]
 801088a:	2001      	movs	r0, #1
 801088c:	e7e7      	b.n	801085e <_raise_r+0x12>
 801088e:	2400      	movs	r4, #0
 8010890:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010894:	4628      	mov	r0, r5
 8010896:	4798      	blx	r3
 8010898:	2000      	movs	r0, #0
 801089a:	e7e0      	b.n	801085e <_raise_r+0x12>

0801089c <raise>:
 801089c:	4b02      	ldr	r3, [pc, #8]	; (80108a8 <raise+0xc>)
 801089e:	4601      	mov	r1, r0
 80108a0:	6818      	ldr	r0, [r3, #0]
 80108a2:	f7ff bfd3 	b.w	801084c <_raise_r>
 80108a6:	bf00      	nop
 80108a8:	20000040 	.word	0x20000040

080108ac <_kill_r>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4d07      	ldr	r5, [pc, #28]	; (80108cc <_kill_r+0x20>)
 80108b0:	2300      	movs	r3, #0
 80108b2:	4604      	mov	r4, r0
 80108b4:	4608      	mov	r0, r1
 80108b6:	4611      	mov	r1, r2
 80108b8:	602b      	str	r3, [r5, #0]
 80108ba:	f7f3 ff4d 	bl	8004758 <_kill>
 80108be:	1c43      	adds	r3, r0, #1
 80108c0:	d102      	bne.n	80108c8 <_kill_r+0x1c>
 80108c2:	682b      	ldr	r3, [r5, #0]
 80108c4:	b103      	cbz	r3, 80108c8 <_kill_r+0x1c>
 80108c6:	6023      	str	r3, [r4, #0]
 80108c8:	bd38      	pop	{r3, r4, r5, pc}
 80108ca:	bf00      	nop
 80108cc:	2001407c 	.word	0x2001407c

080108d0 <_getpid_r>:
 80108d0:	f7f3 bf3a 	b.w	8004748 <_getpid>

080108d4 <__sread>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	460c      	mov	r4, r1
 80108d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108dc:	f000 f894 	bl	8010a08 <_read_r>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	bfab      	itete	ge
 80108e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108e6:	89a3      	ldrhlt	r3, [r4, #12]
 80108e8:	181b      	addge	r3, r3, r0
 80108ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108ee:	bfac      	ite	ge
 80108f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80108f2:	81a3      	strhlt	r3, [r4, #12]
 80108f4:	bd10      	pop	{r4, pc}

080108f6 <__swrite>:
 80108f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fa:	461f      	mov	r7, r3
 80108fc:	898b      	ldrh	r3, [r1, #12]
 80108fe:	05db      	lsls	r3, r3, #23
 8010900:	4605      	mov	r5, r0
 8010902:	460c      	mov	r4, r1
 8010904:	4616      	mov	r6, r2
 8010906:	d505      	bpl.n	8010914 <__swrite+0x1e>
 8010908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801090c:	2302      	movs	r3, #2
 801090e:	2200      	movs	r2, #0
 8010910:	f000 f868 	bl	80109e4 <_lseek_r>
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801091a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	4632      	mov	r2, r6
 8010922:	463b      	mov	r3, r7
 8010924:	4628      	mov	r0, r5
 8010926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801092a:	f000 b817 	b.w	801095c <_write_r>

0801092e <__sseek>:
 801092e:	b510      	push	{r4, lr}
 8010930:	460c      	mov	r4, r1
 8010932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010936:	f000 f855 	bl	80109e4 <_lseek_r>
 801093a:	1c43      	adds	r3, r0, #1
 801093c:	89a3      	ldrh	r3, [r4, #12]
 801093e:	bf15      	itete	ne
 8010940:	6560      	strne	r0, [r4, #84]	; 0x54
 8010942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801094a:	81a3      	strheq	r3, [r4, #12]
 801094c:	bf18      	it	ne
 801094e:	81a3      	strhne	r3, [r4, #12]
 8010950:	bd10      	pop	{r4, pc}

08010952 <__sclose>:
 8010952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010956:	f000 b813 	b.w	8010980 <_close_r>
	...

0801095c <_write_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d07      	ldr	r5, [pc, #28]	; (801097c <_write_r+0x20>)
 8010960:	4604      	mov	r4, r0
 8010962:	4608      	mov	r0, r1
 8010964:	4611      	mov	r1, r2
 8010966:	2200      	movs	r2, #0
 8010968:	602a      	str	r2, [r5, #0]
 801096a:	461a      	mov	r2, r3
 801096c:	f7f3 ff2b 	bl	80047c6 <_write>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d102      	bne.n	801097a <_write_r+0x1e>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b103      	cbz	r3, 801097a <_write_r+0x1e>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	2001407c 	.word	0x2001407c

08010980 <_close_r>:
 8010980:	b538      	push	{r3, r4, r5, lr}
 8010982:	4d06      	ldr	r5, [pc, #24]	; (801099c <_close_r+0x1c>)
 8010984:	2300      	movs	r3, #0
 8010986:	4604      	mov	r4, r0
 8010988:	4608      	mov	r0, r1
 801098a:	602b      	str	r3, [r5, #0]
 801098c:	f7f3 ff37 	bl	80047fe <_close>
 8010990:	1c43      	adds	r3, r0, #1
 8010992:	d102      	bne.n	801099a <_close_r+0x1a>
 8010994:	682b      	ldr	r3, [r5, #0]
 8010996:	b103      	cbz	r3, 801099a <_close_r+0x1a>
 8010998:	6023      	str	r3, [r4, #0]
 801099a:	bd38      	pop	{r3, r4, r5, pc}
 801099c:	2001407c 	.word	0x2001407c

080109a0 <_fstat_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4d07      	ldr	r5, [pc, #28]	; (80109c0 <_fstat_r+0x20>)
 80109a4:	2300      	movs	r3, #0
 80109a6:	4604      	mov	r4, r0
 80109a8:	4608      	mov	r0, r1
 80109aa:	4611      	mov	r1, r2
 80109ac:	602b      	str	r3, [r5, #0]
 80109ae:	f7f3 ff32 	bl	8004816 <_fstat>
 80109b2:	1c43      	adds	r3, r0, #1
 80109b4:	d102      	bne.n	80109bc <_fstat_r+0x1c>
 80109b6:	682b      	ldr	r3, [r5, #0]
 80109b8:	b103      	cbz	r3, 80109bc <_fstat_r+0x1c>
 80109ba:	6023      	str	r3, [r4, #0]
 80109bc:	bd38      	pop	{r3, r4, r5, pc}
 80109be:	bf00      	nop
 80109c0:	2001407c 	.word	0x2001407c

080109c4 <_isatty_r>:
 80109c4:	b538      	push	{r3, r4, r5, lr}
 80109c6:	4d06      	ldr	r5, [pc, #24]	; (80109e0 <_isatty_r+0x1c>)
 80109c8:	2300      	movs	r3, #0
 80109ca:	4604      	mov	r4, r0
 80109cc:	4608      	mov	r0, r1
 80109ce:	602b      	str	r3, [r5, #0]
 80109d0:	f7f3 ff31 	bl	8004836 <_isatty>
 80109d4:	1c43      	adds	r3, r0, #1
 80109d6:	d102      	bne.n	80109de <_isatty_r+0x1a>
 80109d8:	682b      	ldr	r3, [r5, #0]
 80109da:	b103      	cbz	r3, 80109de <_isatty_r+0x1a>
 80109dc:	6023      	str	r3, [r4, #0]
 80109de:	bd38      	pop	{r3, r4, r5, pc}
 80109e0:	2001407c 	.word	0x2001407c

080109e4 <_lseek_r>:
 80109e4:	b538      	push	{r3, r4, r5, lr}
 80109e6:	4d07      	ldr	r5, [pc, #28]	; (8010a04 <_lseek_r+0x20>)
 80109e8:	4604      	mov	r4, r0
 80109ea:	4608      	mov	r0, r1
 80109ec:	4611      	mov	r1, r2
 80109ee:	2200      	movs	r2, #0
 80109f0:	602a      	str	r2, [r5, #0]
 80109f2:	461a      	mov	r2, r3
 80109f4:	f7f3 ff2a 	bl	800484c <_lseek>
 80109f8:	1c43      	adds	r3, r0, #1
 80109fa:	d102      	bne.n	8010a02 <_lseek_r+0x1e>
 80109fc:	682b      	ldr	r3, [r5, #0]
 80109fe:	b103      	cbz	r3, 8010a02 <_lseek_r+0x1e>
 8010a00:	6023      	str	r3, [r4, #0]
 8010a02:	bd38      	pop	{r3, r4, r5, pc}
 8010a04:	2001407c 	.word	0x2001407c

08010a08 <_read_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	4d07      	ldr	r5, [pc, #28]	; (8010a28 <_read_r+0x20>)
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	4608      	mov	r0, r1
 8010a10:	4611      	mov	r1, r2
 8010a12:	2200      	movs	r2, #0
 8010a14:	602a      	str	r2, [r5, #0]
 8010a16:	461a      	mov	r2, r3
 8010a18:	f7f3 feb8 	bl	800478c <_read>
 8010a1c:	1c43      	adds	r3, r0, #1
 8010a1e:	d102      	bne.n	8010a26 <_read_r+0x1e>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	b103      	cbz	r3, 8010a26 <_read_r+0x1e>
 8010a24:	6023      	str	r3, [r4, #0]
 8010a26:	bd38      	pop	{r3, r4, r5, pc}
 8010a28:	2001407c 	.word	0x2001407c
 8010a2c:	00000000 	.word	0x00000000

08010a30 <cos>:
 8010a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a32:	ec53 2b10 	vmov	r2, r3, d0
 8010a36:	4826      	ldr	r0, [pc, #152]	; (8010ad0 <cos+0xa0>)
 8010a38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a3c:	4281      	cmp	r1, r0
 8010a3e:	dc06      	bgt.n	8010a4e <cos+0x1e>
 8010a40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010ac8 <cos+0x98>
 8010a44:	b005      	add	sp, #20
 8010a46:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a4a:	f001 bcd5 	b.w	80123f8 <__kernel_cos>
 8010a4e:	4821      	ldr	r0, [pc, #132]	; (8010ad4 <cos+0xa4>)
 8010a50:	4281      	cmp	r1, r0
 8010a52:	dd09      	ble.n	8010a68 <cos+0x38>
 8010a54:	ee10 0a10 	vmov	r0, s0
 8010a58:	4619      	mov	r1, r3
 8010a5a:	f7ef fc2d 	bl	80002b8 <__aeabi_dsub>
 8010a5e:	ec41 0b10 	vmov	d0, r0, r1
 8010a62:	b005      	add	sp, #20
 8010a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a68:	4668      	mov	r0, sp
 8010a6a:	f001 fa05 	bl	8011e78 <__ieee754_rem_pio2>
 8010a6e:	f000 0003 	and.w	r0, r0, #3
 8010a72:	2801      	cmp	r0, #1
 8010a74:	d00b      	beq.n	8010a8e <cos+0x5e>
 8010a76:	2802      	cmp	r0, #2
 8010a78:	d016      	beq.n	8010aa8 <cos+0x78>
 8010a7a:	b9e0      	cbnz	r0, 8010ab6 <cos+0x86>
 8010a7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a80:	ed9d 0b00 	vldr	d0, [sp]
 8010a84:	f001 fcb8 	bl	80123f8 <__kernel_cos>
 8010a88:	ec51 0b10 	vmov	r0, r1, d0
 8010a8c:	e7e7      	b.n	8010a5e <cos+0x2e>
 8010a8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a92:	ed9d 0b00 	vldr	d0, [sp]
 8010a96:	f002 f8c7 	bl	8012c28 <__kernel_sin>
 8010a9a:	ec53 2b10 	vmov	r2, r3, d0
 8010a9e:	ee10 0a10 	vmov	r0, s0
 8010aa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010aa6:	e7da      	b.n	8010a5e <cos+0x2e>
 8010aa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010aac:	ed9d 0b00 	vldr	d0, [sp]
 8010ab0:	f001 fca2 	bl	80123f8 <__kernel_cos>
 8010ab4:	e7f1      	b.n	8010a9a <cos+0x6a>
 8010ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010aba:	ed9d 0b00 	vldr	d0, [sp]
 8010abe:	2001      	movs	r0, #1
 8010ac0:	f002 f8b2 	bl	8012c28 <__kernel_sin>
 8010ac4:	e7e0      	b.n	8010a88 <cos+0x58>
 8010ac6:	bf00      	nop
	...
 8010ad0:	3fe921fb 	.word	0x3fe921fb
 8010ad4:	7fefffff 	.word	0x7fefffff

08010ad8 <round>:
 8010ad8:	ec51 0b10 	vmov	r0, r1, d0
 8010adc:	b570      	push	{r4, r5, r6, lr}
 8010ade:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8010ae2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8010ae6:	2c13      	cmp	r4, #19
 8010ae8:	ee10 2a10 	vmov	r2, s0
 8010aec:	460b      	mov	r3, r1
 8010aee:	dc19      	bgt.n	8010b24 <round+0x4c>
 8010af0:	2c00      	cmp	r4, #0
 8010af2:	da09      	bge.n	8010b08 <round+0x30>
 8010af4:	3401      	adds	r4, #1
 8010af6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010afa:	d103      	bne.n	8010b04 <round+0x2c>
 8010afc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010b00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010b04:	2200      	movs	r2, #0
 8010b06:	e028      	b.n	8010b5a <round+0x82>
 8010b08:	4d15      	ldr	r5, [pc, #84]	; (8010b60 <round+0x88>)
 8010b0a:	4125      	asrs	r5, r4
 8010b0c:	ea01 0605 	and.w	r6, r1, r5
 8010b10:	4332      	orrs	r2, r6
 8010b12:	d00e      	beq.n	8010b32 <round+0x5a>
 8010b14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010b18:	fa42 f404 	asr.w	r4, r2, r4
 8010b1c:	4423      	add	r3, r4
 8010b1e:	ea23 0305 	bic.w	r3, r3, r5
 8010b22:	e7ef      	b.n	8010b04 <round+0x2c>
 8010b24:	2c33      	cmp	r4, #51	; 0x33
 8010b26:	dd07      	ble.n	8010b38 <round+0x60>
 8010b28:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010b2c:	d101      	bne.n	8010b32 <round+0x5a>
 8010b2e:	f7ef fbc5 	bl	80002bc <__adddf3>
 8010b32:	ec41 0b10 	vmov	d0, r0, r1
 8010b36:	bd70      	pop	{r4, r5, r6, pc}
 8010b38:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8010b3c:	f04f 35ff 	mov.w	r5, #4294967295
 8010b40:	40f5      	lsrs	r5, r6
 8010b42:	4228      	tst	r0, r5
 8010b44:	d0f5      	beq.n	8010b32 <round+0x5a>
 8010b46:	2101      	movs	r1, #1
 8010b48:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010b4c:	fa01 f404 	lsl.w	r4, r1, r4
 8010b50:	1912      	adds	r2, r2, r4
 8010b52:	bf28      	it	cs
 8010b54:	185b      	addcs	r3, r3, r1
 8010b56:	ea22 0205 	bic.w	r2, r2, r5
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	4610      	mov	r0, r2
 8010b5e:	e7e8      	b.n	8010b32 <round+0x5a>
 8010b60:	000fffff 	.word	0x000fffff
 8010b64:	00000000 	.word	0x00000000

08010b68 <sin>:
 8010b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b6a:	ec53 2b10 	vmov	r2, r3, d0
 8010b6e:	4828      	ldr	r0, [pc, #160]	; (8010c10 <sin+0xa8>)
 8010b70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010b74:	4281      	cmp	r1, r0
 8010b76:	dc07      	bgt.n	8010b88 <sin+0x20>
 8010b78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010c08 <sin+0xa0>
 8010b7c:	2000      	movs	r0, #0
 8010b7e:	b005      	add	sp, #20
 8010b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b84:	f002 b850 	b.w	8012c28 <__kernel_sin>
 8010b88:	4822      	ldr	r0, [pc, #136]	; (8010c14 <sin+0xac>)
 8010b8a:	4281      	cmp	r1, r0
 8010b8c:	dd09      	ble.n	8010ba2 <sin+0x3a>
 8010b8e:	ee10 0a10 	vmov	r0, s0
 8010b92:	4619      	mov	r1, r3
 8010b94:	f7ef fb90 	bl	80002b8 <__aeabi_dsub>
 8010b98:	ec41 0b10 	vmov	d0, r0, r1
 8010b9c:	b005      	add	sp, #20
 8010b9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ba2:	4668      	mov	r0, sp
 8010ba4:	f001 f968 	bl	8011e78 <__ieee754_rem_pio2>
 8010ba8:	f000 0003 	and.w	r0, r0, #3
 8010bac:	2801      	cmp	r0, #1
 8010bae:	d00c      	beq.n	8010bca <sin+0x62>
 8010bb0:	2802      	cmp	r0, #2
 8010bb2:	d011      	beq.n	8010bd8 <sin+0x70>
 8010bb4:	b9f0      	cbnz	r0, 8010bf4 <sin+0x8c>
 8010bb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bba:	ed9d 0b00 	vldr	d0, [sp]
 8010bbe:	2001      	movs	r0, #1
 8010bc0:	f002 f832 	bl	8012c28 <__kernel_sin>
 8010bc4:	ec51 0b10 	vmov	r0, r1, d0
 8010bc8:	e7e6      	b.n	8010b98 <sin+0x30>
 8010bca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bce:	ed9d 0b00 	vldr	d0, [sp]
 8010bd2:	f001 fc11 	bl	80123f8 <__kernel_cos>
 8010bd6:	e7f5      	b.n	8010bc4 <sin+0x5c>
 8010bd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bdc:	ed9d 0b00 	vldr	d0, [sp]
 8010be0:	2001      	movs	r0, #1
 8010be2:	f002 f821 	bl	8012c28 <__kernel_sin>
 8010be6:	ec53 2b10 	vmov	r2, r3, d0
 8010bea:	ee10 0a10 	vmov	r0, s0
 8010bee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010bf2:	e7d1      	b.n	8010b98 <sin+0x30>
 8010bf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010bf8:	ed9d 0b00 	vldr	d0, [sp]
 8010bfc:	f001 fbfc 	bl	80123f8 <__kernel_cos>
 8010c00:	e7f1      	b.n	8010be6 <sin+0x7e>
 8010c02:	bf00      	nop
 8010c04:	f3af 8000 	nop.w
	...
 8010c10:	3fe921fb 	.word	0x3fe921fb
 8010c14:	7fefffff 	.word	0x7fefffff

08010c18 <acos>:
 8010c18:	b538      	push	{r3, r4, r5, lr}
 8010c1a:	ed2d 8b02 	vpush	{d8}
 8010c1e:	ec55 4b10 	vmov	r4, r5, d0
 8010c22:	f000 f8cd 	bl	8010dc0 <__ieee754_acos>
 8010c26:	4622      	mov	r2, r4
 8010c28:	462b      	mov	r3, r5
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8010c32:	eef0 8a60 	vmov.f32	s17, s1
 8010c36:	f7ef ff91 	bl	8000b5c <__aeabi_dcmpun>
 8010c3a:	b9a8      	cbnz	r0, 8010c68 <acos+0x50>
 8010c3c:	ec45 4b10 	vmov	d0, r4, r5
 8010c40:	f002 fa82 	bl	8013148 <fabs>
 8010c44:	4b0c      	ldr	r3, [pc, #48]	; (8010c78 <acos+0x60>)
 8010c46:	ec51 0b10 	vmov	r0, r1, d0
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f7ef ff7c 	bl	8000b48 <__aeabi_dcmpgt>
 8010c50:	b150      	cbz	r0, 8010c68 <acos+0x50>
 8010c52:	f7fc ffd5 	bl	800dc00 <__errno>
 8010c56:	ecbd 8b02 	vpop	{d8}
 8010c5a:	2321      	movs	r3, #33	; 0x21
 8010c5c:	6003      	str	r3, [r0, #0]
 8010c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c62:	4806      	ldr	r0, [pc, #24]	; (8010c7c <acos+0x64>)
 8010c64:	f002 bb04 	b.w	8013270 <nan>
 8010c68:	eeb0 0a48 	vmov.f32	s0, s16
 8010c6c:	eef0 0a68 	vmov.f32	s1, s17
 8010c70:	ecbd 8b02 	vpop	{d8}
 8010c74:	bd38      	pop	{r3, r4, r5, pc}
 8010c76:	bf00      	nop
 8010c78:	3ff00000 	.word	0x3ff00000
 8010c7c:	08013cf0 	.word	0x08013cf0

08010c80 <atan2>:
 8010c80:	f000 bafe 	b.w	8011280 <__ieee754_atan2>

08010c84 <pow>:
 8010c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c86:	ed2d 8b02 	vpush	{d8}
 8010c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c8e:	eef0 8a60 	vmov.f32	s17, s1
 8010c92:	ec55 4b11 	vmov	r4, r5, d1
 8010c96:	f000 fbbf 	bl	8011418 <__ieee754_pow>
 8010c9a:	4622      	mov	r2, r4
 8010c9c:	462b      	mov	r3, r5
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	ec57 6b10 	vmov	r6, r7, d0
 8010ca6:	f7ef ff59 	bl	8000b5c <__aeabi_dcmpun>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d13b      	bne.n	8010d26 <pow+0xa2>
 8010cae:	ec51 0b18 	vmov	r0, r1, d8
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	f7ef ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8010cba:	b1b8      	cbz	r0, 8010cec <pow+0x68>
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	4629      	mov	r1, r5
 8010cc4:	f7ef ff18 	bl	8000af8 <__aeabi_dcmpeq>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	d146      	bne.n	8010d5a <pow+0xd6>
 8010ccc:	ec45 4b10 	vmov	d0, r4, r5
 8010cd0:	f002 fa43 	bl	801315a <finite>
 8010cd4:	b338      	cbz	r0, 8010d26 <pow+0xa2>
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4620      	mov	r0, r4
 8010cdc:	4629      	mov	r1, r5
 8010cde:	f7ef ff15 	bl	8000b0c <__aeabi_dcmplt>
 8010ce2:	b300      	cbz	r0, 8010d26 <pow+0xa2>
 8010ce4:	f7fc ff8c 	bl	800dc00 <__errno>
 8010ce8:	2322      	movs	r3, #34	; 0x22
 8010cea:	e01b      	b.n	8010d24 <pow+0xa0>
 8010cec:	ec47 6b10 	vmov	d0, r6, r7
 8010cf0:	f002 fa33 	bl	801315a <finite>
 8010cf4:	b9e0      	cbnz	r0, 8010d30 <pow+0xac>
 8010cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8010cfa:	eef0 0a68 	vmov.f32	s1, s17
 8010cfe:	f002 fa2c 	bl	801315a <finite>
 8010d02:	b1a8      	cbz	r0, 8010d30 <pow+0xac>
 8010d04:	ec45 4b10 	vmov	d0, r4, r5
 8010d08:	f002 fa27 	bl	801315a <finite>
 8010d0c:	b180      	cbz	r0, 8010d30 <pow+0xac>
 8010d0e:	4632      	mov	r2, r6
 8010d10:	463b      	mov	r3, r7
 8010d12:	4630      	mov	r0, r6
 8010d14:	4639      	mov	r1, r7
 8010d16:	f7ef ff21 	bl	8000b5c <__aeabi_dcmpun>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	d0e2      	beq.n	8010ce4 <pow+0x60>
 8010d1e:	f7fc ff6f 	bl	800dc00 <__errno>
 8010d22:	2321      	movs	r3, #33	; 0x21
 8010d24:	6003      	str	r3, [r0, #0]
 8010d26:	ecbd 8b02 	vpop	{d8}
 8010d2a:	ec47 6b10 	vmov	d0, r6, r7
 8010d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d30:	2200      	movs	r2, #0
 8010d32:	2300      	movs	r3, #0
 8010d34:	4630      	mov	r0, r6
 8010d36:	4639      	mov	r1, r7
 8010d38:	f7ef fede 	bl	8000af8 <__aeabi_dcmpeq>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	d0f2      	beq.n	8010d26 <pow+0xa2>
 8010d40:	eeb0 0a48 	vmov.f32	s0, s16
 8010d44:	eef0 0a68 	vmov.f32	s1, s17
 8010d48:	f002 fa07 	bl	801315a <finite>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d0ea      	beq.n	8010d26 <pow+0xa2>
 8010d50:	ec45 4b10 	vmov	d0, r4, r5
 8010d54:	f002 fa01 	bl	801315a <finite>
 8010d58:	e7c3      	b.n	8010ce2 <pow+0x5e>
 8010d5a:	4f01      	ldr	r7, [pc, #4]	; (8010d60 <pow+0xdc>)
 8010d5c:	2600      	movs	r6, #0
 8010d5e:	e7e2      	b.n	8010d26 <pow+0xa2>
 8010d60:	3ff00000 	.word	0x3ff00000

08010d64 <sqrt>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	ed2d 8b02 	vpush	{d8}
 8010d6a:	ec55 4b10 	vmov	r4, r5, d0
 8010d6e:	f001 fa8f 	bl	8012290 <__ieee754_sqrt>
 8010d72:	4622      	mov	r2, r4
 8010d74:	462b      	mov	r3, r5
 8010d76:	4620      	mov	r0, r4
 8010d78:	4629      	mov	r1, r5
 8010d7a:	eeb0 8a40 	vmov.f32	s16, s0
 8010d7e:	eef0 8a60 	vmov.f32	s17, s1
 8010d82:	f7ef feeb 	bl	8000b5c <__aeabi_dcmpun>
 8010d86:	b990      	cbnz	r0, 8010dae <sqrt+0x4a>
 8010d88:	2200      	movs	r2, #0
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	4629      	mov	r1, r5
 8010d90:	f7ef febc 	bl	8000b0c <__aeabi_dcmplt>
 8010d94:	b158      	cbz	r0, 8010dae <sqrt+0x4a>
 8010d96:	f7fc ff33 	bl	800dc00 <__errno>
 8010d9a:	2321      	movs	r3, #33	; 0x21
 8010d9c:	6003      	str	r3, [r0, #0]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	2300      	movs	r3, #0
 8010da2:	4610      	mov	r0, r2
 8010da4:	4619      	mov	r1, r3
 8010da6:	f7ef fd69 	bl	800087c <__aeabi_ddiv>
 8010daa:	ec41 0b18 	vmov	d8, r0, r1
 8010dae:	eeb0 0a48 	vmov.f32	s0, s16
 8010db2:	eef0 0a68 	vmov.f32	s1, s17
 8010db6:	ecbd 8b02 	vpop	{d8}
 8010dba:	bd38      	pop	{r3, r4, r5, pc}
 8010dbc:	0000      	movs	r0, r0
	...

08010dc0 <__ieee754_acos>:
 8010dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	ec55 4b10 	vmov	r4, r5, d0
 8010dc8:	49b7      	ldr	r1, [pc, #732]	; (80110a8 <__ieee754_acos+0x2e8>)
 8010dca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010dce:	428b      	cmp	r3, r1
 8010dd0:	dd1b      	ble.n	8010e0a <__ieee754_acos+0x4a>
 8010dd2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010dd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010dda:	4323      	orrs	r3, r4
 8010ddc:	d106      	bne.n	8010dec <__ieee754_acos+0x2c>
 8010dde:	2d00      	cmp	r5, #0
 8010de0:	f300 8211 	bgt.w	8011206 <__ieee754_acos+0x446>
 8010de4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011040 <__ieee754_acos+0x280>
 8010de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dec:	ee10 2a10 	vmov	r2, s0
 8010df0:	462b      	mov	r3, r5
 8010df2:	ee10 0a10 	vmov	r0, s0
 8010df6:	4629      	mov	r1, r5
 8010df8:	f7ef fa5e 	bl	80002b8 <__aeabi_dsub>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	f7ef fd3c 	bl	800087c <__aeabi_ddiv>
 8010e04:	ec41 0b10 	vmov	d0, r0, r1
 8010e08:	e7ee      	b.n	8010de8 <__ieee754_acos+0x28>
 8010e0a:	49a8      	ldr	r1, [pc, #672]	; (80110ac <__ieee754_acos+0x2ec>)
 8010e0c:	428b      	cmp	r3, r1
 8010e0e:	f300 8087 	bgt.w	8010f20 <__ieee754_acos+0x160>
 8010e12:	4aa7      	ldr	r2, [pc, #668]	; (80110b0 <__ieee754_acos+0x2f0>)
 8010e14:	4293      	cmp	r3, r2
 8010e16:	f340 81f9 	ble.w	801120c <__ieee754_acos+0x44c>
 8010e1a:	ee10 2a10 	vmov	r2, s0
 8010e1e:	ee10 0a10 	vmov	r0, s0
 8010e22:	462b      	mov	r3, r5
 8010e24:	4629      	mov	r1, r5
 8010e26:	f7ef fbff 	bl	8000628 <__aeabi_dmul>
 8010e2a:	a387      	add	r3, pc, #540	; (adr r3, 8011048 <__ieee754_acos+0x288>)
 8010e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e30:	4606      	mov	r6, r0
 8010e32:	460f      	mov	r7, r1
 8010e34:	f7ef fbf8 	bl	8000628 <__aeabi_dmul>
 8010e38:	a385      	add	r3, pc, #532	; (adr r3, 8011050 <__ieee754_acos+0x290>)
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	f7ef fa3d 	bl	80002bc <__adddf3>
 8010e42:	4632      	mov	r2, r6
 8010e44:	463b      	mov	r3, r7
 8010e46:	f7ef fbef 	bl	8000628 <__aeabi_dmul>
 8010e4a:	a383      	add	r3, pc, #524	; (adr r3, 8011058 <__ieee754_acos+0x298>)
 8010e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e50:	f7ef fa32 	bl	80002b8 <__aeabi_dsub>
 8010e54:	4632      	mov	r2, r6
 8010e56:	463b      	mov	r3, r7
 8010e58:	f7ef fbe6 	bl	8000628 <__aeabi_dmul>
 8010e5c:	a380      	add	r3, pc, #512	; (adr r3, 8011060 <__ieee754_acos+0x2a0>)
 8010e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e62:	f7ef fa2b 	bl	80002bc <__adddf3>
 8010e66:	4632      	mov	r2, r6
 8010e68:	463b      	mov	r3, r7
 8010e6a:	f7ef fbdd 	bl	8000628 <__aeabi_dmul>
 8010e6e:	a37e      	add	r3, pc, #504	; (adr r3, 8011068 <__ieee754_acos+0x2a8>)
 8010e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e74:	f7ef fa20 	bl	80002b8 <__aeabi_dsub>
 8010e78:	4632      	mov	r2, r6
 8010e7a:	463b      	mov	r3, r7
 8010e7c:	f7ef fbd4 	bl	8000628 <__aeabi_dmul>
 8010e80:	a37b      	add	r3, pc, #492	; (adr r3, 8011070 <__ieee754_acos+0x2b0>)
 8010e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e86:	f7ef fa19 	bl	80002bc <__adddf3>
 8010e8a:	4632      	mov	r2, r6
 8010e8c:	463b      	mov	r3, r7
 8010e8e:	f7ef fbcb 	bl	8000628 <__aeabi_dmul>
 8010e92:	a379      	add	r3, pc, #484	; (adr r3, 8011078 <__ieee754_acos+0x2b8>)
 8010e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e98:	4680      	mov	r8, r0
 8010e9a:	4689      	mov	r9, r1
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	4639      	mov	r1, r7
 8010ea0:	f7ef fbc2 	bl	8000628 <__aeabi_dmul>
 8010ea4:	a376      	add	r3, pc, #472	; (adr r3, 8011080 <__ieee754_acos+0x2c0>)
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	f7ef fa05 	bl	80002b8 <__aeabi_dsub>
 8010eae:	4632      	mov	r2, r6
 8010eb0:	463b      	mov	r3, r7
 8010eb2:	f7ef fbb9 	bl	8000628 <__aeabi_dmul>
 8010eb6:	a374      	add	r3, pc, #464	; (adr r3, 8011088 <__ieee754_acos+0x2c8>)
 8010eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebc:	f7ef f9fe 	bl	80002bc <__adddf3>
 8010ec0:	4632      	mov	r2, r6
 8010ec2:	463b      	mov	r3, r7
 8010ec4:	f7ef fbb0 	bl	8000628 <__aeabi_dmul>
 8010ec8:	a371      	add	r3, pc, #452	; (adr r3, 8011090 <__ieee754_acos+0x2d0>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	f7ef f9f3 	bl	80002b8 <__aeabi_dsub>
 8010ed2:	4632      	mov	r2, r6
 8010ed4:	463b      	mov	r3, r7
 8010ed6:	f7ef fba7 	bl	8000628 <__aeabi_dmul>
 8010eda:	4b76      	ldr	r3, [pc, #472]	; (80110b4 <__ieee754_acos+0x2f4>)
 8010edc:	2200      	movs	r2, #0
 8010ede:	f7ef f9ed 	bl	80002bc <__adddf3>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	4640      	mov	r0, r8
 8010ee8:	4649      	mov	r1, r9
 8010eea:	f7ef fcc7 	bl	800087c <__aeabi_ddiv>
 8010eee:	4622      	mov	r2, r4
 8010ef0:	462b      	mov	r3, r5
 8010ef2:	f7ef fb99 	bl	8000628 <__aeabi_dmul>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	460b      	mov	r3, r1
 8010efa:	a167      	add	r1, pc, #412	; (adr r1, 8011098 <__ieee754_acos+0x2d8>)
 8010efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f00:	f7ef f9da 	bl	80002b8 <__aeabi_dsub>
 8010f04:	4602      	mov	r2, r0
 8010f06:	460b      	mov	r3, r1
 8010f08:	4620      	mov	r0, r4
 8010f0a:	4629      	mov	r1, r5
 8010f0c:	f7ef f9d4 	bl	80002b8 <__aeabi_dsub>
 8010f10:	4602      	mov	r2, r0
 8010f12:	460b      	mov	r3, r1
 8010f14:	a162      	add	r1, pc, #392	; (adr r1, 80110a0 <__ieee754_acos+0x2e0>)
 8010f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f1a:	f7ef f9cd 	bl	80002b8 <__aeabi_dsub>
 8010f1e:	e771      	b.n	8010e04 <__ieee754_acos+0x44>
 8010f20:	2d00      	cmp	r5, #0
 8010f22:	f280 80cb 	bge.w	80110bc <__ieee754_acos+0x2fc>
 8010f26:	ee10 0a10 	vmov	r0, s0
 8010f2a:	4b62      	ldr	r3, [pc, #392]	; (80110b4 <__ieee754_acos+0x2f4>)
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	4629      	mov	r1, r5
 8010f30:	f7ef f9c4 	bl	80002bc <__adddf3>
 8010f34:	4b60      	ldr	r3, [pc, #384]	; (80110b8 <__ieee754_acos+0x2f8>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	f7ef fb76 	bl	8000628 <__aeabi_dmul>
 8010f3c:	a342      	add	r3, pc, #264	; (adr r3, 8011048 <__ieee754_acos+0x288>)
 8010f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f42:	4604      	mov	r4, r0
 8010f44:	460d      	mov	r5, r1
 8010f46:	f7ef fb6f 	bl	8000628 <__aeabi_dmul>
 8010f4a:	a341      	add	r3, pc, #260	; (adr r3, 8011050 <__ieee754_acos+0x290>)
 8010f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f50:	f7ef f9b4 	bl	80002bc <__adddf3>
 8010f54:	4622      	mov	r2, r4
 8010f56:	462b      	mov	r3, r5
 8010f58:	f7ef fb66 	bl	8000628 <__aeabi_dmul>
 8010f5c:	a33e      	add	r3, pc, #248	; (adr r3, 8011058 <__ieee754_acos+0x298>)
 8010f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f62:	f7ef f9a9 	bl	80002b8 <__aeabi_dsub>
 8010f66:	4622      	mov	r2, r4
 8010f68:	462b      	mov	r3, r5
 8010f6a:	f7ef fb5d 	bl	8000628 <__aeabi_dmul>
 8010f6e:	a33c      	add	r3, pc, #240	; (adr r3, 8011060 <__ieee754_acos+0x2a0>)
 8010f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f74:	f7ef f9a2 	bl	80002bc <__adddf3>
 8010f78:	4622      	mov	r2, r4
 8010f7a:	462b      	mov	r3, r5
 8010f7c:	f7ef fb54 	bl	8000628 <__aeabi_dmul>
 8010f80:	a339      	add	r3, pc, #228	; (adr r3, 8011068 <__ieee754_acos+0x2a8>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	f7ef f997 	bl	80002b8 <__aeabi_dsub>
 8010f8a:	4622      	mov	r2, r4
 8010f8c:	462b      	mov	r3, r5
 8010f8e:	f7ef fb4b 	bl	8000628 <__aeabi_dmul>
 8010f92:	a337      	add	r3, pc, #220	; (adr r3, 8011070 <__ieee754_acos+0x2b0>)
 8010f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f98:	f7ef f990 	bl	80002bc <__adddf3>
 8010f9c:	4622      	mov	r2, r4
 8010f9e:	462b      	mov	r3, r5
 8010fa0:	f7ef fb42 	bl	8000628 <__aeabi_dmul>
 8010fa4:	ec45 4b10 	vmov	d0, r4, r5
 8010fa8:	4680      	mov	r8, r0
 8010faa:	4689      	mov	r9, r1
 8010fac:	f001 f970 	bl	8012290 <__ieee754_sqrt>
 8010fb0:	a331      	add	r3, pc, #196	; (adr r3, 8011078 <__ieee754_acos+0x2b8>)
 8010fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	4629      	mov	r1, r5
 8010fba:	ec57 6b10 	vmov	r6, r7, d0
 8010fbe:	f7ef fb33 	bl	8000628 <__aeabi_dmul>
 8010fc2:	a32f      	add	r3, pc, #188	; (adr r3, 8011080 <__ieee754_acos+0x2c0>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	f7ef f976 	bl	80002b8 <__aeabi_dsub>
 8010fcc:	4622      	mov	r2, r4
 8010fce:	462b      	mov	r3, r5
 8010fd0:	f7ef fb2a 	bl	8000628 <__aeabi_dmul>
 8010fd4:	a32c      	add	r3, pc, #176	; (adr r3, 8011088 <__ieee754_acos+0x2c8>)
 8010fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fda:	f7ef f96f 	bl	80002bc <__adddf3>
 8010fde:	4622      	mov	r2, r4
 8010fe0:	462b      	mov	r3, r5
 8010fe2:	f7ef fb21 	bl	8000628 <__aeabi_dmul>
 8010fe6:	a32a      	add	r3, pc, #168	; (adr r3, 8011090 <__ieee754_acos+0x2d0>)
 8010fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fec:	f7ef f964 	bl	80002b8 <__aeabi_dsub>
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	462b      	mov	r3, r5
 8010ff4:	f7ef fb18 	bl	8000628 <__aeabi_dmul>
 8010ff8:	4b2e      	ldr	r3, [pc, #184]	; (80110b4 <__ieee754_acos+0x2f4>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f7ef f95e 	bl	80002bc <__adddf3>
 8011000:	4602      	mov	r2, r0
 8011002:	460b      	mov	r3, r1
 8011004:	4640      	mov	r0, r8
 8011006:	4649      	mov	r1, r9
 8011008:	f7ef fc38 	bl	800087c <__aeabi_ddiv>
 801100c:	4632      	mov	r2, r6
 801100e:	463b      	mov	r3, r7
 8011010:	f7ef fb0a 	bl	8000628 <__aeabi_dmul>
 8011014:	a320      	add	r3, pc, #128	; (adr r3, 8011098 <__ieee754_acos+0x2d8>)
 8011016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101a:	f7ef f94d 	bl	80002b8 <__aeabi_dsub>
 801101e:	4632      	mov	r2, r6
 8011020:	463b      	mov	r3, r7
 8011022:	f7ef f94b 	bl	80002bc <__adddf3>
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	f7ef f947 	bl	80002bc <__adddf3>
 801102e:	4602      	mov	r2, r0
 8011030:	460b      	mov	r3, r1
 8011032:	a103      	add	r1, pc, #12	; (adr r1, 8011040 <__ieee754_acos+0x280>)
 8011034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011038:	e76f      	b.n	8010f1a <__ieee754_acos+0x15a>
 801103a:	bf00      	nop
 801103c:	f3af 8000 	nop.w
 8011040:	54442d18 	.word	0x54442d18
 8011044:	400921fb 	.word	0x400921fb
 8011048:	0dfdf709 	.word	0x0dfdf709
 801104c:	3f023de1 	.word	0x3f023de1
 8011050:	7501b288 	.word	0x7501b288
 8011054:	3f49efe0 	.word	0x3f49efe0
 8011058:	b5688f3b 	.word	0xb5688f3b
 801105c:	3fa48228 	.word	0x3fa48228
 8011060:	0e884455 	.word	0x0e884455
 8011064:	3fc9c155 	.word	0x3fc9c155
 8011068:	03eb6f7d 	.word	0x03eb6f7d
 801106c:	3fd4d612 	.word	0x3fd4d612
 8011070:	55555555 	.word	0x55555555
 8011074:	3fc55555 	.word	0x3fc55555
 8011078:	b12e9282 	.word	0xb12e9282
 801107c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011080:	1b8d0159 	.word	0x1b8d0159
 8011084:	3fe6066c 	.word	0x3fe6066c
 8011088:	9c598ac8 	.word	0x9c598ac8
 801108c:	40002ae5 	.word	0x40002ae5
 8011090:	1c8a2d4b 	.word	0x1c8a2d4b
 8011094:	40033a27 	.word	0x40033a27
 8011098:	33145c07 	.word	0x33145c07
 801109c:	3c91a626 	.word	0x3c91a626
 80110a0:	54442d18 	.word	0x54442d18
 80110a4:	3ff921fb 	.word	0x3ff921fb
 80110a8:	3fefffff 	.word	0x3fefffff
 80110ac:	3fdfffff 	.word	0x3fdfffff
 80110b0:	3c600000 	.word	0x3c600000
 80110b4:	3ff00000 	.word	0x3ff00000
 80110b8:	3fe00000 	.word	0x3fe00000
 80110bc:	ee10 2a10 	vmov	r2, s0
 80110c0:	462b      	mov	r3, r5
 80110c2:	496d      	ldr	r1, [pc, #436]	; (8011278 <__ieee754_acos+0x4b8>)
 80110c4:	2000      	movs	r0, #0
 80110c6:	f7ef f8f7 	bl	80002b8 <__aeabi_dsub>
 80110ca:	4b6c      	ldr	r3, [pc, #432]	; (801127c <__ieee754_acos+0x4bc>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	f7ef faab 	bl	8000628 <__aeabi_dmul>
 80110d2:	4604      	mov	r4, r0
 80110d4:	460d      	mov	r5, r1
 80110d6:	ec45 4b10 	vmov	d0, r4, r5
 80110da:	f001 f8d9 	bl	8012290 <__ieee754_sqrt>
 80110de:	a34e      	add	r3, pc, #312	; (adr r3, 8011218 <__ieee754_acos+0x458>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	4620      	mov	r0, r4
 80110e6:	4629      	mov	r1, r5
 80110e8:	ec59 8b10 	vmov	r8, r9, d0
 80110ec:	f7ef fa9c 	bl	8000628 <__aeabi_dmul>
 80110f0:	a34b      	add	r3, pc, #300	; (adr r3, 8011220 <__ieee754_acos+0x460>)
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	f7ef f8e1 	bl	80002bc <__adddf3>
 80110fa:	4622      	mov	r2, r4
 80110fc:	462b      	mov	r3, r5
 80110fe:	f7ef fa93 	bl	8000628 <__aeabi_dmul>
 8011102:	a349      	add	r3, pc, #292	; (adr r3, 8011228 <__ieee754_acos+0x468>)
 8011104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011108:	f7ef f8d6 	bl	80002b8 <__aeabi_dsub>
 801110c:	4622      	mov	r2, r4
 801110e:	462b      	mov	r3, r5
 8011110:	f7ef fa8a 	bl	8000628 <__aeabi_dmul>
 8011114:	a346      	add	r3, pc, #280	; (adr r3, 8011230 <__ieee754_acos+0x470>)
 8011116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111a:	f7ef f8cf 	bl	80002bc <__adddf3>
 801111e:	4622      	mov	r2, r4
 8011120:	462b      	mov	r3, r5
 8011122:	f7ef fa81 	bl	8000628 <__aeabi_dmul>
 8011126:	a344      	add	r3, pc, #272	; (adr r3, 8011238 <__ieee754_acos+0x478>)
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	f7ef f8c4 	bl	80002b8 <__aeabi_dsub>
 8011130:	4622      	mov	r2, r4
 8011132:	462b      	mov	r3, r5
 8011134:	f7ef fa78 	bl	8000628 <__aeabi_dmul>
 8011138:	a341      	add	r3, pc, #260	; (adr r3, 8011240 <__ieee754_acos+0x480>)
 801113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113e:	f7ef f8bd 	bl	80002bc <__adddf3>
 8011142:	4622      	mov	r2, r4
 8011144:	462b      	mov	r3, r5
 8011146:	f7ef fa6f 	bl	8000628 <__aeabi_dmul>
 801114a:	a33f      	add	r3, pc, #252	; (adr r3, 8011248 <__ieee754_acos+0x488>)
 801114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011150:	4682      	mov	sl, r0
 8011152:	468b      	mov	fp, r1
 8011154:	4620      	mov	r0, r4
 8011156:	4629      	mov	r1, r5
 8011158:	f7ef fa66 	bl	8000628 <__aeabi_dmul>
 801115c:	a33c      	add	r3, pc, #240	; (adr r3, 8011250 <__ieee754_acos+0x490>)
 801115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011162:	f7ef f8a9 	bl	80002b8 <__aeabi_dsub>
 8011166:	4622      	mov	r2, r4
 8011168:	462b      	mov	r3, r5
 801116a:	f7ef fa5d 	bl	8000628 <__aeabi_dmul>
 801116e:	a33a      	add	r3, pc, #232	; (adr r3, 8011258 <__ieee754_acos+0x498>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	f7ef f8a2 	bl	80002bc <__adddf3>
 8011178:	4622      	mov	r2, r4
 801117a:	462b      	mov	r3, r5
 801117c:	f7ef fa54 	bl	8000628 <__aeabi_dmul>
 8011180:	a337      	add	r3, pc, #220	; (adr r3, 8011260 <__ieee754_acos+0x4a0>)
 8011182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011186:	f7ef f897 	bl	80002b8 <__aeabi_dsub>
 801118a:	4622      	mov	r2, r4
 801118c:	462b      	mov	r3, r5
 801118e:	f7ef fa4b 	bl	8000628 <__aeabi_dmul>
 8011192:	4b39      	ldr	r3, [pc, #228]	; (8011278 <__ieee754_acos+0x4b8>)
 8011194:	2200      	movs	r2, #0
 8011196:	f7ef f891 	bl	80002bc <__adddf3>
 801119a:	4602      	mov	r2, r0
 801119c:	460b      	mov	r3, r1
 801119e:	4650      	mov	r0, sl
 80111a0:	4659      	mov	r1, fp
 80111a2:	f7ef fb6b 	bl	800087c <__aeabi_ddiv>
 80111a6:	4642      	mov	r2, r8
 80111a8:	464b      	mov	r3, r9
 80111aa:	f7ef fa3d 	bl	8000628 <__aeabi_dmul>
 80111ae:	2600      	movs	r6, #0
 80111b0:	4682      	mov	sl, r0
 80111b2:	468b      	mov	fp, r1
 80111b4:	4632      	mov	r2, r6
 80111b6:	464b      	mov	r3, r9
 80111b8:	4630      	mov	r0, r6
 80111ba:	4649      	mov	r1, r9
 80111bc:	f7ef fa34 	bl	8000628 <__aeabi_dmul>
 80111c0:	4602      	mov	r2, r0
 80111c2:	460b      	mov	r3, r1
 80111c4:	4620      	mov	r0, r4
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7ef f876 	bl	80002b8 <__aeabi_dsub>
 80111cc:	4632      	mov	r2, r6
 80111ce:	4604      	mov	r4, r0
 80111d0:	460d      	mov	r5, r1
 80111d2:	464b      	mov	r3, r9
 80111d4:	4640      	mov	r0, r8
 80111d6:	4649      	mov	r1, r9
 80111d8:	f7ef f870 	bl	80002bc <__adddf3>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	4620      	mov	r0, r4
 80111e2:	4629      	mov	r1, r5
 80111e4:	f7ef fb4a 	bl	800087c <__aeabi_ddiv>
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	4650      	mov	r0, sl
 80111ee:	4659      	mov	r1, fp
 80111f0:	f7ef f864 	bl	80002bc <__adddf3>
 80111f4:	4632      	mov	r2, r6
 80111f6:	464b      	mov	r3, r9
 80111f8:	f7ef f860 	bl	80002bc <__adddf3>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	f7ef f85c 	bl	80002bc <__adddf3>
 8011204:	e5fe      	b.n	8010e04 <__ieee754_acos+0x44>
 8011206:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011268 <__ieee754_acos+0x4a8>
 801120a:	e5ed      	b.n	8010de8 <__ieee754_acos+0x28>
 801120c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011270 <__ieee754_acos+0x4b0>
 8011210:	e5ea      	b.n	8010de8 <__ieee754_acos+0x28>
 8011212:	bf00      	nop
 8011214:	f3af 8000 	nop.w
 8011218:	0dfdf709 	.word	0x0dfdf709
 801121c:	3f023de1 	.word	0x3f023de1
 8011220:	7501b288 	.word	0x7501b288
 8011224:	3f49efe0 	.word	0x3f49efe0
 8011228:	b5688f3b 	.word	0xb5688f3b
 801122c:	3fa48228 	.word	0x3fa48228
 8011230:	0e884455 	.word	0x0e884455
 8011234:	3fc9c155 	.word	0x3fc9c155
 8011238:	03eb6f7d 	.word	0x03eb6f7d
 801123c:	3fd4d612 	.word	0x3fd4d612
 8011240:	55555555 	.word	0x55555555
 8011244:	3fc55555 	.word	0x3fc55555
 8011248:	b12e9282 	.word	0xb12e9282
 801124c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011250:	1b8d0159 	.word	0x1b8d0159
 8011254:	3fe6066c 	.word	0x3fe6066c
 8011258:	9c598ac8 	.word	0x9c598ac8
 801125c:	40002ae5 	.word	0x40002ae5
 8011260:	1c8a2d4b 	.word	0x1c8a2d4b
 8011264:	40033a27 	.word	0x40033a27
	...
 8011270:	54442d18 	.word	0x54442d18
 8011274:	3ff921fb 	.word	0x3ff921fb
 8011278:	3ff00000 	.word	0x3ff00000
 801127c:	3fe00000 	.word	0x3fe00000

08011280 <__ieee754_atan2>:
 8011280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011284:	ec57 6b11 	vmov	r6, r7, d1
 8011288:	4273      	negs	r3, r6
 801128a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011410 <__ieee754_atan2+0x190>
 801128e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011292:	4333      	orrs	r3, r6
 8011294:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011298:	4573      	cmp	r3, lr
 801129a:	ec51 0b10 	vmov	r0, r1, d0
 801129e:	ee11 8a10 	vmov	r8, s2
 80112a2:	d80a      	bhi.n	80112ba <__ieee754_atan2+0x3a>
 80112a4:	4244      	negs	r4, r0
 80112a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112aa:	4304      	orrs	r4, r0
 80112ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80112b0:	4574      	cmp	r4, lr
 80112b2:	ee10 9a10 	vmov	r9, s0
 80112b6:	468c      	mov	ip, r1
 80112b8:	d907      	bls.n	80112ca <__ieee754_atan2+0x4a>
 80112ba:	4632      	mov	r2, r6
 80112bc:	463b      	mov	r3, r7
 80112be:	f7ee fffd 	bl	80002bc <__adddf3>
 80112c2:	ec41 0b10 	vmov	d0, r0, r1
 80112c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80112ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80112d2:	4334      	orrs	r4, r6
 80112d4:	d103      	bne.n	80112de <__ieee754_atan2+0x5e>
 80112d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112da:	f001 bd95 	b.w	8012e08 <atan>
 80112de:	17bc      	asrs	r4, r7, #30
 80112e0:	f004 0402 	and.w	r4, r4, #2
 80112e4:	ea53 0909 	orrs.w	r9, r3, r9
 80112e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80112ec:	d107      	bne.n	80112fe <__ieee754_atan2+0x7e>
 80112ee:	2c02      	cmp	r4, #2
 80112f0:	d060      	beq.n	80113b4 <__ieee754_atan2+0x134>
 80112f2:	2c03      	cmp	r4, #3
 80112f4:	d1e5      	bne.n	80112c2 <__ieee754_atan2+0x42>
 80112f6:	a142      	add	r1, pc, #264	; (adr r1, 8011400 <__ieee754_atan2+0x180>)
 80112f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112fc:	e7e1      	b.n	80112c2 <__ieee754_atan2+0x42>
 80112fe:	ea52 0808 	orrs.w	r8, r2, r8
 8011302:	d106      	bne.n	8011312 <__ieee754_atan2+0x92>
 8011304:	f1bc 0f00 	cmp.w	ip, #0
 8011308:	da5f      	bge.n	80113ca <__ieee754_atan2+0x14a>
 801130a:	a13f      	add	r1, pc, #252	; (adr r1, 8011408 <__ieee754_atan2+0x188>)
 801130c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011310:	e7d7      	b.n	80112c2 <__ieee754_atan2+0x42>
 8011312:	4572      	cmp	r2, lr
 8011314:	d10f      	bne.n	8011336 <__ieee754_atan2+0xb6>
 8011316:	4293      	cmp	r3, r2
 8011318:	f104 34ff 	add.w	r4, r4, #4294967295
 801131c:	d107      	bne.n	801132e <__ieee754_atan2+0xae>
 801131e:	2c02      	cmp	r4, #2
 8011320:	d84c      	bhi.n	80113bc <__ieee754_atan2+0x13c>
 8011322:	4b35      	ldr	r3, [pc, #212]	; (80113f8 <__ieee754_atan2+0x178>)
 8011324:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011328:	e9d4 0100 	ldrd	r0, r1, [r4]
 801132c:	e7c9      	b.n	80112c2 <__ieee754_atan2+0x42>
 801132e:	2c02      	cmp	r4, #2
 8011330:	d848      	bhi.n	80113c4 <__ieee754_atan2+0x144>
 8011332:	4b32      	ldr	r3, [pc, #200]	; (80113fc <__ieee754_atan2+0x17c>)
 8011334:	e7f6      	b.n	8011324 <__ieee754_atan2+0xa4>
 8011336:	4573      	cmp	r3, lr
 8011338:	d0e4      	beq.n	8011304 <__ieee754_atan2+0x84>
 801133a:	1a9b      	subs	r3, r3, r2
 801133c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011340:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011344:	da1e      	bge.n	8011384 <__ieee754_atan2+0x104>
 8011346:	2f00      	cmp	r7, #0
 8011348:	da01      	bge.n	801134e <__ieee754_atan2+0xce>
 801134a:	323c      	adds	r2, #60	; 0x3c
 801134c:	db1e      	blt.n	801138c <__ieee754_atan2+0x10c>
 801134e:	4632      	mov	r2, r6
 8011350:	463b      	mov	r3, r7
 8011352:	f7ef fa93 	bl	800087c <__aeabi_ddiv>
 8011356:	ec41 0b10 	vmov	d0, r0, r1
 801135a:	f001 fef5 	bl	8013148 <fabs>
 801135e:	f001 fd53 	bl	8012e08 <atan>
 8011362:	ec51 0b10 	vmov	r0, r1, d0
 8011366:	2c01      	cmp	r4, #1
 8011368:	d013      	beq.n	8011392 <__ieee754_atan2+0x112>
 801136a:	2c02      	cmp	r4, #2
 801136c:	d015      	beq.n	801139a <__ieee754_atan2+0x11a>
 801136e:	2c00      	cmp	r4, #0
 8011370:	d0a7      	beq.n	80112c2 <__ieee754_atan2+0x42>
 8011372:	a319      	add	r3, pc, #100	; (adr r3, 80113d8 <__ieee754_atan2+0x158>)
 8011374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011378:	f7ee ff9e 	bl	80002b8 <__aeabi_dsub>
 801137c:	a318      	add	r3, pc, #96	; (adr r3, 80113e0 <__ieee754_atan2+0x160>)
 801137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011382:	e014      	b.n	80113ae <__ieee754_atan2+0x12e>
 8011384:	a118      	add	r1, pc, #96	; (adr r1, 80113e8 <__ieee754_atan2+0x168>)
 8011386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801138a:	e7ec      	b.n	8011366 <__ieee754_atan2+0xe6>
 801138c:	2000      	movs	r0, #0
 801138e:	2100      	movs	r1, #0
 8011390:	e7e9      	b.n	8011366 <__ieee754_atan2+0xe6>
 8011392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011396:	4619      	mov	r1, r3
 8011398:	e793      	b.n	80112c2 <__ieee754_atan2+0x42>
 801139a:	a30f      	add	r3, pc, #60	; (adr r3, 80113d8 <__ieee754_atan2+0x158>)
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f7ee ff8a 	bl	80002b8 <__aeabi_dsub>
 80113a4:	4602      	mov	r2, r0
 80113a6:	460b      	mov	r3, r1
 80113a8:	a10d      	add	r1, pc, #52	; (adr r1, 80113e0 <__ieee754_atan2+0x160>)
 80113aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ae:	f7ee ff83 	bl	80002b8 <__aeabi_dsub>
 80113b2:	e786      	b.n	80112c2 <__ieee754_atan2+0x42>
 80113b4:	a10a      	add	r1, pc, #40	; (adr r1, 80113e0 <__ieee754_atan2+0x160>)
 80113b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ba:	e782      	b.n	80112c2 <__ieee754_atan2+0x42>
 80113bc:	a10c      	add	r1, pc, #48	; (adr r1, 80113f0 <__ieee754_atan2+0x170>)
 80113be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113c2:	e77e      	b.n	80112c2 <__ieee754_atan2+0x42>
 80113c4:	2000      	movs	r0, #0
 80113c6:	2100      	movs	r1, #0
 80113c8:	e77b      	b.n	80112c2 <__ieee754_atan2+0x42>
 80113ca:	a107      	add	r1, pc, #28	; (adr r1, 80113e8 <__ieee754_atan2+0x168>)
 80113cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d0:	e777      	b.n	80112c2 <__ieee754_atan2+0x42>
 80113d2:	bf00      	nop
 80113d4:	f3af 8000 	nop.w
 80113d8:	33145c07 	.word	0x33145c07
 80113dc:	3ca1a626 	.word	0x3ca1a626
 80113e0:	54442d18 	.word	0x54442d18
 80113e4:	400921fb 	.word	0x400921fb
 80113e8:	54442d18 	.word	0x54442d18
 80113ec:	3ff921fb 	.word	0x3ff921fb
 80113f0:	54442d18 	.word	0x54442d18
 80113f4:	3fe921fb 	.word	0x3fe921fb
 80113f8:	08013e60 	.word	0x08013e60
 80113fc:	08013e78 	.word	0x08013e78
 8011400:	54442d18 	.word	0x54442d18
 8011404:	c00921fb 	.word	0xc00921fb
 8011408:	54442d18 	.word	0x54442d18
 801140c:	bff921fb 	.word	0xbff921fb
 8011410:	7ff00000 	.word	0x7ff00000
 8011414:	00000000 	.word	0x00000000

08011418 <__ieee754_pow>:
 8011418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141c:	ed2d 8b06 	vpush	{d8-d10}
 8011420:	b089      	sub	sp, #36	; 0x24
 8011422:	ed8d 1b00 	vstr	d1, [sp]
 8011426:	e9dd 2900 	ldrd	r2, r9, [sp]
 801142a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801142e:	ea58 0102 	orrs.w	r1, r8, r2
 8011432:	ec57 6b10 	vmov	r6, r7, d0
 8011436:	d115      	bne.n	8011464 <__ieee754_pow+0x4c>
 8011438:	19b3      	adds	r3, r6, r6
 801143a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801143e:	4152      	adcs	r2, r2
 8011440:	4299      	cmp	r1, r3
 8011442:	4b89      	ldr	r3, [pc, #548]	; (8011668 <__ieee754_pow+0x250>)
 8011444:	4193      	sbcs	r3, r2
 8011446:	f080 84d2 	bcs.w	8011dee <__ieee754_pow+0x9d6>
 801144a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801144e:	4630      	mov	r0, r6
 8011450:	4639      	mov	r1, r7
 8011452:	f7ee ff33 	bl	80002bc <__adddf3>
 8011456:	ec41 0b10 	vmov	d0, r0, r1
 801145a:	b009      	add	sp, #36	; 0x24
 801145c:	ecbd 8b06 	vpop	{d8-d10}
 8011460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011464:	4b81      	ldr	r3, [pc, #516]	; (801166c <__ieee754_pow+0x254>)
 8011466:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801146a:	429c      	cmp	r4, r3
 801146c:	ee10 aa10 	vmov	sl, s0
 8011470:	463d      	mov	r5, r7
 8011472:	dc06      	bgt.n	8011482 <__ieee754_pow+0x6a>
 8011474:	d101      	bne.n	801147a <__ieee754_pow+0x62>
 8011476:	2e00      	cmp	r6, #0
 8011478:	d1e7      	bne.n	801144a <__ieee754_pow+0x32>
 801147a:	4598      	cmp	r8, r3
 801147c:	dc01      	bgt.n	8011482 <__ieee754_pow+0x6a>
 801147e:	d10f      	bne.n	80114a0 <__ieee754_pow+0x88>
 8011480:	b172      	cbz	r2, 80114a0 <__ieee754_pow+0x88>
 8011482:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011486:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801148a:	ea55 050a 	orrs.w	r5, r5, sl
 801148e:	d1dc      	bne.n	801144a <__ieee754_pow+0x32>
 8011490:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011494:	18db      	adds	r3, r3, r3
 8011496:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801149a:	4152      	adcs	r2, r2
 801149c:	429d      	cmp	r5, r3
 801149e:	e7d0      	b.n	8011442 <__ieee754_pow+0x2a>
 80114a0:	2d00      	cmp	r5, #0
 80114a2:	da3b      	bge.n	801151c <__ieee754_pow+0x104>
 80114a4:	4b72      	ldr	r3, [pc, #456]	; (8011670 <__ieee754_pow+0x258>)
 80114a6:	4598      	cmp	r8, r3
 80114a8:	dc51      	bgt.n	801154e <__ieee754_pow+0x136>
 80114aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80114ae:	4598      	cmp	r8, r3
 80114b0:	f340 84ac 	ble.w	8011e0c <__ieee754_pow+0x9f4>
 80114b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80114b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80114bc:	2b14      	cmp	r3, #20
 80114be:	dd0f      	ble.n	80114e0 <__ieee754_pow+0xc8>
 80114c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80114c4:	fa22 f103 	lsr.w	r1, r2, r3
 80114c8:	fa01 f303 	lsl.w	r3, r1, r3
 80114cc:	4293      	cmp	r3, r2
 80114ce:	f040 849d 	bne.w	8011e0c <__ieee754_pow+0x9f4>
 80114d2:	f001 0101 	and.w	r1, r1, #1
 80114d6:	f1c1 0302 	rsb	r3, r1, #2
 80114da:	9304      	str	r3, [sp, #16]
 80114dc:	b182      	cbz	r2, 8011500 <__ieee754_pow+0xe8>
 80114de:	e05f      	b.n	80115a0 <__ieee754_pow+0x188>
 80114e0:	2a00      	cmp	r2, #0
 80114e2:	d15b      	bne.n	801159c <__ieee754_pow+0x184>
 80114e4:	f1c3 0314 	rsb	r3, r3, #20
 80114e8:	fa48 f103 	asr.w	r1, r8, r3
 80114ec:	fa01 f303 	lsl.w	r3, r1, r3
 80114f0:	4543      	cmp	r3, r8
 80114f2:	f040 8488 	bne.w	8011e06 <__ieee754_pow+0x9ee>
 80114f6:	f001 0101 	and.w	r1, r1, #1
 80114fa:	f1c1 0302 	rsb	r3, r1, #2
 80114fe:	9304      	str	r3, [sp, #16]
 8011500:	4b5c      	ldr	r3, [pc, #368]	; (8011674 <__ieee754_pow+0x25c>)
 8011502:	4598      	cmp	r8, r3
 8011504:	d132      	bne.n	801156c <__ieee754_pow+0x154>
 8011506:	f1b9 0f00 	cmp.w	r9, #0
 801150a:	f280 8478 	bge.w	8011dfe <__ieee754_pow+0x9e6>
 801150e:	4959      	ldr	r1, [pc, #356]	; (8011674 <__ieee754_pow+0x25c>)
 8011510:	4632      	mov	r2, r6
 8011512:	463b      	mov	r3, r7
 8011514:	2000      	movs	r0, #0
 8011516:	f7ef f9b1 	bl	800087c <__aeabi_ddiv>
 801151a:	e79c      	b.n	8011456 <__ieee754_pow+0x3e>
 801151c:	2300      	movs	r3, #0
 801151e:	9304      	str	r3, [sp, #16]
 8011520:	2a00      	cmp	r2, #0
 8011522:	d13d      	bne.n	80115a0 <__ieee754_pow+0x188>
 8011524:	4b51      	ldr	r3, [pc, #324]	; (801166c <__ieee754_pow+0x254>)
 8011526:	4598      	cmp	r8, r3
 8011528:	d1ea      	bne.n	8011500 <__ieee754_pow+0xe8>
 801152a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801152e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011532:	ea53 030a 	orrs.w	r3, r3, sl
 8011536:	f000 845a 	beq.w	8011dee <__ieee754_pow+0x9d6>
 801153a:	4b4f      	ldr	r3, [pc, #316]	; (8011678 <__ieee754_pow+0x260>)
 801153c:	429c      	cmp	r4, r3
 801153e:	dd08      	ble.n	8011552 <__ieee754_pow+0x13a>
 8011540:	f1b9 0f00 	cmp.w	r9, #0
 8011544:	f2c0 8457 	blt.w	8011df6 <__ieee754_pow+0x9de>
 8011548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801154c:	e783      	b.n	8011456 <__ieee754_pow+0x3e>
 801154e:	2302      	movs	r3, #2
 8011550:	e7e5      	b.n	801151e <__ieee754_pow+0x106>
 8011552:	f1b9 0f00 	cmp.w	r9, #0
 8011556:	f04f 0000 	mov.w	r0, #0
 801155a:	f04f 0100 	mov.w	r1, #0
 801155e:	f6bf af7a 	bge.w	8011456 <__ieee754_pow+0x3e>
 8011562:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801156a:	e774      	b.n	8011456 <__ieee754_pow+0x3e>
 801156c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011570:	d106      	bne.n	8011580 <__ieee754_pow+0x168>
 8011572:	4632      	mov	r2, r6
 8011574:	463b      	mov	r3, r7
 8011576:	4630      	mov	r0, r6
 8011578:	4639      	mov	r1, r7
 801157a:	f7ef f855 	bl	8000628 <__aeabi_dmul>
 801157e:	e76a      	b.n	8011456 <__ieee754_pow+0x3e>
 8011580:	4b3e      	ldr	r3, [pc, #248]	; (801167c <__ieee754_pow+0x264>)
 8011582:	4599      	cmp	r9, r3
 8011584:	d10c      	bne.n	80115a0 <__ieee754_pow+0x188>
 8011586:	2d00      	cmp	r5, #0
 8011588:	db0a      	blt.n	80115a0 <__ieee754_pow+0x188>
 801158a:	ec47 6b10 	vmov	d0, r6, r7
 801158e:	b009      	add	sp, #36	; 0x24
 8011590:	ecbd 8b06 	vpop	{d8-d10}
 8011594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011598:	f000 be7a 	b.w	8012290 <__ieee754_sqrt>
 801159c:	2300      	movs	r3, #0
 801159e:	9304      	str	r3, [sp, #16]
 80115a0:	ec47 6b10 	vmov	d0, r6, r7
 80115a4:	f001 fdd0 	bl	8013148 <fabs>
 80115a8:	ec51 0b10 	vmov	r0, r1, d0
 80115ac:	f1ba 0f00 	cmp.w	sl, #0
 80115b0:	d129      	bne.n	8011606 <__ieee754_pow+0x1ee>
 80115b2:	b124      	cbz	r4, 80115be <__ieee754_pow+0x1a6>
 80115b4:	4b2f      	ldr	r3, [pc, #188]	; (8011674 <__ieee754_pow+0x25c>)
 80115b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d123      	bne.n	8011606 <__ieee754_pow+0x1ee>
 80115be:	f1b9 0f00 	cmp.w	r9, #0
 80115c2:	da05      	bge.n	80115d0 <__ieee754_pow+0x1b8>
 80115c4:	4602      	mov	r2, r0
 80115c6:	460b      	mov	r3, r1
 80115c8:	2000      	movs	r0, #0
 80115ca:	492a      	ldr	r1, [pc, #168]	; (8011674 <__ieee754_pow+0x25c>)
 80115cc:	f7ef f956 	bl	800087c <__aeabi_ddiv>
 80115d0:	2d00      	cmp	r5, #0
 80115d2:	f6bf af40 	bge.w	8011456 <__ieee754_pow+0x3e>
 80115d6:	9b04      	ldr	r3, [sp, #16]
 80115d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80115dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80115e0:	4323      	orrs	r3, r4
 80115e2:	d108      	bne.n	80115f6 <__ieee754_pow+0x1de>
 80115e4:	4602      	mov	r2, r0
 80115e6:	460b      	mov	r3, r1
 80115e8:	4610      	mov	r0, r2
 80115ea:	4619      	mov	r1, r3
 80115ec:	f7ee fe64 	bl	80002b8 <__aeabi_dsub>
 80115f0:	4602      	mov	r2, r0
 80115f2:	460b      	mov	r3, r1
 80115f4:	e78f      	b.n	8011516 <__ieee754_pow+0xfe>
 80115f6:	9b04      	ldr	r3, [sp, #16]
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	f47f af2c 	bne.w	8011456 <__ieee754_pow+0x3e>
 80115fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011602:	4619      	mov	r1, r3
 8011604:	e727      	b.n	8011456 <__ieee754_pow+0x3e>
 8011606:	0feb      	lsrs	r3, r5, #31
 8011608:	3b01      	subs	r3, #1
 801160a:	9306      	str	r3, [sp, #24]
 801160c:	9a06      	ldr	r2, [sp, #24]
 801160e:	9b04      	ldr	r3, [sp, #16]
 8011610:	4313      	orrs	r3, r2
 8011612:	d102      	bne.n	801161a <__ieee754_pow+0x202>
 8011614:	4632      	mov	r2, r6
 8011616:	463b      	mov	r3, r7
 8011618:	e7e6      	b.n	80115e8 <__ieee754_pow+0x1d0>
 801161a:	4b19      	ldr	r3, [pc, #100]	; (8011680 <__ieee754_pow+0x268>)
 801161c:	4598      	cmp	r8, r3
 801161e:	f340 80fb 	ble.w	8011818 <__ieee754_pow+0x400>
 8011622:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011626:	4598      	cmp	r8, r3
 8011628:	4b13      	ldr	r3, [pc, #76]	; (8011678 <__ieee754_pow+0x260>)
 801162a:	dd0c      	ble.n	8011646 <__ieee754_pow+0x22e>
 801162c:	429c      	cmp	r4, r3
 801162e:	dc0f      	bgt.n	8011650 <__ieee754_pow+0x238>
 8011630:	f1b9 0f00 	cmp.w	r9, #0
 8011634:	da0f      	bge.n	8011656 <__ieee754_pow+0x23e>
 8011636:	2000      	movs	r0, #0
 8011638:	b009      	add	sp, #36	; 0x24
 801163a:	ecbd 8b06 	vpop	{d8-d10}
 801163e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011642:	f001 bbd6 	b.w	8012df2 <__math_oflow>
 8011646:	429c      	cmp	r4, r3
 8011648:	dbf2      	blt.n	8011630 <__ieee754_pow+0x218>
 801164a:	4b0a      	ldr	r3, [pc, #40]	; (8011674 <__ieee754_pow+0x25c>)
 801164c:	429c      	cmp	r4, r3
 801164e:	dd19      	ble.n	8011684 <__ieee754_pow+0x26c>
 8011650:	f1b9 0f00 	cmp.w	r9, #0
 8011654:	dcef      	bgt.n	8011636 <__ieee754_pow+0x21e>
 8011656:	2000      	movs	r0, #0
 8011658:	b009      	add	sp, #36	; 0x24
 801165a:	ecbd 8b06 	vpop	{d8-d10}
 801165e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011662:	f001 bbbd 	b.w	8012de0 <__math_uflow>
 8011666:	bf00      	nop
 8011668:	fff00000 	.word	0xfff00000
 801166c:	7ff00000 	.word	0x7ff00000
 8011670:	433fffff 	.word	0x433fffff
 8011674:	3ff00000 	.word	0x3ff00000
 8011678:	3fefffff 	.word	0x3fefffff
 801167c:	3fe00000 	.word	0x3fe00000
 8011680:	41e00000 	.word	0x41e00000
 8011684:	4b60      	ldr	r3, [pc, #384]	; (8011808 <__ieee754_pow+0x3f0>)
 8011686:	2200      	movs	r2, #0
 8011688:	f7ee fe16 	bl	80002b8 <__aeabi_dsub>
 801168c:	a354      	add	r3, pc, #336	; (adr r3, 80117e0 <__ieee754_pow+0x3c8>)
 801168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011692:	4604      	mov	r4, r0
 8011694:	460d      	mov	r5, r1
 8011696:	f7ee ffc7 	bl	8000628 <__aeabi_dmul>
 801169a:	a353      	add	r3, pc, #332	; (adr r3, 80117e8 <__ieee754_pow+0x3d0>)
 801169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a0:	4606      	mov	r6, r0
 80116a2:	460f      	mov	r7, r1
 80116a4:	4620      	mov	r0, r4
 80116a6:	4629      	mov	r1, r5
 80116a8:	f7ee ffbe 	bl	8000628 <__aeabi_dmul>
 80116ac:	4b57      	ldr	r3, [pc, #348]	; (801180c <__ieee754_pow+0x3f4>)
 80116ae:	4682      	mov	sl, r0
 80116b0:	468b      	mov	fp, r1
 80116b2:	2200      	movs	r2, #0
 80116b4:	4620      	mov	r0, r4
 80116b6:	4629      	mov	r1, r5
 80116b8:	f7ee ffb6 	bl	8000628 <__aeabi_dmul>
 80116bc:	4602      	mov	r2, r0
 80116be:	460b      	mov	r3, r1
 80116c0:	a14b      	add	r1, pc, #300	; (adr r1, 80117f0 <__ieee754_pow+0x3d8>)
 80116c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116c6:	f7ee fdf7 	bl	80002b8 <__aeabi_dsub>
 80116ca:	4622      	mov	r2, r4
 80116cc:	462b      	mov	r3, r5
 80116ce:	f7ee ffab 	bl	8000628 <__aeabi_dmul>
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	2000      	movs	r0, #0
 80116d8:	494d      	ldr	r1, [pc, #308]	; (8011810 <__ieee754_pow+0x3f8>)
 80116da:	f7ee fded 	bl	80002b8 <__aeabi_dsub>
 80116de:	4622      	mov	r2, r4
 80116e0:	4680      	mov	r8, r0
 80116e2:	4689      	mov	r9, r1
 80116e4:	462b      	mov	r3, r5
 80116e6:	4620      	mov	r0, r4
 80116e8:	4629      	mov	r1, r5
 80116ea:	f7ee ff9d 	bl	8000628 <__aeabi_dmul>
 80116ee:	4602      	mov	r2, r0
 80116f0:	460b      	mov	r3, r1
 80116f2:	4640      	mov	r0, r8
 80116f4:	4649      	mov	r1, r9
 80116f6:	f7ee ff97 	bl	8000628 <__aeabi_dmul>
 80116fa:	a33f      	add	r3, pc, #252	; (adr r3, 80117f8 <__ieee754_pow+0x3e0>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	f7ee ff92 	bl	8000628 <__aeabi_dmul>
 8011704:	4602      	mov	r2, r0
 8011706:	460b      	mov	r3, r1
 8011708:	4650      	mov	r0, sl
 801170a:	4659      	mov	r1, fp
 801170c:	f7ee fdd4 	bl	80002b8 <__aeabi_dsub>
 8011710:	4602      	mov	r2, r0
 8011712:	460b      	mov	r3, r1
 8011714:	4680      	mov	r8, r0
 8011716:	4689      	mov	r9, r1
 8011718:	4630      	mov	r0, r6
 801171a:	4639      	mov	r1, r7
 801171c:	f7ee fdce 	bl	80002bc <__adddf3>
 8011720:	2000      	movs	r0, #0
 8011722:	4632      	mov	r2, r6
 8011724:	463b      	mov	r3, r7
 8011726:	4604      	mov	r4, r0
 8011728:	460d      	mov	r5, r1
 801172a:	f7ee fdc5 	bl	80002b8 <__aeabi_dsub>
 801172e:	4602      	mov	r2, r0
 8011730:	460b      	mov	r3, r1
 8011732:	4640      	mov	r0, r8
 8011734:	4649      	mov	r1, r9
 8011736:	f7ee fdbf 	bl	80002b8 <__aeabi_dsub>
 801173a:	9b04      	ldr	r3, [sp, #16]
 801173c:	9a06      	ldr	r2, [sp, #24]
 801173e:	3b01      	subs	r3, #1
 8011740:	4313      	orrs	r3, r2
 8011742:	4682      	mov	sl, r0
 8011744:	468b      	mov	fp, r1
 8011746:	f040 81e7 	bne.w	8011b18 <__ieee754_pow+0x700>
 801174a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011800 <__ieee754_pow+0x3e8>
 801174e:	eeb0 8a47 	vmov.f32	s16, s14
 8011752:	eef0 8a67 	vmov.f32	s17, s15
 8011756:	e9dd 6700 	ldrd	r6, r7, [sp]
 801175a:	2600      	movs	r6, #0
 801175c:	4632      	mov	r2, r6
 801175e:	463b      	mov	r3, r7
 8011760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011764:	f7ee fda8 	bl	80002b8 <__aeabi_dsub>
 8011768:	4622      	mov	r2, r4
 801176a:	462b      	mov	r3, r5
 801176c:	f7ee ff5c 	bl	8000628 <__aeabi_dmul>
 8011770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011774:	4680      	mov	r8, r0
 8011776:	4689      	mov	r9, r1
 8011778:	4650      	mov	r0, sl
 801177a:	4659      	mov	r1, fp
 801177c:	f7ee ff54 	bl	8000628 <__aeabi_dmul>
 8011780:	4602      	mov	r2, r0
 8011782:	460b      	mov	r3, r1
 8011784:	4640      	mov	r0, r8
 8011786:	4649      	mov	r1, r9
 8011788:	f7ee fd98 	bl	80002bc <__adddf3>
 801178c:	4632      	mov	r2, r6
 801178e:	463b      	mov	r3, r7
 8011790:	4680      	mov	r8, r0
 8011792:	4689      	mov	r9, r1
 8011794:	4620      	mov	r0, r4
 8011796:	4629      	mov	r1, r5
 8011798:	f7ee ff46 	bl	8000628 <__aeabi_dmul>
 801179c:	460b      	mov	r3, r1
 801179e:	4604      	mov	r4, r0
 80117a0:	460d      	mov	r5, r1
 80117a2:	4602      	mov	r2, r0
 80117a4:	4649      	mov	r1, r9
 80117a6:	4640      	mov	r0, r8
 80117a8:	f7ee fd88 	bl	80002bc <__adddf3>
 80117ac:	4b19      	ldr	r3, [pc, #100]	; (8011814 <__ieee754_pow+0x3fc>)
 80117ae:	4299      	cmp	r1, r3
 80117b0:	ec45 4b19 	vmov	d9, r4, r5
 80117b4:	4606      	mov	r6, r0
 80117b6:	460f      	mov	r7, r1
 80117b8:	468b      	mov	fp, r1
 80117ba:	f340 82f1 	ble.w	8011da0 <__ieee754_pow+0x988>
 80117be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80117c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80117c6:	4303      	orrs	r3, r0
 80117c8:	f000 81e4 	beq.w	8011b94 <__ieee754_pow+0x77c>
 80117cc:	ec51 0b18 	vmov	r0, r1, d8
 80117d0:	2200      	movs	r2, #0
 80117d2:	2300      	movs	r3, #0
 80117d4:	f7ef f99a 	bl	8000b0c <__aeabi_dcmplt>
 80117d8:	3800      	subs	r0, #0
 80117da:	bf18      	it	ne
 80117dc:	2001      	movne	r0, #1
 80117de:	e72b      	b.n	8011638 <__ieee754_pow+0x220>
 80117e0:	60000000 	.word	0x60000000
 80117e4:	3ff71547 	.word	0x3ff71547
 80117e8:	f85ddf44 	.word	0xf85ddf44
 80117ec:	3e54ae0b 	.word	0x3e54ae0b
 80117f0:	55555555 	.word	0x55555555
 80117f4:	3fd55555 	.word	0x3fd55555
 80117f8:	652b82fe 	.word	0x652b82fe
 80117fc:	3ff71547 	.word	0x3ff71547
 8011800:	00000000 	.word	0x00000000
 8011804:	bff00000 	.word	0xbff00000
 8011808:	3ff00000 	.word	0x3ff00000
 801180c:	3fd00000 	.word	0x3fd00000
 8011810:	3fe00000 	.word	0x3fe00000
 8011814:	408fffff 	.word	0x408fffff
 8011818:	4bd5      	ldr	r3, [pc, #852]	; (8011b70 <__ieee754_pow+0x758>)
 801181a:	402b      	ands	r3, r5
 801181c:	2200      	movs	r2, #0
 801181e:	b92b      	cbnz	r3, 801182c <__ieee754_pow+0x414>
 8011820:	4bd4      	ldr	r3, [pc, #848]	; (8011b74 <__ieee754_pow+0x75c>)
 8011822:	f7ee ff01 	bl	8000628 <__aeabi_dmul>
 8011826:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801182a:	460c      	mov	r4, r1
 801182c:	1523      	asrs	r3, r4, #20
 801182e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011832:	4413      	add	r3, r2
 8011834:	9305      	str	r3, [sp, #20]
 8011836:	4bd0      	ldr	r3, [pc, #832]	; (8011b78 <__ieee754_pow+0x760>)
 8011838:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801183c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011840:	429c      	cmp	r4, r3
 8011842:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011846:	dd08      	ble.n	801185a <__ieee754_pow+0x442>
 8011848:	4bcc      	ldr	r3, [pc, #816]	; (8011b7c <__ieee754_pow+0x764>)
 801184a:	429c      	cmp	r4, r3
 801184c:	f340 8162 	ble.w	8011b14 <__ieee754_pow+0x6fc>
 8011850:	9b05      	ldr	r3, [sp, #20]
 8011852:	3301      	adds	r3, #1
 8011854:	9305      	str	r3, [sp, #20]
 8011856:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801185a:	2400      	movs	r4, #0
 801185c:	00e3      	lsls	r3, r4, #3
 801185e:	9307      	str	r3, [sp, #28]
 8011860:	4bc7      	ldr	r3, [pc, #796]	; (8011b80 <__ieee754_pow+0x768>)
 8011862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011866:	ed93 7b00 	vldr	d7, [r3]
 801186a:	4629      	mov	r1, r5
 801186c:	ec53 2b17 	vmov	r2, r3, d7
 8011870:	eeb0 9a47 	vmov.f32	s18, s14
 8011874:	eef0 9a67 	vmov.f32	s19, s15
 8011878:	4682      	mov	sl, r0
 801187a:	f7ee fd1d 	bl	80002b8 <__aeabi_dsub>
 801187e:	4652      	mov	r2, sl
 8011880:	4606      	mov	r6, r0
 8011882:	460f      	mov	r7, r1
 8011884:	462b      	mov	r3, r5
 8011886:	ec51 0b19 	vmov	r0, r1, d9
 801188a:	f7ee fd17 	bl	80002bc <__adddf3>
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	2000      	movs	r0, #0
 8011894:	49bb      	ldr	r1, [pc, #748]	; (8011b84 <__ieee754_pow+0x76c>)
 8011896:	f7ee fff1 	bl	800087c <__aeabi_ddiv>
 801189a:	ec41 0b1a 	vmov	d10, r0, r1
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	4630      	mov	r0, r6
 80118a4:	4639      	mov	r1, r7
 80118a6:	f7ee febf 	bl	8000628 <__aeabi_dmul>
 80118aa:	2300      	movs	r3, #0
 80118ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118b0:	9302      	str	r3, [sp, #8]
 80118b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80118b6:	46ab      	mov	fp, r5
 80118b8:	106d      	asrs	r5, r5, #1
 80118ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80118be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80118c2:	ec41 0b18 	vmov	d8, r0, r1
 80118c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80118ca:	2200      	movs	r2, #0
 80118cc:	4640      	mov	r0, r8
 80118ce:	4649      	mov	r1, r9
 80118d0:	4614      	mov	r4, r2
 80118d2:	461d      	mov	r5, r3
 80118d4:	f7ee fea8 	bl	8000628 <__aeabi_dmul>
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	4630      	mov	r0, r6
 80118de:	4639      	mov	r1, r7
 80118e0:	f7ee fcea 	bl	80002b8 <__aeabi_dsub>
 80118e4:	ec53 2b19 	vmov	r2, r3, d9
 80118e8:	4606      	mov	r6, r0
 80118ea:	460f      	mov	r7, r1
 80118ec:	4620      	mov	r0, r4
 80118ee:	4629      	mov	r1, r5
 80118f0:	f7ee fce2 	bl	80002b8 <__aeabi_dsub>
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	4650      	mov	r0, sl
 80118fa:	4659      	mov	r1, fp
 80118fc:	f7ee fcdc 	bl	80002b8 <__aeabi_dsub>
 8011900:	4642      	mov	r2, r8
 8011902:	464b      	mov	r3, r9
 8011904:	f7ee fe90 	bl	8000628 <__aeabi_dmul>
 8011908:	4602      	mov	r2, r0
 801190a:	460b      	mov	r3, r1
 801190c:	4630      	mov	r0, r6
 801190e:	4639      	mov	r1, r7
 8011910:	f7ee fcd2 	bl	80002b8 <__aeabi_dsub>
 8011914:	ec53 2b1a 	vmov	r2, r3, d10
 8011918:	f7ee fe86 	bl	8000628 <__aeabi_dmul>
 801191c:	ec53 2b18 	vmov	r2, r3, d8
 8011920:	ec41 0b19 	vmov	d9, r0, r1
 8011924:	ec51 0b18 	vmov	r0, r1, d8
 8011928:	f7ee fe7e 	bl	8000628 <__aeabi_dmul>
 801192c:	a37c      	add	r3, pc, #496	; (adr r3, 8011b20 <__ieee754_pow+0x708>)
 801192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011932:	4604      	mov	r4, r0
 8011934:	460d      	mov	r5, r1
 8011936:	f7ee fe77 	bl	8000628 <__aeabi_dmul>
 801193a:	a37b      	add	r3, pc, #492	; (adr r3, 8011b28 <__ieee754_pow+0x710>)
 801193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011940:	f7ee fcbc 	bl	80002bc <__adddf3>
 8011944:	4622      	mov	r2, r4
 8011946:	462b      	mov	r3, r5
 8011948:	f7ee fe6e 	bl	8000628 <__aeabi_dmul>
 801194c:	a378      	add	r3, pc, #480	; (adr r3, 8011b30 <__ieee754_pow+0x718>)
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	f7ee fcb3 	bl	80002bc <__adddf3>
 8011956:	4622      	mov	r2, r4
 8011958:	462b      	mov	r3, r5
 801195a:	f7ee fe65 	bl	8000628 <__aeabi_dmul>
 801195e:	a376      	add	r3, pc, #472	; (adr r3, 8011b38 <__ieee754_pow+0x720>)
 8011960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011964:	f7ee fcaa 	bl	80002bc <__adddf3>
 8011968:	4622      	mov	r2, r4
 801196a:	462b      	mov	r3, r5
 801196c:	f7ee fe5c 	bl	8000628 <__aeabi_dmul>
 8011970:	a373      	add	r3, pc, #460	; (adr r3, 8011b40 <__ieee754_pow+0x728>)
 8011972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011976:	f7ee fca1 	bl	80002bc <__adddf3>
 801197a:	4622      	mov	r2, r4
 801197c:	462b      	mov	r3, r5
 801197e:	f7ee fe53 	bl	8000628 <__aeabi_dmul>
 8011982:	a371      	add	r3, pc, #452	; (adr r3, 8011b48 <__ieee754_pow+0x730>)
 8011984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011988:	f7ee fc98 	bl	80002bc <__adddf3>
 801198c:	4622      	mov	r2, r4
 801198e:	4606      	mov	r6, r0
 8011990:	460f      	mov	r7, r1
 8011992:	462b      	mov	r3, r5
 8011994:	4620      	mov	r0, r4
 8011996:	4629      	mov	r1, r5
 8011998:	f7ee fe46 	bl	8000628 <__aeabi_dmul>
 801199c:	4602      	mov	r2, r0
 801199e:	460b      	mov	r3, r1
 80119a0:	4630      	mov	r0, r6
 80119a2:	4639      	mov	r1, r7
 80119a4:	f7ee fe40 	bl	8000628 <__aeabi_dmul>
 80119a8:	4642      	mov	r2, r8
 80119aa:	4604      	mov	r4, r0
 80119ac:	460d      	mov	r5, r1
 80119ae:	464b      	mov	r3, r9
 80119b0:	ec51 0b18 	vmov	r0, r1, d8
 80119b4:	f7ee fc82 	bl	80002bc <__adddf3>
 80119b8:	ec53 2b19 	vmov	r2, r3, d9
 80119bc:	f7ee fe34 	bl	8000628 <__aeabi_dmul>
 80119c0:	4622      	mov	r2, r4
 80119c2:	462b      	mov	r3, r5
 80119c4:	f7ee fc7a 	bl	80002bc <__adddf3>
 80119c8:	4642      	mov	r2, r8
 80119ca:	4682      	mov	sl, r0
 80119cc:	468b      	mov	fp, r1
 80119ce:	464b      	mov	r3, r9
 80119d0:	4640      	mov	r0, r8
 80119d2:	4649      	mov	r1, r9
 80119d4:	f7ee fe28 	bl	8000628 <__aeabi_dmul>
 80119d8:	4b6b      	ldr	r3, [pc, #428]	; (8011b88 <__ieee754_pow+0x770>)
 80119da:	2200      	movs	r2, #0
 80119dc:	4606      	mov	r6, r0
 80119de:	460f      	mov	r7, r1
 80119e0:	f7ee fc6c 	bl	80002bc <__adddf3>
 80119e4:	4652      	mov	r2, sl
 80119e6:	465b      	mov	r3, fp
 80119e8:	f7ee fc68 	bl	80002bc <__adddf3>
 80119ec:	2000      	movs	r0, #0
 80119ee:	4604      	mov	r4, r0
 80119f0:	460d      	mov	r5, r1
 80119f2:	4602      	mov	r2, r0
 80119f4:	460b      	mov	r3, r1
 80119f6:	4640      	mov	r0, r8
 80119f8:	4649      	mov	r1, r9
 80119fa:	f7ee fe15 	bl	8000628 <__aeabi_dmul>
 80119fe:	4b62      	ldr	r3, [pc, #392]	; (8011b88 <__ieee754_pow+0x770>)
 8011a00:	4680      	mov	r8, r0
 8011a02:	4689      	mov	r9, r1
 8011a04:	2200      	movs	r2, #0
 8011a06:	4620      	mov	r0, r4
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7ee fc55 	bl	80002b8 <__aeabi_dsub>
 8011a0e:	4632      	mov	r2, r6
 8011a10:	463b      	mov	r3, r7
 8011a12:	f7ee fc51 	bl	80002b8 <__aeabi_dsub>
 8011a16:	4602      	mov	r2, r0
 8011a18:	460b      	mov	r3, r1
 8011a1a:	4650      	mov	r0, sl
 8011a1c:	4659      	mov	r1, fp
 8011a1e:	f7ee fc4b 	bl	80002b8 <__aeabi_dsub>
 8011a22:	ec53 2b18 	vmov	r2, r3, d8
 8011a26:	f7ee fdff 	bl	8000628 <__aeabi_dmul>
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	460f      	mov	r7, r1
 8011a30:	462b      	mov	r3, r5
 8011a32:	ec51 0b19 	vmov	r0, r1, d9
 8011a36:	f7ee fdf7 	bl	8000628 <__aeabi_dmul>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4630      	mov	r0, r6
 8011a40:	4639      	mov	r1, r7
 8011a42:	f7ee fc3b 	bl	80002bc <__adddf3>
 8011a46:	4606      	mov	r6, r0
 8011a48:	460f      	mov	r7, r1
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4640      	mov	r0, r8
 8011a50:	4649      	mov	r1, r9
 8011a52:	f7ee fc33 	bl	80002bc <__adddf3>
 8011a56:	a33e      	add	r3, pc, #248	; (adr r3, 8011b50 <__ieee754_pow+0x738>)
 8011a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	4604      	mov	r4, r0
 8011a60:	460d      	mov	r5, r1
 8011a62:	f7ee fde1 	bl	8000628 <__aeabi_dmul>
 8011a66:	4642      	mov	r2, r8
 8011a68:	ec41 0b18 	vmov	d8, r0, r1
 8011a6c:	464b      	mov	r3, r9
 8011a6e:	4620      	mov	r0, r4
 8011a70:	4629      	mov	r1, r5
 8011a72:	f7ee fc21 	bl	80002b8 <__aeabi_dsub>
 8011a76:	4602      	mov	r2, r0
 8011a78:	460b      	mov	r3, r1
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	4639      	mov	r1, r7
 8011a7e:	f7ee fc1b 	bl	80002b8 <__aeabi_dsub>
 8011a82:	a335      	add	r3, pc, #212	; (adr r3, 8011b58 <__ieee754_pow+0x740>)
 8011a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a88:	f7ee fdce 	bl	8000628 <__aeabi_dmul>
 8011a8c:	a334      	add	r3, pc, #208	; (adr r3, 8011b60 <__ieee754_pow+0x748>)
 8011a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a92:	4606      	mov	r6, r0
 8011a94:	460f      	mov	r7, r1
 8011a96:	4620      	mov	r0, r4
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f7ee fdc5 	bl	8000628 <__aeabi_dmul>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	f7ee fc09 	bl	80002bc <__adddf3>
 8011aaa:	9a07      	ldr	r2, [sp, #28]
 8011aac:	4b37      	ldr	r3, [pc, #220]	; (8011b8c <__ieee754_pow+0x774>)
 8011aae:	4413      	add	r3, r2
 8011ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab4:	f7ee fc02 	bl	80002bc <__adddf3>
 8011ab8:	4682      	mov	sl, r0
 8011aba:	9805      	ldr	r0, [sp, #20]
 8011abc:	468b      	mov	fp, r1
 8011abe:	f7ee fd49 	bl	8000554 <__aeabi_i2d>
 8011ac2:	9a07      	ldr	r2, [sp, #28]
 8011ac4:	4b32      	ldr	r3, [pc, #200]	; (8011b90 <__ieee754_pow+0x778>)
 8011ac6:	4413      	add	r3, r2
 8011ac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011acc:	4606      	mov	r6, r0
 8011ace:	460f      	mov	r7, r1
 8011ad0:	4652      	mov	r2, sl
 8011ad2:	465b      	mov	r3, fp
 8011ad4:	ec51 0b18 	vmov	r0, r1, d8
 8011ad8:	f7ee fbf0 	bl	80002bc <__adddf3>
 8011adc:	4642      	mov	r2, r8
 8011ade:	464b      	mov	r3, r9
 8011ae0:	f7ee fbec 	bl	80002bc <__adddf3>
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	463b      	mov	r3, r7
 8011ae8:	f7ee fbe8 	bl	80002bc <__adddf3>
 8011aec:	2000      	movs	r0, #0
 8011aee:	4632      	mov	r2, r6
 8011af0:	463b      	mov	r3, r7
 8011af2:	4604      	mov	r4, r0
 8011af4:	460d      	mov	r5, r1
 8011af6:	f7ee fbdf 	bl	80002b8 <__aeabi_dsub>
 8011afa:	4642      	mov	r2, r8
 8011afc:	464b      	mov	r3, r9
 8011afe:	f7ee fbdb 	bl	80002b8 <__aeabi_dsub>
 8011b02:	ec53 2b18 	vmov	r2, r3, d8
 8011b06:	f7ee fbd7 	bl	80002b8 <__aeabi_dsub>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	4650      	mov	r0, sl
 8011b10:	4659      	mov	r1, fp
 8011b12:	e610      	b.n	8011736 <__ieee754_pow+0x31e>
 8011b14:	2401      	movs	r4, #1
 8011b16:	e6a1      	b.n	801185c <__ieee754_pow+0x444>
 8011b18:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011b68 <__ieee754_pow+0x750>
 8011b1c:	e617      	b.n	801174e <__ieee754_pow+0x336>
 8011b1e:	bf00      	nop
 8011b20:	4a454eef 	.word	0x4a454eef
 8011b24:	3fca7e28 	.word	0x3fca7e28
 8011b28:	93c9db65 	.word	0x93c9db65
 8011b2c:	3fcd864a 	.word	0x3fcd864a
 8011b30:	a91d4101 	.word	0xa91d4101
 8011b34:	3fd17460 	.word	0x3fd17460
 8011b38:	518f264d 	.word	0x518f264d
 8011b3c:	3fd55555 	.word	0x3fd55555
 8011b40:	db6fabff 	.word	0xdb6fabff
 8011b44:	3fdb6db6 	.word	0x3fdb6db6
 8011b48:	33333303 	.word	0x33333303
 8011b4c:	3fe33333 	.word	0x3fe33333
 8011b50:	e0000000 	.word	0xe0000000
 8011b54:	3feec709 	.word	0x3feec709
 8011b58:	dc3a03fd 	.word	0xdc3a03fd
 8011b5c:	3feec709 	.word	0x3feec709
 8011b60:	145b01f5 	.word	0x145b01f5
 8011b64:	be3e2fe0 	.word	0xbe3e2fe0
 8011b68:	00000000 	.word	0x00000000
 8011b6c:	3ff00000 	.word	0x3ff00000
 8011b70:	7ff00000 	.word	0x7ff00000
 8011b74:	43400000 	.word	0x43400000
 8011b78:	0003988e 	.word	0x0003988e
 8011b7c:	000bb679 	.word	0x000bb679
 8011b80:	08013e90 	.word	0x08013e90
 8011b84:	3ff00000 	.word	0x3ff00000
 8011b88:	40080000 	.word	0x40080000
 8011b8c:	08013eb0 	.word	0x08013eb0
 8011b90:	08013ea0 	.word	0x08013ea0
 8011b94:	a3b5      	add	r3, pc, #724	; (adr r3, 8011e6c <__ieee754_pow+0xa54>)
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	4640      	mov	r0, r8
 8011b9c:	4649      	mov	r1, r9
 8011b9e:	f7ee fb8d 	bl	80002bc <__adddf3>
 8011ba2:	4622      	mov	r2, r4
 8011ba4:	ec41 0b1a 	vmov	d10, r0, r1
 8011ba8:	462b      	mov	r3, r5
 8011baa:	4630      	mov	r0, r6
 8011bac:	4639      	mov	r1, r7
 8011bae:	f7ee fb83 	bl	80002b8 <__aeabi_dsub>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	ec51 0b1a 	vmov	r0, r1, d10
 8011bba:	f7ee ffc5 	bl	8000b48 <__aeabi_dcmpgt>
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	f47f ae04 	bne.w	80117cc <__ieee754_pow+0x3b4>
 8011bc4:	4aa4      	ldr	r2, [pc, #656]	; (8011e58 <__ieee754_pow+0xa40>)
 8011bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	f340 8108 	ble.w	8011de0 <__ieee754_pow+0x9c8>
 8011bd0:	151b      	asrs	r3, r3, #20
 8011bd2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011bd6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011bda:	fa4a f303 	asr.w	r3, sl, r3
 8011bde:	445b      	add	r3, fp
 8011be0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011be4:	4e9d      	ldr	r6, [pc, #628]	; (8011e5c <__ieee754_pow+0xa44>)
 8011be6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011bea:	4116      	asrs	r6, r2
 8011bec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	ea23 0106 	bic.w	r1, r3, r6
 8011bf6:	f1c2 0214 	rsb	r2, r2, #20
 8011bfa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011bfe:	fa4a fa02 	asr.w	sl, sl, r2
 8011c02:	f1bb 0f00 	cmp.w	fp, #0
 8011c06:	4602      	mov	r2, r0
 8011c08:	460b      	mov	r3, r1
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	bfb8      	it	lt
 8011c10:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c14:	f7ee fb50 	bl	80002b8 <__aeabi_dsub>
 8011c18:	ec41 0b19 	vmov	d9, r0, r1
 8011c1c:	4642      	mov	r2, r8
 8011c1e:	464b      	mov	r3, r9
 8011c20:	ec51 0b19 	vmov	r0, r1, d9
 8011c24:	f7ee fb4a 	bl	80002bc <__adddf3>
 8011c28:	a37b      	add	r3, pc, #492	; (adr r3, 8011e18 <__ieee754_pow+0xa00>)
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	2000      	movs	r0, #0
 8011c30:	4604      	mov	r4, r0
 8011c32:	460d      	mov	r5, r1
 8011c34:	f7ee fcf8 	bl	8000628 <__aeabi_dmul>
 8011c38:	ec53 2b19 	vmov	r2, r3, d9
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	460f      	mov	r7, r1
 8011c40:	4620      	mov	r0, r4
 8011c42:	4629      	mov	r1, r5
 8011c44:	f7ee fb38 	bl	80002b8 <__aeabi_dsub>
 8011c48:	4602      	mov	r2, r0
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	4640      	mov	r0, r8
 8011c4e:	4649      	mov	r1, r9
 8011c50:	f7ee fb32 	bl	80002b8 <__aeabi_dsub>
 8011c54:	a372      	add	r3, pc, #456	; (adr r3, 8011e20 <__ieee754_pow+0xa08>)
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	f7ee fce5 	bl	8000628 <__aeabi_dmul>
 8011c5e:	a372      	add	r3, pc, #456	; (adr r3, 8011e28 <__ieee754_pow+0xa10>)
 8011c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c64:	4680      	mov	r8, r0
 8011c66:	4689      	mov	r9, r1
 8011c68:	4620      	mov	r0, r4
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	f7ee fcdc 	bl	8000628 <__aeabi_dmul>
 8011c70:	4602      	mov	r2, r0
 8011c72:	460b      	mov	r3, r1
 8011c74:	4640      	mov	r0, r8
 8011c76:	4649      	mov	r1, r9
 8011c78:	f7ee fb20 	bl	80002bc <__adddf3>
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	460d      	mov	r5, r1
 8011c80:	4602      	mov	r2, r0
 8011c82:	460b      	mov	r3, r1
 8011c84:	4630      	mov	r0, r6
 8011c86:	4639      	mov	r1, r7
 8011c88:	f7ee fb18 	bl	80002bc <__adddf3>
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	463b      	mov	r3, r7
 8011c90:	4680      	mov	r8, r0
 8011c92:	4689      	mov	r9, r1
 8011c94:	f7ee fb10 	bl	80002b8 <__aeabi_dsub>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	f7ee fb0a 	bl	80002b8 <__aeabi_dsub>
 8011ca4:	4642      	mov	r2, r8
 8011ca6:	4606      	mov	r6, r0
 8011ca8:	460f      	mov	r7, r1
 8011caa:	464b      	mov	r3, r9
 8011cac:	4640      	mov	r0, r8
 8011cae:	4649      	mov	r1, r9
 8011cb0:	f7ee fcba 	bl	8000628 <__aeabi_dmul>
 8011cb4:	a35e      	add	r3, pc, #376	; (adr r3, 8011e30 <__ieee754_pow+0xa18>)
 8011cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cba:	4604      	mov	r4, r0
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	f7ee fcb3 	bl	8000628 <__aeabi_dmul>
 8011cc2:	a35d      	add	r3, pc, #372	; (adr r3, 8011e38 <__ieee754_pow+0xa20>)
 8011cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc8:	f7ee faf6 	bl	80002b8 <__aeabi_dsub>
 8011ccc:	4622      	mov	r2, r4
 8011cce:	462b      	mov	r3, r5
 8011cd0:	f7ee fcaa 	bl	8000628 <__aeabi_dmul>
 8011cd4:	a35a      	add	r3, pc, #360	; (adr r3, 8011e40 <__ieee754_pow+0xa28>)
 8011cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cda:	f7ee faef 	bl	80002bc <__adddf3>
 8011cde:	4622      	mov	r2, r4
 8011ce0:	462b      	mov	r3, r5
 8011ce2:	f7ee fca1 	bl	8000628 <__aeabi_dmul>
 8011ce6:	a358      	add	r3, pc, #352	; (adr r3, 8011e48 <__ieee754_pow+0xa30>)
 8011ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cec:	f7ee fae4 	bl	80002b8 <__aeabi_dsub>
 8011cf0:	4622      	mov	r2, r4
 8011cf2:	462b      	mov	r3, r5
 8011cf4:	f7ee fc98 	bl	8000628 <__aeabi_dmul>
 8011cf8:	a355      	add	r3, pc, #340	; (adr r3, 8011e50 <__ieee754_pow+0xa38>)
 8011cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfe:	f7ee fadd 	bl	80002bc <__adddf3>
 8011d02:	4622      	mov	r2, r4
 8011d04:	462b      	mov	r3, r5
 8011d06:	f7ee fc8f 	bl	8000628 <__aeabi_dmul>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	4640      	mov	r0, r8
 8011d10:	4649      	mov	r1, r9
 8011d12:	f7ee fad1 	bl	80002b8 <__aeabi_dsub>
 8011d16:	4604      	mov	r4, r0
 8011d18:	460d      	mov	r5, r1
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	4640      	mov	r0, r8
 8011d20:	4649      	mov	r1, r9
 8011d22:	f7ee fc81 	bl	8000628 <__aeabi_dmul>
 8011d26:	2200      	movs	r2, #0
 8011d28:	ec41 0b19 	vmov	d9, r0, r1
 8011d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d30:	4620      	mov	r0, r4
 8011d32:	4629      	mov	r1, r5
 8011d34:	f7ee fac0 	bl	80002b8 <__aeabi_dsub>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	ec51 0b19 	vmov	r0, r1, d9
 8011d40:	f7ee fd9c 	bl	800087c <__aeabi_ddiv>
 8011d44:	4632      	mov	r2, r6
 8011d46:	4604      	mov	r4, r0
 8011d48:	460d      	mov	r5, r1
 8011d4a:	463b      	mov	r3, r7
 8011d4c:	4640      	mov	r0, r8
 8011d4e:	4649      	mov	r1, r9
 8011d50:	f7ee fc6a 	bl	8000628 <__aeabi_dmul>
 8011d54:	4632      	mov	r2, r6
 8011d56:	463b      	mov	r3, r7
 8011d58:	f7ee fab0 	bl	80002bc <__adddf3>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	460b      	mov	r3, r1
 8011d60:	4620      	mov	r0, r4
 8011d62:	4629      	mov	r1, r5
 8011d64:	f7ee faa8 	bl	80002b8 <__aeabi_dsub>
 8011d68:	4642      	mov	r2, r8
 8011d6a:	464b      	mov	r3, r9
 8011d6c:	f7ee faa4 	bl	80002b8 <__aeabi_dsub>
 8011d70:	460b      	mov	r3, r1
 8011d72:	4602      	mov	r2, r0
 8011d74:	493a      	ldr	r1, [pc, #232]	; (8011e60 <__ieee754_pow+0xa48>)
 8011d76:	2000      	movs	r0, #0
 8011d78:	f7ee fa9e 	bl	80002b8 <__aeabi_dsub>
 8011d7c:	ec41 0b10 	vmov	d0, r0, r1
 8011d80:	ee10 3a90 	vmov	r3, s1
 8011d84:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d8c:	da2b      	bge.n	8011de6 <__ieee754_pow+0x9ce>
 8011d8e:	4650      	mov	r0, sl
 8011d90:	f001 fa76 	bl	8013280 <scalbn>
 8011d94:	ec51 0b10 	vmov	r0, r1, d0
 8011d98:	ec53 2b18 	vmov	r2, r3, d8
 8011d9c:	f7ff bbed 	b.w	801157a <__ieee754_pow+0x162>
 8011da0:	4b30      	ldr	r3, [pc, #192]	; (8011e64 <__ieee754_pow+0xa4c>)
 8011da2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011da6:	429e      	cmp	r6, r3
 8011da8:	f77f af0c 	ble.w	8011bc4 <__ieee754_pow+0x7ac>
 8011dac:	4b2e      	ldr	r3, [pc, #184]	; (8011e68 <__ieee754_pow+0xa50>)
 8011dae:	440b      	add	r3, r1
 8011db0:	4303      	orrs	r3, r0
 8011db2:	d009      	beq.n	8011dc8 <__ieee754_pow+0x9b0>
 8011db4:	ec51 0b18 	vmov	r0, r1, d8
 8011db8:	2200      	movs	r2, #0
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f7ee fea6 	bl	8000b0c <__aeabi_dcmplt>
 8011dc0:	3800      	subs	r0, #0
 8011dc2:	bf18      	it	ne
 8011dc4:	2001      	movne	r0, #1
 8011dc6:	e447      	b.n	8011658 <__ieee754_pow+0x240>
 8011dc8:	4622      	mov	r2, r4
 8011dca:	462b      	mov	r3, r5
 8011dcc:	f7ee fa74 	bl	80002b8 <__aeabi_dsub>
 8011dd0:	4642      	mov	r2, r8
 8011dd2:	464b      	mov	r3, r9
 8011dd4:	f7ee feae 	bl	8000b34 <__aeabi_dcmpge>
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	f43f aef3 	beq.w	8011bc4 <__ieee754_pow+0x7ac>
 8011dde:	e7e9      	b.n	8011db4 <__ieee754_pow+0x99c>
 8011de0:	f04f 0a00 	mov.w	sl, #0
 8011de4:	e71a      	b.n	8011c1c <__ieee754_pow+0x804>
 8011de6:	ec51 0b10 	vmov	r0, r1, d0
 8011dea:	4619      	mov	r1, r3
 8011dec:	e7d4      	b.n	8011d98 <__ieee754_pow+0x980>
 8011dee:	491c      	ldr	r1, [pc, #112]	; (8011e60 <__ieee754_pow+0xa48>)
 8011df0:	2000      	movs	r0, #0
 8011df2:	f7ff bb30 	b.w	8011456 <__ieee754_pow+0x3e>
 8011df6:	2000      	movs	r0, #0
 8011df8:	2100      	movs	r1, #0
 8011dfa:	f7ff bb2c 	b.w	8011456 <__ieee754_pow+0x3e>
 8011dfe:	4630      	mov	r0, r6
 8011e00:	4639      	mov	r1, r7
 8011e02:	f7ff bb28 	b.w	8011456 <__ieee754_pow+0x3e>
 8011e06:	9204      	str	r2, [sp, #16]
 8011e08:	f7ff bb7a 	b.w	8011500 <__ieee754_pow+0xe8>
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	f7ff bb64 	b.w	80114da <__ieee754_pow+0xc2>
 8011e12:	bf00      	nop
 8011e14:	f3af 8000 	nop.w
 8011e18:	00000000 	.word	0x00000000
 8011e1c:	3fe62e43 	.word	0x3fe62e43
 8011e20:	fefa39ef 	.word	0xfefa39ef
 8011e24:	3fe62e42 	.word	0x3fe62e42
 8011e28:	0ca86c39 	.word	0x0ca86c39
 8011e2c:	be205c61 	.word	0xbe205c61
 8011e30:	72bea4d0 	.word	0x72bea4d0
 8011e34:	3e663769 	.word	0x3e663769
 8011e38:	c5d26bf1 	.word	0xc5d26bf1
 8011e3c:	3ebbbd41 	.word	0x3ebbbd41
 8011e40:	af25de2c 	.word	0xaf25de2c
 8011e44:	3f11566a 	.word	0x3f11566a
 8011e48:	16bebd93 	.word	0x16bebd93
 8011e4c:	3f66c16c 	.word	0x3f66c16c
 8011e50:	5555553e 	.word	0x5555553e
 8011e54:	3fc55555 	.word	0x3fc55555
 8011e58:	3fe00000 	.word	0x3fe00000
 8011e5c:	000fffff 	.word	0x000fffff
 8011e60:	3ff00000 	.word	0x3ff00000
 8011e64:	4090cbff 	.word	0x4090cbff
 8011e68:	3f6f3400 	.word	0x3f6f3400
 8011e6c:	652b82fe 	.word	0x652b82fe
 8011e70:	3c971547 	.word	0x3c971547
 8011e74:	00000000 	.word	0x00000000

08011e78 <__ieee754_rem_pio2>:
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	ed2d 8b02 	vpush	{d8}
 8011e80:	ec55 4b10 	vmov	r4, r5, d0
 8011e84:	4bca      	ldr	r3, [pc, #808]	; (80121b0 <__ieee754_rem_pio2+0x338>)
 8011e86:	b08b      	sub	sp, #44	; 0x2c
 8011e88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011e8c:	4598      	cmp	r8, r3
 8011e8e:	4682      	mov	sl, r0
 8011e90:	9502      	str	r5, [sp, #8]
 8011e92:	dc08      	bgt.n	8011ea6 <__ieee754_rem_pio2+0x2e>
 8011e94:	2200      	movs	r2, #0
 8011e96:	2300      	movs	r3, #0
 8011e98:	ed80 0b00 	vstr	d0, [r0]
 8011e9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011ea0:	f04f 0b00 	mov.w	fp, #0
 8011ea4:	e028      	b.n	8011ef8 <__ieee754_rem_pio2+0x80>
 8011ea6:	4bc3      	ldr	r3, [pc, #780]	; (80121b4 <__ieee754_rem_pio2+0x33c>)
 8011ea8:	4598      	cmp	r8, r3
 8011eaa:	dc78      	bgt.n	8011f9e <__ieee754_rem_pio2+0x126>
 8011eac:	9b02      	ldr	r3, [sp, #8]
 8011eae:	4ec2      	ldr	r6, [pc, #776]	; (80121b8 <__ieee754_rem_pio2+0x340>)
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	ee10 0a10 	vmov	r0, s0
 8011eb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8012178 <__ieee754_rem_pio2+0x300>)
 8011eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ebc:	4629      	mov	r1, r5
 8011ebe:	dd39      	ble.n	8011f34 <__ieee754_rem_pio2+0xbc>
 8011ec0:	f7ee f9fa 	bl	80002b8 <__aeabi_dsub>
 8011ec4:	45b0      	cmp	r8, r6
 8011ec6:	4604      	mov	r4, r0
 8011ec8:	460d      	mov	r5, r1
 8011eca:	d01b      	beq.n	8011f04 <__ieee754_rem_pio2+0x8c>
 8011ecc:	a3ac      	add	r3, pc, #688	; (adr r3, 8012180 <__ieee754_rem_pio2+0x308>)
 8011ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed2:	f7ee f9f1 	bl	80002b8 <__aeabi_dsub>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	e9ca 2300 	strd	r2, r3, [sl]
 8011ede:	4620      	mov	r0, r4
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	f7ee f9e9 	bl	80002b8 <__aeabi_dsub>
 8011ee6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012180 <__ieee754_rem_pio2+0x308>)
 8011ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eec:	f7ee f9e4 	bl	80002b8 <__aeabi_dsub>
 8011ef0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011ef4:	f04f 0b01 	mov.w	fp, #1
 8011ef8:	4658      	mov	r0, fp
 8011efa:	b00b      	add	sp, #44	; 0x2c
 8011efc:	ecbd 8b02 	vpop	{d8}
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f04:	a3a0      	add	r3, pc, #640	; (adr r3, 8012188 <__ieee754_rem_pio2+0x310>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	f7ee f9d5 	bl	80002b8 <__aeabi_dsub>
 8011f0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012190 <__ieee754_rem_pio2+0x318>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	4604      	mov	r4, r0
 8011f16:	460d      	mov	r5, r1
 8011f18:	f7ee f9ce 	bl	80002b8 <__aeabi_dsub>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	460b      	mov	r3, r1
 8011f20:	e9ca 2300 	strd	r2, r3, [sl]
 8011f24:	4620      	mov	r0, r4
 8011f26:	4629      	mov	r1, r5
 8011f28:	f7ee f9c6 	bl	80002b8 <__aeabi_dsub>
 8011f2c:	a398      	add	r3, pc, #608	; (adr r3, 8012190 <__ieee754_rem_pio2+0x318>)
 8011f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f32:	e7db      	b.n	8011eec <__ieee754_rem_pio2+0x74>
 8011f34:	f7ee f9c2 	bl	80002bc <__adddf3>
 8011f38:	45b0      	cmp	r8, r6
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	460d      	mov	r5, r1
 8011f3e:	d016      	beq.n	8011f6e <__ieee754_rem_pio2+0xf6>
 8011f40:	a38f      	add	r3, pc, #572	; (adr r3, 8012180 <__ieee754_rem_pio2+0x308>)
 8011f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f46:	f7ee f9b9 	bl	80002bc <__adddf3>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	e9ca 2300 	strd	r2, r3, [sl]
 8011f52:	4620      	mov	r0, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	f7ee f9af 	bl	80002b8 <__aeabi_dsub>
 8011f5a:	a389      	add	r3, pc, #548	; (adr r3, 8012180 <__ieee754_rem_pio2+0x308>)
 8011f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f60:	f7ee f9ac 	bl	80002bc <__adddf3>
 8011f64:	f04f 3bff 	mov.w	fp, #4294967295
 8011f68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f6c:	e7c4      	b.n	8011ef8 <__ieee754_rem_pio2+0x80>
 8011f6e:	a386      	add	r3, pc, #536	; (adr r3, 8012188 <__ieee754_rem_pio2+0x310>)
 8011f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f74:	f7ee f9a2 	bl	80002bc <__adddf3>
 8011f78:	a385      	add	r3, pc, #532	; (adr r3, 8012190 <__ieee754_rem_pio2+0x318>)
 8011f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7e:	4604      	mov	r4, r0
 8011f80:	460d      	mov	r5, r1
 8011f82:	f7ee f99b 	bl	80002bc <__adddf3>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	e9ca 2300 	strd	r2, r3, [sl]
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4629      	mov	r1, r5
 8011f92:	f7ee f991 	bl	80002b8 <__aeabi_dsub>
 8011f96:	a37e      	add	r3, pc, #504	; (adr r3, 8012190 <__ieee754_rem_pio2+0x318>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	e7e0      	b.n	8011f60 <__ieee754_rem_pio2+0xe8>
 8011f9e:	4b87      	ldr	r3, [pc, #540]	; (80121bc <__ieee754_rem_pio2+0x344>)
 8011fa0:	4598      	cmp	r8, r3
 8011fa2:	f300 80d9 	bgt.w	8012158 <__ieee754_rem_pio2+0x2e0>
 8011fa6:	f001 f8cf 	bl	8013148 <fabs>
 8011faa:	ec55 4b10 	vmov	r4, r5, d0
 8011fae:	ee10 0a10 	vmov	r0, s0
 8011fb2:	a379      	add	r3, pc, #484	; (adr r3, 8012198 <__ieee754_rem_pio2+0x320>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ee fb35 	bl	8000628 <__aeabi_dmul>
 8011fbe:	4b80      	ldr	r3, [pc, #512]	; (80121c0 <__ieee754_rem_pio2+0x348>)
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f7ee f97b 	bl	80002bc <__adddf3>
 8011fc6:	f7ee fddf 	bl	8000b88 <__aeabi_d2iz>
 8011fca:	4683      	mov	fp, r0
 8011fcc:	f7ee fac2 	bl	8000554 <__aeabi_i2d>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	460b      	mov	r3, r1
 8011fd4:	ec43 2b18 	vmov	d8, r2, r3
 8011fd8:	a367      	add	r3, pc, #412	; (adr r3, 8012178 <__ieee754_rem_pio2+0x300>)
 8011fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fde:	f7ee fb23 	bl	8000628 <__aeabi_dmul>
 8011fe2:	4602      	mov	r2, r0
 8011fe4:	460b      	mov	r3, r1
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	4629      	mov	r1, r5
 8011fea:	f7ee f965 	bl	80002b8 <__aeabi_dsub>
 8011fee:	a364      	add	r3, pc, #400	; (adr r3, 8012180 <__ieee754_rem_pio2+0x308>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	460f      	mov	r7, r1
 8011ff8:	ec51 0b18 	vmov	r0, r1, d8
 8011ffc:	f7ee fb14 	bl	8000628 <__aeabi_dmul>
 8012000:	f1bb 0f1f 	cmp.w	fp, #31
 8012004:	4604      	mov	r4, r0
 8012006:	460d      	mov	r5, r1
 8012008:	dc0d      	bgt.n	8012026 <__ieee754_rem_pio2+0x1ae>
 801200a:	4b6e      	ldr	r3, [pc, #440]	; (80121c4 <__ieee754_rem_pio2+0x34c>)
 801200c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012014:	4543      	cmp	r3, r8
 8012016:	d006      	beq.n	8012026 <__ieee754_rem_pio2+0x1ae>
 8012018:	4622      	mov	r2, r4
 801201a:	462b      	mov	r3, r5
 801201c:	4630      	mov	r0, r6
 801201e:	4639      	mov	r1, r7
 8012020:	f7ee f94a 	bl	80002b8 <__aeabi_dsub>
 8012024:	e00f      	b.n	8012046 <__ieee754_rem_pio2+0x1ce>
 8012026:	462b      	mov	r3, r5
 8012028:	4622      	mov	r2, r4
 801202a:	4630      	mov	r0, r6
 801202c:	4639      	mov	r1, r7
 801202e:	f7ee f943 	bl	80002b8 <__aeabi_dsub>
 8012032:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012036:	9303      	str	r3, [sp, #12]
 8012038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801203c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012040:	f1b8 0f10 	cmp.w	r8, #16
 8012044:	dc02      	bgt.n	801204c <__ieee754_rem_pio2+0x1d4>
 8012046:	e9ca 0100 	strd	r0, r1, [sl]
 801204a:	e039      	b.n	80120c0 <__ieee754_rem_pio2+0x248>
 801204c:	a34e      	add	r3, pc, #312	; (adr r3, 8012188 <__ieee754_rem_pio2+0x310>)
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	ec51 0b18 	vmov	r0, r1, d8
 8012056:	f7ee fae7 	bl	8000628 <__aeabi_dmul>
 801205a:	4604      	mov	r4, r0
 801205c:	460d      	mov	r5, r1
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4630      	mov	r0, r6
 8012064:	4639      	mov	r1, r7
 8012066:	f7ee f927 	bl	80002b8 <__aeabi_dsub>
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	4680      	mov	r8, r0
 8012070:	4689      	mov	r9, r1
 8012072:	4630      	mov	r0, r6
 8012074:	4639      	mov	r1, r7
 8012076:	f7ee f91f 	bl	80002b8 <__aeabi_dsub>
 801207a:	4622      	mov	r2, r4
 801207c:	462b      	mov	r3, r5
 801207e:	f7ee f91b 	bl	80002b8 <__aeabi_dsub>
 8012082:	a343      	add	r3, pc, #268	; (adr r3, 8012190 <__ieee754_rem_pio2+0x318>)
 8012084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012088:	4604      	mov	r4, r0
 801208a:	460d      	mov	r5, r1
 801208c:	ec51 0b18 	vmov	r0, r1, d8
 8012090:	f7ee faca 	bl	8000628 <__aeabi_dmul>
 8012094:	4622      	mov	r2, r4
 8012096:	462b      	mov	r3, r5
 8012098:	f7ee f90e 	bl	80002b8 <__aeabi_dsub>
 801209c:	4602      	mov	r2, r0
 801209e:	460b      	mov	r3, r1
 80120a0:	4604      	mov	r4, r0
 80120a2:	460d      	mov	r5, r1
 80120a4:	4640      	mov	r0, r8
 80120a6:	4649      	mov	r1, r9
 80120a8:	f7ee f906 	bl	80002b8 <__aeabi_dsub>
 80120ac:	9a03      	ldr	r2, [sp, #12]
 80120ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80120b2:	1ad3      	subs	r3, r2, r3
 80120b4:	2b31      	cmp	r3, #49	; 0x31
 80120b6:	dc24      	bgt.n	8012102 <__ieee754_rem_pio2+0x28a>
 80120b8:	e9ca 0100 	strd	r0, r1, [sl]
 80120bc:	4646      	mov	r6, r8
 80120be:	464f      	mov	r7, r9
 80120c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80120c4:	4630      	mov	r0, r6
 80120c6:	4642      	mov	r2, r8
 80120c8:	464b      	mov	r3, r9
 80120ca:	4639      	mov	r1, r7
 80120cc:	f7ee f8f4 	bl	80002b8 <__aeabi_dsub>
 80120d0:	462b      	mov	r3, r5
 80120d2:	4622      	mov	r2, r4
 80120d4:	f7ee f8f0 	bl	80002b8 <__aeabi_dsub>
 80120d8:	9b02      	ldr	r3, [sp, #8]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120e0:	f6bf af0a 	bge.w	8011ef8 <__ieee754_rem_pio2+0x80>
 80120e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80120ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120f0:	f8ca 8000 	str.w	r8, [sl]
 80120f4:	f8ca 0008 	str.w	r0, [sl, #8]
 80120f8:	f8ca 300c 	str.w	r3, [sl, #12]
 80120fc:	f1cb 0b00 	rsb	fp, fp, #0
 8012100:	e6fa      	b.n	8011ef8 <__ieee754_rem_pio2+0x80>
 8012102:	a327      	add	r3, pc, #156	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x328>)
 8012104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012108:	ec51 0b18 	vmov	r0, r1, d8
 801210c:	f7ee fa8c 	bl	8000628 <__aeabi_dmul>
 8012110:	4604      	mov	r4, r0
 8012112:	460d      	mov	r5, r1
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	4640      	mov	r0, r8
 801211a:	4649      	mov	r1, r9
 801211c:	f7ee f8cc 	bl	80002b8 <__aeabi_dsub>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	4606      	mov	r6, r0
 8012126:	460f      	mov	r7, r1
 8012128:	4640      	mov	r0, r8
 801212a:	4649      	mov	r1, r9
 801212c:	f7ee f8c4 	bl	80002b8 <__aeabi_dsub>
 8012130:	4622      	mov	r2, r4
 8012132:	462b      	mov	r3, r5
 8012134:	f7ee f8c0 	bl	80002b8 <__aeabi_dsub>
 8012138:	a31b      	add	r3, pc, #108	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x330>)
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	4604      	mov	r4, r0
 8012140:	460d      	mov	r5, r1
 8012142:	ec51 0b18 	vmov	r0, r1, d8
 8012146:	f7ee fa6f 	bl	8000628 <__aeabi_dmul>
 801214a:	4622      	mov	r2, r4
 801214c:	462b      	mov	r3, r5
 801214e:	f7ee f8b3 	bl	80002b8 <__aeabi_dsub>
 8012152:	4604      	mov	r4, r0
 8012154:	460d      	mov	r5, r1
 8012156:	e75f      	b.n	8012018 <__ieee754_rem_pio2+0x1a0>
 8012158:	4b1b      	ldr	r3, [pc, #108]	; (80121c8 <__ieee754_rem_pio2+0x350>)
 801215a:	4598      	cmp	r8, r3
 801215c:	dd36      	ble.n	80121cc <__ieee754_rem_pio2+0x354>
 801215e:	ee10 2a10 	vmov	r2, s0
 8012162:	462b      	mov	r3, r5
 8012164:	4620      	mov	r0, r4
 8012166:	4629      	mov	r1, r5
 8012168:	f7ee f8a6 	bl	80002b8 <__aeabi_dsub>
 801216c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012170:	e9ca 0100 	strd	r0, r1, [sl]
 8012174:	e694      	b.n	8011ea0 <__ieee754_rem_pio2+0x28>
 8012176:	bf00      	nop
 8012178:	54400000 	.word	0x54400000
 801217c:	3ff921fb 	.word	0x3ff921fb
 8012180:	1a626331 	.word	0x1a626331
 8012184:	3dd0b461 	.word	0x3dd0b461
 8012188:	1a600000 	.word	0x1a600000
 801218c:	3dd0b461 	.word	0x3dd0b461
 8012190:	2e037073 	.word	0x2e037073
 8012194:	3ba3198a 	.word	0x3ba3198a
 8012198:	6dc9c883 	.word	0x6dc9c883
 801219c:	3fe45f30 	.word	0x3fe45f30
 80121a0:	2e000000 	.word	0x2e000000
 80121a4:	3ba3198a 	.word	0x3ba3198a
 80121a8:	252049c1 	.word	0x252049c1
 80121ac:	397b839a 	.word	0x397b839a
 80121b0:	3fe921fb 	.word	0x3fe921fb
 80121b4:	4002d97b 	.word	0x4002d97b
 80121b8:	3ff921fb 	.word	0x3ff921fb
 80121bc:	413921fb 	.word	0x413921fb
 80121c0:	3fe00000 	.word	0x3fe00000
 80121c4:	08013ec0 	.word	0x08013ec0
 80121c8:	7fefffff 	.word	0x7fefffff
 80121cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80121d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80121d4:	ee10 0a10 	vmov	r0, s0
 80121d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80121dc:	ee10 6a10 	vmov	r6, s0
 80121e0:	460f      	mov	r7, r1
 80121e2:	f7ee fcd1 	bl	8000b88 <__aeabi_d2iz>
 80121e6:	f7ee f9b5 	bl	8000554 <__aeabi_i2d>
 80121ea:	4602      	mov	r2, r0
 80121ec:	460b      	mov	r3, r1
 80121ee:	4630      	mov	r0, r6
 80121f0:	4639      	mov	r1, r7
 80121f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121f6:	f7ee f85f 	bl	80002b8 <__aeabi_dsub>
 80121fa:	4b23      	ldr	r3, [pc, #140]	; (8012288 <__ieee754_rem_pio2+0x410>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	f7ee fa13 	bl	8000628 <__aeabi_dmul>
 8012202:	460f      	mov	r7, r1
 8012204:	4606      	mov	r6, r0
 8012206:	f7ee fcbf 	bl	8000b88 <__aeabi_d2iz>
 801220a:	f7ee f9a3 	bl	8000554 <__aeabi_i2d>
 801220e:	4602      	mov	r2, r0
 8012210:	460b      	mov	r3, r1
 8012212:	4630      	mov	r0, r6
 8012214:	4639      	mov	r1, r7
 8012216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801221a:	f7ee f84d 	bl	80002b8 <__aeabi_dsub>
 801221e:	4b1a      	ldr	r3, [pc, #104]	; (8012288 <__ieee754_rem_pio2+0x410>)
 8012220:	2200      	movs	r2, #0
 8012222:	f7ee fa01 	bl	8000628 <__aeabi_dmul>
 8012226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801222a:	ad04      	add	r5, sp, #16
 801222c:	f04f 0803 	mov.w	r8, #3
 8012230:	46a9      	mov	r9, r5
 8012232:	2600      	movs	r6, #0
 8012234:	2700      	movs	r7, #0
 8012236:	4632      	mov	r2, r6
 8012238:	463b      	mov	r3, r7
 801223a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801223e:	46c3      	mov	fp, r8
 8012240:	3d08      	subs	r5, #8
 8012242:	f108 38ff 	add.w	r8, r8, #4294967295
 8012246:	f7ee fc57 	bl	8000af8 <__aeabi_dcmpeq>
 801224a:	2800      	cmp	r0, #0
 801224c:	d1f3      	bne.n	8012236 <__ieee754_rem_pio2+0x3be>
 801224e:	4b0f      	ldr	r3, [pc, #60]	; (801228c <__ieee754_rem_pio2+0x414>)
 8012250:	9301      	str	r3, [sp, #4]
 8012252:	2302      	movs	r3, #2
 8012254:	9300      	str	r3, [sp, #0]
 8012256:	4622      	mov	r2, r4
 8012258:	465b      	mov	r3, fp
 801225a:	4651      	mov	r1, sl
 801225c:	4648      	mov	r0, r9
 801225e:	f000 f993 	bl	8012588 <__kernel_rem_pio2>
 8012262:	9b02      	ldr	r3, [sp, #8]
 8012264:	2b00      	cmp	r3, #0
 8012266:	4683      	mov	fp, r0
 8012268:	f6bf ae46 	bge.w	8011ef8 <__ieee754_rem_pio2+0x80>
 801226c:	e9da 2100 	ldrd	r2, r1, [sl]
 8012270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012274:	e9ca 2300 	strd	r2, r3, [sl]
 8012278:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801227c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012280:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012284:	e73a      	b.n	80120fc <__ieee754_rem_pio2+0x284>
 8012286:	bf00      	nop
 8012288:	41700000 	.word	0x41700000
 801228c:	08013f40 	.word	0x08013f40

08012290 <__ieee754_sqrt>:
 8012290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012294:	ec55 4b10 	vmov	r4, r5, d0
 8012298:	4e55      	ldr	r6, [pc, #340]	; (80123f0 <__ieee754_sqrt+0x160>)
 801229a:	43ae      	bics	r6, r5
 801229c:	ee10 0a10 	vmov	r0, s0
 80122a0:	ee10 3a10 	vmov	r3, s0
 80122a4:	462a      	mov	r2, r5
 80122a6:	4629      	mov	r1, r5
 80122a8:	d110      	bne.n	80122cc <__ieee754_sqrt+0x3c>
 80122aa:	ee10 2a10 	vmov	r2, s0
 80122ae:	462b      	mov	r3, r5
 80122b0:	f7ee f9ba 	bl	8000628 <__aeabi_dmul>
 80122b4:	4602      	mov	r2, r0
 80122b6:	460b      	mov	r3, r1
 80122b8:	4620      	mov	r0, r4
 80122ba:	4629      	mov	r1, r5
 80122bc:	f7ed fffe 	bl	80002bc <__adddf3>
 80122c0:	4604      	mov	r4, r0
 80122c2:	460d      	mov	r5, r1
 80122c4:	ec45 4b10 	vmov	d0, r4, r5
 80122c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122cc:	2d00      	cmp	r5, #0
 80122ce:	dc10      	bgt.n	80122f2 <__ieee754_sqrt+0x62>
 80122d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122d4:	4330      	orrs	r0, r6
 80122d6:	d0f5      	beq.n	80122c4 <__ieee754_sqrt+0x34>
 80122d8:	b15d      	cbz	r5, 80122f2 <__ieee754_sqrt+0x62>
 80122da:	ee10 2a10 	vmov	r2, s0
 80122de:	462b      	mov	r3, r5
 80122e0:	ee10 0a10 	vmov	r0, s0
 80122e4:	f7ed ffe8 	bl	80002b8 <__aeabi_dsub>
 80122e8:	4602      	mov	r2, r0
 80122ea:	460b      	mov	r3, r1
 80122ec:	f7ee fac6 	bl	800087c <__aeabi_ddiv>
 80122f0:	e7e6      	b.n	80122c0 <__ieee754_sqrt+0x30>
 80122f2:	1512      	asrs	r2, r2, #20
 80122f4:	d074      	beq.n	80123e0 <__ieee754_sqrt+0x150>
 80122f6:	07d4      	lsls	r4, r2, #31
 80122f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80122fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012300:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012304:	bf5e      	ittt	pl
 8012306:	0fda      	lsrpl	r2, r3, #31
 8012308:	005b      	lslpl	r3, r3, #1
 801230a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801230e:	2400      	movs	r4, #0
 8012310:	0fda      	lsrs	r2, r3, #31
 8012312:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012316:	107f      	asrs	r7, r7, #1
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	2516      	movs	r5, #22
 801231c:	4620      	mov	r0, r4
 801231e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012322:	1886      	adds	r6, r0, r2
 8012324:	428e      	cmp	r6, r1
 8012326:	bfde      	ittt	le
 8012328:	1b89      	suble	r1, r1, r6
 801232a:	18b0      	addle	r0, r6, r2
 801232c:	18a4      	addle	r4, r4, r2
 801232e:	0049      	lsls	r1, r1, #1
 8012330:	3d01      	subs	r5, #1
 8012332:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012336:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801233a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801233e:	d1f0      	bne.n	8012322 <__ieee754_sqrt+0x92>
 8012340:	462a      	mov	r2, r5
 8012342:	f04f 0e20 	mov.w	lr, #32
 8012346:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801234a:	4281      	cmp	r1, r0
 801234c:	eb06 0c05 	add.w	ip, r6, r5
 8012350:	dc02      	bgt.n	8012358 <__ieee754_sqrt+0xc8>
 8012352:	d113      	bne.n	801237c <__ieee754_sqrt+0xec>
 8012354:	459c      	cmp	ip, r3
 8012356:	d811      	bhi.n	801237c <__ieee754_sqrt+0xec>
 8012358:	f1bc 0f00 	cmp.w	ip, #0
 801235c:	eb0c 0506 	add.w	r5, ip, r6
 8012360:	da43      	bge.n	80123ea <__ieee754_sqrt+0x15a>
 8012362:	2d00      	cmp	r5, #0
 8012364:	db41      	blt.n	80123ea <__ieee754_sqrt+0x15a>
 8012366:	f100 0801 	add.w	r8, r0, #1
 801236a:	1a09      	subs	r1, r1, r0
 801236c:	459c      	cmp	ip, r3
 801236e:	bf88      	it	hi
 8012370:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012374:	eba3 030c 	sub.w	r3, r3, ip
 8012378:	4432      	add	r2, r6
 801237a:	4640      	mov	r0, r8
 801237c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012380:	f1be 0e01 	subs.w	lr, lr, #1
 8012384:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012388:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801238c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012390:	d1db      	bne.n	801234a <__ieee754_sqrt+0xba>
 8012392:	430b      	orrs	r3, r1
 8012394:	d006      	beq.n	80123a4 <__ieee754_sqrt+0x114>
 8012396:	1c50      	adds	r0, r2, #1
 8012398:	bf13      	iteet	ne
 801239a:	3201      	addne	r2, #1
 801239c:	3401      	addeq	r4, #1
 801239e:	4672      	moveq	r2, lr
 80123a0:	f022 0201 	bicne.w	r2, r2, #1
 80123a4:	1063      	asrs	r3, r4, #1
 80123a6:	0852      	lsrs	r2, r2, #1
 80123a8:	07e1      	lsls	r1, r4, #31
 80123aa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80123ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80123b2:	bf48      	it	mi
 80123b4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80123b8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80123bc:	4614      	mov	r4, r2
 80123be:	e781      	b.n	80122c4 <__ieee754_sqrt+0x34>
 80123c0:	0ad9      	lsrs	r1, r3, #11
 80123c2:	3815      	subs	r0, #21
 80123c4:	055b      	lsls	r3, r3, #21
 80123c6:	2900      	cmp	r1, #0
 80123c8:	d0fa      	beq.n	80123c0 <__ieee754_sqrt+0x130>
 80123ca:	02cd      	lsls	r5, r1, #11
 80123cc:	d50a      	bpl.n	80123e4 <__ieee754_sqrt+0x154>
 80123ce:	f1c2 0420 	rsb	r4, r2, #32
 80123d2:	fa23 f404 	lsr.w	r4, r3, r4
 80123d6:	1e55      	subs	r5, r2, #1
 80123d8:	4093      	lsls	r3, r2
 80123da:	4321      	orrs	r1, r4
 80123dc:	1b42      	subs	r2, r0, r5
 80123de:	e78a      	b.n	80122f6 <__ieee754_sqrt+0x66>
 80123e0:	4610      	mov	r0, r2
 80123e2:	e7f0      	b.n	80123c6 <__ieee754_sqrt+0x136>
 80123e4:	0049      	lsls	r1, r1, #1
 80123e6:	3201      	adds	r2, #1
 80123e8:	e7ef      	b.n	80123ca <__ieee754_sqrt+0x13a>
 80123ea:	4680      	mov	r8, r0
 80123ec:	e7bd      	b.n	801236a <__ieee754_sqrt+0xda>
 80123ee:	bf00      	nop
 80123f0:	7ff00000 	.word	0x7ff00000
 80123f4:	00000000 	.word	0x00000000

080123f8 <__kernel_cos>:
 80123f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123fc:	ec57 6b10 	vmov	r6, r7, d0
 8012400:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012404:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012408:	ed8d 1b00 	vstr	d1, [sp]
 801240c:	da07      	bge.n	801241e <__kernel_cos+0x26>
 801240e:	ee10 0a10 	vmov	r0, s0
 8012412:	4639      	mov	r1, r7
 8012414:	f7ee fbb8 	bl	8000b88 <__aeabi_d2iz>
 8012418:	2800      	cmp	r0, #0
 801241a:	f000 8088 	beq.w	801252e <__kernel_cos+0x136>
 801241e:	4632      	mov	r2, r6
 8012420:	463b      	mov	r3, r7
 8012422:	4630      	mov	r0, r6
 8012424:	4639      	mov	r1, r7
 8012426:	f7ee f8ff 	bl	8000628 <__aeabi_dmul>
 801242a:	4b51      	ldr	r3, [pc, #324]	; (8012570 <__kernel_cos+0x178>)
 801242c:	2200      	movs	r2, #0
 801242e:	4604      	mov	r4, r0
 8012430:	460d      	mov	r5, r1
 8012432:	f7ee f8f9 	bl	8000628 <__aeabi_dmul>
 8012436:	a340      	add	r3, pc, #256	; (adr r3, 8012538 <__kernel_cos+0x140>)
 8012438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243c:	4682      	mov	sl, r0
 801243e:	468b      	mov	fp, r1
 8012440:	4620      	mov	r0, r4
 8012442:	4629      	mov	r1, r5
 8012444:	f7ee f8f0 	bl	8000628 <__aeabi_dmul>
 8012448:	a33d      	add	r3, pc, #244	; (adr r3, 8012540 <__kernel_cos+0x148>)
 801244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244e:	f7ed ff35 	bl	80002bc <__adddf3>
 8012452:	4622      	mov	r2, r4
 8012454:	462b      	mov	r3, r5
 8012456:	f7ee f8e7 	bl	8000628 <__aeabi_dmul>
 801245a:	a33b      	add	r3, pc, #236	; (adr r3, 8012548 <__kernel_cos+0x150>)
 801245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012460:	f7ed ff2a 	bl	80002b8 <__aeabi_dsub>
 8012464:	4622      	mov	r2, r4
 8012466:	462b      	mov	r3, r5
 8012468:	f7ee f8de 	bl	8000628 <__aeabi_dmul>
 801246c:	a338      	add	r3, pc, #224	; (adr r3, 8012550 <__kernel_cos+0x158>)
 801246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012472:	f7ed ff23 	bl	80002bc <__adddf3>
 8012476:	4622      	mov	r2, r4
 8012478:	462b      	mov	r3, r5
 801247a:	f7ee f8d5 	bl	8000628 <__aeabi_dmul>
 801247e:	a336      	add	r3, pc, #216	; (adr r3, 8012558 <__kernel_cos+0x160>)
 8012480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012484:	f7ed ff18 	bl	80002b8 <__aeabi_dsub>
 8012488:	4622      	mov	r2, r4
 801248a:	462b      	mov	r3, r5
 801248c:	f7ee f8cc 	bl	8000628 <__aeabi_dmul>
 8012490:	a333      	add	r3, pc, #204	; (adr r3, 8012560 <__kernel_cos+0x168>)
 8012492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012496:	f7ed ff11 	bl	80002bc <__adddf3>
 801249a:	4622      	mov	r2, r4
 801249c:	462b      	mov	r3, r5
 801249e:	f7ee f8c3 	bl	8000628 <__aeabi_dmul>
 80124a2:	4622      	mov	r2, r4
 80124a4:	462b      	mov	r3, r5
 80124a6:	f7ee f8bf 	bl	8000628 <__aeabi_dmul>
 80124aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124ae:	4604      	mov	r4, r0
 80124b0:	460d      	mov	r5, r1
 80124b2:	4630      	mov	r0, r6
 80124b4:	4639      	mov	r1, r7
 80124b6:	f7ee f8b7 	bl	8000628 <__aeabi_dmul>
 80124ba:	460b      	mov	r3, r1
 80124bc:	4602      	mov	r2, r0
 80124be:	4629      	mov	r1, r5
 80124c0:	4620      	mov	r0, r4
 80124c2:	f7ed fef9 	bl	80002b8 <__aeabi_dsub>
 80124c6:	4b2b      	ldr	r3, [pc, #172]	; (8012574 <__kernel_cos+0x17c>)
 80124c8:	4598      	cmp	r8, r3
 80124ca:	4606      	mov	r6, r0
 80124cc:	460f      	mov	r7, r1
 80124ce:	dc10      	bgt.n	80124f2 <__kernel_cos+0xfa>
 80124d0:	4602      	mov	r2, r0
 80124d2:	460b      	mov	r3, r1
 80124d4:	4650      	mov	r0, sl
 80124d6:	4659      	mov	r1, fp
 80124d8:	f7ed feee 	bl	80002b8 <__aeabi_dsub>
 80124dc:	460b      	mov	r3, r1
 80124de:	4926      	ldr	r1, [pc, #152]	; (8012578 <__kernel_cos+0x180>)
 80124e0:	4602      	mov	r2, r0
 80124e2:	2000      	movs	r0, #0
 80124e4:	f7ed fee8 	bl	80002b8 <__aeabi_dsub>
 80124e8:	ec41 0b10 	vmov	d0, r0, r1
 80124ec:	b003      	add	sp, #12
 80124ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f2:	4b22      	ldr	r3, [pc, #136]	; (801257c <__kernel_cos+0x184>)
 80124f4:	4920      	ldr	r1, [pc, #128]	; (8012578 <__kernel_cos+0x180>)
 80124f6:	4598      	cmp	r8, r3
 80124f8:	bfcc      	ite	gt
 80124fa:	4d21      	ldrgt	r5, [pc, #132]	; (8012580 <__kernel_cos+0x188>)
 80124fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012500:	2400      	movs	r4, #0
 8012502:	4622      	mov	r2, r4
 8012504:	462b      	mov	r3, r5
 8012506:	2000      	movs	r0, #0
 8012508:	f7ed fed6 	bl	80002b8 <__aeabi_dsub>
 801250c:	4622      	mov	r2, r4
 801250e:	4680      	mov	r8, r0
 8012510:	4689      	mov	r9, r1
 8012512:	462b      	mov	r3, r5
 8012514:	4650      	mov	r0, sl
 8012516:	4659      	mov	r1, fp
 8012518:	f7ed fece 	bl	80002b8 <__aeabi_dsub>
 801251c:	4632      	mov	r2, r6
 801251e:	463b      	mov	r3, r7
 8012520:	f7ed feca 	bl	80002b8 <__aeabi_dsub>
 8012524:	4602      	mov	r2, r0
 8012526:	460b      	mov	r3, r1
 8012528:	4640      	mov	r0, r8
 801252a:	4649      	mov	r1, r9
 801252c:	e7da      	b.n	80124e4 <__kernel_cos+0xec>
 801252e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012568 <__kernel_cos+0x170>
 8012532:	e7db      	b.n	80124ec <__kernel_cos+0xf4>
 8012534:	f3af 8000 	nop.w
 8012538:	be8838d4 	.word	0xbe8838d4
 801253c:	bda8fae9 	.word	0xbda8fae9
 8012540:	bdb4b1c4 	.word	0xbdb4b1c4
 8012544:	3e21ee9e 	.word	0x3e21ee9e
 8012548:	809c52ad 	.word	0x809c52ad
 801254c:	3e927e4f 	.word	0x3e927e4f
 8012550:	19cb1590 	.word	0x19cb1590
 8012554:	3efa01a0 	.word	0x3efa01a0
 8012558:	16c15177 	.word	0x16c15177
 801255c:	3f56c16c 	.word	0x3f56c16c
 8012560:	5555554c 	.word	0x5555554c
 8012564:	3fa55555 	.word	0x3fa55555
 8012568:	00000000 	.word	0x00000000
 801256c:	3ff00000 	.word	0x3ff00000
 8012570:	3fe00000 	.word	0x3fe00000
 8012574:	3fd33332 	.word	0x3fd33332
 8012578:	3ff00000 	.word	0x3ff00000
 801257c:	3fe90000 	.word	0x3fe90000
 8012580:	3fd20000 	.word	0x3fd20000
 8012584:	00000000 	.word	0x00000000

08012588 <__kernel_rem_pio2>:
 8012588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258c:	ed2d 8b02 	vpush	{d8}
 8012590:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012594:	f112 0f14 	cmn.w	r2, #20
 8012598:	9308      	str	r3, [sp, #32]
 801259a:	9101      	str	r1, [sp, #4]
 801259c:	4bc4      	ldr	r3, [pc, #784]	; (80128b0 <__kernel_rem_pio2+0x328>)
 801259e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80125a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80125a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125a6:	9302      	str	r3, [sp, #8]
 80125a8:	9b08      	ldr	r3, [sp, #32]
 80125aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80125ae:	bfa8      	it	ge
 80125b0:	1ed4      	subge	r4, r2, #3
 80125b2:	9306      	str	r3, [sp, #24]
 80125b4:	bfb2      	itee	lt
 80125b6:	2400      	movlt	r4, #0
 80125b8:	2318      	movge	r3, #24
 80125ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80125be:	f06f 0317 	mvn.w	r3, #23
 80125c2:	fb04 3303 	mla	r3, r4, r3, r3
 80125c6:	eb03 0a02 	add.w	sl, r3, r2
 80125ca:	9b02      	ldr	r3, [sp, #8]
 80125cc:	9a06      	ldr	r2, [sp, #24]
 80125ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80128a0 <__kernel_rem_pio2+0x318>
 80125d2:	eb03 0802 	add.w	r8, r3, r2
 80125d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80125d8:	1aa7      	subs	r7, r4, r2
 80125da:	ae22      	add	r6, sp, #136	; 0x88
 80125dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80125e0:	2500      	movs	r5, #0
 80125e2:	4545      	cmp	r5, r8
 80125e4:	dd13      	ble.n	801260e <__kernel_rem_pio2+0x86>
 80125e6:	9b08      	ldr	r3, [sp, #32]
 80125e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80128a0 <__kernel_rem_pio2+0x318>
 80125ec:	aa22      	add	r2, sp, #136	; 0x88
 80125ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80125f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80125f6:	f04f 0800 	mov.w	r8, #0
 80125fa:	9b02      	ldr	r3, [sp, #8]
 80125fc:	4598      	cmp	r8, r3
 80125fe:	dc2f      	bgt.n	8012660 <__kernel_rem_pio2+0xd8>
 8012600:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012604:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012608:	462f      	mov	r7, r5
 801260a:	2600      	movs	r6, #0
 801260c:	e01b      	b.n	8012646 <__kernel_rem_pio2+0xbe>
 801260e:	42ef      	cmn	r7, r5
 8012610:	d407      	bmi.n	8012622 <__kernel_rem_pio2+0x9a>
 8012612:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012616:	f7ed ff9d 	bl	8000554 <__aeabi_i2d>
 801261a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801261e:	3501      	adds	r5, #1
 8012620:	e7df      	b.n	80125e2 <__kernel_rem_pio2+0x5a>
 8012622:	ec51 0b18 	vmov	r0, r1, d8
 8012626:	e7f8      	b.n	801261a <__kernel_rem_pio2+0x92>
 8012628:	e9d7 2300 	ldrd	r2, r3, [r7]
 801262c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012630:	f7ed fffa 	bl	8000628 <__aeabi_dmul>
 8012634:	4602      	mov	r2, r0
 8012636:	460b      	mov	r3, r1
 8012638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801263c:	f7ed fe3e 	bl	80002bc <__adddf3>
 8012640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012644:	3601      	adds	r6, #1
 8012646:	9b06      	ldr	r3, [sp, #24]
 8012648:	429e      	cmp	r6, r3
 801264a:	f1a7 0708 	sub.w	r7, r7, #8
 801264e:	ddeb      	ble.n	8012628 <__kernel_rem_pio2+0xa0>
 8012650:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012654:	f108 0801 	add.w	r8, r8, #1
 8012658:	ecab 7b02 	vstmia	fp!, {d7}
 801265c:	3508      	adds	r5, #8
 801265e:	e7cc      	b.n	80125fa <__kernel_rem_pio2+0x72>
 8012660:	9b02      	ldr	r3, [sp, #8]
 8012662:	aa0e      	add	r2, sp, #56	; 0x38
 8012664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012668:	930d      	str	r3, [sp, #52]	; 0x34
 801266a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801266c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012670:	9c02      	ldr	r4, [sp, #8]
 8012672:	930c      	str	r3, [sp, #48]	; 0x30
 8012674:	00e3      	lsls	r3, r4, #3
 8012676:	930a      	str	r3, [sp, #40]	; 0x28
 8012678:	ab9a      	add	r3, sp, #616	; 0x268
 801267a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801267e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012682:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8012686:	ab72      	add	r3, sp, #456	; 0x1c8
 8012688:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801268c:	46c3      	mov	fp, r8
 801268e:	46a1      	mov	r9, r4
 8012690:	f1b9 0f00 	cmp.w	r9, #0
 8012694:	f1a5 0508 	sub.w	r5, r5, #8
 8012698:	dc77      	bgt.n	801278a <__kernel_rem_pio2+0x202>
 801269a:	ec47 6b10 	vmov	d0, r6, r7
 801269e:	4650      	mov	r0, sl
 80126a0:	f000 fdee 	bl	8013280 <scalbn>
 80126a4:	ec57 6b10 	vmov	r6, r7, d0
 80126a8:	2200      	movs	r2, #0
 80126aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80126ae:	ee10 0a10 	vmov	r0, s0
 80126b2:	4639      	mov	r1, r7
 80126b4:	f7ed ffb8 	bl	8000628 <__aeabi_dmul>
 80126b8:	ec41 0b10 	vmov	d0, r0, r1
 80126bc:	f000 fd58 	bl	8013170 <floor>
 80126c0:	4b7c      	ldr	r3, [pc, #496]	; (80128b4 <__kernel_rem_pio2+0x32c>)
 80126c2:	ec51 0b10 	vmov	r0, r1, d0
 80126c6:	2200      	movs	r2, #0
 80126c8:	f7ed ffae 	bl	8000628 <__aeabi_dmul>
 80126cc:	4602      	mov	r2, r0
 80126ce:	460b      	mov	r3, r1
 80126d0:	4630      	mov	r0, r6
 80126d2:	4639      	mov	r1, r7
 80126d4:	f7ed fdf0 	bl	80002b8 <__aeabi_dsub>
 80126d8:	460f      	mov	r7, r1
 80126da:	4606      	mov	r6, r0
 80126dc:	f7ee fa54 	bl	8000b88 <__aeabi_d2iz>
 80126e0:	9004      	str	r0, [sp, #16]
 80126e2:	f7ed ff37 	bl	8000554 <__aeabi_i2d>
 80126e6:	4602      	mov	r2, r0
 80126e8:	460b      	mov	r3, r1
 80126ea:	4630      	mov	r0, r6
 80126ec:	4639      	mov	r1, r7
 80126ee:	f7ed fde3 	bl	80002b8 <__aeabi_dsub>
 80126f2:	f1ba 0f00 	cmp.w	sl, #0
 80126f6:	4606      	mov	r6, r0
 80126f8:	460f      	mov	r7, r1
 80126fa:	dd6d      	ble.n	80127d8 <__kernel_rem_pio2+0x250>
 80126fc:	1e62      	subs	r2, r4, #1
 80126fe:	ab0e      	add	r3, sp, #56	; 0x38
 8012700:	9d04      	ldr	r5, [sp, #16]
 8012702:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012706:	f1ca 0118 	rsb	r1, sl, #24
 801270a:	fa40 f301 	asr.w	r3, r0, r1
 801270e:	441d      	add	r5, r3
 8012710:	408b      	lsls	r3, r1
 8012712:	1ac0      	subs	r0, r0, r3
 8012714:	ab0e      	add	r3, sp, #56	; 0x38
 8012716:	9504      	str	r5, [sp, #16]
 8012718:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801271c:	f1ca 0317 	rsb	r3, sl, #23
 8012720:	fa40 fb03 	asr.w	fp, r0, r3
 8012724:	f1bb 0f00 	cmp.w	fp, #0
 8012728:	dd65      	ble.n	80127f6 <__kernel_rem_pio2+0x26e>
 801272a:	9b04      	ldr	r3, [sp, #16]
 801272c:	2200      	movs	r2, #0
 801272e:	3301      	adds	r3, #1
 8012730:	9304      	str	r3, [sp, #16]
 8012732:	4615      	mov	r5, r2
 8012734:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012738:	4294      	cmp	r4, r2
 801273a:	f300 809c 	bgt.w	8012876 <__kernel_rem_pio2+0x2ee>
 801273e:	f1ba 0f00 	cmp.w	sl, #0
 8012742:	dd07      	ble.n	8012754 <__kernel_rem_pio2+0x1cc>
 8012744:	f1ba 0f01 	cmp.w	sl, #1
 8012748:	f000 80c0 	beq.w	80128cc <__kernel_rem_pio2+0x344>
 801274c:	f1ba 0f02 	cmp.w	sl, #2
 8012750:	f000 80c6 	beq.w	80128e0 <__kernel_rem_pio2+0x358>
 8012754:	f1bb 0f02 	cmp.w	fp, #2
 8012758:	d14d      	bne.n	80127f6 <__kernel_rem_pio2+0x26e>
 801275a:	4632      	mov	r2, r6
 801275c:	463b      	mov	r3, r7
 801275e:	4956      	ldr	r1, [pc, #344]	; (80128b8 <__kernel_rem_pio2+0x330>)
 8012760:	2000      	movs	r0, #0
 8012762:	f7ed fda9 	bl	80002b8 <__aeabi_dsub>
 8012766:	4606      	mov	r6, r0
 8012768:	460f      	mov	r7, r1
 801276a:	2d00      	cmp	r5, #0
 801276c:	d043      	beq.n	80127f6 <__kernel_rem_pio2+0x26e>
 801276e:	4650      	mov	r0, sl
 8012770:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80128a8 <__kernel_rem_pio2+0x320>
 8012774:	f000 fd84 	bl	8013280 <scalbn>
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	ec53 2b10 	vmov	r2, r3, d0
 8012780:	f7ed fd9a 	bl	80002b8 <__aeabi_dsub>
 8012784:	4606      	mov	r6, r0
 8012786:	460f      	mov	r7, r1
 8012788:	e035      	b.n	80127f6 <__kernel_rem_pio2+0x26e>
 801278a:	4b4c      	ldr	r3, [pc, #304]	; (80128bc <__kernel_rem_pio2+0x334>)
 801278c:	2200      	movs	r2, #0
 801278e:	4630      	mov	r0, r6
 8012790:	4639      	mov	r1, r7
 8012792:	f7ed ff49 	bl	8000628 <__aeabi_dmul>
 8012796:	f7ee f9f7 	bl	8000b88 <__aeabi_d2iz>
 801279a:	f7ed fedb 	bl	8000554 <__aeabi_i2d>
 801279e:	4602      	mov	r2, r0
 80127a0:	460b      	mov	r3, r1
 80127a2:	ec43 2b18 	vmov	d8, r2, r3
 80127a6:	4b46      	ldr	r3, [pc, #280]	; (80128c0 <__kernel_rem_pio2+0x338>)
 80127a8:	2200      	movs	r2, #0
 80127aa:	f7ed ff3d 	bl	8000628 <__aeabi_dmul>
 80127ae:	4602      	mov	r2, r0
 80127b0:	460b      	mov	r3, r1
 80127b2:	4630      	mov	r0, r6
 80127b4:	4639      	mov	r1, r7
 80127b6:	f7ed fd7f 	bl	80002b8 <__aeabi_dsub>
 80127ba:	f7ee f9e5 	bl	8000b88 <__aeabi_d2iz>
 80127be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80127c2:	f84b 0b04 	str.w	r0, [fp], #4
 80127c6:	ec51 0b18 	vmov	r0, r1, d8
 80127ca:	f7ed fd77 	bl	80002bc <__adddf3>
 80127ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80127d2:	4606      	mov	r6, r0
 80127d4:	460f      	mov	r7, r1
 80127d6:	e75b      	b.n	8012690 <__kernel_rem_pio2+0x108>
 80127d8:	d106      	bne.n	80127e8 <__kernel_rem_pio2+0x260>
 80127da:	1e63      	subs	r3, r4, #1
 80127dc:	aa0e      	add	r2, sp, #56	; 0x38
 80127de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80127e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80127e6:	e79d      	b.n	8012724 <__kernel_rem_pio2+0x19c>
 80127e8:	4b36      	ldr	r3, [pc, #216]	; (80128c4 <__kernel_rem_pio2+0x33c>)
 80127ea:	2200      	movs	r2, #0
 80127ec:	f7ee f9a2 	bl	8000b34 <__aeabi_dcmpge>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d13d      	bne.n	8012870 <__kernel_rem_pio2+0x2e8>
 80127f4:	4683      	mov	fp, r0
 80127f6:	2200      	movs	r2, #0
 80127f8:	2300      	movs	r3, #0
 80127fa:	4630      	mov	r0, r6
 80127fc:	4639      	mov	r1, r7
 80127fe:	f7ee f97b 	bl	8000af8 <__aeabi_dcmpeq>
 8012802:	2800      	cmp	r0, #0
 8012804:	f000 80c0 	beq.w	8012988 <__kernel_rem_pio2+0x400>
 8012808:	1e65      	subs	r5, r4, #1
 801280a:	462b      	mov	r3, r5
 801280c:	2200      	movs	r2, #0
 801280e:	9902      	ldr	r1, [sp, #8]
 8012810:	428b      	cmp	r3, r1
 8012812:	da6c      	bge.n	80128ee <__kernel_rem_pio2+0x366>
 8012814:	2a00      	cmp	r2, #0
 8012816:	f000 8089 	beq.w	801292c <__kernel_rem_pio2+0x3a4>
 801281a:	ab0e      	add	r3, sp, #56	; 0x38
 801281c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012820:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012824:	2b00      	cmp	r3, #0
 8012826:	f000 80ad 	beq.w	8012984 <__kernel_rem_pio2+0x3fc>
 801282a:	4650      	mov	r0, sl
 801282c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80128a8 <__kernel_rem_pio2+0x320>
 8012830:	f000 fd26 	bl	8013280 <scalbn>
 8012834:	ab9a      	add	r3, sp, #616	; 0x268
 8012836:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801283a:	ec57 6b10 	vmov	r6, r7, d0
 801283e:	00ec      	lsls	r4, r5, #3
 8012840:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8012844:	46aa      	mov	sl, r5
 8012846:	f1ba 0f00 	cmp.w	sl, #0
 801284a:	f280 80d6 	bge.w	80129fa <__kernel_rem_pio2+0x472>
 801284e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80128a0 <__kernel_rem_pio2+0x318>
 8012852:	462e      	mov	r6, r5
 8012854:	2e00      	cmp	r6, #0
 8012856:	f2c0 8104 	blt.w	8012a62 <__kernel_rem_pio2+0x4da>
 801285a:	ab72      	add	r3, sp, #456	; 0x1c8
 801285c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012860:	f8df a064 	ldr.w	sl, [pc, #100]	; 80128c8 <__kernel_rem_pio2+0x340>
 8012864:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012868:	f04f 0800 	mov.w	r8, #0
 801286c:	1baf      	subs	r7, r5, r6
 801286e:	e0ea      	b.n	8012a46 <__kernel_rem_pio2+0x4be>
 8012870:	f04f 0b02 	mov.w	fp, #2
 8012874:	e759      	b.n	801272a <__kernel_rem_pio2+0x1a2>
 8012876:	f8d8 3000 	ldr.w	r3, [r8]
 801287a:	b955      	cbnz	r5, 8012892 <__kernel_rem_pio2+0x30a>
 801287c:	b123      	cbz	r3, 8012888 <__kernel_rem_pio2+0x300>
 801287e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012882:	f8c8 3000 	str.w	r3, [r8]
 8012886:	2301      	movs	r3, #1
 8012888:	3201      	adds	r2, #1
 801288a:	f108 0804 	add.w	r8, r8, #4
 801288e:	461d      	mov	r5, r3
 8012890:	e752      	b.n	8012738 <__kernel_rem_pio2+0x1b0>
 8012892:	1acb      	subs	r3, r1, r3
 8012894:	f8c8 3000 	str.w	r3, [r8]
 8012898:	462b      	mov	r3, r5
 801289a:	e7f5      	b.n	8012888 <__kernel_rem_pio2+0x300>
 801289c:	f3af 8000 	nop.w
	...
 80128ac:	3ff00000 	.word	0x3ff00000
 80128b0:	08014088 	.word	0x08014088
 80128b4:	40200000 	.word	0x40200000
 80128b8:	3ff00000 	.word	0x3ff00000
 80128bc:	3e700000 	.word	0x3e700000
 80128c0:	41700000 	.word	0x41700000
 80128c4:	3fe00000 	.word	0x3fe00000
 80128c8:	08014048 	.word	0x08014048
 80128cc:	1e62      	subs	r2, r4, #1
 80128ce:	ab0e      	add	r3, sp, #56	; 0x38
 80128d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80128d8:	a90e      	add	r1, sp, #56	; 0x38
 80128da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80128de:	e739      	b.n	8012754 <__kernel_rem_pio2+0x1cc>
 80128e0:	1e62      	subs	r2, r4, #1
 80128e2:	ab0e      	add	r3, sp, #56	; 0x38
 80128e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80128ec:	e7f4      	b.n	80128d8 <__kernel_rem_pio2+0x350>
 80128ee:	a90e      	add	r1, sp, #56	; 0x38
 80128f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80128f4:	3b01      	subs	r3, #1
 80128f6:	430a      	orrs	r2, r1
 80128f8:	e789      	b.n	801280e <__kernel_rem_pio2+0x286>
 80128fa:	3301      	adds	r3, #1
 80128fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012900:	2900      	cmp	r1, #0
 8012902:	d0fa      	beq.n	80128fa <__kernel_rem_pio2+0x372>
 8012904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012906:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801290a:	446a      	add	r2, sp
 801290c:	3a98      	subs	r2, #152	; 0x98
 801290e:	920a      	str	r2, [sp, #40]	; 0x28
 8012910:	9a08      	ldr	r2, [sp, #32]
 8012912:	18e3      	adds	r3, r4, r3
 8012914:	18a5      	adds	r5, r4, r2
 8012916:	aa22      	add	r2, sp, #136	; 0x88
 8012918:	f104 0801 	add.w	r8, r4, #1
 801291c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012920:	9304      	str	r3, [sp, #16]
 8012922:	9b04      	ldr	r3, [sp, #16]
 8012924:	4543      	cmp	r3, r8
 8012926:	da04      	bge.n	8012932 <__kernel_rem_pio2+0x3aa>
 8012928:	461c      	mov	r4, r3
 801292a:	e6a3      	b.n	8012674 <__kernel_rem_pio2+0xec>
 801292c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801292e:	2301      	movs	r3, #1
 8012930:	e7e4      	b.n	80128fc <__kernel_rem_pio2+0x374>
 8012932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012934:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012938:	f7ed fe0c 	bl	8000554 <__aeabi_i2d>
 801293c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012942:	46ab      	mov	fp, r5
 8012944:	461c      	mov	r4, r3
 8012946:	f04f 0900 	mov.w	r9, #0
 801294a:	2600      	movs	r6, #0
 801294c:	2700      	movs	r7, #0
 801294e:	9b06      	ldr	r3, [sp, #24]
 8012950:	4599      	cmp	r9, r3
 8012952:	dd06      	ble.n	8012962 <__kernel_rem_pio2+0x3da>
 8012954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012956:	e8e3 6702 	strd	r6, r7, [r3], #8
 801295a:	f108 0801 	add.w	r8, r8, #1
 801295e:	930a      	str	r3, [sp, #40]	; 0x28
 8012960:	e7df      	b.n	8012922 <__kernel_rem_pio2+0x39a>
 8012962:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012966:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801296a:	f7ed fe5d 	bl	8000628 <__aeabi_dmul>
 801296e:	4602      	mov	r2, r0
 8012970:	460b      	mov	r3, r1
 8012972:	4630      	mov	r0, r6
 8012974:	4639      	mov	r1, r7
 8012976:	f7ed fca1 	bl	80002bc <__adddf3>
 801297a:	f109 0901 	add.w	r9, r9, #1
 801297e:	4606      	mov	r6, r0
 8012980:	460f      	mov	r7, r1
 8012982:	e7e4      	b.n	801294e <__kernel_rem_pio2+0x3c6>
 8012984:	3d01      	subs	r5, #1
 8012986:	e748      	b.n	801281a <__kernel_rem_pio2+0x292>
 8012988:	ec47 6b10 	vmov	d0, r6, r7
 801298c:	f1ca 0000 	rsb	r0, sl, #0
 8012990:	f000 fc76 	bl	8013280 <scalbn>
 8012994:	ec57 6b10 	vmov	r6, r7, d0
 8012998:	4ba0      	ldr	r3, [pc, #640]	; (8012c1c <__kernel_rem_pio2+0x694>)
 801299a:	ee10 0a10 	vmov	r0, s0
 801299e:	2200      	movs	r2, #0
 80129a0:	4639      	mov	r1, r7
 80129a2:	f7ee f8c7 	bl	8000b34 <__aeabi_dcmpge>
 80129a6:	b1f8      	cbz	r0, 80129e8 <__kernel_rem_pio2+0x460>
 80129a8:	4b9d      	ldr	r3, [pc, #628]	; (8012c20 <__kernel_rem_pio2+0x698>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	4630      	mov	r0, r6
 80129ae:	4639      	mov	r1, r7
 80129b0:	f7ed fe3a 	bl	8000628 <__aeabi_dmul>
 80129b4:	f7ee f8e8 	bl	8000b88 <__aeabi_d2iz>
 80129b8:	4680      	mov	r8, r0
 80129ba:	f7ed fdcb 	bl	8000554 <__aeabi_i2d>
 80129be:	4b97      	ldr	r3, [pc, #604]	; (8012c1c <__kernel_rem_pio2+0x694>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	f7ed fe31 	bl	8000628 <__aeabi_dmul>
 80129c6:	460b      	mov	r3, r1
 80129c8:	4602      	mov	r2, r0
 80129ca:	4639      	mov	r1, r7
 80129cc:	4630      	mov	r0, r6
 80129ce:	f7ed fc73 	bl	80002b8 <__aeabi_dsub>
 80129d2:	f7ee f8d9 	bl	8000b88 <__aeabi_d2iz>
 80129d6:	1c65      	adds	r5, r4, #1
 80129d8:	ab0e      	add	r3, sp, #56	; 0x38
 80129da:	f10a 0a18 	add.w	sl, sl, #24
 80129de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80129e6:	e720      	b.n	801282a <__kernel_rem_pio2+0x2a2>
 80129e8:	4630      	mov	r0, r6
 80129ea:	4639      	mov	r1, r7
 80129ec:	f7ee f8cc 	bl	8000b88 <__aeabi_d2iz>
 80129f0:	ab0e      	add	r3, sp, #56	; 0x38
 80129f2:	4625      	mov	r5, r4
 80129f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129f8:	e717      	b.n	801282a <__kernel_rem_pio2+0x2a2>
 80129fa:	ab0e      	add	r3, sp, #56	; 0x38
 80129fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012a00:	f7ed fda8 	bl	8000554 <__aeabi_i2d>
 8012a04:	4632      	mov	r2, r6
 8012a06:	463b      	mov	r3, r7
 8012a08:	f7ed fe0e 	bl	8000628 <__aeabi_dmul>
 8012a0c:	4b84      	ldr	r3, [pc, #528]	; (8012c20 <__kernel_rem_pio2+0x698>)
 8012a0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012a12:	2200      	movs	r2, #0
 8012a14:	4630      	mov	r0, r6
 8012a16:	4639      	mov	r1, r7
 8012a18:	f7ed fe06 	bl	8000628 <__aeabi_dmul>
 8012a1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a20:	4606      	mov	r6, r0
 8012a22:	460f      	mov	r7, r1
 8012a24:	e70f      	b.n	8012846 <__kernel_rem_pio2+0x2be>
 8012a26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8012a2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8012a2e:	f7ed fdfb 	bl	8000628 <__aeabi_dmul>
 8012a32:	4602      	mov	r2, r0
 8012a34:	460b      	mov	r3, r1
 8012a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a3a:	f7ed fc3f 	bl	80002bc <__adddf3>
 8012a3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a42:	f108 0801 	add.w	r8, r8, #1
 8012a46:	9b02      	ldr	r3, [sp, #8]
 8012a48:	4598      	cmp	r8, r3
 8012a4a:	dc01      	bgt.n	8012a50 <__kernel_rem_pio2+0x4c8>
 8012a4c:	45b8      	cmp	r8, r7
 8012a4e:	ddea      	ble.n	8012a26 <__kernel_rem_pio2+0x49e>
 8012a50:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012a54:	ab4a      	add	r3, sp, #296	; 0x128
 8012a56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012a5a:	ed87 7b00 	vstr	d7, [r7]
 8012a5e:	3e01      	subs	r6, #1
 8012a60:	e6f8      	b.n	8012854 <__kernel_rem_pio2+0x2cc>
 8012a62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a64:	2b02      	cmp	r3, #2
 8012a66:	dc0b      	bgt.n	8012a80 <__kernel_rem_pio2+0x4f8>
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	dc35      	bgt.n	8012ad8 <__kernel_rem_pio2+0x550>
 8012a6c:	d059      	beq.n	8012b22 <__kernel_rem_pio2+0x59a>
 8012a6e:	9b04      	ldr	r3, [sp, #16]
 8012a70:	f003 0007 	and.w	r0, r3, #7
 8012a74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012a78:	ecbd 8b02 	vpop	{d8}
 8012a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a82:	2b03      	cmp	r3, #3
 8012a84:	d1f3      	bne.n	8012a6e <__kernel_rem_pio2+0x4e6>
 8012a86:	ab4a      	add	r3, sp, #296	; 0x128
 8012a88:	4423      	add	r3, r4
 8012a8a:	9306      	str	r3, [sp, #24]
 8012a8c:	461c      	mov	r4, r3
 8012a8e:	469a      	mov	sl, r3
 8012a90:	9502      	str	r5, [sp, #8]
 8012a92:	9b02      	ldr	r3, [sp, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f1aa 0a08 	sub.w	sl, sl, #8
 8012a9a:	dc6b      	bgt.n	8012b74 <__kernel_rem_pio2+0x5ec>
 8012a9c:	46aa      	mov	sl, r5
 8012a9e:	f1ba 0f01 	cmp.w	sl, #1
 8012aa2:	f1a4 0408 	sub.w	r4, r4, #8
 8012aa6:	f300 8085 	bgt.w	8012bb4 <__kernel_rem_pio2+0x62c>
 8012aaa:	9c06      	ldr	r4, [sp, #24]
 8012aac:	2000      	movs	r0, #0
 8012aae:	3408      	adds	r4, #8
 8012ab0:	2100      	movs	r1, #0
 8012ab2:	2d01      	cmp	r5, #1
 8012ab4:	f300 809d 	bgt.w	8012bf2 <__kernel_rem_pio2+0x66a>
 8012ab8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012abc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012ac0:	f1bb 0f00 	cmp.w	fp, #0
 8012ac4:	f040 809b 	bne.w	8012bfe <__kernel_rem_pio2+0x676>
 8012ac8:	9b01      	ldr	r3, [sp, #4]
 8012aca:	e9c3 5600 	strd	r5, r6, [r3]
 8012ace:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012ad2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012ad6:	e7ca      	b.n	8012a6e <__kernel_rem_pio2+0x4e6>
 8012ad8:	3408      	adds	r4, #8
 8012ada:	ab4a      	add	r3, sp, #296	; 0x128
 8012adc:	441c      	add	r4, r3
 8012ade:	462e      	mov	r6, r5
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	2e00      	cmp	r6, #0
 8012ae6:	da36      	bge.n	8012b56 <__kernel_rem_pio2+0x5ce>
 8012ae8:	f1bb 0f00 	cmp.w	fp, #0
 8012aec:	d039      	beq.n	8012b62 <__kernel_rem_pio2+0x5da>
 8012aee:	4602      	mov	r2, r0
 8012af0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012af4:	9c01      	ldr	r4, [sp, #4]
 8012af6:	e9c4 2300 	strd	r2, r3, [r4]
 8012afa:	4602      	mov	r2, r0
 8012afc:	460b      	mov	r3, r1
 8012afe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012b02:	f7ed fbd9 	bl	80002b8 <__aeabi_dsub>
 8012b06:	ae4c      	add	r6, sp, #304	; 0x130
 8012b08:	2401      	movs	r4, #1
 8012b0a:	42a5      	cmp	r5, r4
 8012b0c:	da2c      	bge.n	8012b68 <__kernel_rem_pio2+0x5e0>
 8012b0e:	f1bb 0f00 	cmp.w	fp, #0
 8012b12:	d002      	beq.n	8012b1a <__kernel_rem_pio2+0x592>
 8012b14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b18:	4619      	mov	r1, r3
 8012b1a:	9b01      	ldr	r3, [sp, #4]
 8012b1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012b20:	e7a5      	b.n	8012a6e <__kernel_rem_pio2+0x4e6>
 8012b22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012b26:	eb0d 0403 	add.w	r4, sp, r3
 8012b2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012b2e:	2000      	movs	r0, #0
 8012b30:	2100      	movs	r1, #0
 8012b32:	2d00      	cmp	r5, #0
 8012b34:	da09      	bge.n	8012b4a <__kernel_rem_pio2+0x5c2>
 8012b36:	f1bb 0f00 	cmp.w	fp, #0
 8012b3a:	d002      	beq.n	8012b42 <__kernel_rem_pio2+0x5ba>
 8012b3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b40:	4619      	mov	r1, r3
 8012b42:	9b01      	ldr	r3, [sp, #4]
 8012b44:	e9c3 0100 	strd	r0, r1, [r3]
 8012b48:	e791      	b.n	8012a6e <__kernel_rem_pio2+0x4e6>
 8012b4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b4e:	f7ed fbb5 	bl	80002bc <__adddf3>
 8012b52:	3d01      	subs	r5, #1
 8012b54:	e7ed      	b.n	8012b32 <__kernel_rem_pio2+0x5aa>
 8012b56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b5a:	f7ed fbaf 	bl	80002bc <__adddf3>
 8012b5e:	3e01      	subs	r6, #1
 8012b60:	e7c0      	b.n	8012ae4 <__kernel_rem_pio2+0x55c>
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	e7c5      	b.n	8012af4 <__kernel_rem_pio2+0x56c>
 8012b68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012b6c:	f7ed fba6 	bl	80002bc <__adddf3>
 8012b70:	3401      	adds	r4, #1
 8012b72:	e7ca      	b.n	8012b0a <__kernel_rem_pio2+0x582>
 8012b74:	e9da 8900 	ldrd	r8, r9, [sl]
 8012b78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012b7c:	9b02      	ldr	r3, [sp, #8]
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	9302      	str	r3, [sp, #8]
 8012b82:	4632      	mov	r2, r6
 8012b84:	463b      	mov	r3, r7
 8012b86:	4640      	mov	r0, r8
 8012b88:	4649      	mov	r1, r9
 8012b8a:	f7ed fb97 	bl	80002bc <__adddf3>
 8012b8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b92:	4602      	mov	r2, r0
 8012b94:	460b      	mov	r3, r1
 8012b96:	4640      	mov	r0, r8
 8012b98:	4649      	mov	r1, r9
 8012b9a:	f7ed fb8d 	bl	80002b8 <__aeabi_dsub>
 8012b9e:	4632      	mov	r2, r6
 8012ba0:	463b      	mov	r3, r7
 8012ba2:	f7ed fb8b 	bl	80002bc <__adddf3>
 8012ba6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012baa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bae:	ed8a 7b00 	vstr	d7, [sl]
 8012bb2:	e76e      	b.n	8012a92 <__kernel_rem_pio2+0x50a>
 8012bb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012bb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012bbc:	4640      	mov	r0, r8
 8012bbe:	4632      	mov	r2, r6
 8012bc0:	463b      	mov	r3, r7
 8012bc2:	4649      	mov	r1, r9
 8012bc4:	f7ed fb7a 	bl	80002bc <__adddf3>
 8012bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bcc:	4602      	mov	r2, r0
 8012bce:	460b      	mov	r3, r1
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	4649      	mov	r1, r9
 8012bd4:	f7ed fb70 	bl	80002b8 <__aeabi_dsub>
 8012bd8:	4632      	mov	r2, r6
 8012bda:	463b      	mov	r3, r7
 8012bdc:	f7ed fb6e 	bl	80002bc <__adddf3>
 8012be0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012be4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012be8:	ed84 7b00 	vstr	d7, [r4]
 8012bec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012bf0:	e755      	b.n	8012a9e <__kernel_rem_pio2+0x516>
 8012bf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bf6:	f7ed fb61 	bl	80002bc <__adddf3>
 8012bfa:	3d01      	subs	r5, #1
 8012bfc:	e759      	b.n	8012ab2 <__kernel_rem_pio2+0x52a>
 8012bfe:	9b01      	ldr	r3, [sp, #4]
 8012c00:	9a01      	ldr	r2, [sp, #4]
 8012c02:	601d      	str	r5, [r3, #0]
 8012c04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012c08:	605c      	str	r4, [r3, #4]
 8012c0a:	609f      	str	r7, [r3, #8]
 8012c0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012c10:	60d3      	str	r3, [r2, #12]
 8012c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c16:	6110      	str	r0, [r2, #16]
 8012c18:	6153      	str	r3, [r2, #20]
 8012c1a:	e728      	b.n	8012a6e <__kernel_rem_pio2+0x4e6>
 8012c1c:	41700000 	.word	0x41700000
 8012c20:	3e700000 	.word	0x3e700000
 8012c24:	00000000 	.word	0x00000000

08012c28 <__kernel_sin>:
 8012c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2c:	ed2d 8b04 	vpush	{d8-d9}
 8012c30:	eeb0 8a41 	vmov.f32	s16, s2
 8012c34:	eef0 8a61 	vmov.f32	s17, s3
 8012c38:	ec55 4b10 	vmov	r4, r5, d0
 8012c3c:	b083      	sub	sp, #12
 8012c3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c46:	9001      	str	r0, [sp, #4]
 8012c48:	da06      	bge.n	8012c58 <__kernel_sin+0x30>
 8012c4a:	ee10 0a10 	vmov	r0, s0
 8012c4e:	4629      	mov	r1, r5
 8012c50:	f7ed ff9a 	bl	8000b88 <__aeabi_d2iz>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d051      	beq.n	8012cfc <__kernel_sin+0xd4>
 8012c58:	4622      	mov	r2, r4
 8012c5a:	462b      	mov	r3, r5
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	4629      	mov	r1, r5
 8012c60:	f7ed fce2 	bl	8000628 <__aeabi_dmul>
 8012c64:	4682      	mov	sl, r0
 8012c66:	468b      	mov	fp, r1
 8012c68:	4602      	mov	r2, r0
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f7ed fcda 	bl	8000628 <__aeabi_dmul>
 8012c74:	a341      	add	r3, pc, #260	; (adr r3, 8012d7c <__kernel_sin+0x154>)
 8012c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7a:	4680      	mov	r8, r0
 8012c7c:	4689      	mov	r9, r1
 8012c7e:	4650      	mov	r0, sl
 8012c80:	4659      	mov	r1, fp
 8012c82:	f7ed fcd1 	bl	8000628 <__aeabi_dmul>
 8012c86:	a33f      	add	r3, pc, #252	; (adr r3, 8012d84 <__kernel_sin+0x15c>)
 8012c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8c:	f7ed fb14 	bl	80002b8 <__aeabi_dsub>
 8012c90:	4652      	mov	r2, sl
 8012c92:	465b      	mov	r3, fp
 8012c94:	f7ed fcc8 	bl	8000628 <__aeabi_dmul>
 8012c98:	a33c      	add	r3, pc, #240	; (adr r3, 8012d8c <__kernel_sin+0x164>)
 8012c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9e:	f7ed fb0d 	bl	80002bc <__adddf3>
 8012ca2:	4652      	mov	r2, sl
 8012ca4:	465b      	mov	r3, fp
 8012ca6:	f7ed fcbf 	bl	8000628 <__aeabi_dmul>
 8012caa:	a33a      	add	r3, pc, #232	; (adr r3, 8012d94 <__kernel_sin+0x16c>)
 8012cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb0:	f7ed fb02 	bl	80002b8 <__aeabi_dsub>
 8012cb4:	4652      	mov	r2, sl
 8012cb6:	465b      	mov	r3, fp
 8012cb8:	f7ed fcb6 	bl	8000628 <__aeabi_dmul>
 8012cbc:	a337      	add	r3, pc, #220	; (adr r3, 8012d9c <__kernel_sin+0x174>)
 8012cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc2:	f7ed fafb 	bl	80002bc <__adddf3>
 8012cc6:	9b01      	ldr	r3, [sp, #4]
 8012cc8:	4606      	mov	r6, r0
 8012cca:	460f      	mov	r7, r1
 8012ccc:	b9eb      	cbnz	r3, 8012d0a <__kernel_sin+0xe2>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4650      	mov	r0, sl
 8012cd4:	4659      	mov	r1, fp
 8012cd6:	f7ed fca7 	bl	8000628 <__aeabi_dmul>
 8012cda:	a325      	add	r3, pc, #148	; (adr r3, 8012d70 <__kernel_sin+0x148>)
 8012cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce0:	f7ed faea 	bl	80002b8 <__aeabi_dsub>
 8012ce4:	4642      	mov	r2, r8
 8012ce6:	464b      	mov	r3, r9
 8012ce8:	f7ed fc9e 	bl	8000628 <__aeabi_dmul>
 8012cec:	4602      	mov	r2, r0
 8012cee:	460b      	mov	r3, r1
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	f7ed fae2 	bl	80002bc <__adddf3>
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	460d      	mov	r5, r1
 8012cfc:	ec45 4b10 	vmov	d0, r4, r5
 8012d00:	b003      	add	sp, #12
 8012d02:	ecbd 8b04 	vpop	{d8-d9}
 8012d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0a:	4b1b      	ldr	r3, [pc, #108]	; (8012d78 <__kernel_sin+0x150>)
 8012d0c:	ec51 0b18 	vmov	r0, r1, d8
 8012d10:	2200      	movs	r2, #0
 8012d12:	f7ed fc89 	bl	8000628 <__aeabi_dmul>
 8012d16:	4632      	mov	r2, r6
 8012d18:	ec41 0b19 	vmov	d9, r0, r1
 8012d1c:	463b      	mov	r3, r7
 8012d1e:	4640      	mov	r0, r8
 8012d20:	4649      	mov	r1, r9
 8012d22:	f7ed fc81 	bl	8000628 <__aeabi_dmul>
 8012d26:	4602      	mov	r2, r0
 8012d28:	460b      	mov	r3, r1
 8012d2a:	ec51 0b19 	vmov	r0, r1, d9
 8012d2e:	f7ed fac3 	bl	80002b8 <__aeabi_dsub>
 8012d32:	4652      	mov	r2, sl
 8012d34:	465b      	mov	r3, fp
 8012d36:	f7ed fc77 	bl	8000628 <__aeabi_dmul>
 8012d3a:	ec53 2b18 	vmov	r2, r3, d8
 8012d3e:	f7ed fabb 	bl	80002b8 <__aeabi_dsub>
 8012d42:	a30b      	add	r3, pc, #44	; (adr r3, 8012d70 <__kernel_sin+0x148>)
 8012d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d48:	4606      	mov	r6, r0
 8012d4a:	460f      	mov	r7, r1
 8012d4c:	4640      	mov	r0, r8
 8012d4e:	4649      	mov	r1, r9
 8012d50:	f7ed fc6a 	bl	8000628 <__aeabi_dmul>
 8012d54:	4602      	mov	r2, r0
 8012d56:	460b      	mov	r3, r1
 8012d58:	4630      	mov	r0, r6
 8012d5a:	4639      	mov	r1, r7
 8012d5c:	f7ed faae 	bl	80002bc <__adddf3>
 8012d60:	4602      	mov	r2, r0
 8012d62:	460b      	mov	r3, r1
 8012d64:	4620      	mov	r0, r4
 8012d66:	4629      	mov	r1, r5
 8012d68:	f7ed faa6 	bl	80002b8 <__aeabi_dsub>
 8012d6c:	e7c4      	b.n	8012cf8 <__kernel_sin+0xd0>
 8012d6e:	bf00      	nop
 8012d70:	55555549 	.word	0x55555549
 8012d74:	3fc55555 	.word	0x3fc55555
 8012d78:	3fe00000 	.word	0x3fe00000
 8012d7c:	5acfd57c 	.word	0x5acfd57c
 8012d80:	3de5d93a 	.word	0x3de5d93a
 8012d84:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d88:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d8c:	57b1fe7d 	.word	0x57b1fe7d
 8012d90:	3ec71de3 	.word	0x3ec71de3
 8012d94:	19c161d5 	.word	0x19c161d5
 8012d98:	3f2a01a0 	.word	0x3f2a01a0
 8012d9c:	1110f8a6 	.word	0x1110f8a6
 8012da0:	3f811111 	.word	0x3f811111

08012da4 <with_errno>:
 8012da4:	b570      	push	{r4, r5, r6, lr}
 8012da6:	4604      	mov	r4, r0
 8012da8:	460d      	mov	r5, r1
 8012daa:	4616      	mov	r6, r2
 8012dac:	f7fa ff28 	bl	800dc00 <__errno>
 8012db0:	4629      	mov	r1, r5
 8012db2:	6006      	str	r6, [r0, #0]
 8012db4:	4620      	mov	r0, r4
 8012db6:	bd70      	pop	{r4, r5, r6, pc}

08012db8 <xflow>:
 8012db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012dba:	4614      	mov	r4, r2
 8012dbc:	461d      	mov	r5, r3
 8012dbe:	b108      	cbz	r0, 8012dc4 <xflow+0xc>
 8012dc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012dc4:	e9cd 2300 	strd	r2, r3, [sp]
 8012dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012dcc:	4620      	mov	r0, r4
 8012dce:	4629      	mov	r1, r5
 8012dd0:	f7ed fc2a 	bl	8000628 <__aeabi_dmul>
 8012dd4:	2222      	movs	r2, #34	; 0x22
 8012dd6:	b003      	add	sp, #12
 8012dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ddc:	f7ff bfe2 	b.w	8012da4 <with_errno>

08012de0 <__math_uflow>:
 8012de0:	b508      	push	{r3, lr}
 8012de2:	2200      	movs	r2, #0
 8012de4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012de8:	f7ff ffe6 	bl	8012db8 <xflow>
 8012dec:	ec41 0b10 	vmov	d0, r0, r1
 8012df0:	bd08      	pop	{r3, pc}

08012df2 <__math_oflow>:
 8012df2:	b508      	push	{r3, lr}
 8012df4:	2200      	movs	r2, #0
 8012df6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012dfa:	f7ff ffdd 	bl	8012db8 <xflow>
 8012dfe:	ec41 0b10 	vmov	d0, r0, r1
 8012e02:	bd08      	pop	{r3, pc}
 8012e04:	0000      	movs	r0, r0
	...

08012e08 <atan>:
 8012e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e0c:	ec55 4b10 	vmov	r4, r5, d0
 8012e10:	4bc3      	ldr	r3, [pc, #780]	; (8013120 <atan+0x318>)
 8012e12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012e16:	429e      	cmp	r6, r3
 8012e18:	46ab      	mov	fp, r5
 8012e1a:	dd18      	ble.n	8012e4e <atan+0x46>
 8012e1c:	4bc1      	ldr	r3, [pc, #772]	; (8013124 <atan+0x31c>)
 8012e1e:	429e      	cmp	r6, r3
 8012e20:	dc01      	bgt.n	8012e26 <atan+0x1e>
 8012e22:	d109      	bne.n	8012e38 <atan+0x30>
 8012e24:	b144      	cbz	r4, 8012e38 <atan+0x30>
 8012e26:	4622      	mov	r2, r4
 8012e28:	462b      	mov	r3, r5
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	f7ed fa45 	bl	80002bc <__adddf3>
 8012e32:	4604      	mov	r4, r0
 8012e34:	460d      	mov	r5, r1
 8012e36:	e006      	b.n	8012e46 <atan+0x3e>
 8012e38:	f1bb 0f00 	cmp.w	fp, #0
 8012e3c:	f300 8131 	bgt.w	80130a2 <atan+0x29a>
 8012e40:	a59b      	add	r5, pc, #620	; (adr r5, 80130b0 <atan+0x2a8>)
 8012e42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012e46:	ec45 4b10 	vmov	d0, r4, r5
 8012e4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4e:	4bb6      	ldr	r3, [pc, #728]	; (8013128 <atan+0x320>)
 8012e50:	429e      	cmp	r6, r3
 8012e52:	dc14      	bgt.n	8012e7e <atan+0x76>
 8012e54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012e58:	429e      	cmp	r6, r3
 8012e5a:	dc0d      	bgt.n	8012e78 <atan+0x70>
 8012e5c:	a396      	add	r3, pc, #600	; (adr r3, 80130b8 <atan+0x2b0>)
 8012e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e62:	ee10 0a10 	vmov	r0, s0
 8012e66:	4629      	mov	r1, r5
 8012e68:	f7ed fa28 	bl	80002bc <__adddf3>
 8012e6c:	4baf      	ldr	r3, [pc, #700]	; (801312c <atan+0x324>)
 8012e6e:	2200      	movs	r2, #0
 8012e70:	f7ed fe6a 	bl	8000b48 <__aeabi_dcmpgt>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d1e6      	bne.n	8012e46 <atan+0x3e>
 8012e78:	f04f 3aff 	mov.w	sl, #4294967295
 8012e7c:	e02b      	b.n	8012ed6 <atan+0xce>
 8012e7e:	f000 f963 	bl	8013148 <fabs>
 8012e82:	4bab      	ldr	r3, [pc, #684]	; (8013130 <atan+0x328>)
 8012e84:	429e      	cmp	r6, r3
 8012e86:	ec55 4b10 	vmov	r4, r5, d0
 8012e8a:	f300 80bf 	bgt.w	801300c <atan+0x204>
 8012e8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012e92:	429e      	cmp	r6, r3
 8012e94:	f300 80a0 	bgt.w	8012fd8 <atan+0x1d0>
 8012e98:	ee10 2a10 	vmov	r2, s0
 8012e9c:	ee10 0a10 	vmov	r0, s0
 8012ea0:	462b      	mov	r3, r5
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	f7ed fa0a 	bl	80002bc <__adddf3>
 8012ea8:	4ba0      	ldr	r3, [pc, #640]	; (801312c <atan+0x324>)
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f7ed fa04 	bl	80002b8 <__aeabi_dsub>
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	460f      	mov	r7, r1
 8012eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012eba:	4620      	mov	r0, r4
 8012ebc:	4629      	mov	r1, r5
 8012ebe:	f7ed f9fd 	bl	80002bc <__adddf3>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	4639      	mov	r1, r7
 8012eca:	f7ed fcd7 	bl	800087c <__aeabi_ddiv>
 8012ece:	f04f 0a00 	mov.w	sl, #0
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	460d      	mov	r5, r1
 8012ed6:	4622      	mov	r2, r4
 8012ed8:	462b      	mov	r3, r5
 8012eda:	4620      	mov	r0, r4
 8012edc:	4629      	mov	r1, r5
 8012ede:	f7ed fba3 	bl	8000628 <__aeabi_dmul>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	4680      	mov	r8, r0
 8012ee8:	4689      	mov	r9, r1
 8012eea:	f7ed fb9d 	bl	8000628 <__aeabi_dmul>
 8012eee:	a374      	add	r3, pc, #464	; (adr r3, 80130c0 <atan+0x2b8>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	460f      	mov	r7, r1
 8012ef8:	f7ed fb96 	bl	8000628 <__aeabi_dmul>
 8012efc:	a372      	add	r3, pc, #456	; (adr r3, 80130c8 <atan+0x2c0>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	f7ed f9db 	bl	80002bc <__adddf3>
 8012f06:	4632      	mov	r2, r6
 8012f08:	463b      	mov	r3, r7
 8012f0a:	f7ed fb8d 	bl	8000628 <__aeabi_dmul>
 8012f0e:	a370      	add	r3, pc, #448	; (adr r3, 80130d0 <atan+0x2c8>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f14:	f7ed f9d2 	bl	80002bc <__adddf3>
 8012f18:	4632      	mov	r2, r6
 8012f1a:	463b      	mov	r3, r7
 8012f1c:	f7ed fb84 	bl	8000628 <__aeabi_dmul>
 8012f20:	a36d      	add	r3, pc, #436	; (adr r3, 80130d8 <atan+0x2d0>)
 8012f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f26:	f7ed f9c9 	bl	80002bc <__adddf3>
 8012f2a:	4632      	mov	r2, r6
 8012f2c:	463b      	mov	r3, r7
 8012f2e:	f7ed fb7b 	bl	8000628 <__aeabi_dmul>
 8012f32:	a36b      	add	r3, pc, #428	; (adr r3, 80130e0 <atan+0x2d8>)
 8012f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f38:	f7ed f9c0 	bl	80002bc <__adddf3>
 8012f3c:	4632      	mov	r2, r6
 8012f3e:	463b      	mov	r3, r7
 8012f40:	f7ed fb72 	bl	8000628 <__aeabi_dmul>
 8012f44:	a368      	add	r3, pc, #416	; (adr r3, 80130e8 <atan+0x2e0>)
 8012f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4a:	f7ed f9b7 	bl	80002bc <__adddf3>
 8012f4e:	4642      	mov	r2, r8
 8012f50:	464b      	mov	r3, r9
 8012f52:	f7ed fb69 	bl	8000628 <__aeabi_dmul>
 8012f56:	a366      	add	r3, pc, #408	; (adr r3, 80130f0 <atan+0x2e8>)
 8012f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5c:	4680      	mov	r8, r0
 8012f5e:	4689      	mov	r9, r1
 8012f60:	4630      	mov	r0, r6
 8012f62:	4639      	mov	r1, r7
 8012f64:	f7ed fb60 	bl	8000628 <__aeabi_dmul>
 8012f68:	a363      	add	r3, pc, #396	; (adr r3, 80130f8 <atan+0x2f0>)
 8012f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6e:	f7ed f9a3 	bl	80002b8 <__aeabi_dsub>
 8012f72:	4632      	mov	r2, r6
 8012f74:	463b      	mov	r3, r7
 8012f76:	f7ed fb57 	bl	8000628 <__aeabi_dmul>
 8012f7a:	a361      	add	r3, pc, #388	; (adr r3, 8013100 <atan+0x2f8>)
 8012f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f80:	f7ed f99a 	bl	80002b8 <__aeabi_dsub>
 8012f84:	4632      	mov	r2, r6
 8012f86:	463b      	mov	r3, r7
 8012f88:	f7ed fb4e 	bl	8000628 <__aeabi_dmul>
 8012f8c:	a35e      	add	r3, pc, #376	; (adr r3, 8013108 <atan+0x300>)
 8012f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f92:	f7ed f991 	bl	80002b8 <__aeabi_dsub>
 8012f96:	4632      	mov	r2, r6
 8012f98:	463b      	mov	r3, r7
 8012f9a:	f7ed fb45 	bl	8000628 <__aeabi_dmul>
 8012f9e:	a35c      	add	r3, pc, #368	; (adr r3, 8013110 <atan+0x308>)
 8012fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa4:	f7ed f988 	bl	80002b8 <__aeabi_dsub>
 8012fa8:	4632      	mov	r2, r6
 8012faa:	463b      	mov	r3, r7
 8012fac:	f7ed fb3c 	bl	8000628 <__aeabi_dmul>
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	460b      	mov	r3, r1
 8012fb4:	4640      	mov	r0, r8
 8012fb6:	4649      	mov	r1, r9
 8012fb8:	f7ed f980 	bl	80002bc <__adddf3>
 8012fbc:	4622      	mov	r2, r4
 8012fbe:	462b      	mov	r3, r5
 8012fc0:	f7ed fb32 	bl	8000628 <__aeabi_dmul>
 8012fc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012fc8:	4602      	mov	r2, r0
 8012fca:	460b      	mov	r3, r1
 8012fcc:	d14b      	bne.n	8013066 <atan+0x25e>
 8012fce:	4620      	mov	r0, r4
 8012fd0:	4629      	mov	r1, r5
 8012fd2:	f7ed f971 	bl	80002b8 <__aeabi_dsub>
 8012fd6:	e72c      	b.n	8012e32 <atan+0x2a>
 8012fd8:	ee10 0a10 	vmov	r0, s0
 8012fdc:	4b53      	ldr	r3, [pc, #332]	; (801312c <atan+0x324>)
 8012fde:	2200      	movs	r2, #0
 8012fe0:	4629      	mov	r1, r5
 8012fe2:	f7ed f969 	bl	80002b8 <__aeabi_dsub>
 8012fe6:	4b51      	ldr	r3, [pc, #324]	; (801312c <atan+0x324>)
 8012fe8:	4606      	mov	r6, r0
 8012fea:	460f      	mov	r7, r1
 8012fec:	2200      	movs	r2, #0
 8012fee:	4620      	mov	r0, r4
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	f7ed f963 	bl	80002bc <__adddf3>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	4639      	mov	r1, r7
 8012ffe:	f7ed fc3d 	bl	800087c <__aeabi_ddiv>
 8013002:	f04f 0a01 	mov.w	sl, #1
 8013006:	4604      	mov	r4, r0
 8013008:	460d      	mov	r5, r1
 801300a:	e764      	b.n	8012ed6 <atan+0xce>
 801300c:	4b49      	ldr	r3, [pc, #292]	; (8013134 <atan+0x32c>)
 801300e:	429e      	cmp	r6, r3
 8013010:	da1d      	bge.n	801304e <atan+0x246>
 8013012:	ee10 0a10 	vmov	r0, s0
 8013016:	4b48      	ldr	r3, [pc, #288]	; (8013138 <atan+0x330>)
 8013018:	2200      	movs	r2, #0
 801301a:	4629      	mov	r1, r5
 801301c:	f7ed f94c 	bl	80002b8 <__aeabi_dsub>
 8013020:	4b45      	ldr	r3, [pc, #276]	; (8013138 <atan+0x330>)
 8013022:	4606      	mov	r6, r0
 8013024:	460f      	mov	r7, r1
 8013026:	2200      	movs	r2, #0
 8013028:	4620      	mov	r0, r4
 801302a:	4629      	mov	r1, r5
 801302c:	f7ed fafc 	bl	8000628 <__aeabi_dmul>
 8013030:	4b3e      	ldr	r3, [pc, #248]	; (801312c <atan+0x324>)
 8013032:	2200      	movs	r2, #0
 8013034:	f7ed f942 	bl	80002bc <__adddf3>
 8013038:	4602      	mov	r2, r0
 801303a:	460b      	mov	r3, r1
 801303c:	4630      	mov	r0, r6
 801303e:	4639      	mov	r1, r7
 8013040:	f7ed fc1c 	bl	800087c <__aeabi_ddiv>
 8013044:	f04f 0a02 	mov.w	sl, #2
 8013048:	4604      	mov	r4, r0
 801304a:	460d      	mov	r5, r1
 801304c:	e743      	b.n	8012ed6 <atan+0xce>
 801304e:	462b      	mov	r3, r5
 8013050:	ee10 2a10 	vmov	r2, s0
 8013054:	4939      	ldr	r1, [pc, #228]	; (801313c <atan+0x334>)
 8013056:	2000      	movs	r0, #0
 8013058:	f7ed fc10 	bl	800087c <__aeabi_ddiv>
 801305c:	f04f 0a03 	mov.w	sl, #3
 8013060:	4604      	mov	r4, r0
 8013062:	460d      	mov	r5, r1
 8013064:	e737      	b.n	8012ed6 <atan+0xce>
 8013066:	4b36      	ldr	r3, [pc, #216]	; (8013140 <atan+0x338>)
 8013068:	4e36      	ldr	r6, [pc, #216]	; (8013144 <atan+0x33c>)
 801306a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801306e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013072:	e9da 2300 	ldrd	r2, r3, [sl]
 8013076:	f7ed f91f 	bl	80002b8 <__aeabi_dsub>
 801307a:	4622      	mov	r2, r4
 801307c:	462b      	mov	r3, r5
 801307e:	f7ed f91b 	bl	80002b8 <__aeabi_dsub>
 8013082:	4602      	mov	r2, r0
 8013084:	460b      	mov	r3, r1
 8013086:	e9d6 0100 	ldrd	r0, r1, [r6]
 801308a:	f7ed f915 	bl	80002b8 <__aeabi_dsub>
 801308e:	f1bb 0f00 	cmp.w	fp, #0
 8013092:	4604      	mov	r4, r0
 8013094:	460d      	mov	r5, r1
 8013096:	f6bf aed6 	bge.w	8012e46 <atan+0x3e>
 801309a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801309e:	461d      	mov	r5, r3
 80130a0:	e6d1      	b.n	8012e46 <atan+0x3e>
 80130a2:	a51d      	add	r5, pc, #116	; (adr r5, 8013118 <atan+0x310>)
 80130a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80130a8:	e6cd      	b.n	8012e46 <atan+0x3e>
 80130aa:	bf00      	nop
 80130ac:	f3af 8000 	nop.w
 80130b0:	54442d18 	.word	0x54442d18
 80130b4:	bff921fb 	.word	0xbff921fb
 80130b8:	8800759c 	.word	0x8800759c
 80130bc:	7e37e43c 	.word	0x7e37e43c
 80130c0:	e322da11 	.word	0xe322da11
 80130c4:	3f90ad3a 	.word	0x3f90ad3a
 80130c8:	24760deb 	.word	0x24760deb
 80130cc:	3fa97b4b 	.word	0x3fa97b4b
 80130d0:	a0d03d51 	.word	0xa0d03d51
 80130d4:	3fb10d66 	.word	0x3fb10d66
 80130d8:	c54c206e 	.word	0xc54c206e
 80130dc:	3fb745cd 	.word	0x3fb745cd
 80130e0:	920083ff 	.word	0x920083ff
 80130e4:	3fc24924 	.word	0x3fc24924
 80130e8:	5555550d 	.word	0x5555550d
 80130ec:	3fd55555 	.word	0x3fd55555
 80130f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80130f4:	bfa2b444 	.word	0xbfa2b444
 80130f8:	52defd9a 	.word	0x52defd9a
 80130fc:	3fadde2d 	.word	0x3fadde2d
 8013100:	af749a6d 	.word	0xaf749a6d
 8013104:	3fb3b0f2 	.word	0x3fb3b0f2
 8013108:	fe231671 	.word	0xfe231671
 801310c:	3fbc71c6 	.word	0x3fbc71c6
 8013110:	9998ebc4 	.word	0x9998ebc4
 8013114:	3fc99999 	.word	0x3fc99999
 8013118:	54442d18 	.word	0x54442d18
 801311c:	3ff921fb 	.word	0x3ff921fb
 8013120:	440fffff 	.word	0x440fffff
 8013124:	7ff00000 	.word	0x7ff00000
 8013128:	3fdbffff 	.word	0x3fdbffff
 801312c:	3ff00000 	.word	0x3ff00000
 8013130:	3ff2ffff 	.word	0x3ff2ffff
 8013134:	40038000 	.word	0x40038000
 8013138:	3ff80000 	.word	0x3ff80000
 801313c:	bff00000 	.word	0xbff00000
 8013140:	080140b8 	.word	0x080140b8
 8013144:	08014098 	.word	0x08014098

08013148 <fabs>:
 8013148:	ec51 0b10 	vmov	r0, r1, d0
 801314c:	ee10 2a10 	vmov	r2, s0
 8013150:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013154:	ec43 2b10 	vmov	d0, r2, r3
 8013158:	4770      	bx	lr

0801315a <finite>:
 801315a:	b082      	sub	sp, #8
 801315c:	ed8d 0b00 	vstr	d0, [sp]
 8013160:	9801      	ldr	r0, [sp, #4]
 8013162:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013166:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801316a:	0fc0      	lsrs	r0, r0, #31
 801316c:	b002      	add	sp, #8
 801316e:	4770      	bx	lr

08013170 <floor>:
 8013170:	ec51 0b10 	vmov	r0, r1, d0
 8013174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013178:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801317c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013180:	2e13      	cmp	r6, #19
 8013182:	ee10 5a10 	vmov	r5, s0
 8013186:	ee10 8a10 	vmov	r8, s0
 801318a:	460c      	mov	r4, r1
 801318c:	dc32      	bgt.n	80131f4 <floor+0x84>
 801318e:	2e00      	cmp	r6, #0
 8013190:	da14      	bge.n	80131bc <floor+0x4c>
 8013192:	a333      	add	r3, pc, #204	; (adr r3, 8013260 <floor+0xf0>)
 8013194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013198:	f7ed f890 	bl	80002bc <__adddf3>
 801319c:	2200      	movs	r2, #0
 801319e:	2300      	movs	r3, #0
 80131a0:	f7ed fcd2 	bl	8000b48 <__aeabi_dcmpgt>
 80131a4:	b138      	cbz	r0, 80131b6 <floor+0x46>
 80131a6:	2c00      	cmp	r4, #0
 80131a8:	da57      	bge.n	801325a <floor+0xea>
 80131aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80131ae:	431d      	orrs	r5, r3
 80131b0:	d001      	beq.n	80131b6 <floor+0x46>
 80131b2:	4c2d      	ldr	r4, [pc, #180]	; (8013268 <floor+0xf8>)
 80131b4:	2500      	movs	r5, #0
 80131b6:	4621      	mov	r1, r4
 80131b8:	4628      	mov	r0, r5
 80131ba:	e025      	b.n	8013208 <floor+0x98>
 80131bc:	4f2b      	ldr	r7, [pc, #172]	; (801326c <floor+0xfc>)
 80131be:	4137      	asrs	r7, r6
 80131c0:	ea01 0307 	and.w	r3, r1, r7
 80131c4:	4303      	orrs	r3, r0
 80131c6:	d01f      	beq.n	8013208 <floor+0x98>
 80131c8:	a325      	add	r3, pc, #148	; (adr r3, 8013260 <floor+0xf0>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ed f875 	bl	80002bc <__adddf3>
 80131d2:	2200      	movs	r2, #0
 80131d4:	2300      	movs	r3, #0
 80131d6:	f7ed fcb7 	bl	8000b48 <__aeabi_dcmpgt>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d0eb      	beq.n	80131b6 <floor+0x46>
 80131de:	2c00      	cmp	r4, #0
 80131e0:	bfbe      	ittt	lt
 80131e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80131e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80131ea:	19a4      	addlt	r4, r4, r6
 80131ec:	ea24 0407 	bic.w	r4, r4, r7
 80131f0:	2500      	movs	r5, #0
 80131f2:	e7e0      	b.n	80131b6 <floor+0x46>
 80131f4:	2e33      	cmp	r6, #51	; 0x33
 80131f6:	dd0b      	ble.n	8013210 <floor+0xa0>
 80131f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80131fc:	d104      	bne.n	8013208 <floor+0x98>
 80131fe:	ee10 2a10 	vmov	r2, s0
 8013202:	460b      	mov	r3, r1
 8013204:	f7ed f85a 	bl	80002bc <__adddf3>
 8013208:	ec41 0b10 	vmov	d0, r0, r1
 801320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013210:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013214:	f04f 33ff 	mov.w	r3, #4294967295
 8013218:	fa23 f707 	lsr.w	r7, r3, r7
 801321c:	4207      	tst	r7, r0
 801321e:	d0f3      	beq.n	8013208 <floor+0x98>
 8013220:	a30f      	add	r3, pc, #60	; (adr r3, 8013260 <floor+0xf0>)
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	f7ed f849 	bl	80002bc <__adddf3>
 801322a:	2200      	movs	r2, #0
 801322c:	2300      	movs	r3, #0
 801322e:	f7ed fc8b 	bl	8000b48 <__aeabi_dcmpgt>
 8013232:	2800      	cmp	r0, #0
 8013234:	d0bf      	beq.n	80131b6 <floor+0x46>
 8013236:	2c00      	cmp	r4, #0
 8013238:	da02      	bge.n	8013240 <floor+0xd0>
 801323a:	2e14      	cmp	r6, #20
 801323c:	d103      	bne.n	8013246 <floor+0xd6>
 801323e:	3401      	adds	r4, #1
 8013240:	ea25 0507 	bic.w	r5, r5, r7
 8013244:	e7b7      	b.n	80131b6 <floor+0x46>
 8013246:	2301      	movs	r3, #1
 8013248:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801324c:	fa03 f606 	lsl.w	r6, r3, r6
 8013250:	4435      	add	r5, r6
 8013252:	4545      	cmp	r5, r8
 8013254:	bf38      	it	cc
 8013256:	18e4      	addcc	r4, r4, r3
 8013258:	e7f2      	b.n	8013240 <floor+0xd0>
 801325a:	2500      	movs	r5, #0
 801325c:	462c      	mov	r4, r5
 801325e:	e7aa      	b.n	80131b6 <floor+0x46>
 8013260:	8800759c 	.word	0x8800759c
 8013264:	7e37e43c 	.word	0x7e37e43c
 8013268:	bff00000 	.word	0xbff00000
 801326c:	000fffff 	.word	0x000fffff

08013270 <nan>:
 8013270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013278 <nan+0x8>
 8013274:	4770      	bx	lr
 8013276:	bf00      	nop
 8013278:	00000000 	.word	0x00000000
 801327c:	7ff80000 	.word	0x7ff80000

08013280 <scalbn>:
 8013280:	b570      	push	{r4, r5, r6, lr}
 8013282:	ec55 4b10 	vmov	r4, r5, d0
 8013286:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801328a:	4606      	mov	r6, r0
 801328c:	462b      	mov	r3, r5
 801328e:	b99a      	cbnz	r2, 80132b8 <scalbn+0x38>
 8013290:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013294:	4323      	orrs	r3, r4
 8013296:	d036      	beq.n	8013306 <scalbn+0x86>
 8013298:	4b39      	ldr	r3, [pc, #228]	; (8013380 <scalbn+0x100>)
 801329a:	4629      	mov	r1, r5
 801329c:	ee10 0a10 	vmov	r0, s0
 80132a0:	2200      	movs	r2, #0
 80132a2:	f7ed f9c1 	bl	8000628 <__aeabi_dmul>
 80132a6:	4b37      	ldr	r3, [pc, #220]	; (8013384 <scalbn+0x104>)
 80132a8:	429e      	cmp	r6, r3
 80132aa:	4604      	mov	r4, r0
 80132ac:	460d      	mov	r5, r1
 80132ae:	da10      	bge.n	80132d2 <scalbn+0x52>
 80132b0:	a32b      	add	r3, pc, #172	; (adr r3, 8013360 <scalbn+0xe0>)
 80132b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b6:	e03a      	b.n	801332e <scalbn+0xae>
 80132b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80132bc:	428a      	cmp	r2, r1
 80132be:	d10c      	bne.n	80132da <scalbn+0x5a>
 80132c0:	ee10 2a10 	vmov	r2, s0
 80132c4:	4620      	mov	r0, r4
 80132c6:	4629      	mov	r1, r5
 80132c8:	f7ec fff8 	bl	80002bc <__adddf3>
 80132cc:	4604      	mov	r4, r0
 80132ce:	460d      	mov	r5, r1
 80132d0:	e019      	b.n	8013306 <scalbn+0x86>
 80132d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80132d6:	460b      	mov	r3, r1
 80132d8:	3a36      	subs	r2, #54	; 0x36
 80132da:	4432      	add	r2, r6
 80132dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80132e0:	428a      	cmp	r2, r1
 80132e2:	dd08      	ble.n	80132f6 <scalbn+0x76>
 80132e4:	2d00      	cmp	r5, #0
 80132e6:	a120      	add	r1, pc, #128	; (adr r1, 8013368 <scalbn+0xe8>)
 80132e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132ec:	da1c      	bge.n	8013328 <scalbn+0xa8>
 80132ee:	a120      	add	r1, pc, #128	; (adr r1, 8013370 <scalbn+0xf0>)
 80132f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132f4:	e018      	b.n	8013328 <scalbn+0xa8>
 80132f6:	2a00      	cmp	r2, #0
 80132f8:	dd08      	ble.n	801330c <scalbn+0x8c>
 80132fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013302:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013306:	ec45 4b10 	vmov	d0, r4, r5
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013310:	da19      	bge.n	8013346 <scalbn+0xc6>
 8013312:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013316:	429e      	cmp	r6, r3
 8013318:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801331c:	dd0a      	ble.n	8013334 <scalbn+0xb4>
 801331e:	a112      	add	r1, pc, #72	; (adr r1, 8013368 <scalbn+0xe8>)
 8013320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d1e2      	bne.n	80132ee <scalbn+0x6e>
 8013328:	a30f      	add	r3, pc, #60	; (adr r3, 8013368 <scalbn+0xe8>)
 801332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332e:	f7ed f97b 	bl	8000628 <__aeabi_dmul>
 8013332:	e7cb      	b.n	80132cc <scalbn+0x4c>
 8013334:	a10a      	add	r1, pc, #40	; (adr r1, 8013360 <scalbn+0xe0>)
 8013336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d0b8      	beq.n	80132b0 <scalbn+0x30>
 801333e:	a10e      	add	r1, pc, #56	; (adr r1, 8013378 <scalbn+0xf8>)
 8013340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013344:	e7b4      	b.n	80132b0 <scalbn+0x30>
 8013346:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801334a:	3236      	adds	r2, #54	; 0x36
 801334c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013350:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013354:	4620      	mov	r0, r4
 8013356:	4b0c      	ldr	r3, [pc, #48]	; (8013388 <scalbn+0x108>)
 8013358:	2200      	movs	r2, #0
 801335a:	e7e8      	b.n	801332e <scalbn+0xae>
 801335c:	f3af 8000 	nop.w
 8013360:	c2f8f359 	.word	0xc2f8f359
 8013364:	01a56e1f 	.word	0x01a56e1f
 8013368:	8800759c 	.word	0x8800759c
 801336c:	7e37e43c 	.word	0x7e37e43c
 8013370:	8800759c 	.word	0x8800759c
 8013374:	fe37e43c 	.word	0xfe37e43c
 8013378:	c2f8f359 	.word	0xc2f8f359
 801337c:	81a56e1f 	.word	0x81a56e1f
 8013380:	43500000 	.word	0x43500000
 8013384:	ffff3cb0 	.word	0xffff3cb0
 8013388:	3c900000 	.word	0x3c900000

0801338c <_sbrk>:
 801338c:	4a04      	ldr	r2, [pc, #16]	; (80133a0 <_sbrk+0x14>)
 801338e:	6811      	ldr	r1, [r2, #0]
 8013390:	4603      	mov	r3, r0
 8013392:	b909      	cbnz	r1, 8013398 <_sbrk+0xc>
 8013394:	4903      	ldr	r1, [pc, #12]	; (80133a4 <_sbrk+0x18>)
 8013396:	6011      	str	r1, [r2, #0]
 8013398:	6810      	ldr	r0, [r2, #0]
 801339a:	4403      	add	r3, r0
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	4770      	bx	lr
 80133a0:	20014084 	.word	0x20014084
 80133a4:	2000061d 	.word	0x2000061d

080133a8 <_init>:
 80133a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133aa:	bf00      	nop
 80133ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ae:	bc08      	pop	{r3}
 80133b0:	469e      	mov	lr, r3
 80133b2:	4770      	bx	lr

080133b4 <_fini>:
 80133b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133b6:	bf00      	nop
 80133b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ba:	bc08      	pop	{r3}
 80133bc:	469e      	mov	lr, r3
 80133be:	4770      	bx	lr
