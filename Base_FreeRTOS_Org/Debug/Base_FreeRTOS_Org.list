
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013190  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d00  08013330  08013330  00023330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014030  08014030  00030210  2**0
                  CONTENTS
  4 .ARM          00000000  08014030  08014030  00030210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014030  08014030  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014030  08014030  00024030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014034  08014034  00024034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08014038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000da40  20000210  08014248  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dc50  08014248  0003dc50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2d0  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027eb  00000000  00000000  0003f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00041d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00042a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a25  00000000  00000000  00043610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101f8  00000000  00000000  00056035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062b8d  00000000  00000000  0006622d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc4  00000000  00000000  000c8e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013318 	.word	0x08013318

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	08013318 	.word	0x08013318

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28 // Fixed dutty cycle, velocidad constante
#define fixed_sample_period 16 // Periodo en milisegundos de muestreo de datos de encoder

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b095      	sub	sp, #84	; 0x54
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4ba2      	ldr	r3, [pc, #648]	; (8000f48 <main+0x290>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4aa0      	ldr	r2, [pc, #640]	; (8000f48 <main+0x290>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b9f      	ldr	r3, [pc, #636]	; (8000f4c <main+0x294>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a9e      	ldr	r2, [pc, #632]	; (8000f4c <main+0x294>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


   	RCC_enableMaxFrequencies(RCC_100MHz);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f00b fc90 	bl	800c600 <RCC_enableMaxFrequencies>

   	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000ce0:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <main+0x298>)
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	22c8      	movs	r2, #200	; 0xc8
 8000cec:	4999      	ldr	r1, [pc, #612]	; (8000f54 <main+0x29c>)
 8000cee:	489a      	ldr	r0, [pc, #616]	; (8000f58 <main+0x2a0>)
 8000cf0:	f004 fb9a 	bl	8005428 <xTaskCreate>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4a99      	ldr	r2, [pc, #612]	; (8000f5c <main+0x2a4>)
 8000cf8:	6013      	str	r3, [r2, #0]
							NULL,                   // parametro pasado a la tarea
							3,                      // Prioridad de la tarea
							&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000cfa:	4b98      	ldr	r3, [pc, #608]	; (8000f5c <main+0x2a4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00a      	beq.n	8000d18 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d14:	bf00      	nop
 8000d16:	e7fe      	b.n	8000d16 <main+0x5e>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,3,&xHandleTask_Print );
 8000d18:	4b91      	ldr	r3, [pc, #580]	; (8000f60 <main+0x2a8>)
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	22c8      	movs	r2, #200	; 0xc8
 8000d24:	498f      	ldr	r1, [pc, #572]	; (8000f64 <main+0x2ac>)
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <main+0x2b0>)
 8000d28:	f004 fb7e 	bl	8005428 <xTaskCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a8b      	ldr	r2, [pc, #556]	; (8000f5c <main+0x2a4>)
 8000d30:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d32:	4b8a      	ldr	r3, [pc, #552]	; (8000f5c <main+0x2a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00a      	beq.n	8000d50 <main+0x98>
        __asm volatile
 8000d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3e:	f383 8811 	msr	BASEPRI, r3
 8000d42:	f3bf 8f6f 	isb	sy
 8000d46:	f3bf 8f4f 	dsb	sy
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
    }
 8000d4c:	bf00      	nop
 8000d4e:	e7fe      	b.n	8000d4e <main+0x96>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d50:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <main+0x2b4>)
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	2303      	movs	r3, #3
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	22c8      	movs	r2, #200	; 0xc8
 8000d5c:	4984      	ldr	r1, [pc, #528]	; (8000f70 <main+0x2b8>)
 8000d5e:	4885      	ldr	r0, [pc, #532]	; (8000f74 <main+0x2bc>)
 8000d60:	f004 fb62 	bl	8005428 <xTaskCreate>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <main+0x2a4>)
 8000d68:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d6a:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <main+0x2a4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d00a      	beq.n	8000d88 <main+0xd0>
        __asm volatile
 8000d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8000d84:	bf00      	nop
 8000d86:	e7fe      	b.n	8000d86 <main+0xce>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000d88:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <main+0x2c0>)
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2300      	movs	r3, #0
 8000d92:	22c8      	movs	r2, #200	; 0xc8
 8000d94:	4979      	ldr	r1, [pc, #484]	; (8000f7c <main+0x2c4>)
 8000d96:	487a      	ldr	r0, [pc, #488]	; (8000f80 <main+0x2c8>)
 8000d98:	f004 fb46 	bl	8005428 <xTaskCreate>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a6f      	ldr	r2, [pc, #444]	; (8000f5c <main+0x2a4>)
 8000da0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000da2:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <main+0x2a4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d00a      	beq.n	8000dc0 <main+0x108>
        __asm volatile
 8000daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dae:	f383 8811 	msr	BASEPRI, r3
 8000db2:	f3bf 8f6f 	isb	sy
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8000dbc:	bf00      	nop
 8000dbe:	e7fe      	b.n	8000dbe <main+0x106>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000dc0:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <main+0x2cc>)
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	22c8      	movs	r2, #200	; 0xc8
 8000dcc:	496e      	ldr	r1, [pc, #440]	; (8000f88 <main+0x2d0>)
 8000dce:	486f      	ldr	r0, [pc, #444]	; (8000f8c <main+0x2d4>)
 8000dd0:	f004 fb2a 	bl	8005428 <xTaskCreate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a61      	ldr	r2, [pc, #388]	; (8000f5c <main+0x2a4>)
 8000dd8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dda:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <main+0x2a4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00a      	beq.n	8000df8 <main+0x140>
        __asm volatile
 8000de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8000df4:	bf00      	nop
 8000df6:	e7fe      	b.n	8000df6 <main+0x13e>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Control,"Task-Control",STACK_SIZE,NULL,3,&xHandleTask_Control );
 8000df8:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <main+0x2d8>)
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	22c8      	movs	r2, #200	; 0xc8
 8000e04:	4963      	ldr	r1, [pc, #396]	; (8000f94 <main+0x2dc>)
 8000e06:	4864      	ldr	r0, [pc, #400]	; (8000f98 <main+0x2e0>)
 8000e08:	f004 fb0e 	bl	8005428 <xTaskCreate>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <main+0x2a4>)
 8000e10:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <main+0x2a4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d00a      	beq.n	8000e30 <main+0x178>
        __asm volatile
 8000e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1e:	f383 8811 	msr	BASEPRI, r3
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	f3bf 8f4f 	dsb	sy
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8000e2c:	bf00      	nop
 8000e2e:	e7fe      	b.n	8000e2e <main+0x176>

	 /////////////////////////////////TAREA DE IR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_GoTo,"Task-GoTo",STACK_SIZE,NULL,3,&xHandleTask_GoTo );
 8000e30:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <main+0x2e4>)
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	2303      	movs	r3, #3
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	22c8      	movs	r2, #200	; 0xc8
 8000e3c:	4958      	ldr	r1, [pc, #352]	; (8000fa0 <main+0x2e8>)
 8000e3e:	4859      	ldr	r0, [pc, #356]	; (8000fa4 <main+0x2ec>)
 8000e40:	f004 faf2 	bl	8005428 <xTaskCreate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a45      	ldr	r2, [pc, #276]	; (8000f5c <main+0x2a4>)
 8000e48:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <main+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d00a      	beq.n	8000e68 <main+0x1b0>
        __asm volatile
 8000e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e56:	f383 8811 	msr	BASEPRI, r3
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	f3bf 8f4f 	dsb	sy
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8000e64:	bf00      	nop
 8000e66:	e7fe      	b.n	8000e66 <main+0x1ae>

	 /////////////////////////////////TAREA DE GIRAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Roll,"Task-Roll",STACK_SIZE,NULL,3,&xHandleTask_Roll );
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <main+0x2f0>)
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2300      	movs	r3, #0
 8000e72:	22c8      	movs	r2, #200	; 0xc8
 8000e74:	494d      	ldr	r1, [pc, #308]	; (8000fac <main+0x2f4>)
 8000e76:	484e      	ldr	r0, [pc, #312]	; (8000fb0 <main+0x2f8>)
 8000e78:	f004 fad6 	bl	8005428 <xTaskCreate>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <main+0x2a4>)
 8000e80:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <main+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d00a      	beq.n	8000ea0 <main+0x1e8>
        __asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000e9c:	bf00      	nop
 8000e9e:	e7fe      	b.n	8000e9e <main+0x1e6>

	 /////////////////////////////////TAREA DE GIRAR A//////////////////////////////////////

	xReturned = xTaskCreate(vTask_RollTo,"Task-RollTo",STACK_SIZE,NULL,3,&xHandleTask_Rollto );
 8000ea0:	4b44      	ldr	r3, [pc, #272]	; (8000fb4 <main+0x2fc>)
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	22c8      	movs	r2, #200	; 0xc8
 8000eac:	4942      	ldr	r1, [pc, #264]	; (8000fb8 <main+0x300>)
 8000eae:	4843      	ldr	r0, [pc, #268]	; (8000fbc <main+0x304>)
 8000eb0:	f004 faba 	bl	8005428 <xTaskCreate>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <main+0x2a4>)
 8000eb8:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <main+0x2a4>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d00a      	beq.n	8000ed8 <main+0x220>
        __asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <main+0x21e>

	 /////////////////////////////////TAREA DE REINICIAR VARIABLES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Reinit,"Task-Reinit",STACK_SIZE,NULL,3,&xHandleTask_Reinit );
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <main+0x308>)
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2303      	movs	r3, #3
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	22c8      	movs	r2, #200	; 0xc8
 8000ee4:	4937      	ldr	r1, [pc, #220]	; (8000fc4 <main+0x30c>)
 8000ee6:	4838      	ldr	r0, [pc, #224]	; (8000fc8 <main+0x310>)
 8000ee8:	f004 fa9e 	bl	8005428 <xTaskCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <main+0x2a4>)
 8000ef0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <main+0x2a4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d00a      	beq.n	8000f10 <main+0x258>
        __asm volatile
 8000efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efe:	f383 8811 	msr	BASEPRI, r3
 8000f02:	f3bf 8f6f 	isb	sy
 8000f06:	f3bf 8f4f 	dsb	sy
 8000f0a:	623b      	str	r3, [r7, #32]
    }
 8000f0c:	bf00      	nop
 8000f0e:	e7fe      	b.n	8000f0e <main+0x256>

	 /////////////////////////////////TAREA DE CUADRADO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Square,"Task-Square",STACK_SIZE,NULL,3,&xHandleTask_Square );
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <main+0x314>)
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2303      	movs	r3, #3
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	22c8      	movs	r2, #200	; 0xc8
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <main+0x318>)
 8000f1e:	482d      	ldr	r0, [pc, #180]	; (8000fd4 <main+0x31c>)
 8000f20:	f004 fa82 	bl	8005428 <xTaskCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <main+0x2a4>)
 8000f28:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <main+0x2a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d052      	beq.n	8000fd8 <main+0x320>
        __asm volatile
 8000f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f36:	f383 8811 	msr	BASEPRI, r3
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	f3bf 8f4f 	dsb	sy
 8000f42:	61fb      	str	r3, [r7, #28]
    }
 8000f44:	bf00      	nop
 8000f46:	e7fe      	b.n	8000f46 <main+0x28e>
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	20000230 	.word	0x20000230
 8000f54:	080134cc 	.word	0x080134cc
 8000f58:	0800166d 	.word	0x0800166d
 8000f5c:	2000022c 	.word	0x2000022c
 8000f60:	20000234 	.word	0x20000234
 8000f64:	080134d8 	.word	0x080134d8
 8000f68:	080026ed 	.word	0x080026ed
 8000f6c:	20000238 	.word	0x20000238
 8000f70:	080134e4 	.word	0x080134e4
 8000f74:	080019d1 	.word	0x080019d1
 8000f78:	2000023c 	.word	0x2000023c
 8000f7c:	080134f4 	.word	0x080134f4
 8000f80:	08001a25 	.word	0x08001a25
 8000f84:	20000240 	.word	0x20000240
 8000f88:	08013500 	.word	0x08013500
 8000f8c:	08001a91 	.word	0x08001a91
 8000f90:	20000244 	.word	0x20000244
 8000f94:	08013508 	.word	0x08013508
 8000f98:	08001ad9 	.word	0x08001ad9
 8000f9c:	20000248 	.word	0x20000248
 8000fa0:	08013518 	.word	0x08013518
 8000fa4:	08001ead 	.word	0x08001ead
 8000fa8:	2000024c 	.word	0x2000024c
 8000fac:	08013524 	.word	0x08013524
 8000fb0:	08001fb1 	.word	0x08001fb1
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	08013530 	.word	0x08013530
 8000fbc:	0800200d 	.word	0x0800200d
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	0801353c 	.word	0x0801353c
 8000fc8:	08002671 	.word	0x08002671
 8000fcc:	20000258 	.word	0x20000258
 8000fd0:	08013548 	.word	0x08013548
 8000fd4:	08002085 	.word	0x08002085


	 /////////////////////////////////TAREA DE ASTAR//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Astar,"Task-Astar",STACK_SIZE,NULL,3,&xHandleTask_Astar );
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <main+0x4b4>)
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2303      	movs	r3, #3
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	22c8      	movs	r2, #200	; 0xc8
 8000fe4:	4962      	ldr	r1, [pc, #392]	; (8001170 <main+0x4b8>)
 8000fe6:	4863      	ldr	r0, [pc, #396]	; (8001174 <main+0x4bc>)
 8000fe8:	f004 fa1e 	bl	8005428 <xTaskCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a62      	ldr	r2, [pc, #392]	; (8001178 <main+0x4c0>)
 8000ff0:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000ff2:	4b61      	ldr	r3, [pc, #388]	; (8001178 <main+0x4c0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00a      	beq.n	8001010 <main+0x358>
        __asm volatile
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	61bb      	str	r3, [r7, #24]
    }
 800100c:	bf00      	nop
 800100e:	e7fe      	b.n	800100e <main+0x356>

	 /////////////////////////////////TAREA DE LLENAR GRID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Grid,"Task-Grid",STACK_SIZE,NULL,3,&xHandleTask_Grid );
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <main+0x4c4>)
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2303      	movs	r3, #3
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	22c8      	movs	r2, #200	; 0xc8
 800101c:	4958      	ldr	r1, [pc, #352]	; (8001180 <main+0x4c8>)
 800101e:	4859      	ldr	r0, [pc, #356]	; (8001184 <main+0x4cc>)
 8001020:	f004 fa02 	bl	8005428 <xTaskCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a54      	ldr	r2, [pc, #336]	; (8001178 <main+0x4c0>)
 8001028:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x4c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d00a      	beq.n	8001048 <main+0x390>
        __asm volatile
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	617b      	str	r3, [r7, #20]
    }
 8001044:	bf00      	nop
 8001046:	e7fe      	b.n	8001046 <main+0x38e>

	 /////////////////////////////////TAREA DE CREAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_CrOp,"Task-CrOp",STACK_SIZE,NULL,3,&xHandleTask_CrOp );
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <main+0x4d0>)
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	2303      	movs	r3, #3
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	22c8      	movs	r2, #200	; 0xc8
 8001054:	494d      	ldr	r1, [pc, #308]	; (800118c <main+0x4d4>)
 8001056:	484e      	ldr	r0, [pc, #312]	; (8001190 <main+0x4d8>)
 8001058:	f004 f9e6 	bl	8005428 <xTaskCreate>
 800105c:	4603      	mov	r3, r0
 800105e:	4a46      	ldr	r2, [pc, #280]	; (8001178 <main+0x4c0>)
 8001060:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <main+0x4c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00a      	beq.n	8001080 <main+0x3c8>
        __asm volatile
 800106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	613b      	str	r3, [r7, #16]
    }
 800107c:	bf00      	nop
 800107e:	e7fe      	b.n	800107e <main+0x3c6>

	 /////////////////////////////////TAREA DE PROCESAR OPERACIONES//////////////////////////////////////

	xReturned = xTaskCreate(vTask_PrOp,"Task-PrOp",STACK_SIZE,NULL,3,&xHandleTask_PrOp );
 8001080:	4b44      	ldr	r3, [pc, #272]	; (8001194 <main+0x4dc>)
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2303      	movs	r3, #3
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	22c8      	movs	r2, #200	; 0xc8
 800108c:	4942      	ldr	r1, [pc, #264]	; (8001198 <main+0x4e0>)
 800108e:	4843      	ldr	r0, [pc, #268]	; (800119c <main+0x4e4>)
 8001090:	f004 f9ca 	bl	8005428 <xTaskCreate>
 8001094:	4603      	mov	r3, r0
 8001096:	4a38      	ldr	r2, [pc, #224]	; (8001178 <main+0x4c0>)
 8001098:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <main+0x4c0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00a      	beq.n	80010b8 <main+0x400>
        __asm volatile
 80010a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a6:	f383 8811 	msr	BASEPRI, r3
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	f3bf 8f4f 	dsb	sy
 80010b2:	60fb      	str	r3, [r7, #12]
    }
 80010b4:	bf00      	nop
 80010b6:	e7fe      	b.n	80010b6 <main+0x3fe>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(20,sizeof(char));
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	2014      	movs	r0, #20
 80010be:	f003 fc85 	bl	80049cc <xQueueGenericCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <main+0x4e8>)
 80010c6:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <main+0x4e8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10a      	bne.n	80010e6 <main+0x42e>
        __asm volatile
 80010d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d4:	f383 8811 	msr	BASEPRI, r3
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	60bb      	str	r3, [r7, #8]
    }
 80010e2:	bf00      	nop
 80010e4:	e7fe      	b.n	80010e4 <main+0x42c>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 80010e6:	2200      	movs	r2, #0
 80010e8:	2104      	movs	r1, #4
 80010ea:	200a      	movs	r0, #10
 80010ec:	f003 fc6e 	bl	80049cc <xQueueGenericCreate>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <main+0x4ec>)
 80010f4:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <main+0x4ec>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10a      	bne.n	8001114 <main+0x45c>
        __asm volatile
 80010fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	607b      	str	r3, [r7, #4]
    }
 8001110:	bf00      	nop
 8001112:	e7fe      	b.n	8001112 <main+0x45a>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <main+0x4f0>)
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001120:	4822      	ldr	r0, [pc, #136]	; (80011ac <main+0x4f4>)
 8001122:	f005 fa57 	bl	80065d4 <xTimerCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <main+0x4f8>)
 800112a:	6013      	str	r3, [r2, #0]
									 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <main+0x4f8>)
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	f004 fbbc 	bl	80058ac <xTaskGetTickCount>
 8001134:	4602      	mov	r2, r0
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2101      	movs	r1, #1
 8001140:	4620      	mov	r0, r4
 8001142:	f005 faa3 	bl	800668c <xTimerGenericCommand>


	inSystem ();
 8001146:	f000 f839 	bl	80011bc <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, CALIB_Z);
 800114a:	2102      	movs	r1, #2
 800114c:	4819      	ldr	r0, [pc, #100]	; (80011b4 <main+0x4fc>)
 800114e:	f001 fcf1 	bl	8002b34 <calibracionGyros>
 8001152:	ee10 3a10 	vmov	r3, s0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4915      	ldr	r1, [pc, #84]	; (80011b8 <main+0x500>)
 8001162:	e9c1 2300 	strd	r2, r3, [r1]

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8001166:	f004 faa5 	bl	80056b4 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 800116a:	e7fe      	b.n	800116a <main+0x4b2>
 800116c:	2000025c 	.word	0x2000025c
 8001170:	08013554 	.word	0x08013554
 8001174:	080020f1 	.word	0x080020f1
 8001178:	2000022c 	.word	0x2000022c
 800117c:	20000260 	.word	0x20000260
 8001180:	08013560 	.word	0x08013560
 8001184:	0800219d 	.word	0x0800219d
 8001188:	20000264 	.word	0x20000264
 800118c:	0801356c 	.word	0x0801356c
 8001190:	08002335 	.word	0x08002335
 8001194:	20000268 	.word	0x20000268
 8001198:	08013578 	.word	0x08013578
 800119c:	080023f9 	.word	0x080023f9
 80011a0:	20000270 	.word	0x20000270
 80011a4:	2000026c 	.word	0x2000026c
 80011a8:	080045b5 	.word	0x080045b5
 80011ac:	08013584 	.word	0x08013584
 80011b0:	20000274 	.word	0x20000274
 80011b4:	20000430 	.word	0x20000430
 80011b8:	20000bd8 	.word	0x20000bd8

080011bc <inSystem>:

	}
}


void inSystem (void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af02      	add	r7, sp, #8
//	handlerMCO2Show.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
//	GPIO_Config(&handlerMCO2Show);

	//BLINKY LED

	handlerPinA5.pGPIOx = GPIOA;
 80011c2:	4baf      	ldr	r3, [pc, #700]	; (8001480 <inSystem+0x2c4>)
 80011c4:	4aaf      	ldr	r2, [pc, #700]	; (8001484 <inSystem+0x2c8>)
 80011c6:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 80011c8:	4bad      	ldr	r3, [pc, #692]	; (8001480 <inSystem+0x2c4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80011ce:	4bac      	ldr	r3, [pc, #688]	; (8001480 <inSystem+0x2c4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80011d4:	4baa      	ldr	r3, [pc, #680]	; (8001480 <inSystem+0x2c4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 80011da:	4ba9      	ldr	r3, [pc, #676]	; (8001480 <inSystem+0x2c4>)
 80011dc:	2205      	movs	r2, #5
 80011de:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011e0:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <inSystem+0x2c4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <inSystem+0x2c4>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 80011ec:	48a4      	ldr	r0, [pc, #656]	; (8001480 <inSystem+0x2c4>)
 80011ee:	f009 fca1 	bl	800ab34 <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, SET);
 80011f2:	2101      	movs	r1, #1
 80011f4:	48a2      	ldr	r0, [pc, #648]	; (8001480 <inSystem+0x2c4>)
 80011f6:	f009 fdc7 	bl	800ad88 <GPIO_WritePin>


	// DEFINICION DEL TIM4 PARA DELAY
	inTIM4();
 80011fa:	f007 ff05 	bl	8009008 <inTIM4>


	//////////////////////////// INICIALIZAMOS EL ROBOT//////////////////////
	int_Config_Motor(handler_Motor_Array,
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <inSystem+0x2cc>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <inSystem+0x2d0>)
 8001204:	4aa2      	ldr	r2, [pc, #648]	; (8001490 <inSystem+0x2d4>)
 8001206:	49a3      	ldr	r1, [pc, #652]	; (8001494 <inSystem+0x2d8>)
 8001208:	48a3      	ldr	r0, [pc, #652]	; (8001498 <inSystem+0x2dc>)
 800120a:	f002 fb79 	bl	8003900 <int_Config_Motor>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


	//PWM
	// PWM motor 1
	handlerPinPwm_1.pGPIOx                             = GPIOA;
 800120e:	4ba3      	ldr	r3, [pc, #652]	; (800149c <inSystem+0x2e0>)
 8001210:	4a9c      	ldr	r2, [pc, #624]	; (8001484 <inSystem+0x2c8>)
 8001212:	601a      	str	r2, [r3, #0]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001214:	4ba1      	ldr	r3, [pc, #644]	; (800149c <inSystem+0x2e0>)
 8001216:	2202      	movs	r2, #2
 8001218:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800121a:	4ba0      	ldr	r3, [pc, #640]	; (800149c <inSystem+0x2e0>)
 800121c:	2202      	movs	r2, #2
 800121e:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001220:	4b9e      	ldr	r3, [pc, #632]	; (800149c <inSystem+0x2e0>)
 8001222:	2200      	movs	r2, #0
 8001224:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8001226:	4b9d      	ldr	r3, [pc, #628]	; (800149c <inSystem+0x2e0>)
 8001228:	2200      	movs	r2, #0
 800122a:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800122c:	4b9b      	ldr	r3, [pc, #620]	; (800149c <inSystem+0x2e0>)
 800122e:	2200      	movs	r2, #0
 8001230:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001232:	4b9a      	ldr	r3, [pc, #616]	; (800149c <inSystem+0x2e0>)
 8001234:	2202      	movs	r2, #2
 8001236:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_1);
 8001238:	4898      	ldr	r0, [pc, #608]	; (800149c <inSystem+0x2e0>)
 800123a:	f009 fc7b 	bl	800ab34 <GPIO_Config>

	handlerPWM_1.ptrTIMx            = TIM5;
 800123e:	4b98      	ldr	r3, [pc, #608]	; (80014a0 <inSystem+0x2e4>)
 8001240:	4a98      	ldr	r2, [pc, #608]	; (80014a4 <inSystem+0x2e8>)
 8001242:	601a      	str	r2, [r3, #0]
	handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8001244:	4b96      	ldr	r3, [pc, #600]	; (80014a0 <inSystem+0x2e4>)
 8001246:	2200      	movs	r2, #0
 8001248:	721a      	strb	r2, [r3, #8]
	handlerPWM_1.config.duttyCicle  = fixed_dutty;
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <inSystem+0x2e4>)
 800124c:	4a96      	ldr	r2, [pc, #600]	; (80014a8 <inSystem+0x2ec>)
 800124e:	619a      	str	r2, [r3, #24]
//	counter = fixed_dutty;
	handlerPWM_1.config.periodo     = 33; // se maneja 25 hz por testeo
 8001250:	4993      	ldr	r1, [pc, #588]	; (80014a0 <inSystem+0x2e4>)
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b95      	ldr	r3, [pc, #596]	; (80014ac <inSystem+0x2f0>)
 8001258:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 800125c:	4b90      	ldr	r3, [pc, #576]	; (80014a0 <inSystem+0x2e4>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	60da      	str	r2, [r3, #12]
	handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8001262:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <inSystem+0x2e4>)
 8001264:	2201      	movs	r2, #1
 8001266:	771a      	strb	r2, [r3, #28]
	handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001268:	4b8d      	ldr	r3, [pc, #564]	; (80014a0 <inSystem+0x2e4>)
 800126a:	2201      	movs	r2, #1
 800126c:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_1);
 800126e:	488c      	ldr	r0, [pc, #560]	; (80014a0 <inSystem+0x2e4>)
 8001270:	f00a fcca 	bl	800bc08 <pwm_Config>
	startPwmSignal(&handlerPWM_1);
 8001274:	488a      	ldr	r0, [pc, #552]	; (80014a0 <inSystem+0x2e4>)
 8001276:	f00a fdb1 	bl	800bddc <startPwmSignal>

	//PWM motor 2
	handlerPinPwm_2.pGPIOx                             = GPIOA;
 800127a:	4b8d      	ldr	r3, [pc, #564]	; (80014b0 <inSystem+0x2f4>)
 800127c:	4a81      	ldr	r2, [pc, #516]	; (8001484 <inSystem+0x2c8>)
 800127e:	601a      	str	r2, [r3, #0]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <inSystem+0x2f4>)
 8001282:	2202      	movs	r2, #2
 8001284:	725a      	strb	r2, [r3, #9]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001286:	4b8a      	ldr	r3, [pc, #552]	; (80014b0 <inSystem+0x2f4>)
 8001288:	2202      	movs	r2, #2
 800128a:	715a      	strb	r2, [r3, #5]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <inSystem+0x2f4>)
 800128e:	2200      	movs	r2, #0
 8001290:	721a      	strb	r2, [r3, #8]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 8001292:	4b87      	ldr	r3, [pc, #540]	; (80014b0 <inSystem+0x2f4>)
 8001294:	2201      	movs	r2, #1
 8001296:	711a      	strb	r2, [r3, #4]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001298:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <inSystem+0x2f4>)
 800129a:	2200      	movs	r2, #0
 800129c:	71da      	strb	r2, [r3, #7]
	handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800129e:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <inSystem+0x2f4>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinPwm_2);
 80012a4:	4882      	ldr	r0, [pc, #520]	; (80014b0 <inSystem+0x2f4>)
 80012a6:	f009 fc45 	bl	800ab34 <GPIO_Config>

	handlerPWM_2.ptrTIMx            = TIM5;
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <inSystem+0x2f8>)
 80012ac:	4a7d      	ldr	r2, [pc, #500]	; (80014a4 <inSystem+0x2e8>)
 80012ae:	601a      	str	r2, [r3, #0]
	handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 80012b0:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <inSystem+0x2f8>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	721a      	strb	r2, [r3, #8]
	handlerPWM_2.config.duttyCicle  = fixed_dutty;
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <inSystem+0x2f8>)
 80012b8:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <inSystem+0x2ec>)
 80012ba:	619a      	str	r2, [r3, #24]
	handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 80012bc:	497d      	ldr	r1, [pc, #500]	; (80014b4 <inSystem+0x2f8>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b7a      	ldr	r3, [pc, #488]	; (80014ac <inSystem+0x2f0>)
 80012c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <inSystem+0x2f8>)
 80012ca:	2264      	movs	r2, #100	; 0x64
 80012cc:	60da      	str	r2, [r3, #12]
	handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 80012ce:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <inSystem+0x2f8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	771a      	strb	r2, [r3, #28]
	handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <inSystem+0x2f8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	775a      	strb	r2, [r3, #29]
	pwm_Config(&handlerPWM_2);
 80012da:	4876      	ldr	r0, [pc, #472]	; (80014b4 <inSystem+0x2f8>)
 80012dc:	f00a fc94 	bl	800bc08 <pwm_Config>
	startPwmSignal(&handlerPWM_2);
 80012e0:	4874      	ldr	r0, [pc, #464]	; (80014b4 <inSystem+0x2f8>)
 80012e2:	f00a fd7b 	bl	800bddc <startPwmSignal>

	////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



	handlerEn1PinC10.pGPIOx                             = GPIOC;
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <inSystem+0x2fc>)
 80012e8:	4a74      	ldr	r2, [pc, #464]	; (80014bc <inSystem+0x300>)
 80012ea:	601a      	str	r2, [r3, #0]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80012ec:	4b72      	ldr	r3, [pc, #456]	; (80014b8 <inSystem+0x2fc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	725a      	strb	r2, [r3, #9]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80012f2:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <inSystem+0x2fc>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	715a      	strb	r2, [r3, #5]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 80012f8:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <inSystem+0x2fc>)
 80012fa:	220a      	movs	r2, #10
 80012fc:	711a      	strb	r2, [r3, #4]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80012fe:	4b6e      	ldr	r3, [pc, #440]	; (80014b8 <inSystem+0x2fc>)
 8001300:	2200      	movs	r2, #0
 8001302:	721a      	strb	r2, [r3, #8]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001304:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <inSystem+0x2fc>)
 8001306:	2200      	movs	r2, #0
 8001308:	71da      	strb	r2, [r3, #7]
	handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800130a:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <inSystem+0x2fc>)
 800130c:	2202      	movs	r2, #2
 800130e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn1PinC10);
 8001310:	4869      	ldr	r0, [pc, #420]	; (80014b8 <inSystem+0x2fc>)
 8001312:	f009 fc0f 	bl	800ab34 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001316:	2100      	movs	r1, #0
 8001318:	4867      	ldr	r0, [pc, #412]	; (80014b8 <inSystem+0x2fc>)
 800131a:	f009 fd60 	bl	800adde <GPIO_WritePin_Afopt>

	handlerEn2PinC11.pGPIOx                             = GPIOC;
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <inSystem+0x304>)
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <inSystem+0x300>)
 8001322:	601a      	str	r2, [r3, #0]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <inSystem+0x304>)
 8001326:	2200      	movs	r2, #0
 8001328:	725a      	strb	r2, [r3, #9]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <inSystem+0x304>)
 800132c:	2201      	movs	r2, #1
 800132e:	715a      	strb	r2, [r3, #5]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <inSystem+0x304>)
 8001332:	220b      	movs	r2, #11
 8001334:	711a      	strb	r2, [r3, #4]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <inSystem+0x304>)
 8001338:	2200      	movs	r2, #0
 800133a:	721a      	strb	r2, [r3, #8]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <inSystem+0x304>)
 800133e:	2200      	movs	r2, #0
 8001340:	71da      	strb	r2, [r3, #7]
	handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <inSystem+0x304>)
 8001344:	2202      	movs	r2, #2
 8001346:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerEn2PinC11);
 8001348:	485d      	ldr	r0, [pc, #372]	; (80014c0 <inSystem+0x304>)
 800134a:	f009 fbf3 	bl	800ab34 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 800134e:	2100      	movs	r1, #0
 8001350:	485b      	ldr	r0, [pc, #364]	; (80014c0 <inSystem+0x304>)
 8001352:	f009 fd44 	bl	800adde <GPIO_WritePin_Afopt>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

	handlerIn1PinC12.pGPIOx                             = GPIOC;
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <inSystem+0x308>)
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <inSystem+0x300>)
 800135a:	601a      	str	r2, [r3, #0]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800135c:	4b59      	ldr	r3, [pc, #356]	; (80014c4 <inSystem+0x308>)
 800135e:	2200      	movs	r2, #0
 8001360:	725a      	strb	r2, [r3, #9]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <inSystem+0x308>)
 8001364:	2201      	movs	r2, #1
 8001366:	715a      	strb	r2, [r3, #5]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <inSystem+0x308>)
 800136a:	220c      	movs	r2, #12
 800136c:	711a      	strb	r2, [r3, #4]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <inSystem+0x308>)
 8001370:	2200      	movs	r2, #0
 8001372:	721a      	strb	r2, [r3, #8]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <inSystem+0x308>)
 8001376:	2200      	movs	r2, #0
 8001378:	71da      	strb	r2, [r3, #7]
	handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800137a:	4b52      	ldr	r3, [pc, #328]	; (80014c4 <inSystem+0x308>)
 800137c:	2202      	movs	r2, #2
 800137e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn1PinC12);
 8001380:	4850      	ldr	r0, [pc, #320]	; (80014c4 <inSystem+0x308>)
 8001382:	f009 fbd7 	bl	800ab34 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default SET
 8001386:	2100      	movs	r1, #0
 8001388:	484e      	ldr	r0, [pc, #312]	; (80014c4 <inSystem+0x308>)
 800138a:	f009 fd28 	bl	800adde <GPIO_WritePin_Afopt>
	handler_Motor_Array[0]->configMotor.dir = SET;
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <inSystem+0x2dc>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	771a      	strb	r2, [r3, #28]

	handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <inSystem+0x30c>)
 8001398:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <inSystem+0x310>)
 800139a:	601a      	str	r2, [r3, #0]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <inSystem+0x30c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	725a      	strb	r2, [r3, #9]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <inSystem+0x30c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	715a      	strb	r2, [r3, #5]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <inSystem+0x30c>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	711a      	strb	r2, [r3, #4]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <inSystem+0x30c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	721a      	strb	r2, [r3, #8]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <inSystem+0x30c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	71da      	strb	r2, [r3, #7]
	handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <inSystem+0x30c>)
 80013bc:	2202      	movs	r2, #2
 80013be:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerIn2PinD2);
 80013c0:	4841      	ldr	r0, [pc, #260]	; (80014c8 <inSystem+0x30c>)
 80013c2:	f009 fbb7 	bl	800ab34 <GPIO_Config>
	GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default SET
 80013c6:	2100      	movs	r1, #0
 80013c8:	483f      	ldr	r0, [pc, #252]	; (80014c8 <inSystem+0x30c>)
 80013ca:	f009 fd08 	bl	800adde <GPIO_WritePin_Afopt>
	handler_Motor_Array[1]->configMotor.dir = SET;
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <inSystem+0x2dc>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	771a      	strb	r2, [r3, #28]
	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


	handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <inSystem+0x314>)
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <inSystem+0x300>)
 80013da:	601a      	str	r2, [r3, #0]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <inSystem+0x314>)
 80013de:	2200      	movs	r2, #0
 80013e0:	725a      	strb	r2, [r3, #9]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <inSystem+0x314>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	715a      	strb	r2, [r3, #5]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <inSystem+0x314>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	711a      	strb	r2, [r3, #4]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <inSystem+0x314>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <inSystem+0x314>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	71da      	strb	r2, [r3, #7]
	handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <inSystem+0x314>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001400:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <inSystem+0x318>)
 8001402:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <inSystem+0x314>)
 8001404:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <inSystem+0x318>)
 8001408:	2202      	movs	r2, #2
 800140a:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_1);
 800140c:	4831      	ldr	r0, [pc, #196]	; (80014d4 <inSystem+0x318>)
 800140e:	f008 fac9 	bl	80099a4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_1, e_EXTI_PRIORITY_6);
 8001412:	2106      	movs	r1, #6
 8001414:	482f      	ldr	r0, [pc, #188]	; (80014d4 <inSystem+0x318>)
 8001416:	f009 f96d 	bl	800a6f4 <exti_Set_Priority>

	handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <inSystem+0x31c>)
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <inSystem+0x300>)
 800141e:	601a      	str	r2, [r3, #0]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <inSystem+0x31c>)
 8001422:	2200      	movs	r2, #0
 8001424:	725a      	strb	r2, [r3, #9]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <inSystem+0x31c>)
 8001428:	2200      	movs	r2, #0
 800142a:	715a      	strb	r2, [r3, #5]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <inSystem+0x31c>)
 800142e:	2203      	movs	r2, #3
 8001430:	711a      	strb	r2, [r3, #4]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <inSystem+0x31c>)
 8001434:	2200      	movs	r2, #0
 8001436:	721a      	strb	r2, [r3, #8]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <inSystem+0x31c>)
 800143a:	2200      	movs	r2, #0
 800143c:	71da      	strb	r2, [r3, #7]
	handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <inSystem+0x31c>)
 8001440:	2202      	movs	r2, #2
 8001442:	719a      	strb	r2, [r3, #6]
	handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <inSystem+0x320>)
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <inSystem+0x31c>)
 8001448:	601a      	str	r2, [r3, #0]
	handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <inSystem+0x320>)
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]
	extInt_Config(&handlerExtiConEnc_2);
 8001450:	4822      	ldr	r0, [pc, #136]	; (80014dc <inSystem+0x320>)
 8001452:	f008 faa7 	bl	80099a4 <extInt_Config>
	exti_Set_Priority(&handlerExtiConEnc_2, e_EXTI_PRIORITY_6);
 8001456:	2106      	movs	r1, #6
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <inSystem+0x320>)
 800145a:	f009 f94b 	bl	800a6f4 <exti_Set_Priority>
		/////////A2 TX // A3 RX PARA USART 2 /////////
		////////A9 TX // A10 RX PARA USART 1 ////////

	//Comunicacion serial

	handlerPinTx.pGPIOx                             = GPIOA;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <inSystem+0x324>)
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <inSystem+0x2c8>)
 8001462:	601a      	str	r2, [r3, #0]
	handlerPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <inSystem+0x324>)
 8001466:	2207      	movs	r2, #7
 8001468:	725a      	strb	r2, [r3, #9]
	handlerPinTx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <inSystem+0x324>)
 800146c:	2202      	movs	r2, #2
 800146e:	715a      	strb	r2, [r3, #5]
	handlerPinTx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <inSystem+0x324>)
 8001472:	2200      	movs	r2, #0
 8001474:	721a      	strb	r2, [r3, #8]
	handlerPinTx.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <inSystem+0x324>)
 8001478:	2202      	movs	r2, #2
 800147a:	711a      	strb	r2, [r3, #4]
 800147c:	e032      	b.n	80014e4 <inSystem+0x328>
 800147e:	bf00      	nop
 8001480:	20000278 	.word	0x20000278
 8001484:	40020000 	.word	0x40020000
 8001488:	200005dc 	.word	0x200005dc
 800148c:	200005f0 	.word	0x200005f0
 8001490:	20000610 	.word	0x20000610
 8001494:	20000b30 	.word	0x20000b30
 8001498:	20000440 	.word	0x20000440
 800149c:	20000284 	.word	0x20000284
 80014a0:	20000350 	.word	0x20000350
 80014a4:	40000c00 	.word	0x40000c00
 80014a8:	41e00000 	.word	0x41e00000
 80014ac:	40408000 	.word	0x40408000
 80014b0:	20000290 	.word	0x20000290
 80014b4:	20000370 	.word	0x20000370
 80014b8:	200002c0 	.word	0x200002c0
 80014bc:	40020800 	.word	0x40020800
 80014c0:	200002b4 	.word	0x200002b4
 80014c4:	200002d8 	.word	0x200002d8
 80014c8:	200002cc 	.word	0x200002cc
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	200002e4 	.word	0x200002e4
 80014d4:	20000314 	.word	0x20000314
 80014d8:	200002f0 	.word	0x200002f0
 80014dc:	2000031c 	.word	0x2000031c
 80014e0:	200002a8 	.word	0x200002a8
	handlerPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <inSystem+0x47c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	71da      	strb	r2, [r3, #7]
	handlerPinTx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <inSystem+0x47c>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinTx);
 80014f0:	4851      	ldr	r0, [pc, #324]	; (8001638 <inSystem+0x47c>)
 80014f2:	f009 fb1f 	bl	800ab34 <GPIO_Config>

	handlerPinRx.pGPIOx                             = GPIOA;
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <inSystem+0x480>)
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <inSystem+0x484>)
 80014fa:	601a      	str	r2, [r3, #0]
	handlerPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = AF7;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <inSystem+0x480>)
 80014fe:	2207      	movs	r2, #7
 8001500:	725a      	strb	r2, [r3, #9]
	handlerPinRx.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <inSystem+0x480>)
 8001504:	2202      	movs	r2, #2
 8001506:	715a      	strb	r2, [r3, #5]
	handlerPinRx.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <inSystem+0x480>)
 800150a:	2200      	movs	r2, #0
 800150c:	721a      	strb	r2, [r3, #8]
	handlerPinRx.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <inSystem+0x480>)
 8001510:	2203      	movs	r2, #3
 8001512:	711a      	strb	r2, [r3, #4]
	handlerPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <inSystem+0x480>)
 8001516:	2200      	movs	r2, #0
 8001518:	71da      	strb	r2, [r3, #7]
	handlerPinRx.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <inSystem+0x480>)
 800151c:	2203      	movs	r2, #3
 800151e:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinRx);
 8001520:	4846      	ldr	r0, [pc, #280]	; (800163c <inSystem+0x480>)
 8001522:	f009 fb07 	bl	800ab34 <GPIO_Config>

	handlerUSART.ptrUSARTx                      = USART2;
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <inSystem+0x488>)
 8001528:	4a47      	ldr	r2, [pc, #284]	; (8001648 <inSystem+0x48c>)
 800152a:	601a      	str	r2, [r3, #0]
	handlerUSART.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <inSystem+0x488>)
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <inSystem+0x490>)
 8001530:	60da      	str	r2, [r3, #12]
	handlerUSART.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <inSystem+0x488>)
 8001534:	2201      	movs	r2, #1
 8001536:	71da      	strb	r2, [r3, #7]
	handlerUSART.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <inSystem+0x488>)
 800153a:	2201      	movs	r2, #1
 800153c:	715a      	strb	r2, [r3, #5]
	handlerUSART.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <inSystem+0x488>)
 8001540:	2200      	movs	r2, #0
 8001542:	711a      	strb	r2, [r3, #4]
	handlerUSART.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001544:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <inSystem+0x488>)
 8001546:	2202      	movs	r2, #2
 8001548:	719a      	strb	r2, [r3, #6]
	handlerUSART.USART_Config.USART_parity      = USART_PARITY_NONE;
 800154a:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <inSystem+0x488>)
 800154c:	2200      	movs	r2, #0
 800154e:	725a      	strb	r2, [r3, #9]
	handlerUSART.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <inSystem+0x488>)
 8001552:	2200      	movs	r2, #0
 8001554:	729a      	strb	r2, [r3, #10]
	handlerUSART.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <inSystem+0x488>)
 8001558:	2200      	movs	r2, #0
 800155a:	721a      	strb	r2, [r3, #8]
	USART_Config(&handlerUSART);
 800155c:	4839      	ldr	r0, [pc, #228]	; (8001644 <inSystem+0x488>)
 800155e:	f00b fbcd 	bl	800ccfc <USART_Config>
	usart_Set_Priority(&handlerUSART, e_USART_PRIORITY_6);
 8001562:	2106      	movs	r1, #6
 8001564:	4837      	ldr	r0, [pc, #220]	; (8001644 <inSystem+0x488>)
 8001566:	f00c f87b 	bl	800d660 <usart_Set_Priority>

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	///////////////////////////////////////////Timer para el control de la velocidad//////////////////////////////////////////////

	handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <inSystem+0x494>)
 800156c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001570:	601a      	str	r2, [r3, #0]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <inSystem+0x494>)
 8001574:	2201      	movs	r2, #1
 8001576:	741a      	strb	r2, [r3, #16]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <inSystem+0x494>)
 800157a:	2200      	movs	r2, #0
 800157c:	711a      	strb	r2, [r3, #4]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <inSystem+0x494>)
 8001580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001584:	609a      	str	r2, [r3, #8]
	handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = fixed_sample_period;
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <inSystem+0x494>)
 8001588:	2210      	movs	r2, #16
 800158a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <inSystem+0x494>)
 800158e:	f007 fd57 	bl	8009040 <BasicTimer_Config>
	TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 8001592:	2106      	movs	r1, #6
 8001594:	482e      	ldr	r0, [pc, #184]	; (8001650 <inSystem+0x494>)
 8001596:	f007 ff11 	bl	80093bc <TIM_SetPriority>
	startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO); // Comenzamos el muestreo de datos con los que aplicaremos un control adecuado
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <inSystem+0x494>)
 800159c:	f008 f996 	bl	80098cc <startTimer>
//
//	handler_DMA1[1]->ptrDMAType = DMA1;
//	handler_DMA1[1]->ptrDMAStream = DMA1_Stream6;
//	config_DMA(handler_DMA1);

	handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <inSystem+0x498>)
 80015a2:	4a2d      	ldr	r2, [pc, #180]	; (8001658 <inSystem+0x49c>)
 80015a4:	601a      	str	r2, [r3, #0]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <inSystem+0x498>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	725a      	strb	r2, [r3, #9]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <inSystem+0x498>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	715a      	strb	r2, [r3, #5]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <inSystem+0x498>)
 80015b4:	2208      	movs	r2, #8
 80015b6:	711a      	strb	r2, [r3, #4]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <inSystem+0x498>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	721a      	strb	r2, [r3, #8]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <inSystem+0x498>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	71da      	strb	r2, [r3, #7]
	handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <inSystem+0x498>)
 80015c6:	2202      	movs	r2, #2
 80015c8:	719a      	strb	r2, [r3, #6]

	handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <inSystem+0x4a0>)
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <inSystem+0x49c>)
 80015ce:	601a      	str	r2, [r3, #0]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <inSystem+0x4a0>)
 80015d2:	2204      	movs	r2, #4
 80015d4:	725a      	strb	r2, [r3, #9]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <inSystem+0x4a0>)
 80015d8:	2202      	movs	r2, #2
 80015da:	715a      	strb	r2, [r3, #5]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <inSystem+0x4a0>)
 80015de:	2209      	movs	r2, #9
 80015e0:	711a      	strb	r2, [r3, #4]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <inSystem+0x4a0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	721a      	strb	r2, [r3, #8]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <inSystem+0x4a0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	71da      	strb	r2, [r3, #7]
	handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <inSystem+0x4a0>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	719a      	strb	r2, [r3, #6]

	handler_I2C1.ptrI2Cx = I2C1;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <inSystem+0x4a4>)
 80015f6:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <inSystem+0x4a8>)
 80015f8:	601a      	str	r2, [r3, #0]
	handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <inSystem+0x4a4>)
 80015fc:	2232      	movs	r2, #50	; 0x32
 80015fe:	71da      	strb	r2, [r3, #7]
	handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <inSystem+0x4a4>)
 8001602:	2268      	movs	r2, #104	; 0x68
 8001604:	711a      	strb	r2, [r3, #4]
	handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <inSystem+0x4a4>)
 8001608:	2201      	movs	r2, #1
 800160a:	715a      	strb	r2, [r3, #5]

	handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <inSystem+0x4ac>)
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <inSystem+0x498>)
 8001610:	605a      	str	r2, [r3, #4]
	handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <inSystem+0x4ac>)
 8001614:	4a11      	ldr	r2, [pc, #68]	; (800165c <inSystem+0x4a0>)
 8001616:	609a      	str	r2, [r3, #8]
	handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <inSystem+0x4ac>)
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <inSystem+0x4a4>)
 800161c:	60da      	str	r2, [r3, #12]
	handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <inSystem+0x4ac>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <inSystem+0x4ac>)
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]
	configMPUAccel(&handler_MPUAccel_6050);
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <inSystem+0x4ac>)
 800162c:	f009 fc3a 	bl	800aea4 <configMPUAccel>

}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002a8 	.word	0x200002a8
 800163c:	2000029c 	.word	0x2000029c
 8001640:	40020000 	.word	0x40020000
 8001644:	20000390 	.word	0x20000390
 8001648:	40004400 	.word	0x40004400
 800164c:	02faf080 	.word	0x02faf080
 8001650:	20000324 	.word	0x20000324
 8001654:	200002fc 	.word	0x200002fc
 8001658:	40020400 	.word	0x40020400
 800165c:	20000308 	.word	0x20000308
 8001660:	20000424 	.word	0x20000424
 8001664:	40005400 	.word	0x40005400
 8001668:	20000430 	.word	0x20000430

0800166c <vTask_Menu>:


//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "\n===============================================\n"
 8001674:	4bab      	ldr	r3, [pc, #684]	; (8001924 <vTask_Menu+0x2b8>)
 8001676:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here: ";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		if (!end){
 8001678:	4bab      	ldr	r3, [pc, #684]	; (8001928 <vTask_Menu+0x2bc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d108      	bne.n	8001692 <vTask_Menu+0x26>
			xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 8001680:	4baa      	ldr	r3, [pc, #680]	; (800192c <vTask_Menu+0x2c0>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	f107 010c 	add.w	r1, r7, #12
 8001688:	2300      	movs	r3, #0
 800168a:	f04f 32ff 	mov.w	r2, #4294967295
 800168e:	f003 fa1f 	bl	8004ad0 <xQueueGenericSend>
		}
		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f004 fc9d 	bl	8005fe0 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	617b      	str	r3, [r7, #20]

		if (end){
 80016aa:	4b9f      	ldr	r3, [pc, #636]	; (8001928 <vTask_Menu+0x2bc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <vTask_Menu+0x60>

			 next_state = sMainMenu; // Cambiamos el estado actual al de menu
 80016b2:	4b9f      	ldr	r3, [pc, #636]	; (8001930 <vTask_Menu+0x2c4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
			 end = RESET; // Bajamos la bandera
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <vTask_Menu+0x2bc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]

			 //Reseteamos la cola para recibir nuevos comandos
			 xQueueReset(xQueue_InputData);
 80016be:	4b9d      	ldr	r3, [pc, #628]	; (8001934 <vTask_Menu+0x2c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 f919 	bl	80048fc <xQueueGenericReset>
 80016ca:	e7d5      	b.n	8001678 <vTask_Menu+0xc>
		}else if (!flag_PrOp){
 80016cc:	4b9a      	ldr	r3, [pc, #616]	; (8001938 <vTask_Menu+0x2cc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8104 	bne.w	80018de <vTask_Menu+0x272>

			// El comando recibido solo tener el largo de 1 caracter
			if(cmd->functionType != -1){
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	f000 80d4 	beq.w	800188a <vTask_Menu+0x21e>

				switch (cmd->functionType) {
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	f200 8164 	bhi.w	80019b6 <vTask_Menu+0x34a>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <vTask_Menu+0x88>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001711 	.word	0x08001711
 80016f8:	08001747 	.word	0x08001747
 80016fc:	0800177d 	.word	0x0800177d
 8001700:	080017b3 	.word	0x080017b3
 8001704:	080017e9 	.word	0x080017e9
 8001708:	0800181f 	.word	0x0800181f
 800170c:	08001855 	.word	0x08001855
					case 1:{// sGo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001710:	4b86      	ldr	r3, [pc, #536]	; (800192c <vTask_Menu+0x2c0>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	f04f 32ff 	mov.w	r2, #4294967295
 800171a:	4988      	ldr	r1, [pc, #544]	; (800193c <vTask_Menu+0x2d0>)
 800171c:	f003 f9d8 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001720:	4b84      	ldr	r3, [pc, #528]	; (8001934 <vTask_Menu+0x2c8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f003 f8e8 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGo;
 800172c:	4b80      	ldr	r3, [pc, #512]	; (8001930 <vTask_Menu+0x2c4>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Go, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGo
 8001732:	4b83      	ldr	r3, [pc, #524]	; (8001940 <vTask_Menu+0x2d4>)
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	2300      	movs	r3, #0
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	f004 fcce 	bl	80060e0 <xTaskGenericNotify>


						break;
 8001744:	e138      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 2:{// sGoTo

						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <vTask_Menu+0x2c0>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	497c      	ldr	r1, [pc, #496]	; (8001944 <vTask_Menu+0x2d8>)
 8001752:	f003 f9bd 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <vTask_Menu+0x2c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f003 f8cd 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sGoTo;
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <vTask_Menu+0x2c4>)
 8001764:	2202      	movs	r2, #2
 8001766:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_GoTo, 0 ,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 8001768:	4b77      	ldr	r3, [pc, #476]	; (8001948 <vTask_Menu+0x2dc>)
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	f004 fcb3 	bl	80060e0 <xTaskGenericNotify>


						break;
 800177a:	e11d      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 3:{ // sRoll
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_3,portMAX_DELAY);
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <vTask_Menu+0x2c0>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	2300      	movs	r3, #0
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	4971      	ldr	r1, [pc, #452]	; (800194c <vTask_Menu+0x2e0>)
 8001788:	f003 f9a2 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800178c:	4b69      	ldr	r3, [pc, #420]	; (8001934 <vTask_Menu+0x2c8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f8b2 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRoll;
 8001798:	4b65      	ldr	r3, [pc, #404]	; (8001930 <vTask_Menu+0x2c4>)
 800179a:	2204      	movs	r2, #4
 800179c:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Roll, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRoll
 800179e:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <vTask_Menu+0x2e4>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	f004 fc98 	bl	80060e0 <xTaskGenericNotify>


						break;
 80017b0:	e102      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 4:{ // sRollTo
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 80017b2:	4b5e      	ldr	r3, [pc, #376]	; (800192c <vTask_Menu+0x2c0>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	4965      	ldr	r1, [pc, #404]	; (8001954 <vTask_Menu+0x2e8>)
 80017be:	f003 f987 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017c2:	4b5c      	ldr	r3, [pc, #368]	; (8001934 <vTask_Menu+0x2c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 f897 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sRollTo;
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <vTask_Menu+0x2c4>)
 80017d0:	2205      	movs	r2, #5
 80017d2:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Rollto, 0 ,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80017d4:	4b60      	ldr	r3, [pc, #384]	; (8001958 <vTask_Menu+0x2ec>)
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	f004 fc7d 	bl	80060e0 <xTaskGenericNotify>


						break;
 80017e6:	e0e7      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 5:{ // Reinit
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_5,portMAX_DELAY);
 80017e8:	4b50      	ldr	r3, [pc, #320]	; (800192c <vTask_Menu+0x2c0>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	495a      	ldr	r1, [pc, #360]	; (800195c <vTask_Menu+0x2f0>)
 80017f4:	f003 f96c 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80017f8:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <vTask_Menu+0x2c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 f87c 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state  = Aux;
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <vTask_Menu+0x2c4>)
 8001806:	2208      	movs	r2, #8
 8001808:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Reinit, 0 ,eNoAction); // NOS VAMOS AL ESTADO Reinit
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <vTask_Menu+0x2f4>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	f004 fc62 	bl	80060e0 <xTaskGenericNotify>


						break;
 800181c:	e0cc      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 6:{ // sSquare
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_6,portMAX_DELAY);
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <vTask_Menu+0x2c0>)
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	494e      	ldr	r1, [pc, #312]	; (8001964 <vTask_Menu+0x2f8>)
 800182a:	f003 f951 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <vTask_Menu+0x2c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f861 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sSquare;
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <vTask_Menu+0x2c4>)
 800183c:	2207      	movs	r2, #7
 800183e:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Square, 0 ,eNoAction); // NOS VAMOS AL ESTADO sSquare
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <vTask_Menu+0x2fc>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2300      	movs	r3, #0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	f004 fc47 	bl	80060e0 <xTaskGenericNotify>


						break;
 8001852:	e0b1      	b.n	80019b8 <vTask_Menu+0x34c>
					}case 7:{ // sAstar
						//Envia a imprimir en la consola lo que se debe mostrar en el menu
						xQueueSend(xQueue_Print,&msg_option_7,portMAX_DELAY);
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <vTask_Menu+0x2c0>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	f04f 32ff 	mov.w	r2, #4294967295
 800185e:	4943      	ldr	r1, [pc, #268]	; (800196c <vTask_Menu+0x300>)
 8001860:	f003 f936 	bl	8004ad0 <xQueueGenericSend>
						xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <vTask_Menu+0x2c8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f846 	bl	80048fc <xQueueGenericReset>

						// Aca se deberia notificar para cambiar la variable next_state y notification
						next_state = sAstar;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <vTask_Menu+0x2c4>)
 8001872:	2206      	movs	r2, #6
 8001874:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Astar, 0 ,eNoAction); // NOS VAMOS AL ESTADO sAstar
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <vTask_Menu+0x304>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	f004 fc2c 	bl	80060e0 <xTaskGenericNotify>
						break;
 8001888:	e096      	b.n	80019b8 <vTask_Menu+0x34c>
						///////
						continue;}
				}

			}else{
				xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 800188a:	4b28      	ldr	r3, [pc, #160]	; (800192c <vTask_Menu+0x2c0>)
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	4937      	ldr	r1, [pc, #220]	; (8001974 <vTask_Menu+0x308>)
 8001896:	f003 f91b 	bl	8004ad0 <xQueueGenericSend>
				//Aca se deberia notificar cambiar la variable next_state y notificar
				wrong_command = RESET; // RESETEAMOS LA BANDERA
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <vTask_Menu+0x30c>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
				xQueueReset(xQueue_InputData); // Reseteamos la cola que recibe los comandos
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <vTask_Menu+0x2c8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f828 	bl	80048fc <xQueueGenericReset>
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00c f99c 	bl	800dbf0 <memset>

				xTaskNotify(xHandleTask_Menu,0,eNoAction); // Notificamos a la funcion menu para que pueda inmediatamente mandar de nuevo el menu
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <vTask_Menu+0x310>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	f004 fc0b 	bl	80060e0 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f004 fb82 	bl	8005fe0 <xTaskGenericNotifyWait>
 80018dc:	e6cc      	b.n	8001678 <vTask_Menu+0xc>
			}
		}else{
			// Si estamos aqu es porque llegamos al menu a traves del procesamiento de operaciones
			// solo se cambiara momentaneamente el estado para procesarlo y luego de terminado, se

			switch (cmd->functionType) {
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d002      	beq.n	80018ec <vTask_Menu+0x280>
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d04a      	beq.n	8001980 <vTask_Menu+0x314>
					xTaskNotify(xHandleTask_Rollto,0,eNoAction); // NOS VAMOS AL ESTADO sRollTo

					break;
				}default:{
					///////
					continue;}
 80018ea:	e065      	b.n	80019b8 <vTask_Menu+0x34c>
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <vTask_Menu+0x2c0>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	f04f 32ff 	mov.w	r2, #4294967295
 80018f6:	4913      	ldr	r1, [pc, #76]	; (8001944 <vTask_Menu+0x2d8>)
 80018f8:	f003 f8ea 	bl	8004ad0 <xQueueGenericSend>
					xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <vTask_Menu+0x2c8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fffa 	bl	80048fc <xQueueGenericReset>
					next_state = sGoTo;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <vTask_Menu+0x2c4>)
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_GoTo,0,eNoAction); // NOS VAMOS AL ESTADO sGoTo
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <vTask_Menu+0x2dc>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	f004 fbe0 	bl	80060e0 <xTaskGenericNotify>
					break;
 8001920:	e04a      	b.n	80019b8 <vTask_Menu+0x34c>
 8001922:	bf00      	nop
 8001924:	08013590 	.word	0x08013590
 8001928:	200005e5 	.word	0x200005e5
 800192c:	2000026c 	.word	0x2000026c
 8001930:	200005df 	.word	0x200005df
 8001934:	20000270 	.word	0x20000270
 8001938:	200005e7 	.word	0x200005e7
 800193c:	20000008 	.word	0x20000008
 8001940:	20000240 	.word	0x20000240
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000248 	.word	0x20000248
 800194c:	20000010 	.word	0x20000010
 8001950:	2000024c 	.word	0x2000024c
 8001954:	20000014 	.word	0x20000014
 8001958:	20000250 	.word	0x20000250
 800195c:	20000018 	.word	0x20000018
 8001960:	20000254 	.word	0x20000254
 8001964:	2000001c 	.word	0x2000001c
 8001968:	20000258 	.word	0x20000258
 800196c:	20000020 	.word	0x20000020
 8001970:	2000025c 	.word	0x2000025c
 8001974:	20000004 	.word	0x20000004
 8001978:	200005e4 	.word	0x200005e4
 800197c:	20000230 	.word	0x20000230
					xQueueSend(xQueue_Print,&msg_option_4,portMAX_DELAY);
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <vTask_Menu+0x350>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <vTask_Menu+0x354>)
 800198c:	f003 f8a0 	bl	8004ad0 <xQueueGenericSend>
					xQueueReset(xQueue_InputData); // RESETEAMOS LA COLA INPUT PARA ESPERAR NUEVOS COMANDOS
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <vTask_Menu+0x358>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f002 ffb0 	bl	80048fc <xQueueGenericReset>
					next_state = sRollTo;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <vTask_Menu+0x35c>)
 800199e:	2205      	movs	r2, #5
 80019a0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Rollto,0,eNoAction); // NOS VAMOS AL ESTADO sRollTo
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <vTask_Menu+0x360>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	f004 fb96 	bl	80060e0 <xTaskGenericNotify>
					break;
 80019b4:	e000      	b.n	80019b8 <vTask_Menu+0x34c>
						continue;}
 80019b6:	bf00      	nop
		if (!end){
 80019b8:	e65e      	b.n	8001678 <vTask_Menu+0xc>
 80019ba:	bf00      	nop
 80019bc:	2000026c 	.word	0x2000026c
 80019c0:	20000014 	.word	0x20000014
 80019c4:	20000270 	.word	0x20000270
 80019c8:	200005df 	.word	0x200005df
 80019cc:	20000250 	.word	0x20000250

080019d0 <vTask_Commands>:
	}// Fin del loop de esta tarea

}


void vTask_Commands( void * pvParameters ){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b098      	sub	sp, #96	; 0x60
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]

   command_t cmd = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2244      	movs	r2, #68	; 0x44
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c f905 	bl	800dbf0 <memset>
   command_t *proc_cmd = {0};
 80019e6:	2300      	movs	r3, #0
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
   uint32_t cmd_procc_addr;

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   xTaskNotifyWait(0,0,&cmd_procc_addr,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	f04f 32ff 	mov.w	r2, #4294967295
 80019f2:	9200      	str	r2, [sp, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2000      	movs	r0, #0
 80019fa:	f004 faf1 	bl	8005fe0 <xTaskGenericNotifyWait>
	  proc_cmd = (command_t *) cmd_procc_addr;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	657b      	str	r3, [r7, #84]	; 0x54

	   if (!flag_PrOp){
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <vTask_Commands+0x50>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <vTask_Commands+0x46>

		  process_command(&cmd);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fe84 	bl	800271c <process_command>
 8001a14:	e7e9      	b.n	80019ea <vTask_Commands+0x1a>

	  }else{
		  // Si estamos aqui es porque llego un mensaje escrito en software
		  process_command(proc_cmd);
 8001a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a18:	f000 fe80 	bl	800271c <process_command>
	   xTaskNotifyWait(0,0,&cmd_procc_addr,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a1c:	e7e5      	b.n	80019ea <vTask_Commands+0x1a>
 8001a1e:	bf00      	nop
 8001a20:	200005e7 	.word	0x200005e7

08001a24 <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f004 fad1 	bl	8005fe0 <xTaskGenericNotifyWait>

		 // Este comando lo que busca es apagar el robot y detenerlo de su estado de movimiento
		stop(handler_Motor_Array); // Apagamos los motores
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <vTask_Stop+0x58>)
 8001a40:	f001 ff39 	bl	80038b6 <stop>

		Mode_dir.Mode = None;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <vTask_Stop+0x5c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]

		 if (end){
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <vTask_Stop+0x60>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <vTask_Stop+0x42>
			 xTaskNotify(xHandleTask_Menu,0, eNoAction);
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <vTask_Stop+0x64>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f004 fb3e 	bl	80060e0 <xTaskGenericNotify>
 8001a64:	e7e2      	b.n	8001a2c <vTask_Stop+0x8>
		 }else{
			 // Si estamos aqui es porque no se levanto la bandera de end por lo que estamos en un caso de procesamiento de operaciones
			 //Nos vamos de nuevo a procesar operaciones para seguir con la operación siguente

			 xTaskNotify(xHandleTask_PrOp,0, eNoAction); // Nos vamos la tarea de procesamiento de operaciones para repetir el ciclo
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <vTask_Stop+0x68>)
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	f004 fb34 	bl	80060e0 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a78:	e7d8      	b.n	8001a2c <vTask_Stop+0x8>
 8001a7a:	bf00      	nop
 8001a7c:	20000440 	.word	0x20000440
 8001a80:	200005dc 	.word	0x200005dc
 8001a84:	200005e5 	.word	0x200005e5
 8001a88:	20000230 	.word	0x20000230
 8001a8c:	20000268 	.word	0x20000268

08001a90 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f004 fa9b 	bl	8005fe0 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <vTask_Go+0x3c>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <vTask_Go+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <vTask_Go+0x3c>)
 8001ab8:	705a      	strb	r2, [r3, #1]

		resetParameters();
 8001aba:	f002 fd65 	bl	8004588 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <vTask_Go+0x3c>)
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <vTask_Go+0x44>)
 8001ac4:	f001 fe0c 	bl	80036e0 <On_motor_Straigh_Roll>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001ac8:	e7e6      	b.n	8001a98 <vTask_Go+0x8>
 8001aca:	bf00      	nop
 8001acc:	200005dc 	.word	0x200005dc
 8001ad0:	2000051c 	.word	0x2000051c
 8001ad4:	20000440 	.word	0x20000440

08001ad8 <vTask_Control>:


}


void vTask_Control( void * pvParameters ){
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af06      	add	r7, sp, #24
 8001ade:	6078      	str	r0, [r7, #4]

	double angleToGo_Relative = 0;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f004 fa71 	bl	8005fe0 <xTaskGenericNotifyWait>

		 switch (next_state) {
 8001afe:	4ba8      	ldr	r3, [pc, #672]	; (8001da0 <vTask_Control+0x2c8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	f200 8197 	bhi.w	8001e38 <vTask_Control+0x360>
 8001b0a:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <vTask_Control+0x38>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b25 	.word	0x08001b25
 8001b14:	08001b5d 	.word	0x08001b5d
 8001b18:	08001e39 	.word	0x08001e39
 8001b1c:	08001c9b 	.word	0x08001c9b
 8001b20:	08001ccf 	.word	0x08001ccf
			case sGo:{

				go(handler_Motor_Array,
 8001b24:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <vTask_Control+0x2cc>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	4b9f      	ldr	r3, [pc, #636]	; (8001da8 <vTask_Control+0x2d0>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001b32:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <vTask_Control+0x2d4>)
 8001b34:	9304      	str	r3, [sp, #16]
 8001b36:	4b9e      	ldr	r3, [pc, #632]	; (8001db0 <vTask_Control+0x2d8>)
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	4b9e      	ldr	r3, [pc, #632]	; (8001db4 <vTask_Control+0x2dc>)
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	4b9e      	ldr	r3, [pc, #632]	; (8001db8 <vTask_Control+0x2e0>)
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <vTask_Control+0x2e4>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4a:	eef0 0a67 	vmov.f32	s1, s15
 8001b4e:	4b9c      	ldr	r3, [pc, #624]	; (8001dc0 <vTask_Control+0x2e8>)
 8001b50:	4a9c      	ldr	r2, [pc, #624]	; (8001dc4 <vTask_Control+0x2ec>)
 8001b52:	499d      	ldr	r1, [pc, #628]	; (8001dc8 <vTask_Control+0x2f0>)
 8001b54:	489d      	ldr	r0, [pc, #628]	; (8001dcc <vTask_Control+0x2f4>)
 8001b56:	f002 f95d 	bl	8003e14 <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				break;
 8001b5a:	e18a      	b.n	8001e72 <vTask_Control+0x39a>
			}case sGoTo:{




				distance_to_go = distance_traveled(&parameters_Path_Robot, parameters_Pos_Robot.xg_position, parameters_Pos_Robot.yg_position);
 8001b5c:	4b99      	ldr	r3, [pc, #612]	; (8001dc4 <vTask_Control+0x2ec>)
 8001b5e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001b62:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <vTask_Control+0x2ec>)
 8001b64:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8001b68:	eeb0 1a46 	vmov.f32	s2, s12
 8001b6c:	eef0 1a66 	vmov.f32	s3, s13
 8001b70:	eeb0 0a47 	vmov.f32	s0, s14
 8001b74:	eef0 0a67 	vmov.f32	s1, s15
 8001b78:	4891      	ldr	r0, [pc, #580]	; (8001dc0 <vTask_Control+0x2e8>)
 8001b7a:	f009 feed 	bl	800b958 <distance_traveled>
 8001b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b82:	eef0 7a60 	vmov.f32	s15, s1
 8001b86:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <vTask_Control+0x2f8>)
 8001b88:	ed83 7b00 	vstr	d7, [r3]

				// Función de control del robot
				go(handler_Motor_Array,
 8001b8c:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <vTask_Control+0x2cc>)
 8001b8e:	ed93 7b00 	vldr	d7, [r3]
 8001b92:	4b85      	ldr	r3, [pc, #532]	; (8001da8 <vTask_Control+0x2d0>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001b9a:	4b84      	ldr	r3, [pc, #528]	; (8001dac <vTask_Control+0x2d4>)
 8001b9c:	9304      	str	r3, [sp, #16]
 8001b9e:	4b84      	ldr	r3, [pc, #528]	; (8001db0 <vTask_Control+0x2d8>)
 8001ba0:	9303      	str	r3, [sp, #12]
 8001ba2:	4b84      	ldr	r3, [pc, #528]	; (8001db4 <vTask_Control+0x2dc>)
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <vTask_Control+0x2e0>)
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <vTask_Control+0x2e4>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <vTask_Control+0x2e8>)
 8001bb8:	4a82      	ldr	r2, [pc, #520]	; (8001dc4 <vTask_Control+0x2ec>)
 8001bba:	4983      	ldr	r1, [pc, #524]	; (8001dc8 <vTask_Control+0x2f0>)
 8001bbc:	4883      	ldr	r0, [pc, #524]	; (8001dcc <vTask_Control+0x2f4>)
 8001bbe:	f002 f929 	bl	8003e14 <go>
				  &flag_measurements,
				  &flag_control,
				  userMsg,
				  Mode_dir); // Esta funcion se ejecutara cada 16ms, tiempo entre interrupciones del Timer 2

				if (!flag_PrOp){
 8001bc2:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <vTask_Control+0x2fc>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d12c      	bne.n	8001c24 <vTask_Control+0x14c>
					if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <vTask_Control+0x2f8>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ffd8 	bl	8000b88 <__aeabi_d2iz>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bfb8      	it	lt
 8001bde:	425b      	neglt	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcb7 	bl	8000554 <__aeabi_i2d>
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <vTask_Control+0x2e8>)
 8001be8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001bec:	2401      	movs	r4, #1
 8001bee:	f7fe ff8d 	bl	8000b0c <__aeabi_dcmplt>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <vTask_Control+0x124>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	461c      	mov	r4, r3
 8001bfc:	b2e3      	uxtb	r3, r4
 8001bfe:	f083 0301 	eor.w	r3, r3, #1
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8131 	beq.w	8001e6c <vTask_Control+0x394>
						// Paramos el proceso
						end = SET;
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <vTask_Control+0x300>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001c10:	4b72      	ldr	r3, [pc, #456]	; (8001ddc <vTask_Control+0x304>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f004 fa5f 	bl	80060e0 <xTaskGenericNotify>
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
					}
				}


				break;
 8001c22:	e123      	b.n	8001e6c <vTask_Control+0x394>
					if (!(abs(distance_to_go) < parameters_Path_Robot.line_Distance)){
 8001c24:	4b6a      	ldr	r3, [pc, #424]	; (8001dd0 <vTask_Control+0x2f8>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffab 	bl	8000b88 <__aeabi_d2iz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bfb8      	it	lt
 8001c38:	425b      	neglt	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc8a 	bl	8000554 <__aeabi_i2d>
 8001c40:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <vTask_Control+0x2e8>)
 8001c42:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001c46:	2401      	movs	r4, #1
 8001c48:	f7fe ff60 	bl	8000b0c <__aeabi_dcmplt>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <vTask_Control+0x17e>
 8001c52:	2300      	movs	r3, #0
 8001c54:	461c      	mov	r4, r3
 8001c56:	b2e3      	uxtb	r3, r4
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8104 	beq.w	8001e6c <vTask_Control+0x394>
						if (parameters_op_Robot.op_Mode == 1){ // Cambiamos el estado de nuevo a sSquare
 8001c64:	4b5e      	ldr	r3, [pc, #376]	; (8001de0 <vTask_Control+0x308>)
 8001c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d103      	bne.n	8001c76 <vTask_Control+0x19e>
							next_state = sSquare;
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <vTask_Control+0x2c8>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e007      	b.n	8001c86 <vTask_Control+0x1ae>
						}else if (parameters_op_Robot.op_Mode == 2){ // Cambiamos el estado de nuevo a sAstar para seguir procesando
 8001c76:	4b5a      	ldr	r3, [pc, #360]	; (8001de0 <vTask_Control+0x308>)
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d102      	bne.n	8001c86 <vTask_Control+0x1ae>
							next_state = sAstar;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <vTask_Control+0x2c8>)
 8001c82:	2206      	movs	r2, #6
 8001c84:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001c86:	4b55      	ldr	r3, [pc, #340]	; (8001ddc <vTask_Control+0x304>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	f004 fa24 	bl	80060e0 <xTaskGenericNotify>
				break;
 8001c98:	e0e8      	b.n	8001e6c <vTask_Control+0x394>
			}case sRoll:{


				// Si llegamos a este comando lo que se quiere es SOLO GIRAR en una cierta direccion
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001c9a:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <vTask_Control+0x2cc>)
 8001c9c:	ed93 7b00 	vldr	d7, [r3]
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <vTask_Control+0x2d0>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <vTask_Control+0x30c>)
 8001caa:	9303      	str	r3, [sp, #12]
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <vTask_Control+0x2d8>)
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <vTask_Control+0x2dc>)
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <vTask_Control+0x2e0>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cbc:	eef0 0a67 	vmov.f32	s1, s15
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <vTask_Control+0x2e8>)
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <vTask_Control+0x2ec>)
 8001cc4:	4940      	ldr	r1, [pc, #256]	; (8001dc8 <vTask_Control+0x2f0>)
 8001cc6:	4841      	ldr	r0, [pc, #260]	; (8001dcc <vTask_Control+0x2f4>)
 8001cc8:	f002 f938 	bl	8003f3c <NOP>
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);

				break;
 8001ccc:	e0d1      	b.n	8001e72 <vTask_Control+0x39a>


				// Si llegamos a este comando lo que se quiere es girar un cierto ángulo el robot

				// comparamos el ángulo a rotar con el angulo actual, partiendo desde el angulo en el que se estaba
				angleToGo_Relative = abs(parameters_Pos_Robot.grad_global - angle_start);
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <vTask_Control+0x2ec>)
 8001cd0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <vTask_Control+0x310>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe faed 	bl	80002b8 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe ff4f 	bl	8000b88 <__aeabi_d2iz>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bfb8      	it	lt
 8001cf0:	425b      	neglt	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc2e 	bl	8000554 <__aeabi_i2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	e9c7 2302 	strd	r2, r3, [r7, #8]
				// tomamos el angulo global y se lo restamos con el angulo con el que se empezo a rotar

				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <vTask_Control+0x2cc>)
 8001d02:	ed93 7b00 	vldr	d7, [r3]
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <vTask_Control+0x2d0>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <vTask_Control+0x30c>)
 8001d10:	9303      	str	r3, [sp, #12]
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <vTask_Control+0x2d8>)
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <vTask_Control+0x2dc>)
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <vTask_Control+0x2e0>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <vTask_Control+0x2e8>)
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <vTask_Control+0x2ec>)
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <vTask_Control+0x2f0>)
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <vTask_Control+0x2f4>)
 8001d2e:	f002 f905 	bl	8003f3c <NOP>
					data,
					Mode_dir);


				// Analizamos si ya se llego al angulo deseado
				if (!(angleToGo_Relative < parameters_Path_Robot.angle) ){Done = !Done;}
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <vTask_Control+0x2e8>)
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	2101      	movs	r1, #1
 8001d42:	460c      	mov	r4, r1
 8001d44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d48:	f7fe fee0 	bl	8000b0c <__aeabi_dcmplt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <vTask_Control+0x27e>
 8001d52:	2300      	movs	r3, #0
 8001d54:	461c      	mov	r4, r3
 8001d56:	b2e3      	uxtb	r3, r4
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <vTask_Control+0x29e>
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <vTask_Control+0x314>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <vTask_Control+0x314>)
 8001d74:	701a      	strb	r2, [r3, #0]

				// Paramos el robot
				if (Done){
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <vTask_Control+0x314>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d078      	beq.n	8001e70 <vTask_Control+0x398>
					if (!flag_PrOp){
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <vTask_Control+0x2fc>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d134      	bne.n	8001df0 <vTask_Control+0x318>
						// Paramos el proceso
						end = SET;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <vTask_Control+0x300>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <vTask_Control+0x304>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	f004 f9a1 	bl	80060e0 <xTaskGenericNotify>
 8001d9e:	e041      	b.n	8001e24 <vTask_Control+0x34c>
 8001da0:	200005df 	.word	0x200005df
 8001da4:	20000bd8 	.word	0x20000bd8
 8001da8:	200005dc 	.word	0x200005dc
 8001dac:	2000059c 	.word	0x2000059c
 8001db0:	200005e2 	.word	0x200005e2
 8001db4:	200005e1 	.word	0x200005e1
 8001db8:	200005e0 	.word	0x200005e0
 8001dbc:	200005f0 	.word	0x200005f0
 8001dc0:	20000610 	.word	0x20000610
 8001dc4:	20000b30 	.word	0x20000b30
 8001dc8:	20000430 	.word	0x20000430
 8001dcc:	20000440 	.word	0x20000440
 8001dd0:	20000bf8 	.word	0x20000bf8
 8001dd4:	200005e7 	.word	0x200005e7
 8001dd8:	200005e5 	.word	0x200005e5
 8001ddc:	2000023c 	.word	0x2000023c
 8001de0:	20000bb0 	.word	0x20000bb0
 8001de4:	2000055c 	.word	0x2000055c
 8001de8:	20000c18 	.word	0x20000c18
 8001dec:	200005e3 	.word	0x200005e3
					}else{
						if (parameters_op_Robot.op_Mode == 1){ // Cambiamos el estado de nuevo a sSquare
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <vTask_Control+0x39c>)
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d103      	bne.n	8001e02 <vTask_Control+0x32a>
							next_state = sSquare;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <vTask_Control+0x3a0>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e007      	b.n	8001e12 <vTask_Control+0x33a>
						}else if (parameters_op_Robot.op_Mode == 2){ // Cambiamos el estado de nuevo a sAstar para seguir procesando
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <vTask_Control+0x39c>)
 8001e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d102      	bne.n	8001e12 <vTask_Control+0x33a>
							next_state = sAstar;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <vTask_Control+0x3a0>)
 8001e0e:	2206      	movs	r2, #6
 8001e10:	701a      	strb	r2, [r3, #0]
						}
						xTaskNotify(xHandleTask_Stop,0, eNoAction); // Levantamos la tarea de stop para parar la ejecución
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <vTask_Control+0x3a4>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f004 f95e 	bl	80060e0 <xTaskGenericNotify>
					}

					angleToGo_Relative = 0; // Reseteamos
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
					Done = RESET; // Reseteamos la bandera
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <vTask_Control+0x3a8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001e36:	e01b      	b.n	8001e70 <vTask_Control+0x398>
			}
			default:{
				// Cambiamos los parametros
				NOP(handler_Motor_Array,
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <vTask_Control+0x3ac>)
 8001e3a:	ed93 7b00 	vldr	d7, [r3]
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <vTask_Control+0x3b0>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <vTask_Control+0x3b4>)
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <vTask_Control+0x3b8>)
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <vTask_Control+0x3bc>)
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <vTask_Control+0x3c0>)
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5a:	eef0 0a67 	vmov.f32	s1, s15
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <vTask_Control+0x3c4>)
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <vTask_Control+0x3c8>)
 8001e62:	4910      	ldr	r1, [pc, #64]	; (8001ea4 <vTask_Control+0x3cc>)
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <vTask_Control+0x3d0>)
 8001e66:	f002 f869 	bl	8003f3c <NOP>
					&flag_angulo,
					&flag_measurements,
					&flag_control,
					data,
					Mode_dir);
				break;}
 8001e6a:	e002      	b.n	8001e72 <vTask_Control+0x39a>
				break;
 8001e6c:	bf00      	nop
 8001e6e:	e63d      	b.n	8001aec <vTask_Control+0x14>
				break;
 8001e70:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001e72:	e63b      	b.n	8001aec <vTask_Control+0x14>
 8001e74:	20000bb0 	.word	0x20000bb0
 8001e78:	200005df 	.word	0x200005df
 8001e7c:	2000023c 	.word	0x2000023c
 8001e80:	200005e3 	.word	0x200005e3
 8001e84:	20000bd8 	.word	0x20000bd8
 8001e88:	200005dc 	.word	0x200005dc
 8001e8c:	2000055c 	.word	0x2000055c
 8001e90:	200005e2 	.word	0x200005e2
 8001e94:	200005e1 	.word	0x200005e1
 8001e98:	200005e0 	.word	0x200005e0
 8001e9c:	20000610 	.word	0x20000610
 8001ea0:	20000b30 	.word	0x20000b30
 8001ea4:	20000430 	.word	0x20000430
 8001ea8:	20000440 	.word	0x20000440

08001eac <vTask_GoTo>:
////////////////////////////////////////////////////////////////////////GOTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void vTask_GoTo( void * pvParameters ){
 8001eac:	b5b0      	push	{r4, r5, r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	6078      	str	r0, [r7, #4]
	// En esta tarea querremos ir solo hacia un punto deseado por el usuario

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f004 f88d 	bl	8005fe0 <xTaskGenericNotifyWait>

		// Si estamos aqui se quiere solo que el robot vaya hacia adelante y el linea recta
		Mode_dir.Mode = Line;
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <vTask_GoTo+0xec>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <vTask_GoTo+0xf0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <vTask_GoTo+0xec>)
 8001ed4:	705a      	strb	r2, [r3, #1]

		// Almacenamos la distancia en milimetros a recorrer
		parameters_Path_Robot.line_Distance = sparam;
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <vTask_GoTo+0xf4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb2a 	bl	8000534 <__aeabi_ui2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001ee6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		resetParameters();
 8001eea:	f002 fb4d 	bl	8004588 <resetParameters>

		On_motor_Straigh_Roll(handler_Motor_Array,  Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <vTask_GoTo+0xec>)
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	482d      	ldr	r0, [pc, #180]	; (8001fa8 <vTask_GoTo+0xfc>)
 8001ef4:	f001 fbf4 	bl	80036e0 <On_motor_Straigh_Roll>

		// seteamos la posicion inicial como la posicion actual global del robot
		parameters_Path_Robot.start_position_x = parameters_Pos_Robot.xg_position;
 8001ef8:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <vTask_GoTo+0x100>)
 8001efa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001efe:	4929      	ldr	r1, [pc, #164]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		parameters_Path_Robot.start_position_y = parameters_Pos_Robot.yg_position;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <vTask_GoTo+0x100>)
 8001f06:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001f0a:	4926      	ldr	r1, [pc, #152]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// seteamos la posicion final usando parametros polares

		//Usando el angulo actual global con respecto al eje x se tiene que
		parameters_Path_Robot.goal_Position_x = parameters_Path_Robot.line_Distance * cos(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_x ; // usando la funcion coseno para hallar la coordenada x de llegada
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f12:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f16:	4b25      	ldr	r3, [pc, #148]	; (8001fac <vTask_GoTo+0x100>)
 8001f18:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f20:	eef0 0a67 	vmov.f32	s1, s15
 8001f24:	f00e fd3c 	bl	80109a0 <cos>
 8001f28:	ec53 2b10 	vmov	r2, r3, d0
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe fb7a 	bl	8000628 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f3e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001f42:	f7fe f9bb 	bl	80002bc <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f4c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		parameters_Path_Robot.goal_Position_y = parameters_Path_Robot.line_Distance * sin(parameters_Pos_Robot.rad_global) + parameters_Path_Robot.start_position_y ; //usando la funcion coseno para hallar la coordenada y de llegada
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f52:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <vTask_GoTo+0x100>)
 8001f58:	ed93 7b04 	vldr	d7, [r3, #16]
 8001f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f60:	eef0 0a67 	vmov.f32	s1, s15
 8001f64:	f00e fdb8 	bl	8010ad8 <sin>
 8001f68:	ec53 2b10 	vmov	r2, r3, d0
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	f7fe fb5a 	bl	8000628 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f7e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001f82:	f7fe f99b 	bl	80002bc <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		// definimos los parametros del camino en funcion de la situacion actual
		calculation_parameter_distance(&parameters_Path_Robot);
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <vTask_GoTo+0xf8>)
 8001f92:	f009 fbf5 	bl	800b780 <calculation_parameter_distance>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001f96:	e78d      	b.n	8001eb4 <vTask_GoTo+0x8>
 8001f98:	200005dc 	.word	0x200005dc
 8001f9c:	2000051c 	.word	0x2000051c
 8001fa0:	20000520 	.word	0x20000520
 8001fa4:	20000610 	.word	0x20000610
 8001fa8:	20000440 	.word	0x20000440
 8001fac:	20000b30 	.word	0x20000b30

08001fb0 <vTask_Roll>:

////////////////////////////////////////////////////////////////////////ROLL STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Roll( void * pvParameters ){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f004 f80b 	bl	8005fe0 <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
		Mode_dir.Mode = Mode = Roll;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <vTask_Roll+0x48>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <vTask_Roll+0x48>)
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <vTask_Roll+0x4c>)
 8001fd6:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <vTask_Roll+0x50>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <vTask_Roll+0x4c>)
 8001fe0:	705a      	strb	r2, [r3, #1]

		resetParameters();
 8001fe2:	f002 fad1 	bl	8004588 <resetParameters>


		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <vTask_Roll+0x4c>)
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <vTask_Roll+0x54>)
 8001fec:	f001 fb78 	bl	80036e0 <On_motor_Straigh_Roll>

		Done = RESET; // Reseteamos la bandera
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <vTask_Roll+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001ff6:	e7df      	b.n	8001fb8 <vTask_Roll+0x8>
 8001ff8:	200005de 	.word	0x200005de
 8001ffc:	200005dc 	.word	0x200005dc
 8002000:	2000051c 	.word	0x2000051c
 8002004:	20000440 	.word	0x20000440
 8002008:	200005e3 	.word	0x200005e3

0800200c <vTask_RollTo>:

////////////////////////////////////////////////////////////////////////ROLLTO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_RollTo( void * pvParameters ){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2300      	movs	r3, #0
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2000      	movs	r0, #0
 8002022:	f003 ffdd 	bl	8005fe0 <xTaskGenericNotifyWait>

		// si estamos aqui, este comando lo que hara es girar el robot indefinidamente
		Mode_dir.Mode = Mode = Roll;
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <vTask_RollTo+0x58>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <vTask_RollTo+0x58>)
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <vTask_RollTo+0x5c>)
 8002032:	701a      	strb	r2, [r3, #0]
		Mode_dir.direction_s_r = fparam;
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <vTask_RollTo+0x60>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <vTask_RollTo+0x5c>)
 800203c:	705a      	strb	r2, [r3, #1]

		// Almacenamos el angulo al que se quiere ir
		parameters_Path_Robot.angle = sparam;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <vTask_RollTo+0x64>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <vTask_RollTo+0x68>)
 8002046:	649a      	str	r2, [r3, #72]	; 0x48

		angle_start = parameters_Pos_Robot.grad_global; // seteamos el angulo actual global
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <vTask_RollTo+0x6c>)
 800204a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800204e:	490b      	ldr	r1, [pc, #44]	; (800207c <vTask_RollTo+0x70>)
 8002050:	e9c1 2300 	strd	r2, r3, [r1]

		resetParameters();
 8002054:	f002 fa98 	bl	8004588 <resetParameters>

		// Si estamos aqui es porque se quiere ir recorriendo una distancia especifica
		On_motor_Straigh_Roll(handler_Motor_Array, Mode_dir); // Encendemos los motores para irnos hacia adelante y con una velocidad fija
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <vTask_RollTo+0x5c>)
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <vTask_RollTo+0x74>)
 800205e:	f001 fb3f 	bl	80036e0 <On_motor_Straigh_Roll>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002062:	e7d7      	b.n	8002014 <vTask_RollTo+0x8>
 8002064:	200005de 	.word	0x200005de
 8002068:	200005dc 	.word	0x200005dc
 800206c:	2000051c 	.word	0x2000051c
 8002070:	20000520 	.word	0x20000520
 8002074:	20000610 	.word	0x20000610
 8002078:	20000b30 	.word	0x20000b30
 800207c:	20000c18 	.word	0x20000c18
 8002080:	20000440 	.word	0x20000440

08002084 <vTask_Square>:


////////////////////////////////////////////////////////////////////////SQUARE STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Square( void * pvParameters ){
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af02      	add	r7, sp, #8
 800208a:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f003 ffa1 	bl	8005fe0 <xTaskGenericNotifyWait>

		square_dir  = fparam; // Direccion del cuadrado
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <vTask_Square+0x54>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <vTask_Square+0x58>)
 80020a6:	701a      	strb	r2, [r3, #0]
		square_side = sparam; // lado del cuadrado en cm
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <vTask_Square+0x5c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa41 	bl	8000534 <__aeabi_ui2d>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	490b      	ldr	r1, [pc, #44]	; (80020e4 <vTask_Square+0x60>)
 80020b8:	e9c1 2300 	strd	r2, r3, [r1]
		parameters_op_Robot.op_Mode = 1; // SETEAMOS EN 1 PARA OPERACIONES DE SQUARE
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <vTask_Square+0x64>)
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2020 	strb.w	r2, [r3, #32]
		xTaskNotify(xHandleTask_CrOp,0,eNoAction);
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <vTask_Square+0x68>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	f004 f805 	bl	80060e0 <xTaskGenericNotify>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80020d6:	e7d9      	b.n	800208c <vTask_Square+0x8>
 80020d8:	2000051c 	.word	0x2000051c
 80020dc:	20000c00 	.word	0x20000c00
 80020e0:	20000520 	.word	0x20000520
 80020e4:	20000c08 	.word	0x20000c08
 80020e8:	20000bb0 	.word	0x20000bb0
 80020ec:	20000264 	.word	0x20000264

080020f0 <vTask_Astar>:


////////////////////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Astar( void * pvParameters ){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	6078      	str	r0, [r7, #4]

	while (1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	2000      	movs	r0, #0
 8002106:	f003 ff6b 	bl	8005fe0 <xTaskGenericNotifyWait>

		//////////////////////////////////////////////  ASTAR - Algoritm setup//////////////////////////////////////////////////////////

		// Solo necesitamos definir las distancias paralela y diagonal de la malla
		handlerAstarParameters.parallelDistance  = fparam;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <vTask_Astar+0x7c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <vTask_Astar+0x80>)
 8002118:	edc3 7a00 	vstr	s15, [r3]
		handlerAstarParameters.diagonalDiastance = sparam;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <vTask_Astar+0x84>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <vTask_Astar+0x80>)
 800212a:	edc3 7a01 	vstr	s15, [r3, #4]

		flag_Astar = SET;
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <vTask_Astar+0x88>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]

		writeMsg(&handlerUSART, msg_InsertGrid);
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <vTask_Astar+0x8c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	4811      	ldr	r0, [pc, #68]	; (8002180 <vTask_Astar+0x90>)
 800213c:	f00b f9ca 	bl	800d4d4 <writeMsg>

		writeMsg(&handlerUSART, "\n_____________Insert * for  empty space______________\n");
 8002140:	4910      	ldr	r1, [pc, #64]	; (8002184 <vTask_Astar+0x94>)
 8002142:	480f      	ldr	r0, [pc, #60]	; (8002180 <vTask_Astar+0x90>)
 8002144:	f00b f9c6 	bl	800d4d4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert e for  the end space____________\n");
 8002148:	490f      	ldr	r1, [pc, #60]	; (8002188 <vTask_Astar+0x98>)
 800214a:	480d      	ldr	r0, [pc, #52]	; (8002180 <vTask_Astar+0x90>)
 800214c:	f00b f9c2 	bl	800d4d4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert s for  the start space__________\n");
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <vTask_Astar+0x9c>)
 8002152:	480b      	ldr	r0, [pc, #44]	; (8002180 <vTask_Astar+0x90>)
 8002154:	f00b f9be 	bl	800d4d4 <writeMsg>
		writeMsg(&handlerUSART, "\n_____________Insert # for  obstacules_______________\n");
 8002158:	490d      	ldr	r1, [pc, #52]	; (8002190 <vTask_Astar+0xa0>)
 800215a:	4809      	ldr	r0, [pc, #36]	; (8002180 <vTask_Astar+0x90>)
 800215c:	f00b f9ba 	bl	800d4d4 <writeMsg>
		initSerialComunication(&handlerUSART, &handlerPinRx, &handlerPinTx);
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <vTask_Astar+0xa4>)
 8002162:	490d      	ldr	r1, [pc, #52]	; (8002198 <vTask_Astar+0xa8>)
 8002164:	4806      	ldr	r0, [pc, #24]	; (8002180 <vTask_Astar+0x90>)
 8002166:	f006 fdc1 	bl	8008cec <initSerialComunication>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800216a:	e7c5      	b.n	80020f8 <vTask_Astar+0x8>
 800216c:	2000051c 	.word	0x2000051c
 8002170:	200004a0 	.word	0x200004a0
 8002174:	20000520 	.word	0x20000520
 8002178:	200005e6 	.word	0x200005e6
 800217c:	20000028 	.word	0x20000028
 8002180:	20000390 	.word	0x20000390
 8002184:	0801376c 	.word	0x0801376c
 8002188:	080137a4 	.word	0x080137a4
 800218c:	080137dc 	.word	0x080137dc
 8002190:	08013814 	.word	0x08013814
 8002194:	200002a8 	.word	0x200002a8
 8002198:	2000029c 	.word	0x2000029c

0800219c <vTask_Grid>:

	}

}

void vTask_Grid( void * pvParameters ){
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b087      	sub	sp, #28
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2300      	movs	r3, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2000      	movs	r0, #0
 80021b2:	f003 ff15 	bl	8005fe0 <xTaskGenericNotifyWait>

		 status = xQueueReceive(xQueue_InputData, &item,0);
 80021b6:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <vTask_Grid+0x154>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f107 010b 	add.w	r1, r7, #11
 80021be:	2200      	movs	r2, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 fe2d 	bl	8004e20 <xQueueReceive>
 80021c6:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d158      	bne.n	8002280 <vTask_Grid+0xe4>

			if (item != '\0'){
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d055      	beq.n	8002280 <vTask_Grid+0xe4>


				if (item == 'z'){
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	2b7a      	cmp	r3, #122	; 0x7a
 80021d8:	d117      	bne.n	800220a <vTask_Grid+0x6e>
					memset(stringMatrix, 0, sizeof(stringMatrix));
 80021da:	2231      	movs	r2, #49	; 0x31
 80021dc:	2100      	movs	r1, #0
 80021de:	4845      	ldr	r0, [pc, #276]	; (80022f4 <vTask_Grid+0x158>)
 80021e0:	f00b fd06 	bl	800dbf0 <memset>
					stringRow    = 0;
 80021e4:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <vTask_Grid+0x15c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
					stringColumn = 0;
 80021ea:	4b44      	ldr	r3, [pc, #272]	; (80022fc <vTask_Grid+0x160>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
					writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 80021f0:	4943      	ldr	r1, [pc, #268]	; (8002300 <vTask_Grid+0x164>)
 80021f2:	4844      	ldr	r0, [pc, #272]	; (8002304 <vTask_Grid+0x168>)
 80021f4:	f00b f96e 	bl	800d4d4 <writeMsg>
					writeMsg(&handlerUSART, msg_InsertGrid);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <vTask_Grid+0x16c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4841      	ldr	r0, [pc, #260]	; (8002304 <vTask_Grid+0x168>)
 8002200:	f00b f968 	bl	800d4d4 <writeMsg>
					item = '\0';
 8002204:	2300      	movs	r3, #0
 8002206:	72fb      	strb	r3, [r7, #11]
 8002208:	e03a      	b.n	8002280 <vTask_Grid+0xe4>
				}else if (item != '@'){
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d02c      	beq.n	800226a <vTask_Grid+0xce>
					if (item != '\n'){ // Como estamos en Windows, el enter da un par the caracteres \r\n
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	2b0a      	cmp	r3, #10
 8002214:	d026      	beq.n	8002264 <vTask_Grid+0xc8>
						if (item != '\r'){
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	2b0d      	cmp	r3, #13
 800221a:	d017      	beq.n	800224c <vTask_Grid+0xb0>
							stringMatrix[stringRow][stringColumn] = item;
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <vTask_Grid+0x15c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <vTask_Grid+0x160>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461c      	mov	r4, r3
 8002228:	7af8      	ldrb	r0, [r7, #11]
 800222a:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <vTask_Grid+0x158>)
 800222c:	460b      	mov	r3, r1
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a5b      	subs	r3, r3, r1
 8002232:	4413      	add	r3, r2
 8002234:	4423      	add	r3, r4
 8002236:	4602      	mov	r2, r0
 8002238:	701a      	strb	r2, [r3, #0]
							stringColumn++;
 800223a:	4b30      	ldr	r3, [pc, #192]	; (80022fc <vTask_Grid+0x160>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	3301      	adds	r3, #1
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <vTask_Grid+0x160>)
 8002244:	701a      	strb	r2, [r3, #0]
							item = '\0';
 8002246:	2300      	movs	r3, #0
 8002248:	72fb      	strb	r3, [r7, #11]
 800224a:	e019      	b.n	8002280 <vTask_Grid+0xe4>
						}else{
							stringRow++;
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <vTask_Grid+0x15c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <vTask_Grid+0x15c>)
 8002256:	701a      	strb	r2, [r3, #0]
							stringColumn = 0;
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <vTask_Grid+0x160>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
							item = '\0';
 800225e:	2300      	movs	r3, #0
 8002260:	72fb      	strb	r3, [r7, #11]
 8002262:	e00d      	b.n	8002280 <vTask_Grid+0xe4>
						}
					}else{
						item = '\0';
 8002264:	2300      	movs	r3, #0
 8002266:	72fb      	strb	r3, [r7, #11]
 8002268:	e00a      	b.n	8002280 <vTask_Grid+0xe4>
					}
				}else{
					doneTransaction = SET;
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <vTask_Grid+0x170>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]

					flag_Astar = RESET;
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <vTask_Grid+0x174>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

					stringColumn = 0;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <vTask_Grid+0x160>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
					item = '\0';
 800227c:	2300      	movs	r3, #0
 800227e:	72fb      	strb	r3, [r7, #11]
				}
			}
		}

		// Hallamos la ruta mas corta del Grid y con esto ya formamos nuestra matriz de operaciones
		if (doneTransaction){
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <vTask_Grid+0x170>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d08d      	beq.n	80021a4 <vTask_Grid+0x8>

			starWorking = findShorterWay(stringMatrix, readableGrid, costs, &handlerAstarParameters, &handlerCostsAstar, shorterWay);
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <vTask_Grid+0x178>)
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <vTask_Grid+0x17c>)
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <vTask_Grid+0x180>)
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <vTask_Grid+0x184>)
 8002294:	4923      	ldr	r1, [pc, #140]	; (8002324 <vTask_Grid+0x188>)
 8002296:	4817      	ldr	r0, [pc, #92]	; (80022f4 <vTask_Grid+0x158>)
 8002298:	f005 f926 	bl	80074e8 <findShorterWay>
 800229c:	4603      	mov	r3, r0
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <vTask_Grid+0x18c>)
 80022a2:	701a      	strb	r2, [r3, #0]

			if (starWorking){
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <vTask_Grid+0x18c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d019      	beq.n	80022e0 <vTask_Grid+0x144>
				// si se llego hasta aca es porque Astar si funciona correctamente

				memset(stringMatrix, 0, sizeof(stringMatrix));
 80022ac:	2231      	movs	r2, #49	; 0x31
 80022ae:	2100      	movs	r1, #0
 80022b0:	4810      	ldr	r0, [pc, #64]	; (80022f4 <vTask_Grid+0x158>)
 80022b2:	f00b fc9d 	bl	800dbf0 <memset>
				stringRow    = 0;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <vTask_Grid+0x15c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
				stringColumn = 0;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <vTask_Grid+0x160>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
				writeMsg(&handlerUSART, "\n------String Vaciado-----\n \r");
 80022c2:	490f      	ldr	r1, [pc, #60]	; (8002300 <vTask_Grid+0x164>)
 80022c4:	480f      	ldr	r0, [pc, #60]	; (8002304 <vTask_Grid+0x168>)
 80022c6:	f00b f905 	bl	800d4d4 <writeMsg>

				flag_Astar = RESET;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <vTask_Grid+0x174>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
				doneTransaction = RESET;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <vTask_Grid+0x170>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
				parameters_op_Robot.op_Mode = 2; // SETEAMOS EN 2 PARA OPERACIONES DE ASTAR
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <vTask_Grid+0x190>)
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2020 	strb.w	r2, [r3, #32]
 80022de:	e761      	b.n	80021a4 <vTask_Grid+0x8>
			}else{
				writeMsg(&handlerUSART, msg_NotWorking);
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <vTask_Grid+0x194>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <vTask_Grid+0x168>)
 80022e8:	f00b f8f4 	bl	800d4d4 <writeMsg>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80022ec:	e75a      	b.n	80021a4 <vTask_Grid+0x8>
 80022ee:	bf00      	nop
 80022f0:	20000270 	.word	0x20000270
 80022f4:	20000528 	.word	0x20000528
 80022f8:	2000055a 	.word	0x2000055a
 80022fc:	20000559 	.word	0x20000559
 8002300:	0801384c 	.word	0x0801384c
 8002304:	20000390 	.word	0x20000390
 8002308:	20000028 	.word	0x20000028
 800230c:	200004f4 	.word	0x200004f4
 8002310:	200005e6 	.word	0x200005e6
 8002314:	2000db80 	.word	0x2000db80
 8002318:	200004ac 	.word	0x200004ac
 800231c:	200004a0 	.word	0x200004a0
 8002320:	2000d6b4 	.word	0x2000d6b4
 8002324:	2000db4c 	.word	0x2000db4c
 8002328:	2000055b 	.word	0x2000055b
 800232c:	20000bb0 	.word	0x20000bb0
 8002330:	20000024 	.word	0x20000024

08002334 <vTask_CrOp>:
	}// End of the while

}


void vTask_CrOp( void * pvParameters ){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af02      	add	r7, sp, #8
 800233a:	6078      	str	r0, [r7, #4]

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2300      	movs	r3, #0
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2000      	movs	r0, #0
 800234a:	f003 fe49 	bl	8005fe0 <xTaskGenericNotifyWait>

		// Si estamos aqui es porque queremos que nuestro robot haga unas operaciones contiguas
		switch (parameters_op_Robot.op_Mode) {
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <vTask_CrOp+0x94>)
 8002350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d002      	beq.n	800235e <vTask_CrOp+0x2a>
 8002358:	2b02      	cmp	r3, #2
 800235a:	d01d      	beq.n	8002398 <vTask_CrOp+0x64>
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros

				break;

			}
			default:{break;}
 800235c:	e033      	b.n	80023c6 <vTask_CrOp+0x92>
				create_square_operations(square_side,
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <vTask_CrOp+0x98>)
 8002360:	ed93 7b00 	vldr	d7, [r3]
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <vTask_CrOp+0x9c>)
 8002366:	7818      	ldrb	r0, [r3, #0]
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <vTask_CrOp+0xa0>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <vTask_CrOp+0xa4>)
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <vTask_CrOp+0xa8>)
 8002370:	491b      	ldr	r1, [pc, #108]	; (80023e0 <vTask_CrOp+0xac>)
 8002372:	eeb0 0a47 	vmov.f32	s0, s14
 8002376:	eef0 0a67 	vmov.f32	s1, s15
 800237a:	f001 ffb5 	bl	80042e8 <create_square_operations>
				counter_operation = 0;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <vTask_CrOp+0xb0>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <vTask_CrOp+0xb4>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	2300      	movs	r3, #0
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	f003 fea5 	bl	80060e0 <xTaskGenericNotify>
				break;
 8002396:	e016      	b.n	80023c6 <vTask_CrOp+0x92>
				create_Astar_operations(&handlerAstarParameters,
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <vTask_CrOp+0xa0>)
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <vTask_CrOp+0xa4>)
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <vTask_CrOp+0xa8>)
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <vTask_CrOp+0xac>)
 80023a4:	4911      	ldr	r1, [pc, #68]	; (80023ec <vTask_CrOp+0xb8>)
 80023a6:	4812      	ldr	r0, [pc, #72]	; (80023f0 <vTask_CrOp+0xbc>)
 80023a8:	f006 fd0a 	bl	8008dc0 <create_Astar_operations>
				counter_operation = 0;
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <vTask_CrOp+0xb0>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
				xTaskNotify(xHandleTask_Reinit,0, eNoAction); //reiniciamos todos los parametros
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <vTask_CrOp+0xb4>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	f003 fe8e 	bl	80060e0 <xTaskGenericNotify>
				break;
 80023c4:	bf00      	nop
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80023c6:	e7b9      	b.n	800233c <vTask_CrOp+0x8>
 80023c8:	20000bb0 	.word	0x20000bb0
 80023cc:	20000c08 	.word	0x20000c08
 80023d0:	20000c00 	.word	0x20000c00
 80023d4:	20000b30 	.word	0x20000b30
 80023d8:	20000610 	.word	0x20000610
 80023dc:	20000b80 	.word	0x20000b80
 80023e0:	20000680 	.word	0x20000680
 80023e4:	20000c10 	.word	0x20000c10
 80023e8:	20000254 	.word	0x20000254
 80023ec:	2000db80 	.word	0x2000db80
 80023f0:	200004a0 	.word	0x200004a0
 80023f4:	00000000 	.word	0x00000000

080023f8 <vTask_PrOp>:

	}

}

void vTask_PrOp( void * pvParameters ){
 80023f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023fc:	b096      	sub	sp, #88	; 0x58
 80023fe:	af02      	add	r7, sp, #8
 8002400:	6078      	str	r0, [r7, #4]

	command_t cmd = {0};
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	2244      	movs	r2, #68	; 0x44
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f00b fbf0 	bl	800dbf0 <memset>

	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esperar hasta que la notificacion salte
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2300      	movs	r3, #0
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	2000      	movs	r0, #0
 800241e:	f003 fddf 	bl	8005fe0 <xTaskGenericNotifyWait>

		// Esperamos 3 segundos
		delay_ms(3000);
 8002422:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002426:	f006 ff91 	bl	800934c <delay_ms>

		// Este caso representa la ejecución de las operaciones almacenadas en la lista de operaciones

		if (parameters_Path_Robot.Operation_List[counter_operation].operacion == LINE){
 800242a:	4b87      	ldr	r3, [pc, #540]	; (8002648 <vTask_PrOp+0x250>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4a86      	ldr	r2, [pc, #536]	; (800264c <vTask_PrOp+0x254>)
 8002432:	460b      	mov	r3, r1
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	3370      	adds	r3, #112	; 0x70
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 8081 	bne.w	8002548 <vTask_PrOp+0x150>

			// Creamos el comando para que haga la tarea respectiva a ir en linea recta

			parameters_Path_Robot.line_Distance =
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 8002446:	4b80      	ldr	r3, [pc, #512]	; (8002648 <vTask_PrOp+0x250>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4a7f      	ldr	r2, [pc, #508]	; (800264c <vTask_PrOp+0x254>)
 800244e:	460b      	mov	r3, r1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	3378      	adds	r3, #120	; 0x78
 800245a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <vTask_PrOp+0x258>)
 8002464:	f7fe f8e0 	bl	8000628 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	4b78      	ldr	r3, [pc, #480]	; (8002654 <vTask_PrOp+0x25c>)
 8002472:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002476:	f7fd ff1f 	bl	80002b8 <__aeabi_dsub>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	ec43 2b17 	vmov	d7, r2, r3
 8002482:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002640 <vTask_PrOp+0x248>
 8002486:	eeb0 0a47 	vmov.f32	s0, s14
 800248a:	eef0 0a67 	vmov.f32	s1, s15
 800248e:	f00e fbb1 	bl	8010bf4 <pow>
 8002492:	ec59 8b10 	vmov	r8, r9, d0
						 pow((parameters_Path_Robot.Operation_List[counter_operation].y_destination*10 - parameters_Pos_Robot.yg_position),2));
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <vTask_PrOp+0x250>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	4a6b      	ldr	r2, [pc, #428]	; (800264c <vTask_PrOp+0x254>)
 800249e:	460b      	mov	r3, r1
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	3380      	adds	r3, #128	; 0x80
 80024aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <vTask_PrOp+0x258>)
 80024b4:	f7fe f8b8 	bl	8000628 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	4b64      	ldr	r3, [pc, #400]	; (8002654 <vTask_PrOp+0x25c>)
 80024c2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80024c6:	f7fd fef7 	bl	80002b8 <__aeabi_dsub>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	ec43 2b17 	vmov	d7, r2, r3
 80024d2:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002640 <vTask_PrOp+0x248>
 80024d6:	eeb0 0a47 	vmov.f32	s0, s14
 80024da:	eef0 0a67 	vmov.f32	s1, s15
 80024de:	f00e fb89 	bl	8010bf4 <pow>
 80024e2:	ec53 2b10 	vmov	r2, r3, d0
					sqrt(pow((parameters_Path_Robot.Operation_List[counter_operation].x_destination*10 - parameters_Pos_Robot.xg_position),2)+
 80024e6:	4640      	mov	r0, r8
 80024e8:	4649      	mov	r1, r9
 80024ea:	f7fd fee7 	bl	80002bc <__adddf3>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	ec43 2b17 	vmov	d7, r2, r3
 80024f6:	eeb0 0a47 	vmov.f32	s0, s14
 80024fa:	eef0 0a67 	vmov.f32	s1, s15
 80024fe:	f00e fbe9 	bl	8010cd4 <sqrt>
 8002502:	eeb0 7a40 	vmov.f32	s14, s0
 8002506:	eef0 7a60 	vmov.f32	s15, s1
			parameters_Path_Robot.line_Distance =
 800250a:	4b50      	ldr	r3, [pc, #320]	; (800264c <vTask_PrOp+0x254>)
 800250c:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40


			sprintf(cmd.payload, "goto %u %.2f" , 1 , parameters_Path_Robot.line_Distance); // Mandamos una direccion hacia adelante
 8002510:	4b4e      	ldr	r3, [pc, #312]	; (800264c <vTask_PrOp+0x254>)
 8002512:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002516:	f107 000c 	add.w	r0, r7, #12
 800251a:	e9cd 2300 	strd	r2, r3, [sp]
 800251e:	2201      	movs	r2, #1
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <vTask_PrOp+0x260>)
 8002522:	f00c f8c7 	bl	800e6b4 <siprintf>
			// y ademas la distancia a recorrer

			counter_operation++;
 8002526:	4b48      	ldr	r3, [pc, #288]	; (8002648 <vTask_PrOp+0x250>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <vTask_PrOp+0x250>)
 8002530:	701a      	strb	r2, [r3, #0]

			// Aplicamos la operacion llamando a la tarea respectiva que realiza el asunto, notificamos a ir a


			xTaskNotify(xHandleTask_Commands,(uint32_t) &cmd, eSetValueWithOverwrite); //reiniciamos todos los parametros
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <vTask_PrOp+0x264>)
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	f107 020c 	add.w	r2, r7, #12
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2303      	movs	r3, #3
 8002540:	2100      	movs	r1, #0
 8002542:	f003 fdcd 	bl	80060e0 <xTaskGenericNotify>
 8002546:	e763      	b.n	8002410 <vTask_PrOp+0x18>

			// fin de la operacion de linea recta

		}else if (parameters_Path_Robot.Operation_List[counter_operation].operacion == TURN){
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <vTask_PrOp+0x250>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	4a3f      	ldr	r2, [pc, #252]	; (800264c <vTask_PrOp+0x254>)
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	3370      	adds	r3, #112	; 0x70
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d161      	bne.n	8002626 <vTask_PrOp+0x22e>
			// Creamos el comando para que haga la tarea para que gire un cierto ángulo

			// metemos el angulo a rotar, ya sea positivo o negativo

			if (parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative < 0 ){
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <vTask_PrOp+0x250>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	4a38      	ldr	r2, [pc, #224]	; (800264c <vTask_PrOp+0x254>)
 800256a:	460b      	mov	r3, r1
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	3388      	adds	r3, #136	; 0x88
 8002576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	f7fe fac3 	bl	8000b0c <__aeabi_dcmplt>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <vTask_PrOp+0x1d6>
				sprintf(cmd.payload,
						"rollto %u %.2f" ,
						1 , // CCW
						-parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative -8);
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <vTask_PrOp+0x250>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	4a2e      	ldr	r2, [pc, #184]	; (800264c <vTask_PrOp+0x254>)
 8002594:	460b      	mov	r3, r1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	3388      	adds	r3, #136	; 0x88
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	4614      	mov	r4, r2
 80025a6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
				sprintf(cmd.payload,
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <vTask_PrOp+0x268>)
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7fd fe80 	bl	80002b8 <__aeabi_dsub>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	f107 000c 	add.w	r0, r7, #12
 80025c0:	e9cd 2300 	strd	r2, r3, [sp]
 80025c4:	2201      	movs	r2, #1
 80025c6:	4927      	ldr	r1, [pc, #156]	; (8002664 <vTask_PrOp+0x26c>)
 80025c8:	f00c f874 	bl	800e6b4 <siprintf>
 80025cc:	e01a      	b.n	8002604 <vTask_PrOp+0x20c>
			}else{
				sprintf(cmd.payload,
						"rollto %u %.2f" ,
						0 , // CW
						parameters_Path_Robot.Operation_List[counter_operation].grad_Rotative - 8);
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <vTask_PrOp+0x250>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <vTask_PrOp+0x254>)
 80025d6:	460b      	mov	r3, r1
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	3388      	adds	r3, #136	; 0x88
 80025e2:	e9d3 0100 	ldrd	r0, r1, [r3]
				sprintf(cmd.payload,
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <vTask_PrOp+0x268>)
 80025ec:	f7fd fe64 	bl	80002b8 <__aeabi_dsub>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	f107 000c 	add.w	r0, r7, #12
 80025f8:	e9cd 2300 	strd	r2, r3, [sp]
 80025fc:	2200      	movs	r2, #0
 80025fe:	4919      	ldr	r1, [pc, #100]	; (8002664 <vTask_PrOp+0x26c>)
 8002600:	f00c f858 	bl	800e6b4 <siprintf>
			}


			xTaskNotify(xHandleTask_Commands,(uint32_t) &cmd, eSetValueWithOverwrite); //reiniciamos todos los parametros
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <vTask_PrOp+0x264>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	f107 020c 	add.w	r2, r7, #12
 800260c:	2300      	movs	r3, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2303      	movs	r3, #3
 8002612:	2100      	movs	r1, #0
 8002614:	f003 fd64 	bl	80060e0 <xTaskGenericNotify>

			counter_operation++;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <vTask_PrOp+0x250>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <vTask_PrOp+0x250>)
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e6f4      	b.n	8002410 <vTask_PrOp+0x18>

		}else{// Al llegar aca es porque se acabaron las operaciones, la ultima operacion sera una operacion nula, lo que indica
			// cerrar el comando de Astar
			memset(parameters_Path_Robot.Operation_List,0, sizeof(parameters_Path_Robot.Operation_List));
 8002626:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800262a:	2100      	movs	r1, #0
 800262c:	480e      	ldr	r0, [pc, #56]	; (8002668 <vTask_PrOp+0x270>)
 800262e:	f00b fadf 	bl	800dbf0 <memset>
			counter_operation = 0;
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <vTask_PrOp+0x250>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
			flag_PrOp = RESET; // Paramos el proceso de procesamiento de operaciones y volvemos a el estado normal del programa
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <vTask_PrOp+0x274>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esperar hasta que la notificacion salte
 800263e:	e6e7      	b.n	8002410 <vTask_PrOp+0x18>
 8002640:	00000000 	.word	0x00000000
 8002644:	40000000 	.word	0x40000000
 8002648:	20000c10 	.word	0x20000c10
 800264c:	20000610 	.word	0x20000610
 8002650:	40240000 	.word	0x40240000
 8002654:	20000b30 	.word	0x20000b30
 8002658:	0801386c 	.word	0x0801386c
 800265c:	20000238 	.word	0x20000238
 8002660:	40200000 	.word	0x40200000
 8002664:	0801387c 	.word	0x0801387c
 8002668:	20000680 	.word	0x20000680
 800266c:	200005e7 	.word	0x200005e7

08002670 <vTask_Reinit>:

///////////////////////////////////////////////////////////ASTAR STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Reinit( void * pvParameters ){
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af02      	add	r7, sp, #8
 8002676:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8002678:	f04f 33ff 	mov.w	r3, #4294967295
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	2000      	movs	r0, #0
 8002686:	f003 fcab 	bl	8005fe0 <xTaskGenericNotifyWait>

		 // en este comando reiniciamos las variables del sistema para volver a empezar desde un nuevo punto de referencia
		int_Config_Motor(handler_Motor_Array,
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <vTask_Reinit+0x58>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <vTask_Reinit+0x5c>)
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <vTask_Reinit+0x60>)
 8002692:	4910      	ldr	r1, [pc, #64]	; (80026d4 <vTask_Reinit+0x64>)
 8002694:	4810      	ldr	r0, [pc, #64]	; (80026d8 <vTask_Reinit+0x68>)
 8002696:	f001 f933 	bl	8003900 <int_Config_Motor>
						&parameters_Path_Robot,
						&parameter_PID_distace,
						&Mode_dir);


		if(parameters_op_Robot.op_Mode != 0){ // Modo Square o Astar funcionando
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <vTask_Reinit+0x6c>)
 800269c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <vTask_Reinit+0x4e>
 			// En esta opcion notificamos a la tarea de procesar el comando para ir procesando operacion por operación
			xTaskNotify(xHandleTask_PrOp,0, eNoAction);
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <vTask_Reinit+0x70>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	f003 fd15 	bl	80060e0 <xTaskGenericNotify>
			flag_PrOp = SET;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <vTask_Reinit+0x74>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e7dc      	b.n	8002678 <vTask_Reinit+0x8>
		}else{
			next_state = sMainMenu; // Cambiamos el estado de nuevo al estado principal
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <vTask_Reinit+0x78>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 80026c4:	e7d8      	b.n	8002678 <vTask_Reinit+0x8>
 80026c6:	bf00      	nop
 80026c8:	200005dc 	.word	0x200005dc
 80026cc:	200005f0 	.word	0x200005f0
 80026d0:	20000610 	.word	0x20000610
 80026d4:	20000b30 	.word	0x20000b30
 80026d8:	20000440 	.word	0x20000440
 80026dc:	20000bb0 	.word	0x20000bb0
 80026e0:	20000268 	.word	0x20000268
 80026e4:	200005e7 	.word	0x200005e7
 80026e8:	200005df 	.word	0x200005df

080026ec <vTask_Print>:

}



void vTask_Print( void * pvParameters ){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <vTask_Print+0x28>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f107 010c 	add.w	r1, r7, #12
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fb8d 	bl	8004e20 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART, (char*) msg);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4619      	mov	r1, r3
 800270a:	4803      	ldr	r0, [pc, #12]	; (8002718 <vTask_Print+0x2c>)
 800270c:	f00a fee2 	bl	800d4d4 <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8002710:	e7f0      	b.n	80026f4 <vTask_Print+0x8>
 8002712:	bf00      	nop
 8002714:	2000026c 	.word	0x2000026c
 8002718:	20000390 	.word	0x20000390

0800271c <process_command>:
   }
}



void process_command (command_t *cmd){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af02      	add	r7, sp, #8
 8002722:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f83d 	bl	80027a4 <extract_command>


	if (next_state == sMainMenu){
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <process_command+0x70>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <process_command+0x74>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2303      	movs	r3, #3
 800273e:	2100      	movs	r1, #0
 8002740:	f003 fcce 	bl	80060e0 <xTaskGenericNotify>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
	}


}
 8002744:	e01d      	b.n	8002782 <process_command+0x66>
	}else if (!wrong_command && !flag_PrOp){
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <process_command+0x78>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d110      	bne.n	8002770 <process_command+0x54>
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <process_command+0x7c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <process_command+0x54>
		end = SET;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <process_command+0x80>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 800275c:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <process_command+0x84>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	f003 fcb9 	bl	80060e0 <xTaskGenericNotify>
}
 800276e:	e008      	b.n	8002782 <process_command+0x66>
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <process_command+0x74>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2303      	movs	r3, #3
 800277c:	2100      	movs	r1, #0
 800277e:	f003 fcaf 	bl	80060e0 <xTaskGenericNotify>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200005df 	.word	0x200005df
 8002790:	20000230 	.word	0x20000230
 8002794:	200005e4 	.word	0x200005e4
 8002798:	200005e7 	.word	0x200005e7
 800279c:	200005e5 	.word	0x200005e5
 80027a0:	2000023c 	.word	0x2000023c

080027a4 <extract_command>:


int extract_command (command_t *cmd){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af04      	add	r7, sp, #16
 80027aa:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

//	status = uxQueueMessagesWaiting(xQueue_InputData);

	if (wrong_command){
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <extract_command+0x1b4>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <extract_command+0x36>
				// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
				cmd->functionType = -1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f04f 32ff 	mov.w	r2, #4294967295
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
				memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00b fa12 	bl	800dbf0 <memset>
				xQueueReset(xQueue_InputData);
 80027cc:	4b63      	ldr	r3, [pc, #396]	; (800295c <extract_command+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 f892 	bl	80048fc <xQueueGenericReset>
 80027d8:	e0b8      	b.n	800294c <extract_command+0x1a8>
	}else if (!wrong_command && !flag_PrOp ){
 80027da:	4b5f      	ldr	r3, [pc, #380]	; (8002958 <extract_command+0x1b4>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 808b 	bne.w	80028fa <extract_command+0x156>
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <extract_command+0x1bc>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 8086 	bne.w	80028fa <extract_command+0x156>

		do{
			// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
			status = xQueueReceive(xQueue_InputData, &item,0);
 80027ee:	4b5b      	ldr	r3, [pc, #364]	; (800295c <extract_command+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f107 010f 	add.w	r1, r7, #15
 80027f6:	2200      	movs	r2, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fb11 	bl	8004e20 <xQueueReceive>
 80027fe:	6138      	str	r0, [r7, #16]
			if(status == pdTRUE){
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d106      	bne.n	8002814 <extract_command+0x70>

				//vamos llenando el arreglo del comando
				cmd->payload[counter_j++] = item;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	75fa      	strb	r2, [r7, #23]
 800280c:	461a      	mov	r2, r3
 800280e:	7bf9      	ldrb	r1, [r7, #15]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	5499      	strb	r1, [r3, r2]

			}
		}while(item != '#');
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b23      	cmp	r3, #35	; 0x23
 8002818:	d1e9      	bne.n	80027ee <extract_command+0x4a>

		cmd->payload[counter_j] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	2100      	movs	r1, #0
 8002820:	54d1      	strb	r1, [r2, r3]

		// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
//		sscanf((char *) cmd->payload, "%s %u %u %u %s", data ,&firstParameter, &secondParameter, &thirdParameter, userMsg);

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 8002822:	4b50      	ldr	r3, [pc, #320]	; (8002964 <extract_command+0x1c0>)
 8002824:	9303      	str	r3, [sp, #12]
 8002826:	4b50      	ldr	r3, [pc, #320]	; (8002968 <extract_command+0x1c4>)
 8002828:	9302      	str	r3, [sp, #8]
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <extract_command+0x1c8>)
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <extract_command+0x1cc>)
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <extract_command+0x1d0>)
 8002834:	4a50      	ldr	r2, [pc, #320]	; (8002978 <extract_command+0x1d4>)
 8002836:	4951      	ldr	r1, [pc, #324]	; (800297c <extract_command+0x1d8>)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 fba9 	bl	8003f90 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2240      	movs	r2, #64	; 0x40
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f00b f9d3 	bl	800dbf0 <memset>
		xQueueReset(xQueue_InputData);
 800284a:	4b44      	ldr	r3, [pc, #272]	; (800295c <extract_command+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f853 	bl	80048fc <xQueueGenericReset>

		if (strcmp(data, "sGo") == 0){
 8002856:	494a      	ldr	r1, [pc, #296]	; (8002980 <extract_command+0x1dc>)
 8002858:	4848      	ldr	r0, [pc, #288]	; (800297c <extract_command+0x1d8>)
 800285a:	f7fd fcc1 	bl	80001e0 <strcmp>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d103      	bne.n	800286c <extract_command+0xc8>
			cmd->functionType = 1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 800286a:	e06f      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "sGoTo") == 0){
 800286c:	4945      	ldr	r1, [pc, #276]	; (8002984 <extract_command+0x1e0>)
 800286e:	4843      	ldr	r0, [pc, #268]	; (800297c <extract_command+0x1d8>)
 8002870:	f7fd fcb6 	bl	80001e0 <strcmp>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <extract_command+0xde>
			cmd->functionType = 2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 8002880:	e064      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "sRoll") == 0){
 8002882:	4941      	ldr	r1, [pc, #260]	; (8002988 <extract_command+0x1e4>)
 8002884:	483d      	ldr	r0, [pc, #244]	; (800297c <extract_command+0x1d8>)
 8002886:	f7fd fcab 	bl	80001e0 <strcmp>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <extract_command+0xf4>
			cmd->functionType = 3;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 8002896:	e059      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "sRollto") == 0){
 8002898:	493c      	ldr	r1, [pc, #240]	; (800298c <extract_command+0x1e8>)
 800289a:	4838      	ldr	r0, [pc, #224]	; (800297c <extract_command+0x1d8>)
 800289c:	f7fd fca0 	bl	80001e0 <strcmp>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <extract_command+0x10a>
			cmd->functionType = 4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2204      	movs	r2, #4
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 80028ac:	e04e      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "reinit") == 0){
 80028ae:	4938      	ldr	r1, [pc, #224]	; (8002990 <extract_command+0x1ec>)
 80028b0:	4832      	ldr	r0, [pc, #200]	; (800297c <extract_command+0x1d8>)
 80028b2:	f7fd fc95 	bl	80001e0 <strcmp>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <extract_command+0x120>
			cmd->functionType = 5;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2205      	movs	r2, #5
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 80028c2:	e043      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "sSquare") == 0){
 80028c4:	4933      	ldr	r1, [pc, #204]	; (8002994 <extract_command+0x1f0>)
 80028c6:	482d      	ldr	r0, [pc, #180]	; (800297c <extract_command+0x1d8>)
 80028c8:	f7fd fc8a 	bl	80001e0 <strcmp>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d103      	bne.n	80028da <extract_command+0x136>
			cmd->functionType = 6;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2206      	movs	r2, #6
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 80028d8:	e038      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "sAstar") == 0){
 80028da:	492f      	ldr	r1, [pc, #188]	; (8002998 <extract_command+0x1f4>)
 80028dc:	4827      	ldr	r0, [pc, #156]	; (800297c <extract_command+0x1d8>)
 80028de:	f7fd fc7f 	bl	80001e0 <strcmp>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <extract_command+0x14c>
			cmd->functionType = 7;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2207      	movs	r2, #7
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 80028ee:	e02d      	b.n	800294c <extract_command+0x1a8>
		}else{
			// si se llego aqui es porque se mando un comando erronio, por lo que hay resetear y mandar de nuevo
			cmd->functionType = -1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f04f 32ff 	mov.w	r2, #4294967295
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
		if (strcmp(data, "sGo") == 0){
 80028f8:	e028      	b.n	800294c <extract_command+0x1a8>

	}else{
		// Si estamos aqui es porque la bandera de procesamiento de operaciones esta levantada, por lo que se quiere solo procesar
		// un comando desde el codigo, no desde terminal

		extract_info(cmd, data, firstParameter, secondParameter, thirdParameter, &fparam, &sparam, &tparam);
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <extract_command+0x1c0>)
 80028fc:	9303      	str	r3, [sp, #12]
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <extract_command+0x1c4>)
 8002900:	9302      	str	r3, [sp, #8]
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <extract_command+0x1c8>)
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <extract_command+0x1cc>)
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <extract_command+0x1d0>)
 800290c:	4a1a      	ldr	r2, [pc, #104]	; (8002978 <extract_command+0x1d4>)
 800290e:	491b      	ldr	r1, [pc, #108]	; (800297c <extract_command+0x1d8>)
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f001 fb3d 	bl	8003f90 <extract_info>

		memset(cmd->payload,0,sizeof(cmd->payload)); // Limpiamos el payload
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2240      	movs	r2, #64	; 0x40
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f00b f967 	bl	800dbf0 <memset>

		// Solo nos interesan los estados de ir a y girar a
		if (strcmp(data, "sGoTo") == 0){
 8002922:	4918      	ldr	r1, [pc, #96]	; (8002984 <extract_command+0x1e0>)
 8002924:	4815      	ldr	r0, [pc, #84]	; (800297c <extract_command+0x1d8>)
 8002926:	f7fd fc5b 	bl	80001e0 <strcmp>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <extract_command+0x194>
			cmd->functionType = 2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
 8002936:	e009      	b.n	800294c <extract_command+0x1a8>
		}else if (strcmp(data, "sRollTo") == 0){
 8002938:	4918      	ldr	r1, [pc, #96]	; (800299c <extract_command+0x1f8>)
 800293a:	4810      	ldr	r0, [pc, #64]	; (800297c <extract_command+0x1d8>)
 800293c:	f7fd fc50 	bl	80001e0 <strcmp>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <extract_command+0x1a8>
			cmd->functionType = 4;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
		}

	}
	return 0;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200005e4 	.word	0x200005e4
 800295c:	20000270 	.word	0x20000270
 8002960:	200005e7 	.word	0x200005e7
 8002964:	20000524 	.word	0x20000524
 8002968:	20000520 	.word	0x20000520
 800296c:	2000051c 	.word	0x2000051c
 8002970:	20000510 	.word	0x20000510
 8002974:	20000504 	.word	0x20000504
 8002978:	200004f8 	.word	0x200004f8
 800297c:	2000055c 	.word	0x2000055c
 8002980:	0801388c 	.word	0x0801388c
 8002984:	08013890 	.word	0x08013890
 8002988:	08013898 	.word	0x08013898
 800298c:	080138a0 	.word	0x080138a0
 8002990:	080138a8 	.word	0x080138a8
 8002994:	080138b0 	.word	0x080138b0
 8002998:	080138b8 	.word	0x080138b8
 800299c:	080138c0 	.word	0x080138c0

080029a0 <callback_extInt1>:

//Interrupciones de Exti
void callback_extInt1(void){
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <callback_extInt1+0x24>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <callback_extInt1+0x18>
		handler_Motor_Array[0]->parametersMotor.counts++;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <callback_extInt1+0x28>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	791a      	ldrb	r2, [r3, #4]
 80029b2:	3201      	adds	r2, #1
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	711a      	strb	r2, [r3, #4]
	}
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	200005dc 	.word	0x200005dc
 80029c8:	20000440 	.word	0x20000440

080029cc <callback_extInt3>:

void callback_extInt3(void){
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
	// Aumentamos las cuentas
	if (Mode_dir.Mode != None){
 80029d0:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <callback_extInt3+0x24>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <callback_extInt3+0x18>
		handler_Motor_Array[1]->parametersMotor.counts++;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <callback_extInt3+0x28>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	791a      	ldrb	r2, [r3, #4]
 80029de:	3201      	adds	r2, #1
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	711a      	strb	r2, [r3, #4]
	}
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	200005dc 	.word	0x200005dc
 80029f4:	20000440 	.word	0x20000440

080029f8 <usart2Rx_Callback>:



//Interripcion USART2
void usart2Rx_Callback(void){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af02      	add	r7, sp, #8

	rxData = getRxData();
 80029fe:	f00a fd91 	bl	800d524 <getRxData>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a08:	701a      	strb	r2, [r3, #0]
//	writeChar(&handlerUSART, rxData);

	if (rxData == '\r'){
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b0d      	cmp	r3, #13
 8002a10:	d102      	bne.n	8002a18 <usart2Rx_Callback+0x20>
		wrong_command = SET;
 8002a12:	4b2a      	ldr	r3, [pc, #168]	; (8002abc <usart2Rx_Callback+0xc4>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
	}
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <usart2Rx_Callback+0xc8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fc7c 	bl	800531e <xQueueIsQueueFullFromISR>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <usart2Rx_Callback+0xcc>)
 8002a2a:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <usart2Rx_Callback+0xcc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d007      	beq.n	8002a44 <usart2Rx_Callback+0x4c>

		xQueueSendToBackFromISR(xQueue_InputData,
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <usart2Rx_Callback+0xc8>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	491e      	ldr	r1, [pc, #120]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a3e:	f002 f945 	bl	8004ccc <xQueueGenericSendFromISR>
 8002a42:	e011      	b.n	8002a68 <usart2Rx_Callback+0x70>
								NULL);

	}else{


		if (rxData == '#'){
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b23      	cmp	r3, #35	; 0x23
 8002a4a:	d10d      	bne.n	8002a68 <usart2Rx_Callback+0x70>

			xQueueReceiveFromISR(xQueue_InputData,
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <usart2Rx_Callback+0xc8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2200      	movs	r2, #0
 8002a52:	4919      	ldr	r1, [pc, #100]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fac3 	bl	8004fe0 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <usart2Rx_Callback+0xc8>)
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2200      	movs	r2, #0
 8002a62:	4915      	ldr	r1, [pc, #84]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a64:	f002 f932 	bl	8004ccc <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (!flag_Astar){
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <usart2Rx_Callback+0xd0>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <usart2Rx_Callback+0xa0>
		if (rxData == '#' || rxData == '\r'){
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b23      	cmp	r3, #35	; 0x23
 8002a76:	d003      	beq.n	8002a80 <usart2Rx_Callback+0x88>
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <usart2Rx_Callback+0xc0>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b0d      	cmp	r3, #13
 8002a7e:	d116      	bne.n	8002aae <usart2Rx_Callback+0xb6>
			// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
			xTaskNotifyFromISR(xHandleTask_Commands,
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <usart2Rx_Callback+0xd4>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	f003 fc05 	bl	80062a0 <xTaskGenericNotifyFromISR>
		xTaskNotifyFromISR(xHandleTask_Grid,
						   0,
						   eNoAction,
						   NULL);
	}
}
 8002a96:	e00a      	b.n	8002aae <usart2Rx_Callback+0xb6>
		xTaskNotifyFromISR(xHandleTask_Grid,
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <usart2Rx_Callback+0xd8>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f003 fbf9 	bl	80062a0 <xTaskGenericNotifyFromISR>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200004f5 	.word	0x200004f5
 8002abc:	200005e4 	.word	0x200005e4
 8002ac0:	20000270 	.word	0x20000270
 8002ac4:	2000022c 	.word	0x2000022c
 8002ac8:	200005e6 	.word	0x200005e6
 8002acc:	20000238 	.word	0x20000238
 8002ad0:	20000260 	.word	0x20000260

08002ad4 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2

void BasicTimer2_Callback(void){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af02      	add	r7, sp, #8

	// Levantamos bandera que calcula el angulo actual
	flag_angulo = SET;
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <BasicTimer2_Callback+0x4c>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]

	// Levantamos la bandera que corresponde con los calculos  odometricos del robot, como la distancia
	// Recorrida, la posicion actual y la velocidad

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action >= timeAction_TIMER_Sampling){
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <BasicTimer2_Callback+0x50>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <BasicTimer2_Callback+0x54>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d803      	bhi.n	8002af6 <BasicTimer2_Callback+0x22>
			flag_measurements = SET;
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <BasicTimer2_Callback+0x58>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e005      	b.n	8002b02 <BasicTimer2_Callback+0x2e>
	}else{ counting_action++; }
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <BasicTimer2_Callback+0x54>)
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <BasicTimer2_Callback+0x54>)
 8002b00:	801a      	strh	r2, [r3, #0]

	// Solo cuando estemos en alguna operacion diferente a None, se despierta la tarea de control
	xTaskNotifyFromISR(xHandleTask_Control,
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <BasicTimer2_Callback+0x5c>)
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2200      	movs	r2, #0
 8002b12:	2100      	movs	r1, #0
 8002b14:	f003 fbc4 	bl	80062a0 <xTaskGenericNotifyFromISR>
					   0,
					   eNoAction,
					   NULL);

	// EN LA FUNCION 'GO' ESTAN LAS DOS BANDERAS SE ANALIZARAN Y SE EJECUTARAN
}
 8002b18:	bf00      	nop
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200005e0 	.word	0x200005e0
 8002b24:	2000002c 	.word	0x2000002c
 8002b28:	200005ea 	.word	0x200005ea
 8002b2c:	200005e1 	.word	0x200005e1
 8002b30:	20000244 	.word	0x20000244

08002b34 <calibracionGyros>:
//Definicion de funciones varias


// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8002b40:	23c8      	movs	r3, #200	; 0xc8
 8002b42:	827b      	strh	r3, [r7, #18]
	float     medidas    = 0;
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
	float     suma       = 0;
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
	uint8_t   contador   = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	76fb      	strb	r3, [r7, #27]
	float     promedio   = 0;
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d061      	beq.n	8002c24 <calibracionGyros+0xf0>
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	dc70      	bgt.n	8002c46 <calibracionGyros+0x112>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <calibracionGyros+0x60>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d037      	beq.n	8002bdc <calibracionGyros+0xa8>
				delay_ms(1); // esperamos 1 milisegundo
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8002b6c:	e06b      	b.n	8002c46 <calibracionGyros+0x112>
				medidas = readGyro_X(ptrMPUAccel);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f008 fb22 	bl	800b1b8 <readGyro_X>
 8002b74:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002b78:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b84:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002b88:	7efb      	ldrb	r3, [r7, #27]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f006 fbdc 	bl	800934c <delay_ms>
			while (contador < numMedidas){
 8002b94:	7efb      	ldrb	r3, [r7, #27]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8a7a      	ldrh	r2, [r7, #18]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d8e7      	bhi.n	8002b6e <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8002b9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002bb4:	e048      	b.n	8002c48 <calibracionGyros+0x114>
				medidas = readGyro_Y(ptrMPUAccel);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f008 fb86 	bl	800b2c8 <readGyro_Y>
 8002bbc:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002bc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002bd0:	7efb      	ldrb	r3, [r7, #27]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f006 fbb8 	bl	800934c <delay_ms>
			while (contador < numMedidas){
 8002bdc:	7efb      	ldrb	r3, [r7, #27]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	8a7a      	ldrh	r2, [r7, #18]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d8e7      	bhi.n	8002bb6 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8002be6:	8a7b      	ldrh	r3, [r7, #18]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002bfc:	e024      	b.n	8002c48 <calibracionGyros+0x114>
				medidas = readGyro_Z(ptrMPUAccel);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f008 fbea 	bl	800b3d8 <readGyro_Z>
 8002c04:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8002c08:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8002c18:	7efb      	ldrb	r3, [r7, #27]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	76fb      	strb	r3, [r7, #27]
				delay_ms(1); // esperamos 1 milisegundo
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f006 fb94 	bl	800934c <delay_ms>
			while (contador < numMedidas){
 8002c24:	7efb      	ldrb	r3, [r7, #27]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	8a7a      	ldrh	r2, [r7, #18]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d8e7      	bhi.n	8002bfe <calibracionGyros+0xca>
			promedio = suma / numMedidas;
 8002c2e:	8a7b      	ldrh	r3, [r7, #18]
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c40:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002c44:	e000      	b.n	8002c48 <calibracionGyros+0x114>
			break;
 8002c46:	bf00      	nop
		}
	}


	return promedio;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	ee07 3a90 	vmov	s15, r3
}
 8002c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <getAngle>:


void getAngle(MPUAccel_Config *ptrMPUAccel,float angle_init, double calibr, Parameters_Position_t *ptrParameter_position){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6178      	str	r0, [r7, #20]
 8002c60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c64:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c68:	6079      	str	r1, [r7, #4]
	///////////////////////////MEDIDA DEL ANGULO ACUMULADO////////////////////////////////////

	//----------------Accion a Realiza cada interrupción------------------
		//Leemos el ángulo
		//Lectura velocidad angular
		float w = readGyro_Z(ptrMPUAccel) - calibr;
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f008 fbb4 	bl	800b3d8 <readGyro_Z>
 8002c70:	ee10 3a10 	vmov	r3, s0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc7f 	bl	8000578 <__aeabi_f2d>
 8002c7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c7e:	f7fd fb1b 	bl	80002b8 <__aeabi_dsub>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f7fd ffc5 	bl	8000c18 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	61fb      	str	r3, [r7, #28]
		//Calculo angulo
		float ang_d = angle_init + (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 8002c92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c96:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002c9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c9e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002d04 <getAngle+0xac>
 8002ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	edc7 7a06 	vstr	s15, [r7, #24]

		ptrParameter_position->grad_relativo = ang_d;
 8002cb2:	69b8      	ldr	r0, [r7, #24]
 8002cb4:	f7fd fc60 	bl	8000578 <__aeabi_f2d>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	e9c1 2300 	strd	r2, r3, [r1]

		//Acumulamos los angulos
		sum_ang += ptrParameter_position->grad_relativo;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <getAngle+0xb0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc56 	bl	8000578 <__aeabi_f2d>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd2:	f7fd faf3 	bl	80002bc <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd ff9b 	bl	8000c18 <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <getAngle+0xb0>)
 8002ce6:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <getAngle+0xb4>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <getAngle+0xb8>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <getAngle+0xb8>)
 8002cf8:	801a      	strh	r2, [r3, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	447a0000 	.word	0x447a0000
 8002d08:	20000be0 	.word	0x20000be0
 8002d0c:	20000324 	.word	0x20000324
 8002d10:	200005e8 	.word	0x200005e8
 8002d14:	00000000 	.word	0x00000000

08002d18 <get_measuremets_parameters>:

void get_measuremets_parameters(Motor_Handler_t *ptrMotorHandler[2], Parameters_Position_t *ptrParameter_position, state_dir_t operation_mode_dir){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	ed2d 8b02 	vpush	{d8}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	80ba      	strh	r2, [r7, #4]

	//Verificamos el modo
	if(operation_mode_dir.Mode == Line){ // Levantamos la vandera que calcula todos los parametros necesarios para el control
 8002d28:	793b      	ldrb	r3, [r7, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	f040 81d4 	bne.w	80030d8 <get_measuremets_parameters+0x3c0>

			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 8002d30:	4bab      	ldr	r3, [pc, #684]	; (8002fe0 <get_measuremets_parameters+0x2c8>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4bab      	ldr	r3, [pc, #684]	; (8002fe4 <get_measuremets_parameters+0x2cc>)
 8002d38:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemos como el angulo relativo
			promAng = sum_ang / counting_action;
 8002d3a:	4bab      	ldr	r3, [pc, #684]	; (8002fe8 <get_measuremets_parameters+0x2d0>)
 8002d3c:	edd3 6a00 	vldr	s13, [r3]
 8002d40:	4baa      	ldr	r3, [pc, #680]	; (8002fec <get_measuremets_parameters+0x2d4>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d50:	4ba7      	ldr	r3, [pc, #668]	; (8002ff0 <get_measuremets_parameters+0x2d8>)
 8002d52:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8002d56:	4ba6      	ldr	r3, [pc, #664]	; (8002ff0 <get_measuremets_parameters+0x2d8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fc0c 	bl	8000578 <__aeabi_f2d>
 8002d60:	a39b      	add	r3, pc, #620	; (adr r3, 8002fd0 <get_measuremets_parameters+0x2b8>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fc5f 	bl	8000628 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b9f      	ldr	r3, [pc, #636]	; (8002ff4 <get_measuremets_parameters+0x2dc>)
 8002d78:	f7fd fd80 	bl	800087c <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	e9c1 2302 	strd	r2, r3, [r1, #8]

			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002d86:	4b98      	ldr	r3, [pc, #608]	; (8002fe8 <get_measuremets_parameters+0x2d0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbf4 	bl	8000578 <__aeabi_f2d>
 8002d90:	a38f      	add	r3, pc, #572	; (adr r3, 8002fd0 <get_measuremets_parameters+0x2b8>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fc47 	bl	8000628 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <get_measuremets_parameters+0x2dc>)
 8002da8:	f7fd fd68 	bl	800087c <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	ec43 2b17 	vmov	d7, r2, r3
 8002db4:	eeb0 0a47 	vmov.f32	s0, s14
 8002db8:	eef0 0a67 	vmov.f32	s1, s15
 8002dbc:	f00d fe8c 	bl	8010ad8 <sin>
 8002dc0:	eeb0 8a40 	vmov.f32	s16, s0
 8002dc4:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002dc8:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <get_measuremets_parameters+0x2d0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fbd3 	bl	8000578 <__aeabi_f2d>
 8002dd2:	a37f      	add	r3, pc, #508	; (adr r3, 8002fd0 <get_measuremets_parameters+0x2b8>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fc26 	bl	8000628 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	4b82      	ldr	r3, [pc, #520]	; (8002ff4 <get_measuremets_parameters+0x2dc>)
 8002dea:	f7fd fd47 	bl	800087c <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	ec43 2b17 	vmov	d7, r2, r3
 8002df6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dfa:	eef0 0a67 	vmov.f32	s1, s15
 8002dfe:	f00d fdcf 	bl	80109a0 <cos>
 8002e02:	eeb0 7a40 	vmov.f32	s14, s0
 8002e06:	eef0 7a60 	vmov.f32	s15, s1
 8002e0a:	eeb0 1a47 	vmov.f32	s2, s14
 8002e0e:	eef0 1a67 	vmov.f32	s3, s15
 8002e12:	eeb0 0a48 	vmov.f32	s0, s16
 8002e16:	eef0 0a68 	vmov.f32	s1, s17
 8002e1a:	f00d fee9 	bl	8010bf0 <atan2>
 8002e1e:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8002e22:	a36d      	add	r3, pc, #436	; (adr r3, 8002fd8 <get_measuremets_parameters+0x2c0>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd fbfe 	bl	8000628 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e3a:	f7fd fa3f 	bl	80002bc <__adddf3>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	e9c1 2306 	strd	r2, r3, [r1, #24]

			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e4e:	a360      	add	r3, pc, #384	; (adr r3, 8002fd0 <get_measuremets_parameters+0x2b8>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fbe8 	bl	8000628 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b63      	ldr	r3, [pc, #396]	; (8002ff4 <get_measuremets_parameters+0x2dc>)
 8002e66:	f7fd fd09 	bl	800087c <__aeabi_ddiv>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	ec43 2b17 	vmov	d7, r2, r3
 8002e72:	eeb0 0a47 	vmov.f32	s0, s14
 8002e76:	eef0 0a67 	vmov.f32	s1, s15
 8002e7a:	f00d fe2d 	bl	8010ad8 <sin>
 8002e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8002e82:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e8c:	a350      	add	r3, pc, #320	; (adr r3, 8002fd0 <get_measuremets_parameters+0x2b8>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbc9 	bl	8000628 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <get_measuremets_parameters+0x2dc>)
 8002ea4:	f7fd fcea 	bl	800087c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	ec43 2b17 	vmov	d7, r2, r3
 8002eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb4:	eef0 0a67 	vmov.f32	s1, s15
 8002eb8:	f00d fd72 	bl	80109a0 <cos>
 8002ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ec0:	eef0 7a60 	vmov.f32	s15, s1
 8002ec4:	eeb0 1a47 	vmov.f32	s2, s14
 8002ec8:	eef0 1a67 	vmov.f32	s3, s15
 8002ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8002ed0:	eef0 0a68 	vmov.f32	s1, s17
 8002ed4:	f00d fe8c 	bl	8010bf0 <atan2>
 8002ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8002edc:	eef0 7a60 	vmov.f32	s15, s1
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	ed83 7b04 	vstr	d7, [r3, #16]

			// Con la siguiente accion conseguimos que el angulo que deseamos solo este dentro del rango [-pi,pi]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	ed93 7b02 	vldr	d7, [r3, #8]
 8002eec:	eeb0 0a47 	vmov.f32	s0, s14
 8002ef0:	eef0 0a67 	vmov.f32	s1, s15
 8002ef4:	f00d fdf0 	bl	8010ad8 <sin>
 8002ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8002efc:	eef0 8a60 	vmov.f32	s17, s1
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	ed93 7b02 	vldr	d7, [r3, #8]
 8002f06:	eeb0 0a47 	vmov.f32	s0, s14
 8002f0a:	eef0 0a67 	vmov.f32	s1, s15
 8002f0e:	f00d fd47 	bl	80109a0 <cos>
 8002f12:	eeb0 7a40 	vmov.f32	s14, s0
 8002f16:	eef0 7a60 	vmov.f32	s15, s1
 8002f1a:	eeb0 1a47 	vmov.f32	s2, s14
 8002f1e:	eef0 1a67 	vmov.f32	s3, s15
 8002f22:	eeb0 0a48 	vmov.f32	s0, s16
 8002f26:	eef0 0a68 	vmov.f32	s1, s17
 8002f2a:	f00d fe61 	bl	8010bf0 <atan2>
 8002f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f32:	eef0 7a60 	vmov.f32	s15, s1
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	ed83 7b02 	vstr	d7, [r3, #8]
														cos(ptrParameter_position->rad_relativo));

			//Calculamos la velocidad
			if (operation_mode_dir.direction_s_r == SET){
 8002f3c:	797b      	ldrb	r3, [r7, #5]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d15e      	bne.n	8003000 <get_measuremets_parameters+0x2e8>

				// SI estamos aqui se tiene una direccion deseada hacia adelante
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	791b      	ldrb	r3, [r3, #4]
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <get_measuremets_parameters+0x2e0>)
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	791b      	ldrb	r3, [r3, #4]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <get_measuremets_parameters+0x2e4>)
 8002f74:	edd3 7a00 	vldr	s15, [r3]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <get_measuremets_parameters+0x2cc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fa2:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <get_measuremets_parameters+0x2cc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc6:	edc3 7a02 	vstr	s15, [r3, #8]
 8002fca:	e065      	b.n	8003098 <get_measuremets_parameters+0x380>
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	54442d18 	.word	0x54442d18
 8002fd4:	400921fb 	.word	0x400921fb
 8002fd8:	1a63c1f8 	.word	0x1a63c1f8
 8002fdc:	404ca5dc 	.word	0x404ca5dc
 8002fe0:	200005e8 	.word	0x200005e8
 8002fe4:	200005ec 	.word	0x200005ec
 8002fe8:	20000be0 	.word	0x20000be0
 8002fec:	200005ea 	.word	0x200005ea
 8002ff0:	20000be4 	.word	0x20000be4
 8002ff4:	40668000 	.word	0x40668000
 8002ff8:	20000030 	.word	0x20000030
 8002ffc:	20000034 	.word	0x20000034

			}else{
				// SI estamos aqui se tiene una direccion deseada hacia atras
				// almacenamos las variables de velocidad y dirección en función de hacia donde se este llendo

				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	791b      	ldrb	r3, [r3, #4]
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <get_measuremets_parameters+0x3a8>)
 8003010:	edd3 7a00 	vldr	s15, [r3]
 8003014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	eef1 7a67 	vneg.f32	s15, s15
 8003020:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3304      	adds	r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	791b      	ldrb	r3, [r3, #4]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <get_measuremets_parameters+0x3ac>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3304      	adds	r3, #4
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	eef1 7a67 	vneg.f32	s15, s15
 8003048:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	edd3 7a03 	vldr	s15, [r3, #12]
 8003054:	eef1 6a67 	vneg.f32	s13, s15
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <get_measuremets_parameters+0x3b0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306c:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3304      	adds	r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	edd3 7a03 	vldr	s15, [r3, #12]
 800307a:	eef1 6a67 	vneg.f32	s13, s15
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <get_measuremets_parameters+0x3b0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003094:	edc3 7a02 	vstr	s15, [r3, #8]

			}

			//Reiniciamos el numero de conteos
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3304      	adds	r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	711a      	strb	r2, [r3, #4]

			//Reiniciamos variable
			sum_ang = 0;
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <get_measuremets_parameters+0x3b4>)
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

			//Reiniciamos tiempo
			time_accumulated = 0;
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <get_measuremets_parameters+0x3b8>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	801a      	strh	r2, [r3, #0]

			//Reiniciamos el contador de accion
			counting_action = 0;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <get_measuremets_parameters+0x3bc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	801a      	strh	r2, [r3, #0]
		time_accumulated = 0;

		//Reiniciamos el contador de acción
		counting_action  = 0;}

}
 80030be:	e2f0      	b.n	80036a2 <get_measuremets_parameters+0x98a>
 80030c0:	20000030 	.word	0x20000030
 80030c4:	20000034 	.word	0x20000034
 80030c8:	200005ec 	.word	0x200005ec
 80030cc:	20000be0 	.word	0x20000be0
 80030d0:	200005e8 	.word	0x200005e8
 80030d4:	200005ea 	.word	0x200005ea
	else if(operation_mode_dir.Mode == Roll)
 80030d8:	793b      	ldrb	r3, [r7, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 81c8 	bne.w	8003470 <get_measuremets_parameters+0x758>
			time_accion = time_accumulated;
 80030e0:	4bad      	ldr	r3, [pc, #692]	; (8003398 <get_measuremets_parameters+0x680>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4bad      	ldr	r3, [pc, #692]	; (800339c <get_measuremets_parameters+0x684>)
 80030e8:	601a      	str	r2, [r3, #0]
			promAng = sum_ang / counting_action;
 80030ea:	4bad      	ldr	r3, [pc, #692]	; (80033a0 <get_measuremets_parameters+0x688>)
 80030ec:	edd3 6a00 	vldr	s13, [r3]
 80030f0:	4bac      	ldr	r3, [pc, #688]	; (80033a4 <get_measuremets_parameters+0x68c>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003100:	4ba9      	ldr	r3, [pc, #676]	; (80033a8 <get_measuremets_parameters+0x690>)
 8003102:	edc3 7a00 	vstr	s15, [r3]
			ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8003106:	4ba8      	ldr	r3, [pc, #672]	; (80033a8 <get_measuremets_parameters+0x690>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fa34 	bl	8000578 <__aeabi_f2d>
 8003110:	a39d      	add	r3, pc, #628	; (adr r3, 8003388 <get_measuremets_parameters+0x670>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fa87 	bl	8000628 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4ba1      	ldr	r3, [pc, #644]	; (80033ac <get_measuremets_parameters+0x694>)
 8003128:	f7fd fba8 	bl	800087c <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	e9c1 2302 	strd	r2, r3, [r1, #8]
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003136:	4b9a      	ldr	r3, [pc, #616]	; (80033a0 <get_measuremets_parameters+0x688>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7fd fa1c 	bl	8000578 <__aeabi_f2d>
 8003140:	a391      	add	r3, pc, #580	; (adr r3, 8003388 <get_measuremets_parameters+0x670>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f7fd fa6f 	bl	8000628 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	4b95      	ldr	r3, [pc, #596]	; (80033ac <get_measuremets_parameters+0x694>)
 8003158:	f7fd fb90 	bl	800087c <__aeabi_ddiv>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	ec43 2b17 	vmov	d7, r2, r3
 8003164:	eeb0 0a47 	vmov.f32	s0, s14
 8003168:	eef0 0a67 	vmov.f32	s1, s15
 800316c:	f00d fcb4 	bl	8010ad8 <sin>
 8003170:	eeb0 8a40 	vmov.f32	s16, s0
 8003174:	eef0 8a60 	vmov.f32	s17, s1
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003178:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <get_measuremets_parameters+0x688>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9fb 	bl	8000578 <__aeabi_f2d>
 8003182:	a381      	add	r3, pc, #516	; (adr r3, 8003388 <get_measuremets_parameters+0x670>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd fa4e 	bl	8000628 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	4b84      	ldr	r3, [pc, #528]	; (80033ac <get_measuremets_parameters+0x694>)
 800319a:	f7fd fb6f 	bl	800087c <__aeabi_ddiv>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	ec43 2b17 	vmov	d7, r2, r3
 80031a6:	eeb0 0a47 	vmov.f32	s0, s14
 80031aa:	eef0 0a67 	vmov.f32	s1, s15
 80031ae:	f00d fbf7 	bl	80109a0 <cos>
 80031b2:	eeb0 7a40 	vmov.f32	s14, s0
 80031b6:	eef0 7a60 	vmov.f32	s15, s1
 80031ba:	eeb0 1a47 	vmov.f32	s2, s14
 80031be:	eef0 1a67 	vmov.f32	s3, s15
 80031c2:	eeb0 0a48 	vmov.f32	s0, s16
 80031c6:	eef0 0a68 	vmov.f32	s1, s17
 80031ca:	f00d fd11 	bl	8010bf0 <atan2>
 80031ce:	ec51 0b10 	vmov	r0, r1, d0
					  	  	  	  	  	  	  	  	    cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 80031d2:	a36f      	add	r3, pc, #444	; (adr r3, 8003390 <get_measuremets_parameters+0x678>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fa26 	bl	8000628 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
			ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031ea:	f7fd f867 	bl	80002bc <__adddf3>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80031fe:	a362      	add	r3, pc, #392	; (adr r3, 8003388 <get_measuremets_parameters+0x670>)
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f7fd fa10 	bl	8000628 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	4b65      	ldr	r3, [pc, #404]	; (80033ac <get_measuremets_parameters+0x694>)
 8003216:	f7fd fb31 	bl	800087c <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	ec43 2b17 	vmov	d7, r2, r3
 8003222:	eeb0 0a47 	vmov.f32	s0, s14
 8003226:	eef0 0a67 	vmov.f32	s1, s15
 800322a:	f00d fc55 	bl	8010ad8 <sin>
 800322e:	eeb0 8a40 	vmov.f32	s16, s0
 8003232:	eef0 8a60 	vmov.f32	s17, s1
													  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800323c:	a352      	add	r3, pc, #328	; (adr r3, 8003388 <get_measuremets_parameters+0x670>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f9f1 	bl	8000628 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
			ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b56      	ldr	r3, [pc, #344]	; (80033ac <get_measuremets_parameters+0x694>)
 8003254:	f7fd fb12 	bl	800087c <__aeabi_ddiv>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	ec43 2b17 	vmov	d7, r2, r3
 8003260:	eeb0 0a47 	vmov.f32	s0, s14
 8003264:	eef0 0a67 	vmov.f32	s1, s15
 8003268:	f00d fb9a 	bl	80109a0 <cos>
 800326c:	eeb0 7a40 	vmov.f32	s14, s0
 8003270:	eef0 7a60 	vmov.f32	s15, s1
 8003274:	eeb0 1a47 	vmov.f32	s2, s14
 8003278:	eef0 1a67 	vmov.f32	s3, s15
 800327c:	eeb0 0a48 	vmov.f32	s0, s16
 8003280:	eef0 0a68 	vmov.f32	s1, s17
 8003284:	f00d fcb4 	bl	8010bf0 <atan2>
 8003288:	eeb0 7a40 	vmov.f32	s14, s0
 800328c:	eef0 7a60 	vmov.f32	s15, s1
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	ed83 7b04 	vstr	d7, [r3, #16]
			ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	ed93 7b02 	vldr	d7, [r3, #8]
 800329c:	eeb0 0a47 	vmov.f32	s0, s14
 80032a0:	eef0 0a67 	vmov.f32	s1, s15
 80032a4:	f00d fc18 	bl	8010ad8 <sin>
 80032a8:	eeb0 8a40 	vmov.f32	s16, s0
 80032ac:	eef0 8a60 	vmov.f32	s17, s1
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80032b6:	eeb0 0a47 	vmov.f32	s0, s14
 80032ba:	eef0 0a67 	vmov.f32	s1, s15
 80032be:	f00d fb6f 	bl	80109a0 <cos>
 80032c2:	eeb0 7a40 	vmov.f32	s14, s0
 80032c6:	eef0 7a60 	vmov.f32	s15, s1
 80032ca:	eeb0 1a47 	vmov.f32	s2, s14
 80032ce:	eef0 1a67 	vmov.f32	s3, s15
 80032d2:	eeb0 0a48 	vmov.f32	s0, s16
 80032d6:	eef0 0a68 	vmov.f32	s1, s17
 80032da:	f00d fc89 	bl	8010bf0 <atan2>
 80032de:	eeb0 7a40 	vmov.f32	s14, s0
 80032e2:	eef0 7a60 	vmov.f32	s15, s1
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	ed83 7b02 	vstr	d7, [r3, #8]
			if (operation_mode_dir.direction_s_r == SET){
 80032ec:	797b      	ldrb	r3, [r7, #5]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d162      	bne.n	80033b8 <get_measuremets_parameters+0x6a0>
				ptrMotorHandler[0]->parametersMotor.dis = (paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	791b      	ldrb	r3, [r3, #4]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003300:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <get_measuremets_parameters+0x698>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = -(paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3304      	adds	r3, #4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	791b      	ldrb	r3, [r3, #4]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <get_measuremets_parameters+0x69c>)
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3304      	adds	r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	eef1 7a67 	vneg.f32	s15, s15
 8003336:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003342:	4b16      	ldr	r3, [pc, #88]	; (800339c <get_measuremets_parameters+0x684>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003356:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = -ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3304      	adds	r3, #4
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	edd3 7a03 	vldr	s15, [r3, #12]
 8003364:	eef1 6a67 	vneg.f32	s13, s15
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <get_measuremets_parameters+0x684>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800337e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003382:	e061      	b.n	8003448 <get_measuremets_parameters+0x730>
 8003384:	f3af 8000 	nop.w
 8003388:	54442d18 	.word	0x54442d18
 800338c:	400921fb 	.word	0x400921fb
 8003390:	1a63c1f8 	.word	0x1a63c1f8
 8003394:	404ca5dc 	.word	0x404ca5dc
 8003398:	200005e8 	.word	0x200005e8
 800339c:	200005ec 	.word	0x200005ec
 80033a0:	20000be0 	.word	0x20000be0
 80033a4:	200005ea 	.word	0x200005ea
 80033a8:	20000be4 	.word	0x20000be4
 80033ac:	40668000 	.word	0x40668000
 80033b0:	20000030 	.word	0x20000030
 80033b4:	20000034 	.word	0x20000034
				ptrMotorHandler[0]->parametersMotor.dis = -(paso_mm_1 * ptrMotorHandler[0]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda izquierda //[mm]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	791b      	ldrb	r3, [r3, #4]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c6:	4bbe      	ldr	r3, [pc, #760]	; (80036c0 <get_measuremets_parameters+0x9a8>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	eef1 7a67 	vneg.f32	s15, s15
 80033d8:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[1]->parametersMotor.dis = (paso_mm_2 * ptrMotorHandler[1]->parametersMotor.counts);// Calculamos la distancia recorrida contando cuantos pasos a dado la rueda derecha   //[mm]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3304      	adds	r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	791b      	ldrb	r3, [r3, #4]
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ec:	4bb5      	ldr	r3, [pc, #724]	; (80036c4 <get_measuremets_parameters+0x9ac>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3304      	adds	r3, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	edc3 7a03 	vstr	s15, [r3, #12]
				ptrMotorHandler[0]->parametersMotor.vel = -ptrMotorHandler[0]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda izquierda     //[m/s]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	edd3 7a03 	vldr	s15, [r3, #12]
 8003408:	eef1 6a67 	vneg.f32	s13, s15
 800340c:	4bae      	ldr	r3, [pc, #696]	; (80036c8 <get_measuremets_parameters+0x9b0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003420:	edc3 7a02 	vstr	s15, [r3, #8]
				ptrMotorHandler[1]->parametersMotor.vel = ptrMotorHandler[1]->parametersMotor.dis / time_accion; // Calculamos la velocidad de la rueda derecha    //[m/s]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3304      	adds	r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	edd3 6a03 	vldr	s13, [r3, #12]
 800342e:	4ba6      	ldr	r3, [pc, #664]	; (80036c8 <get_measuremets_parameters+0x9b0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3304      	adds	r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003444:	edc3 7a02 	vstr	s15, [r3, #8]
			ptrMotorHandler[0]->parametersMotor.counts = 0;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	711a      	strb	r2, [r3, #4]
			ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	711a      	strb	r2, [r3, #4]
			sum_ang = 0;
 800345a:	4b9c      	ldr	r3, [pc, #624]	; (80036cc <get_measuremets_parameters+0x9b4>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
			time_accumulated = 0;
 8003462:	4b9b      	ldr	r3, [pc, #620]	; (80036d0 <get_measuremets_parameters+0x9b8>)
 8003464:	2200      	movs	r2, #0
 8003466:	801a      	strh	r2, [r3, #0]
			counting_action  = 0;
 8003468:	4b9a      	ldr	r3, [pc, #616]	; (80036d4 <get_measuremets_parameters+0x9bc>)
 800346a:	2200      	movs	r2, #0
 800346c:	801a      	strh	r2, [r3, #0]
}
 800346e:	e118      	b.n	80036a2 <get_measuremets_parameters+0x98a>
		time_accion = time_accumulated;
 8003470:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <get_measuremets_parameters+0x9b8>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <get_measuremets_parameters+0x9b0>)
 8003478:	601a      	str	r2, [r3, #0]
		promAng = sum_ang / counting_action;
 800347a:	4b94      	ldr	r3, [pc, #592]	; (80036cc <get_measuremets_parameters+0x9b4>)
 800347c:	edd3 6a00 	vldr	s13, [r3]
 8003480:	4b94      	ldr	r3, [pc, #592]	; (80036d4 <get_measuremets_parameters+0x9bc>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800348c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003490:	4b91      	ldr	r3, [pc, #580]	; (80036d8 <get_measuremets_parameters+0x9c0>)
 8003492:	edc3 7a00 	vstr	s15, [r3]
		ptrParameter_position->rad_relativo = (promAng * M_PI) / 180; //[rad]
 8003496:	4b90      	ldr	r3, [pc, #576]	; (80036d8 <get_measuremets_parameters+0x9c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f86c 	bl	8000578 <__aeabi_f2d>
 80034a0:	a383      	add	r3, pc, #524	; (adr r3, 80036b0 <get_measuremets_parameters+0x998>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd f8bf 	bl	8000628 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <get_measuremets_parameters+0x9c4>)
 80034b8:	f7fd f9e0 	bl	800087c <__aeabi_ddiv>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 80034c6:	4b81      	ldr	r3, [pc, #516]	; (80036cc <get_measuremets_parameters+0x9b4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd f854 	bl	8000578 <__aeabi_f2d>
 80034d0:	a377      	add	r3, pc, #476	; (adr r3, 80036b0 <get_measuremets_parameters+0x998>)
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f7fd f8a7 	bl	8000628 <__aeabi_dmul>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	4b7d      	ldr	r3, [pc, #500]	; (80036dc <get_measuremets_parameters+0x9c4>)
 80034e8:	f7fd f9c8 	bl	800087c <__aeabi_ddiv>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	ec43 2b17 	vmov	d7, r2, r3
 80034f4:	eeb0 0a47 	vmov.f32	s0, s14
 80034f8:	eef0 0a67 	vmov.f32	s1, s15
 80034fc:	f00d faec 	bl	8010ad8 <sin>
 8003500:	eeb0 8a40 	vmov.f32	s16, s0
 8003504:	eef0 8a60 	vmov.f32	s17, s1
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003508:	4b70      	ldr	r3, [pc, #448]	; (80036cc <get_measuremets_parameters+0x9b4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f833 	bl	8000578 <__aeabi_f2d>
 8003512:	a367      	add	r3, pc, #412	; (adr r3, 80036b0 <get_measuremets_parameters+0x998>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f886 	bl	8000628 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <get_measuremets_parameters+0x9c4>)
 800352a:	f7fd f9a7 	bl	800087c <__aeabi_ddiv>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	ec43 2b17 	vmov	d7, r2, r3
 8003536:	eeb0 0a47 	vmov.f32	s0, s14
 800353a:	eef0 0a67 	vmov.f32	s1, s15
 800353e:	f00d fa2f 	bl	80109a0 <cos>
 8003542:	eeb0 7a40 	vmov.f32	s14, s0
 8003546:	eef0 7a60 	vmov.f32	s15, s1
 800354a:	eeb0 1a47 	vmov.f32	s2, s14
 800354e:	eef0 1a67 	vmov.f32	s3, s15
 8003552:	eeb0 0a48 	vmov.f32	s0, s16
 8003556:	eef0 0a68 	vmov.f32	s1, s17
 800355a:	f00d fb49 	bl	8010bf0 <atan2>
 800355e:	ec51 0b10 	vmov	r0, r1, d0
													cos((sum_ang * M_PI) / 180)) * (180 / M_PI); //[°] angulo acumulado global en grados
 8003562:	a355      	add	r3, pc, #340	; (adr r3, 80036b8 <get_measuremets_parameters+0x9a0>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f7fd f85e 	bl	8000628 <__aeabi_dmul>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
		ptrParameter_position->grad_global += atan2(sin((sum_ang * M_PI) / 180),
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800357a:	f7fc fe9f 	bl	80002bc <__adddf3>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	e9c1 2306 	strd	r2, r3, [r1, #24]
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800358e:	a348      	add	r3, pc, #288	; (adr r3, 80036b0 <get_measuremets_parameters+0x998>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fd f848 	bl	8000628 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <get_measuremets_parameters+0x9c4>)
 80035a6:	f7fd f969 	bl	800087c <__aeabi_ddiv>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	ec43 2b17 	vmov	d7, r2, r3
 80035b2:	eeb0 0a47 	vmov.f32	s0, s14
 80035b6:	eef0 0a67 	vmov.f32	s1, s15
 80035ba:	f00d fa8d 	bl	8010ad8 <sin>
 80035be:	eeb0 8a40 	vmov.f32	s16, s0
 80035c2:	eef0 8a60 	vmov.f32	s17, s1
												  cos((ptrParameter_position->grad_global * M_PI) / 180)); //[rad]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80035cc:	a338      	add	r3, pc, #224	; (adr r3, 80036b0 <get_measuremets_parameters+0x998>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd f829 	bl	8000628 <__aeabi_dmul>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
		ptrParameter_position->rad_global = atan2(sin((ptrParameter_position->grad_global * M_PI) / 180),
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <get_measuremets_parameters+0x9c4>)
 80035e4:	f7fd f94a 	bl	800087c <__aeabi_ddiv>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	ec43 2b17 	vmov	d7, r2, r3
 80035f0:	eeb0 0a47 	vmov.f32	s0, s14
 80035f4:	eef0 0a67 	vmov.f32	s1, s15
 80035f8:	f00d f9d2 	bl	80109a0 <cos>
 80035fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003600:	eef0 7a60 	vmov.f32	s15, s1
 8003604:	eeb0 1a47 	vmov.f32	s2, s14
 8003608:	eef0 1a67 	vmov.f32	s3, s15
 800360c:	eeb0 0a48 	vmov.f32	s0, s16
 8003610:	eef0 0a68 	vmov.f32	s1, s17
 8003614:	f00d faec 	bl	8010bf0 <atan2>
 8003618:	eeb0 7a40 	vmov.f32	s14, s0
 800361c:	eef0 7a60 	vmov.f32	s15, s1
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	ed83 7b04 	vstr	d7, [r3, #16]
		ptrParameter_position->rad_relativo = atan2(sin(ptrParameter_position->rad_relativo),
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	ed93 7b02 	vldr	d7, [r3, #8]
 800362c:	eeb0 0a47 	vmov.f32	s0, s14
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	f00d fa50 	bl	8010ad8 <sin>
 8003638:	eeb0 8a40 	vmov.f32	s16, s0
 800363c:	eef0 8a60 	vmov.f32	s17, s1
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	ed93 7b02 	vldr	d7, [r3, #8]
 8003646:	eeb0 0a47 	vmov.f32	s0, s14
 800364a:	eef0 0a67 	vmov.f32	s1, s15
 800364e:	f00d f9a7 	bl	80109a0 <cos>
 8003652:	eeb0 7a40 	vmov.f32	s14, s0
 8003656:	eef0 7a60 	vmov.f32	s15, s1
 800365a:	eeb0 1a47 	vmov.f32	s2, s14
 800365e:	eef0 1a67 	vmov.f32	s3, s15
 8003662:	eeb0 0a48 	vmov.f32	s0, s16
 8003666:	eef0 0a68 	vmov.f32	s1, s17
 800366a:	f00d fac1 	bl	8010bf0 <atan2>
 800366e:	eeb0 7a40 	vmov.f32	s14, s0
 8003672:	eef0 7a60 	vmov.f32	s15, s1
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	ed83 7b02 	vstr	d7, [r3, #8]
		ptrMotorHandler[0]->parametersMotor.counts = 0;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	711a      	strb	r2, [r3, #4]
		ptrMotorHandler[1]->parametersMotor.counts = 0; // RESETEAMOS LAS CUENTAS
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3304      	adds	r3, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	711a      	strb	r2, [r3, #4]
		sum_ang = 0;
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <get_measuremets_parameters+0x9b4>)
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
		time_accumulated = 0;
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <get_measuremets_parameters+0x9b8>)
 8003698:	2200      	movs	r2, #0
 800369a:	801a      	strh	r2, [r3, #0]
		counting_action  = 0;}
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <get_measuremets_parameters+0x9bc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	ecbd 8b02 	vpop	{d8}
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	54442d18 	.word	0x54442d18
 80036b4:	400921fb 	.word	0x400921fb
 80036b8:	1a63c1f8 	.word	0x1a63c1f8
 80036bc:	404ca5dc 	.word	0x404ca5dc
 80036c0:	20000030 	.word	0x20000030
 80036c4:	20000034 	.word	0x20000034
 80036c8:	200005ec 	.word	0x200005ec
 80036cc:	20000be0 	.word	0x20000be0
 80036d0:	200005e8 	.word	0x200005e8
 80036d4:	200005ea 	.word	0x200005ea
 80036d8:	20000be4 	.word	0x20000be4
 80036dc:	40668000 	.word	0x40668000

080036e0 <On_motor_Straigh_Roll>:


void On_motor_Straigh_Roll(Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	8039      	strh	r1, [r7, #0]


	if (operation_mode_dir.Mode == Line){
 80036ea:	783b      	ldrb	r3, [r7, #0]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d120      	bne.n	8003732 <On_motor_Straigh_Roll+0x52>
				//Activamos el motor
				// ENCENCEMOS EL MOTOR 1 (LEFT)
					// Seteamos correctamente la direccion de cada motor
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f844 	bl	8003780 <set_direction_straigh_roll>

					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	4618      	mov	r0, r3
 8003700:	f008 fb7e 	bl	800be00 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f007 fb66 	bl	800adde <GPIO_WritePin_Afopt>

					// ENCENCEMOS EL MOTOR 2 (Right)
					//Se enciende el motor 2
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	4618      	mov	r0, r3
 800371c:	f008 fb70 	bl	800be00 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2101      	movs	r1, #1
 800372a:	4618      	mov	r0, r3
 800372c:	f007 fb57 	bl	800adde <GPIO_WritePin_Afopt>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);


	}

}
 8003730:	e022      	b.n	8003778 <On_motor_Straigh_Roll+0x98>
	}else if (operation_mode_dir.Mode == Roll){
 8003732:	783b      	ldrb	r3, [r7, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d11f      	bne.n	8003778 <On_motor_Straigh_Roll+0x98>
					set_direction_straigh_roll(ptrMotorhandler, operation_mode_dir);
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f820 	bl	8003780 <set_direction_straigh_roll>
					enableOutput(ptrMotorhandler[0]->phandlerPWM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	4618      	mov	r0, r3
 8003748:	f008 fb5a 	bl	800be00 <enableOutput>
					GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN,SET); // Encendemos el motor 1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f007 fb42 	bl	800adde <GPIO_WritePin_Afopt>
					enableOutput(ptrMotorhandler[1]->phandlerPWM);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	4618      	mov	r0, r3
 8003764:	f008 fb4c 	bl	800be00 <enableOutput>
					GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,SET);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f007 fb33 	bl	800adde <GPIO_WritePin_Afopt>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <set_direction_straigh_roll>:

void set_direction_straigh_roll (Motor_Handler_t *ptrMotorhandler[2], state_dir_t operation_mode_dir){
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	8039      	strh	r1, [r7, #0]

	// Esta funcion setea correctamente la direccion de los motores dependiendo de lo que se quiera.
	if (operation_mode_dir.Mode == Line){
 800378a:	783b      	ldrb	r3, [r7, #0]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d143      	bne.n	8003818 <set_direction_straigh_roll+0x98>

		// Si queremos ir hacia adelante

		// Primero revisamos en que direccion se encuentra el robot para ver si si se aplica
		// el cambio o no
		if ((ptrMotorhandler[0]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	7f1a      	ldrb	r2, [r3, #28]
 8003796:	787b      	ldrb	r3, [r7, #1]
 8003798:	429a      	cmp	r2, r3
 800379a:	d018      	beq.n	80037ce <set_direction_straigh_roll+0x4e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[0]->configMotor.dir = operation_mode_dir.direction_s_r;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	787a      	ldrb	r2, [r7, #1]
 80037a2:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	7f1b      	ldrb	r3, [r3, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f007 fb0e 	bl	800adde <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	4618      	mov	r0, r3
 80037ca:	f008 fed9 	bl	800c580 <PWMx_Toggle>

		}

		if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	7f1a      	ldrb	r2, [r3, #28]
 80037d6:	787b      	ldrb	r3, [r7, #1]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d068      	beq.n	80038ae <set_direction_straigh_roll+0x12e>
			// cambiamos la direccion cambiando los pines in pero tambien aplicando un toogle al PWM en cada caso
			ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	787a      	ldrb	r2, [r7, #1]
 80037e4:	771a      	strb	r2, [r3, #28]
			GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN,!ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	7f1b      	ldrb	r3, [r3, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f007 faeb 	bl	800adde <GPIO_WritePin_Afopt>
			PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	4618      	mov	r0, r3
 8003812:	f008 feb5 	bl	800c580 <PWMx_Toggle>
			}
			// Puede que no analice ningun if y simplemente no haga nada


	}
}
 8003816:	e04a      	b.n	80038ae <set_direction_straigh_roll+0x12e>
	}else if (operation_mode_dir.Mode == Roll){
 8003818:	783b      	ldrb	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d147      	bne.n	80038ae <set_direction_straigh_roll+0x12e>
			if ((ptrMotorhandler[0]->configMotor.dir == operation_mode_dir.direction_s_r)){
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	7f1a      	ldrb	r2, [r3, #28]
 8003824:	787b      	ldrb	r3, [r7, #1]
 8003826:	429a      	cmp	r2, r3
 8003828:	d11d      	bne.n	8003866 <set_direction_straigh_roll+0xe6>
				ptrMotorhandler[0]->configMotor.dir  =  !operation_mode_dir.direction_s_r;
 800382a:	787b      	ldrb	r3, [r7, #1]
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2da      	uxtb	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOIN, !ptrMotorhandler[0]->configMotor.dir); // La direccion estaba en RESET, la cambiamos a SET
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	7f1b      	ldrb	r3, [r3, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f007 fac2 	bl	800adde <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[0]->phandlerPWM);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	4618      	mov	r0, r3
 8003862:	f008 fe8d 	bl	800c580 <PWMx_Toggle>
			if ((ptrMotorhandler[1]->configMotor.dir != operation_mode_dir.direction_s_r)){
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	7f1a      	ldrb	r2, [r3, #28]
 800386e:	787b      	ldrb	r3, [r7, #1]
 8003870:	429a      	cmp	r2, r3
 8003872:	d01c      	beq.n	80038ae <set_direction_straigh_roll+0x12e>
				ptrMotorhandler[1]->configMotor.dir = operation_mode_dir.direction_s_r;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	787a      	ldrb	r2, [r7, #1]
 800387c:	771a      	strb	r2, [r3, #28]
				GPIO_WritePin_Afopt(ptrMotorhandler[1]->phandlerGPIOIN, !ptrMotorhandler[1]->configMotor.dir); // La direccion estaba en SET, la cambiamos a RESET
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	7f1b      	ldrb	r3, [r3, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf0c      	ite	eq
 8003892:	2301      	moveq	r3, #1
 8003894:	2300      	movne	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f007 fa9f 	bl	800adde <GPIO_WritePin_Afopt>
				PWMx_Toggle(ptrMotorhandler[1]->phandlerPWM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	4618      	mov	r0, r3
 80038aa:	f008 fe69 	bl	800c580 <PWMx_Toggle>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <stop>:

	}
}


void stop (Motor_Handler_t *ptrMotorhandler[2]){
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]

	//DESACTIVAMOS EL MOTOR
	// APAGAMOS EL MOTOR 1 (LEFT)
		//Se enciende el motor 1
		disableOutput(ptrMotorhandler[0]->phandlerPWM);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	4618      	mov	r0, r3
 80038c6:	f008 fe1b 	bl	800c500 <disableOutput>
		GPIO_WritePin_Afopt(ptrMotorhandler[0]->phandlerGPIOEN, RESET); // Apagamos el motor 1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f007 fa83 	bl	800adde <GPIO_WritePin_Afopt>
		// APAGAMOS EL MOTOR 2 (Right)
		//Se enciende el motor 2
		disableOutput(ptrMotorhandler[1]->phandlerPWM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	4618      	mov	r0, r3
 80038e2:	f008 fe0d 	bl	800c500 <disableOutput>
		GPIO_WritePin_Afopt (ptrMotorhandler[1]->phandlerGPIOEN,RESET);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3304      	adds	r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f007 fa74 	bl	800adde <GPIO_WritePin_Afopt>


}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <int_Config_Motor>:

void int_Config_Motor(Motor_Handler_t *ptrMotorhandler[2],
		              Parameters_Position_t *ptrPosHandler,
					  Parameters_Path_t *ptrPathHandler ,
					  PID_Parameters_t *ptrPIDHandler,
					  state_dir_t *operation_mode_dir){
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]

	//---------------Motor Izquierdo----------------
	ptrMotorhandler[0] = &handlerMotor1_t;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a85      	ldr	r2, [pc, #532]	; (8003b28 <int_Config_Motor+0x228>)
 8003912:	601a      	str	r2, [r3, #0]

	//Parametro de la señal del dutty
	ptrMotorhandler[0]->configMotor.dutty =  fixed_dutty;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a84      	ldr	r2, [pc, #528]	; (8003b2c <int_Config_Motor+0x22c>)
 800391a:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[0]->phandlerGPIOEN = &handlerEn1PinC10;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a83      	ldr	r2, [pc, #524]	; (8003b30 <int_Config_Motor+0x230>)
 8003922:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[0]->phandlerGPIOIN = &handlerIn1PinC12;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a82      	ldr	r2, [pc, #520]	; (8003b34 <int_Config_Motor+0x234>)
 800392a:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[0]->phandlerPWM = &handlerPWM_1;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a81      	ldr	r2, [pc, #516]	; (8003b38 <int_Config_Motor+0x238>)
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[0]->parametersMotor.pid->e0 = 0;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[0]->parametersMotor.pid->e_prev = 0;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[0]->parametersMotor.pid->u = 0;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[0]->parametersMotor.pid->e_int = 0;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[0]->parametersMotor.pid->kp = 250;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a74      	ldr	r2, [pc, #464]	; (8003b3c <int_Config_Motor+0x23c>)
 800396c:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[0]->parametersMotor.pid->ki = 0;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[0]->parametersMotor.pid->kd = 100;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a6f      	ldr	r2, [pc, #444]	; (8003b40 <int_Config_Motor+0x240>)
 8003982:	619a      	str	r2, [r3, #24]

	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	ptrMotorhandler[1] = &handlerMotor2_t;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3304      	adds	r3, #4
 8003988:	4a6e      	ldr	r2, [pc, #440]	; (8003b44 <int_Config_Motor+0x244>)
 800398a:	601a      	str	r2, [r3, #0]

	ptrMotorhandler[1]->configMotor.dutty =  fixed_dutty;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3304      	adds	r3, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a66      	ldr	r2, [pc, #408]	; (8003b2c <int_Config_Motor+0x22c>)
 8003994:	619a      	str	r2, [r3, #24]
	//handler de los perifericos
	ptrMotorhandler[1]->phandlerGPIOEN = &handlerEn2PinC11;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6a      	ldr	r2, [pc, #424]	; (8003b48 <int_Config_Motor+0x248>)
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
	ptrMotorhandler[1]->phandlerGPIOIN = &handlerIn2PinD2;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3304      	adds	r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a69      	ldr	r2, [pc, #420]	; (8003b4c <int_Config_Motor+0x24c>)
 80039a8:	621a      	str	r2, [r3, #32]
	ptrMotorhandler[1]->phandlerPWM = &handlerPWM_2;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3304      	adds	r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a67      	ldr	r2, [pc, #412]	; (8003b50 <int_Config_Motor+0x250>)
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
	//definicion de parametros
	ptrMotorhandler[1]->parametersMotor.pid->e0 =  0;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3304      	adds	r3, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
	ptrMotorhandler[1]->parametersMotor.pid->e_prev = 0;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
	ptrMotorhandler[1]->parametersMotor.pid->u =  0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3304      	adds	r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
	ptrMotorhandler[1]->parametersMotor.pid->e_int = 0;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3304      	adds	r3, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
	//Calculo de Constantes PID
	ptrMotorhandler[1]->parametersMotor.pid->kp = 250;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3304      	adds	r3, #4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a51      	ldr	r2, [pc, #324]	; (8003b3c <int_Config_Motor+0x23c>)
 80039f6:	611a      	str	r2, [r3, #16]
	ptrMotorhandler[1]->parametersMotor.pid->ki = 0;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3304      	adds	r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	615a      	str	r2, [r3, #20]
	ptrMotorhandler[1]->parametersMotor.pid->kd = 100;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a4c      	ldr	r2, [pc, #304]	; (8003b40 <int_Config_Motor+0x240>)
 8003a10:	619a      	str	r2, [r3, #24]

	//---------------PID del la distancia-----------------
	//definicion de parametros
	ptrPIDHandler->e0 = ptrPIDHandler->e_prev = 0;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	605a      	str	r2, [r3, #4]
	ptrPIDHandler->u =  ptrPIDHandler->e_int = 0;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	601a      	str	r2, [r3, #0]
	//Calculo de Constantes PID
	ptrPIDHandler->kp = 1.0;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a38:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->ki = 0.1;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	4a45      	ldr	r2, [pc, #276]	; (8003b54 <int_Config_Motor+0x254>)
 8003a3e:	615a      	str	r2, [r3, #20]
	ptrPIDHandler->kd = 0.8;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4a45      	ldr	r2, [pc, #276]	; (8003b58 <int_Config_Motor+0x258>)
 8003a44:	619a      	str	r2, [r3, #24]

	//-------------- Parametros de posicion---------------
	ptrPosHandler->grad_global   = 0;
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9c1 2306 	strd	r2, r3, [r1, #24]
	ptrPosHandler->rad_global    = 0;
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrPosHandler->grad_relativo = 0;
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9c1 2300 	strd	r2, r3, [r1]
	ptrPosHandler->rad_relativo  = 0;
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrPosHandler->xr_position   = 0;
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrPosHandler->yr_position   = 0;
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	ptrPosHandler->xg_position   = ptrPosHandler->xg_position_inicial = 0;
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPosHandler->yg_position   = ptrPosHandler->yg_position_inicial = 0;
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48


	//--------------Parametros de Path-----------------
	ptrPathHandler->angle = 0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	649a      	str	r2, [r3, #72]	; 0x48
	ptrPathHandler->goal_Position_x = ptrPathHandler->goal_Position_y = 0;
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrPathHandler->line_Distance = 0;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	ptrPathHandler->start_position_x = ptrPathHandler->start_position_y = 0;
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50


	// Seteamos la direccion el modo de operacion en None
	operation_mode_dir->Mode = None;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000448 	.word	0x20000448
 8003b2c:	41e00000 	.word	0x41e00000
 8003b30:	200002c0 	.word	0x200002c0
 8003b34:	200002d8 	.word	0x200002d8
 8003b38:	20000350 	.word	0x20000350
 8003b3c:	437a0000 	.word	0x437a0000
 8003b40:	42c80000 	.word	0x42c80000
 8003b44:	20000474 	.word	0x20000474
 8003b48:	200002b4 	.word	0x200002b4
 8003b4c:	200002cc 	.word	0x200002cc
 8003b50:	20000370 	.word	0x20000370
 8003b54:	3dcccccd 	.word	0x3dcccccd
 8003b58:	3f4ccccd 	.word	0x3f4ccccd

08003b5c <PID_control>:


void PID_control(Motor_Handler_t *ptrMotorhandler[2] ,
		        Parameters_Path_t *ptrPathHandler,
				Parameters_Position_t *ptrPosHandler,
				PID_Parameters_t *ptrPIDHandler){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]

	//Conversion de tiempo
	float sampling_time = ((float) (handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period * timeAction_TIMER_Sampling) / 1000); //[s]
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <PID_control+0x1cc>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	4a6f      	ldr	r2, [pc, #444]	; (8003d2c <PID_control+0x1d0>)
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b7e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8003d30 <PID_control+0x1d4>
 8003b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b86:	edc7 7a05 	vstr	s15, [r7, #20]

	//Control PID para la distancia
	float distance_recta = (distance_to_straight_line(ptrPathHandler, ptrPosHandler->xg_position, ptrPosHandler->yg_position)) / 1000; //[m]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8003b96:	eeb0 1a46 	vmov.f32	s2, s12
 8003b9a:	eef0 1a66 	vmov.f32	s3, s13
 8003b9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003ba2:	eef0 0a67 	vmov.f32	s1, s15
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f007 fe92 	bl	800b8d0 <distance_to_straight_line>
 8003bac:	ec51 0b10 	vmov	r0, r1, d0
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	4b5f      	ldr	r3, [pc, #380]	; (8003d34 <PID_control+0x1d8>)
 8003bb6:	f7fc fe61 	bl	800087c <__aeabi_ddiv>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fd f829 	bl	8000c18 <__aeabi_d2f>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	613b      	str	r3, [r7, #16]

	//Aplicacion del PID par el control de la distancia del robot al centro
	PID_calc(ptrPIDHandler, sampling_time, 0,  distance_recta);
 8003bca:	ed97 1a04 	vldr	s2, [r7, #16]
 8003bce:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003d38 <PID_control+0x1dc>
 8003bd2:	ed97 0a05 	vldr	s0, [r7, #20]
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	f000 f8bc 	bl	8003d54 <PID_calc>

	//Aplicacndo correcion
	vel_Setpoint_1 = velSetPoint - ptrPIDHandler->u; // Cambio en la velocidad de la rueda izquierda
 8003bdc:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <PID_control+0x1e0>)
 8003bde:	ed93 7a00 	vldr	s14, [r3]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bec:	4b54      	ldr	r3, [pc, #336]	; (8003d40 <PID_control+0x1e4>)
 8003bee:	edc3 7a00 	vstr	s15, [r3]
	vel_Setpoint_2 = velSetPoint + ptrPIDHandler->u; // cambio en la velocidad de la rueda derecha
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	ed93 7a00 	vldr	s14, [r3]
 8003bf8:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <PID_control+0x1e0>)
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c02:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <PID_control+0x1e8>)
 8003c04:	edc3 7a00 	vstr	s15, [r3]

	//Aplicacion del PID par el control de las velocidades
	PID_calc(ptrMotorhandler[0]->parametersMotor.pid, sampling_time, vel_Setpoint_1,  ptrMotorhandler[0]->parametersMotor.vel); // Accion de control 1
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <PID_control+0x1e4>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c1c:	eeb0 1a47 	vmov.f32	s2, s14
 8003c20:	eef0 0a67 	vmov.f32	s1, s15
 8003c24:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f000 f893 	bl	8003d54 <PID_calc>
	PID_calc(ptrMotorhandler[1]->parametersMotor.pid, sampling_time, vel_Setpoint_2,  ptrMotorhandler[1]->parametersMotor.vel); // Accion de control 2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3304      	adds	r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <PID_control+0x1e8>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c46:	eeb0 1a47 	vmov.f32	s2, s14
 8003c4a:	eef0 0a67 	vmov.f32	s1, s15
 8003c4e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 f87e 	bl	8003d54 <PID_calc>

	//Cambiamos valores
	ptrMotorhandler[0]->configMotor.new_dutty += ptrMotorhandler[0]->parametersMotor.pid->u;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	edd3 7a00 	vldr	s15, [r3]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c72:	edc3 7a05 	vstr	s15, [r3, #20]
	ptrMotorhandler[1]->configMotor.new_dutty += ptrMotorhandler[1]->parametersMotor.pid->u;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3304      	adds	r3, #4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c96:	edc3 7a05 	vstr	s15, [r3, #20]

	//Correccion del dutty
	// Primero nos aseguramos de la no saturacion de los motores
	if (ptrMotorhandler[0]->configMotor.new_dutty >= 60){
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ca2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003d48 <PID_control+0x1ec>
 8003ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cae:	db04      	blt.n	8003cba <PID_control+0x15e>

		ptrMotorhandler[0]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <PID_control+0x1f0>)
 8003cb6:	615a      	str	r2, [r3, #20]
 8003cb8:	e00e      	b.n	8003cd8 <PID_control+0x17c>

	}else if (ptrMotorhandler[0]->configMotor.new_dutty <= fixed_dutty -5){
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cc2:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	d803      	bhi.n	8003cd8 <PID_control+0x17c>

		ptrMotorhandler[0]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <PID_control+0x1f4>)
 8003cd6:	615a      	str	r2, [r3, #20]
	}

	if (ptrMotorhandler[1]->configMotor.new_dutty >= 60){
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ce2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003d48 <PID_control+0x1ec>
 8003ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cee:	db05      	blt.n	8003cfc <PID_control+0x1a0>

		ptrMotorhandler[1]->configMotor.new_dutty = 60;// El limite superior sera 60 de dutty
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <PID_control+0x1f0>)
 8003cf8:	615a      	str	r2, [r3, #20]
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){

		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
	}

}
 8003cfa:	e011      	b.n	8003d20 <PID_control+0x1c4>
	}else if (ptrMotorhandler[1]->configMotor.new_dutty <= fixed_dutty -5){
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d06:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8003d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d12:	d900      	bls.n	8003d16 <PID_control+0x1ba>
}
 8003d14:	e004      	b.n	8003d20 <PID_control+0x1c4>
		ptrMotorhandler[1]->configMotor.new_dutty = fixed_dutty -5; // el limite inferior seria 5 puntos menos al dutty fijo
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <PID_control+0x1f4>)
 8003d1e:	615a      	str	r2, [r3, #20]
}
 8003d20:	bf00      	nop
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000324 	.word	0x20000324
 8003d2c:	2000002c 	.word	0x2000002c
 8003d30:	447a0000 	.word	0x447a0000
 8003d34:	408f4000 	.word	0x408f4000
 8003d38:	00000000 	.word	0x00000000
 8003d3c:	20000be8 	.word	0x20000be8
 8003d40:	20000bec 	.word	0x20000bec
 8003d44:	20000bf0 	.word	0x20000bf0
 8003d48:	42700000 	.word	0x42700000
 8003d4c:	42700000 	.word	0x42700000
 8003d50:	41b80000 	.word	0x41b80000

08003d54 <PID_calc>:

void PID_calc(PID_Parameters_t *ptrPIDHandler,
		      float time_of_sampling,
			  float setpoint,
			  float current_measure){
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	; 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d60:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d64:	ed87 1a00 	vstr	s2, [r7]

	//Calculo del error
	ptrPIDHandler->e0 = setpoint-current_measure;
 8003d68:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d6c:	edd7 7a00 	vldr	s15, [r7]
 8003d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	edc3 7a01 	vstr	s15, [r3, #4]
    // Controle PID
	float P =  ptrPIDHandler->kp*ptrPIDHandler->e0; // control proporcional
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8a:	edc7 7a07 	vstr	s15, [r7, #28]
	ptrPIDHandler->e_int +=  ptrPIDHandler->e0 * time_of_sampling;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	edc3 7a02 	vstr	s15, [r3, #8]
	float I = ptrPIDHandler->ki * ptrPIDHandler->e_int; // Control integral
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	ed93 7a05 	vldr	s14, [r3, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	edc7 7a06 	vstr	s15, [r7, #24]
	float D =  ptrPIDHandler->kd*(ptrPIDHandler->e0 - ptrPIDHandler->e_prev) / time_of_sampling; // control derivativo
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	ed93 7a06 	vldr	s14, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dd6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dda:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de2:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = P + I + D;
 8003de6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dea:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003df2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	edc3 7a00 	vstr	s15, [r3]
     //Actualizamos el error
	ptrPIDHandler->e_prev = ptrPIDHandler->e0;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	60da      	str	r2, [r3, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3724      	adds	r7, #36	; 0x24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <go>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6178      	str	r0, [r7, #20]
 8003e1c:	6139      	str	r1, [r7, #16]
 8003e1e:	60fa      	str	r2, [r7, #12]
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <go+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	ed97 1b00 	vldr	d1, [r7]
 8003e34:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003f38 <go+0x124>
 8003e38:	6938      	ldr	r0, [r7, #16]
 8003e3a:	f7fe ff0d 	bl	8002c58 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <go+0x4e>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	f7fe ff61 	bl	8002d18 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
		//Levandamos la bandera de control
		*fcontrol = SET;
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
	}

	// Control
	if (*fcontrol){
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d061      	beq.n	8003f2e <go+0x11a>

		//Calculo odometria
		double distance_prom = (ptrMotorhandler[1]->parametersMotor.dis + ptrMotorhandler[0]->parametersMotor.dis)/2;//[mm]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003e84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e88:	ee16 0a90 	vmov	r0, s13
 8003e8c:	f7fc fb74 	bl	8000578 <__aeabi_f2d>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	e9c7 2306 	strd	r2, r3, [r7, #24]

		ptrPosHandler->xr_position = distance_prom * (cos(ptrPosHandler->rad_global));        //[mm]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	ed93 7b04 	vldr	d7, [r3, #16]
 8003e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea2:	eef0 0a67 	vmov.f32	s1, s15
 8003ea6:	f00c fd7b 	bl	80109a0 <cos>
 8003eaa:	ec51 0b10 	vmov	r0, r1, d0
 8003eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb2:	f7fc fbb9 	bl	8000628 <__aeabi_dmul>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ptrPosHandler->yr_position = distance_prom * (sin(ptrPosHandler->rad_global));       //[mm]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eca:	eef0 0a67 	vmov.f32	s1, s15
 8003ece:	f00c fe03 	bl	8010ad8 <sin>
 8003ed2:	ec51 0b10 	vmov	r0, r1, d0
 8003ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eda:	f7fc fba5 	bl	8000628 <__aeabi_dmul>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		//Paso de c.relativa a c.globales
		ptrPosHandler->xg_position +=  ptrPosHandler->xr_position;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ef4:	f7fc f9e2 	bl	80002bc <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		ptrPosHandler->yg_position +=  ptrPosHandler->yr_position;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003f0e:	f7fc f9d5 	bl	80002bc <__adddf3>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		//Convertimos el valor y imprimimos en la terminal
//		sprintf(buff,"&%#.4f\t%#.4f\n", ptrPosHandler->xg_position , ptrPosHandler->yg_position);
//
//		writeMsg(&handlerUSART, buff);

		PID_control(ptrMotorhandler, ptrPathHandler, ptrPosHandler, ptrPIDHandler);
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	6978      	ldr	r0, [r7, #20]
 8003f24:	f7ff fe1a 	bl	8003b5c <PID_control>

		*fcontrol = RESET;
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
	}
}
 8003f2e:	bf00      	nop
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	00000000 	.word	0x00000000

08003f3c <NOP>:
		double calib ,
		uint8_t *fAnglulo,
		uint8_t *fMeasurements,
		uint8_t *fcontrol,
		char buff[64],
		state_dir_t operation_mode_dir){
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6178      	str	r0, [r7, #20]
 8003f44:	6139      	str	r1, [r7, #16]
 8003f46:	60fa      	str	r2, [r7, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	ed87 0b00 	vstr	d0, [r7]

	////////////////////////////////////////BLOQUE DE MEDICION Y CONTROL//////////////////////////////////////////////////////


	//En este primera medicion se mide el el angulo actual del robot con respecto a una referencia.
	if (*fAnglulo){ // este se ejecutara cada periodo
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <NOP+0x30>

		// Medimos el angulo actual
		getAngle(ptrMPUhandler, 0, calib, ptrPosHandler);
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	ed97 1b00 	vldr	d1, [r7]
 8003f5c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003f8c <NOP+0x50>
 8003f60:	6938      	ldr	r0, [r7, #16]
 8003f62:	f7fe fe79 	bl	8002c58 <getAngle>
		// bajamos la bandera
		*fAnglulo = RESET;
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
	}
	// En la siguiente medicion medimos todos los parametros necesarios para el control posterior
	if (*fMeasurements){ // Este se ejecutara cada (periodo * 13 cuentas)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <NOP+0x48>

		// Medimos el angulo actual
		get_measuremets_parameters(ptrMotorhandler, ptrPosHandler, operation_mode_dir);
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	6978      	ldr	r0, [r7, #20]
 8003f7a:	f7fe fecd 	bl	8002d18 <get_measuremets_parameters>
		// bajamos la bandera
		*fMeasurements = RESET;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
	}

}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	00000000 	.word	0x00000000

08003f90 <extract_info>:
				   unsigned char firstParameter[10],
				   unsigned char secondParameter[10],
				   unsigned char thirdParameter[10],
				   unsigned int *fparam,
				   unsigned int *sparam,
				   unsigned int *tparam){
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]

	int counter = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
	uint8_t count_f = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	763b      	strb	r3, [r7, #24]
	uint8_t count_s = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	75fb      	strb	r3, [r7, #23]
	uint8_t count_t = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75bb      	strb	r3, [r7, #22]

	uint8_t len_f = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	76fb      	strb	r3, [r7, #27]
	uint8_t len_s = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	76bb      	strb	r3, [r7, #26]
	uint8_t len_t = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	767b      	strb	r3, [r7, #25]



	while (1){

		while (cmd->payload[counter] != ' '){
 8003fba:	e00a      	b.n	8003fd2 <extract_info+0x42>

			data[counter] = cmd->payload[counter];
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	701a      	strb	r2, [r3, #0]

			counter++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d1ee      	bne.n	8003fbc <extract_info+0x2c>
		}

		// Le agregamos a data la terminacion nula
		data[counter] = '\0';
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	3301      	adds	r3, #1
 8003fec:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b23      	cmp	r3, #35	; 0x23
 8003ff8:	f000 8088 	beq.w	800410c <extract_info+0x17c>
			break;
		}

		count_f = counter;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	763b      	strb	r3, [r7, #24]

		// Buscamos el firstParameter en el string
		while (cmd->payload[counter] != ' '){
 8004000:	e00d      	b.n	800401e <extract_info+0x8e>

			firstParameter[counter - count_f] = cmd->payload[counter];
 8004002:	7e3b      	ldrb	r3, [r7, #24]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	701a      	strb	r2, [r3, #0]

			counter++;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b20      	cmp	r3, #32
 8004028:	d1eb      	bne.n	8004002 <extract_info+0x72>
		}

		len_f = counter - count_f; // Longitud del first parameter
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	7e3b      	ldrb	r3, [r7, #24]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	76fb      	strb	r3, [r7, #27]

		// Le agregamos a data la terminacion nula
		firstParameter[counter - count_f] = '\0';
 8004034:	7e3b      	ldrb	r3, [r7, #24]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b23      	cmp	r3, #35	; 0x23
 8004054:	d05c      	beq.n	8004110 <extract_info+0x180>
			break;
		}

		count_s = counter;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	75fb      	strb	r3, [r7, #23]

		// Buscamos el secondParameter en el string
		while (cmd->payload[counter] != ' '){
 800405a:	e00d      	b.n	8004078 <extract_info+0xe8>

			secondParameter[counter - count_s] = cmd->payload[counter];
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	461a      	mov	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4413      	add	r3, r2
 8004068:	68f9      	ldr	r1, [r7, #12]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	440a      	add	r2, r1
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	701a      	strb	r2, [r3, #0]

			counter++;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3301      	adds	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b20      	cmp	r3, #32
 8004082:	d1eb      	bne.n	800405c <extract_info+0xcc>
		}

		len_s = counter - count_s; // Longitud del second parameter
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	b2da      	uxtb	r2, r3
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	76bb      	strb	r3, [r7, #26]

		// Le agregamos a data la terminacion nula
		secondParameter[counter - count_s] = '\0';
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	461a      	mov	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	4413      	add	r3, r2
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b23      	cmp	r3, #35	; 0x23
 80040ae:	d031      	beq.n	8004114 <extract_info+0x184>
			break;
		}

		count_t = counter;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	75bb      	strb	r3, [r7, #22]

		// Buscamos el thirdParameter en el string
		while (cmd->payload[counter] != ' '){
 80040b4:	e00d      	b.n	80040d2 <extract_info+0x142>

			thirdParameter[counter - count_t] = cmd->payload[counter];
 80040b6:	7dbb      	ldrb	r3, [r7, #22]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	4413      	add	r3, r2
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	440a      	add	r2, r1
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	701a      	strb	r2, [r3, #0]

			counter++;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
		while (cmd->payload[counter] != ' '){
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d1eb      	bne.n	80040b6 <extract_info+0x126>
		}

		len_t = counter - count_t; // Longitud del second parameter
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	7dbb      	ldrb	r3, [r7, #22]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	767b      	strb	r3, [r7, #25]

		// Le agregamos a data la terminacion nula
		thirdParameter[counter - count_t] = '\0';
 80040e8:	7dbb      	ldrb	r3, [r7, #22]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	4413      	add	r3, r2
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]

		// nos movemos a la siguiente posicion, ya que la posicion actual es un espacio
		counter++;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]

		if (cmd->payload[counter] == '#'){
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b23      	cmp	r3, #35	; 0x23
 8004108:	d006      	beq.n	8004118 <extract_info+0x188>
		while (cmd->payload[counter] != ' '){
 800410a:	e762      	b.n	8003fd2 <extract_info+0x42>
			break;
 800410c:	bf00      	nop
 800410e:	e004      	b.n	800411a <extract_info+0x18a>
			break;
 8004110:	bf00      	nop
 8004112:	e002      	b.n	800411a <extract_info+0x18a>
			break;
 8004114:	bf00      	nop
 8004116:	e000      	b.n	800411a <extract_info+0x18a>
			break;
 8004118:	bf00      	nop
		}
	}

	counter = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]

	////////////////////////////////Bloque para convertir a valores enteros los first second y third parametros///////////////////

	// Comenzamos con el primer parametro

	if (len_f == 0){
 800411e:	7efb      	ldrb	r3, [r7, #27]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <extract_info+0x198>
		return 1; // Si se llega aca es porque no hay primer parametro, por loq ue no habra ni segundo ni tercero
 8004124:	2301      	movs	r3, #1
 8004126:	e0d6      	b.n	80042d6 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en fistParameters que necesita ser convertido en un numero

	for (counter = len_f-1; counter > -1; counter--){
 8004128:	7efb      	ldrb	r3, [r7, #27]
 800412a:	3b01      	subs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e03c      	b.n	80041aa <extract_info+0x21a>

		*fparam += (firstParameter[abs(counter - (len_f-1))] -48) * pow(10,counter);
 8004130:	7efb      	ldrb	r3, [r7, #27]
 8004132:	3b01      	subs	r3, #1
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bfb8      	it	lt
 800413c:	425b      	neglt	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	3b30      	subs	r3, #48	; 0x30
 8004148:	4618      	mov	r0, r3
 800414a:	f7fc fa03 	bl	8000554 <__aeabi_i2d>
 800414e:	4604      	mov	r4, r0
 8004150:	460d      	mov	r5, r1
 8004152:	69f8      	ldr	r0, [r7, #28]
 8004154:	f7fc f9fe 	bl	8000554 <__aeabi_i2d>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	ec43 2b11 	vmov	d1, r2, r3
 8004160:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80042e0 <extract_info+0x350>
 8004164:	f00c fd46 	bl	8010bf4 <pow>
 8004168:	ec53 2b10 	vmov	r2, r3, d0
 800416c:	4620      	mov	r0, r4
 800416e:	4629      	mov	r1, r5
 8004170:	f7fc fa5a 	bl	8000628 <__aeabi_dmul>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f9d7 	bl	8000534 <__aeabi_ui2d>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4620      	mov	r0, r4
 800418c:	4629      	mov	r1, r5
 800418e:	f7fc f895 	bl	80002bc <__adddf3>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	f7fc fd1d 	bl	8000bd8 <__aeabi_d2uiz>
 800419e:	4602      	mov	r2, r0
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	601a      	str	r2, [r3, #0]
	for (counter = len_f-1; counter > -1; counter--){
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dabf      	bge.n	8004130 <extract_info+0x1a0>

	// CONSTRUIDO EL PRIMER PARAMETRO, se hace lo mismo para el segundo y el tercero

	// Comenzamos con el segundo parametro

	if (len_s == 0){
 80041b0:	7ebb      	ldrb	r3, [r7, #26]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <extract_info+0x22a>
		return 2; // Si se llega aca es porque no hay segundo parametro, por lo que no habra tercer parametro
 80041b6:	2302      	movs	r3, #2
 80041b8:	e08d      	b.n	80042d6 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en secondParameter que necesita ser convertido en un numero

	for (counter = len_s-1; counter > -1; counter--){
 80041ba:	7ebb      	ldrb	r3, [r7, #26]
 80041bc:	3b01      	subs	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	e03c      	b.n	800423c <extract_info+0x2ac>

		*sparam += (secondParameter[abs(counter - (len_s-1))]-48) * pow(10,counter);
 80041c2:	7ebb      	ldrb	r3, [r7, #26]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bfb8      	it	lt
 80041ce:	425b      	neglt	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	4413      	add	r3, r2
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	3b30      	subs	r3, #48	; 0x30
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc f9ba 	bl	8000554 <__aeabi_i2d>
 80041e0:	4604      	mov	r4, r0
 80041e2:	460d      	mov	r5, r1
 80041e4:	69f8      	ldr	r0, [r7, #28]
 80041e6:	f7fc f9b5 	bl	8000554 <__aeabi_i2d>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	ec43 2b11 	vmov	d1, r2, r3
 80041f2:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 80042e0 <extract_info+0x350>
 80041f6:	f00c fcfd 	bl	8010bf4 <pow>
 80041fa:	ec53 2b10 	vmov	r2, r3, d0
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc fa11 	bl	8000628 <__aeabi_dmul>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4614      	mov	r4, r2
 800420c:	461d      	mov	r5, r3
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f98e 	bl	8000534 <__aeabi_ui2d>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc f84c 	bl	80002bc <__adddf3>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f7fc fcd4 	bl	8000bd8 <__aeabi_d2uiz>
 8004230:	4602      	mov	r2, r0
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	601a      	str	r2, [r3, #0]
	for (counter = len_s-1; counter > -1; counter--){
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3b01      	subs	r3, #1
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	dabf      	bge.n	80041c2 <extract_info+0x232>
	}

	// Comenzamos con el tercer parametro

	if (len_t == 0){
 8004242:	7e7b      	ldrb	r3, [r7, #25]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <extract_info+0x2bc>
		return 3; // Si se llega aca es porque no hay tercer parametro, por lo que no habra tercer parametro
 8004248:	2303      	movs	r3, #3
 800424a:	e044      	b.n	80042d6 <extract_info+0x346>
	}

	// Si se llego aca es porque efectivamente hay algo en thirdParameter que necesita ser convertido en un numero

	for (counter = len_t-1; counter > -1; counter--){
 800424c:	7e7b      	ldrb	r3, [r7, #25]
 800424e:	3b01      	subs	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e03c      	b.n	80042ce <extract_info+0x33e>

		*tparam += (thirdParameter[abs(counter - (len_t-1))] - 48) * pow(10,counter);
 8004254:	7e7b      	ldrb	r3, [r7, #25]
 8004256:	3b01      	subs	r3, #1
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	bfb8      	it	lt
 8004260:	425b      	neglt	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	3b30      	subs	r3, #48	; 0x30
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f971 	bl	8000554 <__aeabi_i2d>
 8004272:	4604      	mov	r4, r0
 8004274:	460d      	mov	r5, r1
 8004276:	69f8      	ldr	r0, [r7, #28]
 8004278:	f7fc f96c 	bl	8000554 <__aeabi_i2d>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	ec43 2b11 	vmov	d1, r2, r3
 8004284:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80042e0 <extract_info+0x350>
 8004288:	f00c fcb4 	bl	8010bf4 <pow>
 800428c:	ec53 2b10 	vmov	r2, r3, d0
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f7fc f9c8 	bl	8000628 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4614      	mov	r4, r2
 800429e:	461d      	mov	r5, r3
 80042a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc f945 	bl	8000534 <__aeabi_ui2d>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4620      	mov	r0, r4
 80042b0:	4629      	mov	r1, r5
 80042b2:	f7fc f803 	bl	80002bc <__adddf3>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f7fc fc8b 	bl	8000bd8 <__aeabi_d2uiz>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c6:	601a      	str	r2, [r3, #0]
	for (counter = len_t-1; counter > -1; counter--){
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dabf      	bge.n	8004254 <extract_info+0x2c4>
	}


	////////////// SI SE LLEGA HASTA ACA ES PORQUE YA TODO ESTA CONVERTIDO///////////////

	return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bdb0      	pop	{r4, r5, r7, pc}
 80042de:	bf00      	nop
 80042e0:	00000000 	.word	0x00000000
 80042e4:	40240000 	.word	0x40240000

080042e8 <create_square_operations>:
void create_square_operations(double side,
							  uint8_t CW_CCW,
							  Parameters_Operation_t prtList[30],
							  Parameter_build_t *ptrbuild,
							  Parameters_Path_t *ptrPath,
							  Parameters_Position_t *ptrPos){
 80042e8:	b5b0      	push	{r4, r5, r7, lr}
 80042ea:	b09e      	sub	sp, #120	; 0x78
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	ed87 0b06 	vstr	d0, [r7, #24]
 80042f2:	6139      	str	r1, [r7, #16]
 80042f4:	60fa      	str	r2, [r7, #12]
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double finishline_y = 0;
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9c1 2300 	strd	r2, r3, [r1]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// Preguntamos si se quiere recorrer el cuadrado en CW o CCW, no importa donde este situado, comenzara en linea recta como primera operación

	if (CW_CCW == 1) // Se quiere ir en CW
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b01      	cmp	r3, #1
 800434c:	f040 808e 	bne.w	800446c <create_square_operations+0x184>
	{

		// calculo del vector unitario del robot

		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8004350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004354:	ed93 7b04 	vldr	d7, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3310      	adds	r3, #16
 800435c:	4618      	mov	r0, r3
 800435e:	eeb0 0a47 	vmov.f32	s0, s14
 8004362:	eef0 0a67 	vmov.f32	s1, s15
 8004366:	f007 fc2d 	bl	800bbc4 <unitary_vector>

		double coordenadas_cuadrado[4][2] = {{side,0},
 800436a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800437e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004382:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
											 {side,-side},
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004390:	607b      	str	r3, [r7, #4]
		double coordenadas_cuadrado[4][2] = {{side,0},
 8004392:	ed97 7b00 	vldr	d7, [r7]
 8004396:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
											 {0,-side},
 80043a6:	69bc      	ldr	r4, [r7, #24]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
		double coordenadas_cuadrado[4][2] = {{side,0},
 80043ae:	e9c7 4512 	strd	r4, r5, [r7, #72]	; 0x48
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
											 {0,0}}; // Coordenadas (x,y) destino para hacer el cuadrado


		for (uint8_t i = 0 ; i < 4; i++){
 80043ca:	2300      	movs	r3, #0
 80043cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80043d0:	e035      	b.n	800443e <create_square_operations+0x156>

			// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir


			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 80043d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	3370      	adds	r3, #112	; 0x70
 80043da:	f107 0208 	add.w	r2, r7, #8
 80043de:	4413      	add	r3, r2
 80043e0:	3b58      	subs	r3, #88	; 0x58
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 80043ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	3370      	adds	r3, #112	; 0x70
 80043f2:	f107 0208 	add.w	r2, r7, #8
 80043f6:	4413      	add	r3, r2
 80043f8:	3b50      	subs	r3, #80	; 0x50
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			ptrPath->goal_Position_x = finishline_x;
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004408:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004412:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8004416:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800441a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	6938      	ldr	r0, [r7, #16]
 8004422:	f007 f861 	bl	800b4e8 <build_Operation>

			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8004426:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 800442a:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f007 f93e 	bl	800b6b0 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4; i++){
 8004434:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004438:	3301      	adds	r3, #1
 800443a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800443e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004442:	2b03      	cmp	r3, #3
 8004444:	d9c5      	bls.n	80043d2 <create_square_operations+0xea>

		}


		// Agregamos la operacion nula
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800444c:	ed9f 2b4c 	vldr	d2, [pc, #304]	; 8004580 <create_square_operations+0x298>
 8004450:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8004580 <create_square_operations+0x298>
 8004454:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8004580 <create_square_operations+0x298>
 8004458:	2200      	movs	r2, #0
 800445a:	4619      	mov	r1, r3
 800445c:	6938      	ldr	r0, [r7, #16]
 800445e:	f007 f8e3 	bl	800b628 <add_Operation>
		ptrbuild->number_operation = 0;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
		ptrbuild->number_operation = 0;

	}

}
 800446a:	e084      	b.n	8004576 <create_square_operations+0x28e>
		unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 800446c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004470:	ed93 7b04 	vldr	d7, [r3, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3310      	adds	r3, #16
 8004478:	4618      	mov	r0, r3
 800447a:	eeb0 0a47 	vmov.f32	s0, s14
 800447e:	eef0 0a67 	vmov.f32	s1, s15
 8004482:	f007 fb9f 	bl	800bbc4 <unitary_vector>
		double coordenadas_cuadrado[4][2] = {{side,0},
 8004486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800449a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80044a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80044b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		for (uint8_t i = 0 ; i < 4 ; i++){
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80044dc:	e035      	b.n	800454a <create_square_operations+0x262>
			finishline_x = coordenadas_cuadrado[i][0]; // Coordenada x a ir
 80044de:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	3370      	adds	r3, #112	; 0x70
 80044e6:	f107 0208 	add.w	r2, r7, #8
 80044ea:	4413      	add	r3, r2
 80044ec:	3b58      	subs	r3, #88	; 0x58
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			finishline_y = coordenadas_cuadrado[i][1]; // Coordenada y a ir
 80044f6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	3370      	adds	r3, #112	; 0x70
 80044fe:	f107 0208 	add.w	r2, r7, #8
 8004502:	4413      	add	r3, r2
 8004504:	3b50      	subs	r3, #80	; 0x50
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			ptrPath->goal_Position_x = finishline_x;
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004514:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
			ptrPath->goal_Position_y = finishline_y;
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800451e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8004522:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004526:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	6938      	ldr	r0, [r7, #16]
 800452e:	f006 ffdb 	bl	800b4e8 <build_Operation>
			change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8004532:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8004536:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f007 f8b8 	bl	800b6b0 <change_coordinates_position>
		for (uint8_t i = 0 ; i < 4 ; i++){
 8004540:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004544:	3301      	adds	r3, #1
 8004546:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800454a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800454e:	2b03      	cmp	r3, #3
 8004550:	d9c5      	bls.n	80044de <create_square_operations+0x1f6>
		add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004558:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8004580 <create_square_operations+0x298>
 800455c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8004580 <create_square_operations+0x298>
 8004560:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8004580 <create_square_operations+0x298>
 8004564:	2200      	movs	r2, #0
 8004566:	4619      	mov	r1, r3
 8004568:	6938      	ldr	r0, [r7, #16]
 800456a:	f007 f85d 	bl	800b628 <add_Operation>
		ptrbuild->number_operation = 0;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8004576:	bf00      	nop
 8004578:	3778      	adds	r7, #120	; 0x78
 800457a:	46bd      	mov	sp, r7
 800457c:	bdb0      	pop	{r4, r5, r7, pc}
 800457e:	bf00      	nop
	...

08004588 <resetParameters>:


void resetParameters(void){
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
	fparam = 0;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <resetParameters+0x20>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
	sparam = 0;
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <resetParameters+0x24>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
	tparam = 0;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <resetParameters+0x28>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	2000051c 	.word	0x2000051c
 80045ac:	20000520 	.word	0x20000520
 80045b0:	20000524 	.word	0x20000524

080045b4 <led_state_callback>:

void led_state_callback (TimerHandle_t xTimer){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 80045bc:	4803      	ldr	r0, [pc, #12]	; (80045cc <led_state_callback+0x18>)
 80045be:	f006 fc5a 	bl	800ae76 <GPIOxTooglePin>

}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000278 	.word	0x20000278

080045d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <ITM_SendChar+0x48>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <ITM_SendChar+0x48>)
 80045e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <ITM_SendChar+0x4c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <ITM_SendChar+0x4c>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80045f2:	bf00      	nop
 80045f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f8      	beq.n	80045f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8004602:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	e000edfc 	.word	0xe000edfc
 800461c:	e0000e00 	.word	0xe0000e00

08004620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
	return 1;
 8004624:	2301      	movs	r3, #1
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <_kill>:

int _kill(int pid, int sig)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800463a:	f009 fa99 	bl	800db70 <__errno>
 800463e:	4603      	mov	r3, r0
 8004640:	2216      	movs	r2, #22
 8004642:	601a      	str	r2, [r3, #0]
	return -1;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <_exit>:

void _exit (int status)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004658:	f04f 31ff 	mov.w	r1, #4294967295
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ffe7 	bl	8004630 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004662:	e7fe      	b.n	8004662 <_exit+0x12>

08004664 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e00a      	b.n	800468c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004676:	f3af 8000 	nop.w
 800467a:	4601      	mov	r1, r0
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	60ba      	str	r2, [r7, #8]
 8004682:	b2ca      	uxtb	r2, r1
 8004684:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	3301      	adds	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	dbf0      	blt.n	8004676 <_read+0x12>
	}

return len;
 8004694:	687b      	ldr	r3, [r7, #4]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b086      	sub	sp, #24
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e009      	b.n	80046c4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	60ba      	str	r2, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff89 	bl	80045d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	3301      	adds	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	dbf1      	blt.n	80046b0 <_write+0x12>
	}
	return len;
 80046cc:	687b      	ldr	r3, [r7, #4]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <_close>:

int _close(int file)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
	return -1;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046fe:	605a      	str	r2, [r3, #4]
	return 0;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <_isatty>:

int _isatty(int file)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
	return 1;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
	return 0;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004740:	480d      	ldr	r0, [pc, #52]	; (8004778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004742:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004744:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004748:	480c      	ldr	r0, [pc, #48]	; (800477c <LoopForever+0x6>)
  ldr r1, =_edata
 800474a:	490d      	ldr	r1, [pc, #52]	; (8004780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800474c:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <LoopForever+0xe>)
  movs r3, #0
 800474e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004750:	e002      	b.n	8004758 <LoopCopyDataInit>

08004752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004756:	3304      	adds	r3, #4

08004758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800475a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800475c:	d3f9      	bcc.n	8004752 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004760:	4c0a      	ldr	r4, [pc, #40]	; (800478c <LoopForever+0x16>)
  movs r3, #0
 8004762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004764:	e001      	b.n	800476a <LoopFillZerobss>

08004766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004768:	3204      	adds	r2, #4

0800476a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800476a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800476c:	d3fb      	bcc.n	8004766 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800476e:	f009 fa05 	bl	800db7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004772:	f7fc faa1 	bl	8000cb8 <main>

08004776 <LoopForever>:

LoopForever:
    b LoopForever
 8004776:	e7fe      	b.n	8004776 <LoopForever>
  ldr   r0, =_estack
 8004778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800477c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004780:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004784:	08014038 	.word	0x08014038
  ldr r2, =_sbss
 8004788:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800478c:	2000dc50 	.word	0x2000dc50

08004790 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004790:	e7fe      	b.n	8004790 <ADC_IRQHandler>

08004792 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f103 0208 	add.w	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295
 80047aa:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f103 0208 	add.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f103 0208 	add.w	r2, r3, #8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d103      	bne.n	8004854 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e00c      	b.n	800486e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3308      	adds	r3, #8
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e002      	b.n	8004862 <vListInsert+0x2e>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d2f6      	bcs.n	800485c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6892      	ldr	r2, [r2, #8]
 80048bc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6852      	ldr	r2, [r2, #4]
 80048c6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d103      	bne.n	80048da <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	1e5a      	subs	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xQueueGenericReset+0x2a>
        __asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60bb      	str	r3, [r7, #8]
    }
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004926:	f002 fabf 	bl	8006ea8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004936:	fb01 f303 	mul.w	r3, r1, r3
 800493a:	441a      	add	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	3b01      	subs	r3, #1
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	22ff      	movs	r2, #255	; 0xff
 800496a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	22ff      	movs	r2, #255	; 0xff
 8004972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d114      	bne.n	80049a6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01a      	beq.n	80049ba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3310      	adds	r3, #16
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f8f5 	bl	8005b78 <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d012      	beq.n	80049ba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <xQueueGenericReset+0xcc>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	e009      	b.n	80049ba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3310      	adds	r3, #16
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fef1 	bl	8004792 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3324      	adds	r3, #36	; 0x24
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff feec 	bl	8004792 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80049ba:	f002 faa5 	bl	8006f08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80049be:	2301      	movs	r3, #1
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08c      	sub	sp, #48	; 0x30
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61bb      	str	r3, [r7, #24]
    }
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <xQueueGenericCreate+0x48>
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d101      	bne.n	8004a18 <xQueueGenericCreate+0x4c>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <xQueueGenericCreate+0x4e>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xQueueGenericCreate+0x68>
        __asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
    }
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004a3a:	d90a      	bls.n	8004a52 <xQueueGenericCreate+0x86>
        __asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	613b      	str	r3, [r7, #16]
    }
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	3350      	adds	r3, #80	; 0x50
 8004a56:	4618      	mov	r0, r3
 8004a58:	f002 fb48 	bl	80070ec <pvPortMalloc>
 8004a5c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3350      	adds	r3, #80	; 0x50
 8004a6c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a6e:	79fa      	ldrb	r2, [r7, #7]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f805 	bl	8004a8a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004a80:	6a3b      	ldr	r3, [r7, #32]
    }
 8004a82:	4618      	mov	r0, r3
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab8:	2101      	movs	r1, #1
 8004aba:	69b8      	ldr	r0, [r7, #24]
 8004abc:	f7ff ff1e 	bl	80048fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueGenericSend+0x32>
        __asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <xQueueGenericSend+0x40>
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xQueueGenericSend+0x44>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xQueueGenericSend+0x46>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <xQueueGenericSend+0x60>
        __asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d103      	bne.n	8004b3e <xQueueGenericSend+0x6e>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <xQueueGenericSend+0x72>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueGenericSend+0x74>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <xQueueGenericSend+0x8e>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
    }
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b5e:	f001 f9a7 	bl	8005eb0 <xTaskGetSchedulerState>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <xQueueGenericSend+0x9e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueGenericSend+0xa2>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericSend+0xa4>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericSend+0xbe>
        __asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61fb      	str	r3, [r7, #28]
    }
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004b8e:	f002 f98b 	bl	8006ea8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <xQueueGenericSend+0xd4>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d129      	bne.n	8004bf8 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004baa:	f000 faa8 	bl	80050fe <prvCopyDataToQueue>
 8004bae:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 ffdb 	bl	8005b78 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d013      	beq.n	8004bf0 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <xQueueGenericSend+0x1f8>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	e00a      	b.n	8004bf0 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <xQueueGenericSend+0x1f8>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004bf0:	f002 f98a 	bl	8006f08 <vPortExitCritical>
                return pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e063      	b.n	8004cc0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004bfe:	f002 f983 	bl	8006f08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e05c      	b.n	8004cc0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f813 	bl	8005c3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004c1a:	f002 f975 	bl	8006f08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c1e:	f000 fd9b 	bl	8005758 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c22:	f002 f941 	bl	8006ea8 <vPortEnterCritical>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d103      	bne.n	8004c3c <xQueueGenericSend+0x16c>
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x182>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c52:	f002 f959 	bl	8006f08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c56:	1d3a      	adds	r2, r7, #4
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f802 	bl	8005c68 <xTaskCheckForTimeOut>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d124      	bne.n	8004cb4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f000 fb3f 	bl	80052ee <prvIsQueueFull>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d018      	beq.n	8004ca8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3310      	adds	r3, #16
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 ff2a 	bl	8005ad8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c86:	f000 faca 	bl	800521e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004c8a:	f000 fd73 	bl	8005774 <xTaskResumeAll>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af7c 	bne.w	8004b8e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <xQueueGenericSend+0x1f8>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	e772      	b.n	8004b8e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004caa:	f000 fab8 	bl	800521e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004cae:	f000 fd61 	bl	8005774 <xTaskResumeAll>
 8004cb2:	e76c      	b.n	8004b8e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb6:	f000 fab2 	bl	800521e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004cba:	f000 fd5b 	bl	8005774 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004cbe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3738      	adds	r7, #56	; 0x38
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b090      	sub	sp, #64	; 0x40
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <xQueueGenericSendFromISR+0x3c>
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <xQueueGenericSendFromISR+0x40>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e000      	b.n	8004d0e <xQueueGenericSendFromISR+0x42>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <xQueueGenericSendFromISR+0x6a>
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <xQueueGenericSendFromISR+0x6e>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <xQueueGenericSendFromISR+0x70>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	623b      	str	r3, [r7, #32]
    }
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d56:	f002 f989 	bl	800706c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	61fa      	str	r2, [r7, #28]
 8004d70:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004d72:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <xQueueGenericSendFromISR+0xbc>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d13e      	bne.n	8004e06 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d9e:	f000 f9ae 	bl	80050fe <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004da2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d112      	bne.n	8004dd2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d025      	beq.n	8004e00 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	3324      	adds	r3, #36	; 0x24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fedd 	bl	8005b78 <xTaskRemoveFromEventList>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01d      	beq.n	8004e00 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01a      	beq.n	8004e00 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e016      	b.n	8004e00 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004dd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd8:	d10a      	bne.n	8004df0 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	617b      	str	r3, [r7, #20]
    }
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004df4:	3301      	adds	r3, #1
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	b25a      	sxtb	r2, r3
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004e00:	2301      	movs	r3, #1
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004e04:	e001      	b.n	8004e0a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004e14:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3740      	adds	r7, #64	; 0x40
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	; 0x30
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <xQueueReceive+0x30>
        __asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	623b      	str	r3, [r7, #32]
    }
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <xQueueReceive+0x3e>
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <xQueueReceive+0x42>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <xQueueReceive+0x44>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xQueueReceive+0x5e>
        __asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	61fb      	str	r3, [r7, #28]
    }
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e7e:	f001 f817 	bl	8005eb0 <xTaskGetSchedulerState>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <xQueueReceive+0x6e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <xQueueReceive+0x72>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <xQueueReceive+0x74>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <xQueueReceive+0x8e>
        __asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	61bb      	str	r3, [r7, #24]
    }
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004eae:	f001 fffb 	bl	8006ea8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01f      	beq.n	8004efe <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec2:	f000 f986 	bl	80051d2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	3310      	adds	r3, #16
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fe4c 	bl	8005b78 <xTaskRemoveFromEventList>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d007      	beq.n	8004ef6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004ee6:	4b3d      	ldr	r3, [pc, #244]	; (8004fdc <xQueueReceive+0x1bc>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004ef6:	f002 f807 	bl	8006f08 <vPortExitCritical>
                return pdPASS;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e069      	b.n	8004fd2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f04:	f002 f800 	bl	8006f08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e062      	b.n	8004fd2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f12:	f107 0310 	add.w	r3, r7, #16
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fe90 	bl	8005c3c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f20:	f001 fff2 	bl	8006f08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f24:	f000 fc18 	bl	8005758 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f28:	f001 ffbe 	bl	8006ea8 <vPortEnterCritical>
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f32:	b25b      	sxtb	r3, r3
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d103      	bne.n	8004f42 <xQueueReceive+0x122>
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f48:	b25b      	sxtb	r3, r3
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d103      	bne.n	8004f58 <xQueueReceive+0x138>
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f58:	f001 ffd6 	bl	8006f08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f5c:	1d3a      	adds	r2, r7, #4
 8004f5e:	f107 0310 	add.w	r3, r7, #16
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fe7f 	bl	8005c68 <xTaskCheckForTimeOut>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d123      	bne.n	8004fb8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f72:	f000 f9a6 	bl	80052c2 <prvIsQueueEmpty>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d017      	beq.n	8004fac <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fda7 	bl	8005ad8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	f000 f947 	bl	800521e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004f90:	f000 fbf0 	bl	8005774 <xTaskResumeAll>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d189      	bne.n	8004eae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <xQueueReceive+0x1bc>)
 8004f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	e780      	b.n	8004eae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fae:	f000 f936 	bl	800521e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004fb2:	f000 fbdf 	bl	8005774 <xTaskResumeAll>
 8004fb6:	e77a      	b.n	8004eae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fba:	f000 f930 	bl	800521e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004fbe:	f000 fbd9 	bl	8005774 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc4:	f000 f97d 	bl	80052c2 <prvIsQueueEmpty>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f43f af6f 	beq.w	8004eae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004fd0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3730      	adds	r7, #48	; 0x30
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b090      	sub	sp, #64	; 0x40
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <xQueueReceiveFromISR+0x3a>
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <xQueueReceiveFromISR+0x3e>
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <xQueueReceiveFromISR+0x40>
 800501e:	2300      	movs	r3, #0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800503a:	f002 f817 	bl	800706c <vPortValidateInterruptPriority>
        __asm volatile
 800503e:	f3ef 8211 	mrs	r2, BASEPRI
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	623a      	str	r2, [r7, #32]
 8005054:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005056:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03e      	beq.n	80050e4 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800506c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005074:	f000 f8ad 	bl	80051d2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005080:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005088:	d112      	bne.n	80050b0 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d025      	beq.n	80050de <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	3310      	adds	r3, #16
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fd6e 	bl	8005b78 <xTaskRemoveFromEventList>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01d      	beq.n	80050de <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e016      	b.n	80050de <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80050b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050b4:	2b7f      	cmp	r3, #127	; 0x7f
 80050b6:	d10a      	bne.n	80050ce <xQueueReceiveFromISR+0xee>
        __asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	61bb      	str	r3, [r7, #24]
    }
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050d2:	3301      	adds	r3, #1
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	b25a      	sxtb	r2, r3
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80050de:	2301      	movs	r3, #1
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e2:	e001      	b.n	80050e8 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ea:	617b      	str	r3, [r7, #20]
        __asm volatile
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f383 8811 	msr	BASEPRI, r3
    }
 80050f2:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3740      	adds	r7, #64	; 0x40
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d14d      	bne.n	80051c0 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fedf 	bl	8005eec <xTaskPriorityDisinherit>
 800512e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	e043      	b.n	80051c0 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d119      	bne.n	8005172 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6858      	ldr	r0, [r3, #4]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	461a      	mov	r2, r3
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	f008 fd43 	bl	800dbd4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	441a      	add	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	d32b      	bcc.n	80051c0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	e026      	b.n	80051c0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	68d8      	ldr	r0, [r3, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	461a      	mov	r2, r3
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	f008 fd29 	bl	800dbd4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	425b      	negs	r3, r3
 800518c:	441a      	add	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d207      	bcs.n	80051ae <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	425b      	negs	r3, r3
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d105      	bne.n	80051c0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	3b01      	subs	r3, #1
 80051be:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d018      	beq.n	8005216 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	441a      	add	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d303      	bcc.n	8005206 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68d9      	ldr	r1, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	461a      	mov	r2, r3
 8005210:	6838      	ldr	r0, [r7, #0]
 8005212:	f008 fcdf 	bl	800dbd4 <memcpy>
    }
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005226:	f001 fe3f 	bl	8006ea8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005230:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005232:	e011      	b.n	8005258 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d012      	beq.n	8005262 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3324      	adds	r3, #36	; 0x24
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fc99 	bl	8005b78 <xTaskRemoveFromEventList>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800524c:	f000 fd72 	bl	8005d34 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	3b01      	subs	r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525c:	2b00      	cmp	r3, #0
 800525e:	dce9      	bgt.n	8005234 <prvUnlockQueue+0x16>
 8005260:	e000      	b.n	8005264 <prvUnlockQueue+0x46>
                        break;
 8005262:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	22ff      	movs	r2, #255	; 0xff
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800526c:	f001 fe4c 	bl	8006f08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005270:	f001 fe1a 	bl	8006ea8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800527c:	e011      	b.n	80052a2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d012      	beq.n	80052ac <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3310      	adds	r3, #16
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fc74 	bl	8005b78 <xTaskRemoveFromEventList>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005296:	f000 fd4d 	bl	8005d34 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	3b01      	subs	r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dce9      	bgt.n	800527e <prvUnlockQueue+0x60>
 80052aa:	e000      	b.n	80052ae <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80052ac:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	22ff      	movs	r2, #255	; 0xff
 80052b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80052b6:	f001 fe27 	bl	8006f08 <vPortExitCritical>
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80052ca:	f001 fded 	bl	8006ea8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e001      	b.n	80052e0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80052e0:	f001 fe12 	bl	8006f08 <vPortExitCritical>

    return xReturn;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80052f6:	f001 fdd7 	bl	8006ea8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	429a      	cmp	r2, r3
 8005304:	d102      	bne.n	800530c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005306:	2301      	movs	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e001      	b.n	8005310 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005310:	f001 fdfa 	bl	8006f08 <vPortExitCritical>

    return xReturn;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800531e:	b480      	push	{r7}
 8005320:	b087      	sub	sp, #28
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60fb      	str	r3, [r7, #12]
    }
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	429a      	cmp	r2, r3
 8005350:	d102      	bne.n	8005358 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e001      	b.n	800535c <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800535c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800535e:	4618      	mov	r0, r3
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e014      	b.n	80053a6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800537c:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <vQueueAddToRegistry+0x50>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005388:	490c      	ldr	r1, [pc, #48]	; (80053bc <vQueueAddToRegistry+0x50>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <vQueueAddToRegistry+0x50>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800539e:	e006      	b.n	80053ae <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b07      	cmp	r3, #7
 80053aa:	d9e7      	bls.n	800537c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000c20 	.word	0x20000c20

080053c0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80053d0:	f001 fd6a 	bl	8006ea8 <vPortEnterCritical>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053da:	b25b      	sxtb	r3, r3
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d103      	bne.n	80053ea <vQueueWaitForMessageRestricted+0x2a>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d103      	bne.n	8005400 <vQueueWaitForMessageRestricted+0x40>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005400:	f001 fd82 	bl	8006f08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fb83 	bl	8005b20 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7ff feff 	bl	800521e <prvUnlockQueue>
    }
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	; 0x30
 800542c:	af04      	add	r7, sp, #16
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fe55 	bl	80070ec <pvPortMalloc>
 8005442:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00e      	beq.n	8005468 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800544a:	2058      	movs	r0, #88	; 0x58
 800544c:	f001 fe4e 	bl	80070ec <pvPortMalloc>
 8005450:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
 800545e:	e005      	b.n	800546c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005460:	6978      	ldr	r0, [r7, #20]
 8005462:	f001 ff23 	bl	80072ac <vPortFree>
 8005466:	e001      	b.n	800546c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f80e 	bl	80054aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800548e:	69f8      	ldr	r0, [r7, #28]
 8005490:	f000 f8a2 	bl	80055d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e002      	b.n	80054a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80054a0:	69bb      	ldr	r3, [r7, #24]
    }
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	461a      	mov	r2, r3
 80054c2:	21a5      	movs	r1, #165	; 0xa5
 80054c4:	f008 fb94 	bl	800dbf0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054d2:	3b01      	subs	r3, #1
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <prvInitialiseNewTask+0x58>
        __asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	617b      	str	r3, [r7, #20]
    }
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01f      	beq.n	8005548 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e012      	b.n	8005534 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	7819      	ldrb	r1, [r3, #0]
 8005516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	3334      	adds	r3, #52	; 0x34
 800551e:	460a      	mov	r2, r1
 8005520:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d006      	beq.n	800553c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b09      	cmp	r3, #9
 8005538:	d9e9      	bls.n	800550e <prvInitialiseNewTask+0x64>
 800553a:	e000      	b.n	800553e <prvInitialiseNewTask+0x94>
            {
                break;
 800553c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005546:	e003      	b.n	8005550 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	2b04      	cmp	r3, #4
 8005554:	d901      	bls.n	800555a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005556:	2304      	movs	r3, #4
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff f92e 	bl	80047d2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	3318      	adds	r3, #24
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff f929 	bl	80047d2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005584:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	f1c3 0205 	rsb	r2, r3, #5
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005594:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	3350      	adds	r3, #80	; 0x50
 800559a:	2204      	movs	r2, #4
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f008 fb26 	bl	800dbf0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	3354      	adds	r3, #84	; 0x54
 80055a8:	2201      	movs	r2, #1
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f008 fb1f 	bl	800dbf0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	68f9      	ldr	r1, [r7, #12]
 80055b6:	69b8      	ldr	r0, [r7, #24]
 80055b8:	f001 fb48 	bl	8006c4c <pxPortInitialiseStack>
 80055bc:	4602      	mov	r2, r0
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055ce:	bf00      	nop
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80055e0:	f001 fc62 	bl	8006ea8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80055e4:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <prvAddNewTaskToReadyList+0xc0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <prvAddNewTaskToReadyList+0xc0>)
 80055ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80055ee:	4b2b      	ldr	r3, [pc, #172]	; (800569c <prvAddNewTaskToReadyList+0xc4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80055f6:	4a29      	ldr	r2, [pc, #164]	; (800569c <prvAddNewTaskToReadyList+0xc4>)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <prvAddNewTaskToReadyList+0xc0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d110      	bne.n	8005626 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005604:	f000 fbba 	bl	8005d7c <prvInitialiseTaskLists>
 8005608:	e00d      	b.n	8005626 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <prvAddNewTaskToReadyList+0xc8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <prvAddNewTaskToReadyList+0xc4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	429a      	cmp	r2, r3
 800561e:	d802      	bhi.n	8005626 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005620:	4a1e      	ldr	r2, [pc, #120]	; (800569c <prvAddNewTaskToReadyList+0xc4>)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005626:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <prvAddNewTaskToReadyList+0xcc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <prvAddNewTaskToReadyList+0xcc>)
 800562e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <prvAddNewTaskToReadyList+0xcc>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	2201      	movs	r2, #1
 800563e:	409a      	lsls	r2, r3
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <prvAddNewTaskToReadyList+0xd0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <prvAddNewTaskToReadyList+0xd0>)
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4a15      	ldr	r2, [pc, #84]	; (80056ac <prvAddNewTaskToReadyList+0xd4>)
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f7ff f8c3 	bl	80047ec <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005666:	f001 fc4f 	bl	8006f08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <prvAddNewTaskToReadyList+0xc8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <prvAddNewTaskToReadyList+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	429a      	cmp	r2, r3
 800567e:	d207      	bcs.n	8005690 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <prvAddNewTaskToReadyList+0xd8>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000d38 	.word	0x20000d38
 800569c:	20000c60 	.word	0x20000c60
 80056a0:	20000d44 	.word	0x20000d44
 80056a4:	20000d54 	.word	0x20000d54
 80056a8:	20000d40 	.word	0x20000d40
 80056ac:	20000c64 	.word	0x20000c64
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <vTaskStartScheduler+0x88>)
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	2300      	movs	r3, #0
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	2282      	movs	r2, #130	; 0x82
 80056c6:	491e      	ldr	r1, [pc, #120]	; (8005740 <vTaskStartScheduler+0x8c>)
 80056c8:	481e      	ldr	r0, [pc, #120]	; (8005744 <vTaskStartScheduler+0x90>)
 80056ca:	f7ff fead 	bl	8005428 <xTaskCreate>
 80056ce:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d102      	bne.n	80056dc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80056d6:	f000 ff4b 	bl	8006570 <xTimerCreateTimerTask>
 80056da:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d116      	bne.n	8005710 <vTaskStartScheduler+0x5c>
        __asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
    }
 80056f4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <vTaskStartScheduler+0x94>)
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <vTaskStartScheduler+0x98>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <vTaskStartScheduler+0x9c>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800570a:	f001 fb2b 	bl	8006d64 <xPortStartScheduler>
 800570e:	e00e      	b.n	800572e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005716:	d10a      	bne.n	800572e <vTaskStartScheduler+0x7a>
        __asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	607b      	str	r3, [r7, #4]
    }
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <vTaskStartScheduler+0xa0>)
 8005730:	681b      	ldr	r3, [r3, #0]
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000d5c 	.word	0x20000d5c
 8005740:	080138c8 	.word	0x080138c8
 8005744:	08005d4d 	.word	0x08005d4d
 8005748:	20000d58 	.word	0x20000d58
 800574c:	20000d44 	.word	0x20000d44
 8005750:	20000d3c 	.word	0x20000d3c
 8005754:	20000038 	.word	0x20000038

08005758 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <vTaskSuspendAll+0x18>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	4a03      	ldr	r2, [pc, #12]	; (8005770 <vTaskSuspendAll+0x18>)
 8005764:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20000d60 	.word	0x20000d60

08005774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005782:	4b41      	ldr	r3, [pc, #260]	; (8005888 <xTaskResumeAll+0x114>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	603b      	str	r3, [r7, #0]
    }
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80057a0:	f001 fb82 	bl	8006ea8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80057a4:	4b38      	ldr	r3, [pc, #224]	; (8005888 <xTaskResumeAll+0x114>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	4a37      	ldr	r2, [pc, #220]	; (8005888 <xTaskResumeAll+0x114>)
 80057ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ae:	4b36      	ldr	r3, [pc, #216]	; (8005888 <xTaskResumeAll+0x114>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d161      	bne.n	800587a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057b6:	4b35      	ldr	r3, [pc, #212]	; (800588c <xTaskResumeAll+0x118>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d05d      	beq.n	800587a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057be:	e02e      	b.n	800581e <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	4b33      	ldr	r3, [pc, #204]	; (8005890 <xTaskResumeAll+0x11c>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3318      	adds	r3, #24
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff f86a 	bl	80048a6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f865 	bl	80048a6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <xTaskResumeAll+0x120>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	4a2a      	ldr	r2, [pc, #168]	; (8005894 <xTaskResumeAll+0x120>)
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4a27      	ldr	r2, [pc, #156]	; (8005898 <xTaskResumeAll+0x124>)
 80057fc:	441a      	add	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f7fe fff1 	bl	80047ec <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4b23      	ldr	r3, [pc, #140]	; (800589c <xTaskResumeAll+0x128>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <xTaskResumeAll+0x12c>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <xTaskResumeAll+0x11c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1cc      	bne.n	80057c0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800582c:	f000 fb24 	bl	8005e78 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005830:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <xTaskResumeAll+0x130>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d010      	beq.n	800585e <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800583c:	f000 f846 	bl	80058cc <xTaskIncrementTick>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <xTaskResumeAll+0x12c>)
 8005848:	2201      	movs	r2, #1
 800584a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3b01      	subs	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f1      	bne.n	800583c <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005858:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <xTaskResumeAll+0x130>)
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <xTaskResumeAll+0x12c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005866:	2301      	movs	r3, #1
 8005868:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <xTaskResumeAll+0x134>)
 800586c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800587a:	f001 fb45 	bl	8006f08 <vPortExitCritical>

    return xAlreadyYielded;
 800587e:	68bb      	ldr	r3, [r7, #8]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000d60 	.word	0x20000d60
 800588c:	20000d38 	.word	0x20000d38
 8005890:	20000cf8 	.word	0x20000cf8
 8005894:	20000d40 	.word	0x20000d40
 8005898:	20000c64 	.word	0x20000c64
 800589c:	20000c60 	.word	0x20000c60
 80058a0:	20000d4c 	.word	0x20000d4c
 80058a4:	20000d48 	.word	0x20000d48
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <xTaskGetTickCount+0x1c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80058b8:	687b      	ldr	r3, [r7, #4]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	20000d3c 	.word	0x20000d3c

080058cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d6:	4b47      	ldr	r3, [pc, #284]	; (80059f4 <xTaskIncrementTick+0x128>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d17f      	bne.n	80059de <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058de:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <xTaskIncrementTick+0x12c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80058e6:	4a44      	ldr	r2, [pc, #272]	; (80059f8 <xTaskIncrementTick+0x12c>)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d120      	bne.n	8005934 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80058f2:	4b42      	ldr	r3, [pc, #264]	; (80059fc <xTaskIncrementTick+0x130>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <xTaskIncrementTick+0x46>
        __asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	603b      	str	r3, [r7, #0]
    }
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xTaskIncrementTick+0x44>
 8005912:	4b3a      	ldr	r3, [pc, #232]	; (80059fc <xTaskIncrementTick+0x130>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	4b39      	ldr	r3, [pc, #228]	; (8005a00 <xTaskIncrementTick+0x134>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a37      	ldr	r2, [pc, #220]	; (80059fc <xTaskIncrementTick+0x130>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	4a37      	ldr	r2, [pc, #220]	; (8005a00 <xTaskIncrementTick+0x134>)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <xTaskIncrementTick+0x138>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	4a35      	ldr	r2, [pc, #212]	; (8005a04 <xTaskIncrementTick+0x138>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	f000 faa2 	bl	8005e78 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005934:	4b34      	ldr	r3, [pc, #208]	; (8005a08 <xTaskIncrementTick+0x13c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d348      	bcc.n	80059d0 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800593e:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <xTaskIncrementTick+0x130>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005948:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <xTaskIncrementTick+0x13c>)
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	601a      	str	r2, [r3, #0]
                    break;
 8005950:	e03e      	b.n	80059d0 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005952:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <xTaskIncrementTick+0x130>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d203      	bcs.n	8005972 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800596a:	4a27      	ldr	r2, [pc, #156]	; (8005a08 <xTaskIncrementTick+0x13c>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005970:	e02e      	b.n	80059d0 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe ff95 	bl	80048a6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	3318      	adds	r3, #24
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe ff8c 	bl	80048a6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	2201      	movs	r2, #1
 8005994:	409a      	lsls	r2, r3
 8005996:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <xTaskIncrementTick+0x140>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <xTaskIncrementTick+0x140>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <xTaskIncrementTick+0x144>)
 80059ae:	441a      	add	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7fe ff18 	bl	80047ec <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <xTaskIncrementTick+0x148>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3b9      	bcc.n	800593e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ce:	e7b6      	b.n	800593e <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80059d0:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <xTaskIncrementTick+0x14c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e004      	b.n	80059e8 <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80059de:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <xTaskIncrementTick+0x150>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a0d      	ldr	r2, [pc, #52]	; (8005a1c <xTaskIncrementTick+0x150>)
 80059e6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000d60 	.word	0x20000d60
 80059f8:	20000d3c 	.word	0x20000d3c
 80059fc:	20000cf0 	.word	0x20000cf0
 8005a00:	20000cf4 	.word	0x20000cf4
 8005a04:	20000d50 	.word	0x20000d50
 8005a08:	20000d58 	.word	0x20000d58
 8005a0c:	20000d40 	.word	0x20000d40
 8005a10:	20000c64 	.word	0x20000c64
 8005a14:	20000c60 	.word	0x20000c60
 8005a18:	20000d4c 	.word	0x20000d4c
 8005a1c:	20000d48 	.word	0x20000d48

08005a20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a26:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <vTaskSwitchContext+0xa4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005a2e:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <vTaskSwitchContext+0xa8>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005a34:	e03f      	b.n	8005ab6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005a36:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <vTaskSwitchContext+0xa8>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3c:	4b23      	ldr	r3, [pc, #140]	; (8005acc <vTaskSwitchContext+0xac>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	fab3 f383 	clz	r3, r3
 8005a48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005a4a:	7afb      	ldrb	r3, [r7, #11]
 8005a4c:	f1c3 031f 	rsb	r3, r3, #31
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	491f      	ldr	r1, [pc, #124]	; (8005ad0 <vTaskSwitchContext+0xb0>)
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	607b      	str	r3, [r7, #4]
    }
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <vTaskSwitchContext+0x5a>
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <vTaskSwitchContext+0xb0>)
 8005a88:	4413      	add	r3, r2
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d104      	bne.n	8005aac <vTaskSwitchContext+0x8c>
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <vTaskSwitchContext+0xb4>)
 8005ab4:	6013      	str	r3, [r2, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000d60 	.word	0x20000d60
 8005ac8:	20000d4c 	.word	0x20000d4c
 8005acc:	20000d40 	.word	0x20000d40
 8005ad0:	20000c64 	.word	0x20000c64
 8005ad4:	20000c60 	.word	0x20000c60

08005ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60fb      	str	r3, [r7, #12]
    }
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <vTaskPlaceOnEventList+0x44>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3318      	adds	r3, #24
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fe fe94 	bl	8004834 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	6838      	ldr	r0, [r7, #0]
 8005b10:	f000 fcc8 	bl	80064a4 <prvAddCurrentTaskToDelayedList>
}
 8005b14:	bf00      	nop
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000c60 	.word	0x20000c60

08005b20 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	617b      	str	r3, [r7, #20]
    }
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	4619      	mov	r1, r3
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7fe fe4b 	bl	80047ec <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	68b8      	ldr	r0, [r7, #8]
 8005b66:	f000 fc9d 	bl	80064a4 <prvAddCurrentTaskToDelayedList>
    }
 8005b6a:	bf00      	nop
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000c60 	.word	0x20000c60

08005b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60fb      	str	r3, [r7, #12]
    }
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	3318      	adds	r3, #24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fe7c 	bl	80048a6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bae:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <xTaskRemoveFromEventList+0xac>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11c      	bne.n	8005bf0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fe73 	bl	80048a6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <xTaskRemoveFromEventList+0xb0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <xTaskRemoveFromEventList+0xb0>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <xTaskRemoveFromEventList+0xb4>)
 8005be0:	441a      	add	r2, r3
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe fdff 	bl	80047ec <vListInsertEnd>
 8005bee:	e005      	b.n	8005bfc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480e      	ldr	r0, [pc, #56]	; (8005c30 <xTaskRemoveFromEventList+0xb8>)
 8005bf8:	f7fe fdf8 	bl	80047ec <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <xTaskRemoveFromEventList+0xbc>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d905      	bls.n	8005c16 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <xTaskRemoveFromEventList+0xc0>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e001      	b.n	8005c1a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20000d60 	.word	0x20000d60
 8005c28:	20000d40 	.word	0x20000d40
 8005c2c:	20000c64 	.word	0x20000c64
 8005c30:	20000cf8 	.word	0x20000cf8
 8005c34:	20000c60 	.word	0x20000c60
 8005c38:	20000d4c 	.word	0x20000d4c

08005c3c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <vTaskInternalSetTimeOutState+0x24>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <vTaskInternalSetTimeOutState+0x28>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000d50 	.word	0x20000d50
 8005c64:	20000d3c 	.word	0x20000d3c

08005c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
    }
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	60fb      	str	r3, [r7, #12]
    }
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005caa:	f001 f8fd 	bl	8006ea8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005cae:	4b1f      	ldr	r3, [pc, #124]	; (8005d2c <xTaskCheckForTimeOut+0xc4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d102      	bne.n	8005cce <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e026      	b.n	8005d1c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <xTaskCheckForTimeOut+0xc8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d00a      	beq.n	8005cf0 <xTaskCheckForTimeOut+0x88>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d305      	bcc.n	8005cf0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e015      	b.n	8005d1c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d20b      	bcs.n	8005d12 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	1ad2      	subs	r2, r2, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff ff98 	bl	8005c3c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	e004      	b.n	8005d1c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005d1c:	f001 f8f4 	bl	8006f08 <vPortExitCritical>

    return xReturn;
 8005d20:	69fb      	ldr	r3, [r7, #28]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000d3c 	.word	0x20000d3c
 8005d30:	20000d50 	.word	0x20000d50

08005d34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <vTaskMissedYield+0x14>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000d4c 	.word	0x20000d4c

08005d4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005d54:	f000 f852 	bl	8005dfc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <prvIdleTask+0x28>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d9f9      	bls.n	8005d54 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <prvIdleTask+0x2c>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005d70:	e7f0      	b.n	8005d54 <prvIdleTask+0x8>
 8005d72:	bf00      	nop
 8005d74:	20000c64 	.word	0x20000c64
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e00c      	b.n	8005da2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <prvInitialiseTaskLists+0x60>)
 8005d94:	4413      	add	r3, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fcfb 	bl	8004792 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d9ef      	bls.n	8005d88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005da8:	480d      	ldr	r0, [pc, #52]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005daa:	f7fe fcf2 	bl	8004792 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005dae:	480d      	ldr	r0, [pc, #52]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005db0:	f7fe fcef 	bl	8004792 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <prvInitialiseTaskLists+0x6c>)
 8005db6:	f7fe fcec 	bl	8004792 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005dba:	480c      	ldr	r0, [pc, #48]	; (8005dec <prvInitialiseTaskLists+0x70>)
 8005dbc:	f7fe fce9 	bl	8004792 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005dc0:	480b      	ldr	r0, [pc, #44]	; (8005df0 <prvInitialiseTaskLists+0x74>)
 8005dc2:	f7fe fce6 	bl	8004792 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <prvInitialiseTaskLists+0x78>)
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <prvInitialiseTaskLists+0x64>)
 8005dca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvInitialiseTaskLists+0x7c>)
 8005dce:	4a05      	ldr	r2, [pc, #20]	; (8005de4 <prvInitialiseTaskLists+0x68>)
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000c64 	.word	0x20000c64
 8005de0:	20000cc8 	.word	0x20000cc8
 8005de4:	20000cdc 	.word	0x20000cdc
 8005de8:	20000cf8 	.word	0x20000cf8
 8005dec:	20000d0c 	.word	0x20000d0c
 8005df0:	20000d24 	.word	0x20000d24
 8005df4:	20000cf0 	.word	0x20000cf0
 8005df8:	20000cf4 	.word	0x20000cf4

08005dfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e02:	e019      	b.n	8005e38 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005e04:	f001 f850 	bl	8006ea8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e08:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <prvCheckTasksWaitingTermination+0x50>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe fd46 	bl	80048a6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e1a:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a0b      	ldr	r2, [pc, #44]	; (8005e50 <prvCheckTasksWaitingTermination+0x54>)
 8005e22:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <prvCheckTasksWaitingTermination+0x58>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <prvCheckTasksWaitingTermination+0x58>)
 8005e2c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005e2e:	f001 f86b 	bl	8006f08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f810 	bl	8005e58 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <prvCheckTasksWaitingTermination+0x58>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e1      	bne.n	8005e04 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000d0c 	.word	0x20000d0c
 8005e50:	20000d38 	.word	0x20000d38
 8005e54:	20000d20 	.word	0x20000d20

08005e58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fa21 	bl	80072ac <vPortFree>
                vPortFree( pxTCB );
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fa1e 	bl	80072ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvResetNextTaskUnblockTime+0x30>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <prvResetNextTaskUnblockTime+0x34>)
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005e8e:	e005      	b.n	8005e9c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <prvResetNextTaskUnblockTime+0x30>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a04      	ldr	r2, [pc, #16]	; (8005eac <prvResetNextTaskUnblockTime+0x34>)
 8005e9a:	6013      	str	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000cf0 	.word	0x20000cf0
 8005eac:	20000d58 	.word	0x20000d58

08005eb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <xTaskGetSchedulerState+0x34>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	e008      	b.n	8005ed6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <xTaskGetSchedulerState+0x38>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	e001      	b.n	8005ed6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005ed6:	687b      	ldr	r3, [r7, #4]
    }
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000d44 	.word	0x20000d44
 8005ee8:	20000d60 	.word	0x20000d60

08005eec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d063      	beq.n	8005fca <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005f02:	4b34      	ldr	r3, [pc, #208]	; (8005fd4 <xTaskPriorityDisinherit+0xe8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d00a      	beq.n	8005f22 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60fb      	str	r3, [r7, #12]
    }
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	60bb      	str	r3, [r7, #8]
    }
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d039      	beq.n	8005fca <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d135      	bne.n	8005fca <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fc9f 	bl	80048a6 <uxListRemove>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	2201      	movs	r2, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43da      	mvns	r2, r3
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <xTaskPriorityDisinherit+0xec>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <xTaskPriorityDisinherit+0xec>)
 8005f82:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	f1c3 0205 	rsb	r2, r3, #5
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <xTaskPriorityDisinherit+0xec>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <xTaskPriorityDisinherit+0xec>)
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <xTaskPriorityDisinherit+0xf0>)
 8005fb8:	441a      	add	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f7fe fc13 	bl	80047ec <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005fca:	697b      	ldr	r3, [r7, #20]
    }
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000c60 	.word	0x20000c60
 8005fd8:	20000d40 	.word	0x20000d40
 8005fdc:	20000c64 	.word	0x20000c64

08005fe0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	613b      	str	r3, [r7, #16]
    }
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800600a:	f000 ff4d 	bl	8006ea8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800600e:	4b32      	ldr	r3, [pc, #200]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4413      	add	r3, r2
 8006016:	3354      	adds	r3, #84	; 0x54
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d022      	beq.n	8006066 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006020:	4b2d      	ldr	r3, [pc, #180]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	3214      	adds	r2, #20
 8006028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	43d2      	mvns	r2, r2
 8006030:	4011      	ands	r1, r2
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	3214      	adds	r2, #20
 8006036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4413      	add	r3, r2
 8006042:	3354      	adds	r3, #84	; 0x54
 8006044:	2201      	movs	r2, #1
 8006046:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800604e:	2101      	movs	r1, #1
 8006050:	6a38      	ldr	r0, [r7, #32]
 8006052:	f000 fa27 	bl	80064a4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <xTaskGenericNotifyWait+0xfc>)
 8006058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006066:	f000 ff4f 	bl	8006f08 <vPortExitCritical>

        taskENTER_CRITICAL();
 800606a:	f000 ff1d 	bl	8006ea8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006074:	4b18      	ldr	r3, [pc, #96]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	3214      	adds	r2, #20
 800607c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006084:	4b14      	ldr	r3, [pc, #80]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	3354      	adds	r3, #84	; 0x54
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d002      	beq.n	800609c <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e00e      	b.n	80060ba <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	3214      	adds	r2, #20
 80060a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	43d2      	mvns	r2, r2
 80060ac:	4011      	ands	r1, r2
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	3214      	adds	r2, #20
 80060b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <xTaskGenericNotifyWait+0xf8>)
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	3354      	adds	r3, #84	; 0x54
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80060c8:	f000 ff1e 	bl	8006f08 <vPortExitCritical>

        return xReturn;
 80060cc:	697b      	ldr	r3, [r7, #20]
    }
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000c60 	.word	0x20000c60
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08c      	sub	sp, #48	; 0x30
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80060ee:	2301      	movs	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <xTaskGenericNotify+0x2e>
        __asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	623b      	str	r3, [r7, #32]
    }
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61fb      	str	r3, [r7, #28]
    }
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800612e:	f000 febb 	bl	8006ea8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d006      	beq.n	8006146 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	3214      	adds	r2, #20
 800613e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4413      	add	r3, r2
 800614c:	3354      	adds	r3, #84	; 0x54
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4413      	add	r3, r2
 800615a:	3354      	adds	r3, #84	; 0x54
 800615c:	2202      	movs	r2, #2
 800615e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	2b04      	cmp	r3, #4
 8006164:	d83b      	bhi.n	80061de <xTaskGenericNotify+0xfe>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <xTaskGenericNotify+0x8c>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	080061fd 	.word	0x080061fd
 8006170:	08006181 	.word	0x08006181
 8006174:	0800619d 	.word	0x0800619d
 8006178:	080061b5 	.word	0x080061b5
 800617c:	080061c3 	.word	0x080061c3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	3214      	adds	r2, #20
 8006186:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	ea42 0103 	orr.w	r1, r2, r3
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	3214      	adds	r2, #20
 8006196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800619a:	e032      	b.n	8006202 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	3214      	adds	r2, #20
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	3214      	adds	r2, #20
 80061ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061b2:	e026      	b.n	8006202 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	3214      	adds	r2, #20
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061c0:	e01f      	b.n	8006202 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80061c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d006      	beq.n	80061d8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	3214      	adds	r2, #20
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80061d6:	e014      	b.n	8006202 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80061d8:	2300      	movs	r3, #0
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80061dc:	e011      	b.n	8006202 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80061de:	4b2b      	ldr	r3, [pc, #172]	; (800628c <xTaskGenericNotify+0x1ac>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00c      	beq.n	8006200 <xTaskGenericNotify+0x120>
        __asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	61bb      	str	r3, [r7, #24]
    }
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xTaskGenericNotify+0x11a>
                    break;
 80061fc:	bf00      	nop
 80061fe:	e000      	b.n	8006202 <xTaskGenericNotify+0x122>

                    break;
 8006200:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006206:	2b01      	cmp	r3, #1
 8006208:	d139      	bne.n	800627e <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	3304      	adds	r3, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fb49 	bl	80048a6 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	2201      	movs	r2, #1
 800621a:	409a      	lsls	r2, r3
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <xTaskGenericNotify+0x1b0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4313      	orrs	r3, r2
 8006222:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <xTaskGenericNotify+0x1b0>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a18      	ldr	r2, [pc, #96]	; (8006294 <xTaskGenericNotify+0x1b4>)
 8006234:	441a      	add	r2, r3
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fe fad5 	bl	80047ec <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <xTaskGenericNotify+0x180>
        __asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	617b      	str	r3, [r7, #20]
    }
 800625c:	bf00      	nop
 800625e:	e7fe      	b.n	800625e <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <xTaskGenericNotify+0x1b8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	429a      	cmp	r2, r3
 800626c:	d907      	bls.n	800627e <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <xTaskGenericNotify+0x1bc>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800627e:	f000 fe43 	bl	8006f08 <vPortExitCritical>

        return xReturn;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006284:	4618      	mov	r0, r3
 8006286:	3730      	adds	r7, #48	; 0x30
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000d3c 	.word	0x20000d3c
 8006290:	20000d40 	.word	0x20000d40
 8006294:	20000c64 	.word	0x20000c64
 8006298:	20000c60 	.word	0x20000c60
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b090      	sub	sp, #64	; 0x40
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80062ae:	2301      	movs	r3, #1
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ea:	f000 febf 	bl	800706c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80062f2:	f3ef 8211 	mrs	r2, BASEPRI
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	627a      	str	r2, [r7, #36]	; 0x24
 8006308:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800630e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006310:	2b00      	cmp	r3, #0
 8006312:	d006      	beq.n	8006322 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	3214      	adds	r2, #20
 800631a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800631e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006320:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4413      	add	r3, r2
 8006328:	3354      	adds	r3, #84	; 0x54
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	3354      	adds	r3, #84	; 0x54
 8006338:	2202      	movs	r2, #2
 800633a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	2b04      	cmp	r3, #4
 8006340:	d83b      	bhi.n	80063ba <xTaskGenericNotifyFromISR+0x11a>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <xTaskGenericNotifyFromISR+0xa8>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	080063d9 	.word	0x080063d9
 800634c:	0800635d 	.word	0x0800635d
 8006350:	08006379 	.word	0x08006379
 8006354:	08006391 	.word	0x08006391
 8006358:	0800639f 	.word	0x0800639f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	3214      	adds	r2, #20
 8006362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	ea42 0103 	orr.w	r1, r2, r3
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	3214      	adds	r2, #20
 8006372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006376:	e032      	b.n	80063de <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	3214      	adds	r2, #20
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	3214      	adds	r2, #20
 800638a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800638e:	e026      	b.n	80063de <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	3214      	adds	r2, #20
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800639c:	e01f      	b.n	80063de <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800639e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d006      	beq.n	80063b4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	3214      	adds	r2, #20
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80063b2:	e014      	b.n	80063de <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80063b8:	e011      	b.n	80063de <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80063ba:	4b33      	ldr	r3, [pc, #204]	; (8006488 <xTaskGenericNotifyFromISR+0x1e8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61fb      	str	r3, [r7, #28]
    }
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80063dc:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d145      	bne.n	8006472 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61bb      	str	r3, [r7, #24]
    }
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006404:	4b21      	ldr	r3, [pc, #132]	; (800648c <xTaskGenericNotifyFromISR+0x1ec>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11c      	bne.n	8006446 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fa48 	bl	80048a6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	2201      	movs	r2, #1
 800641c:	409a      	lsls	r2, r3
 800641e:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <xTaskGenericNotifyFromISR+0x1f0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4313      	orrs	r3, r2
 8006424:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <xTaskGenericNotifyFromISR+0x1f0>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a17      	ldr	r2, [pc, #92]	; (8006494 <xTaskGenericNotifyFromISR+0x1f4>)
 8006436:	441a      	add	r2, r3
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe f9d4 	bl	80047ec <vListInsertEnd>
 8006444:	e005      	b.n	8006452 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	3318      	adds	r3, #24
 800644a:	4619      	mov	r1, r3
 800644c:	4812      	ldr	r0, [pc, #72]	; (8006498 <xTaskGenericNotifyFromISR+0x1f8>)
 800644e:	f7fe f9cd 	bl	80047ec <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006456:	4b11      	ldr	r3, [pc, #68]	; (800649c <xTaskGenericNotifyFromISR+0x1fc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	429a      	cmp	r2, r3
 800645e:	d908      	bls.n	8006472 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800646c:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <xTaskGenericNotifyFromISR+0x200>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f383 8811 	msr	BASEPRI, r3
    }
 800647c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006480:	4618      	mov	r0, r3
 8006482:	3740      	adds	r7, #64	; 0x40
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000d3c 	.word	0x20000d3c
 800648c:	20000d60 	.word	0x20000d60
 8006490:	20000d40 	.word	0x20000d40
 8006494:	20000c64 	.word	0x20000c64
 8006498:	20000cf8 	.word	0x20000cf8
 800649c:	20000c60 	.word	0x20000c60
 80064a0:	20000d4c 	.word	0x20000d4c

080064a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80064ae:	4b29      	ldr	r3, [pc, #164]	; (8006554 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064b4:	4b28      	ldr	r3, [pc, #160]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f9f3 	bl	80048a6 <uxListRemove>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064c6:	4b24      	ldr	r3, [pc, #144]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	2201      	movs	r2, #1
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43da      	mvns	r2, r3
 80064d4:	4b21      	ldr	r3, [pc, #132]	; (800655c <prvAddCurrentTaskToDelayedList+0xb8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4013      	ands	r3, r2
 80064da:	4a20      	ldr	r2, [pc, #128]	; (800655c <prvAddCurrentTaskToDelayedList+0xb8>)
 80064dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e4:	d10a      	bne.n	80064fc <prvAddCurrentTaskToDelayedList+0x58>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d007      	beq.n	80064fc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	481a      	ldr	r0, [pc, #104]	; (8006560 <prvAddCurrentTaskToDelayedList+0xbc>)
 80064f6:	f7fe f979 	bl	80047ec <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80064fa:	e026      	b.n	800654a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006504:	4b14      	ldr	r3, [pc, #80]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	429a      	cmp	r2, r3
 8006512:	d209      	bcs.n	8006528 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006514:	4b13      	ldr	r3, [pc, #76]	; (8006564 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fe f987 	bl	8004834 <vListInsert>
}
 8006526:	e010      	b.n	800654a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006528:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <prvAddCurrentTaskToDelayedList+0xc4>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3304      	adds	r3, #4
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f7fe f97d 	bl	8004834 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800653a:	4b0c      	ldr	r3, [pc, #48]	; (800656c <prvAddCurrentTaskToDelayedList+0xc8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	d202      	bcs.n	800654a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006544:	4a09      	ldr	r2, [pc, #36]	; (800656c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6013      	str	r3, [r2, #0]
}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000d3c 	.word	0x20000d3c
 8006558:	20000c60 	.word	0x20000c60
 800655c:	20000d40 	.word	0x20000d40
 8006560:	20000d24 	.word	0x20000d24
 8006564:	20000cf4 	.word	0x20000cf4
 8006568:	20000cf0 	.word	0x20000cf0
 800656c:	20000d58 	.word	0x20000d58

08006570 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006576:	2300      	movs	r3, #0
 8006578:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800657a:	f000 fb31 	bl	8006be0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800657e:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <xTimerCreateTimerTask+0x54>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <xTimerCreateTimerTask+0x58>)
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2302      	movs	r3, #2
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006594:	490d      	ldr	r1, [pc, #52]	; (80065cc <xTimerCreateTimerTask+0x5c>)
 8006596:	480e      	ldr	r0, [pc, #56]	; (80065d0 <xTimerCreateTimerTask+0x60>)
 8006598:	f7fe ff46 	bl	8005428 <xTaskCreate>
 800659c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	603b      	str	r3, [r7, #0]
    }
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80065ba:	687b      	ldr	r3, [r7, #4]
    }
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000d94 	.word	0x20000d94
 80065c8:	20000d98 	.word	0x20000d98
 80065cc:	080138d0 	.word	0x080138d0
 80065d0:	080067c1 	.word	0x080067c1

080065d4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80065e2:	202c      	movs	r0, #44	; 0x2c
 80065e4:	f000 fd82 	bl	80070ec <pvPortMalloc>
 80065e8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00d      	beq.n	800660c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f805 	bl	8006616 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800660c:	697b      	ldr	r3, [r7, #20]
        }
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006616:	b580      	push	{r7, lr}
 8006618:	b086      	sub	sp, #24
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	617b      	str	r3, [r7, #20]
    }
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01e      	beq.n	8006684 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006646:	f000 facb 	bl	8006be0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe f8b3 	bl	80047d2 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006678:	f043 0304 	orr.w	r3, r3, #4
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006684:	bf00      	nop
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <xTimerGenericCommand+0x2e>
        __asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	623b      	str	r3, [r7, #32]
    }
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80066ba:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <xTimerGenericCommand+0x98>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d02a      	beq.n	8006718 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b05      	cmp	r3, #5
 80066d2:	dc18      	bgt.n	8006706 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066d4:	f7ff fbec 	bl	8005eb0 <xTaskGetSchedulerState>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d109      	bne.n	80066f2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066de:	4b11      	ldr	r3, [pc, #68]	; (8006724 <xTimerGenericCommand+0x98>)
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	f107 0114 	add.w	r1, r7, #20
 80066e6:	2300      	movs	r3, #0
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	f7fe f9f1 	bl	8004ad0 <xQueueGenericSend>
 80066ee:	6278      	str	r0, [r7, #36]	; 0x24
 80066f0:	e012      	b.n	8006718 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <xTimerGenericCommand+0x98>)
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f107 0114 	add.w	r1, r7, #20
 80066fa:	2300      	movs	r3, #0
 80066fc:	2200      	movs	r2, #0
 80066fe:	f7fe f9e7 	bl	8004ad0 <xQueueGenericSend>
 8006702:	6278      	str	r0, [r7, #36]	; 0x24
 8006704:	e008      	b.n	8006718 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <xTimerGenericCommand+0x98>)
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f107 0114 	add.w	r1, r7, #20
 800670e:	2300      	movs	r3, #0
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	f7fe fadb 	bl	8004ccc <xQueueGenericSendFromISR>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	; 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000d94 	.word	0x20000d94

08006728 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006732:	4b22      	ldr	r3, [pc, #136]	; (80067bc <prvProcessExpiredTimer+0x94>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	3304      	adds	r3, #4
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe f8b0 	bl	80048a6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d022      	beq.n	800679a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	699a      	ldr	r2, [r3, #24]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	18d1      	adds	r1, r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	f000 f8d1 	bl	8006908 <prvInsertTimerInActiveList>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01f      	beq.n	80067ac <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800676c:	2300      	movs	r3, #0
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2300      	movs	r3, #0
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	2100      	movs	r1, #0
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	f7ff ff88 	bl	800668c <xTimerGenericCommand>
 800677c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d113      	bne.n	80067ac <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60fb      	str	r3, [r7, #12]
    }
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	6978      	ldr	r0, [r7, #20]
 80067b2:	4798      	blx	r3
    }
 80067b4:	bf00      	nop
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20000d8c 	.word	0x20000d8c

080067c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f857 	bl	8006880 <prvGetNextExpireTime>
 80067d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4619      	mov	r1, r3
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f803 	bl	80067e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80067de:	f000 f8d5 	bl	800698c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067e2:	e7f1      	b.n	80067c8 <prvTimerTask+0x8>

080067e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80067ee:	f7fe ffb3 	bl	8005758 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067f2:	f107 0308 	add.w	r3, r7, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f866 	bl	80068c8 <prvSampleTimeNow>
 80067fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d130      	bne.n	8006866 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <prvProcessTimerOrBlockTask+0x3c>
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	429a      	cmp	r2, r3
 8006810:	d806      	bhi.n	8006820 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006812:	f7fe ffaf 	bl	8005774 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ff85 	bl	8006728 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800681e:	e024      	b.n	800686a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006826:	4b13      	ldr	r3, [pc, #76]	; (8006874 <prvProcessTimerOrBlockTask+0x90>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <prvProcessTimerOrBlockTask+0x50>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <prvProcessTimerOrBlockTask+0x52>
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <prvProcessTimerOrBlockTask+0x94>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	f7fe fdbb 	bl	80053c0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800684a:	f7fe ff93 	bl	8005774 <xTaskResumeAll>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <prvProcessTimerOrBlockTask+0x98>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
    }
 8006864:	e001      	b.n	800686a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006866:	f7fe ff85 	bl	8005774 <xTaskResumeAll>
    }
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000d90 	.word	0x20000d90
 8006878:	20000d94 	.word	0x20000d94
 800687c:	e000ed04 	.word	0xe000ed04

08006880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <prvGetNextExpireTime+0x44>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <prvGetNextExpireTime+0x16>
 8006892:	2201      	movs	r2, #1
 8006894:	e000      	b.n	8006898 <prvGetNextExpireTime+0x18>
 8006896:	2200      	movs	r2, #0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <prvGetNextExpireTime+0x44>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e001      	b.n	80068b4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80068b4:	68fb      	ldr	r3, [r7, #12]
    }
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000d8c 	.word	0x20000d8c

080068c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80068d0:	f7fe ffec 	bl	80058ac <xTaskGetTickCount>
 80068d4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80068d6:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <prvSampleTimeNow+0x3c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d205      	bcs.n	80068ec <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80068e0:	f000 f91a 	bl	8006b18 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80068f2:	4a04      	ldr	r2, [pc, #16]	; (8006904 <prvSampleTimeNow+0x3c>)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80068f8:	68fb      	ldr	r3, [r7, #12]
    }
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000d9c 	.word	0x20000d9c

08006908 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	429a      	cmp	r2, r3
 800692c:	d812      	bhi.n	8006954 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	429a      	cmp	r2, r3
 800693a:	d302      	bcc.n	8006942 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e01b      	b.n	800697a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <prvInsertTimerInActiveList+0x7c>)
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3304      	adds	r3, #4
 800694a:	4619      	mov	r1, r3
 800694c:	4610      	mov	r0, r2
 800694e:	f7fd ff71 	bl	8004834 <vListInsert>
 8006952:	e012      	b.n	800697a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d206      	bcs.n	800696a <prvInsertTimerInActiveList+0x62>
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e007      	b.n	800697a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <prvInsertTimerInActiveList+0x80>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fd ff5d 	bl	8004834 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800697a:	697b      	ldr	r3, [r7, #20]
    }
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000d90 	.word	0x20000d90
 8006988:	20000d8c 	.word	0x20000d8c

0800698c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	; 0x30
 8006990:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006992:	e0ae      	b.n	8006af2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f2c0 80aa 	blt.w	8006af0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	3304      	adds	r3, #4
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fd ff7a 	bl	80048a6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff ff87 	bl	80068c8 <prvSampleTimeNow>
 80069ba:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b09      	cmp	r3, #9
 80069c0:	f200 8097 	bhi.w	8006af2 <prvProcessReceivedCommands+0x166>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <prvProcessReceivedCommands+0x40>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069f5 	.word	0x080069f5
 80069d4:	080069f5 	.word	0x080069f5
 80069d8:	08006a69 	.word	0x08006a69
 80069dc:	08006a7d 	.word	0x08006a7d
 80069e0:	08006ac7 	.word	0x08006ac7
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	080069f5 	.word	0x080069f5
 80069ec:	08006a69 	.word	0x08006a69
 80069f0:	08006a7d 	.word	0x08006a7d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	18d1      	adds	r1, r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a14:	f7ff ff78 	bl	8006908 <prvInsertTimerInActiveList>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d069      	beq.n	8006af2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a24:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d05e      	beq.n	8006af2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	2100      	movs	r1, #0
 8006a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a46:	f7ff fe21 	bl	800668c <xTimerGenericCommand>
 8006a4a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d14f      	bne.n	8006af2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	61bb      	str	r3, [r7, #24]
    }
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a6e:	f023 0301 	bic.w	r3, r3, #1
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a7a:	e03a      	b.n	8006af2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	617b      	str	r3, [r7, #20]
    }
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	18d1      	adds	r1, r2, r3
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ac0:	f7ff ff22 	bl	8006908 <prvInsertTimerInActiveList>
                        break;
 8006ac4:	e015      	b.n	8006af2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ad6:	f000 fbe9 	bl	80072ac <vPortFree>
 8006ada:	e00a      	b.n	8006af2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae2:	f023 0301 	bic.w	r3, r3, #1
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006aee:	e000      	b.n	8006af2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006af0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <prvProcessReceivedCommands+0x188>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f107 0108 	add.w	r1, r7, #8
 8006afa:	2200      	movs	r2, #0
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe f98f 	bl	8004e20 <xQueueReceive>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f47f af45 	bne.w	8006994 <prvProcessReceivedCommands+0x8>
        }
    }
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	3728      	adds	r7, #40	; 0x28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000d94 	.word	0x20000d94

08006b18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b1e:	e048      	b.n	8006bb2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b20:	4b2d      	ldr	r3, [pc, #180]	; (8006bd8 <prvSwitchTimerLists+0xc0>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2a:	4b2b      	ldr	r3, [pc, #172]	; (8006bd8 <prvSwitchTimerLists+0xc0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fd feb4 	bl	80048a6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d02e      	beq.n	8006bb2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d90e      	bls.n	8006b84 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b72:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <prvSwitchTimerLists+0xc0>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7fd fe59 	bl	8004834 <vListInsert>
 8006b82:	e016      	b.n	8006bb2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fd7c 	bl	800668c <xTimerGenericCommand>
 8006b94:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	603b      	str	r3, [r7, #0]
    }
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <prvSwitchTimerLists+0xc0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1b1      	bne.n	8006b20 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <prvSwitchTimerLists+0xc0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <prvSwitchTimerLists+0xc4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a04      	ldr	r2, [pc, #16]	; (8006bd8 <prvSwitchTimerLists+0xc0>)
 8006bc8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006bca:	4a04      	ldr	r2, [pc, #16]	; (8006bdc <prvSwitchTimerLists+0xc4>)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6013      	str	r3, [r2, #0]
    }
 8006bd0:	bf00      	nop
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	20000d8c 	.word	0x20000d8c
 8006bdc:	20000d90 	.word	0x20000d90

08006be0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006be4:	f000 f960 	bl	8006ea8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006be8:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <prvCheckForValidListAndQueue+0x54>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11d      	bne.n	8006c2c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006bf0:	4811      	ldr	r0, [pc, #68]	; (8006c38 <prvCheckForValidListAndQueue+0x58>)
 8006bf2:	f7fd fdce 	bl	8004792 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006bf6:	4811      	ldr	r0, [pc, #68]	; (8006c3c <prvCheckForValidListAndQueue+0x5c>)
 8006bf8:	f7fd fdcb 	bl	8004792 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <prvCheckForValidListAndQueue+0x60>)
 8006bfe:	4a0e      	ldr	r2, [pc, #56]	; (8006c38 <prvCheckForValidListAndQueue+0x58>)
 8006c00:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <prvCheckForValidListAndQueue+0x64>)
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <prvCheckForValidListAndQueue+0x5c>)
 8006c06:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006c08:	2200      	movs	r2, #0
 8006c0a:	210c      	movs	r1, #12
 8006c0c:	200a      	movs	r0, #10
 8006c0e:	f7fd fedd 	bl	80049cc <xQueueGenericCreate>
 8006c12:	4603      	mov	r3, r0
 8006c14:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <prvCheckForValidListAndQueue+0x54>)
 8006c16:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <prvCheckForValidListAndQueue+0x54>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c20:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <prvCheckForValidListAndQueue+0x54>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4908      	ldr	r1, [pc, #32]	; (8006c48 <prvCheckForValidListAndQueue+0x68>)
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fba0 	bl	800536c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c2c:	f000 f96c 	bl	8006f08 <vPortExitCritical>
    }
 8006c30:	bf00      	nop
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000d94 	.word	0x20000d94
 8006c38:	20000d64 	.word	0x20000d64
 8006c3c:	20000d78 	.word	0x20000d78
 8006c40:	20000d8c 	.word	0x20000d8c
 8006c44:	20000d90 	.word	0x20000d90
 8006c48:	080138d8 	.word	0x080138d8

08006c4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3b04      	subs	r3, #4
 8006c5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f023 0201 	bic.w	r2, r3, #1
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3b04      	subs	r3, #4
 8006c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006c7c:	4a0c      	ldr	r2, [pc, #48]	; (8006cb0 <pxPortInitialiseStack+0x64>)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3b14      	subs	r3, #20
 8006c86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3b04      	subs	r3, #4
 8006c92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f06f 0202 	mvn.w	r2, #2
 8006c9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3b20      	subs	r3, #32
 8006ca0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	08006cb5 	.word	0x08006cb5

08006cb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <prvTaskExitError+0x54>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d00a      	beq.n	8006cde <prvTaskExitError+0x2a>
        __asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	60fb      	str	r3, [r7, #12]
    }
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <prvTaskExitError+0x28>
        __asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60bb      	str	r3, [r7, #8]
    }
 8006cf0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006cf2:	bf00      	nop
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0fc      	beq.n	8006cf4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	2000003c 	.word	0x2000003c
 8006d0c:	00000000 	.word	0x00000000

08006d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <pxCurrentTCBConst2>)
 8006d12:	6819      	ldr	r1, [r3, #0]
 8006d14:	6808      	ldr	r0, [r1, #0]
 8006d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1a:	f380 8809 	msr	PSP, r0
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8811 	msr	BASEPRI, r0
 8006d2a:	4770      	bx	lr
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst2>:
 8006d30:	20000c60 	.word	0x20000c60
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006d38:	4808      	ldr	r0, [pc, #32]	; (8006d5c <prvPortStartFirstTask+0x24>)
 8006d3a:	6800      	ldr	r0, [r0, #0]
 8006d3c:	6800      	ldr	r0, [r0, #0]
 8006d3e:	f380 8808 	msr	MSP, r0
 8006d42:	f04f 0000 	mov.w	r0, #0
 8006d46:	f380 8814 	msr	CONTROL, r0
 8006d4a:	b662      	cpsie	i
 8006d4c:	b661      	cpsie	f
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	df00      	svc	0
 8006d58:	bf00      	nop
 8006d5a:	0000      	.short	0x0000
 8006d5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop

08006d64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d6a:	4b46      	ldr	r3, [pc, #280]	; (8006e84 <xPortStartScheduler+0x120>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a46      	ldr	r2, [pc, #280]	; (8006e88 <xPortStartScheduler+0x124>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10a      	bne.n	8006d8a <xPortStartScheduler+0x26>
        __asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	613b      	str	r3, [r7, #16]
    }
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d8a:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <xPortStartScheduler+0x120>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a3f      	ldr	r2, [pc, #252]	; (8006e8c <xPortStartScheduler+0x128>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d10a      	bne.n	8006daa <xPortStartScheduler+0x46>
        __asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	60fb      	str	r3, [r7, #12]
    }
 8006da6:	bf00      	nop
 8006da8:	e7fe      	b.n	8006da8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006daa:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <xPortStartScheduler+0x12c>)
 8006dac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <xPortStartScheduler+0x130>)
 8006dd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dd2:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <xPortStartScheduler+0x134>)
 8006dd4:	2207      	movs	r2, #7
 8006dd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dd8:	e009      	b.n	8006dee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006dda:	4b2f      	ldr	r3, [pc, #188]	; (8006e98 <xPortStartScheduler+0x134>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4a2d      	ldr	r2, [pc, #180]	; (8006e98 <xPortStartScheduler+0x134>)
 8006de2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df6:	2b80      	cmp	r3, #128	; 0x80
 8006df8:	d0ef      	beq.n	8006dda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dfa:	4b27      	ldr	r3, [pc, #156]	; (8006e98 <xPortStartScheduler+0x134>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1c3 0307 	rsb	r3, r3, #7
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d00a      	beq.n	8006e1c <xPortStartScheduler+0xb8>
        __asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60bb      	str	r3, [r7, #8]
    }
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <xPortStartScheduler+0x134>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <xPortStartScheduler+0x134>)
 8006e24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e26:	4b1c      	ldr	r3, [pc, #112]	; (8006e98 <xPortStartScheduler+0x134>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2e:	4a1a      	ldr	r2, [pc, #104]	; (8006e98 <xPortStartScheduler+0x134>)
 8006e30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006e3a:	4b18      	ldr	r3, [pc, #96]	; (8006e9c <xPortStartScheduler+0x138>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <xPortStartScheduler+0x138>)
 8006e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <xPortStartScheduler+0x138>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <xPortStartScheduler+0x138>)
 8006e4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006e52:	f000 f8db 	bl	800700c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <xPortStartScheduler+0x13c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006e5c:	f000 f8fa 	bl	8007054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e60:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <xPortStartScheduler+0x140>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a0f      	ldr	r2, [pc, #60]	; (8006ea4 <xPortStartScheduler+0x140>)
 8006e66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006e6c:	f7ff ff64 	bl	8006d38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006e70:	f7fe fdd6 	bl	8005a20 <vTaskSwitchContext>
    prvTaskExitError();
 8006e74:	f7ff ff1e 	bl	8006cb4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	e000ed00 	.word	0xe000ed00
 8006e88:	410fc271 	.word	0x410fc271
 8006e8c:	410fc270 	.word	0x410fc270
 8006e90:	e000e400 	.word	0xe000e400
 8006e94:	20000da0 	.word	0x20000da0
 8006e98:	20000da4 	.word	0x20000da4
 8006e9c:	e000ed20 	.word	0xe000ed20
 8006ea0:	2000003c 	.word	0x2000003c
 8006ea4:	e000ef34 	.word	0xe000ef34

08006ea8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
        __asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	607b      	str	r3, [r7, #4]
    }
 8006ec0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006ec2:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <vPortEnterCritical+0x58>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	4a0d      	ldr	r2, [pc, #52]	; (8006f00 <vPortEnterCritical+0x58>)
 8006eca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <vPortEnterCritical+0x58>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d10f      	bne.n	8006ef4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <vPortEnterCritical+0x5c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <vPortEnterCritical+0x4c>
        __asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	603b      	str	r3, [r7, #0]
    }
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <vPortEnterCritical+0x4a>
    }
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	2000003c 	.word	0x2000003c
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <vPortExitCritical+0x50>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <vPortExitCritical+0x24>
        __asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	607b      	str	r3, [r7, #4]
    }
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vPortExitCritical+0x50>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <vPortExitCritical+0x50>)
 8006f34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <vPortExitCritical+0x50>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <vPortExitCritical+0x42>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f383 8811 	msr	BASEPRI, r3
    }
 8006f48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	2000003c 	.word	0x2000003c
 8006f5c:	00000000 	.word	0x00000000

08006f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006f60:	f3ef 8009 	mrs	r0, PSP
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <pxCurrentTCBConst>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f01e 0f10 	tst.w	lr, #16
 8006f70:	bf08      	it	eq
 8006f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	6010      	str	r0, [r2, #0]
 8006f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f84:	f380 8811 	msr	BASEPRI, r0
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f7fe fd46 	bl	8005a20 <vTaskSwitchContext>
 8006f94:	f04f 0000 	mov.w	r0, #0
 8006f98:	f380 8811 	msr	BASEPRI, r0
 8006f9c:	bc09      	pop	{r0, r3}
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	6808      	ldr	r0, [r1, #0]
 8006fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa6:	f01e 0f10 	tst.w	lr, #16
 8006faa:	bf08      	it	eq
 8006fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fb0:	f380 8809 	msr	PSP, r0
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	f3af 8000 	nop.w

08006fc0 <pxCurrentTCBConst>:
 8006fc0:	20000c60 	.word	0x20000c60
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
        __asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	607b      	str	r3, [r7, #4]
    }
 8006fe0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006fe2:	f7fe fc73 	bl	80058cc <xTaskIncrementTick>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <SysTick_Handler+0x40>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
    }
 8006ffe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <vPortSetupTimerInterrupt+0x34>)
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <vPortSetupTimerInterrupt+0x38>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <vPortSetupTimerInterrupt+0x3c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <vPortSetupTimerInterrupt+0x40>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	099b      	lsrs	r3, r3, #6
 8007028:	4a09      	ldr	r2, [pc, #36]	; (8007050 <vPortSetupTimerInterrupt+0x44>)
 800702a:	3b01      	subs	r3, #1
 800702c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800702e:	4b04      	ldr	r3, [pc, #16]	; (8007040 <vPortSetupTimerInterrupt+0x34>)
 8007030:	2207      	movs	r2, #7
 8007032:	601a      	str	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	e000e010 	.word	0xe000e010
 8007044:	e000e018 	.word	0xe000e018
 8007048:	20000000 	.word	0x20000000
 800704c:	10624dd3 	.word	0x10624dd3
 8007050:	e000e014 	.word	0xe000e014

08007054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007064 <vPortEnableVFP+0x10>
 8007058:	6801      	ldr	r1, [r0, #0]
 800705a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800705e:	6001      	str	r1, [r0, #0]
 8007060:	4770      	bx	lr
 8007062:	0000      	.short	0x0000
 8007064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop

0800706c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007072:	f3ef 8305 	mrs	r3, IPSR
 8007076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d914      	bls.n	80070a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800707e:	4a17      	ldr	r2, [pc, #92]	; (80070dc <vPortValidateInterruptPriority+0x70>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007088:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <vPortValidateInterruptPriority+0x74>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	7afa      	ldrb	r2, [r7, #11]
 800708e:	429a      	cmp	r2, r3
 8007090:	d20a      	bcs.n	80070a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	607b      	str	r3, [r7, #4]
    }
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070a8:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <vPortValidateInterruptPriority+0x78>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <vPortValidateInterruptPriority+0x7c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d90a      	bls.n	80070ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	603b      	str	r3, [r7, #0]
    }
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <vPortValidateInterruptPriority+0x60>
    }
 80070ce:	bf00      	nop
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	e000e3f0 	.word	0xe000e3f0
 80070e0:	20000da0 	.word	0x20000da0
 80070e4:	e000ed0c 	.word	0xe000ed0c
 80070e8:	20000da4 	.word	0x20000da4

080070ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80070f8:	f7fe fb2e 	bl	8005758 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80070fc:	4b65      	ldr	r3, [pc, #404]	; (8007294 <pvPortMalloc+0x1a8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007104:	f000 f934 	bl	8007370 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007108:	4b63      	ldr	r3, [pc, #396]	; (8007298 <pvPortMalloc+0x1ac>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	f040 80a7 	bne.w	8007264 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d02d      	beq.n	8007178 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800711c:	2208      	movs	r2, #8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d227      	bcs.n	8007178 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007128:	2208      	movs	r2, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d021      	beq.n	800717e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f023 0307 	bic.w	r3, r3, #7
 8007140:	3308      	adds	r3, #8
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d214      	bcs.n	8007172 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f023 0307 	bic.w	r3, r3, #7
 800714e:	3308      	adds	r3, #8
 8007150:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	2b00      	cmp	r3, #0
 800715a:	d010      	beq.n	800717e <pvPortMalloc+0x92>
        __asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	617b      	str	r3, [r7, #20]
    }
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007176:	e002      	b.n	800717e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	e000      	b.n	8007180 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800717e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d06e      	beq.n	8007264 <pvPortMalloc+0x178>
 8007186:	4b45      	ldr	r3, [pc, #276]	; (800729c <pvPortMalloc+0x1b0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d869      	bhi.n	8007264 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007190:	4b43      	ldr	r3, [pc, #268]	; (80072a0 <pvPortMalloc+0x1b4>)
 8007192:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007194:	4b42      	ldr	r3, [pc, #264]	; (80072a0 <pvPortMalloc+0x1b4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800719a:	e004      	b.n	80071a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d903      	bls.n	80071b8 <pvPortMalloc+0xcc>
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f1      	bne.n	800719c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80071b8:	4b36      	ldr	r3, [pc, #216]	; (8007294 <pvPortMalloc+0x1a8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	429a      	cmp	r2, r3
 80071c0:	d050      	beq.n	8007264 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2208      	movs	r2, #8
 80071c8:	4413      	add	r3, r2
 80071ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	2308      	movs	r3, #8
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d91f      	bls.n	8007224 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4413      	add	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f003 0307 	and.w	r3, r3, #7
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <pvPortMalloc+0x120>
        __asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	613b      	str	r3, [r7, #16]
    }
 8007208:	bf00      	nop
 800720a:	e7fe      	b.n	800720a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	1ad2      	subs	r2, r2, r3
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800721e:	69b8      	ldr	r0, [r7, #24]
 8007220:	f000 f908 	bl	8007434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <pvPortMalloc+0x1b0>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	4a1b      	ldr	r2, [pc, #108]	; (800729c <pvPortMalloc+0x1b0>)
 8007230:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007232:	4b1a      	ldr	r3, [pc, #104]	; (800729c <pvPortMalloc+0x1b0>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b1b      	ldr	r3, [pc, #108]	; (80072a4 <pvPortMalloc+0x1b8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d203      	bcs.n	8007246 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800723e:	4b17      	ldr	r3, [pc, #92]	; (800729c <pvPortMalloc+0x1b0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <pvPortMalloc+0x1b8>)
 8007244:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	4b13      	ldr	r3, [pc, #76]	; (8007298 <pvPortMalloc+0x1ac>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	431a      	orrs	r2, r3
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800725a:	4b13      	ldr	r3, [pc, #76]	; (80072a8 <pvPortMalloc+0x1bc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	4a11      	ldr	r2, [pc, #68]	; (80072a8 <pvPortMalloc+0x1bc>)
 8007262:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007264:	f7fe fa86 	bl	8005774 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <pvPortMalloc+0x19c>
        __asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	60fb      	str	r3, [r7, #12]
    }
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <pvPortMalloc+0x19a>
    return pvReturn;
 8007288:	69fb      	ldr	r3, [r7, #28]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3728      	adds	r7, #40	; 0x28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	2000d5b0 	.word	0x2000d5b0
 8007298:	2000d5c4 	.word	0x2000d5c4
 800729c:	2000d5b4 	.word	0x2000d5b4
 80072a0:	2000d5a8 	.word	0x2000d5a8
 80072a4:	2000d5b8 	.word	0x2000d5b8
 80072a8:	2000d5bc 	.word	0x2000d5bc

080072ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d04d      	beq.n	800735a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80072be:	2308      	movs	r3, #8
 80072c0:	425b      	negs	r3, r3
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b24      	ldr	r3, [pc, #144]	; (8007364 <vPortFree+0xb8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10a      	bne.n	80072f0 <vPortFree+0x44>
        __asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	60fb      	str	r3, [r7, #12]
    }
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <vPortFree+0x62>
        __asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	60bb      	str	r3, [r7, #8]
    }
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	4b14      	ldr	r3, [pc, #80]	; (8007364 <vPortFree+0xb8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4013      	ands	r3, r2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01e      	beq.n	800735a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d11a      	bne.n	800735a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <vPortFree+0xb8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	43db      	mvns	r3, r3
 800732e:	401a      	ands	r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007334:	f7fe fa10 	bl	8005758 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <vPortFree+0xbc>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4413      	add	r3, r2
 8007342:	4a09      	ldr	r2, [pc, #36]	; (8007368 <vPortFree+0xbc>)
 8007344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007346:	6938      	ldr	r0, [r7, #16]
 8007348:	f000 f874 	bl	8007434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <vPortFree+0xc0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	4a06      	ldr	r2, [pc, #24]	; (800736c <vPortFree+0xc0>)
 8007354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007356:	f7fe fa0d 	bl	8005774 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	2000d5c4 	.word	0x2000d5c4
 8007368:	2000d5b4 	.word	0x2000d5b4
 800736c:	2000d5c0 	.word	0x2000d5c0

08007370 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007376:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800737a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <prvHeapInit+0xac>)
 800737e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3307      	adds	r3, #7
 800738e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0307 	bic.w	r3, r3, #7
 8007396:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	4a1f      	ldr	r2, [pc, #124]	; (800741c <prvHeapInit+0xac>)
 80073a0:	4413      	add	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073a8:	4a1d      	ldr	r2, [pc, #116]	; (8007420 <prvHeapInit+0xb0>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80073ae:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <prvHeapInit+0xb0>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	4413      	add	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80073bc:	2208      	movs	r2, #8
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a15      	ldr	r2, [pc, #84]	; (8007424 <prvHeapInit+0xb4>)
 80073d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <prvHeapInit+0xb4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <prvHeapInit+0xb4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <prvHeapInit+0xb4>)
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <prvHeapInit+0xb8>)
 80073fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a09      	ldr	r2, [pc, #36]	; (800742c <prvHeapInit+0xbc>)
 8007406:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <prvHeapInit+0xc0>)
 800740a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800740e:	601a      	str	r2, [r3, #0]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	20000da8 	.word	0x20000da8
 8007420:	2000d5a8 	.word	0x2000d5a8
 8007424:	2000d5b0 	.word	0x2000d5b0
 8007428:	2000d5b8 	.word	0x2000d5b8
 800742c:	2000d5b4 	.word	0x2000d5b4
 8007430:	2000d5c4 	.word	0x2000d5c4

08007434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800743c:	4b28      	ldr	r3, [pc, #160]	; (80074e0 <prvInsertBlockIntoFreeList+0xac>)
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e002      	b.n	8007448 <prvInsertBlockIntoFreeList+0x14>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d8f7      	bhi.n	8007442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d108      	bne.n	8007476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	441a      	add	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d118      	bne.n	80074bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d00d      	beq.n	80074b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	441a      	add	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e008      	b.n	80074c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <prvInsertBlockIntoFreeList+0xb0>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e003      	b.n	80074c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d002      	beq.n	80074d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	2000d5a8 	.word	0x2000d5a8
 80074e4:	2000d5b0 	.word	0x2000d5b0

080074e8 <findShorterWay>:
int findShorterWay(char terminalGrid[7][7],
				   char Gridcopy[7][7],
				   float matrixCosts[7][7][6],
				   AStar_distancesHandler *parameters,
				   costChangesAndPos_t *ptrChanges,
				   int shorterWay[20][2]){
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	f507 7404 	add.w	r4, r7, #528	; 0x210
 80074f4:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 80074f8:	6020      	str	r0, [r4, #0]
 80074fa:	f507 7004 	add.w	r0, r7, #528	; 0x210
 80074fe:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 8007502:	6001      	str	r1, [r0, #0]
 8007504:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007508:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 800750c:	600a      	str	r2, [r1, #0]
 800750e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007512:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8007516:	6013      	str	r3, [r2, #0]

	writeMsg(&handlerAstarUsart, "\n______________Comencemos el viaje_____________\n");
 8007518:	49c8      	ldr	r1, [pc, #800]	; (800783c <findShorterWay+0x354>)
 800751a:	48c9      	ldr	r0, [pc, #804]	; (8007840 <findShorterWay+0x358>)
 800751c:	f005 ffda 	bl	800d4d4 <writeMsg>

	// seteamos las variables locales a usar
	char nineSlotsMatriz[3][3] = {0}; // matriz que tomara una parte de redeableGrid para analisis
 8007520:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	721a      	strb	r2, [r3, #8]
	uint8_t shorterWayFound = RESET;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t i = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	uint8_t j = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	int position[2];
	uint8_t numberOfPositions = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
	uint8_t counter = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t counterStudy = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
	//matriz donde se almacenaran en orden ascendente los F cost de las posiciones en estado de Open, esta si tendra un valor maximo y dos columnas, donde
	// Se almacenara el F cost en la primera y el Hcost en la segunda,
	float decisionMatrix[30][4] = {0};
 8007550:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007554:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8007558:	4618      	mov	r0, r3
 800755a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800755e:	461a      	mov	r2, r3
 8007560:	2100      	movs	r1, #0
 8007562:	f006 fb45 	bl	800dbf0 <memset>



	// Primero seteamos dentro de los valores de los parametros cuales son los valores de las filas y las columnas
	parameters->numberOfRows    = getRows(terminalGrid);
 8007566:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800756a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	f001 fa9c 	bl	8008aac <getRows>
 8007574:	4603      	mov	r3, r0
 8007576:	461a      	mov	r2, r3
 8007578:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800757c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	721a      	strb	r2, [r3, #8]
	parameters->numberOfColumns = getColums(terminalGrid);
 8007584:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007588:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f001 fab1 	bl	8008af4 <getColums>
 8007592:	4603      	mov	r3, r0
 8007594:	461a      	mov	r2, r3
 8007596:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800759a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	725a      	strb	r2, [r3, #9]

	//Segundo construimos nuestra matriz dinamicamente repartida
	buildMatrixCopy(parameters, terminalGrid, Gridcopy);
 80075a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075a6:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80075aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075ae:	f5a3 7101 	sub.w	r1, r3, #516	; 0x204
 80075b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075b6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80075ba:	6812      	ldr	r2, [r2, #0]
 80075bc:	6809      	ldr	r1, [r1, #0]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	f001 fa21 	bl	8008a06 <buildMatrixCopy>
	//Variables que dependen del analisis respectivo,y el H cost que es la heuristica el cual es un valor
	// fijo Se tendra entonces una matriz de arrays donde se almacenaran
	// los valores como siguen, [Gcost, Fcost, Hcost]

    //Cuarto, seteamos la matriz heuristica, la cual es la ultima matriz de el bloque de tres de la matriz de costos
    if (setHeuristic(parameters, ptrChanges, matrixCosts, Gridcopy)){
 80075c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075c8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80075cc:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80075d0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80075d4:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80075d8:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80075e4:	6800      	ldr	r0, [r0, #0]
 80075e6:	f000 ff89 	bl	80084fc <setHeuristic>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <findShorterWay+0x12e>
    	// Si estamos aqui todo salio correctamente, el programa puede seguir su curso
    	__NOP();
 80075f0:	bf00      	nop
    	return 0;
    }

    // Seteada la heuristica AQUI COMIENZA EL ALGORITMO A TRABAJAR, seteamos el punto de inicio y lo guardamos dentro de la estructura
    // correspondiente
    if(findStart(Gridcopy, parameters, ptrChanges)){
 80075f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075f6:	f5a3 7104 	sub.w	r1, r3, #528	; 0x210
 80075fa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80075fe:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007602:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8007606:	6809      	ldr	r1, [r1, #0]
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f001 f990 	bl	800892e <findStart>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01e      	beq.n	8007652 <findShorterWay+0x16a>
 8007614:	e002      	b.n	800761c <findShorterWay+0x134>
    	return 0;
 8007616:	2300      	movs	r3, #0
 8007618:	f000 beb6 	b.w	8008388 <findShorterWay+0xea0>
    	// Si estamos aqui es porque se encontro el punto de inicio con exito
    	__NOP();
 800761c:	bf00      	nop
    // Comenzamos analizando los vecinos del punto de inicio, calculando para cada uno de ellos (incluyendo el punto de inicio) el Gcosto
    // y el Fcost, de todos ellos al final se selecciona aquel que tenga el F cost mas pequeño, del siguiente while no se sale hasta que se tenga el
    // Array de patents correspondiente a la ruta mas corta

    //guardamos en la posicion de analisis la posicion de start
    ptrChanges->posAnalisis[0] = ptrChanges->startPos[0];
 800761e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007624:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007628:	609a      	str	r2, [r3, #8]
    ptrChanges->posAnalisis[1] = ptrChanges->startPos[1];
 800762a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800762e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007630:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007634:	60da      	str	r2, [r3, #12]
    // Definimos tambien el estado de abierto
    ptrChanges->posOpen[0] =  ptrChanges->startPos[0];
 8007636:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800763a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800763c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007640:	611a      	str	r2, [r3, #16]
    ptrChanges->posOpen[1] =  ptrChanges->startPos[1];
 8007642:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007648:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800764c:	615a      	str	r2, [r3, #20]


    while(!shorterWayFound){
 800764e:	f000 bdc1 	b.w	80081d4 <findShorterWay+0xcec>
    	return 0;
 8007652:	2300      	movs	r3, #0
 8007654:	f000 be98 	b.w	8008388 <findShorterWay+0xea0>

    	// este while actuara como un while de recorrido lineal, donde se busca analizar las posiciones i,j de los aledaños recorriendo cada punto linealmente
    	// al punto de analisis

    	//Actualizamos el punto de analisis para seguir analizando a partir del punto de análisis siguiente
    	ptrChanges->posAnalisis[0] = ptrChanges->posOpen[0];
 8007658:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007662:	609a      	str	r2, [r3, #8]
    	ptrChanges->posAnalisis[1] = ptrChanges->posOpen[1];
 8007664:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007668:	695a      	ldr	r2, [r3, #20]
 800766a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800766e:	60da      	str	r2, [r3, #12]

    	// guardamos la matriz 3x3 de redeableGrid para analisis, para posiciones no correctas se colocan tales posiciones en 0 tipo char
    	// Y para posiciones ya analizadas se coloca una D de done.
    	for(i = 0; i < 3; i++){
 8007670:	2300      	movs	r3, #0
 8007672:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007676:	e09a      	b.n	80077ae <findShorterWay+0x2c6>
    		for (j = 0; j < 3; j++){
 8007678:	2300      	movs	r3, #0
 800767a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800767e:	e08c      	b.n	800779a <findShorterWay+0x2b2>

    			if 	  ((ptrChanges->posAnalisis[0] + i - 1) < 0
 8007680:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800768a:	4413      	add	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	dd07      	ble.n	80076a0 <findShorterWay+0x1b8>
    			    || (ptrChanges->posAnalisis[1] + j - 1) < 0) {
 8007690:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800769a:	4413      	add	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	dc0e      	bgt.n	80076be <findShorterWay+0x1d6>
    				// El primer caso seria cuando el puntero que estudia la matriz esta por fuera del rango , especificamente por detras del rango
    				// donde el indice seria negativo
    				nineSlotsMatriz[i][j] = '0';
 80076a0:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80076a4:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80076a8:	4613      	mov	r3, r2
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80076b2:	443b      	add	r3, r7
 80076b4:	440b      	add	r3, r1
 80076b6:	3b18      	subs	r3, #24
 80076b8:	2230      	movs	r2, #48	; 0x30
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e068      	b.n	8007790 <findShorterWay+0x2a8>

    			}else if ((ptrChanges->posAnalisis[0] + i - 1) > parameters->numberOfRows - 1
 80076be:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80076c8:	4413      	add	r3, r2
 80076ca:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80076ce:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	7a12      	ldrb	r2, [r2, #8]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	dc0d      	bgt.n	80076f6 <findShorterWay+0x20e>
    				||    (ptrChanges->posAnalisis[1] + j - 1) > parameters->numberOfColumns - 1){
 80076da:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80076e4:	4413      	add	r3, r2
 80076e6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80076ea:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80076ee:	6812      	ldr	r2, [r2, #0]
 80076f0:	7a52      	ldrb	r2, [r2, #9]
 80076f2:	4293      	cmp	r3, r2
 80076f4:	dd0e      	ble.n	8007714 <findShorterWay+0x22c>
    				// El segundo caso seria cuando el puntero que estudia la matriz esta por fuera del rango, especificamente por delante
    				// del rango donde el indice seria mayor al limite superior del numero de filas o columnas restado uno.
    				nineSlotsMatriz[i][j] = '0';
 80076f6:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80076fa:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80076fe:	4613      	mov	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4413      	add	r3, r2
 8007704:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007708:	443b      	add	r3, r7
 800770a:	440b      	add	r3, r1
 800770c:	3b18      	subs	r3, #24
 800770e:	2230      	movs	r2, #48	; 0x30
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e03d      	b.n	8007790 <findShorterWay+0x2a8>
    			}else if(i == 1 && j == 1){
 8007714:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007718:	2b01      	cmp	r3, #1
 800771a:	d112      	bne.n	8007742 <findShorterWay+0x25a>
 800771c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10e      	bne.n	8007742 <findShorterWay+0x25a>
    				// Este caso corresponde con el punto de analisis , este caso no lo queremos estudiar ya que ya estaria estudiado como tal,
    				// queremos es solo estudiar sus aledanios, por lo que en esta posición colocaremos una 'P' como de Point
    				nineSlotsMatriz[i][j] = 'P';
 8007724:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007728:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800772c:	4613      	mov	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007736:	443b      	add	r3, r7
 8007738:	440b      	add	r3, r1
 800773a:	3b18      	subs	r3, #24
 800773c:	2250      	movs	r2, #80	; 0x50
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e026      	b.n	8007790 <findShorterWay+0x2a8>
    			}else{
    				// Este ultimo caso donde no se cumple lo anterior  simplemente copiamos exactamente lo mismo que aparece en la matriz de caracteres
    				nineSlotsMatriz[i][j] = Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1];
 8007742:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800774c:	4413      	add	r3, r2
 800774e:	461a      	mov	r2, r3
 8007750:	4613      	mov	r3, r2
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	3b07      	subs	r3, #7
 8007758:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800775c:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	18d0      	adds	r0, r2, r3
 8007764:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800776e:	4413      	add	r3, r2
 8007770:	3b01      	subs	r3, #1
 8007772:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007776:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 800777a:	5cc0      	ldrb	r0, [r0, r3]
 800777c:	4613      	mov	r3, r2
 800777e:	005b      	lsls	r3, r3, #1
 8007780:	4413      	add	r3, r2
 8007782:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007786:	443b      	add	r3, r7
 8007788:	440b      	add	r3, r1
 800778a:	3b18      	subs	r3, #24
 800778c:	4602      	mov	r2, r0
 800778e:	701a      	strb	r2, [r3, #0]
    		for (j = 0; j < 3; j++){
 8007790:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007794:	3301      	adds	r3, #1
 8007796:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800779a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800779e:	2b02      	cmp	r3, #2
 80077a0:	f67f af6e 	bls.w	8007680 <findShorterWay+0x198>
    	for(i = 0; i < 3; i++){
 80077a4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80077a8:	3301      	adds	r3, #1
 80077aa:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80077ae:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	f67f af60 	bls.w	8007678 <findShorterWay+0x190>
    	// Esta matriz, Se estudiaran los siguientes casos:

    	// Imprimimos la matriz a estudiar

    	// Imprimimos el mensaje de el estudio en el que estamos
    	sprintf (buffer,"\n__________ESTUDIO NUMERO %u__________\n", counterStudy);
 80077b8:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 80077bc:	461a      	mov	r2, r3
 80077be:	4921      	ldr	r1, [pc, #132]	; (8007844 <findShorterWay+0x35c>)
 80077c0:	4821      	ldr	r0, [pc, #132]	; (8007848 <findShorterWay+0x360>)
 80077c2:	f006 ff77 	bl	800e6b4 <siprintf>
    	writeMsg(&handlerAstarUsart, buffer);
 80077c6:	4920      	ldr	r1, [pc, #128]	; (8007848 <findShorterWay+0x360>)
 80077c8:	481d      	ldr	r0, [pc, #116]	; (8007840 <findShorterWay+0x358>)
 80077ca:	f005 fe83 	bl	800d4d4 <writeMsg>

    	// Imprimimos la matriz 3x3 a estudiar
    	for(i = 0; i < 3; i++){
 80077ce:	2300      	movs	r3, #0
 80077d0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80077d4:	e026      	b.n	8007824 <findShorterWay+0x33c>
			for (j = 0; j < 3; j++){
 80077d6:	2300      	movs	r3, #0
 80077d8:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80077dc:	e015      	b.n	800780a <findShorterWay+0x322>
				writeChar(&handlerAstarUsart, nineSlotsMatriz[i][j]);
 80077de:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80077e2:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80077f0:	443b      	add	r3, r7
 80077f2:	440b      	add	r3, r1
 80077f4:	3b18      	subs	r3, #24
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	4619      	mov	r1, r3
 80077fa:	4811      	ldr	r0, [pc, #68]	; (8007840 <findShorterWay+0x358>)
 80077fc:	f005 fe52 	bl	800d4a4 <writeChar>
			for (j = 0; j < 3; j++){
 8007800:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007804:	3301      	adds	r3, #1
 8007806:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800780a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800780e:	2b02      	cmp	r3, #2
 8007810:	d9e5      	bls.n	80077de <findShorterWay+0x2f6>
			}
			writeChar(&handlerAstarUsart, '\r');
 8007812:	210d      	movs	r1, #13
 8007814:	480a      	ldr	r0, [pc, #40]	; (8007840 <findShorterWay+0x358>)
 8007816:	f005 fe45 	bl	800d4a4 <writeChar>
    	for(i = 0; i < 3; i++){
 800781a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800781e:	3301      	adds	r3, #1
 8007820:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007824:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007828:	2b02      	cmp	r3, #2
 800782a:	d9d4      	bls.n	80077d6 <findShorterWay+0x2ee>
    	}

    	writeChar(&handlerAstarUsart, '\r');
 800782c:	210d      	movs	r1, #13
 800782e:	4804      	ldr	r0, [pc, #16]	; (8007840 <findShorterWay+0x358>)
 8007830:	f005 fe38 	bl	800d4a4 <writeChar>

    	// Imprimimos el estado actual de la matriz copia
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8007834:	2300      	movs	r3, #0
 8007836:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 800783a:	e01b      	b.n	8007874 <findShorterWay+0x38c>
 800783c:	080138e0 	.word	0x080138e0
 8007840:	2000d5c8 	.word	0x2000d5c8
 8007844:	08013914 	.word	0x08013914
 8007848:	2000d674 	.word	0x2000d674
    			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 800784c:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8007850:	4613      	mov	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800785a:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	4413      	add	r3, r2
 8007862:	4619      	mov	r1, r3
 8007864:	48b2      	ldr	r0, [pc, #712]	; (8007b30 <findShorterWay+0x648>)
 8007866:	f005 fe35 	bl	800d4d4 <writeMsg>
    	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800786a:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 800786e:	3301      	adds	r3, #1
 8007870:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
 8007874:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007878:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	7a1b      	ldrb	r3, [r3, #8]
 8007880:	f897 2209 	ldrb.w	r2, [r7, #521]	; 0x209
 8007884:	429a      	cmp	r2, r3
 8007886:	d3e1      	bcc.n	800784c <findShorterWay+0x364>
		}
    	// Escribimos enter para tener todo bien espaciado
    	writeChar(&handlerAstarUsart, '\r');
 8007888:	210d      	movs	r1, #13
 800788a:	48a9      	ldr	r0, [pc, #676]	; (8007b30 <findShorterWay+0x648>)
 800788c:	f005 fe0a 	bl	800d4a4 <writeChar>


    	for(i = 0; i < 3; i++){
 8007890:	2300      	movs	r3, #0
 8007892:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007896:	e275      	b.n	8007d84 <findShorterWay+0x89c>
			for (j = 0; j < 3; j++){
 8007898:	2300      	movs	r3, #0
 800789a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800789e:	e261      	b.n	8007d64 <findShorterWay+0x87c>
				switch (nineSlotsMatriz[i][j]) {
 80078a0:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80078a4:	f897 120d 	ldrb.w	r1, [r7, #525]	; 0x20d
 80078a8:	4613      	mov	r3, r2
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078b2:	443b      	add	r3, r7
 80078b4:	440b      	add	r3, r1
 80078b6:	3b18      	subs	r3, #24
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b73      	cmp	r3, #115	; 0x73
 80078bc:	d074      	beq.n	80079a8 <findShorterWay+0x4c0>
 80078be:	2b73      	cmp	r3, #115	; 0x73
 80078c0:	f300 8245 	bgt.w	8007d4e <findShorterWay+0x866>
 80078c4:	2b50      	cmp	r3, #80	; 0x50
 80078c6:	dc65      	bgt.n	8007994 <findShorterWay+0x4ac>
 80078c8:	2b23      	cmp	r3, #35	; 0x23
 80078ca:	f2c0 8240 	blt.w	8007d4e <findShorterWay+0x866>
 80078ce:	3b23      	subs	r3, #35	; 0x23
 80078d0:	2b2d      	cmp	r3, #45	; 0x2d
 80078d2:	f200 823c 	bhi.w	8007d4e <findShorterWay+0x866>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <findShorterWay+0x3f4>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	0800799d 	.word	0x0800799d
 80078e0:	08007d4f 	.word	0x08007d4f
 80078e4:	08007d4f 	.word	0x08007d4f
 80078e8:	08007d4f 	.word	0x08007d4f
 80078ec:	08007d4f 	.word	0x08007d4f
 80078f0:	08007d4f 	.word	0x08007d4f
 80078f4:	08007d4f 	.word	0x08007d4f
 80078f8:	08007b35 	.word	0x08007b35
 80078fc:	08007d4f 	.word	0x08007d4f
 8007900:	08007d4f 	.word	0x08007d4f
 8007904:	08007d4f 	.word	0x08007d4f
 8007908:	08007d4f 	.word	0x08007d4f
 800790c:	08007d4f 	.word	0x08007d4f
 8007910:	080079a5 	.word	0x080079a5
 8007914:	08007d4f 	.word	0x08007d4f
 8007918:	08007d4f 	.word	0x08007d4f
 800791c:	08007d4f 	.word	0x08007d4f
 8007920:	08007d4f 	.word	0x08007d4f
 8007924:	08007d4f 	.word	0x08007d4f
 8007928:	08007d4f 	.word	0x08007d4f
 800792c:	08007d4f 	.word	0x08007d4f
 8007930:	08007d4f 	.word	0x08007d4f
 8007934:	08007d4f 	.word	0x08007d4f
 8007938:	08007d4f 	.word	0x08007d4f
 800793c:	08007d4f 	.word	0x08007d4f
 8007940:	08007d4f 	.word	0x08007d4f
 8007944:	08007d4f 	.word	0x08007d4f
 8007948:	08007d4f 	.word	0x08007d4f
 800794c:	08007d4f 	.word	0x08007d4f
 8007950:	08007d4f 	.word	0x08007d4f
 8007954:	08007d4f 	.word	0x08007d4f
 8007958:	08007d4f 	.word	0x08007d4f
 800795c:	08007d4f 	.word	0x08007d4f
 8007960:	080079a1 	.word	0x080079a1
 8007964:	08007d4f 	.word	0x08007d4f
 8007968:	08007d4f 	.word	0x08007d4f
 800796c:	08007d4f 	.word	0x08007d4f
 8007970:	08007d4f 	.word	0x08007d4f
 8007974:	08007d4f 	.word	0x08007d4f
 8007978:	08007d4f 	.word	0x08007d4f
 800797c:	08007d4f 	.word	0x08007d4f
 8007980:	08007d4f 	.word	0x08007d4f
 8007984:	08007d4f 	.word	0x08007d4f
 8007988:	08007d4f 	.word	0x08007d4f
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079ad 	.word	0x080079ad
 8007994:	2b65      	cmp	r3, #101	; 0x65
 8007996:	f000 81c3 	beq.w	8007d20 <findShorterWay+0x838>
 800799a:	e1d8      	b.n	8007d4e <findShorterWay+0x866>
					case '#':{
						// El primer caso seria cuando el puntero Que estudia a la matriz 3x3 corresponde con un obstaculo, tal pisicion simpkemente se
						//ignora
						// No se hace nada ya que una posicion se obstaculo no se analiza
						__NOP();
 800799c:	bf00      	nop
						break;
 800799e:	e1d8      	b.n	8007d52 <findShorterWay+0x86a>
					}case 'D':{
						// El segundo caso seria cuando el puntero que estudia la matriz corresponde con un punto ya cerrado o ya pasado a la lista de
						// posiciones ya analizadas, por lo que tampoco se hace nada con este caso,
						__NOP();
 80079a0:	bf00      	nop
						break;
 80079a2:	e1d6      	b.n	8007d52 <findShorterWay+0x86a>
					}case '0':{
						// El tercer caso seria cuando el puntero que estudia la matriz corresponde con un punto 0 de tipo char que indica que
						// es una posicion por fuera del rango, por lo que tampoco se hace nada con este caso,
						__NOP();
 80079a4:	bf00      	nop
						break;
 80079a6:	e1d4      	b.n	8007d52 <findShorterWay+0x86a>
					}case 's':{
						// El cuarto caso seria cuando el puntero señala la posicion de start por lo que tampoco se hace nada con este caso,
						__NOP();
 80079a8:	bf00      	nop
						break;
 80079aa:	e1d2      	b.n	8007d52 <findShorterWay+0x86a>
					}case 'P':{
						// El quinto caso seria cuando el puntero señala la posicion de analisis, dentro del analisis no queremos
						// que este se analice a si mismo, por lo que ignoramos este punto, solo nos intrresan sus aledanios
						__NOP();
 80079ac:	bf00      	nop
						break;
 80079ae:	e1d0      	b.n	8007d52 <findShorterWay+0x86a>
					}case 'O':{
						// El Sexto caso nos encontramos con un estado Open , por lo que tenemos que recalcular para el punto de
						// analisis el Gcost y el Fcost
						position[0] = i;
 80079b0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80079b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 80079b8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80079bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						// Como la posicion estudiada esta en estado de open , se debe volver a calcular el G cost y el fcost correspondiente
						// a la posicion opened con respecto al punto de analisis
						ptrChanges->Fcost = setFcost(parameters, ptrChanges, position, matrixCosts);
 80079c0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80079c4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80079c8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80079cc:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80079d0:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	f000 ff3b 	bl	8008856 <setFcost>
 80079e0:	eef0 7a40 	vmov.f32	s15, s0
 80079e4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80079e8:	edc3 7a01 	vstr	s15, [r3, #4]
						// Estudiamos si el nuevo FCost es mayor menor o igual al Fcost que ya tiene el estado abierto
						if (ptrChanges->Fcost >= matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]){
 80079ec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80079f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80079f4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80079fe:	4413      	add	r3, r2
 8007a00:	461a      	mov	r2, r3
 8007a02:	23a8      	movs	r3, #168	; 0xa8
 8007a04:	fb02 f303 	mul.w	r3, r2, r3
 8007a08:	3ba8      	subs	r3, #168	; 0xa8
 8007a0a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007a0e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	18d1      	adds	r1, r2, r3
 8007a16:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007a20:	4413      	add	r3, r2
 8007a22:	1e5a      	subs	r2, r3, #1
 8007a24:	4613      	mov	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	440b      	add	r3, r1
 8007a2e:	3304      	adds	r3, #4
 8007a30:	edd3 7a00 	vldr	s15, [r3]
 8007a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3c:	db01      	blt.n	8007a42 <findShorterWay+0x55a>
							// Si el Fcost es mayor o igual a el anteriormente calculado, Significa que el Gcost calculado es el mismo o mayor,
							//por lo que no se actualiza ni el G cost y el F cost ni el parent
							__NOP();
 8007a3e:	bf00      	nop
							// Si si actualizamos la posicion abierta respectiva, tambien se debe actualizar en la matriz de decisión el F cost
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs

						}
						break;
 8007a40:	e187      	b.n	8007d52 <findShorterWay+0x86a>
							updateGcost(parameters, ptrChanges, position, matrixCosts);
 8007a42:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007a46:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007a4a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007a4e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007a52:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007a5c:	6800      	ldr	r0, [r0, #0]
 8007a5e:	f000 fcf3 	bl	8008448 <updateGcost>
							updateFcost(parameters, ptrChanges, position, matrixCosts);
 8007a62:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007a66:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007a6a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007a6e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007a72:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007a7c:	6800      	ldr	r0, [r0, #0]
 8007a7e:	f000 fd0f 	bl	80084a0 <updateFcost>
							updateParent(ptrChanges, position, matrixCosts);
 8007a82:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007a86:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007a8a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007a94:	f000 fc84 	bl	80083a0 <updateParent>
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007a98:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007aa2:	4413      	add	r3, r2
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	23a8      	movs	r3, #168	; 0xa8
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
 8007aac:	3ba8      	subs	r3, #168	; 0xa8
 8007aae:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007ab2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	18d0      	adds	r0, r2, r3
 8007aba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ac4:	4413      	add	r3, r2
 8007ac6:	1e5a      	subs	r2, r3, #1
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007ac8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007acc:	6899      	ldr	r1, [r3, #8]
 8007ace:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ad2:	440b      	add	r3, r1
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	23a8      	movs	r3, #168	; 0xa8
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	3ba8      	subs	r3, #168	; 0xa8
 8007ade:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ae2:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8007ae6:	6809      	ldr	r1, [r1, #0]
 8007ae8:	18cc      	adds	r4, r1, r3
 8007aea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007aee:	68d9      	ldr	r1, [r3, #12]
 8007af0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007af4:	440b      	add	r3, r1
 8007af6:	1e59      	subs	r1, r3, #1
 8007af8:	460b      	mov	r3, r1
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	440b      	add	r3, r1
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	4423      	add	r3, r4
 8007b02:	3314      	adds	r3, #20
 8007b04:	edd3 7a00 	vldr	s15, [r3]
 8007b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b0c:	ee17 4a90 	vmov	r4, s15
									       matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1]; // La segunda matriz son los F costs
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	4403      	add	r3, r0
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	681a      	ldr	r2, [r3, #0]
							decisionMatrix[(int) matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5]][0] =
 8007b1e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b22:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007b26:	0123      	lsls	r3, r4, #4
 8007b28:	440b      	add	r3, r1
 8007b2a:	601a      	str	r2, [r3, #0]
						break;
 8007b2c:	e111      	b.n	8007d52 <findShorterWay+0x86a>
 8007b2e:	bf00      	nop
 8007b30:	2000d5c8 	.word	0x2000d5c8
					}case '*':{
						// El séptimo caso seria cuando el puntero que estudia la matriz corresponde con un punto '*' que corresponde con un
						// espacio no estudiado, por lo que simplemente se setea sobre estos nuevos puntos su Gcost y su Fcost, incluyendo el parent
						position[0] = i;
 8007b34:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007b38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007b3c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007b40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateGcost(parameters, ptrChanges, position, matrixCosts);
 8007b44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b48:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007b4c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007b50:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007b54:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007b5e:	6800      	ldr	r0, [r0, #0]
 8007b60:	f000 fc72 	bl	8008448 <updateGcost>
						updateFcost(parameters, ptrChanges, position, matrixCosts);
 8007b64:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b68:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007b6c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8007b70:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007b74:	f5a1 7004 	sub.w	r0, r1, #528	; 0x210
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8007b7e:	6800      	ldr	r0, [r0, #0]
 8007b80:	f000 fc8e 	bl	80084a0 <updateFcost>
						updateParent(ptrChanges, position, matrixCosts);
 8007b84:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007b88:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007b8c:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007b96:	f000 fc03 	bl	80083a0 <updateParent>

						// Es conveniente que guardemos tambien esta información dentro de readableGrid porque se necesita luego almacenar esta ifnromacion ya
						// estudiada
						Gridcopy[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1] = 'O';
 8007b9a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ba4:	4413      	add	r3, r2
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	3b07      	subs	r3, #7
 8007bb0:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007bb4:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	441a      	add	r2, r3
 8007bbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bc0:	68d9      	ldr	r1, [r3, #12]
 8007bc2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	214f      	movs	r1, #79	; 0x4f
 8007bcc:	54d1      	strb	r1, [r2, r3]

						// Como se crearon nuevos estados abiertos , se almacena dentro de la matriz de decicion el Fcost, el H cost, y la posicion
						// de cada punto analizado
						// se almacena el Fcost
						decisionMatrix[counter][0] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][1];
 8007bce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007bd8:	4413      	add	r3, r2
 8007bda:	461a      	mov	r2, r3
 8007bdc:	23a8      	movs	r3, #168	; 0xa8
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	3ba8      	subs	r3, #168	; 0xa8
 8007be4:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007be8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	18d1      	adds	r1, r2, r3
 8007bf0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007bfa:	4413      	add	r3, r2
 8007bfc:	1e5a      	subs	r2, r3, #1
 8007bfe:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007c02:	4613      	mov	r3, r2
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	440b      	add	r3, r1
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007c14:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007c18:	0103      	lsls	r3, r0, #4
 8007c1a:	440b      	add	r3, r1
 8007c1c:	601a      	str	r2, [r3, #0]
						// Se almacena el H cost
						decisionMatrix[counter][1] = matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][2];
 8007c1e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c28:	4413      	add	r3, r2
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	23a8      	movs	r3, #168	; 0xa8
 8007c2e:	fb02 f303 	mul.w	r3, r2, r3
 8007c32:	3ba8      	subs	r3, #168	; 0xa8
 8007c34:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007c38:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	18d1      	adds	r1, r2, r3
 8007c40:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007c4a:	4413      	add	r3, r2
 8007c4c:	1e5a      	subs	r2, r3, #1
 8007c4e:	f897 020b 	ldrb.w	r0, [r7, #523]	; 0x20b
 8007c52:	4613      	mov	r3, r2
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	4413      	add	r3, r2
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007c64:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 8007c68:	0103      	lsls	r3, r0, #4
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	601a      	str	r2, [r3, #0]
						// Se almacena la posicion i
						decisionMatrix[counter][2] = ptrChanges->posAnalisis[0] + i - 1;
 8007c70:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007c7a:	4413      	add	r3, r2
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007c82:	ee07 2a90 	vmov	s15, r2
 8007c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c8a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007c8e:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007c92:	011b      	lsls	r3, r3, #4
 8007c94:	4413      	add	r3, r2
 8007c96:	3308      	adds	r3, #8
 8007c98:	edc3 7a00 	vstr	s15, [r3]
						// Se almacena la posicion j
						decisionMatrix[counter][3] = ptrChanges->posAnalisis[1] + j - 1;
 8007c9c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ca6:	4413      	add	r3, r2
 8007ca8:	1e5a      	subs	r2, r3, #1
 8007caa:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007cae:	ee07 2a90 	vmov	s15, r2
 8007cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cb6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007cba:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	4413      	add	r3, r2
 8007cc2:	330c      	adds	r3, #12
 8007cc4:	edc3 7a00 	vstr	s15, [r3]

						// Guardamos en la matris grande de costos en la ultima matriz el valor del counter asignado a la posición
						matrixCosts[ptrChanges->posAnalisis[0] + i - 1][ptrChanges->posAnalisis[1] + j - 1][5] = counter;
 8007cc8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007cd2:	4413      	add	r3, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	23a8      	movs	r3, #168	; 0xa8
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	3ba8      	subs	r3, #168	; 0xa8
 8007cde:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007ce2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	18d1      	adds	r1, r2, r3
 8007cea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007cf4:	4413      	add	r3, r2
 8007cf6:	1e5a      	subs	r2, r3, #1
 8007cf8:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d04:	4613      	mov	r3, r2
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	4413      	add	r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	440b      	add	r3, r1
 8007d0e:	3314      	adds	r3, #20
 8007d10:	edc3 7a00 	vstr	s15, [r3]

						// Aumentamos el contador ya que cada posicion estudiada aqui es una nueva posicion que entra a estado open
						counter++;
 8007d14:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007d18:	3301      	adds	r3, #1
 8007d1a:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

						break;
 8007d1e:	e018      	b.n	8007d52 <findShorterWay+0x86a>
					}case 'e':{
						// El octavo caso Sería cuando se encuentra la 'e' de end , donde ya logramos despues de viajar a traves de la maya llegar
						// hasta el punto final, aqui para economizar recursos simplemente haremos que el ciclo se detenga y de parent al end le asignamos
						// el ultimo
						position[0] = i;
 8007d20:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d24:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
						position[1] = j;
 8007d28:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d2c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
						updateParent(ptrChanges, position, matrixCosts);
 8007d30:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8007d34:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8007d38:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007d42:	f000 fb2d 	bl	80083a0 <updateParent>
						shorterWayFound = SET;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						break;
 8007d4c:	e001      	b.n	8007d52 <findShorterWay+0x86a>
					}
					default:{
						// Si se llega hasta aca es porque hay un caracter no permitido dentro de la malla y se debe parar la ejecucion del programa
						return 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e31a      	b.n	8008388 <findShorterWay+0xea0>
						break;
					}
				}// Termino del switch case

				if (shorterWayFound){
 8007d52:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <findShorterWay+0x888>
			for (j = 0; j < 3; j++){
 8007d5a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007d64:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	f67f ad99 	bls.w	80078a0 <findShorterWay+0x3b8>
 8007d6e:	e000      	b.n	8007d72 <findShorterWay+0x88a>
					break;
 8007d70:	bf00      	nop
				}

			}// Termino del ciclo for
			if (shorterWayFound){
 8007d72:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <findShorterWay+0x8a8>
    	for(i = 0; i < 3; i++){
 8007d7a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d7e:	3301      	adds	r3, #1
 8007d80:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007d84:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	f67f ad85 	bls.w	8007898 <findShorterWay+0x3b0>
 8007d8e:	e000      	b.n	8007d92 <findShorterWay+0x8aa>
				break;
 8007d90:	bf00      	nop
    	// el que tiene el Fcost mas pequeño, y en caso de Fcost iguales desempata el que tenga una heuristica o Hcost menor
    	// Volvemos a recorrer los aledanios para seleccionar la nueva posicion, tal posicion pasara a ser el nuevo punto de analisis, el resto
    	// seran solo puntos en estado Open, y el antiguo punto de analisis sera ahora un punto Done, Para ello usaremos la funcion findeLesserValue
    	// Esta funcion almacena dentro de la estructura costChangesAndPos_t los valores de la pisicion del F cost mas pequeño, en el caso de que haya
    	// mas de uno igual, se alzará una bandera que indica que esto ocurrio, por lo que internamente el tambien analiza cual es la heuristica
    	if (!shorterWayFound){
 8007d92:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 81be 	bne.w	8008118 <findShorterWay+0xc30>
			findLesserValue(ptrChanges, decisionMatrix, counter);
 8007d9c:	f897 220b 	ldrb.w	r2, [r7, #523]	; 0x20b
 8007da0:	f107 0310 	add.w	r3, r7, #16
 8007da4:	4619      	mov	r1, r3
 8007da6:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8007daa:	f000 feb9 	bl	8008b20 <findLesserValue>
			// A partir de aqui tendriamos la posicion del F cost mas pequeño, pero primero se compueba de que si depronto hubo un F cost igual
			if (ptrChanges->equalFcost){
 8007dae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80d7 	beq.w	8007f6a <findShorterWay+0xa82>
				// Si estamos aqui es porque si hubo mas de un Fcost igual , por lo que se busca es la posicion del Hcost mas pequeño como la nueva posicion
				// que tomara el nuevo papel de punto de analisis, y el que fue el punto de analisis sera ahor aun estado Done o 'D'
				// Llevamos la posicion de analisis al estado cerrado
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007dbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dc6:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007dc8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dd2:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007dd4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4613      	mov	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007de6:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	441a      	add	r2, r3
 8007dee:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	5cd3      	ldrb	r3, [r2, r3]
 8007df6:	2b73      	cmp	r3, #115	; 0x73
 8007df8:	d101      	bne.n	8007dfe <findShorterWay+0x916>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8007dfa:	bf00      	nop
 8007dfc:	e011      	b.n	8007e22 <findShorterWay+0x93a>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8007dfe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	461a      	mov	r2, r3
 8007e06:	4613      	mov	r3, r2
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e10:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	441a      	add	r2, r3
 8007e18:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	2144      	movs	r1, #68	; 0x44
 8007e20:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserHcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8007e22:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e2c:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	4413      	add	r3, r2
 8007e34:	3308      	adds	r3, #8
 8007e36:	edd3 7a00 	vldr	s15, [r3]
 8007e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e3e:	ee17 2a90 	vmov	r2, s15
 8007e42:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e46:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserHcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8007e48:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e52:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	4413      	add	r3, r2
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	edd3 7a00 	vldr	s15, [r3]
 8007e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e64:	ee17 2a90 	vmov	r2, s15
 8007e68:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e6c:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007e74:	e014      	b.n	8007ea0 <findShorterWay+0x9b8>
					decisionMatrix[ptrChanges->lesserHcostPosition][i] = 0;
 8007e76:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007e7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007e7c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007e80:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007e84:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007e88:	0089      	lsls	r1, r1, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8007e96:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007ea0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d9e6      	bls.n	8007e76 <findShorterWay+0x98e>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007ea8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007eb6:	e03b      	b.n	8007f30 <findShorterWay+0xa48>
					for (j = 0 ; j < 4 ; j++){
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007ebe:	e02e      	b.n	8007f1e <findShorterWay+0xa36>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 8007ec0:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8007ec4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8007ec8:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007ecc:	1e58      	subs	r0, r3, #1
 8007ece:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007ed2:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ed6:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007eda:	00a4      	lsls	r4, r4, #2
 8007edc:	4422      	add	r2, r4
 8007ede:	0092      	lsls	r2, r2, #2
 8007ee0:	440a      	add	r2, r1
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007ee8:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8007eec:	0080      	lsls	r0, r0, #2
 8007eee:	4403      	add	r3, r0
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 8007ef6:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 8007efa:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007efe:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f02:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007f06:	0089      	lsls	r1, r1, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f04f 0200 	mov.w	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 8007f14:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f18:	3301      	adds	r3, #1
 8007f1a:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8007f1e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d9cc      	bls.n	8007ec0 <findShorterWay+0x9d8>
				for (i = ptrChanges->lesserHcostPosition + 1; i < counter ; i++ ){
 8007f26:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8007f30:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8007f34:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d3bd      	bcc.n	8007eb8 <findShorterWay+0x9d0>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 8007f3c:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8007f40:	3b01      	subs	r3, #1
 8007f42:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 8007f46:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f50:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8007f52:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f5c:	615a      	str	r2, [r3, #20]

				// Resetemos la bandera que nos indica si hay un valor de Fcost igual.
				ptrChanges->equalFcost = RESET;
 8007f5e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f68:	e0d0      	b.n	800810c <findShorterWay+0xc24>

			}else{
				// Si estamos aqui es porque no hubo F costs iguales y se hara lo mismo que en el caso anterior solo que se tendra en cuenta
				// la posicion encontrada del Fcost mas pequeño, ya no del Hcost mas pequeño
				ptrChanges->posClosed[0] = ptrChanges->posAnalisis[0];
 8007f6a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f74:	619a      	str	r2, [r3, #24]
				ptrChanges->posClosed[1] = ptrChanges->posAnalisis[1];
 8007f76:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f80:	61da      	str	r2, [r3, #28]

				// Convertimos el estado estudiado en un estado Done acualizando el redeableGrid, excepto cuando se trata del punto de start
				if (Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] == 's'){
 8007f82:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007f94:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	441a      	add	r2, r3
 8007f9c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	5cd3      	ldrb	r3, [r2, r3]
 8007fa4:	2b73      	cmp	r3, #115	; 0x73
 8007fa6:	d101      	bne.n	8007fac <findShorterWay+0xac4>
					// Dejamos el char de start tal cual como esta
					__NOP();
 8007fa8:	bf00      	nop
 8007faa:	e011      	b.n	8007fd0 <findShorterWay+0xae8>
				}else{
					// Si no se trata del caracter de Start si actualizamos con el caracter de Done 'D'
					Gridcopy[ptrChanges->posAnalisis[0]][ptrChanges->posAnalisis[1]] = 'D';
 8007fac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007fbe:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	2144      	movs	r1, #68	; 0x44
 8007fce:	54d1      	strb	r1, [r2, r3]
				}

				//Actualizamos el punto de analisis con la posicion de la heuristica mas pequeña, usando la matriz de decision entregamos la posicion
				// respectiva que contiene la caracteristica deseada
				ptrChanges->posAnalisis[0] = decisionMatrix[ptrChanges->lesserFcostPosition][2]; // Posicion i del valor de la Heuristica mas corta
 8007fd0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8007fda:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	edd3 7a00 	vldr	s15, [r3]
 8007fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fec:	ee17 2a90 	vmov	r2, s15
 8007ff0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ff4:	609a      	str	r2, [r3, #8]
				ptrChanges->posAnalisis[1] = decisionMatrix[ptrChanges->lesserFcostPosition][3]; // Posicion j del valor de la heuristica mas corta
 8007ff6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8007ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffc:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008000:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	4413      	add	r3, r2
 8008008:	330c      	adds	r3, #12
 800800a:	edd3 7a00 	vldr	s15, [r3]
 800800e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008012:	ee17 2a90 	vmov	r2, s15
 8008016:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800801a:	60da      	str	r2, [r3, #12]

				// Limpiamos la posicion de la matriz de decision ya que este punto pasa a ser un valor a estudiar, y debe de salir de la lista
				// de estados en Open
				for (i = 0 ; i < 4 ; i++){
 800801c:	2300      	movs	r3, #0
 800801e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008022:	e014      	b.n	800804e <findShorterWay+0xb66>
					decisionMatrix[ptrChanges->lesserFcostPosition][i] = 0;
 8008024:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008028:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800802a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800802e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008032:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8008036:	0089      	lsls	r1, r1, #2
 8008038:	440b      	add	r3, r1
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
				for (i = 0 ; i < 4 ; i++){
 8008044:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008048:	3301      	adds	r3, #1
 800804a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800804e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008052:	2b03      	cmp	r3, #3
 8008054:	d9e6      	bls.n	8008024 <findShorterWay+0xb3c>
				}

				//solo queda mover las posiciones en estado de abierto para arriba para que ocupen el espacio que quedo

				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 8008056:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805c:	b2db      	uxtb	r3, r3
 800805e:	3301      	adds	r3, #1
 8008060:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008064:	e03b      	b.n	80080de <findShorterWay+0xbf6>
					for (j = 0 ; j < 4 ; j++){
 8008066:	2300      	movs	r3, #0
 8008068:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 800806c:	e02e      	b.n	80080cc <findShorterWay+0xbe4>
						// Mudamos los elementos de la posicion i a la posicion anterior
						decisionMatrix[i - 1][j] = decisionMatrix[i][j];
 800806e:	f897 420e 	ldrb.w	r4, [r7, #526]	; 0x20e
 8008072:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008076:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800807a:	1e58      	subs	r0, r3, #1
 800807c:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008080:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8008084:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8008088:	00a4      	lsls	r4, r4, #2
 800808a:	4422      	add	r2, r4
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	440a      	add	r2, r1
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8008096:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 800809a:	0080      	lsls	r0, r0, #2
 800809c:	4403      	add	r3, r0
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	601a      	str	r2, [r3, #0]
						// Limpiamos la posicion que acabamos de mudar para mudar a la siguiente
						decisionMatrix[i][j] = 0;
 80080a4:	f897 120e 	ldrb.w	r1, [r7, #526]	; 0x20e
 80080a8:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80080ac:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80080b0:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80080b4:	0089      	lsls	r1, r1, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
					for (j = 0 ; j < 4 ; j++){
 80080c2:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80080c6:	3301      	adds	r3, #1
 80080c8:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80080cc:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d9cc      	bls.n	800806e <findShorterWay+0xb86>
				for (i = ptrChanges->lesserFcostPosition + 1; i < counter ; i++ ){
 80080d4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80080d8:	3301      	adds	r3, #1
 80080da:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80080de:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80080e2:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d3bd      	bcc.n	8008066 <findShorterWay+0xb7e>
					}
				}

				// Al final restamos uno al counter ya que de su lista salio un compañero
				counter--;
 80080ea:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80080ee:	3b01      	subs	r3, #1
 80080f0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

				//Colocamos en estado de open el nuevo estado a estudiar
				ptrChanges->posOpen[0] = ptrChanges->posAnalisis[0];
 80080f4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80080fe:	611a      	str	r2, [r3, #16]
				ptrChanges->posOpen[1] = ptrChanges->posAnalisis[1];
 8008100:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800810a:	615a      	str	r2, [r3, #20]

			}

			counterStudy++;
 800810c:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8008110:	3301      	adds	r3, #1
 8008112:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
 8008116:	e05d      	b.n	80081d4 <findShorterWay+0xcec>
    	}else{
			// Si el programa entra en esta condicion quiere decir que ya se encontro la ruta mas corta y ya es hora de construir la matriz de posiciones
			// donde se almacenara la ruta mas corta
			//buscamos cuantos elementos deberia de tener el arreglo para ello usaremos el siguiente while donde recorreremos desde el end hasta el
			//start
			i = ptrChanges->endPos[0];
 8008118:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			j = ptrChanges->endPos[1];
 8008122:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
			while(Gridcopy[i][j] != 's'){
 800812c:	e042      	b.n	80081b4 <findShorterWay+0xccc>
				// Actualizamos a la nueva posición
				position[0] = matrixCosts[i][j][3];
 800812e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008132:	22a8      	movs	r2, #168	; 0xa8
 8008134:	fb02 f303 	mul.w	r3, r2, r3
 8008138:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800813c:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008140:	6812      	ldr	r2, [r2, #0]
 8008142:	18d1      	adds	r1, r2, r3
 8008144:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 8008148:	4613      	mov	r3, r2
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	440b      	add	r3, r1
 8008152:	330c      	adds	r3, #12
 8008154:	edd3 7a00 	vldr	s15, [r3]
 8008158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800815c:	ee17 3a90 	vmov	r3, s15
 8008160:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
				position[1] = matrixCosts[i][j][4];
 8008164:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008168:	22a8      	movs	r2, #168	; 0xa8
 800816a:	fb02 f303 	mul.w	r3, r2, r3
 800816e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008172:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	18d1      	adds	r1, r2, r3
 800817a:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 800817e:	4613      	mov	r3, r2
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	4413      	add	r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	440b      	add	r3, r1
 8008188:	3310      	adds	r3, #16
 800818a:	edd3 7a00 	vldr	s15, [r3]
 800818e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008192:	ee17 3a90 	vmov	r3, s15
 8008196:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

				// actualizamos la nueva posición
				i = position[0];
 800819a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800819e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
				j = position[1];
 80081a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80081a6:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

				// incrementamos en uno la cantidad de posiciones a guardar
				numberOfPositions++;
 80081aa:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80081ae:	3301      	adds	r3, #1
 80081b0:	f887 320c 	strb.w	r3, [r7, #524]	; 0x20c
			while(Gridcopy[i][j] != 's'){
 80081b4:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80081c2:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	441a      	add	r2, r3
 80081ca:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 80081ce:	5cd3      	ldrb	r3, [r2, r3]
 80081d0:	2b73      	cmp	r3, #115	; 0x73
 80081d2:	d1ac      	bne.n	800812e <findShorterWay+0xc46>
    while(!shorterWayFound){
 80081d4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f43f aa3d 	beq.w	8007658 <findShorterWay+0x170>
		}


    }// final del ciclo While

    writeMsg(&handlerAstarUsart, "\n___________Hemos Encontrado la ruta mas corta______________\n");
 80081de:	496d      	ldr	r1, [pc, #436]	; (8008394 <findShorterWay+0xeac>)
 80081e0:	486d      	ldr	r0, [pc, #436]	; (8008398 <findShorterWay+0xeb0>)
 80081e2:	f005 f977 	bl	800d4d4 <writeMsg>
    writeChar(&handlerAstarUsart, '\r');
 80081e6:	210d      	movs	r1, #13
 80081e8:	486b      	ldr	r0, [pc, #428]	; (8008398 <findShorterWay+0xeb0>)
 80081ea:	f005 f95b 	bl	800d4a4 <writeChar>

    // estando aqui ya solo queda almacenar toda las posiciones parent comenzando desde el end hasta el start, siguendo el parent de cada uno se asegura
    // que lo que se esta almacenando es la ruta mas corta

    //Almacenamos dentro de una de las variables del arreglo AStar_distancesHandler la cantidad de elementos que tiene la matriz de la ruta mas corta
    parameters->numberOfElements = numberOfPositions + 1 ; // Le sumamos uno mas para incluir el punto de inicio
 80081ee:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 80081f2:	3301      	adds	r3, #1
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80081fa:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	729a      	strb	r2, [r3, #10]


    i = ptrChanges->endPos[0];
 8008202:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	j = ptrChanges->endPos[1];
 800820c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d

    // Recorremos la matriz e iremos almacenando dentro de este comenzando desde la posicion final y terminando en la posicion inicial
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008216:	f897 320c 	ldrb.w	r3, [r7, #524]	; 0x20c
 800821a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800821e:	e087      	b.n	8008330 <findShorterWay+0xe48>
    	//Cambiamos la matriz redeableGrid, las posiciones que corresponden a la ruta mas corta por un char 'I',
    	if (Gridcopy[i][j] == 'e'){
 8008220:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008224:	4613      	mov	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800822e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	441a      	add	r2, r3
 8008236:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800823a:	5cd3      	ldrb	r3, [r2, r3]
 800823c:	2b65      	cmp	r3, #101	; 0x65
 800823e:	d101      	bne.n	8008244 <findShorterWay+0xd5c>
    		// Si estamos aqui es porque no queremos cambiar el char de finalización
    		__NOP();
 8008240:	bf00      	nop
 8008242:	e020      	b.n	8008286 <findShorterWay+0xd9e>
    	}else if (Gridcopy[i][j] == 's'){
 8008244:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008252:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008256:	6812      	ldr	r2, [r2, #0]
 8008258:	441a      	add	r2, r3
 800825a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 800825e:	5cd3      	ldrb	r3, [r2, r3]
 8008260:	2b73      	cmp	r3, #115	; 0x73
 8008262:	d101      	bne.n	8008268 <findShorterWay+0xd80>
    		// Si estamos aqui es porque no queremos cambiar el char de inicio
    		__NOP();
 8008264:	bf00      	nop
 8008266:	e00e      	b.n	8008286 <findShorterWay+0xd9e>
    	}else{
    		// Si estamos aqui es porque estamos dentro del camino a seguir, por lo cambiamos a una 'I'
    		Gridcopy[i][j] = 'I';
 8008268:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 800826c:	4613      	mov	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008276:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	441a      	add	r2, r3
 800827e:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008282:	2149      	movs	r1, #73	; 0x49
 8008284:	54d1      	strb	r1, [r2, r3]
    	}


    	// Almacenamos en la matriz de ruta mas corta
		shorterWay[k][0] = i;
 8008286:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8008290:	4413      	add	r3, r2
 8008292:	f897 220e 	ldrb.w	r2, [r7, #526]	; 0x20e
 8008296:	601a      	str	r2, [r3, #0]
		shorterWay[k][1] = j;
 8008298:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80082a2:	4413      	add	r3, r2
 80082a4:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80082a8:	605a      	str	r2, [r3, #4]

    	// comenzamos almacenando las posiciones en orden desde el final al punto inicial
		// Actualizamos a la nueva posición
		position[0] = matrixCosts[i][j][3];
 80082aa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80082ae:	22a8      	movs	r2, #168	; 0xa8
 80082b0:	fb02 f303 	mul.w	r3, r2, r3
 80082b4:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082b8:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	18d1      	adds	r1, r2, r3
 80082c0:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80082c4:	4613      	mov	r3, r2
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	4413      	add	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	440b      	add	r3, r1
 80082ce:	330c      	adds	r3, #12
 80082d0:	edd3 7a00 	vldr	s15, [r3]
 80082d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082d8:	ee17 3a90 	vmov	r3, s15
 80082dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		position[1] = matrixCosts[i][j][4];
 80082e0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80082e4:	22a8      	movs	r2, #168	; 0xa8
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
 80082ea:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082ee:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	18d1      	adds	r1, r2, r3
 80082f6:	f897 220d 	ldrb.w	r2, [r7, #525]	; 0x20d
 80082fa:	4613      	mov	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4413      	add	r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	440b      	add	r3, r1
 8008304:	3310      	adds	r3, #16
 8008306:	edd3 7a00 	vldr	s15, [r3]
 800830a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800830e:	ee17 3a90 	vmov	r3, s15
 8008312:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

		// actualizamos la nueva posición
		i = position[0];
 8008316:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800831a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
		j = position[1];
 800831e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008322:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
    for (int  k = numberOfPositions; k >= 0 ; k--){
 8008326:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800832a:	3b01      	subs	r3, #1
 800832c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8008330:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008334:	2b00      	cmp	r3, #0
 8008336:	f6bf af73 	bge.w	8008220 <findShorterWay+0xd38>


    }
	// Imprimimos el estado actual de la matriz copia
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800833a:	2300      	movs	r3, #0
 800833c:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 8008340:	e013      	b.n	800836a <findShorterWay+0xe82>
			writeMsg(&handlerAstarUsart, Gridcopy[i]);
 8008342:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 8008346:	4613      	mov	r3, r2
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008350:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	4413      	add	r3, r2
 8008358:	4619      	mov	r1, r3
 800835a:	480f      	ldr	r0, [pc, #60]	; (8008398 <findShorterWay+0xeb0>)
 800835c:	f005 f8ba 	bl	800d4d4 <writeMsg>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8008360:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8008364:	3301      	adds	r3, #1
 8008366:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
 800836a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800836e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	7a1b      	ldrb	r3, [r3, #8]
 8008376:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 800837a:	429a      	cmp	r2, r3
 800837c:	d3e1      	bcc.n	8008342 <findShorterWay+0xe5a>

    // A partir de aqui habremos logrado despues de un largo camino hallar la ruta mas corta entre dos puntos , el robot ya con esa informacion
    // sabra hacia donde moverse y cuanto moverse

    // Si llegamos hasta aca, con exito hemos logrado todo lo cometido, ¡Felicidades!
    writeMsg(&handlerAstarUsart, "\n______________________Gracias por viajar con nuestra linea Astarlines____________________\n");
 800837e:	4907      	ldr	r1, [pc, #28]	; (800839c <findShorterWay+0xeb4>)
 8008380:	4805      	ldr	r0, [pc, #20]	; (8008398 <findShorterWay+0xeb0>)
 8008382:	f005 f8a7 	bl	800d4d4 <writeMsg>

    return 1;
 8008386:	2301      	movs	r3, #1


}
 8008388:	4618      	mov	r0, r3
 800838a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800838e:	46bd      	mov	sp, r7
 8008390:	bd90      	pop	{r4, r7, pc}
 8008392:	bf00      	nop
 8008394:	0801393c 	.word	0x0801393c
 8008398:	2000d5c8 	.word	0x2000d5c8
 800839c:	0801397c 	.word	0x0801397c

080083a0 <updateParent>:

// Esta función actuazliza en la matriz de costs y el parent correspondiente
void updateParent(costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]

	setParents(ptrChanges, posIJ);
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fa8e 	bl	80088d0 <setParents>

	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][3] = ptrChanges->parent[0]; //Posicion i del parent
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083ba:	b2d8      	uxtb	r0, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4413      	add	r3, r2
 80083c6:	461a      	mov	r2, r3
 80083c8:	23a8      	movs	r3, #168	; 0xa8
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	3ba8      	subs	r3, #168	; 0xa8
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	18d1      	adds	r1, r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	3304      	adds	r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4413      	add	r3, r2
 80083e0:	1e5a      	subs	r2, r3, #1
 80083e2:	ee07 0a90 	vmov	s15, r0
 80083e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ea:	4613      	mov	r3, r2
 80083ec:	005b      	lsls	r3, r3, #1
 80083ee:	4413      	add	r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	440b      	add	r3, r1
 80083f4:	330c      	adds	r3, #12
 80083f6:	edc3 7a00 	vstr	s15, [r3]
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] - 1][ptrChanges->posAnalisis[1] + posIJ[1] - 1][4] = ptrChanges->parent[1]; //Posicion j del parent
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008400:	b2d8      	uxtb	r0, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4413      	add	r3, r2
 800840c:	461a      	mov	r2, r3
 800840e:	23a8      	movs	r3, #168	; 0xa8
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	3ba8      	subs	r3, #168	; 0xa8
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	18d1      	adds	r1, r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3304      	adds	r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4413      	add	r3, r2
 8008426:	1e5a      	subs	r2, r3, #1
 8008428:	ee07 0a90 	vmov	s15, r0
 800842c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008430:	4613      	mov	r3, r2
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	4413      	add	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	440b      	add	r3, r1
 800843a:	3310      	adds	r3, #16
 800843c:	edc3 7a00 	vstr	s15, [r3]

}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <updateGcost>:

// esta funcion actualiz el Gcost correspondiente
void updateGcost(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 8008448:	b5b0      	push	{r4, r5, r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][0] = setGcost(parameters, ptrChanges, posIJ);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4413      	add	r3, r2
 8008460:	461a      	mov	r2, r3
 8008462:	23a8      	movs	r3, #168	; 0xa8
 8008464:	fb02 f303 	mul.w	r3, r2, r3
 8008468:	3ba8      	subs	r3, #168	; 0xa8
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	18d5      	adds	r5, r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	3304      	adds	r3, #4
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4413      	add	r3, r2
 800847a:	1e5c      	subs	r4, r3, #1
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f901 	bl	8008688 <setGcost>
 8008486:	eef0 7a40 	vmov.f32	s15, s0
 800848a:	4623      	mov	r3, r4
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	4423      	add	r3, r4
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	442b      	add	r3, r5
 8008494:	edc3 7a00 	vstr	s15, [r3]
}
 8008498:	bf00      	nop
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bdb0      	pop	{r4, r5, r7, pc}

080084a0 <updateFcost>:

// Esta función actualiza el Fcost correspondiente
void updateFcost(AStar_distancesHandler *parameters ,costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6] ){
 80084a0:	b5b0      	push	{r4, r5, r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
	//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la super matriz
	// de costos
	matrixCosts[ptrChanges->posAnalisis[0] + posIJ[0] -1][ptrChanges->posAnalisis[1] + posIJ[1] -1][1] = setFcost(parameters, ptrChanges, posIJ, matrixCosts);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4413      	add	r3, r2
 80084b8:	461a      	mov	r2, r3
 80084ba:	23a8      	movs	r3, #168	; 0xa8
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	3ba8      	subs	r3, #168	; 0xa8
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	18d5      	adds	r5, r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3304      	adds	r3, #4
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4413      	add	r3, r2
 80084d2:	1e5c      	subs	r4, r3, #1
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f9bb 	bl	8008856 <setFcost>
 80084e0:	eef0 7a40 	vmov.f32	s15, s0
 80084e4:	4623      	mov	r3, r4
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4423      	add	r3, r4
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	442b      	add	r3, r5
 80084ee:	3304      	adds	r3, #4
 80084f0:	edc3 7a00 	vstr	s15, [r3]

}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bdb0      	pop	{r4, r5, r7, pc}

080084fc <setHeuristic>:

// con esta funcion seteamos la matriz Heuristica con la cual usaremos la info para buscar la ruta mas corta
int setHeuristic(AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, float matrixCosts[7][7][6] , char Gridcopy[7][7]){
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]

	// definimos variables locales
	int distRows     = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
	int distanceToGo = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	613b      	str	r3, [r7, #16]
	//sicion de cada fila y columna el valor de la heuristica dependiendo de donde este el punto de termino o End point

	// Comenzamos entonces recorriendo cada posicion del terccer bloque matricial de ***costs
	// recorremos las filas
	// Almacenamos la posicion final
	if(findEnd(Gridcopy, parameters, ptrChanges)){
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	68f9      	ldr	r1, [r7, #12]
 800851a:	6838      	ldr	r0, [r7, #0]
 800851c:	f000 fa3d 	bl	800899a <findEnd>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <setHeuristic+0x32>
		// Se encontro la posicion final, y continua con el programa
		__NOP();
 8008526:	bf00      	nop
	}

	// A partir de aqui ya se tiene la posicion del punto final y ya se puede entonces calcular la heuristica
	// partiendo siempre de que el robot puede ir en diagonal y luego en linea recta , siempre buscando la ruta mas eficiente

	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 8008528:	2300      	movs	r3, #0
 800852a:	77fb      	strb	r3, [r7, #31]
 800852c:	e0a1      	b.n	8008672 <setHeuristic+0x176>
		return RESET;
 800852e:	2300      	movs	r3, #0
 8008530:	e0a6      	b.n	8008680 <setHeuristic+0x184>
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 8008532:	2300      	movs	r3, #0
 8008534:	77bb      	strb	r3, [r7, #30]
 8008536:	e093      	b.n	8008660 <setHeuristic+0x164>
			// para cada posicion i,j, se mira i-iend y j-jend, y se evalua cual de los dos es menor y luego
			// De los dos que sea mas pequeño, el robot tendra que ir diagonal hasta encontrarse con la fila o la columna
			// maas cercana a la fila o la columna del punto final, y ya luego sumarle la distancia paralela que falta para llegar al punto end
			distRows    = abs(i-ptrChanges->endPos[0]);
 8008538:	7ffa      	ldrb	r2, [r7, #31]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfb8      	it	lt
 8008544:	425b      	neglt	r3, r3
 8008546:	61bb      	str	r3, [r7, #24]
			distColumns = abs(j-ptrChanges->endPos[1]);
 8008548:	7fba      	ldrb	r2, [r7, #30]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	bfb8      	it	lt
 8008554:	425b      	neglt	r3, r3
 8008556:	617b      	str	r3, [r7, #20]
			if (distRows <= distColumns){
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	429a      	cmp	r2, r3
 800855e:	dc3e      	bgt.n	80085de <setHeuristic+0xe2>
				// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
				// que de la columna del end, por lo que se debe ir diagonal
				distanceToGo = parameters->diagonalDiastance * distRows;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	ed93 7a01 	vldr	s14, [r3, #4]
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008578:	ee17 3a90 	vmov	r3, s15
 800857c:	613b      	str	r3, [r7, #16]
				// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
				// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
				// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	edd3 6a00 	vldr	s13, [r3]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	bfb8      	it	lt
 8008598:	425b      	neglt	r3, r3
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ae:	ee17 3a90 	vmov	r3, s15
 80085b2:	613b      	str	r3, [r7, #16]
				//Por ultimo se setea en la pisicion de la heuristica correspondiente a la matriz ultima de la sumer matriz
				// de costos
				matrixCosts[i][j][2] = distanceToGo;
 80085b4:	7ffb      	ldrb	r3, [r7, #31]
 80085b6:	22a8      	movs	r2, #168	; 0xa8
 80085b8:	fb02 f303 	mul.w	r3, r2, r3
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	18d1      	adds	r1, r2, r3
 80085c0:	7fba      	ldrb	r2, [r7, #30]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	ee07 3a90 	vmov	s15, r3
 80085c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085cc:	4613      	mov	r3, r2
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	4413      	add	r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	440b      	add	r3, r1
 80085d6:	3308      	adds	r3, #8
 80085d8:	edc3 7a00 	vstr	s15, [r3]
 80085dc:	e03d      	b.n	800865a <setHeuristic+0x15e>
			}else{
				// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
				// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
				distanceToGo = parameters->diagonalDiastance * distColumns;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085f6:	ee17 3a90 	vmov	r3, s15
 80085fa:	613b      	str	r3, [r7, #16]
				// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
				// distRows y distColumns
				distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	edd3 6a00 	vldr	s13, [r3]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	bfb8      	it	lt
 8008616:	425b      	neglt	r3, r3
 8008618:	ee07 3a90 	vmov	s15, r3
 800861c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862c:	ee17 3a90 	vmov	r3, s15
 8008630:	613b      	str	r3, [r7, #16]
				matrixCosts[i][j][2] = distanceToGo;
 8008632:	7ffb      	ldrb	r3, [r7, #31]
 8008634:	22a8      	movs	r2, #168	; 0xa8
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	18d1      	adds	r1, r2, r3
 800863e:	7fba      	ldrb	r2, [r7, #30]
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3308      	adds	r3, #8
 8008656:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns; j++){
 800865a:	7fbb      	ldrb	r3, [r7, #30]
 800865c:	3301      	adds	r3, #1
 800865e:	77bb      	strb	r3, [r7, #30]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	7a5b      	ldrb	r3, [r3, #9]
 8008664:	7fba      	ldrb	r2, [r7, #30]
 8008666:	429a      	cmp	r2, r3
 8008668:	f4ff af66 	bcc.w	8008538 <setHeuristic+0x3c>
	for (uint8_t i = 0; i< parameters->numberOfRows; i++){
 800866c:	7ffb      	ldrb	r3, [r7, #31]
 800866e:	3301      	adds	r3, #1
 8008670:	77fb      	strb	r3, [r7, #31]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7a1b      	ldrb	r3, [r3, #8]
 8008676:	7ffa      	ldrb	r2, [r7, #31]
 8008678:	429a      	cmp	r2, r3
 800867a:	f4ff af5a 	bcc.w	8008532 <setHeuristic+0x36>
		}

	}

	// Terminado TODO el recorrido se puede salir de la funcion y decir que todo fue correcto
	return SET;
 800867e:	2301      	movs	r3, #1

}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <setGcost>:

//Con esta funcion se halla el Gcost teniendo en cuenta la posicion de analisis
float setGcost (AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges, int posIJ[2]){
 8008688:	b480      	push	{r7}
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
	// definimos variables locales
	int distRows     = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
	int distColumns  = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
	float distanceToGo = 0;
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]

	// Luego calculamos el Gcost partiendo de que se tiene que pasar siempre por la posicion de analisis
	// Se analiza cual es la distancia que hay entre el punto de analisis y el punto de start
	distRows    = abs(ptrChanges->posAnalisis[0] -ptrChanges->startPos[0]);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bfb8      	it	lt
 80086b0:	425b      	neglt	r3, r3
 80086b2:	61bb      	str	r3, [r7, #24]
	distColumns = abs(ptrChanges->posAnalisis[1]-ptrChanges->startPos[1]);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bfb8      	it	lt
 80086c2:	425b      	neglt	r3, r3
 80086c4:	617b      	str	r3, [r7, #20]

	if ((ptrChanges->posAnalisis[0] + posIJ[0] -1) != ptrChanges->posAnalisis[0]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4413      	add	r3, r2
 80086d0:	1e5a      	subs	r2, r3, #1
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d05d      	beq.n	8008796 <setGcost+0x10e>
	 && (ptrChanges->posAnalisis[1] + posIJ[1] -1) != ptrChanges->posAnalisis[1]){
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3304      	adds	r3, #4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4413      	add	r3, r2
 80086e6:	1e5a      	subs	r2, r3, #1
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d052      	beq.n	8008796 <setGcost+0x10e>
		// Si estamos aqui es porque estamos en una de las 4 esquinas aledanias, por lo que la distancia a la columna o la fila
		// mas cercana a el punto de analisis es 1, se tendra que ir diagonalmente
		distanceToGo = parameters->diagonalDiastance;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	61fb      	str	r3, [r7, #28]

		// Luego se calcula la distancia que resta aplicando el mismo algoritmo de la heuristica
		//pero esta vez para el punto de analisis hasta el punto de inicio

		if (distRows <= distColumns){
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	dc25      	bgt.n	800874a <setGcost+0xc2>
			// Si estamos aca es porque el robot en la posicion i,j en la que estaria esta mas cerca de la fila del end
			// que de la columna del end, por lo que se debe ir diagonal
			distanceToGo += parameters->diagonalDiastance * distRows;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	ed93 7a01 	vldr	s14, [r3, #4]
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	ed97 7a07 	vldr	s14, [r7, #28]
 8008716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800871a:	edc7 7a07 	vstr	s15, [r7, #28]
			// Luego el robot ya se encontraria en la misma fila del end, por lo que faltaria sumarle las posiciones restantes
			// paralelas hasta llegar a la columna , la distancia que falta seria la resta de las diferencias en valor absoluto
			// En el caso de que las distancias sean iguales, el robot solo ira diagonal hasta el end , no necesitara ir paralelo.
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	ed93 7a00 	vldr	s14, [r3]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfb8      	it	lt
 800872e:	425b      	neglt	r3, r3
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873c:	ed97 7a07 	vldr	s14, [r7, #28]
 8008740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008744:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8008748:	e077      	b.n	800883a <setGcost+0x1b2>
		}else{
			// Si estamos aqui es porque la distancia del robot a la columna es mas cercana que del mismo a la fila, por lo que
			// lo unico que cambia es que las veces que hay que ir diagonal sera hasta tocar la columna del end
			distanceToGo += parameters->diagonalDiastance * distColumns;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008766:	edc7 7a07 	vstr	s15, [r7, #28]
			// Lo que falta para llegar al end es el recorrido por toda la columna, es decir el restante entre
			// distRows y distColumns
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	ed93 7a00 	vldr	s14, [r3]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfb8      	it	lt
 800877a:	425b      	neglt	r3, r3
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008788:	ed97 7a07 	vldr	s14, [r7, #28]
 800878c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008790:	edc7 7a07 	vstr	s15, [r7, #28]
		if (distRows <= distColumns){
 8008794:	e051      	b.n	800883a <setGcost+0x1b2>

	}else {
		// Si estamos aqui es porque estamos en una de las cuatro aristas, donde tanto el puntero como la posicion real del punto de analisis
		// coinciden en fila o en columna, la unica diferencia aqui es que se calcula paralelamente al punto de analisis y a partir de ahi
		// se aplica el algoritmo de la heuristica
		distanceToGo = parameters->parallelDistance;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	61fb      	str	r3, [r7, #28]

		if (distRows <= distColumns){
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	dc25      	bgt.n	80087f0 <setGcost+0x168>
			distanceToGo += parameters->diagonalDiastance * distRows;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	ee07 3a90 	vmov	s15, r3
 80087b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80087bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087c0:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	ed93 7a00 	vldr	s14, [r3]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bfb8      	it	lt
 80087d4:	425b      	neglt	r3, r3
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80087e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ea:	edc7 7a07 	vstr	s15, [r7, #28]
 80087ee:	e024      	b.n	800883a <setGcost+0x1b2>
		}else{
			distanceToGo += parameters->diagonalDiastance * distColumns;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008804:	ed97 7a07 	vldr	s14, [r7, #28]
 8008808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800880c:	edc7 7a07 	vstr	s15, [r7, #28]
			distanceToGo += parameters->parallelDistance * abs(distRows-distColumns);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	ed93 7a00 	vldr	s14, [r3]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfb8      	it	lt
 8008820:	425b      	neglt	r3, r3
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800882a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}
	ptrChanges->Gcost = distanceToGo;
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	601a      	str	r2, [r3, #0]

	return ptrChanges->Gcost;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	ee07 3a90 	vmov	s15, r3
}
 8008848:	eeb0 0a67 	vmov.f32	s0, s15
 800884c:	3724      	adds	r7, #36	; 0x24
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <setFcost>:

// Con esta funcion seteamos el F cost en la matriz 2 de la posicion correspondiente
float setFcost (AStar_distancesHandler *parameters , costChangesAndPos_t *ptrChanges, int posIJ[2], float matrixCosts[7][7][6]){
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
 8008862:	603b      	str	r3, [r7, #0]

	// Esta funcion es simple ya que solo tenemos que calcular de la matriz 3x3 de analisis y sumar el H cost y el G cost para tener el F cost
	ptrChanges->Gcost = setGcost(parameters, ptrChanges, posIJ);
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff ff0d 	bl	8008688 <setGcost>
 800886e:	eef0 7a40 	vmov.f32	s15, s0
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	edc3 7a00 	vstr	s15, [r3]
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	ed93 7a00 	vldr	s14, [r3]
			          + matrixCosts[ptrChanges->posAnalisis[0]+ posIJ[0] -1][ptrChanges->posAnalisis[1]+ posIJ[1] -1][2]; // Hcost
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4413      	add	r3, r2
 8008888:	461a      	mov	r2, r3
 800888a:	23a8      	movs	r3, #168	; 0xa8
 800888c:	fb02 f303 	mul.w	r3, r2, r3
 8008890:	3ba8      	subs	r3, #168	; 0xa8
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	18d1      	adds	r1, r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3304      	adds	r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4413      	add	r3, r2
 80088a2:	1e5a      	subs	r2, r3, #1
 80088a4:	4613      	mov	r3, r2
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	4413      	add	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	440b      	add	r3, r1
 80088ae:	3308      	adds	r3, #8
 80088b0:	edd3 7a00 	vldr	s15, [r3]
 80088b4:	ee77 7a27 	vadd.f32	s15, s14, s15
	ptrChanges->Fcost = ptrChanges->Gcost  // Gcost
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	edc3 7a01 	vstr	s15, [r3, #4]

	return ptrChanges->Fcost;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	ee07 3a90 	vmov	s15, r3

}
 80088c6:	eeb0 0a67 	vmov.f32	s0, s15
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <setParents>:

// Con esta funcion seteamos la posicion del parent de los aledanios,
void setParents (costChangesAndPos_t *ptrChanges, int posIJ[2]){
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
	// esta funcion es simple, ya que solo tenemos que setear de la matriz 3x3 de analisis y colocar en la posicion 4 y 5 el indice i y j correspondiente
	// al parent de cada punto aledanio, exceptuando el punto de analisis ya que ese tiene un parent propio

	if ((ptrChanges->posAnalisis[0] + posIJ[0] - 1) == ptrChanges->posAnalisis[0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4413      	add	r3, r2
 80088e4:	1e5a      	subs	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d10c      	bne.n	8008908 <setParents+0x38>
	&&  (ptrChanges->posAnalisis[1] + posIJ[1] - 1) == ptrChanges->posAnalisis[1] ){
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68da      	ldr	r2, [r3, #12]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	3304      	adds	r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4413      	add	r3, r2
 80088fa:	1e5a      	subs	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	429a      	cmp	r2, r3
 8008902:	d101      	bne.n	8008908 <setParents+0x38>
		// Aqui no hacemos nada porque significa que estamos sobre el punto de analisis, y no queremos cambiarle el parent a este
		__NOP();
 8008904:	bf00      	nop
 8008906:	e00c      	b.n	8008922 <setParents+0x52>
	}else{
		// Si estamos aqui es porque estamos en alguno de los puntos aledanios
		ptrChanges->parent[0] = ptrChanges->posAnalisis[0];
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f883 2020 	strb.w	r2, [r3, #32]
		ptrChanges->parent[1] = ptrChanges->posAnalisis[1];
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <findStart>:

// En esta funcion nos centraremos en buscar la posicion i,j donde se almacena el punto de inicio del robot
int findStart(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]

	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 's' de start
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
 800893e:	e020      	b.n	8008982 <findStart+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 8008940:	2300      	movs	r3, #0
 8008942:	75bb      	strb	r3, [r7, #22]
 8008944:	e015      	b.n	8008972 <findStart+0x44>
			if (Gridcopy[i][j] == 's'){
 8008946:	7dfa      	ldrb	r2, [r7, #23]
 8008948:	4613      	mov	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	441a      	add	r2, r3
 8008952:	7dbb      	ldrb	r3, [r7, #22]
 8008954:	5cd3      	ldrb	r3, [r2, r3]
 8008956:	2b73      	cmp	r3, #115	; 0x73
 8008958:	d107      	bne.n	800896a <findStart+0x3c>
				ptrChanges->startPos[0] = i;
 800895a:	7dfa      	ldrb	r2, [r7, #23]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	625a      	str	r2, [r3, #36]	; 0x24
				ptrChanges->startPos[1] = j;
 8008960:	7dba      	ldrb	r2, [r7, #22]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	629a      	str	r2, [r3, #40]	; 0x28
				return SET;
 8008966:	2301      	movs	r3, #1
 8008968:	e011      	b.n	800898e <findStart+0x60>
			}else{
				__NOP();
 800896a:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 800896c:	7dbb      	ldrb	r3, [r7, #22]
 800896e:	3301      	adds	r3, #1
 8008970:	75bb      	strb	r3, [r7, #22]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7a5b      	ldrb	r3, [r3, #9]
 8008976:	7dba      	ldrb	r2, [r7, #22]
 8008978:	429a      	cmp	r2, r3
 800897a:	d3e4      	bcc.n	8008946 <findStart+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	3301      	adds	r3, #1
 8008980:	75fb      	strb	r3, [r7, #23]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	7a1b      	ldrb	r3, [r3, #8]
 8008986:	7dfa      	ldrb	r2, [r7, #23]
 8008988:	429a      	cmp	r2, r3
 800898a:	d3d9      	bcc.n	8008940 <findStart+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 800898c:	2300      	movs	r3, #0



}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <findEnd>:
int findEnd(char Gridcopy[7][7], AStar_distancesHandler *parameters, costChangesAndPos_t *ptrChanges){
 800899a:	b480      	push	{r7}
 800899c:	b087      	sub	sp, #28
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607a      	str	r2, [r7, #4]


	// Buscamos dentro de la matriz Grid que corresponde con la copia que le hacemos a la matriz de strings de entrada
	// en la terminal
	// recorremos la matriz hasta encontrar la posicion correpondiente con un char 'e' de end
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80089a6:	2300      	movs	r3, #0
 80089a8:	75fb      	strb	r3, [r7, #23]
 80089aa:	e020      	b.n	80089ee <findEnd+0x54>
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80089ac:	2300      	movs	r3, #0
 80089ae:	75bb      	strb	r3, [r7, #22]
 80089b0:	e015      	b.n	80089de <findEnd+0x44>
			if (Gridcopy[i][j] == 'e'){
 80089b2:	7dfa      	ldrb	r2, [r7, #23]
 80089b4:	4613      	mov	r3, r2
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	1a9b      	subs	r3, r3, r2
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	441a      	add	r2, r3
 80089be:	7dbb      	ldrb	r3, [r7, #22]
 80089c0:	5cd3      	ldrb	r3, [r2, r3]
 80089c2:	2b65      	cmp	r3, #101	; 0x65
 80089c4:	d107      	bne.n	80089d6 <findEnd+0x3c>
				ptrChanges->endPos[0] = i;
 80089c6:	7dfa      	ldrb	r2, [r7, #23]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	62da      	str	r2, [r3, #44]	; 0x2c
				ptrChanges->endPos[1] = j;
 80089cc:	7dba      	ldrb	r2, [r7, #22]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
				return SET;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e011      	b.n	80089fa <findEnd+0x60>
			}else{
				__NOP();
 80089d6:	bf00      	nop
		for(uint8_t j = 0; j< parameters->numberOfColumns; j++){
 80089d8:	7dbb      	ldrb	r3, [r7, #22]
 80089da:	3301      	adds	r3, #1
 80089dc:	75bb      	strb	r3, [r7, #22]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	7a5b      	ldrb	r3, [r3, #9]
 80089e2:	7dba      	ldrb	r2, [r7, #22]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d3e4      	bcc.n	80089b2 <findEnd+0x18>
	for (uint8_t i = 0; i<parameters->numberOfRows; i++){
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	3301      	adds	r3, #1
 80089ec:	75fb      	strb	r3, [r7, #23]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	7a1b      	ldrb	r3, [r3, #8]
 80089f2:	7dfa      	ldrb	r2, [r7, #23]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3d9      	bcc.n	80089ac <findEnd+0x12>

		}

	}
	// Si la funcion llego hasta aca es porque no encontro dentro del arreglo ninguna letra e
	return RESET;
 80089f8:	2300      	movs	r3, #0

}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <buildMatrixCopy>:
//
//}

//Con esta funcion se reparte la memoria para la matriz de entrada desde la terminal serial

void buildMatrixCopy(AStar_distancesHandler *parameters, char terminalGrid[7][7], char Gridcopy[7][7]){
 8008a06:	b480      	push	{r7}
 8008a08:	b087      	sub	sp, #28
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]


	// Seteamos los valores dentro de la matriz infoGrid de la entrada respectiva
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008a12:	2300      	movs	r3, #0
 8008a14:	75fb      	strb	r3, [r7, #23]
 8008a16:	e03d      	b.n	8008a94 <buildMatrixCopy+0x8e>
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008a18:	2300      	movs	r3, #0
 8008a1a:	75bb      	strb	r3, [r7, #22]
 8008a1c:	e031      	b.n	8008a82 <buildMatrixCopy+0x7c>

			if (j == parameters->numberOfColumns){
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	7a5b      	ldrb	r3, [r3, #9]
 8008a22:	7dba      	ldrb	r2, [r7, #22]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d109      	bne.n	8008a3c <buildMatrixCopy+0x36>
				// Agregamos al a la posicion penultima, agregamos una terminacion de salto de linea para ipresion en consola
				Gridcopy[i][j] = '\r';
 8008a28:	7dfa      	ldrb	r2, [r7, #23]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	00db      	lsls	r3, r3, #3
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	441a      	add	r2, r3
 8008a34:	7dbb      	ldrb	r3, [r7, #22]
 8008a36:	210d      	movs	r1, #13
 8008a38:	54d1      	strb	r1, [r2, r3]
 8008a3a:	e01f      	b.n	8008a7c <buildMatrixCopy+0x76>
			}else if (j == parameters->numberOfColumns + 1){
 8008a3c:	7dba      	ldrb	r2, [r7, #22]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	7a5b      	ldrb	r3, [r3, #9]
 8008a42:	3301      	adds	r3, #1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d109      	bne.n	8008a5c <buildMatrixCopy+0x56>
				// Agregamos al final la terminacion nula para que cada fila sea un string completo
				Gridcopy[i][j] = '\0';
 8008a48:	7dfa      	ldrb	r2, [r7, #23]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	441a      	add	r2, r3
 8008a54:	7dbb      	ldrb	r3, [r7, #22]
 8008a56:	2100      	movs	r1, #0
 8008a58:	54d1      	strb	r1, [r2, r3]
 8008a5a:	e00f      	b.n	8008a7c <buildMatrixCopy+0x76>
			}else{
				Gridcopy[i][j] = terminalGrid[i][j];
 8008a5c:	7dfa      	ldrb	r2, [r7, #23]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	18d0      	adds	r0, r2, r3
 8008a68:	7db9      	ldrb	r1, [r7, #22]
 8008a6a:	7dfa      	ldrb	r2, [r7, #23]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	00db      	lsls	r3, r3, #3
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	441a      	add	r2, r3
 8008a76:	7dbb      	ldrb	r3, [r7, #22]
 8008a78:	5c41      	ldrb	r1, [r0, r1]
 8008a7a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < parameters->numberOfColumns + 2; j++){
 8008a7c:	7dbb      	ldrb	r3, [r7, #22]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	75bb      	strb	r3, [r7, #22]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	7a5b      	ldrb	r3, [r3, #9]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	7dbb      	ldrb	r3, [r7, #22]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	dac7      	bge.n	8008a1e <buildMatrixCopy+0x18>
	for (uint8_t i = 0; i < parameters->numberOfRows; i++){
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	3301      	adds	r3, #1
 8008a92:	75fb      	strb	r3, [r7, #23]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	7a1b      	ldrb	r3, [r3, #8]
 8008a98:	7dfa      	ldrb	r2, [r7, #23]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3bc      	bcc.n	8008a18 <buildMatrixCopy+0x12>
			}
		}
	}

}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	371c      	adds	r7, #28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <getRows>:



// Se define la funcion de tomar cantidad de filas recorriendo la cantidad de String que tenga el puntero de arreglos matrix hasta que se
// encuentre con el puntero nulo.
uint8_t getRows(char terminalGrid[7][7]){
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

	uint8_t counterRows = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
	char letter = '\0';
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73bb      	strb	r3, [r7, #14]
	(void)letter;
	while(terminalGrid[counterRows][0] != '\0'){
 8008abc:	e00a      	b.n	8008ad4 <getRows+0x28>
		letter = terminalGrid[counterRows][0];
 8008abe:	7bfa      	ldrb	r2, [r7, #15]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	73bb      	strb	r3, [r7, #14]
		counterRows++;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[counterRows][0] != '\0'){
 8008ad4:	7bfa      	ldrb	r2, [r7, #15]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	1a9b      	subs	r3, r3, r2
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	4413      	add	r3, r2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1eb      	bne.n	8008abe <getRows+0x12>

	}

	return counterRows;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <getColums>:

//Se define la funcion de tomar cantidad de columnas recorriendo el string hasta encontrar el elemento nulo char
uint8_t getColums(char terminalGrid[7][7]){
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]

	uint8_t counterColumns = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008b00:	e002      	b.n	8008b08 <getColums+0x14>

		counterColumns++;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	3301      	adds	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
	while(terminalGrid[0][counterColumns] != '\0'){
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	5cd3      	ldrb	r3, [r2, r3]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f7      	bne.n	8008b02 <getColums+0xe>

	}

	return counterColumns;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <findLesserValue>:

// esta funcion nos almacena en uno de los arrays volatiles de la estructura costChangesAndPos_t la posicion del valor Fcost o H cost mas pequeño,
// Se debe identificar con un string si se quiere hallar el Fcost mas pequeño o el Hcost mas pequeño, asi, "Fcost" si se quiere hallar el F cost o
// "Hcost" si se quiere hallar el H cost
void findLesserValue(costChangesAndPos_t *ptrChanges, float decisionMtrx[500][4], uint8_t contador){
 8008b20:	b480      	push	{r7}
 8008b22:	b089      	sub	sp, #36	; 0x24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	71fb      	strb	r3, [r7, #7]
	// seteamos las variables locales
	uint8_t i;
	uint8_t j;
	float value_1 = 0;
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	61bb      	str	r3, [r7, #24]
	float value_2 = 0;
 8008b34:	f04f 0300 	mov.w	r3, #0
 8008b38:	617b      	str	r3, [r7, #20]

	// El algoritmo que se usará es que se recorrerá cada una de las posiciones y se analizara con las demas , excpliyendo obviamente
	// la posicion central


	for(i = 0; i<contador ; i++){
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	77fb      	strb	r3, [r7, #31]
 8008b3e:	e04d      	b.n	8008bdc <findLesserValue+0xbc>
		for(j = 0; j<contador ; j++){
 8008b40:	2300      	movs	r3, #0
 8008b42:	77bb      	strb	r3, [r7, #30]
 8008b44:	e034      	b.n	8008bb0 <findLesserValue+0x90>
			if (i == j){
 8008b46:	7ffa      	ldrb	r2, [r7, #31]
 8008b48:	7fbb      	ldrb	r3, [r7, #30]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d101      	bne.n	8008b52 <findLesserValue+0x32>
				// Si estamos aqui es porque estamos analizando el mismo punto, y nosotros queremos es analizar a sus compañeros solamente
				__NOP();
 8008b4e:	bf00      	nop
 8008b50:	e02b      	b.n	8008baa <findLesserValue+0x8a>
			}else if (decisionMtrx[i][0]
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	ed93 7a00 	vldr	s14, [r3]
					< decisionMtrx[j][0]){
 8008b5e:	7fbb      	ldrb	r3, [r7, #30]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8008b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	d41a      	bmi.n	8008baa <findLesserValue+0x8a>
				// Si estamos aca es porque podemos hacer la comparación
				// Si estamos aca es porque efectivamente el Fcost es menor, Solo dejamos pasar el ciclo para asegurarnos de que el j
				// pueda llegar hasta su valor final permitido
			}else if (decisionMtrx[i][0]
 8008b74:	7ffb      	ldrb	r3, [r7, #31]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	ed93 7a00 	vldr	s14, [r3]
				   == decisionMtrx[j][0]){
 8008b80:	7fbb      	ldrb	r3, [r7, #30]
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4413      	add	r3, r2
 8008b88:	edd3 7a00 	vldr	s15, [r3]
			}else if (decisionMtrx[i][0]
 8008b8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8008b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b94:	d104      	bne.n	8008ba0 <findLesserValue+0x80>
				// Si estamos aqui es porque el programa encontro mas de un  minimo un valor igual al analizado
				ptrChanges->equalFcost = SET;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b9e:	e004      	b.n	8008baa <findLesserValue+0x8a>
			}else{
				// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
				// Se resetea la bandera que decia que habia un vakor igual, esto debe de ser solo cierto si el valor que es
				// igual es el menor de la matriz
				ptrChanges->equalFcost = RESET;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				break;
 8008ba8:	e006      	b.n	8008bb8 <findLesserValue+0x98>
		for(j = 0; j<contador ; j++){
 8008baa:	7fbb      	ldrb	r3, [r7, #30]
 8008bac:	3301      	adds	r3, #1
 8008bae:	77bb      	strb	r3, [r7, #30]
 8008bb0:	7fba      	ldrb	r2, [r7, #30]
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d3c6      	bcc.n	8008b46 <findLesserValue+0x26>
			}

		}//Terminacion de un for
		if (j == contador){
 8008bb8:	7fba      	ldrb	r2, [r7, #30]
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d10a      	bne.n	8008bd6 <findLesserValue+0xb6>
			// Si entramos en esta condicion es porque el contador j logro llegar a su posicion final
			// Si entramos aqui es porque se logro analizar todo el arreglo y se encontro la posicion que corresponde con el Fcost mas pequeño
			// de todos, tambien guardamos el valor mas pequeño, si este se repite, se sabra gracias a la bandera
			// La posicion mas pequeña del F cost corresponde con la que se etsaba analizando en la posición i
			ptrChanges->lesserFcostPosition = i;
 8008bc0:	7ffa      	ldrb	r2, [r7, #31]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	635a      	str	r2, [r3, #52]	; 0x34
			// Almacenamos en lesserFcost el valor de ese Fcost mas pequeño que se hallo
			ptrChanges->lesserFcost = decisionMtrx[i][0];
 8008bc6:	7ffb      	ldrb	r3, [r7, #31]
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	4413      	add	r3, r2
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40
			// paramos el primer for
			break;
 8008bd4:	e006      	b.n	8008be4 <findLesserValue+0xc4>
	for(i = 0; i<contador ; i++){
 8008bd6:	7ffb      	ldrb	r3, [r7, #31]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	7ffa      	ldrb	r2, [r7, #31]
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d3ad      	bcc.n	8008b40 <findLesserValue+0x20>

	}//Terminacion del otro for


	// Ahora hallaremos el valor mas pequeño de H cost, solo en el caso de que la bandera correspondiente se haya levantado
	if (ptrChanges->equalFcost){
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d076      	beq.n	8008cdc <findLesserValue+0x1bc>
		// Si estamos aqui es porque si hay mas de un valor de F cost que corresponde con el valor mas pequeño, desempatamos buscando el Hcost mas pequeño
		// Para ello recorreremos la matriz a analizar de nuevo pero esta vez solo buscando aquellos valores que correspondan con el valor hallado de Fcost

		for(i = 0; i<contador ; i++){
 8008bee:	2300      	movs	r3, #0
 8008bf0:	77fb      	strb	r3, [r7, #31]
 8008bf2:	e06e      	b.n	8008cd2 <findLesserValue+0x1b2>
			value_1 = decisionMtrx[i][0] / ptrChanges->lesserFcost;
 8008bf4:	7ffb      	ldrb	r3, [r7, #31]
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	edd3 6a00 	vldr	s13, [r3]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c0a:	edc7 7a06 	vstr	s15, [r7, #24]
			for(j = 0; j<contador ; j++){
 8008c0e:	2300      	movs	r3, #0
 8008c10:	77bb      	strb	r3, [r7, #30]
 8008c12:	e045      	b.n	8008ca0 <findLesserValue+0x180>
				value_2 = decisionMtrx[j][0] / ptrChanges->lesserFcost;
 8008c14:	7fbb      	ldrb	r3, [r7, #30]
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	edd3 6a00 	vldr	s13, [r3]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c2a:	edc7 7a05 	vstr	s15, [r7, #20]
 				if (i == j){
 8008c2e:	7ffa      	ldrb	r2, [r7, #31]
 8008c30:	7fbb      	ldrb	r3, [r7, #30]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d101      	bne.n	8008c3a <findLesserValue+0x11a>
					// Si estamos aqui es porque estamos analizando la posición de analisis, por lo que lo ignoramos
					__NOP();
 8008c36:	bf00      	nop
 8008c38:	e02f      	b.n	8008c9a <findLesserValue+0x17a>
				}else if (value_1 == 1 && value_2 == 1){
 8008c3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c42:	eef4 7a47 	vcmp.f32	s15, s14
 8008c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c4a:	d11c      	bne.n	8008c86 <findLesserValue+0x166>
 8008c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c54:	eef4 7a47 	vcmp.f32	s15, s14
 8008c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5c:	d113      	bne.n	8008c86 <findLesserValue+0x166>
					// Si estamos aca es porque podemos hacer la comparación pero esta vez con la matriz heuristica
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8008c5e:	7ffb      	ldrb	r3, [r7, #31]
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	ed93 7a01 	vldr	s14, [r3, #4]
 8008c6a:	7fbb      	ldrb	r3, [r7, #30]
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4413      	add	r3, r2
 8008c72:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7e:	d900      	bls.n	8008c82 <findLesserValue+0x162>
						// Si estamos aca es porque efectivamente el Hcost es menor o igual al resto de Hcost
						__NOP();
					}else{
						// Si estamos aqui es porque el programa hallo almenos un valor menor al analizado, por lo que no nos sirve
						break;
 8008c80:	e014      	b.n	8008cac <findLesserValue+0x18c>
						__NOP();
 8008c82:	bf00      	nop
					if (decisionMtrx[i][1] <= decisionMtrx[j][1]){
 8008c84:	e009      	b.n	8008c9a <findLesserValue+0x17a>
					}
				}else if (value_1 == 1){
 8008c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c8e:	eef4 7a47 	vcmp.f32	s15, s14
 8008c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c96:	d108      	bne.n	8008caa <findLesserValue+0x18a>
					// Si estamos aqui es porque aun podemos seguir comparando, por lo que el algoritmo debe de seguir bucando a sus iguales
					__NOP();
 8008c98:	bf00      	nop
			for(j = 0; j<contador ; j++){
 8008c9a:	7fbb      	ldrb	r3, [r7, #30]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	77bb      	strb	r3, [r7, #30]
 8008ca0:	7fba      	ldrb	r2, [r7, #30]
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d3b5      	bcc.n	8008c14 <findLesserValue+0xf4>
 8008ca8:	e000      	b.n	8008cac <findLesserValue+0x18c>
				}else {
					// Estamos en un valor que no nos interesa evaluar, por lo que lo ignoramos y salimos
					break;
 8008caa:	bf00      	nop
				}

			}//Terminacion de un for
			if (j == contador){
 8008cac:	7fba      	ldrb	r2, [r7, #30]
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d10b      	bne.n	8008ccc <findLesserValue+0x1ac>
				// Si entramos aqui es porque se logro analizar toda la matriz y se encontro la posicion que corresponde con la posicion mas pequeña
				// de todas, tambien guardamos el valor mas pequeño, es muy poco probable, por no decir imposible que tengamos una misma heuristica
				//repetida
				ptrChanges->lesserHcostPosition = i;
 8008cb4:	7ffa      	ldrb	r2, [r7, #31]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	639a      	str	r2, [r3, #56]	; 0x38
				//Almacenamos en lesserHcost el valor del Hcost mas pequeño encontrado
				ptrChanges->lesserHcost = decisionMtrx[i][1];
 8008cba:	7ffb      	ldrb	r3, [r7, #31]
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	645a      	str	r2, [r3, #68]	; 0x44
				// Paramos el primer for
				break;
 8008cc8:	bf00      	nop
	}else{
		// Si estamos aca es porque no se alzo la bandera que indica que hay mas de un F cost igual por lo que no hacemos nada
		__NOP();
	}

}
 8008cca:	e008      	b.n	8008cde <findLesserValue+0x1be>
		for(i = 0; i<contador ; i++){
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	7ffa      	ldrb	r2, [r7, #31]
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d38c      	bcc.n	8008bf4 <findLesserValue+0xd4>
}
 8008cda:	e000      	b.n	8008cde <findLesserValue+0x1be>
		__NOP();
 8008cdc:	bf00      	nop
}
 8008cde:	bf00      	nop
 8008ce0:	3724      	adds	r7, #36	; 0x24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
	...

08008cec <initSerialComunication>:
	// Liberamos el arreglo de punteros
	free(shorterWayArray);

}
// Con las siguientes funciones inicializamos a los handler necesarios para poder usar la comunicacion serial desde aqui y no desde el main
void initSerialComunication (USART_Handler_t *ptrHandlerUsart, GPIO_Handler_t *ptrHandlerRx, GPIO_Handler_t *ptrHandlerTx){
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]

	// Inicializamos para el modulo Usart, no se necesita configurar ya que ya en el main se configuro con el handler específico
	handlerAstarUsart.ptrUSARTx                      = ptrHandlerUsart->ptrUSARTx;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a2d      	ldr	r2, [pc, #180]	; (8008db4 <initSerialComunication+0xc8>)
 8008cfe:	6013      	str	r3, [r2, #0]
	handlerAstarUsart.USART_Config.USART_MCUvelocity = ptrHandlerUsart->USART_Config.USART_MCUvelocity;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4a2b      	ldr	r2, [pc, #172]	; (8008db4 <initSerialComunication+0xc8>)
 8008d06:	60d3      	str	r3, [r2, #12]
	handlerAstarUsart.USART_Config.USART_baudrate    = ptrHandlerUsart->USART_Config.USART_baudrate;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	79da      	ldrb	r2, [r3, #7]
 8008d0c:	4b29      	ldr	r3, [pc, #164]	; (8008db4 <initSerialComunication+0xc8>)
 8008d0e:	71da      	strb	r2, [r3, #7]
	handlerAstarUsart.USART_Config.USART_enableInTx  = ptrHandlerUsart->USART_Config.USART_enableInTx;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	791a      	ldrb	r2, [r3, #4]
 8008d14:	4b27      	ldr	r3, [pc, #156]	; (8008db4 <initSerialComunication+0xc8>)
 8008d16:	711a      	strb	r2, [r3, #4]
	handlerAstarUsart.USART_Config.USART_mode        = ptrHandlerUsart->USART_Config.USART_mode;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	799a      	ldrb	r2, [r3, #6]
 8008d1c:	4b25      	ldr	r3, [pc, #148]	; (8008db4 <initSerialComunication+0xc8>)
 8008d1e:	719a      	strb	r2, [r3, #6]
	handlerAstarUsart.USART_Config.USART_parity      = ptrHandlerUsart->USART_Config.USART_parity;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	7a5a      	ldrb	r2, [r3, #9]
 8008d24:	4b23      	ldr	r3, [pc, #140]	; (8008db4 <initSerialComunication+0xc8>)
 8008d26:	725a      	strb	r2, [r3, #9]
	handlerAstarUsart.USART_Config.USART_stopbits    = ptrHandlerUsart->USART_Config.USART_stopbits;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	7a9a      	ldrb	r2, [r3, #10]
 8008d2c:	4b21      	ldr	r3, [pc, #132]	; (8008db4 <initSerialComunication+0xc8>)
 8008d2e:	729a      	strb	r2, [r3, #10]
	handlerAstarUsart.USART_Config.USART_datasize    = ptrHandlerUsart->USART_Config.USART_datasize;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	7a1a      	ldrb	r2, [r3, #8]
 8008d34:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <initSerialComunication+0xc8>)
 8008d36:	721a      	strb	r2, [r3, #8]

	// Hacemos lo mismo con los pines Rx y Tx del GPIO
	handlerAstarPinRx.pGPIOx                             = ptrHandlerRx->pGPIOx;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a1e      	ldr	r2, [pc, #120]	; (8008db8 <initSerialComunication+0xcc>)
 8008d3e:	6013      	str	r3, [r2, #0]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerRx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	7a5a      	ldrb	r2, [r3, #9]
 8008d44:	4b1c      	ldr	r3, [pc, #112]	; (8008db8 <initSerialComunication+0xcc>)
 8008d46:	725a      	strb	r2, [r3, #9]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerRx->GPIO_PinConfig.GPIO_PinMode;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	795a      	ldrb	r2, [r3, #5]
 8008d4c:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <initSerialComunication+0xcc>)
 8008d4e:	715a      	strb	r2, [r3, #5]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinOPType;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	7a1a      	ldrb	r2, [r3, #8]
 8008d54:	4b18      	ldr	r3, [pc, #96]	; (8008db8 <initSerialComunication+0xcc>)
 8008d56:	721a      	strb	r2, [r3, #8]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerRx->GPIO_PinConfig.GPIO_PinNumber;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	791a      	ldrb	r2, [r3, #4]
 8008d5c:	4b16      	ldr	r3, [pc, #88]	; (8008db8 <initSerialComunication+0xcc>)
 8008d5e:	711a      	strb	r2, [r3, #4]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerRx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	79da      	ldrb	r2, [r3, #7]
 8008d64:	4b14      	ldr	r3, [pc, #80]	; (8008db8 <initSerialComunication+0xcc>)
 8008d66:	71da      	strb	r2, [r3, #7]
	handlerAstarPinRx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerRx->GPIO_PinConfig.GPIO_PinSpeed;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	799a      	ldrb	r2, [r3, #6]
 8008d6c:	4b12      	ldr	r3, [pc, #72]	; (8008db8 <initSerialComunication+0xcc>)
 8008d6e:	719a      	strb	r2, [r3, #6]

	handlerAstarPinTx.pGPIOx                             = ptrHandlerTx->pGPIOx;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a11      	ldr	r2, [pc, #68]	; (8008dbc <initSerialComunication+0xd0>)
 8008d76:	6013      	str	r3, [r2, #0]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinAltFunMode  = ptrHandlerTx->GPIO_PinConfig.GPIO_PinAltFunMode;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7a5a      	ldrb	r2, [r3, #9]
 8008d7c:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <initSerialComunication+0xd0>)
 8008d7e:	725a      	strb	r2, [r3, #9]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinMode        = ptrHandlerTx->GPIO_PinConfig.GPIO_PinMode;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	795a      	ldrb	r2, [r3, #5]
 8008d84:	4b0d      	ldr	r3, [pc, #52]	; (8008dbc <initSerialComunication+0xd0>)
 8008d86:	715a      	strb	r2, [r3, #5]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinOPType      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinOPType;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7a1a      	ldrb	r2, [r3, #8]
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <initSerialComunication+0xd0>)
 8008d8e:	721a      	strb	r2, [r3, #8]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinNumber      = ptrHandlerTx->GPIO_PinConfig.GPIO_PinNumber;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	791a      	ldrb	r2, [r3, #4]
 8008d94:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <initSerialComunication+0xd0>)
 8008d96:	711a      	strb	r2, [r3, #4]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinPuPdControl = ptrHandlerTx->GPIO_PinConfig.GPIO_PinPuPdControl;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	79da      	ldrb	r2, [r3, #7]
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <initSerialComunication+0xd0>)
 8008d9e:	71da      	strb	r2, [r3, #7]
	handlerAstarPinTx.GPIO_PinConfig.GPIO_PinSpeed       = ptrHandlerTx->GPIO_PinConfig.GPIO_PinSpeed;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	799a      	ldrb	r2, [r3, #6]
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <initSerialComunication+0xd0>)
 8008da6:	719a      	strb	r2, [r3, #6]

	// Ya seteados estos handler en teoria podriamos mandar por terminarl serial desde este .c

}
 8008da8:	bf00      	nop
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	2000d5c8 	.word	0x2000d5c8
 8008db8:	2000d65c 	.word	0x2000d65c
 8008dbc:	2000d668 	.word	0x2000d668

08008dc0 <create_Astar_operations>:
void create_Astar_operations(AStar_distancesHandler *parameters,
					   int shorterWayArray[100][2],
					   Parameters_Operation_t prtList[30],
					   Parameter_build_t *ptrbuild,
					   Parameters_Path_t *ptrPath,
					   Parameters_Position_t *ptrPos){
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08e      	sub	sp, #56	; 0x38
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
	// Aqui se va a suponer que donde se resetea el robot es el (0,0) de coordenadas y que su vector directos esta a 0 grados con respecto
	// al eje X, por lo que se puede colocar el robot como sea en la posicion inicial y este calculara sus operaciones dependiendo
	// de su posicion inicial


	double finishline_x = 0;
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	f04f 0300 	mov.w	r3, #0
 8008dd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double finishline_y = 0;
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dist_to_x = 0;
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dist_to_y = 0;
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ptrPath->start_position_x = ptrbuild->initline_x = 0;
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9c1 2300 	strd	r2, r3, [r1]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e14:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrPath->start_position_y = ptrbuild->initline_y = 0; //posicion de start, considerada como (0,0)
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e2e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	// calculo del vector unitario del robot


	unitary_vector(ptrPos->rad_global, ptrbuild->delta_before);
 8008e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e34:	ed93 7b04 	vldr	d7, [r3, #16]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	3310      	adds	r3, #16
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	eeb0 0a47 	vmov.f32	s0, s14
 8008e42:	eef0 0a67 	vmov.f32	s1, s15
 8008e46:	f002 febd 	bl	800bbc4 <unitary_vector>




	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e50:	e06f      	b.n	8008f32 <create_Astar_operations+0x172>

		// Seteamos como punto inicial el punto de start y como punto final el siguiente punto a ir

		dist_to_y = -(shorterWayArray[i+1][0] - shorterWayArray[i][0]) * parameters->parallelDistance;
 8008e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e56:	00db      	lsls	r3, r3, #3
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e62:	3301      	adds	r3, #1
 8008e64:	00db      	lsls	r3, r3, #3
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	440b      	add	r3, r1
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	edd3 7a00 	vldr	s15, [r3]
 8008e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e80:	ee17 0a90 	vmov	r0, s15
 8008e84:	f7f7 fb78 	bl	8000578 <__aeabi_f2d>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dist_to_x = (shorterWayArray[i+1][1] - shorterWayArray[i][1]) * parameters->parallelDistance;
 8008e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e94:	3301      	adds	r3, #1
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	440b      	add	r3, r1
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	edd3 7a00 	vldr	s15, [r3]
 8008eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebe:	ee17 0a90 	vmov	r0, s15
 8008ec2:	f7f7 fb59 	bl	8000578 <__aeabi_f2d>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9c7 2306 	strd	r2, r3, [r7, #24]

		finishline_x += dist_to_x; // Coordenada x a ir
 8008ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ed2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008ed6:	f7f7 f9f1 	bl	80002bc <__adddf3>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		finishline_y += dist_to_y; // Coordenada y a ir
 8008ee2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ee6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008eea:	f7f7 f9e7 	bl	80002bc <__adddf3>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		ptrPath->goal_Position_x = finishline_x;
 8008ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ef8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008efc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		ptrPath->goal_Position_y = finishline_y;
 8008f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f06:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		build_Operation(prtList, ptrbuild, finishline_x, finishline_y); // Agregamos la operación respectiva ya sea si se tiene que rotar o si
 8008f0a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8008f0e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f002 fae7 	bl	800b4e8 <build_Operation>

		change_coordinates_position(ptrPath, finishline_x, finishline_y); // Cambiamos de coordenada teorica para seguir construyendo el camino
 8008f1a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8008f1e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8008f22:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f24:	f002 fbc4 	bl	800b6b0 <change_coordinates_position>
	for (uint8_t i = 0 ; i < parameters->numberOfElements - 1 ; i++){
 8008f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	7a9b      	ldrb	r3, [r3, #10]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	db88      	blt.n	8008e52 <create_Astar_operations+0x92>

	}


	// Agregamos la operacion nula
	add_Operation(prtList, ptrbuild->number_operation, NULL_OPERATION, 0, 0, 0);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f46:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8008f70 <create_Astar_operations+0x1b0>
 8008f4a:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8008f70 <create_Astar_operations+0x1b0>
 8008f4e:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8008f70 <create_Astar_operations+0x1b0>
 8008f52:	2200      	movs	r2, #0
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f002 fb66 	bl	800b628 <add_Operation>
	ptrbuild->number_operation = 0;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


}
 8008f64:	bf00      	nop
 8008f66:	3738      	adds	r7, #56	; 0x38
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	f3af 8000 	nop.w
	...

08008f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	db0b      	blt.n	8008fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	f003 021f 	and.w	r2, r3, #31
 8008f90:	4907      	ldr	r1, [pc, #28]	; (8008fb0 <__NVIC_EnableIRQ+0x38>)
 8008f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	2001      	movs	r0, #1
 8008f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8008f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	e000e100 	.word	0xe000e100

08008fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	db0a      	blt.n	8008fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	490c      	ldr	r1, [pc, #48]	; (8009000 <__NVIC_SetPriority+0x4c>)
 8008fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd2:	0112      	lsls	r2, r2, #4
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fdc:	e00a      	b.n	8008ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	4908      	ldr	r1, [pc, #32]	; (8009004 <__NVIC_SetPriority+0x50>)
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	3b04      	subs	r3, #4
 8008fec:	0112      	lsls	r2, r2, #4
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	761a      	strb	r2, [r3, #24]
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	e000e100 	.word	0xe000e100
 8009004:	e000ed00 	.word	0xe000ed00

08009008 <inTIM4>:
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */


void inTIM4(void){
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0

	//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

	////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

	handlerTIM4_time.ptrTIMx                           = TIM4;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <inTIM4+0x30>)
 800900e:	4a0b      	ldr	r2, [pc, #44]	; (800903c <inTIM4+0x34>)
 8009010:	601a      	str	r2, [r3, #0]
	handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <inTIM4+0x30>)
 8009014:	2200      	movs	r2, #0
 8009016:	741a      	strb	r2, [r3, #16]
	handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <inTIM4+0x30>)
 800901a:	2200      	movs	r2, #0
 800901c:	711a      	strb	r2, [r3, #4]
	handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <inTIM4+0x30>)
 8009020:	f242 7210 	movw	r2, #10000	; 0x2710
 8009024:	609a      	str	r2, [r3, #8]
	handlerTIM4_time.TIMx_Config.TIMx_period           = 10;
 8009026:	4b04      	ldr	r3, [pc, #16]	; (8009038 <inTIM4+0x30>)
 8009028:	220a      	movs	r2, #10
 800902a:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerTIM4_time);
 800902c:	4802      	ldr	r0, [pc, #8]	; (8009038 <inTIM4+0x30>)
 800902e:	f000 f807 	bl	8009040 <BasicTimer_Config>

}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000338 	.word	0x20000338
 800903c:	40000800 	.word	0x40000800

08009040 <BasicTimer_Config>:

void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009050:	b672      	cpsid	i
}
 8009052:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a85      	ldr	r2, [pc, #532]	; (8009270 <BasicTimer_Config+0x230>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d106      	bne.n	800906c <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800905e:	4b85      	ldr	r3, [pc, #532]	; (8009274 <BasicTimer_Config+0x234>)
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	4a84      	ldr	r2, [pc, #528]	; (8009274 <BasicTimer_Config+0x234>)
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	6453      	str	r3, [r2, #68]	; 0x44
 800906a:	e030      	b.n	80090ce <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009074:	d106      	bne.n	8009084 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8009076:	4b7f      	ldr	r3, [pc, #508]	; (8009274 <BasicTimer_Config+0x234>)
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	4a7e      	ldr	r2, [pc, #504]	; (8009274 <BasicTimer_Config+0x234>)
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	6413      	str	r3, [r2, #64]	; 0x40
 8009082:	e024      	b.n	80090ce <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a7b      	ldr	r2, [pc, #492]	; (8009278 <BasicTimer_Config+0x238>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d106      	bne.n	800909c <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800908e:	4b79      	ldr	r3, [pc, #484]	; (8009274 <BasicTimer_Config+0x234>)
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	4a78      	ldr	r2, [pc, #480]	; (8009274 <BasicTimer_Config+0x234>)
 8009094:	f043 0302 	orr.w	r3, r3, #2
 8009098:	6413      	str	r3, [r2, #64]	; 0x40
 800909a:	e018      	b.n	80090ce <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a76      	ldr	r2, [pc, #472]	; (800927c <BasicTimer_Config+0x23c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d106      	bne.n	80090b4 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80090a6:	4b73      	ldr	r3, [pc, #460]	; (8009274 <BasicTimer_Config+0x234>)
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	4a72      	ldr	r2, [pc, #456]	; (8009274 <BasicTimer_Config+0x234>)
 80090ac:	f043 0304 	orr.w	r3, r3, #4
 80090b0:	6413      	str	r3, [r2, #64]	; 0x40
 80090b2:	e00c      	b.n	80090ce <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a71      	ldr	r2, [pc, #452]	; (8009280 <BasicTimer_Config+0x240>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d106      	bne.n	80090cc <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80090be:	4b6d      	ldr	r3, [pc, #436]	; (8009274 <BasicTimer_Config+0x234>)
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	4a6c      	ldr	r2, [pc, #432]	; (8009274 <BasicTimer_Config+0x234>)
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	6413      	str	r3, [r2, #64]	; 0x40
 80090ca:	e000      	b.n	80090ce <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 80090cc:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80090dc:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6892      	ldr	r2, [r2, #8]
 80090e6:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	791b      	ldrb	r3, [r3, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 80d3 	bne.w	8009298 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f022 0210 	bic.w	r2, r2, #16
 8009100:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2ba0      	cmp	r3, #160	; 0xa0
 800910c:	d022      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2bc8      	cmp	r3, #200	; 0xc8
 8009112:	d01f      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800911a:	d01b      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009122:	d017      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800912a:	d013      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009132:	d00f      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800913a:	d00b      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009142:	d007      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800914a:	d003      	beq.n	8009154 <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009152:	d10b      	bne.n	800916c <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	2264      	movs	r2, #100	; 0x64
 800915a:	fb02 f303 	mul.w	r3, r2, r3
 800915e:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	3a01      	subs	r2, #1
 8009168:	62da      	str	r2, [r3, #44]	; 0x2c
 800916a:	e07c      	b.n	8009266 <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009172:	d029      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800917a:	d025      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009182:	4293      	cmp	r3, r2
 8009184:	d020      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800918c:	d01c      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f241 3288 	movw	r2, #5000	; 0x1388
 8009194:	4293      	cmp	r3, r2
 8009196:	d017      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f241 7270 	movw	r2, #6000	; 0x1770
 800919e:	4293      	cmp	r3, r2
 80091a0:	d012      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00d      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80091b2:	d009      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f242 3228 	movw	r2, #9000	; 0x2328
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d004      	beq.n	80091c8 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d10c      	bne.n	80091e2 <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	3a01      	subs	r2, #1
 80091de:	62da      	str	r2, [r3, #44]	; 0x2c
 80091e0:	e041      	b.n	8009266 <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80091e8:	d028      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f644 6220 	movw	r2, #20000	; 0x4e20
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d023      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f247 5230 	movw	r2, #30000	; 0x7530
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01e      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	f649 4240 	movw	r2, #40000	; 0x9c40
 8009204:	4293      	cmp	r3, r2
 8009206:	d019      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800920e:	4293      	cmp	r3, r2
 8009210:	d014      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009218:	4293      	cmp	r3, r2
 800921a:	d00f      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4a19      	ldr	r2, [pc, #100]	; (8009284 <BasicTimer_Config+0x244>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d00b      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4a18      	ldr	r2, [pc, #96]	; (8009288 <BasicTimer_Config+0x248>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d007      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4a17      	ldr	r2, [pc, #92]	; (800928c <BasicTimer_Config+0x24c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d003      	beq.n	800923c <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4a16      	ldr	r2, [pc, #88]	; (8009290 <BasicTimer_Config+0x250>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d108      	bne.n	800924e <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	3a01      	subs	r2, #1
 800924a:	62da      	str	r2, [r3, #44]	; 0x2c
 800924c:	e00b      	b.n	8009266 <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	4a10      	ldr	r2, [pc, #64]	; (8009294 <BasicTimer_Config+0x254>)
 8009254:	fba2 2303 	umull	r2, r3, r2, r3
 8009258:	08db      	lsrs	r3, r3, #3
 800925a:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	3a01      	subs	r2, #1
 8009264:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	625a      	str	r2, [r3, #36]	; 0x24
 800926e:	e027      	b.n	80092c0 <BasicTimer_Config+0x280>
 8009270:	40010000 	.word	0x40010000
 8009274:	40023800 	.word	0x40023800
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800
 8009280:	40000c00 	.word	0x40000c00
 8009284:	00011170 	.word	0x00011170
 8009288:	00013880 	.word	0x00013880
 800928c:	00015f90 	.word	0x00015f90
 8009290:	000186a0 	.word	0x000186a0
 8009294:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0210 	orr.w	r2, r2, #16
 80092a6:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68da      	ldr	r2, [r3, #12]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3a01      	subs	r2, #1
 80092b2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3a01      	subs	r2, #1
 80092be:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	if (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable == BTIMER_ENABLE_INTERRUPT){
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7c1b      	ldrb	r3, [r3, #16]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d12d      	bne.n	8009324 <BasicTimer_Config+0x2e4>

		ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	60da      	str	r2, [r3, #12]

		/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

		if(ptrBTimerHandler->ptrTIMx == TIM2){
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e0:	d103      	bne.n	80092ea <BasicTimer_Config+0x2aa>
			// Activando en NVIC para la interrupción del TIM2
			NVIC_EnableIRQ(TIM2_IRQn);
 80092e2:	201c      	movs	r0, #28
 80092e4:	f7ff fe48 	bl	8008f78 <__NVIC_EnableIRQ>
 80092e8:	e024      	b.n	8009334 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a14      	ldr	r2, [pc, #80]	; (8009340 <BasicTimer_Config+0x300>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d103      	bne.n	80092fc <BasicTimer_Config+0x2bc>
			// Activando en NVIC para la interrupción del TIM3
			NVIC_EnableIRQ(TIM3_IRQn);
 80092f4:	201d      	movs	r0, #29
 80092f6:	f7ff fe3f 	bl	8008f78 <__NVIC_EnableIRQ>
 80092fa:	e01b      	b.n	8009334 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a10      	ldr	r2, [pc, #64]	; (8009344 <BasicTimer_Config+0x304>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d103      	bne.n	800930e <BasicTimer_Config+0x2ce>
			// Activando en NVIC para la interrupción del TIM4
			NVIC_EnableIRQ(TIM4_IRQn);
 8009306:	201e      	movs	r0, #30
 8009308:	f7ff fe36 	bl	8008f78 <__NVIC_EnableIRQ>
 800930c:	e012      	b.n	8009334 <BasicTimer_Config+0x2f4>
		}
		else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a0d      	ldr	r2, [pc, #52]	; (8009348 <BasicTimer_Config+0x308>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d103      	bne.n	8009320 <BasicTimer_Config+0x2e0>
			// Activando en NVIC para la interrupción del TIM5
			NVIC_EnableIRQ(TIM5_IRQn);
 8009318:	2032      	movs	r0, #50	; 0x32
 800931a:	f7ff fe2d 	bl	8008f78 <__NVIC_EnableIRQ>
 800931e:	e009      	b.n	8009334 <BasicTimer_Config+0x2f4>
		}
		else{
			__NOP();
 8009320:	bf00      	nop
 8009322:	e007      	b.n	8009334 <BasicTimer_Config+0x2f4>
		}


	}else{
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0201 	bic.w	r2, r2, #1
 8009332:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8009334:	b662      	cpsie	i
}
 8009336:	bf00      	nop
	}


	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8009338:	bf00      	nop
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00

0800934c <delay_ms>:

void delay_ms(uint16_t time_to_wait_ms){
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8009356:	4818      	ldr	r0, [pc, #96]	; (80093b8 <delay_ms+0x6c>)
 8009358:	f000 fab8 	bl	80098cc <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	461a      	mov	r2, r3
 8009360:	0092      	lsls	r2, r2, #2
 8009362:	4413      	add	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8009370:	e016      	b.n	80093a0 <delay_ms+0x54>
		if (handlerTIM4_time.ptrTIMx->SR & TIM_SR_UIF)  {
 8009372:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <delay_ms+0x6c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00f      	beq.n	80093a0 <delay_ms+0x54>
			CNT += handlerTIM4_time.ptrTIMx->ARR + 1;
 8009380:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <delay_ms+0x6c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	3301      	adds	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	89fb      	ldrh	r3, [r7, #14]
 800938c:	4413      	add	r3, r2
 800938e:	81fb      	strh	r3, [r7, #14]
			handlerTIM4_time.ptrTIMx->SR &= ~TIM_SR_UIF;
 8009390:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <delay_ms+0x6c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691a      	ldr	r2, [r3, #16]
 8009396:	4b08      	ldr	r3, [pc, #32]	; (80093b8 <delay_ms+0x6c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	611a      	str	r2, [r3, #16]
	while (CNT < limit){
 80093a0:	89fa      	ldrh	r2, [r7, #14]
 80093a2:	89bb      	ldrh	r3, [r7, #12]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d3e4      	bcc.n	8009372 <delay_ms+0x26>
		}
	}
	stopTimer(&handlerTIM4_time);
 80093a8:	4803      	ldr	r0, [pc, #12]	; (80093b8 <delay_ms+0x6c>)
 80093aa:	f000 faa1 	bl	80098f0 <stopTimer>
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000338 	.word	0x20000338

080093bc <TIM_SetPriority>:


void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 80093c8:	b672      	cpsid	i
}
 80093ca:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d4:	d105      	bne.n	80093e2 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	4619      	mov	r1, r3
 80093da:	201c      	movs	r0, #28
 80093dc:	f7ff fdea 	bl	8008fb4 <__NVIC_SetPriority>
 80093e0:	e021      	b.n	8009426 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a13      	ldr	r2, [pc, #76]	; (8009434 <TIM_SetPriority+0x78>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d105      	bne.n	80093f8 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	4619      	mov	r1, r3
 80093f0:	201d      	movs	r0, #29
 80093f2:	f7ff fddf 	bl	8008fb4 <__NVIC_SetPriority>
 80093f6:	e016      	b.n	8009426 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a0e      	ldr	r2, [pc, #56]	; (8009438 <TIM_SetPriority+0x7c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d105      	bne.n	800940e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	4619      	mov	r1, r3
 8009406:	201e      	movs	r0, #30
 8009408:	f7ff fdd4 	bl	8008fb4 <__NVIC_SetPriority>
 800940c:	e00b      	b.n	8009426 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a0a      	ldr	r2, [pc, #40]	; (800943c <TIM_SetPriority+0x80>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d105      	bne.n	8009424 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	4619      	mov	r1, r3
 800941c:	2032      	movs	r0, #50	; 0x32
 800941e:	f7ff fdc9 	bl	8008fb4 <__NVIC_SetPriority>
 8009422:	e000      	b.n	8009426 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8009424:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009426:	b662      	cpsie	i
}
 8009428:	bf00      	nop
	}

	__enable_irq();

}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40000400 	.word	0x40000400
 8009438:	40000800 	.word	0x40000800
 800943c:	40000c00 	.word	0x40000c00

08009440 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8009440:	b480      	push	{r7}
 8009442:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009444:	bf00      	nop
}
 8009446:	bf00      	nop
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009454:	bf00      	nop
}
 8009456:	bf00      	nop
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8009460:	b480      	push	{r7}
 8009462:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009464:	bf00      	nop
}
 8009466:	bf00      	nop
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009474:	bf00      	nop
}
 8009476:	bf00      	nop
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009484:	bf00      	nop
}
 8009486:	bf00      	nop
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8009490:	b480      	push	{r7}
 8009492:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009494:	bf00      	nop
}
 8009496:	bf00      	nop
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094a4:	bf00      	nop
}
 80094a6:	bf00      	nop
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094b4:	bf00      	nop
}
 80094b6:	bf00      	nop
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094c4:	bf00      	nop
}
 80094c6:	bf00      	nop
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094d4:	bf00      	nop
}
 80094d6:	bf00      	nop
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094e4:	bf00      	nop
}
 80094e6:	bf00      	nop
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80094f4:	bf00      	nop
}
 80094f6:	bf00      	nop
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009504:	bf00      	nop
}
 8009506:	bf00      	nop
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009514:	bf00      	nop
}
 8009516:	bf00      	nop
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009524:	bf00      	nop
}
 8009526:	bf00      	nop
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009534:	bf00      	nop
}
 8009536:	bf00      	nop
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009544:	bf00      	nop
}
 8009546:	bf00      	nop
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8009554:	bf00      	nop
}
 8009556:	bf00      	nop
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8009564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8009572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800957c:	f023 0301 	bic.w	r3, r3, #1
 8009580:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8009582:	f7f9 faa7 	bl	8002ad4 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8009586:	e066      	b.n	8009656 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8009588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d012      	beq.n	80095bc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 8009596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095a0:	f023 0302 	bic.w	r3, r3, #2
 80095a4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80095a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095b4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80095b6:	f7ff ff5b 	bl	8009470 <Capture_TIM2_Ch1_Callback>
}
 80095ba:	e04c      	b.n	8009656 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80095bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d012      	beq.n	80095f0 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80095ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095d4:	f023 0304 	bic.w	r3, r3, #4
 80095d8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80095da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80095e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095e8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80095ea:	f7ff ff49 	bl	8009480 <Capture_TIM2_Ch2_Callback>
}
 80095ee:	e032      	b.n	8009656 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 80095f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d012      	beq.n	8009624 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 80095fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009608:	f023 0308 	bic.w	r3, r3, #8
 800960c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800960e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800961c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800961e:	f7ff ff37 	bl	8009490 <Capture_TIM2_Ch3_Callback>
}
 8009622:	e018      	b.n	8009656 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8009624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	f003 0310 	and.w	r3, r3, #16
 800962e:	2b00      	cmp	r3, #0
 8009630:	d011      	beq.n	8009656 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8009632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800963c:	f023 0310 	bic.w	r3, r3, #16
 8009640:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8009642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800964c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009650:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8009652:	f7ff ff25 	bl	80094a0 <Capture_TIM2_Ch4_Callback>
}
 8009656:	bf00      	nop
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8009660:	4b31      	ldr	r3, [pc, #196]	; (8009728 <TIM3_IRQHandler+0xcc>)
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800966c:	4b2e      	ldr	r3, [pc, #184]	; (8009728 <TIM3_IRQHandler+0xcc>)
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4a2d      	ldr	r2, [pc, #180]	; (8009728 <TIM3_IRQHandler+0xcc>)
 8009672:	f023 0301 	bic.w	r3, r3, #1
 8009676:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8009678:	f7ff fee2 	bl	8009440 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800967c:	e052      	b.n	8009724 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800967e:	4b2a      	ldr	r3, [pc, #168]	; (8009728 <TIM3_IRQHandler+0xcc>)
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f003 0302 	and.w	r3, r3, #2
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800968a:	4b27      	ldr	r3, [pc, #156]	; (8009728 <TIM3_IRQHandler+0xcc>)
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	4a26      	ldr	r2, [pc, #152]	; (8009728 <TIM3_IRQHandler+0xcc>)
 8009690:	f023 0302 	bic.w	r3, r3, #2
 8009694:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <TIM3_IRQHandler+0xcc>)
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	4a23      	ldr	r2, [pc, #140]	; (8009728 <TIM3_IRQHandler+0xcc>)
 800969c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096a0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80096a2:	f7ff ff05 	bl	80094b0 <Capture_TIM3_Ch1_Callback>
}
 80096a6:	e03d      	b.n	8009724 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80096a8:	4b1f      	ldr	r3, [pc, #124]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00e      	beq.n	80096d2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80096b4:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096ba:	f023 0304 	bic.w	r3, r3, #4
 80096be:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80096c0:	4b19      	ldr	r3, [pc, #100]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	4a18      	ldr	r2, [pc, #96]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ca:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80096cc:	f7ff fef8 	bl	80094c0 <Capture_TIM3_Ch2_Callback>
}
 80096d0:	e028      	b.n	8009724 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0308 	and.w	r3, r3, #8
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00e      	beq.n	80096fc <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80096de:	4b12      	ldr	r3, [pc, #72]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	4a11      	ldr	r2, [pc, #68]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096e4:	f023 0308 	bic.w	r3, r3, #8
 80096e8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80096ea:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	4a0e      	ldr	r2, [pc, #56]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096f4:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 80096f6:	f7ff feeb 	bl	80094d0 <Capture_TIM3_Ch3_Callback>
}
 80096fa:	e013      	b.n	8009724 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <TIM3_IRQHandler+0xcc>)
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00d      	beq.n	8009724 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8009708:	4b07      	ldr	r3, [pc, #28]	; (8009728 <TIM3_IRQHandler+0xcc>)
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	4a06      	ldr	r2, [pc, #24]	; (8009728 <TIM3_IRQHandler+0xcc>)
 800970e:	f023 0310 	bic.w	r3, r3, #16
 8009712:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8009714:	4b04      	ldr	r3, [pc, #16]	; (8009728 <TIM3_IRQHandler+0xcc>)
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	4a03      	ldr	r2, [pc, #12]	; (8009728 <TIM3_IRQHandler+0xcc>)
 800971a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800971e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8009720:	f7ff fede 	bl	80094e0 <Capture_TIM3_Ch4_Callback>
}
 8009724:	bf00      	nop
 8009726:	bd80      	pop	{r7, pc}
 8009728:	40000400 	.word	0x40000400

0800972c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8009730:	4b31      	ldr	r3, [pc, #196]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800973c:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	4a2d      	ldr	r2, [pc, #180]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8009748:	f7ff fe82 	bl	8009450 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800974c:	e052      	b.n	80097f4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800974e:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00e      	beq.n	8009778 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800975a:	4b27      	ldr	r3, [pc, #156]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	4a26      	ldr	r2, [pc, #152]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009760:	f023 0302 	bic.w	r3, r3, #2
 8009764:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8009766:	4b24      	ldr	r3, [pc, #144]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	4a23      	ldr	r2, [pc, #140]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 800976c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009770:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8009772:	f7ff febd 	bl	80094f0 <Capture_TIM4_Ch1_Callback>
}
 8009776:	e03d      	b.n	80097f4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8009778:	4b1f      	ldr	r3, [pc, #124]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8009784:	4b1c      	ldr	r3, [pc, #112]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	4a1b      	ldr	r2, [pc, #108]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 800978a:	f023 0304 	bic.w	r3, r3, #4
 800978e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 8009790:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	4a18      	ldr	r2, [pc, #96]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 8009796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800979a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800979c:	f7ff fec8 	bl	8009530 <Capture_TIM5_Ch2_Callback>
}
 80097a0:	e028      	b.n	80097f4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80097a2:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00e      	beq.n	80097cc <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097b4:	f023 0308 	bic.w	r3, r3, #8
 80097b8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80097ba:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	4a0e      	ldr	r2, [pc, #56]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097c4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80097c6:	f7ff fe9b 	bl	8009500 <Capture_TIM4_Ch3_Callback>
}
 80097ca:	e013      	b.n	80097f4 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00d      	beq.n	80097f4 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	4a06      	ldr	r2, [pc, #24]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097de:	f023 0310 	bic.w	r3, r3, #16
 80097e2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	4a03      	ldr	r2, [pc, #12]	; (80097f8 <TIM4_IRQHandler+0xcc>)
 80097ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ee:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 80097f0:	f7ff fe8e 	bl	8009510 <Capture_TIM4_Ch4_Callback>
}
 80097f4:	bf00      	nop
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	40000800 	.word	0x40000800

080097fc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8009800:	4b31      	ldr	r3, [pc, #196]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d008      	beq.n	800981e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800980c:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	4a2d      	ldr	r2, [pc, #180]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009812:	f023 0301 	bic.w	r3, r3, #1
 8009816:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8009818:	f7ff fe22 	bl	8009460 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800981c:	e052      	b.n	80098c4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800981e:	4b2a      	ldr	r3, [pc, #168]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800982a:	4b27      	ldr	r3, [pc, #156]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	4a26      	ldr	r2, [pc, #152]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009830:	f023 0302 	bic.w	r3, r3, #2
 8009834:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8009836:	4b24      	ldr	r3, [pc, #144]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	4a23      	ldr	r2, [pc, #140]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800983c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009840:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8009842:	f7ff fe6d 	bl	8009520 <Capture_TIM5_Ch1_Callback>
}
 8009846:	e03d      	b.n	80098c4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8009848:	4b1f      	ldr	r3, [pc, #124]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00e      	beq.n	8009872 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8009854:	4b1c      	ldr	r3, [pc, #112]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800985a:	f023 0304 	bic.w	r3, r3, #4
 800985e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8009860:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	4a18      	ldr	r2, [pc, #96]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800986a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800986c:	f7ff fe60 	bl	8009530 <Capture_TIM5_Ch2_Callback>
}
 8009870:	e028      	b.n	80098c4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8009872:	4b15      	ldr	r3, [pc, #84]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00e      	beq.n	800989c <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800987e:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	4a11      	ldr	r2, [pc, #68]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009884:	f023 0308 	bic.w	r3, r3, #8
 8009888:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	4a0e      	ldr	r2, [pc, #56]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 8009890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009894:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 8009896:	f7ff fe53 	bl	8009540 <Capture_TIM5_Ch3_Callback>
}
 800989a:	e013      	b.n	80098c4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f003 0310 	and.w	r3, r3, #16
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80098a8:	4b07      	ldr	r3, [pc, #28]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	4a06      	ldr	r2, [pc, #24]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 80098ae:	f023 0310 	bic.w	r3, r3, #16
 80098b2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4a03      	ldr	r2, [pc, #12]	; (80098c8 <TIM5_IRQHandler+0xcc>)
 80098ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098be:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80098c0:	f7ff fe46 	bl	8009550 <Capture_TIM5_Ch4_Callback>
}
 80098c4:	bf00      	nop
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40000c00 	.word	0x40000c00

080098cc <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <__NVIC_EnableIRQ>:
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800991e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009922:	2b00      	cmp	r3, #0
 8009924:	db0b      	blt.n	800993e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009926:	79fb      	ldrb	r3, [r7, #7]
 8009928:	f003 021f 	and.w	r2, r3, #31
 800992c:	4907      	ldr	r1, [pc, #28]	; (800994c <__NVIC_EnableIRQ+0x38>)
 800992e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	2001      	movs	r0, #1
 8009936:	fa00 f202 	lsl.w	r2, r0, r2
 800993a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800993e:	bf00      	nop
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	e000e100 	.word	0xe000e100

08009950 <__NVIC_SetPriority>:
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800995c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009960:	2b00      	cmp	r3, #0
 8009962:	db0a      	blt.n	800997a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	b2da      	uxtb	r2, r3
 8009968:	490c      	ldr	r1, [pc, #48]	; (800999c <__NVIC_SetPriority+0x4c>)
 800996a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800996e:	0112      	lsls	r2, r2, #4
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	440b      	add	r3, r1
 8009974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009978:	e00a      	b.n	8009990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	b2da      	uxtb	r2, r3
 800997e:	4908      	ldr	r1, [pc, #32]	; (80099a0 <__NVIC_SetPriority+0x50>)
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	f003 030f 	and.w	r3, r3, #15
 8009986:	3b04      	subs	r3, #4
 8009988:	0112      	lsls	r2, r2, #4
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	440b      	add	r3, r1
 800998e:	761a      	strb	r2, [r3, #24]
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	e000e100 	.word	0xe000e100
 80099a0:	e000ed00 	.word	0xe000ed00

080099a4 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 f8bf 	bl	800ab34 <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 80099b6:	4b96      	ldr	r3, [pc, #600]	; (8009c10 <extInt_Config+0x26c>)
 80099b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099bc:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	791b      	ldrb	r3, [r3, #4]
 80099c4:	2b0f      	cmp	r3, #15
 80099c6:	f200 85cd 	bhi.w	800a564 <extInt_Config+0xbc0>
 80099ca:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <extInt_Config+0x2c>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	08009a11 	.word	0x08009a11
 80099d4:	08009ac7 	.word	0x08009ac7
 80099d8:	08009b7d 	.word	0x08009b7d
 80099dc:	08009c53 	.word	0x08009c53
 80099e0:	08009d09 	.word	0x08009d09
 80099e4:	08009db7 	.word	0x08009db7
 80099e8:	08009e7d 	.word	0x08009e7d
 80099ec:	08009f25 	.word	0x08009f25
 80099f0:	08009fcd 	.word	0x08009fcd
 80099f4:	0800a075 	.word	0x0800a075
 80099f8:	0800a13b 	.word	0x0800a13b
 80099fc:	0800a1e3 	.word	0x0800a1e3
 8009a00:	0800a28b 	.word	0x0800a28b
 8009a04:	0800a351 	.word	0x0800a351
 8009a08:	0800a3f7 	.word	0x0800a3f7
 8009a0c:	0800a49f 	.word	0x0800a49f
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 8009a10:	4b80      	ldr	r3, [pc, #512]	; (8009c14 <extInt_Config+0x270>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	4a7f      	ldr	r2, [pc, #508]	; (8009c14 <extInt_Config+0x270>)
 8009a16:	f023 030f 	bic.w	r3, r3, #15
 8009a1a:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a7d      	ldr	r2, [pc, #500]	; (8009c18 <extInt_Config+0x274>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d105      	bne.n	8009a34 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8009a28:	4b7a      	ldr	r3, [pc, #488]	; (8009c14 <extInt_Config+0x270>)
 8009a2a:	4a7a      	ldr	r2, [pc, #488]	; (8009c14 <extInt_Config+0x270>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009a30:	f000 bd9a 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a78      	ldr	r2, [pc, #480]	; (8009c1c <extInt_Config+0x278>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d107      	bne.n	8009a50 <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8009a40:	4b74      	ldr	r3, [pc, #464]	; (8009c14 <extInt_Config+0x270>)
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	4a73      	ldr	r2, [pc, #460]	; (8009c14 <extInt_Config+0x270>)
 8009a46:	f043 0301 	orr.w	r3, r3, #1
 8009a4a:	6093      	str	r3, [r2, #8]
					break;
 8009a4c:	f000 bd8c 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a72      	ldr	r2, [pc, #456]	; (8009c20 <extInt_Config+0x27c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d107      	bne.n	8009a6c <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8009a5c:	4b6d      	ldr	r3, [pc, #436]	; (8009c14 <extInt_Config+0x270>)
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	4a6c      	ldr	r2, [pc, #432]	; (8009c14 <extInt_Config+0x270>)
 8009a62:	f043 0302 	orr.w	r3, r3, #2
 8009a66:	6093      	str	r3, [r2, #8]
					break;
 8009a68:	f000 bd7e 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a6c      	ldr	r2, [pc, #432]	; (8009c24 <extInt_Config+0x280>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d107      	bne.n	8009a88 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8009a78:	4b66      	ldr	r3, [pc, #408]	; (8009c14 <extInt_Config+0x270>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	4a65      	ldr	r2, [pc, #404]	; (8009c14 <extInt_Config+0x270>)
 8009a7e:	f043 0303 	orr.w	r3, r3, #3
 8009a82:	6093      	str	r3, [r2, #8]
					break;
 8009a84:	f000 bd70 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a66      	ldr	r2, [pc, #408]	; (8009c28 <extInt_Config+0x284>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d107      	bne.n	8009aa4 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8009a94:	4b5f      	ldr	r3, [pc, #380]	; (8009c14 <extInt_Config+0x270>)
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	4a5e      	ldr	r2, [pc, #376]	; (8009c14 <extInt_Config+0x270>)
 8009a9a:	f043 0304 	orr.w	r3, r3, #4
 8009a9e:	6093      	str	r3, [r2, #8]
					break;
 8009aa0:	f000 bd62 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a60      	ldr	r2, [pc, #384]	; (8009c2c <extInt_Config+0x288>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d107      	bne.n	8009ac0 <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8009ab0:	4b58      	ldr	r3, [pc, #352]	; (8009c14 <extInt_Config+0x270>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	4a57      	ldr	r2, [pc, #348]	; (8009c14 <extInt_Config+0x270>)
 8009ab6:	f043 0307 	orr.w	r3, r3, #7
 8009aba:	6093      	str	r3, [r2, #8]
					break;
 8009abc:	f000 bd54 	b.w	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009ac0:	bf00      	nop
					break;
 8009ac2:	f000 bd51 	b.w	800a568 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8009ac6:	4b53      	ldr	r3, [pc, #332]	; (8009c14 <extInt_Config+0x270>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	4a52      	ldr	r2, [pc, #328]	; (8009c14 <extInt_Config+0x270>)
 8009acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ad0:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a4f      	ldr	r2, [pc, #316]	; (8009c18 <extInt_Config+0x274>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d105      	bne.n	8009aea <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8009ade:	4b4d      	ldr	r3, [pc, #308]	; (8009c14 <extInt_Config+0x270>)
 8009ae0:	4a4c      	ldr	r2, [pc, #304]	; (8009c14 <extInt_Config+0x270>)
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009ae6:	f000 bd3f 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a4a      	ldr	r2, [pc, #296]	; (8009c1c <extInt_Config+0x278>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d107      	bne.n	8009b06 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8009af6:	4b47      	ldr	r3, [pc, #284]	; (8009c14 <extInt_Config+0x270>)
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4a46      	ldr	r2, [pc, #280]	; (8009c14 <extInt_Config+0x270>)
 8009afc:	f043 0310 	orr.w	r3, r3, #16
 8009b00:	6093      	str	r3, [r2, #8]
					break;
 8009b02:	f000 bd31 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a44      	ldr	r2, [pc, #272]	; (8009c20 <extInt_Config+0x27c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d107      	bne.n	8009b22 <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8009b12:	4b40      	ldr	r3, [pc, #256]	; (8009c14 <extInt_Config+0x270>)
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	4a3f      	ldr	r2, [pc, #252]	; (8009c14 <extInt_Config+0x270>)
 8009b18:	f043 0320 	orr.w	r3, r3, #32
 8009b1c:	6093      	str	r3, [r2, #8]
					break;
 8009b1e:	f000 bd23 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a3e      	ldr	r2, [pc, #248]	; (8009c24 <extInt_Config+0x280>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d107      	bne.n	8009b3e <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8009b2e:	4b39      	ldr	r3, [pc, #228]	; (8009c14 <extInt_Config+0x270>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	4a38      	ldr	r2, [pc, #224]	; (8009c14 <extInt_Config+0x270>)
 8009b34:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009b38:	6093      	str	r3, [r2, #8]
					break;
 8009b3a:	f000 bd15 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a38      	ldr	r2, [pc, #224]	; (8009c28 <extInt_Config+0x284>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d107      	bne.n	8009b5a <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8009b4a:	4b32      	ldr	r3, [pc, #200]	; (8009c14 <extInt_Config+0x270>)
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	4a31      	ldr	r2, [pc, #196]	; (8009c14 <extInt_Config+0x270>)
 8009b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b54:	6093      	str	r3, [r2, #8]
					break;
 8009b56:	f000 bd07 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a32      	ldr	r2, [pc, #200]	; (8009c2c <extInt_Config+0x288>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d107      	bne.n	8009b76 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8009b66:	4b2b      	ldr	r3, [pc, #172]	; (8009c14 <extInt_Config+0x270>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	4a2a      	ldr	r2, [pc, #168]	; (8009c14 <extInt_Config+0x270>)
 8009b6c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009b70:	6093      	str	r3, [r2, #8]
					break;
 8009b72:	f000 bcf9 	b.w	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009b76:	bf00      	nop
					break;
 8009b78:	f000 bcf6 	b.w	800a568 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8009b7c:	4b25      	ldr	r3, [pc, #148]	; (8009c14 <extInt_Config+0x270>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	4a24      	ldr	r2, [pc, #144]	; (8009c14 <extInt_Config+0x270>)
 8009b82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b86:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a22      	ldr	r2, [pc, #136]	; (8009c18 <extInt_Config+0x274>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d105      	bne.n	8009ba0 <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8009b94:	4b1f      	ldr	r3, [pc, #124]	; (8009c14 <extInt_Config+0x270>)
 8009b96:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <extInt_Config+0x270>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009b9c:	f000 bce4 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a1d      	ldr	r2, [pc, #116]	; (8009c1c <extInt_Config+0x278>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d107      	bne.n	8009bbc <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8009bac:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <extInt_Config+0x270>)
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	4a18      	ldr	r2, [pc, #96]	; (8009c14 <extInt_Config+0x270>)
 8009bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb6:	6093      	str	r3, [r2, #8]
					break;
 8009bb8:	f000 bcd6 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a17      	ldr	r2, [pc, #92]	; (8009c20 <extInt_Config+0x27c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d107      	bne.n	8009bd8 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8009bc8:	4b12      	ldr	r3, [pc, #72]	; (8009c14 <extInt_Config+0x270>)
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4a11      	ldr	r2, [pc, #68]	; (8009c14 <extInt_Config+0x270>)
 8009bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bd2:	6093      	str	r3, [r2, #8]
					break;
 8009bd4:	f000 bcc8 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <extInt_Config+0x280>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d107      	bne.n	8009bf4 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <extInt_Config+0x270>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	4a0a      	ldr	r2, [pc, #40]	; (8009c14 <extInt_Config+0x270>)
 8009bea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009bee:	6093      	str	r3, [r2, #8]
					break;
 8009bf0:	f000 bcba 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a0b      	ldr	r2, [pc, #44]	; (8009c28 <extInt_Config+0x284>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d117      	bne.n	8009c30 <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <extInt_Config+0x270>)
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	4a03      	ldr	r2, [pc, #12]	; (8009c14 <extInt_Config+0x270>)
 8009c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c0a:	6093      	str	r3, [r2, #8]
					break;
 8009c0c:	f000 bcac 	b.w	800a568 <extInt_Config+0xbc4>
 8009c10:	40023800 	.word	0x40023800
 8009c14:	40013800 	.word	0x40013800
 8009c18:	40020000 	.word	0x40020000
 8009c1c:	40020400 	.word	0x40020400
 8009c20:	40020800 	.word	0x40020800
 8009c24:	40020c00 	.word	0x40020c00
 8009c28:	40021000 	.word	0x40021000
 8009c2c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a8a      	ldr	r2, [pc, #552]	; (8009e60 <extInt_Config+0x4bc>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d107      	bne.n	8009c4c <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8009c3c:	4b89      	ldr	r3, [pc, #548]	; (8009e64 <extInt_Config+0x4c0>)
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4a88      	ldr	r2, [pc, #544]	; (8009e64 <extInt_Config+0x4c0>)
 8009c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009c46:	6093      	str	r3, [r2, #8]
					break;
 8009c48:	f000 bc8e 	b.w	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009c4c:	bf00      	nop
					break;
 8009c4e:	f000 bc8b 	b.w	800a568 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 8009c52:	4b84      	ldr	r3, [pc, #528]	; (8009e64 <extInt_Config+0x4c0>)
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	4a83      	ldr	r2, [pc, #524]	; (8009e64 <extInt_Config+0x4c0>)
 8009c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c5c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a80      	ldr	r2, [pc, #512]	; (8009e68 <extInt_Config+0x4c4>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d105      	bne.n	8009c76 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8009c6a:	4b7e      	ldr	r3, [pc, #504]	; (8009e64 <extInt_Config+0x4c0>)
 8009c6c:	4a7d      	ldr	r2, [pc, #500]	; (8009e64 <extInt_Config+0x4c0>)
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8009c72:	f000 bc79 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a7b      	ldr	r2, [pc, #492]	; (8009e6c <extInt_Config+0x4c8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d107      	bne.n	8009c92 <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8009c82:	4b78      	ldr	r3, [pc, #480]	; (8009e64 <extInt_Config+0x4c0>)
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	4a77      	ldr	r2, [pc, #476]	; (8009e64 <extInt_Config+0x4c0>)
 8009c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c8c:	6093      	str	r3, [r2, #8]
					break;
 8009c8e:	f000 bc6b 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a75      	ldr	r2, [pc, #468]	; (8009e70 <extInt_Config+0x4cc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d107      	bne.n	8009cae <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8009c9e:	4b71      	ldr	r3, [pc, #452]	; (8009e64 <extInt_Config+0x4c0>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	4a70      	ldr	r2, [pc, #448]	; (8009e64 <extInt_Config+0x4c0>)
 8009ca4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ca8:	6093      	str	r3, [r2, #8]
					break;
 8009caa:	f000 bc5d 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a6f      	ldr	r2, [pc, #444]	; (8009e74 <extInt_Config+0x4d0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d107      	bne.n	8009cca <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8009cba:	4b6a      	ldr	r3, [pc, #424]	; (8009e64 <extInt_Config+0x4c0>)
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	4a69      	ldr	r2, [pc, #420]	; (8009e64 <extInt_Config+0x4c0>)
 8009cc0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009cc4:	6093      	str	r3, [r2, #8]
					break;
 8009cc6:	f000 bc4f 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a69      	ldr	r2, [pc, #420]	; (8009e78 <extInt_Config+0x4d4>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d107      	bne.n	8009ce6 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8009cd6:	4b63      	ldr	r3, [pc, #396]	; (8009e64 <extInt_Config+0x4c0>)
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	4a62      	ldr	r2, [pc, #392]	; (8009e64 <extInt_Config+0x4c0>)
 8009cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ce0:	6093      	str	r3, [r2, #8]
					break;
 8009ce2:	f000 bc41 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a5c      	ldr	r2, [pc, #368]	; (8009e60 <extInt_Config+0x4bc>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d107      	bne.n	8009d02 <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8009cf2:	4b5c      	ldr	r3, [pc, #368]	; (8009e64 <extInt_Config+0x4c0>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	4a5b      	ldr	r2, [pc, #364]	; (8009e64 <extInt_Config+0x4c0>)
 8009cf8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009cfc:	6093      	str	r3, [r2, #8]
					break;
 8009cfe:	f000 bc33 	b.w	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009d02:	bf00      	nop
					break;
 8009d04:	f000 bc30 	b.w	800a568 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 8009d08:	4b56      	ldr	r3, [pc, #344]	; (8009e64 <extInt_Config+0x4c0>)
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	4a55      	ldr	r2, [pc, #340]	; (8009e64 <extInt_Config+0x4c0>)
 8009d0e:	f023 030f 	bic.w	r3, r3, #15
 8009d12:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a53      	ldr	r2, [pc, #332]	; (8009e68 <extInt_Config+0x4c4>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d105      	bne.n	8009d2c <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8009d20:	4b50      	ldr	r3, [pc, #320]	; (8009e64 <extInt_Config+0x4c0>)
 8009d22:	4a50      	ldr	r2, [pc, #320]	; (8009e64 <extInt_Config+0x4c0>)
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009d28:	f000 bc1e 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a4e      	ldr	r2, [pc, #312]	; (8009e6c <extInt_Config+0x4c8>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d107      	bne.n	8009d48 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8009d38:	4b4a      	ldr	r3, [pc, #296]	; (8009e64 <extInt_Config+0x4c0>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4a49      	ldr	r2, [pc, #292]	; (8009e64 <extInt_Config+0x4c0>)
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	60d3      	str	r3, [r2, #12]
					break;
 8009d44:	f000 bc10 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a48      	ldr	r2, [pc, #288]	; (8009e70 <extInt_Config+0x4cc>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d107      	bne.n	8009d64 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8009d54:	4b43      	ldr	r3, [pc, #268]	; (8009e64 <extInt_Config+0x4c0>)
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	4a42      	ldr	r2, [pc, #264]	; (8009e64 <extInt_Config+0x4c0>)
 8009d5a:	f043 0302 	orr.w	r3, r3, #2
 8009d5e:	60d3      	str	r3, [r2, #12]
					break;
 8009d60:	f000 bc02 	b.w	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a42      	ldr	r2, [pc, #264]	; (8009e74 <extInt_Config+0x4d0>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d106      	bne.n	8009d7e <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8009d70:	4b3c      	ldr	r3, [pc, #240]	; (8009e64 <extInt_Config+0x4c0>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	4a3b      	ldr	r2, [pc, #236]	; (8009e64 <extInt_Config+0x4c0>)
 8009d76:	f043 0303 	orr.w	r3, r3, #3
 8009d7a:	60d3      	str	r3, [r2, #12]
					break;
 8009d7c:	e3f4      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a3c      	ldr	r2, [pc, #240]	; (8009e78 <extInt_Config+0x4d4>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d106      	bne.n	8009d98 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8009d8a:	4b36      	ldr	r3, [pc, #216]	; (8009e64 <extInt_Config+0x4c0>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	4a35      	ldr	r2, [pc, #212]	; (8009e64 <extInt_Config+0x4c0>)
 8009d90:	f043 0304 	orr.w	r3, r3, #4
 8009d94:	60d3      	str	r3, [r2, #12]
					break;
 8009d96:	e3e7      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a30      	ldr	r2, [pc, #192]	; (8009e60 <extInt_Config+0x4bc>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d106      	bne.n	8009db2 <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8009da4:	4b2f      	ldr	r3, [pc, #188]	; (8009e64 <extInt_Config+0x4c0>)
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	4a2e      	ldr	r2, [pc, #184]	; (8009e64 <extInt_Config+0x4c0>)
 8009daa:	f043 0307 	orr.w	r3, r3, #7
 8009dae:	60d3      	str	r3, [r2, #12]
					break;
 8009db0:	e3da      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009db2:	bf00      	nop
					break;
 8009db4:	e3d8      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8009db6:	4b2b      	ldr	r3, [pc, #172]	; (8009e64 <extInt_Config+0x4c0>)
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	4a2a      	ldr	r2, [pc, #168]	; (8009e64 <extInt_Config+0x4c0>)
 8009dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dc0:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a27      	ldr	r2, [pc, #156]	; (8009e68 <extInt_Config+0x4c4>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d104      	bne.n	8009dd8 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8009dce:	4b25      	ldr	r3, [pc, #148]	; (8009e64 <extInt_Config+0x4c0>)
 8009dd0:	4a24      	ldr	r2, [pc, #144]	; (8009e64 <extInt_Config+0x4c0>)
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009dd6:	e3c7      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a23      	ldr	r2, [pc, #140]	; (8009e6c <extInt_Config+0x4c8>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d106      	bne.n	8009df2 <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8009de4:	4b1f      	ldr	r3, [pc, #124]	; (8009e64 <extInt_Config+0x4c0>)
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4a1e      	ldr	r2, [pc, #120]	; (8009e64 <extInt_Config+0x4c0>)
 8009dea:	f043 0310 	orr.w	r3, r3, #16
 8009dee:	60d3      	str	r3, [r2, #12]
					break;
 8009df0:	e3ba      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a1d      	ldr	r2, [pc, #116]	; (8009e70 <extInt_Config+0x4cc>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d106      	bne.n	8009e0c <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8009dfe:	4b19      	ldr	r3, [pc, #100]	; (8009e64 <extInt_Config+0x4c0>)
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	4a18      	ldr	r2, [pc, #96]	; (8009e64 <extInt_Config+0x4c0>)
 8009e04:	f043 0320 	orr.w	r3, r3, #32
 8009e08:	60d3      	str	r3, [r2, #12]
					break;
 8009e0a:	e3ad      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a18      	ldr	r2, [pc, #96]	; (8009e74 <extInt_Config+0x4d0>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d106      	bne.n	8009e26 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8009e18:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <extInt_Config+0x4c0>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	4a11      	ldr	r2, [pc, #68]	; (8009e64 <extInt_Config+0x4c0>)
 8009e1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009e22:	60d3      	str	r3, [r2, #12]
					break;
 8009e24:	e3a0      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a12      	ldr	r2, [pc, #72]	; (8009e78 <extInt_Config+0x4d4>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d106      	bne.n	8009e40 <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8009e32:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <extInt_Config+0x4c0>)
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	4a0b      	ldr	r2, [pc, #44]	; (8009e64 <extInt_Config+0x4c0>)
 8009e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3c:	60d3      	str	r3, [r2, #12]
					break;
 8009e3e:	e393      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a06      	ldr	r2, [pc, #24]	; (8009e60 <extInt_Config+0x4bc>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d106      	bne.n	8009e5a <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <extInt_Config+0x4c0>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	4a04      	ldr	r2, [pc, #16]	; (8009e64 <extInt_Config+0x4c0>)
 8009e52:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8009e56:	60d3      	str	r3, [r2, #12]
					break;
 8009e58:	e386      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009e5a:	bf00      	nop
					break;
 8009e5c:	e384      	b.n	800a568 <extInt_Config+0xbc4>
 8009e5e:	bf00      	nop
 8009e60:	40021c00 	.word	0x40021c00
 8009e64:	40013800 	.word	0x40013800
 8009e68:	40020000 	.word	0x40020000
 8009e6c:	40020400 	.word	0x40020400
 8009e70:	40020800 	.word	0x40020800
 8009e74:	40020c00 	.word	0x40020c00
 8009e78:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8009e7c:	4b86      	ldr	r3, [pc, #536]	; (800a098 <extInt_Config+0x6f4>)
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4a85      	ldr	r2, [pc, #532]	; (800a098 <extInt_Config+0x6f4>)
 8009e82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e86:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a83      	ldr	r2, [pc, #524]	; (800a09c <extInt_Config+0x6f8>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d104      	bne.n	8009e9e <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8009e94:	4b80      	ldr	r3, [pc, #512]	; (800a098 <extInt_Config+0x6f4>)
 8009e96:	4a80      	ldr	r2, [pc, #512]	; (800a098 <extInt_Config+0x6f4>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009e9c:	e364      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a7e      	ldr	r2, [pc, #504]	; (800a0a0 <extInt_Config+0x6fc>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d106      	bne.n	8009eb8 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8009eaa:	4b7b      	ldr	r3, [pc, #492]	; (800a098 <extInt_Config+0x6f4>)
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	4a7a      	ldr	r2, [pc, #488]	; (800a098 <extInt_Config+0x6f4>)
 8009eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb4:	60d3      	str	r3, [r2, #12]
					break;
 8009eb6:	e357      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a79      	ldr	r2, [pc, #484]	; (800a0a4 <extInt_Config+0x700>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d106      	bne.n	8009ed2 <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8009ec4:	4b74      	ldr	r3, [pc, #464]	; (800a098 <extInt_Config+0x6f4>)
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	4a73      	ldr	r2, [pc, #460]	; (800a098 <extInt_Config+0x6f4>)
 8009eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ece:	60d3      	str	r3, [r2, #12]
					break;
 8009ed0:	e34a      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a73      	ldr	r2, [pc, #460]	; (800a0a8 <extInt_Config+0x704>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d106      	bne.n	8009eec <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8009ede:	4b6e      	ldr	r3, [pc, #440]	; (800a098 <extInt_Config+0x6f4>)
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	4a6d      	ldr	r2, [pc, #436]	; (800a098 <extInt_Config+0x6f4>)
 8009ee4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009ee8:	60d3      	str	r3, [r2, #12]
					break;
 8009eea:	e33d      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a6e      	ldr	r2, [pc, #440]	; (800a0ac <extInt_Config+0x708>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d106      	bne.n	8009f06 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8009ef8:	4b67      	ldr	r3, [pc, #412]	; (800a098 <extInt_Config+0x6f4>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	4a66      	ldr	r2, [pc, #408]	; (800a098 <extInt_Config+0x6f4>)
 8009efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f02:	60d3      	str	r3, [r2, #12]
					break;
 8009f04:	e330      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a68      	ldr	r2, [pc, #416]	; (800a0b0 <extInt_Config+0x70c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d106      	bne.n	8009f20 <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8009f12:	4b61      	ldr	r3, [pc, #388]	; (800a098 <extInt_Config+0x6f4>)
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	4a60      	ldr	r2, [pc, #384]	; (800a098 <extInt_Config+0x6f4>)
 8009f18:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009f1c:	60d3      	str	r3, [r2, #12]
					break;
 8009f1e:	e323      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009f20:	bf00      	nop
					break;
 8009f22:	e321      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 8009f24:	4b5c      	ldr	r3, [pc, #368]	; (800a098 <extInt_Config+0x6f4>)
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	4a5b      	ldr	r2, [pc, #364]	; (800a098 <extInt_Config+0x6f4>)
 8009f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f2e:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a59      	ldr	r2, [pc, #356]	; (800a09c <extInt_Config+0x6f8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d104      	bne.n	8009f46 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8009f3c:	4b56      	ldr	r3, [pc, #344]	; (800a098 <extInt_Config+0x6f4>)
 8009f3e:	4a56      	ldr	r2, [pc, #344]	; (800a098 <extInt_Config+0x6f4>)
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8009f44:	e310      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a54      	ldr	r2, [pc, #336]	; (800a0a0 <extInt_Config+0x6fc>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d106      	bne.n	8009f60 <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8009f52:	4b51      	ldr	r3, [pc, #324]	; (800a098 <extInt_Config+0x6f4>)
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	4a50      	ldr	r2, [pc, #320]	; (800a098 <extInt_Config+0x6f4>)
 8009f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f5c:	60d3      	str	r3, [r2, #12]
					break;
 8009f5e:	e303      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a4f      	ldr	r2, [pc, #316]	; (800a0a4 <extInt_Config+0x700>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d106      	bne.n	8009f7a <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8009f6c:	4b4a      	ldr	r3, [pc, #296]	; (800a098 <extInt_Config+0x6f4>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	4a49      	ldr	r2, [pc, #292]	; (800a098 <extInt_Config+0x6f4>)
 8009f72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009f76:	60d3      	str	r3, [r2, #12]
					break;
 8009f78:	e2f6      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a49      	ldr	r2, [pc, #292]	; (800a0a8 <extInt_Config+0x704>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d106      	bne.n	8009f94 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8009f86:	4b44      	ldr	r3, [pc, #272]	; (800a098 <extInt_Config+0x6f4>)
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	4a43      	ldr	r2, [pc, #268]	; (800a098 <extInt_Config+0x6f4>)
 8009f8c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8009f90:	60d3      	str	r3, [r2, #12]
					break;
 8009f92:	e2e9      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a44      	ldr	r2, [pc, #272]	; (800a0ac <extInt_Config+0x708>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d106      	bne.n	8009fae <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8009fa0:	4b3d      	ldr	r3, [pc, #244]	; (800a098 <extInt_Config+0x6f4>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	4a3c      	ldr	r2, [pc, #240]	; (800a098 <extInt_Config+0x6f4>)
 8009fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009faa:	60d3      	str	r3, [r2, #12]
					break;
 8009fac:	e2dc      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a3e      	ldr	r2, [pc, #248]	; (800a0b0 <extInt_Config+0x70c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d106      	bne.n	8009fc8 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8009fba:	4b37      	ldr	r3, [pc, #220]	; (800a098 <extInt_Config+0x6f4>)
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	4a36      	ldr	r2, [pc, #216]	; (800a098 <extInt_Config+0x6f4>)
 8009fc0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009fc4:	60d3      	str	r3, [r2, #12]
					break;
 8009fc6:	e2cf      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 8009fc8:	bf00      	nop
					break;
 8009fca:	e2cd      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8009fcc:	4b32      	ldr	r3, [pc, #200]	; (800a098 <extInt_Config+0x6f4>)
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	4a31      	ldr	r2, [pc, #196]	; (800a098 <extInt_Config+0x6f4>)
 8009fd2:	f023 030f 	bic.w	r3, r3, #15
 8009fd6:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a2f      	ldr	r2, [pc, #188]	; (800a09c <extInt_Config+0x6f8>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d104      	bne.n	8009fee <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8009fe4:	4b2c      	ldr	r3, [pc, #176]	; (800a098 <extInt_Config+0x6f4>)
 8009fe6:	4a2c      	ldr	r2, [pc, #176]	; (800a098 <extInt_Config+0x6f4>)
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8009fec:	e2bc      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a2a      	ldr	r2, [pc, #168]	; (800a0a0 <extInt_Config+0x6fc>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d106      	bne.n	800a008 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8009ffa:	4b27      	ldr	r3, [pc, #156]	; (800a098 <extInt_Config+0x6f4>)
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	4a26      	ldr	r2, [pc, #152]	; (800a098 <extInt_Config+0x6f4>)
 800a000:	f043 0301 	orr.w	r3, r3, #1
 800a004:	6113      	str	r3, [r2, #16]
					break;
 800a006:	e2af      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a25      	ldr	r2, [pc, #148]	; (800a0a4 <extInt_Config+0x700>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d106      	bne.n	800a022 <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800a014:	4b20      	ldr	r3, [pc, #128]	; (800a098 <extInt_Config+0x6f4>)
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	4a1f      	ldr	r2, [pc, #124]	; (800a098 <extInt_Config+0x6f4>)
 800a01a:	f043 0302 	orr.w	r3, r3, #2
 800a01e:	6113      	str	r3, [r2, #16]
					break;
 800a020:	e2a2      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1f      	ldr	r2, [pc, #124]	; (800a0a8 <extInt_Config+0x704>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d106      	bne.n	800a03c <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800a02e:	4b1a      	ldr	r3, [pc, #104]	; (800a098 <extInt_Config+0x6f4>)
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	4a19      	ldr	r2, [pc, #100]	; (800a098 <extInt_Config+0x6f4>)
 800a034:	f043 0303 	orr.w	r3, r3, #3
 800a038:	6113      	str	r3, [r2, #16]
					break;
 800a03a:	e295      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a1a      	ldr	r2, [pc, #104]	; (800a0ac <extInt_Config+0x708>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d106      	bne.n	800a056 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800a048:	4b13      	ldr	r3, [pc, #76]	; (800a098 <extInt_Config+0x6f4>)
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	4a12      	ldr	r2, [pc, #72]	; (800a098 <extInt_Config+0x6f4>)
 800a04e:	f043 0304 	orr.w	r3, r3, #4
 800a052:	6113      	str	r3, [r2, #16]
					break;
 800a054:	e288      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a14      	ldr	r2, [pc, #80]	; (800a0b0 <extInt_Config+0x70c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d106      	bne.n	800a070 <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800a062:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <extInt_Config+0x6f4>)
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	4a0c      	ldr	r2, [pc, #48]	; (800a098 <extInt_Config+0x6f4>)
 800a068:	f043 0307 	orr.w	r3, r3, #7
 800a06c:	6113      	str	r3, [r2, #16]
					break;
 800a06e:	e27b      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 800a070:	bf00      	nop
					break;
 800a072:	e279      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 800a074:	4b08      	ldr	r3, [pc, #32]	; (800a098 <extInt_Config+0x6f4>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a07      	ldr	r2, [pc, #28]	; (800a098 <extInt_Config+0x6f4>)
 800a07a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a07e:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a05      	ldr	r2, [pc, #20]	; (800a09c <extInt_Config+0x6f8>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d113      	bne.n	800a0b4 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800a08c:	4b02      	ldr	r3, [pc, #8]	; (800a098 <extInt_Config+0x6f4>)
 800a08e:	4a02      	ldr	r2, [pc, #8]	; (800a098 <extInt_Config+0x6f4>)
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a094:	e268      	b.n	800a568 <extInt_Config+0xbc4>
 800a096:	bf00      	nop
 800a098:	40013800 	.word	0x40013800
 800a09c:	40020000 	.word	0x40020000
 800a0a0:	40020400 	.word	0x40020400
 800a0a4:	40020800 	.word	0x40020800
 800a0a8:	40020c00 	.word	0x40020c00
 800a0ac:	40021000 	.word	0x40021000
 800a0b0:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a83      	ldr	r2, [pc, #524]	; (800a2c8 <extInt_Config+0x924>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d106      	bne.n	800a0ce <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800a0c0:	4b82      	ldr	r3, [pc, #520]	; (800a2cc <extInt_Config+0x928>)
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	4a81      	ldr	r2, [pc, #516]	; (800a2cc <extInt_Config+0x928>)
 800a0c6:	f043 0310 	orr.w	r3, r3, #16
 800a0ca:	6113      	str	r3, [r2, #16]
					break;
 800a0cc:	e24c      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a7e      	ldr	r2, [pc, #504]	; (800a2d0 <extInt_Config+0x92c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d106      	bne.n	800a0e8 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800a0da:	4b7c      	ldr	r3, [pc, #496]	; (800a2cc <extInt_Config+0x928>)
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	4a7b      	ldr	r2, [pc, #492]	; (800a2cc <extInt_Config+0x928>)
 800a0e0:	f043 0320 	orr.w	r3, r3, #32
 800a0e4:	6113      	str	r3, [r2, #16]
					break;
 800a0e6:	e23f      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a79      	ldr	r2, [pc, #484]	; (800a2d4 <extInt_Config+0x930>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d106      	bne.n	800a102 <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800a0f4:	4b75      	ldr	r3, [pc, #468]	; (800a2cc <extInt_Config+0x928>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	4a74      	ldr	r2, [pc, #464]	; (800a2cc <extInt_Config+0x928>)
 800a0fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a0fe:	6113      	str	r3, [r2, #16]
					break;
 800a100:	e232      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a73      	ldr	r2, [pc, #460]	; (800a2d8 <extInt_Config+0x934>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d106      	bne.n	800a11c <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800a10e:	4b6f      	ldr	r3, [pc, #444]	; (800a2cc <extInt_Config+0x928>)
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	4a6e      	ldr	r2, [pc, #440]	; (800a2cc <extInt_Config+0x928>)
 800a114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a118:	6113      	str	r3, [r2, #16]
					break;
 800a11a:	e225      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a6e      	ldr	r2, [pc, #440]	; (800a2dc <extInt_Config+0x938>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d106      	bne.n	800a136 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800a128:	4b68      	ldr	r3, [pc, #416]	; (800a2cc <extInt_Config+0x928>)
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	4a67      	ldr	r2, [pc, #412]	; (800a2cc <extInt_Config+0x928>)
 800a12e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a132:	6113      	str	r3, [r2, #16]
					break;
 800a134:	e218      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 800a136:	bf00      	nop
					break;
 800a138:	e216      	b.n	800a568 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 800a13a:	4b64      	ldr	r3, [pc, #400]	; (800a2cc <extInt_Config+0x928>)
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	4a63      	ldr	r2, [pc, #396]	; (800a2cc <extInt_Config+0x928>)
 800a140:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a144:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a64      	ldr	r2, [pc, #400]	; (800a2e0 <extInt_Config+0x93c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d104      	bne.n	800a15c <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800a152:	4b5e      	ldr	r3, [pc, #376]	; (800a2cc <extInt_Config+0x928>)
 800a154:	4a5d      	ldr	r2, [pc, #372]	; (800a2cc <extInt_Config+0x928>)
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a15a:	e205      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a59      	ldr	r2, [pc, #356]	; (800a2c8 <extInt_Config+0x924>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d106      	bne.n	800a176 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800a168:	4b58      	ldr	r3, [pc, #352]	; (800a2cc <extInt_Config+0x928>)
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	4a57      	ldr	r2, [pc, #348]	; (800a2cc <extInt_Config+0x928>)
 800a16e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a172:	6113      	str	r3, [r2, #16]
					break;
 800a174:	e1f8      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a54      	ldr	r2, [pc, #336]	; (800a2d0 <extInt_Config+0x92c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d106      	bne.n	800a190 <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800a182:	4b52      	ldr	r3, [pc, #328]	; (800a2cc <extInt_Config+0x928>)
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	4a51      	ldr	r2, [pc, #324]	; (800a2cc <extInt_Config+0x928>)
 800a188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a18c:	6113      	str	r3, [r2, #16]
					break;
 800a18e:	e1eb      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a4f      	ldr	r2, [pc, #316]	; (800a2d4 <extInt_Config+0x930>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d106      	bne.n	800a1aa <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800a19c:	4b4b      	ldr	r3, [pc, #300]	; (800a2cc <extInt_Config+0x928>)
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	4a4a      	ldr	r2, [pc, #296]	; (800a2cc <extInt_Config+0x928>)
 800a1a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a1a6:	6113      	str	r3, [r2, #16]
					break;
 800a1a8:	e1de      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a49      	ldr	r2, [pc, #292]	; (800a2d8 <extInt_Config+0x934>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d106      	bne.n	800a1c4 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800a1b6:	4b45      	ldr	r3, [pc, #276]	; (800a2cc <extInt_Config+0x928>)
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	4a44      	ldr	r2, [pc, #272]	; (800a2cc <extInt_Config+0x928>)
 800a1bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1c0:	6113      	str	r3, [r2, #16]
					break;
 800a1c2:	e1d1      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a44      	ldr	r2, [pc, #272]	; (800a2dc <extInt_Config+0x938>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d106      	bne.n	800a1de <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800a1d0:	4b3e      	ldr	r3, [pc, #248]	; (800a2cc <extInt_Config+0x928>)
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	4a3d      	ldr	r2, [pc, #244]	; (800a2cc <extInt_Config+0x928>)
 800a1d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a1da:	6113      	str	r3, [r2, #16]
					break;
 800a1dc:	e1c4      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 800a1de:	bf00      	nop
					break;
 800a1e0:	e1c2      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 800a1e2:	4b3a      	ldr	r3, [pc, #232]	; (800a2cc <extInt_Config+0x928>)
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	4a39      	ldr	r2, [pc, #228]	; (800a2cc <extInt_Config+0x928>)
 800a1e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1ec:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a3a      	ldr	r2, [pc, #232]	; (800a2e0 <extInt_Config+0x93c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d104      	bne.n	800a204 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800a1fa:	4b34      	ldr	r3, [pc, #208]	; (800a2cc <extInt_Config+0x928>)
 800a1fc:	4a33      	ldr	r2, [pc, #204]	; (800a2cc <extInt_Config+0x928>)
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 800a202:	e1b1      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a2f      	ldr	r2, [pc, #188]	; (800a2c8 <extInt_Config+0x924>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d106      	bne.n	800a21e <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800a210:	4b2e      	ldr	r3, [pc, #184]	; (800a2cc <extInt_Config+0x928>)
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	4a2d      	ldr	r2, [pc, #180]	; (800a2cc <extInt_Config+0x928>)
 800a216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a21a:	6113      	str	r3, [r2, #16]
					break;
 800a21c:	e1a4      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a2a      	ldr	r2, [pc, #168]	; (800a2d0 <extInt_Config+0x92c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d106      	bne.n	800a238 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800a22a:	4b28      	ldr	r3, [pc, #160]	; (800a2cc <extInt_Config+0x928>)
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	4a27      	ldr	r2, [pc, #156]	; (800a2cc <extInt_Config+0x928>)
 800a230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a234:	6113      	str	r3, [r2, #16]
					break;
 800a236:	e197      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a25      	ldr	r2, [pc, #148]	; (800a2d4 <extInt_Config+0x930>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d106      	bne.n	800a252 <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800a244:	4b21      	ldr	r3, [pc, #132]	; (800a2cc <extInt_Config+0x928>)
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	4a20      	ldr	r2, [pc, #128]	; (800a2cc <extInt_Config+0x928>)
 800a24a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a24e:	6113      	str	r3, [r2, #16]
					break;
 800a250:	e18a      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <extInt_Config+0x934>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d106      	bne.n	800a26c <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800a25e:	4b1b      	ldr	r3, [pc, #108]	; (800a2cc <extInt_Config+0x928>)
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	4a1a      	ldr	r2, [pc, #104]	; (800a2cc <extInt_Config+0x928>)
 800a264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a268:	6113      	str	r3, [r2, #16]
					break;
 800a26a:	e17d      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1a      	ldr	r2, [pc, #104]	; (800a2dc <extInt_Config+0x938>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d106      	bne.n	800a286 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800a278:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <extInt_Config+0x928>)
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	4a13      	ldr	r2, [pc, #76]	; (800a2cc <extInt_Config+0x928>)
 800a27e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a282:	6113      	str	r3, [r2, #16]
					break;
 800a284:	e170      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 800a286:	bf00      	nop
					break;
 800a288:	e16e      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 800a28a:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <extInt_Config+0x928>)
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	4a0f      	ldr	r2, [pc, #60]	; (800a2cc <extInt_Config+0x928>)
 800a290:	f023 030f 	bic.w	r3, r3, #15
 800a294:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a10      	ldr	r2, [pc, #64]	; (800a2e0 <extInt_Config+0x93c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d104      	bne.n	800a2ac <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800a2a2:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <extInt_Config+0x928>)
 800a2a4:	4a09      	ldr	r2, [pc, #36]	; (800a2cc <extInt_Config+0x928>)
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a2aa:	e15d      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a05      	ldr	r2, [pc, #20]	; (800a2c8 <extInt_Config+0x924>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d115      	bne.n	800a2e4 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800a2b8:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <extInt_Config+0x928>)
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	4a03      	ldr	r2, [pc, #12]	; (800a2cc <extInt_Config+0x928>)
 800a2be:	f043 0301 	orr.w	r3, r3, #1
 800a2c2:	6153      	str	r3, [r2, #20]
					break;
 800a2c4:	e150      	b.n	800a568 <extInt_Config+0xbc4>
 800a2c6:	bf00      	nop
 800a2c8:	40020400 	.word	0x40020400
 800a2cc:	40013800 	.word	0x40013800
 800a2d0:	40020800 	.word	0x40020800
 800a2d4:	40020c00 	.word	0x40020c00
 800a2d8:	40021000 	.word	0x40021000
 800a2dc:	40021c00 	.word	0x40021c00
 800a2e0:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a89      	ldr	r2, [pc, #548]	; (800a510 <extInt_Config+0xb6c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d106      	bne.n	800a2fe <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800a2f0:	4b88      	ldr	r3, [pc, #544]	; (800a514 <extInt_Config+0xb70>)
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	4a87      	ldr	r2, [pc, #540]	; (800a514 <extInt_Config+0xb70>)
 800a2f6:	f043 0302 	orr.w	r3, r3, #2
 800a2fa:	6153      	str	r3, [r2, #20]
					break;
 800a2fc:	e134      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a84      	ldr	r2, [pc, #528]	; (800a518 <extInt_Config+0xb74>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d106      	bne.n	800a318 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800a30a:	4b82      	ldr	r3, [pc, #520]	; (800a514 <extInt_Config+0xb70>)
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	4a81      	ldr	r2, [pc, #516]	; (800a514 <extInt_Config+0xb70>)
 800a310:	f043 0303 	orr.w	r3, r3, #3
 800a314:	6153      	str	r3, [r2, #20]
					break;
 800a316:	e127      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a7f      	ldr	r2, [pc, #508]	; (800a51c <extInt_Config+0xb78>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d106      	bne.n	800a332 <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800a324:	4b7b      	ldr	r3, [pc, #492]	; (800a514 <extInt_Config+0xb70>)
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	4a7a      	ldr	r2, [pc, #488]	; (800a514 <extInt_Config+0xb70>)
 800a32a:	f043 0304 	orr.w	r3, r3, #4
 800a32e:	6153      	str	r3, [r2, #20]
					break;
 800a330:	e11a      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a79      	ldr	r2, [pc, #484]	; (800a520 <extInt_Config+0xb7c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d106      	bne.n	800a34c <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800a33e:	4b75      	ldr	r3, [pc, #468]	; (800a514 <extInt_Config+0xb70>)
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	4a74      	ldr	r2, [pc, #464]	; (800a514 <extInt_Config+0xb70>)
 800a344:	f043 0307 	orr.w	r3, r3, #7
 800a348:	6153      	str	r3, [r2, #20]
					break;
 800a34a:	e10d      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 800a34c:	bf00      	nop
					break;
 800a34e:	e10b      	b.n	800a568 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 800a350:	4b70      	ldr	r3, [pc, #448]	; (800a514 <extInt_Config+0xb70>)
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	4a6f      	ldr	r2, [pc, #444]	; (800a514 <extInt_Config+0xb70>)
 800a356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a35a:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a70      	ldr	r2, [pc, #448]	; (800a524 <extInt_Config+0xb80>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d104      	bne.n	800a372 <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800a368:	4b6a      	ldr	r3, [pc, #424]	; (800a514 <extInt_Config+0xb70>)
 800a36a:	4a6a      	ldr	r2, [pc, #424]	; (800a514 <extInt_Config+0xb70>)
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	6153      	str	r3, [r2, #20]
 800a370:	e041      	b.n	800a3f6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a6b      	ldr	r2, [pc, #428]	; (800a528 <extInt_Config+0xb84>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d106      	bne.n	800a38c <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800a37e:	4b65      	ldr	r3, [pc, #404]	; (800a514 <extInt_Config+0xb70>)
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4a64      	ldr	r2, [pc, #400]	; (800a514 <extInt_Config+0xb70>)
 800a384:	f043 0310 	orr.w	r3, r3, #16
 800a388:	6153      	str	r3, [r2, #20]
 800a38a:	e034      	b.n	800a3f6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a5f      	ldr	r2, [pc, #380]	; (800a510 <extInt_Config+0xb6c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d106      	bne.n	800a3a6 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800a398:	4b5e      	ldr	r3, [pc, #376]	; (800a514 <extInt_Config+0xb70>)
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	4a5d      	ldr	r2, [pc, #372]	; (800a514 <extInt_Config+0xb70>)
 800a39e:	f043 0320 	orr.w	r3, r3, #32
 800a3a2:	6153      	str	r3, [r2, #20]
 800a3a4:	e027      	b.n	800a3f6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a5a      	ldr	r2, [pc, #360]	; (800a518 <extInt_Config+0xb74>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d106      	bne.n	800a3c0 <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800a3b2:	4b58      	ldr	r3, [pc, #352]	; (800a514 <extInt_Config+0xb70>)
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	4a57      	ldr	r2, [pc, #348]	; (800a514 <extInt_Config+0xb70>)
 800a3b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a3bc:	6153      	str	r3, [r2, #20]
 800a3be:	e01a      	b.n	800a3f6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a55      	ldr	r2, [pc, #340]	; (800a51c <extInt_Config+0xb78>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d106      	bne.n	800a3da <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800a3cc:	4b51      	ldr	r3, [pc, #324]	; (800a514 <extInt_Config+0xb70>)
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	4a50      	ldr	r2, [pc, #320]	; (800a514 <extInt_Config+0xb70>)
 800a3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d6:	6153      	str	r3, [r2, #20]
 800a3d8:	e00d      	b.n	800a3f6 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a4f      	ldr	r2, [pc, #316]	; (800a520 <extInt_Config+0xb7c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d106      	bne.n	800a3f4 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800a3e6:	4b4b      	ldr	r3, [pc, #300]	; (800a514 <extInt_Config+0xb70>)
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	4a4a      	ldr	r2, [pc, #296]	; (800a514 <extInt_Config+0xb70>)
 800a3ec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a3f0:	6153      	str	r3, [r2, #20]
 800a3f2:	e000      	b.n	800a3f6 <extInt_Config+0xa52>

					} else {
						__NOP();
 800a3f4:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 800a3f6:	4b47      	ldr	r3, [pc, #284]	; (800a514 <extInt_Config+0xb70>)
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	4a46      	ldr	r2, [pc, #280]	; (800a514 <extInt_Config+0xb70>)
 800a3fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a400:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a46      	ldr	r2, [pc, #280]	; (800a524 <extInt_Config+0xb80>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d104      	bne.n	800a418 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800a40e:	4b41      	ldr	r3, [pc, #260]	; (800a514 <extInt_Config+0xb70>)
 800a410:	4a40      	ldr	r2, [pc, #256]	; (800a514 <extInt_Config+0xb70>)
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 800a416:	e0a7      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a42      	ldr	r2, [pc, #264]	; (800a528 <extInt_Config+0xb84>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d106      	bne.n	800a432 <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800a424:	4b3b      	ldr	r3, [pc, #236]	; (800a514 <extInt_Config+0xb70>)
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	4a3a      	ldr	r2, [pc, #232]	; (800a514 <extInt_Config+0xb70>)
 800a42a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a42e:	6153      	str	r3, [r2, #20]
					break;
 800a430:	e09a      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a35      	ldr	r2, [pc, #212]	; (800a510 <extInt_Config+0xb6c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d106      	bne.n	800a44c <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 800a43e:	4b35      	ldr	r3, [pc, #212]	; (800a514 <extInt_Config+0xb70>)
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	4a34      	ldr	r2, [pc, #208]	; (800a514 <extInt_Config+0xb70>)
 800a444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a448:	6153      	str	r3, [r2, #20]
					break;
 800a44a:	e08d      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a31      	ldr	r2, [pc, #196]	; (800a518 <extInt_Config+0xb74>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d106      	bne.n	800a466 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800a458:	4b2e      	ldr	r3, [pc, #184]	; (800a514 <extInt_Config+0xb70>)
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	4a2d      	ldr	r2, [pc, #180]	; (800a514 <extInt_Config+0xb70>)
 800a45e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a462:	6153      	str	r3, [r2, #20]
					break;
 800a464:	e080      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a2b      	ldr	r2, [pc, #172]	; (800a51c <extInt_Config+0xb78>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d106      	bne.n	800a480 <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800a472:	4b28      	ldr	r3, [pc, #160]	; (800a514 <extInt_Config+0xb70>)
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	4a27      	ldr	r2, [pc, #156]	; (800a514 <extInt_Config+0xb70>)
 800a478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a47c:	6153      	str	r3, [r2, #20]
					break;
 800a47e:	e073      	b.n	800a568 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a26      	ldr	r2, [pc, #152]	; (800a520 <extInt_Config+0xb7c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d106      	bne.n	800a49a <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800a48c:	4b21      	ldr	r3, [pc, #132]	; (800a514 <extInt_Config+0xb70>)
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	4a20      	ldr	r2, [pc, #128]	; (800a514 <extInt_Config+0xb70>)
 800a492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a496:	6153      	str	r3, [r2, #20]
					break;
 800a498:	e066      	b.n	800a568 <extInt_Config+0xbc4>
						__NOP();
 800a49a:	bf00      	nop
					break;
 800a49c:	e064      	b.n	800a568 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 800a49e:	4b1d      	ldr	r3, [pc, #116]	; (800a514 <extInt_Config+0xb70>)
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4a1c      	ldr	r2, [pc, #112]	; (800a514 <extInt_Config+0xb70>)
 800a4a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4a8:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a1c      	ldr	r2, [pc, #112]	; (800a524 <extInt_Config+0xb80>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d104      	bne.n	800a4c0 <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800a4b6:	4b17      	ldr	r3, [pc, #92]	; (800a514 <extInt_Config+0xb70>)
 800a4b8:	4a16      	ldr	r2, [pc, #88]	; (800a514 <extInt_Config+0xb70>)
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 800a4be:	e053      	b.n	800a568 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a18      	ldr	r2, [pc, #96]	; (800a528 <extInt_Config+0xb84>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d106      	bne.n	800a4da <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800a4cc:	4b11      	ldr	r3, [pc, #68]	; (800a514 <extInt_Config+0xb70>)
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	4a10      	ldr	r2, [pc, #64]	; (800a514 <extInt_Config+0xb70>)
 800a4d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4d6:	6153      	str	r3, [r2, #20]
						break;
 800a4d8:	e046      	b.n	800a568 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a0b      	ldr	r2, [pc, #44]	; (800a510 <extInt_Config+0xb6c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d106      	bne.n	800a4f4 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800a4e6:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <extInt_Config+0xb70>)
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	4a0a      	ldr	r2, [pc, #40]	; (800a514 <extInt_Config+0xb70>)
 800a4ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4f0:	6153      	str	r3, [r2, #20]
						break;
 800a4f2:	e039      	b.n	800a568 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a07      	ldr	r2, [pc, #28]	; (800a518 <extInt_Config+0xb74>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d115      	bne.n	800a52c <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 800a500:	4b04      	ldr	r3, [pc, #16]	; (800a514 <extInt_Config+0xb70>)
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	4a03      	ldr	r2, [pc, #12]	; (800a514 <extInt_Config+0xb70>)
 800a506:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800a50a:	6153      	str	r3, [r2, #20]
						break;
 800a50c:	e02c      	b.n	800a568 <extInt_Config+0xbc4>
 800a50e:	bf00      	nop
 800a510:	40020800 	.word	0x40020800
 800a514:	40013800 	.word	0x40013800
 800a518:	40020c00 	.word	0x40020c00
 800a51c:	40021000 	.word	0x40021000
 800a520:	40021c00 	.word	0x40021c00
 800a524:	40020000 	.word	0x40020000
 800a528:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a6c      	ldr	r2, [pc, #432]	; (800a6e4 <extInt_Config+0xd40>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d106      	bne.n	800a546 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800a538:	4b6b      	ldr	r3, [pc, #428]	; (800a6e8 <extInt_Config+0xd44>)
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	4a6a      	ldr	r2, [pc, #424]	; (800a6e8 <extInt_Config+0xd44>)
 800a53e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a542:	6153      	str	r3, [r2, #20]
						break;
 800a544:	e010      	b.n	800a568 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a67      	ldr	r2, [pc, #412]	; (800a6ec <extInt_Config+0xd48>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d106      	bne.n	800a560 <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800a552:	4b65      	ldr	r3, [pc, #404]	; (800a6e8 <extInt_Config+0xd44>)
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	4a64      	ldr	r2, [pc, #400]	; (800a6e8 <extInt_Config+0xd44>)
 800a558:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a55c:	6153      	str	r3, [r2, #20]
						break;
 800a55e:	e003      	b.n	800a568 <extInt_Config+0xbc4>
							__NOP();
 800a560:	bf00      	nop
						break;
 800a562:	e001      	b.n	800a568 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 800a564:	bf00      	nop
						break;
 800a566:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	791b      	ldrb	r3, [r3, #4]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d020      	beq.n	800a5b2 <extInt_Config+0xc0e>
 800a570:	2b02      	cmp	r3, #2
 800a572:	dc37      	bgt.n	800a5e4 <extInt_Config+0xc40>
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <extInt_Config+0xbda>
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d00d      	beq.n	800a598 <extInt_Config+0xbf4>
 800a57c:	e032      	b.n	800a5e4 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a57e:	4b5c      	ldr	r3, [pc, #368]	; (800a6f0 <extInt_Config+0xd4c>)
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6812      	ldr	r2, [r2, #0]
 800a586:	7912      	ldrb	r2, [r2, #4]
 800a588:	4611      	mov	r1, r2
 800a58a:	2201      	movs	r2, #1
 800a58c:	408a      	lsls	r2, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	4a57      	ldr	r2, [pc, #348]	; (800a6f0 <extInt_Config+0xd4c>)
 800a592:	430b      	orrs	r3, r1
 800a594:	60d3      	str	r3, [r2, #12]

		break;
 800a596:	e027      	b.n	800a5e8 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a598:	4b55      	ldr	r3, [pc, #340]	; (800a6f0 <extInt_Config+0xd4c>)
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6812      	ldr	r2, [r2, #0]
 800a5a0:	7912      	ldrb	r2, [r2, #4]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	408a      	lsls	r2, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4a51      	ldr	r2, [pc, #324]	; (800a6f0 <extInt_Config+0xd4c>)
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	6093      	str	r3, [r2, #8]

		break;
 800a5b0:	e01a      	b.n	800a5e8 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5b2:	4b4f      	ldr	r3, [pc, #316]	; (800a6f0 <extInt_Config+0xd4c>)
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6812      	ldr	r2, [r2, #0]
 800a5ba:	7912      	ldrb	r2, [r2, #4]
 800a5bc:	4611      	mov	r1, r2
 800a5be:	2201      	movs	r2, #1
 800a5c0:	408a      	lsls	r2, r1
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4a4a      	ldr	r2, [pc, #296]	; (800a6f0 <extInt_Config+0xd4c>)
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5ca:	4b49      	ldr	r3, [pc, #292]	; (800a6f0 <extInt_Config+0xd4c>)
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	7912      	ldrb	r2, [r2, #4]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	408a      	lsls	r2, r1
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4a44      	ldr	r2, [pc, #272]	; (800a6f0 <extInt_Config+0xd4c>)
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	6093      	str	r3, [r2, #8]

		break;
 800a5e2:	e001      	b.n	800a5e8 <extInt_Config+0xc44>

	}default :{

		__NOP();
 800a5e4:	bf00      	nop
		break;
 800a5e6:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800a5e8:	b672      	cpsid	i
}
 800a5ea:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800a5ec:	4b40      	ldr	r3, [pc, #256]	; (800a6f0 <extInt_Config+0xd4c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	7912      	ldrb	r2, [r2, #4]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	408a      	lsls	r2, r1
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4a3c      	ldr	r2, [pc, #240]	; (800a6f0 <extInt_Config+0xd4c>)
 800a600:	430b      	orrs	r3, r1
 800a602:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	791b      	ldrb	r3, [r3, #4]
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d862      	bhi.n	800a6d4 <extInt_Config+0xd30>
 800a60e:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <extInt_Config+0xc70>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a655 	.word	0x0800a655
 800a618:	0800a65d 	.word	0x0800a65d
 800a61c:	0800a665 	.word	0x0800a665
 800a620:	0800a66d 	.word	0x0800a66d
 800a624:	0800a675 	.word	0x0800a675
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a68d 	.word	0x0800a68d
 800a634:	0800a695 	.word	0x0800a695
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a6a5 	.word	0x0800a6a5
 800a640:	0800a6ad 	.word	0x0800a6ad
 800a644:	0800a6b5 	.word	0x0800a6b5
 800a648:	0800a6bd 	.word	0x0800a6bd
 800a64c:	0800a6c5 	.word	0x0800a6c5
 800a650:	0800a6cd 	.word	0x0800a6cd
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 800a654:	2006      	movs	r0, #6
 800a656:	f7ff f95d 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a65a:	e03d      	b.n	800a6d8 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 800a65c:	2007      	movs	r0, #7
 800a65e:	f7ff f959 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a662:	e039      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 800a664:	2008      	movs	r0, #8
 800a666:	f7ff f955 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a66a:	e035      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 800a66c:	2009      	movs	r0, #9
 800a66e:	f7ff f951 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a672:	e031      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 800a674:	200a      	movs	r0, #10
 800a676:	f7ff f94d 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a67a:	e02d      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a67c:	2017      	movs	r0, #23
 800a67e:	f7ff f949 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a682:	e029      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a684:	2017      	movs	r0, #23
 800a686:	f7ff f945 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a68a:	e025      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a68c:	2017      	movs	r0, #23
 800a68e:	f7ff f941 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a692:	e021      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a694:	2017      	movs	r0, #23
 800a696:	f7ff f93d 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a69a:	e01d      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a69c:	2017      	movs	r0, #23
 800a69e:	f7ff f939 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6a2:	e019      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a6a4:	2028      	movs	r0, #40	; 0x28
 800a6a6:	f7ff f935 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6aa:	e015      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a6ac:	2028      	movs	r0, #40	; 0x28
 800a6ae:	f7ff f931 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6b2:	e011      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a6b4:	2028      	movs	r0, #40	; 0x28
 800a6b6:	f7ff f92d 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6ba:	e00d      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a6bc:	2028      	movs	r0, #40	; 0x28
 800a6be:	f7ff f929 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6c2:	e009      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a6c4:	2028      	movs	r0, #40	; 0x28
 800a6c6:	f7ff f925 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6ca:	e005      	b.n	800a6d8 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a6cc:	2028      	movs	r0, #40	; 0x28
 800a6ce:	f7ff f921 	bl	8009914 <__NVIC_EnableIRQ>
			break;
 800a6d2:	e001      	b.n	800a6d8 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 800a6d4:	bf00      	nop
			break;
 800a6d6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a6d8:	b662      	cpsie	i
}
 800a6da:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	40021000 	.word	0x40021000
 800a6e8:	40013800 	.word	0x40013800
 800a6ec:	40021c00 	.word	0x40021c00
 800a6f0:	40013c00 	.word	0x40013c00

0800a6f4 <exti_Set_Priority>:

// Con esta funcion se setea la prioridad
void exti_Set_Priority (EXTI_Config_t *extiConfig, uint8_t newPriority){
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800a700:	b672      	cpsid	i
}
 800a702:	bf00      	nop

	__disable_irq();

		//Debemos patricular la interupcion en el NVIC para ello debemos hacerlo apra cada una de las posibles opciones
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	791b      	ldrb	r3, [r3, #4]
 800a70a:	2b0f      	cmp	r3, #15
 800a70c:	f200 8084 	bhi.w	800a818 <exti_Set_Priority+0x124>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <exti_Set_Priority+0x24>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a759 	.word	0x0800a759
 800a71c:	0800a765 	.word	0x0800a765
 800a720:	0800a771 	.word	0x0800a771
 800a724:	0800a77d 	.word	0x0800a77d
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a795 	.word	0x0800a795
 800a730:	0800a7a1 	.word	0x0800a7a1
 800a734:	0800a7ad 	.word	0x0800a7ad
 800a738:	0800a7b9 	.word	0x0800a7b9
 800a73c:	0800a7c5 	.word	0x0800a7c5
 800a740:	0800a7d1 	.word	0x0800a7d1
 800a744:	0800a7dd 	.word	0x0800a7dd
 800a748:	0800a7e9 	.word	0x0800a7e9
 800a74c:	0800a7f5 	.word	0x0800a7f5
 800a750:	0800a801 	.word	0x0800a801
 800a754:	0800a80d 	.word	0x0800a80d
			case 0: {
				__NVIC_SetPriority(EXTI0_IRQn, newPriority);
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	4619      	mov	r1, r3
 800a75c:	2006      	movs	r0, #6
 800a75e:	f7ff f8f7 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a762:	e05b      	b.n	800a81c <exti_Set_Priority+0x128>
			}

			case 1: {
				__NVIC_SetPriority(EXTI1_IRQn, newPriority);
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	4619      	mov	r1, r3
 800a768:	2007      	movs	r0, #7
 800a76a:	f7ff f8f1 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a76e:	e055      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 2: {
				__NVIC_SetPriority(EXTI2_IRQn, newPriority);
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	4619      	mov	r1, r3
 800a774:	2008      	movs	r0, #8
 800a776:	f7ff f8eb 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a77a:	e04f      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 3: {
				__NVIC_SetPriority(EXTI3_IRQn, newPriority);
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	4619      	mov	r1, r3
 800a780:	2009      	movs	r0, #9
 800a782:	f7ff f8e5 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a786:	e049      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 4: {
				__NVIC_SetPriority(EXTI4_IRQn, newPriority);
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	4619      	mov	r1, r3
 800a78c:	200a      	movs	r0, #10
 800a78e:	f7ff f8df 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a792:	e043      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 5: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	4619      	mov	r1, r3
 800a798:	2017      	movs	r0, #23
 800a79a:	f7ff f8d9 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a79e:	e03d      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 6: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a7a0:	78fb      	ldrb	r3, [r7, #3]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	2017      	movs	r0, #23
 800a7a6:	f7ff f8d3 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7aa:	e037      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 7: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	2017      	movs	r0, #23
 800a7b2:	f7ff f8cd 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7b6:	e031      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 8: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a7b8:	78fb      	ldrb	r3, [r7, #3]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	2017      	movs	r0, #23
 800a7be:	f7ff f8c7 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7c2:	e02b      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 9: {
				__NVIC_SetPriority(EXTI9_5_IRQn, newPriority);
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	2017      	movs	r0, #23
 800a7ca:	f7ff f8c1 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7ce:	e025      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 10: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	2028      	movs	r0, #40	; 0x28
 800a7d6:	f7ff f8bb 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7da:	e01f      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 11: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a7dc:	78fb      	ldrb	r3, [r7, #3]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	2028      	movs	r0, #40	; 0x28
 800a7e2:	f7ff f8b5 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7e6:	e019      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 12: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	2028      	movs	r0, #40	; 0x28
 800a7ee:	f7ff f8af 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7f2:	e013      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 13: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	2028      	movs	r0, #40	; 0x28
 800a7fa:	f7ff f8a9 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a7fe:	e00d      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 14: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	4619      	mov	r1, r3
 800a804:	2028      	movs	r0, #40	; 0x28
 800a806:	f7ff f8a3 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a80a:	e007      	b.n	800a81c <exti_Set_Priority+0x128>
			}
			case 15: {
				__NVIC_SetPriority(EXTI15_10_IRQn, newPriority);
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	4619      	mov	r1, r3
 800a810:	2028      	movs	r0, #40	; 0x28
 800a812:	f7ff f89d 	bl	8009950 <__NVIC_SetPriority>
				break;
 800a816:	e001      	b.n	800a81c <exti_Set_Priority+0x128>
			}

			default: {
				__NOP();
 800a818:	bf00      	nop
				break;
 800a81a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800a81c:	b662      	cpsie	i
}
 800a81e:	bf00      	nop

		}

	__enable_irq();

}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <callback_extInt0>:

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 800a828:	b480      	push	{r7}
 800a82a:	af00      	add	r7, sp, #0
	__NOP();
 800a82c:	bf00      	nop
}
 800a82e:	bf00      	nop
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt2(void){
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
	__NOP();
 800a83c:	bf00      	nop
}
 800a83e:	bf00      	nop
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}
__attribute__ ((weak)) void callback_extInt4(void){
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
	__NOP();
 800a84c:	bf00      	nop
}
 800a84e:	bf00      	nop
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0
	__NOP();
 800a85c:	bf00      	nop
}
 800a85e:	bf00      	nop
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
	__NOP();
 800a86c:	bf00      	nop
}
 800a86e:	bf00      	nop
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
	__NOP();
 800a87c:	bf00      	nop
}
 800a87e:	bf00      	nop
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0
	__NOP();
 800a88c:	bf00      	nop
}
 800a88e:	bf00      	nop
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
	__NOP();
 800a89c:	bf00      	nop
}
 800a89e:	bf00      	nop
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
	__NOP();
 800a8ac:	bf00      	nop
}
 800a8ae:	bf00      	nop
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 800a8b8:	b480      	push	{r7}
 800a8ba:	af00      	add	r7, sp, #0
	__NOP();
 800a8bc:	bf00      	nop
}
 800a8be:	bf00      	nop
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 800a8c8:	b480      	push	{r7}
 800a8ca:	af00      	add	r7, sp, #0
	__NOP();
 800a8cc:	bf00      	nop
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
	__NOP();
 800a8dc:	bf00      	nop
}
 800a8de:	bf00      	nop
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
	__NOP();
 800a8ec:	bf00      	nop
}
 800a8ee:	bf00      	nop
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
	__NOP();
 800a8fc:	bf00      	nop
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <EXTI0_IRQHandler+0x24>)
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 800a918:	4b04      	ldr	r3, [pc, #16]	; (800a92c <EXTI0_IRQHandler+0x24>)
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	4a03      	ldr	r2, [pc, #12]	; (800a92c <EXTI0_IRQHandler+0x24>)
 800a91e:	f043 0301 	orr.w	r3, r3, #1
 800a922:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 800a924:	f7ff ff80 	bl	800a828 <callback_extInt0>
	}
}
 800a928:	bf00      	nop
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	40013c00 	.word	0x40013c00

0800a930 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 800a934:	4b07      	ldr	r3, [pc, #28]	; (800a954 <EXTI1_IRQHandler+0x24>)
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d007      	beq.n	800a950 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 800a940:	4b04      	ldr	r3, [pc, #16]	; (800a954 <EXTI1_IRQHandler+0x24>)
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	4a03      	ldr	r2, [pc, #12]	; (800a954 <EXTI1_IRQHandler+0x24>)
 800a946:	f043 0302 	orr.w	r3, r3, #2
 800a94a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 800a94c:	f7f8 f828 	bl	80029a0 <callback_extInt1>
	}
}
 800a950:	bf00      	nop
 800a952:	bd80      	pop	{r7, pc}
 800a954:	40013c00 	.word	0x40013c00

0800a958 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 800a95c:	4b07      	ldr	r3, [pc, #28]	; (800a97c <EXTI2_IRQHandler+0x24>)
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	f003 0304 	and.w	r3, r3, #4
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 800a968:	4b04      	ldr	r3, [pc, #16]	; (800a97c <EXTI2_IRQHandler+0x24>)
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	4a03      	ldr	r2, [pc, #12]	; (800a97c <EXTI2_IRQHandler+0x24>)
 800a96e:	f043 0304 	orr.w	r3, r3, #4
 800a972:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 800a974:	f7ff ff60 	bl	800a838 <callback_extInt2>
	}
}
 800a978:	bf00      	nop
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	40013c00 	.word	0x40013c00

0800a980 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800a984:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <EXTI3_IRQHandler+0x24>)
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	f003 0308 	and.w	r3, r3, #8
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 800a990:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <EXTI3_IRQHandler+0x24>)
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	4a03      	ldr	r2, [pc, #12]	; (800a9a4 <EXTI3_IRQHandler+0x24>)
 800a996:	f043 0308 	orr.w	r3, r3, #8
 800a99a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 800a99c:	f7f8 f816 	bl	80029cc <callback_extInt3>
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	40013c00 	.word	0x40013c00

0800a9a8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 800a9ac:	4b07      	ldr	r3, [pc, #28]	; (800a9cc <EXTI4_IRQHandler+0x24>)
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	f003 0310 	and.w	r3, r3, #16
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <EXTI4_IRQHandler+0x24>)
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	4a03      	ldr	r2, [pc, #12]	; (800a9cc <EXTI4_IRQHandler+0x24>)
 800a9be:	f043 0310 	orr.w	r3, r3, #16
 800a9c2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800a9c4:	f7ff ff40 	bl	800a848 <callback_extInt4>
	}
}
 800a9c8:	bf00      	nop
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	40013c00 	.word	0x40013c00

0800a9d0 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800a9d4:	4b26      	ldr	r3, [pc, #152]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	f003 0320 	and.w	r3, r3, #32
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d008      	beq.n	800a9f2 <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 800a9e0:	4b23      	ldr	r3, [pc, #140]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	4a22      	ldr	r2, [pc, #136]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800a9e6:	f043 0320 	orr.w	r3, r3, #32
 800a9ea:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 800a9ec:	f7ff ff34 	bl	800a858 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 800a9f0:	e03c      	b.n	800aa6c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800a9f2:	4b1f      	ldr	r3, [pc, #124]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d008      	beq.n	800aa10 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 800a9fe:	4b1c      	ldr	r3, [pc, #112]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	4a1b      	ldr	r2, [pc, #108]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa08:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 800aa0a:	f7ff ff2d 	bl	800a868 <callback_extInt6>
}
 800aa0e:	e02d      	b.n	800aa6c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 800aa10:	4b17      	ldr	r3, [pc, #92]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d008      	beq.n	800aa2e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 800aa1c:	4b14      	ldr	r3, [pc, #80]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	4a13      	ldr	r2, [pc, #76]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa26:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 800aa28:	f7ff ff26 	bl	800a878 <callback_extInt7>
}
 800aa2c:	e01e      	b.n	800aa6c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 800aa2e:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d008      	beq.n	800aa4c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	4a0c      	ldr	r2, [pc, #48]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa44:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 800aa46:	f7ff ff1f 	bl	800a888 <callback_extInt8>
}
 800aa4a:	e00f      	b.n	800aa6c <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa4e:	695b      	ldr	r3, [r3, #20]
 800aa50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d008      	beq.n	800aa6a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	4a04      	ldr	r2, [pc, #16]	; (800aa70 <EXTI9_5_IRQHandler+0xa0>)
 800aa5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa62:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 800aa64:	f7ff ff18 	bl	800a898 <callback_extInt9>
}
 800aa68:	e000      	b.n	800aa6c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800aa6a:	bf00      	nop
}
 800aa6c:	bf00      	nop
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	40013c00 	.word	0x40013c00

0800aa74 <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 800aa78:	4b2d      	ldr	r3, [pc, #180]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d008      	beq.n	800aa96 <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800aa84:	4b2a      	ldr	r3, [pc, #168]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aa8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa8e:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 800aa90:	f7ff ff0a 	bl	800a8a8 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800aa94:	e049      	b.n	800ab2a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800aa96:	4b26      	ldr	r3, [pc, #152]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d008      	beq.n	800aab4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800aaa2:	4b23      	ldr	r3, [pc, #140]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	4a22      	ldr	r2, [pc, #136]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aaa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aaac:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 800aaae:	f7ff ff03 	bl	800a8b8 <callback_extInt11>
}
 800aab2:	e03a      	b.n	800ab2a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800aab4:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d008      	beq.n	800aad2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 800aac0:	4b1b      	ldr	r3, [pc, #108]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	4a1a      	ldr	r2, [pc, #104]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaca:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 800aacc:	f7ff fefc 	bl	800a8c8 <callback_extInt12>
}
 800aad0:	e02b      	b.n	800ab2a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800aad2:	4b17      	ldr	r3, [pc, #92]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d008      	beq.n	800aaf0 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 800aade:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	4a13      	ldr	r2, [pc, #76]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aae8:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 800aaea:	f7ff fef5 	bl	800a8d8 <callback_extInt13>
}
 800aaee:	e01c      	b.n	800ab2a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 800aaf0:	4b0f      	ldr	r3, [pc, #60]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d008      	beq.n	800ab0e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 800aafc:	4b0c      	ldr	r3, [pc, #48]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	4a0b      	ldr	r2, [pc, #44]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800ab02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab06:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 800ab08:	f7ff feee 	bl	800a8e8 <callback_extInt14>
}
 800ab0c:	e00d      	b.n	800ab2a <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 800ab0e:	4b08      	ldr	r3, [pc, #32]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 800ab1a:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	4a04      	ldr	r2, [pc, #16]	; (800ab30 <EXTI15_10_IRQHandler+0xbc>)
 800ab20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab24:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 800ab26:	f7ff fee7 	bl	800a8f8 <callback_extInt15>
}
 800ab2a:	bf00      	nop
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	40013c00 	.word	0x40013c00

0800ab34 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a88      	ldr	r2, [pc, #544]	; (800ad6c <GPIO_Config+0x238>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d106      	bne.n	800ab5c <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 800ab4e:	4b88      	ldr	r3, [pc, #544]	; (800ad70 <GPIO_Config+0x23c>)
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	4a87      	ldr	r2, [pc, #540]	; (800ad70 <GPIO_Config+0x23c>)
 800ab54:	f043 0301 	orr.w	r3, r3, #1
 800ab58:	6313      	str	r3, [r2, #48]	; 0x30
 800ab5a:	e03a      	b.n	800abd2 <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a84      	ldr	r2, [pc, #528]	; (800ad74 <GPIO_Config+0x240>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d106      	bne.n	800ab74 <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800ab66:	4b82      	ldr	r3, [pc, #520]	; (800ad70 <GPIO_Config+0x23c>)
 800ab68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6a:	4a81      	ldr	r2, [pc, #516]	; (800ad70 <GPIO_Config+0x23c>)
 800ab6c:	f043 0302 	orr.w	r3, r3, #2
 800ab70:	6313      	str	r3, [r2, #48]	; 0x30
 800ab72:	e02e      	b.n	800abd2 <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a7f      	ldr	r2, [pc, #508]	; (800ad78 <GPIO_Config+0x244>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d106      	bne.n	800ab8c <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 800ab7e:	4b7c      	ldr	r3, [pc, #496]	; (800ad70 <GPIO_Config+0x23c>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	4a7b      	ldr	r2, [pc, #492]	; (800ad70 <GPIO_Config+0x23c>)
 800ab84:	f043 0304 	orr.w	r3, r3, #4
 800ab88:	6313      	str	r3, [r2, #48]	; 0x30
 800ab8a:	e022      	b.n	800abd2 <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a7a      	ldr	r2, [pc, #488]	; (800ad7c <GPIO_Config+0x248>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d106      	bne.n	800aba4 <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800ab96:	4b76      	ldr	r3, [pc, #472]	; (800ad70 <GPIO_Config+0x23c>)
 800ab98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9a:	4a75      	ldr	r2, [pc, #468]	; (800ad70 <GPIO_Config+0x23c>)
 800ab9c:	f043 0308 	orr.w	r3, r3, #8
 800aba0:	6313      	str	r3, [r2, #48]	; 0x30
 800aba2:	e016      	b.n	800abd2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a75      	ldr	r2, [pc, #468]	; (800ad80 <GPIO_Config+0x24c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d106      	bne.n	800abbc <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800abae:	4b70      	ldr	r3, [pc, #448]	; (800ad70 <GPIO_Config+0x23c>)
 800abb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb2:	4a6f      	ldr	r2, [pc, #444]	; (800ad70 <GPIO_Config+0x23c>)
 800abb4:	f043 0310 	orr.w	r3, r3, #16
 800abb8:	6313      	str	r3, [r2, #48]	; 0x30
 800abba:	e00a      	b.n	800abd2 <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a70      	ldr	r2, [pc, #448]	; (800ad84 <GPIO_Config+0x250>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d105      	bne.n	800abd2 <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800abc6:	4b6a      	ldr	r3, [pc, #424]	; (800ad70 <GPIO_Config+0x23c>)
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	4a69      	ldr	r2, [pc, #420]	; (800ad70 <GPIO_Config+0x23c>)
 800abcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd0:	6313      	str	r3, [r2, #48]	; 0x30
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	795b      	ldrb	r3, [r3, #5]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d143      	bne.n	800ac62 <GPIO_Config+0x12e>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	791b      	ldrb	r3, [r3, #4]
 800abde:	2b07      	cmp	r3, #7
 800abe0:	d81f      	bhi.n	800ac22 <GPIO_Config+0xee>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	791b      	ldrb	r3, [r3, #4]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6a1a      	ldr	r2, [r3, #32]
 800abf0:	210f      	movs	r1, #15
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	fa01 f303 	lsl.w	r3, r1, r3
 800abf8:	43db      	mvns	r3, r3
 800abfa:	4619      	mov	r1, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	400a      	ands	r2, r1
 800ac02:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6a1a      	ldr	r2, [r3, #32]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	7a5b      	ldrb	r3, [r3, #9]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	fa01 f303 	lsl.w	r3, r1, r3
 800ac16:	4619      	mov	r1, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	621a      	str	r2, [r3, #32]
 800ac20:	e01f      	b.n	800ac62 <GPIO_Config+0x12e>

		}
		else {
			//Estamos en el registro AFRH, que controla los pines del PIN_8 al PIN_15
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	791b      	ldrb	r3, [r3, #4]
 800ac26:	3b08      	subs	r3, #8
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac32:	210f      	movs	r1, #15
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3a:	43db      	mvns	r3, r3
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	400a      	ands	r2, r1
 800ac44:	625a      	str	r2, [r3, #36]	; 0x24

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	7a5b      	ldrb	r3, [r3, #9]
 800ac50:	4619      	mov	r1, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	fa01 f303 	lsl.w	r3, r1, r3
 800ac58:	4619      	mov	r1, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	795b      	ldrb	r3, [r3, #5]
 800ac66:	461a      	mov	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	791b      	ldrb	r3, [r3, #4]
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac72:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	791b      	ldrb	r3, [r3, #4]
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	2103      	movs	r1, #3
 800ac82:	fa01 f303 	lsl.w	r3, r1, r3
 800ac86:	43db      	mvns	r3, r3
 800ac88:	4619      	mov	r1, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	400a      	ands	r2, r1
 800ac90:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6819      	ldr	r1, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	7a1b      	ldrb	r3, [r3, #8]
 800aca6:	461a      	mov	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	791b      	ldrb	r3, [r3, #4]
 800acac:	fa02 f303 	lsl.w	r3, r2, r3
 800acb0:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	791b      	ldrb	r3, [r3, #4]
 800acbc:	4619      	mov	r1, r3
 800acbe:	2301      	movs	r3, #1
 800acc0:	408b      	lsls	r3, r1
 800acc2:	43db      	mvns	r3, r3
 800acc4:	4619      	mov	r1, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	400a      	ands	r2, r1
 800accc:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6859      	ldr	r1, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	799b      	ldrb	r3, [r3, #6]
 800ace2:	461a      	mov	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	791b      	ldrb	r3, [r3, #4]
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	fa02 f303 	lsl.w	r3, r2, r3
 800acee:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689a      	ldr	r2, [r3, #8]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	791b      	ldrb	r3, [r3, #4]
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	2103      	movs	r1, #3
 800acfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ad02:	43db      	mvns	r3, r3
 800ad04:	4619      	mov	r1, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	400a      	ands	r2, r1
 800ad0c:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6899      	ldr	r1, [r3, #8]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	79db      	ldrb	r3, [r3, #7]
 800ad22:	461a      	mov	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	791b      	ldrb	r3, [r3, #4]
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68da      	ldr	r2, [r3, #12]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	2103      	movs	r1, #3
 800ad3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad42:	43db      	mvns	r3, r3
 800ad44:	4619      	mov	r1, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	400a      	ands	r2, r1
 800ad4c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68d9      	ldr	r1, [r3, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	60da      	str	r2, [r3, #12]

}//Fin del GPIO_Config
 800ad5e:	bf00      	nop
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	40020000 	.word	0x40020000
 800ad70:	40023800 	.word	0x40023800
 800ad74:	40020400 	.word	0x40020400
 800ad78:	40020800 	.word	0x40020800
 800ad7c:	40020c00 	.word	0x40020c00
 800ad80:	40021000 	.word	0x40021000
 800ad84:	40021c00 	.word	0x40021c00

0800ad88 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d10d      	bne.n	800adb6 <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	699a      	ldr	r2, [r3, #24]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	791b      	ldrb	r3, [r3, #4]
 800ada4:	4619      	mov	r1, r3
 800ada6:	2301      	movs	r3, #1
 800ada8:	408b      	lsls	r3, r1
 800adaa:	4619      	mov	r1, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800adb4:	e00d      	b.n	800add2 <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	699a      	ldr	r2, [r3, #24]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	791b      	ldrb	r3, [r3, #4]
 800adc0:	3310      	adds	r3, #16
 800adc2:	2101      	movs	r1, #1
 800adc4:	fa01 f303 	lsl.w	r3, r1, r3
 800adc8:	4619      	mov	r1, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	619a      	str	r2, [r3, #24]
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	460b      	mov	r3, r1
 800ade8:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10d      	bne.n	800ae0c <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	699a      	ldr	r2, [r3, #24]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	791b      	ldrb	r3, [r3, #4]
 800adfa:	4619      	mov	r1, r3
 800adfc:	2301      	movs	r3, #1
 800adfe:	408b      	lsls	r3, r1
 800ae00:	4619      	mov	r1, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 800ae0a:	e00d      	b.n	800ae28 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	699a      	ldr	r2, [r3, #24]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	791b      	ldrb	r3, [r3, #4]
 800ae16:	3310      	adds	r3, #16
 800ae18:	2101      	movs	r1, #1
 800ae1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1e:	4619      	mov	r1, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	619a      	str	r2, [r3, #24]
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 800ae34:	b480      	push	{r7}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	461a      	mov	r2, r3
 800ae46:	2301      	movs	r3, #1
 800ae48:	4093      	lsls	r3, r2
 800ae4a:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 800ae54:	897b      	ldrh	r3, [r7, #10]
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	791b      	ldrb	r3, [r3, #4]
 800ae60:	461a      	mov	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	40d3      	lsrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]

	return pinValue;
 800ae68:	68fb      	ldr	r3, [r7, #12]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b084      	sub	sp, #16
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff ffd8 	bl	800ae34 <GPIO_ReadPin>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bf0c      	ite	eq
 800ae8e:	2301      	moveq	r3, #1
 800ae90:	2300      	movne	r3, #0
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff ff76 	bl	800ad88 <GPIO_WritePin>
}
 800ae9c:	bf00      	nop
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <configMPUAccel>:
#include "I2CDriver.h"
#include "GPIOxDriver.h"
#include "BasicTimer.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff fe3b 	bl	800ab34 <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7ff fe36 	bl	800ab34 <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	4618      	mov	r0, r3
 800aece:	f002 fbfd 	bl	800d6cc <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800aed2:	e004      	b.n	800aede <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f94f 	bl	800b178 <WHOIAM>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0f7      	beq.n	800aed4 <configMPUAccel+0x30>
	}


	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800aee4:	216b      	movs	r1, #107	; 0x6b
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f8f1 	bl	800b0ce <readData>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73bb      	strb	r3, [r7, #14]

	byte &=  ~byte;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	461a      	mov	r2, r3
 800aef8:	216b      	movs	r1, #107	; 0x6b
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f89c 	bl	800b038 <writeData>

	byte = readData(ptrMPUAccel, 0x6B);
 800af00:	216b      	movs	r1, #107	; 0x6b
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f8e3 	bl	800b0ce <readData>
 800af08:	4603      	mov	r3, r0
 800af0a:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 800af0c:	211c      	movs	r1, #28
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8dd 	bl	800b0ce <readData>
 800af14:	4603      	mov	r3, r0
 800af16:	73bb      	strb	r3, [r7, #14]

		byte &= ~(0b00011000) ;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	f023 0318 	bic.w	r3, r3, #24
 800af1e:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b03      	cmp	r3, #3
 800af26:	d833      	bhi.n	800af90 <configMPUAccel+0xec>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <configMPUAccel+0x8c>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af41 	.word	0x0800af41
 800af34:	0800af4f 	.word	0x0800af4f
 800af38:	0800af65 	.word	0x0800af65
 800af3c:	0800af7b 	.word	0x0800af7b
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	461a      	mov	r2, r3
 800af44:	211c      	movs	r1, #28
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f876 	bl	800b038 <writeData>


				break;
 800af4c:	e021      	b.n	800af92 <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	f043 0308 	orr.w	r3, r3, #8
 800af54:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800af56:	7bbb      	ldrb	r3, [r7, #14]
 800af58:	461a      	mov	r2, r3
 800af5a:	211c      	movs	r1, #28
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f86b 	bl	800b038 <writeData>


				break;
 800af62:	e016      	b.n	800af92 <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800af64:	7bbb      	ldrb	r3, [r7, #14]
 800af66:	f043 0310 	orr.w	r3, r3, #16
 800af6a:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800af6c:	7bbb      	ldrb	r3, [r7, #14]
 800af6e:	461a      	mov	r2, r3
 800af70:	211c      	movs	r1, #28
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f860 	bl	800b038 <writeData>


				break;
 800af78:	e00b      	b.n	800af92 <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	f043 0318 	orr.w	r3, r3, #24
 800af80:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	461a      	mov	r2, r3
 800af86:	211c      	movs	r1, #28
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f855 	bl	800b038 <writeData>


				break;
 800af8e:	e000      	b.n	800af92 <configMPUAccel+0xee>
			}default:{
				break;
 800af90:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800af92:	211c      	movs	r1, #28
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f89a 	bl	800b0ce <readData>
 800af9a:	4603      	mov	r3, r0
 800af9c:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 800af9e:	211b      	movs	r1, #27
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f894 	bl	800b0ce <readData>
 800afa6:	4603      	mov	r3, r0
 800afa8:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 800afaa:	7bbb      	ldrb	r3, [r7, #14]
 800afac:	f023 0318 	bic.w	r3, r3, #24
 800afb0:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	785b      	ldrb	r3, [r3, #1]
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d832      	bhi.n	800b020 <configMPUAccel+0x17c>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <configMPUAccel+0x11c>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800afdf 	.word	0x0800afdf
 800afc8:	0800aff5 	.word	0x0800aff5
 800afcc:	0800b00b 	.word	0x0800b00b
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	461a      	mov	r2, r3
 800afd4:	211b      	movs	r1, #27
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f82e 	bl	800b038 <writeData>


				break;
 800afdc:	e021      	b.n	800b022 <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	f043 0308 	orr.w	r3, r3, #8
 800afe4:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	461a      	mov	r2, r3
 800afea:	211b      	movs	r1, #27
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f823 	bl	800b038 <writeData>


				break;
 800aff2:	e016      	b.n	800b022 <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	f043 0310 	orr.w	r3, r3, #16
 800affa:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	461a      	mov	r2, r3
 800b000:	211b      	movs	r1, #27
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f818 	bl	800b038 <writeData>


				break;
 800b008:	e00b      	b.n	800b022 <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	f043 0318 	orr.w	r3, r3, #24
 800b010:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	461a      	mov	r2, r3
 800b016:	211b      	movs	r1, #27
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 f80d 	bl	800b038 <writeData>


				break;
 800b01e:	e000      	b.n	800b022 <configMPUAccel+0x17e>
			}default:{
				break;
 800b020:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 800b022:	211b      	movs	r1, #27
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f852 	bl	800b0ce <readData>
 800b02a:	4603      	mov	r3, r0
 800b02c:	73bb      	strb	r3, [r7, #14]


}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop

0800b038 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	70fb      	strb	r3, [r7, #3]
 800b044:	4613      	mov	r3, r2
 800b046:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	695a      	ldr	r2, [r3, #20]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b05a:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	4618      	mov	r0, r3
 800b062:	f002 fca3 	bl	800d9ac <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68d8      	ldr	r0, [r3, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	791b      	ldrb	r3, [r3, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	4619      	mov	r1, r3
 800b074:	f002 fd05 	bl	800da82 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	78fa      	ldrb	r2, [r7, #3]
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f002 fd26 	bl	800dad2 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b086:	e000      	b.n	800b08a <writeData+0x52>
		__NOP();
 800b088:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1f6      	bne.n	800b088 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	78ba      	ldrb	r2, [r7, #2]
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f002 fd2f 	bl	800db06 <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b0a8:	e000      	b.n	800b0ac <writeData+0x74>
		__NOP();
 800b0aa:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1f6      	bne.n	800b0aa <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f002 fc61 	bl	800d988 <i2c_stopTransaction>



}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695a      	ldr	r2, [r3, #20]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0f0:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f002 fc58 	bl	800d9ac <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68d8      	ldr	r0, [r3, #12]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	791b      	ldrb	r3, [r3, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	4619      	mov	r1, r3
 800b10a:	f002 fcba 	bl	800da82 <i2c_sendSlaveAddressRW>
	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	78fa      	ldrb	r2, [r7, #3]
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f002 fcdb 	bl	800dad2 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b11c:	e000      	b.n	800b120 <readData+0x52>
		__NOP();
 800b11e:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f6      	bne.n	800b11e <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fc6a 	bl	800da0e <i2c_reStartTransaction>
	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68d8      	ldr	r0, [r3, #12]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	791b      	ldrb	r3, [r3, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	4619      	mov	r1, r3
 800b148:	f002 fc9b 	bl	800da82 <i2c_sendSlaveAddressRW>
	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4618      	mov	r0, r3
 800b152:	f002 fc84 	bl	800da5e <i2c_sendNoAck>
	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f002 fc14 	bl	800d988 <i2c_stopTransaction>
	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4618      	mov	r0, r3
 800b166:	f002 fce8 	bl	800db3a <i2c_readDataByte>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73fb      	strb	r3, [r7, #15]
	return auxRead;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 800b188:	2175      	movs	r1, #117	; 0x75
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff ff9f 	bl	800b0ce <readData>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b19a:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bf14      	ite	ne
 800b1a6:	2301      	movne	r3, #1
 800b1a8:	2300      	moveq	r3, #0
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	73bb      	strb	r3, [r7, #14]

	return rdy;
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]

}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	f04f 0300 	mov.w	r3, #0
 800b1d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 800b1d8:	2143      	movs	r1, #67	; 0x43
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff ff77 	bl	800b0ce <readData>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 800b1e4:	2144      	movs	r1, #68	; 0x44
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ff71 	bl	800b0ce <readData>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 800b1f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	b21a      	sxth	r2, r3
 800b1f8:	89bb      	ldrh	r3, [r7, #12]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	785b      	ldrb	r3, [r3, #1]
 800b202:	2b03      	cmp	r3, #3
 800b204:	d846      	bhi.n	800b294 <readGyro_X+0xdc>
 800b206:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <readGyro_X+0x54>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b23b 	.word	0x0800b23b
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b277 	.word	0x0800b277
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 800b21c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b220:	4618      	mov	r0, r3
 800b222:	f7f5 f997 	bl	8000554 <__aeabi_i2d>
 800b226:	a325      	add	r3, pc, #148	; (adr r3, 800b2bc <readGyro_X+0x104>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f7f5 fb26 	bl	800087c <__aeabi_ddiv>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b238:	e02d      	b.n	800b296 <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 800b23a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7f5 f988 	bl	8000554 <__aeabi_i2d>
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	4b19      	ldr	r3, [pc, #100]	; (800b2b0 <readGyro_X+0xf8>)
 800b24a:	f7f5 fb17 	bl	800087c <__aeabi_ddiv>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b256:	e01e      	b.n	800b296 <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 800b258:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7f5 f979 	bl	8000554 <__aeabi_i2d>
 800b262:	f04f 0200 	mov.w	r2, #0
 800b266:	4b13      	ldr	r3, [pc, #76]	; (800b2b4 <readGyro_X+0xfc>)
 800b268:	f7f5 fb08 	bl	800087c <__aeabi_ddiv>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b274:	e00f      	b.n	800b296 <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 800b276:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f5 f96a 	bl	8000554 <__aeabi_i2d>
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	4b0c      	ldr	r3, [pc, #48]	; (800b2b8 <readGyro_X+0x100>)
 800b286:	f7f5 faf9 	bl	800087c <__aeabi_ddiv>
 800b28a:	4602      	mov	r2, r0
 800b28c:	460b      	mov	r3, r1
 800b28e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b292:	e000      	b.n	800b296 <readGyro_X+0xde>
		}default:{
			break;
 800b294:	bf00      	nop
		}

	}

	return GYROX_R;
 800b296:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b29a:	f7f5 fcbd 	bl	8000c18 <__aeabi_d2f>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	ee07 3a90 	vmov	s15, r3

}
 800b2a4:	eeb0 0a67 	vmov.f32	s0, s15
 800b2a8:	3718      	adds	r7, #24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	40508000 	.word	0x40508000
 800b2b4:	40408000 	.word	0x40408000
 800b2b8:	40300000 	.word	0x40300000
 800b2bc:	00000000 	.word	0x00000000
 800b2c0:	40606000 	.word	0x40606000
 800b2c4:	00000000 	.word	0x00000000

0800b2c8 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 800b2dc:	f04f 0200 	mov.w	r2, #0
 800b2e0:	f04f 0300 	mov.w	r3, #0
 800b2e4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 800b2e8:	2145      	movs	r1, #69	; 0x45
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff feef 	bl	800b0ce <readData>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 800b2f4:	2146      	movs	r1, #70	; 0x46
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7ff fee9 	bl	800b0ce <readData>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 800b300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	b21a      	sxth	r2, r3
 800b308:	89bb      	ldrh	r3, [r7, #12]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	785b      	ldrb	r3, [r3, #1]
 800b312:	2b03      	cmp	r3, #3
 800b314:	d846      	bhi.n	800b3a4 <readGyro_Y+0xdc>
 800b316:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <readGyro_Y+0x54>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b32d 	.word	0x0800b32d
 800b320:	0800b34b 	.word	0x0800b34b
 800b324:	0800b369 	.word	0x0800b369
 800b328:	0800b387 	.word	0x0800b387
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 800b32c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b330:	4618      	mov	r0, r3
 800b332:	f7f5 f90f 	bl	8000554 <__aeabi_i2d>
 800b336:	a325      	add	r3, pc, #148	; (adr r3, 800b3cc <readGyro_Y+0x104>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	f7f5 fa9e 	bl	800087c <__aeabi_ddiv>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b348:	e02d      	b.n	800b3a6 <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 800b34a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b34e:	4618      	mov	r0, r3
 800b350:	f7f5 f900 	bl	8000554 <__aeabi_i2d>
 800b354:	f04f 0200 	mov.w	r2, #0
 800b358:	4b19      	ldr	r3, [pc, #100]	; (800b3c0 <readGyro_Y+0xf8>)
 800b35a:	f7f5 fa8f 	bl	800087c <__aeabi_ddiv>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b366:	e01e      	b.n	800b3a6 <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 800b368:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f5 f8f1 	bl	8000554 <__aeabi_i2d>
 800b372:	f04f 0200 	mov.w	r2, #0
 800b376:	4b13      	ldr	r3, [pc, #76]	; (800b3c4 <readGyro_Y+0xfc>)
 800b378:	f7f5 fa80 	bl	800087c <__aeabi_ddiv>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b384:	e00f      	b.n	800b3a6 <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 800b386:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f5 f8e2 	bl	8000554 <__aeabi_i2d>
 800b390:	f04f 0200 	mov.w	r2, #0
 800b394:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <readGyro_Y+0x100>)
 800b396:	f7f5 fa71 	bl	800087c <__aeabi_ddiv>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b3a2:	e000      	b.n	800b3a6 <readGyro_Y+0xde>
		}default:{
			break;
 800b3a4:	bf00      	nop
		}

	}

	return GYROY_R;
 800b3a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b3aa:	f7f5 fc35 	bl	8000c18 <__aeabi_d2f>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	ee07 3a90 	vmov	s15, r3

}
 800b3b4:	eeb0 0a67 	vmov.f32	s0, s15
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	40508000 	.word	0x40508000
 800b3c4:	40408000 	.word	0x40408000
 800b3c8:	40300000 	.word	0x40300000
 800b3cc:	00000000 	.word	0x00000000
 800b3d0:	40606000 	.word	0x40606000
 800b3d4:	00000000 	.word	0x00000000

0800b3d8 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 800b3ec:	f04f 0200 	mov.w	r2, #0
 800b3f0:	f04f 0300 	mov.w	r3, #0
 800b3f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 800b3f8:	2147      	movs	r1, #71	; 0x47
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fe67 	bl	800b0ce <readData>
 800b400:	4603      	mov	r3, r0
 800b402:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 800b404:	2148      	movs	r1, #72	; 0x48
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff fe61 	bl	800b0ce <readData>
 800b40c:	4603      	mov	r3, r0
 800b40e:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 800b410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	b21a      	sxth	r2, r3
 800b418:	89bb      	ldrh	r3, [r7, #12]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	2b03      	cmp	r3, #3
 800b424:	d846      	bhi.n	800b4b4 <readGyro_Z+0xdc>
 800b426:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <readGyro_Z+0x54>)
 800b428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42c:	0800b43d 	.word	0x0800b43d
 800b430:	0800b45b 	.word	0x0800b45b
 800b434:	0800b479 	.word	0x0800b479
 800b438:	0800b497 	.word	0x0800b497
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 800b43c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b440:	4618      	mov	r0, r3
 800b442:	f7f5 f887 	bl	8000554 <__aeabi_i2d>
 800b446:	a325      	add	r3, pc, #148	; (adr r3, 800b4dc <readGyro_Z+0x104>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	f7f5 fa16 	bl	800087c <__aeabi_ddiv>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b458:	e02d      	b.n	800b4b6 <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 800b45a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b45e:	4618      	mov	r0, r3
 800b460:	f7f5 f878 	bl	8000554 <__aeabi_i2d>
 800b464:	f04f 0200 	mov.w	r2, #0
 800b468:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <readGyro_Z+0xf8>)
 800b46a:	f7f5 fa07 	bl	800087c <__aeabi_ddiv>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b476:	e01e      	b.n	800b4b6 <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 800b478:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7f5 f869 	bl	8000554 <__aeabi_i2d>
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <readGyro_Z+0xfc>)
 800b488:	f7f5 f9f8 	bl	800087c <__aeabi_ddiv>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b494:	e00f      	b.n	800b4b6 <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 800b496:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f5 f85a 	bl	8000554 <__aeabi_i2d>
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <readGyro_Z+0x100>)
 800b4a6:	f7f5 f9e9 	bl	800087c <__aeabi_ddiv>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 800b4b2:	e000      	b.n	800b4b6 <readGyro_Z+0xde>
		}default:{
			break;
 800b4b4:	bf00      	nop
		}

	}

	return GYROZ_R;
 800b4b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b4ba:	f7f5 fbad 	bl	8000c18 <__aeabi_d2f>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	ee07 3a90 	vmov	s15, r3

}
 800b4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40508000 	.word	0x40508000
 800b4d4:	40408000 	.word	0x40408000
 800b4d8:	40300000 	.word	0x40300000
 800b4dc:	00000000 	.word	0x00000000
 800b4e0:	40606000 	.word	0x40606000
 800b4e4:	00000000 	.word	0x00000000

0800b4e8 <build_Operation>:



//-------------------------Funcion para la definicion de operaciones--------------------------
void build_Operation(Parameters_Operation_t *prtList, Parameter_build_t *prtbuild, double finishline_x, double finishline_y)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08c      	sub	sp, #48	; 0x30
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6178      	str	r0, [r7, #20]
 800b4f0:	6139      	str	r1, [r7, #16]
 800b4f2:	ed87 0b02 	vstr	d0, [r7, #8]
 800b4f6:	ed87 1b00 	vstr	d1, [r7]
	//Definicion el vector director
	double delta[2] = {finishline_x - prtbuild->initline_x, finishline_y - prtbuild->initline_y};
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b504:	f7f4 fed8 	bl	80002b8 <__aeabi_dsub>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800b516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b51a:	f7f4 fecd 	bl	80002b8 <__aeabi_dsub>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	e9c7 2308 	strd	r2, r3, [r7, #32]

	//Calculo angulo entre vectores directores
	double grad_turn_res = calculed_ang_turn(prtbuild->delta_before, delta);
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	3310      	adds	r3, #16
 800b52a:	f107 0218 	add.w	r2, r7, #24
 800b52e:	4611      	mov	r1, r2
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fa55 	bl	800b9e0 <calculed_ang_turn>
 800b536:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	//condicional de cambio de angulo
	if( -5 < grad_turn_res  && grad_turn_res < 5 )
 800b53a:	f04f 0200 	mov.w	r2, #0
 800b53e:	4b38      	ldr	r3, [pc, #224]	; (800b620 <build_Operation+0x138>)
 800b540:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b544:	f7f5 fb00 	bl	8000b48 <__aeabi_dcmpgt>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d020      	beq.n	800b590 <build_Operation+0xa8>
 800b54e:	f04f 0200 	mov.w	r2, #0
 800b552:	4b34      	ldr	r3, [pc, #208]	; (800b624 <build_Operation+0x13c>)
 800b554:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b558:	f7f5 fad8 	bl	8000b0c <__aeabi_dcmplt>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d016      	beq.n	800b590 <build_Operation+0xa8>
	{
		//agregar operacion de linea recta
		 add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0);
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b568:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 800b618 <build_Operation+0x130>
 800b56c:	ed97 1b00 	vldr	d1, [r7]
 800b570:	ed97 0b02 	vldr	d0, [r7, #8]
 800b574:	2201      	movs	r2, #1
 800b576:	4619      	mov	r1, r3
 800b578:	6978      	ldr	r0, [r7, #20]
 800b57a:	f000 f855 	bl	800b628 <add_Operation>
		 //Agregar operacion de rotacion
		 prtbuild->number_operation++;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b584:	3301      	adds	r3, #1
 800b586:	b2da      	uxtb	r2, r3
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b58e:	e02b      	b.n	800b5e8 <build_Operation+0x100>
	}
	else
	{
		add_Operation(prtList, prtbuild->number_operation, TURN, 0, 0, grad_turn_res); // Agregamos la operacion de girar
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b596:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800b59a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b618 <build_Operation+0x130>
 800b59e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b618 <build_Operation+0x130>
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6978      	ldr	r0, [r7, #20]
 800b5a8:	f000 f83e 	bl	800b628 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		add_Operation(prtList, prtbuild->number_operation, LINE, finishline_x, finishline_y, 0); // Agregamos la operacion de ir a
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c2:	ed9f 2b15 	vldr	d2, [pc, #84]	; 800b618 <build_Operation+0x130>
 800b5c6:	ed97 1b00 	vldr	d1, [r7]
 800b5ca:	ed97 0b02 	vldr	d0, [r7, #8]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	6978      	ldr	r0, [r7, #20]
 800b5d4:	f000 f828 	bl	800b628 <add_Operation>
		//agregar operacion de linea recta
		prtbuild->number_operation++;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5de:	3301      	adds	r3, #1
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	//Se redefine los valores iniciales
	prtbuild->delta_before[0] = delta[0];
 800b5e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5ec:	6939      	ldr	r1, [r7, #16]
 800b5ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtbuild->delta_before[1] = delta[1];
 800b5f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5f6:	6939      	ldr	r1, [r7, #16]
 800b5f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	prtbuild->initline_x = finishline_x;
 800b5fc:	6939      	ldr	r1, [r7, #16]
 800b5fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b602:	e9c1 2300 	strd	r2, r3, [r1]
	prtbuild->initline_y = finishline_y;
 800b606:	6939      	ldr	r1, [r7, #16]
 800b608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800b610:	bf00      	nop
 800b612:	3730      	adds	r7, #48	; 0x30
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
	...
 800b620:	c0140000 	.word	0xc0140000
 800b624:	40140000 	.word	0x40140000

0800b628 <add_Operation>:

void add_Operation(Parameters_Operation_t *prtList, uint8_t num_operation, uint8_t type_operation, double coor_x, double coor_y, double grad_turn)
{
 800b628:	b480      	push	{r7}
 800b62a:	b089      	sub	sp, #36	; 0x24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	61f8      	str	r0, [r7, #28]
 800b630:	460b      	mov	r3, r1
 800b632:	ed87 0b04 	vstr	d0, [r7, #16]
 800b636:	ed87 1b02 	vstr	d1, [r7, #8]
 800b63a:	ed87 2b00 	vstr	d2, [r7]
 800b63e:	76fb      	strb	r3, [r7, #27]
 800b640:	4613      	mov	r3, r2
 800b642:	76bb      	strb	r3, [r7, #26]
	prtList[num_operation].operacion = type_operation;
 800b644:	7efa      	ldrb	r2, [r7, #27]
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	461a      	mov	r2, r3
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	4413      	add	r3, r2
 800b654:	7eba      	ldrb	r2, [r7, #26]
 800b656:	701a      	strb	r2, [r3, #0]
	prtList[num_operation].x_destination = coor_x;
 800b658:	7efa      	ldrb	r2, [r7, #27]
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	461a      	mov	r2, r3
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	1899      	adds	r1, r3, r2
 800b668:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b66c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	prtList[num_operation].y_destination = coor_y;
 800b670:	7efa      	ldrb	r2, [r7, #27]
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	461a      	mov	r2, r3
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	1899      	adds	r1, r3, r2
 800b680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b684:	e9c1 2304 	strd	r2, r3, [r1, #16]
	prtList[num_operation].grad_Rotative = grad_turn;
 800b688:	7efa      	ldrb	r2, [r7, #27]
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	461a      	mov	r2, r3
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	1899      	adds	r1, r3, r2
 800b698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b69c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800b6a0:	bf00      	nop
 800b6a2:	3724      	adds	r7, #36	; 0x24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	0000      	movs	r0, r0
	...

0800b6b0 <change_coordinates_position>:
	ptrParameterPath->goal_Position_x += pot_x;
	ptrParameterPath->goal_Position_y += pot_y;
}

void change_coordinates_position(Parameters_Path_t *ptrParameterPath, double coor_x, double coor_y)
{
 800b6b0:	b5b0      	push	{r4, r5, r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6178      	str	r0, [r7, #20]
 800b6b8:	ed87 0b02 	vstr	d0, [r7, #8]
 800b6bc:	ed87 1b00 	vstr	d1, [r7]
	//Guardamos la posicion del Goal como la posicion de Start
	ptrParameterPath->start_position_x = ptrParameterPath->goal_Position_x;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800b6c6:	6979      	ldr	r1, [r7, #20]
 800b6c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	ptrParameterPath->start_position_y = ptrParameterPath->goal_Position_y;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800b6d2:	6979      	ldr	r1, [r7, #20]
 800b6d4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	//Definimos la nueva posicion de llegada
	ptrParameterPath->goal_Position_x = coor_x;
 800b6d8:	6979      	ldr	r1, [r7, #20]
 800b6da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	ptrParameterPath->goal_Position_y = coor_y;
 800b6e2:	6979      	ldr	r1, [r7, #20]
 800b6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	//Definimos la distancia
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b6f8:	f7f4 fdde 	bl	80002b8 <__aeabi_dsub>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	ec43 2b17 	vmov	d7, r2, r3
 800b704:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800b778 <change_coordinates_position+0xc8>
 800b708:	eeb0 0a47 	vmov.f32	s0, s14
 800b70c:	eef0 0a67 	vmov.f32	s1, s15
 800b710:	f005 fa70 	bl	8010bf4 <pow>
 800b714:	ec55 4b10 	vmov	r4, r5, d0
										   pow(ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y,2));                  //[mm]
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b724:	f7f4 fdc8 	bl	80002b8 <__aeabi_dsub>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	ec43 2b17 	vmov	d7, r2, r3
 800b730:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800b778 <change_coordinates_position+0xc8>
 800b734:	eeb0 0a47 	vmov.f32	s0, s14
 800b738:	eef0 0a67 	vmov.f32	s1, s15
 800b73c:	f005 fa5a 	bl	8010bf4 <pow>
 800b740:	ec53 2b10 	vmov	r2, r3, d0
	ptrParameterPath->line_Distance = sqrt(pow((ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x),2)+
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f7f4 fdb8 	bl	80002bc <__adddf3>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	ec43 2b17 	vmov	d7, r2, r3
 800b754:	eeb0 0a47 	vmov.f32	s0, s14
 800b758:	eef0 0a67 	vmov.f32	s1, s15
 800b75c:	f005 faba 	bl	8010cd4 <sqrt>
 800b760:	eeb0 7a40 	vmov.f32	s14, s0
 800b764:	eef0 7a60 	vmov.f32	s15, s1
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

}
 800b76e:	bf00      	nop
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bdb0      	pop	{r4, r5, r7, pc}
 800b776:	bf00      	nop
 800b778:	00000000 	.word	0x00000000
 800b77c:	40000000 	.word	0x40000000

0800b780 <calculation_parameter_distance>:

//-------------Funcion para calcular los parametros del calculo de la distancia---------------
void calculation_parameter_distance(Parameters_Path_t  *ptrParameterPath)
{
 800b780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b784:	b08a      	sub	sp, #40	; 0x28
 800b786:	af00      	add	r7, sp, #0
 800b788:	6178      	str	r0, [r7, #20]
	// Obteniendo en el desarrollo como resultado:
	// -((pos final y - pos inicial y) * pos actual global x - (pos final x - pos inicial x) * pos actual global y)/ magnitud del director



	double director_x = ptrParameterPath->goal_Position_x - ptrParameterPath->start_position_x;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b796:	f7f4 fd8f 	bl	80002b8 <__aeabi_dsub>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double director_y = ptrParameterPath->goal_Position_y - ptrParameterPath->start_position_y;
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800b7ae:	f7f4 fd83 	bl	80002b8 <__aeabi_dsub>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//definicion de la magnitud de director
	ptrParameterPath->magnitude_director = sqrt(pow(director_x,2)+pow(director_y,2));
 800b7ba:	ed9f 1b43 	vldr	d1, [pc, #268]	; 800b8c8 <calculation_parameter_distance+0x148>
 800b7be:	ed97 0b08 	vldr	d0, [r7, #32]
 800b7c2:	f005 fa17 	bl	8010bf4 <pow>
 800b7c6:	ec59 8b10 	vmov	r8, r9, d0
 800b7ca:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 800b8c8 <calculation_parameter_distance+0x148>
 800b7ce:	ed97 0b06 	vldr	d0, [r7, #24]
 800b7d2:	f005 fa0f 	bl	8010bf4 <pow>
 800b7d6:	ec53 2b10 	vmov	r2, r3, d0
 800b7da:	4640      	mov	r0, r8
 800b7dc:	4649      	mov	r1, r9
 800b7de:	f7f4 fd6d 	bl	80002bc <__adddf3>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	ec43 2b17 	vmov	d7, r2, r3
 800b7ea:	eeb0 0a47 	vmov.f32	s0, s14
 800b7ee:	eef0 0a67 	vmov.f32	s1, s15
 800b7f2:	f005 fa6f 	bl	8010cd4 <sqrt>
 800b7f6:	eeb0 7a40 	vmov.f32	s14, s0
 800b7fa:	eef0 7a60 	vmov.f32	s15, s1
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	ed83 7b00 	vstr	d7, [r3]
	//definicion de los parametros para el calculo de la magnitud de la proyeccion sobre la recta
	ptrParameterPath->proy_Parte_1 = director_x;
 800b804:	6979      	ldr	r1, [r7, #20]
 800b806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b80a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ptrParameterPath->proy_Parte_2 = director_y;
 800b80e:	6979      	ldr	r1, [r7, #20]
 800b810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b814:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ptrParameterPath->proy_Parte_1_2 = -1 * director_x * ptrParameterPath->start_position_x - director_y * ptrParameterPath->start_position_y;
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	60bb      	str	r3, [r7, #8]
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b82a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b82e:	f7f4 fefb 	bl	8000628 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4690      	mov	r8, r2
 800b838:	4699      	mov	r9, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b844:	f7f4 fef0 	bl	8000628 <__aeabi_dmul>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4640      	mov	r0, r8
 800b84e:	4649      	mov	r1, r9
 800b850:	f7f4 fd32 	bl	80002b8 <__aeabi_dsub>
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	6979      	ldr	r1, [r7, #20]
 800b85a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	//definicion de los parametros para el calculo de la distancia del punto a la recta
	ptrParameterPath->dis_point_Parte_1 = director_y;
 800b85e:	6979      	ldr	r1, [r7, #20]
 800b860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b864:	e9c1 2308 	strd	r2, r3, [r1, #32]
	ptrParameterPath->dis_point_Parte_2 = -1 * director_x;
 800b868:	6a3c      	ldr	r4, [r7, #32]
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	ptrParameterPath->dis_point_Parte_1_2 = -1 * director_y * ptrParameterPath->start_position_x + director_x * ptrParameterPath->start_position_y;
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800b888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b88c:	f7f4 fecc 	bl	8000628 <__aeabi_dmul>
 800b890:	4602      	mov	r2, r0
 800b892:	460b      	mov	r3, r1
 800b894:	4614      	mov	r4, r2
 800b896:	461d      	mov	r5, r3
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800b89e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8a2:	f7f4 fec1 	bl	8000628 <__aeabi_dmul>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7f4 fd05 	bl	80002bc <__adddf3>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	6979      	ldr	r1, [r7, #20]
 800b8b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 800b8bc:	bf00      	nop
 800b8be:	3728      	adds	r7, #40	; 0x28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b8c6:	bf00      	nop
 800b8c8:	00000000 	.word	0x00000000
 800b8cc:	40000000 	.word	0x40000000

0800b8d0 <distance_to_straight_line>:

//------------Funciones para el calculo de la respectiva distancia------------------------
double distance_to_straight_line(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b8d0:	b5b0      	push	{r4, r5, r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6178      	str	r0, [r7, #20]
 800b8d8:	ed87 0b02 	vstr	d0, [r7, #8]
 800b8dc:	ed87 1b00 	vstr	d1, [r7]
	// Calculo de la distancia del robot a la linea recta usando los parametros
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800b8e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8ea:	f7f4 fe9d 	bl	8000628 <__aeabi_dmul>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4614      	mov	r4, r2
 800b8f4:	461d      	mov	r5, r3
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800b8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b900:	f7f4 fe92 	bl	8000628 <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4620      	mov	r0, r4
 800b90a:	4629      	mov	r1, r5
 800b90c:	f7f4 fcd6 	bl	80002bc <__adddf3>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4610      	mov	r0, r2
 800b916:	4619      	mov	r1, r3
				       + ptrParameterPath->dis_point_Parte_1_2) / ptrParameterPath->magnitude_director);
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800b91e:	f7f4 fccd 	bl	80002bc <__adddf3>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4610      	mov	r0, r2
 800b928:	4619      	mov	r1, r3
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 ffa4 	bl	800087c <__aeabi_ddiv>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
	double distance = -1*((ptrParameterPath->dis_point_Parte_1 * current_pos_x + ptrParameterPath->dis_point_Parte_2 * current_pos_y
 800b938:	4611      	mov	r1, r2
 800b93a:	61b9      	str	r1, [r7, #24]
 800b93c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b940:	61fb      	str	r3, [r7, #28]

	return distance;
 800b942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b946:	ec43 2b17 	vmov	d7, r2, r3
}
 800b94a:	eeb0 0a47 	vmov.f32	s0, s14
 800b94e:	eef0 0a67 	vmov.f32	s1, s15
 800b952:	3720      	adds	r7, #32
 800b954:	46bd      	mov	sp, r7
 800b956:	bdb0      	pop	{r4, r5, r7, pc}

0800b958 <distance_traveled>:

double distance_traveled(Parameters_Path_t  *ptrParameterPath, double current_pos_x, double current_pos_y)
{
 800b958:	b5b0      	push	{r4, r5, r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6178      	str	r0, [r7, #20]
 800b960:	ed87 0b02 	vstr	d0, [r7, #8]
 800b964:	ed87 1b00 	vstr	d1, [r7]
	//Calculo de la distancia viajada relativo a la linea recta
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b96e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b972:	f7f4 fe59 	bl	8000628 <__aeabi_dmul>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4614      	mov	r4, r2
 800b97c:	461d      	mov	r5, r3
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b984:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b988:	f7f4 fe4e 	bl	8000628 <__aeabi_dmul>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	4620      	mov	r0, r4
 800b992:	4629      	mov	r1, r5
 800b994:	f7f4 fc92 	bl	80002bc <__adddf3>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4610      	mov	r0, r2
 800b99e:	4619      	mov	r1, r3
			+ ptrParameterPath->proy_Parte_1_2) / ptrParameterPath->magnitude_director;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800b9a6:	f7f4 fc89 	bl	80002bc <__adddf3>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
	double distance_Tra = (ptrParameterPath->proy_Parte_1 * current_pos_x + ptrParameterPath->proy_Parte_2 * current_pos_y
 800b9b8:	f7f4 ff60 	bl	800087c <__aeabi_ddiv>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//Retornar
	return distance_Tra;
 800b9c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9c8:	ec43 2b17 	vmov	d7, r2, r3
}
 800b9cc:	eeb0 0a47 	vmov.f32	s0, s14
 800b9d0:	eef0 0a67 	vmov.f32	s1, s15
 800b9d4:	3720      	adds	r7, #32
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9da:	0000      	movs	r0, r0
 800b9dc:	0000      	movs	r0, r0
	...

0800b9e0 <calculed_ang_turn>:

//------------------------------Funciones auxiliares-----------------------------------

double calculed_ang_turn(double vector_a[2], double vector_b[2])
{
 800b9e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b9e4:	b08a      	sub	sp, #40	; 0x28
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
    //Calculo de los diferentes elementos
    double dot = vector_a[0]*vector_b[1]-vector_b[0]*vector_a[1];
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	f7f4 fe15 	bl	8000628 <__aeabi_dmul>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	4690      	mov	r8, r2
 800ba04:	4699      	mov	r9, r3
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	f7f4 fe08 	bl	8000628 <__aeabi_dmul>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f4 fc4a 	bl	80002b8 <__aeabi_dsub>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double magvector_a = sqrt(pow(vector_a[0],2)+pow(vector_a[1],2));
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	ed93 7b00 	vldr	d7, [r3]
 800ba32:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 800bbb0 <calculed_ang_turn+0x1d0>
 800ba36:	eeb0 0a47 	vmov.f32	s0, s14
 800ba3a:	eef0 0a67 	vmov.f32	s1, s15
 800ba3e:	f005 f8d9 	bl	8010bf4 <pow>
 800ba42:	ec59 8b10 	vmov	r8, r9, d0
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	ed93 7b00 	vldr	d7, [r3]
 800ba4e:	ed9f 1b58 	vldr	d1, [pc, #352]	; 800bbb0 <calculed_ang_turn+0x1d0>
 800ba52:	eeb0 0a47 	vmov.f32	s0, s14
 800ba56:	eef0 0a67 	vmov.f32	s1, s15
 800ba5a:	f005 f8cb 	bl	8010bf4 <pow>
 800ba5e:	ec53 2b10 	vmov	r2, r3, d0
 800ba62:	4640      	mov	r0, r8
 800ba64:	4649      	mov	r1, r9
 800ba66:	f7f4 fc29 	bl	80002bc <__adddf3>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	ec43 2b17 	vmov	d7, r2, r3
 800ba72:	eeb0 0a47 	vmov.f32	s0, s14
 800ba76:	eef0 0a67 	vmov.f32	s1, s15
 800ba7a:	f005 f92b 	bl	8010cd4 <sqrt>
 800ba7e:	ed87 0b04 	vstr	d0, [r7, #16]
    double magvector_b = sqrt(pow(vector_b[0],2)+pow(vector_b[1],2));
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	ed93 7b00 	vldr	d7, [r3]
 800ba88:	ed9f 1b49 	vldr	d1, [pc, #292]	; 800bbb0 <calculed_ang_turn+0x1d0>
 800ba8c:	eeb0 0a47 	vmov.f32	s0, s14
 800ba90:	eef0 0a67 	vmov.f32	s1, s15
 800ba94:	f005 f8ae 	bl	8010bf4 <pow>
 800ba98:	ec59 8b10 	vmov	r8, r9, d0
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	3308      	adds	r3, #8
 800baa0:	ed93 7b00 	vldr	d7, [r3]
 800baa4:	ed9f 1b42 	vldr	d1, [pc, #264]	; 800bbb0 <calculed_ang_turn+0x1d0>
 800baa8:	eeb0 0a47 	vmov.f32	s0, s14
 800baac:	eef0 0a67 	vmov.f32	s1, s15
 800bab0:	f005 f8a0 	bl	8010bf4 <pow>
 800bab4:	ec53 2b10 	vmov	r2, r3, d0
 800bab8:	4640      	mov	r0, r8
 800baba:	4649      	mov	r1, r9
 800babc:	f7f4 fbfe 	bl	80002bc <__adddf3>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	ec43 2b17 	vmov	d7, r2, r3
 800bac8:	eeb0 0a47 	vmov.f32	s0, s14
 800bacc:	eef0 0a67 	vmov.f32	s1, s15
 800bad0:	f005 f900 	bl	8010cd4 <sqrt>
 800bad4:	ed87 0b02 	vstr	d0, [r7, #8]
    double ang_between_vector = acos((vector_a[0]*vector_b[0]+vector_a[1]*vector_b[1]) / (magvector_b * magvector_a));
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f7f4 fda0 	bl	8000628 <__aeabi_dmul>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4690      	mov	r8, r2
 800baee:	4699      	mov	r9, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	3308      	adds	r3, #8
 800baf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	3308      	adds	r3, #8
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f7f4 fd92 	bl	8000628 <__aeabi_dmul>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	4640      	mov	r0, r8
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	f7f4 fbd6 	bl	80002bc <__adddf3>
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4690      	mov	r8, r2
 800bb16:	4699      	mov	r9, r3
 800bb18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb20:	f7f4 fd82 	bl	8000628 <__aeabi_dmul>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4640      	mov	r0, r8
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	f7f4 fea6 	bl	800087c <__aeabi_ddiv>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	ec43 2b17 	vmov	d7, r2, r3
 800bb38:	eeb0 0a47 	vmov.f32	s0, s14
 800bb3c:	eef0 0a67 	vmov.f32	s1, s15
 800bb40:	f005 f822 	bl	8010b88 <acos>
 800bb44:	ed87 0b08 	vstr	d0, [r7, #32]
    //conversion a grados
    ang_between_vector = (ang_between_vector*180) / M_PI;
 800bb48:	f04f 0200 	mov.w	r2, #0
 800bb4c:	4b1c      	ldr	r3, [pc, #112]	; (800bbc0 <calculed_ang_turn+0x1e0>)
 800bb4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bb52:	f7f4 fd69 	bl	8000628 <__aeabi_dmul>
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	a316      	add	r3, pc, #88	; (adr r3, 800bbb8 <calculed_ang_turn+0x1d8>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 fe8a 	bl	800087c <__aeabi_ddiv>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //agregamos la direccion de giro
    if(dot<0){ang_between_vector = -ang_between_vector;}
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bb7c:	f7f4 ffc6 	bl	8000b0c <__aeabi_dcmplt>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d005      	beq.n	800bb92 <calculed_ang_turn+0x1b2>
 800bb86:	6a3c      	ldr	r4, [r7, #32]
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800bb8e:	e9c7 4508 	strd	r4, r5, [r7, #32]
    //Retornar valor
    return ang_between_vector;
 800bb92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb96:	ec43 2b17 	vmov	d7, r2, r3
}
 800bb9a:	eeb0 0a47 	vmov.f32	s0, s14
 800bb9e:	eef0 0a67 	vmov.f32	s1, s15
 800bba2:	3728      	adds	r7, #40	; 0x28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	40000000 	.word	0x40000000
 800bbb8:	54442d18 	.word	0x54442d18
 800bbbc:	400921fb 	.word	0x400921fb
 800bbc0:	40668000 	.word	0x40668000

0800bbc4 <unitary_vector>:



void unitary_vector (double angle,double vector_b[2]){
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	ed87 0b02 	vstr	d0, [r7, #8]
 800bbce:	6078      	str	r0, [r7, #4]

	// Esta función lo que haremos es definir un vector unitario con respecto al angulo actual que tenga el robot
	vector_b[0] = cos(angle);
 800bbd0:	ed97 0b02 	vldr	d0, [r7, #8]
 800bbd4:	f004 fee4 	bl	80109a0 <cos>
 800bbd8:	eeb0 7a40 	vmov.f32	s14, s0
 800bbdc:	eef0 7a60 	vmov.f32	s15, s1
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	ed83 7b00 	vstr	d7, [r3]
	vector_b[1] = sin(angle);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f103 0408 	add.w	r4, r3, #8
 800bbec:	ed97 0b02 	vldr	d0, [r7, #8]
 800bbf0:	f004 ff72 	bl	8010ad8 <sin>
 800bbf4:	eeb0 7a40 	vmov.f32	s14, s0
 800bbf8:	eef0 7a60 	vmov.f32	s15, s1
 800bbfc:	ed84 7b00 	vstr	d7, [r4]

}
 800bc00:	bf00      	nop
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd90      	pop	{r4, r7, pc}

0800bc08 <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a6c      	ldr	r2, [pc, #432]	; (800bdc8 <pwm_Config+0x1c0>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d106      	bne.n	800bc28 <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800bc1a:	4b6c      	ldr	r3, [pc, #432]	; (800bdcc <pwm_Config+0x1c4>)
 800bc1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc1e:	4a6b      	ldr	r2, [pc, #428]	; (800bdcc <pwm_Config+0x1c4>)
 800bc20:	f043 0301 	orr.w	r3, r3, #1
 800bc24:	6453      	str	r3, [r2, #68]	; 0x44
 800bc26:	e030      	b.n	800bc8a <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc30:	d106      	bne.n	800bc40 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800bc32:	4b66      	ldr	r3, [pc, #408]	; (800bdcc <pwm_Config+0x1c4>)
 800bc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc36:	4a65      	ldr	r2, [pc, #404]	; (800bdcc <pwm_Config+0x1c4>)
 800bc38:	f043 0301 	orr.w	r3, r3, #1
 800bc3c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc3e:	e024      	b.n	800bc8a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a62      	ldr	r2, [pc, #392]	; (800bdd0 <pwm_Config+0x1c8>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d106      	bne.n	800bc58 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800bc4a:	4b60      	ldr	r3, [pc, #384]	; (800bdcc <pwm_Config+0x1c4>)
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4e:	4a5f      	ldr	r2, [pc, #380]	; (800bdcc <pwm_Config+0x1c4>)
 800bc50:	f043 0302 	orr.w	r3, r3, #2
 800bc54:	6413      	str	r3, [r2, #64]	; 0x40
 800bc56:	e018      	b.n	800bc8a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a5d      	ldr	r2, [pc, #372]	; (800bdd4 <pwm_Config+0x1cc>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d106      	bne.n	800bc70 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800bc62:	4b5a      	ldr	r3, [pc, #360]	; (800bdcc <pwm_Config+0x1c4>)
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	4a59      	ldr	r2, [pc, #356]	; (800bdcc <pwm_Config+0x1c4>)
 800bc68:	f043 0304 	orr.w	r3, r3, #4
 800bc6c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc6e:	e00c      	b.n	800bc8a <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a58      	ldr	r2, [pc, #352]	; (800bdd8 <pwm_Config+0x1d0>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d106      	bne.n	800bc88 <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800bc7a:	4b54      	ldr	r3, [pc, #336]	; (800bdcc <pwm_Config+0x1c4>)
 800bc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7e:	4a53      	ldr	r2, [pc, #332]	; (800bdcc <pwm_Config+0x1c4>)
 800bc80:	f043 0308 	orr.w	r3, r3, #8
 800bc84:	6413      	str	r3, [r2, #64]	; 0x40
 800bc86:	e000      	b.n	800bc8a <pwm_Config+0x82>
	}
	else{
		__NOP();
 800bc88:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bc98:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	7f5b      	ldrb	r3, [r3, #29]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d106      	bne.n	800bcb0 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f930 	bl	800bf08 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fa67 	bl	800c17c <setDuttyCycle>
 800bcae:	e005      	b.n	800bcbc <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 f929 	bl	800bf08 <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fb38 	bl	800c32c <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f022 0210 	bic.w	r2, r2, #16
 800bcca:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7a1b      	ldrb	r3, [r3, #8]
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	d86f      	bhi.n	800bdbc <pwm_Config+0x1b4>
 800bcdc:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <pwm_Config+0xdc>)
 800bcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce2:	bf00      	nop
 800bce4:	0800bcf5 	.word	0x0800bcf5
 800bce8:	0800bd27 	.word	0x0800bd27
 800bcec:	0800bd59 	.word	0x0800bd59
 800bcf0:	0800bd8b 	.word	0x0800bd8b
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	699a      	ldr	r2, [r3, #24]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0203 	bic.w	r2, r2, #3
 800bd02:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	699a      	ldr	r2, [r3, #24]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bd12:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	699a      	ldr	r2, [r3, #24]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0208 	orr.w	r2, r2, #8
 800bd22:	619a      	str	r2, [r3, #24]


		break;
 800bd24:	e04b      	b.n	800bdbe <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	699a      	ldr	r2, [r3, #24]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bd34:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	699a      	ldr	r2, [r3, #24]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800bd44:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	699a      	ldr	r2, [r3, #24]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd54:	619a      	str	r2, [r3, #24]

		break;
 800bd56:	e032      	b.n	800bdbe <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	69da      	ldr	r2, [r3, #28]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f022 0203 	bic.w	r2, r2, #3
 800bd66:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	69da      	ldr	r2, [r3, #28]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800bd76:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	69da      	ldr	r2, [r3, #28]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f042 0208 	orr.w	r2, r2, #8
 800bd86:	61da      	str	r2, [r3, #28]

		break;
 800bd88:	e019      	b.n	800bdbe <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69da      	ldr	r2, [r3, #28]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bd98:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	69da      	ldr	r2, [r3, #28]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800bda8:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	69da      	ldr	r2, [r3, #28]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdb8:	61da      	str	r2, [r3, #28]

		break;
 800bdba:	e000      	b.n	800bdbe <pwm_Config+0x1b6>
	}

	default:{
		break;
 800bdbc:	bf00      	nop
	}// fin del switch-case




}
 800bdbe:	bf00      	nop
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	40010000 	.word	0x40010000
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	40000400 	.word	0x40000400
 800bdd4:	40000800 	.word	0x40000800
 800bdd8:	40000c00 	.word	0x40000c00

0800bddc <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f042 0201 	orr.w	r2, r2, #1
 800bdf2:	601a      	str	r2, [r3, #0]

}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a3d      	ldr	r2, [pc, #244]	; (800bf04 <enableOutput+0x104>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d13a      	bne.n	800be88 <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be20:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7a1b      	ldrb	r3, [r3, #8]
 800be26:	2b03      	cmp	r3, #3
 800be28:	d862      	bhi.n	800bef0 <enableOutput+0xf0>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <enableOutput+0x30>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be41 	.word	0x0800be41
 800be34:	0800be53 	.word	0x0800be53
 800be38:	0800be65 	.word	0x0800be65
 800be3c:	0800be77 	.word	0x0800be77
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6a1a      	ldr	r2, [r3, #32]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f042 0201 	orr.w	r2, r2, #1
 800be4e:	621a      	str	r2, [r3, #32]

				break;
 800be50:	e051      	b.n	800bef6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6a1a      	ldr	r2, [r3, #32]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f042 0210 	orr.w	r2, r2, #16
 800be60:	621a      	str	r2, [r3, #32]

				break;
 800be62:	e048      	b.n	800bef6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6a1a      	ldr	r2, [r3, #32]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be72:	621a      	str	r2, [r3, #32]

				break;
 800be74:	e03f      	b.n	800bef6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6a1a      	ldr	r2, [r3, #32]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be84:	621a      	str	r2, [r3, #32]

				break;
 800be86:	e036      	b.n	800bef6 <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7a1b      	ldrb	r3, [r3, #8]
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d831      	bhi.n	800bef4 <enableOutput+0xf4>
 800be90:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <enableOutput+0x98>)
 800be92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be96:	bf00      	nop
 800be98:	0800bea9 	.word	0x0800bea9
 800be9c:	0800bebb 	.word	0x0800bebb
 800bea0:	0800becd 	.word	0x0800becd
 800bea4:	0800bedf 	.word	0x0800bedf
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6a1a      	ldr	r2, [r3, #32]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f042 0201 	orr.w	r2, r2, #1
 800beb6:	621a      	str	r2, [r3, #32]

				break;
 800beb8:	e01d      	b.n	800bef6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6a1a      	ldr	r2, [r3, #32]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f042 0210 	orr.w	r2, r2, #16
 800bec8:	621a      	str	r2, [r3, #32]

				break;
 800beca:	e014      	b.n	800bef6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6a1a      	ldr	r2, [r3, #32]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800beda:	621a      	str	r2, [r3, #32]

				break;
 800bedc:	e00b      	b.n	800bef6 <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6a1a      	ldr	r2, [r3, #32]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800beec:	621a      	str	r2, [r3, #32]

				break;
 800beee:	e002      	b.n	800bef6 <enableOutput+0xf6>
				break;
 800bef0:	bf00      	nop
 800bef2:	e000      	b.n	800bef6 <enableOutput+0xf6>
			}

			default: {
				break;
 800bef4:	bf00      	nop
			}

		}
	}
	return SET;
 800bef6:	2301      	movs	r3, #1
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	40010000 	.word	0x40010000

0800bf08 <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	68d2      	ldr	r2, [r2, #12]
 800bf1c:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_1us )
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b10      	cmp	r3, #16
 800bf28:	d01a      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_20MHz_1us)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b14      	cmp	r3, #20
 800bf2e:	d017      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_30MHz_1us)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b1e      	cmp	r3, #30
 800bf34:	d014      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_40MHz_1us)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b28      	cmp	r3, #40	; 0x28
 800bf3a:	d011      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_50MHz_1us)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b32      	cmp	r3, #50	; 0x32
 800bf40:	d00e      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_60MHz_1us)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b3c      	cmp	r3, #60	; 0x3c
 800bf46:	d00b      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_70MHz_1us)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b46      	cmp	r3, #70	; 0x46
 800bf4c:	d008      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_80MHz_1us)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b50      	cmp	r3, #80	; 0x50
 800bf52:	d005      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_90MHz_1us)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b5a      	cmp	r3, #90	; 0x5a
 800bf58:	d002      	beq.n	800bf60 <setFrequency+0x58>
     ||(speed == PWM_SPEED_100MHz_1us)){
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b64      	cmp	r3, #100	; 0x64
 800bf5e:	d118      	bne.n	800bf92 <setFrequency+0x8a>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bf66:	f04f 0200 	mov.w	r2, #0
 800bf6a:	4b7b      	ldr	r3, [pc, #492]	; (800c158 <setFrequency+0x250>)
 800bf6c:	f7f4 fb5c 	bl	8000628 <__aeabi_dmul>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4610      	mov	r0, r2
 800bf76:	4619      	mov	r1, r3
 800bf78:	f7f4 fe2e 	bl	8000bd8 <__aeabi_d2uiz>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	4b76      	ldr	r3, [pc, #472]	; (800c15c <setFrequency+0x254>)
 800bf82:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800bf84:	4b75      	ldr	r3, [pc, #468]	; (800c15c <setFrequency+0x254>)
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	1e5a      	subs	r2, r3, #1
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf90:	e0dd      	b.n	800c14e <setFrequency+0x246>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2ba0      	cmp	r3, #160	; 0xa0
 800bf96:	d022      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2bc8      	cmp	r3, #200	; 0xc8
 800bf9c:	d01f      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_30MHz_10us)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bfa4:	d01b      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800bfac:	d017      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_50MHz_10us)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bfb4:	d013      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800bfbc:	d00f      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_70MHz_10us)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800bfc4:	d00b      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800bfcc:	d007      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_90MHz_10us)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800bfd4:	d003      	beq.n	800bfde <setFrequency+0xd6>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfdc:	d118      	bne.n	800c010 <setFrequency+0x108>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bfe4:	f04f 0200 	mov.w	r2, #0
 800bfe8:	4b5d      	ldr	r3, [pc, #372]	; (800c160 <setFrequency+0x258>)
 800bfea:	f7f4 fb1d 	bl	8000628 <__aeabi_dmul>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4610      	mov	r0, r2
 800bff4:	4619      	mov	r1, r3
 800bff6:	f7f4 fdef 	bl	8000bd8 <__aeabi_d2uiz>
 800bffa:	4603      	mov	r3, r0
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	4b57      	ldr	r3, [pc, #348]	; (800c15c <setFrequency+0x254>)
 800c000:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c002:	4b56      	ldr	r3, [pc, #344]	; (800c15c <setFrequency+0x254>)
 800c004:	881b      	ldrh	r3, [r3, #0]
 800c006:	1e5a      	subs	r2, r3, #1
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c00e:	e09e      	b.n	800c14e <setFrequency+0x246>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c016:	d029      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_20MHz_100us)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c01e:	d025      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_30MHz_100us)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c026:	4293      	cmp	r3, r2
 800c028:	d020      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_40MHz_100us)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800c030:	d01c      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_50MHz_100us)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f241 3288 	movw	r2, #5000	; 0x1388
 800c038:	4293      	cmp	r3, r2
 800c03a:	d017      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_60MHz_100us)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f241 7270 	movw	r2, #6000	; 0x1770
 800c042:	4293      	cmp	r3, r2
 800c044:	d012      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_70MHz_100us)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f641 3258 	movw	r2, #7000	; 0x1b58
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d00d      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_80MHz_100us)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800c056:	d009      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_90MHz_100us)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f242 3228 	movw	r2, #9000	; 0x2328
 800c05e:	4293      	cmp	r3, r2
 800c060:	d004      	beq.n	800c06c <setFrequency+0x164>
		   || (speed == PWM_SPEED_100MHz_100us)){
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f242 7210 	movw	r2, #10000	; 0x2710
 800c068:	4293      	cmp	r3, r2
 800c06a:	d118      	bne.n	800c09e <setFrequency+0x196>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c072:	f04f 0200 	mov.w	r2, #0
 800c076:	4b3b      	ldr	r3, [pc, #236]	; (800c164 <setFrequency+0x25c>)
 800c078:	f7f4 fad6 	bl	8000628 <__aeabi_dmul>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4610      	mov	r0, r2
 800c082:	4619      	mov	r1, r3
 800c084:	f7f4 fda8 	bl	8000bd8 <__aeabi_d2uiz>
 800c088:	4603      	mov	r3, r0
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	4b33      	ldr	r3, [pc, #204]	; (800c15c <setFrequency+0x254>)
 800c08e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c090:	4b32      	ldr	r3, [pc, #200]	; (800c15c <setFrequency+0x254>)
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	1e5a      	subs	r2, r3, #1
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c09c:	e057      	b.n	800c14e <setFrequency+0x246>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c0a4:	d028      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_20MHz_1ms)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d023      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f247 5230 	movw	r2, #30000	; 0x7530
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d01e      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_40MHz_1ms)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f649 4240 	movw	r2, #40000	; 0x9c40
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d019      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_50MHz_1ms)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d014      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d00f      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_70MHz_1ms)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4a23      	ldr	r2, [pc, #140]	; (800c168 <setFrequency+0x260>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00b      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	4a22      	ldr	r2, [pc, #136]	; (800c16c <setFrequency+0x264>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d007      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_90MHz_1ms)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4a21      	ldr	r2, [pc, #132]	; (800c170 <setFrequency+0x268>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d003      	beq.n	800c0f8 <setFrequency+0x1f0>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a20      	ldr	r2, [pc, #128]	; (800c174 <setFrequency+0x26c>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d111      	bne.n	800c11c <setFrequency+0x214>

		periodo = ptrPwmHandler->config.periodo;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c0fe:	4610      	mov	r0, r2
 800c100:	4619      	mov	r1, r3
 800c102:	f7f4 fd69 	bl	8000bd8 <__aeabi_d2uiz>
 800c106:	4603      	mov	r3, r0
 800c108:	b29a      	uxth	r2, r3
 800c10a:	4b14      	ldr	r3, [pc, #80]	; (800c15c <setFrequency+0x254>)
 800c10c:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <setFrequency+0x254>)
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	1e5a      	subs	r2, r3, #1
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	62da      	str	r2, [r3, #44]	; 0x2c
 800c11a:	e018      	b.n	800c14e <setFrequency+0x246>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	4b14      	ldr	r3, [pc, #80]	; (800c178 <setFrequency+0x270>)
 800c128:	f7f4 fba8 	bl	800087c <__aeabi_ddiv>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4610      	mov	r0, r2
 800c132:	4619      	mov	r1, r3
 800c134:	f7f4 fd50 	bl	8000bd8 <__aeabi_d2uiz>
 800c138:	4603      	mov	r3, r0
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	4b07      	ldr	r3, [pc, #28]	; (800c15c <setFrequency+0x254>)
 800c13e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800c140:	4b06      	ldr	r3, [pc, #24]	; (800c15c <setFrequency+0x254>)
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	1e5a      	subs	r2, r3, #1
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800c14c:	bf00      	nop
 800c14e:	bf00      	nop
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	408f4000 	.word	0x408f4000
 800c15c:	2000dc20 	.word	0x2000dc20
 800c160:	40590000 	.word	0x40590000
 800c164:	40240000 	.word	0x40240000
 800c168:	00011170 	.word	0x00011170
 800c16c:	00013880 	.word	0x00013880
 800c170:	00015f90 	.word	0x00015f90
 800c174:	000186a0 	.word	0x000186a0
 800c178:	40340000 	.word	0x40340000

0800c17c <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 800c17c:	b590      	push	{r4, r7, lr}
 800c17e:	b08b      	sub	sp, #44	; 0x2c
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	7a1b      	ldrb	r3, [r3, #8]
 800c188:	2b03      	cmp	r3, #3
 800c18a:	f200 80c3 	bhi.w	800c314 <setDuttyCycle+0x198>
 800c18e:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <setDuttyCycle+0x18>)
 800c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c194:	0800c1a5 	.word	0x0800c1a5
 800c198:	0800c201 	.word	0x0800c201
 800c19c:	0800c25d 	.word	0x0800c25d
 800c1a0:	0800c2b9 	.word	0x0800c2b9
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	ed93 7a06 	vldr	s14, [r3, #24]
 800c1aa:	4b5d      	ldr	r3, [pc, #372]	; (800c320 <setDuttyCycle+0x1a4>)
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ba:	ee17 0a90 	vmov	r0, s15
 800c1be:	f7f4 f9db 	bl	8000578 <__aeabi_f2d>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800c1ca:	f04f 0200 	mov.w	r2, #0
 800c1ce:	4b55      	ldr	r3, [pc, #340]	; (800c324 <setDuttyCycle+0x1a8>)
 800c1d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c1d4:	f7f4 fb52 	bl	800087c <__aeabi_ddiv>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4619      	mov	r1, r3
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	4b50      	ldr	r3, [pc, #320]	; (800c328 <setDuttyCycle+0x1ac>)
 800c1e6:	f7f4 f867 	bl	80002b8 <__aeabi_dsub>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681c      	ldr	r4, [r3, #0]
 800c1f6:	f7f4 fcef 	bl	8000bd8 <__aeabi_d2uiz>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c1fe:	e08a      	b.n	800c316 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	ed93 7a06 	vldr	s14, [r3, #24]
 800c206:	4b46      	ldr	r3, [pc, #280]	; (800c320 <setDuttyCycle+0x1a4>)
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c216:	ee17 0a90 	vmov	r0, s15
 800c21a:	f7f4 f9ad 	bl	8000578 <__aeabi_f2d>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800c226:	f04f 0200 	mov.w	r2, #0
 800c22a:	4b3e      	ldr	r3, [pc, #248]	; (800c324 <setDuttyCycle+0x1a8>)
 800c22c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c230:	f7f4 fb24 	bl	800087c <__aeabi_ddiv>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4610      	mov	r0, r2
 800c23a:	4619      	mov	r1, r3
 800c23c:	f04f 0200 	mov.w	r2, #0
 800c240:	4b39      	ldr	r3, [pc, #228]	; (800c328 <setDuttyCycle+0x1ac>)
 800c242:	f7f4 f839 	bl	80002b8 <__aeabi_dsub>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4610      	mov	r0, r2
 800c24c:	4619      	mov	r1, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681c      	ldr	r4, [r3, #0]
 800c252:	f7f4 fcc1 	bl	8000bd8 <__aeabi_d2uiz>
 800c256:	4603      	mov	r3, r0
 800c258:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c25a:	e05c      	b.n	800c316 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	ed93 7a06 	vldr	s14, [r3, #24]
 800c262:	4b2f      	ldr	r3, [pc, #188]	; (800c320 <setDuttyCycle+0x1a4>)
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c272:	ee17 0a90 	vmov	r0, s15
 800c276:	f7f4 f97f 	bl	8000578 <__aeabi_f2d>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 800c282:	f04f 0200 	mov.w	r2, #0
 800c286:	4b27      	ldr	r3, [pc, #156]	; (800c324 <setDuttyCycle+0x1a8>)
 800c288:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c28c:	f7f4 faf6 	bl	800087c <__aeabi_ddiv>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4610      	mov	r0, r2
 800c296:	4619      	mov	r1, r3
 800c298:	f04f 0200 	mov.w	r2, #0
 800c29c:	4b22      	ldr	r3, [pc, #136]	; (800c328 <setDuttyCycle+0x1ac>)
 800c29e:	f7f4 f80b 	bl	80002b8 <__aeabi_dsub>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681c      	ldr	r4, [r3, #0]
 800c2ae:	f7f4 fc93 	bl	8000bd8 <__aeabi_d2uiz>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c2b6:	e02e      	b.n	800c316 <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	ed93 7a06 	vldr	s14, [r3, #24]
 800c2be:	4b18      	ldr	r3, [pc, #96]	; (800c320 <setDuttyCycle+0x1a4>)
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	ee17 0a90 	vmov	r0, s15
 800c2d2:	f7f4 f951 	bl	8000578 <__aeabi_f2d>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 800c2de:	f04f 0200 	mov.w	r2, #0
 800c2e2:	4b10      	ldr	r3, [pc, #64]	; (800c324 <setDuttyCycle+0x1a8>)
 800c2e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c2e8:	f7f4 fac8 	bl	800087c <__aeabi_ddiv>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	f04f 0200 	mov.w	r2, #0
 800c2f8:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <setDuttyCycle+0x1ac>)
 800c2fa:	f7f3 ffdd 	bl	80002b8 <__aeabi_dsub>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4610      	mov	r0, r2
 800c304:	4619      	mov	r1, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681c      	ldr	r4, [r3, #0]
 800c30a:	f7f4 fc65 	bl	8000bd8 <__aeabi_d2uiz>
 800c30e:	4603      	mov	r3, r0
 800c310:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c312:	e000      	b.n	800c316 <setDuttyCycle+0x19a>
	}

	default:{
		break;
 800c314:	bf00      	nop
	}

	}// fin del switch-case

}
 800c316:	bf00      	nop
 800c318:	372c      	adds	r7, #44	; 0x2c
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd90      	pop	{r4, r7, pc}
 800c31e:	bf00      	nop
 800c320:	2000dc20 	.word	0x2000dc20
 800c324:	40590000 	.word	0x40590000
 800c328:	3ff00000 	.word	0x3ff00000

0800c32c <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b08b      	sub	sp, #44	; 0x2c
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	7a1b      	ldrb	r3, [r3, #8]
 800c338:	2b03      	cmp	r3, #3
 800c33a:	f200 80d3 	bhi.w	800c4e4 <setDuttyCycleAfOpt+0x1b8>
 800c33e:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <setDuttyCycleAfOpt+0x18>)
 800c340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c344:	0800c355 	.word	0x0800c355
 800c348:	0800c3b9 	.word	0x0800c3b9
 800c34c:	0800c41d 	.word	0x0800c41d
 800c350:	0800c481 	.word	0x0800c481
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	edd3 7a06 	vldr	s15, [r3, #24]
 800c35a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c4f0 <setDuttyCycleAfOpt+0x1c4>
 800c35e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c362:	4b64      	ldr	r3, [pc, #400]	; (800c4f4 <setDuttyCycleAfOpt+0x1c8>)
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c372:	ee17 0a90 	vmov	r0, s15
 800c376:	f7f4 f8ff 	bl	8000578 <__aeabi_f2d>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 800c382:	f04f 0200 	mov.w	r2, #0
 800c386:	4b5c      	ldr	r3, [pc, #368]	; (800c4f8 <setDuttyCycleAfOpt+0x1cc>)
 800c388:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c38c:	f7f4 fa76 	bl	800087c <__aeabi_ddiv>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4610      	mov	r0, r2
 800c396:	4619      	mov	r1, r3
 800c398:	f04f 0200 	mov.w	r2, #0
 800c39c:	4b57      	ldr	r3, [pc, #348]	; (800c4fc <setDuttyCycleAfOpt+0x1d0>)
 800c39e:	f7f3 ff8b 	bl	80002b8 <__aeabi_dsub>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681c      	ldr	r4, [r3, #0]
 800c3ae:	f7f4 fc13 	bl	8000bd8 <__aeabi_d2uiz>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800c3b6:	e096      	b.n	800c4e6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	edd3 7a06 	vldr	s15, [r3, #24]
 800c3be:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c4f0 <setDuttyCycleAfOpt+0x1c4>
 800c3c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c3c6:	4b4b      	ldr	r3, [pc, #300]	; (800c4f4 <setDuttyCycleAfOpt+0x1c8>)
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d6:	ee17 0a90 	vmov	r0, s15
 800c3da:	f7f4 f8cd 	bl	8000578 <__aeabi_f2d>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800c3e6:	f04f 0200 	mov.w	r2, #0
 800c3ea:	4b43      	ldr	r3, [pc, #268]	; (800c4f8 <setDuttyCycleAfOpt+0x1cc>)
 800c3ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c3f0:	f7f4 fa44 	bl	800087c <__aeabi_ddiv>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	4b3e      	ldr	r3, [pc, #248]	; (800c4fc <setDuttyCycleAfOpt+0x1d0>)
 800c402:	f7f3 ff59 	bl	80002b8 <__aeabi_dsub>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4610      	mov	r0, r2
 800c40c:	4619      	mov	r1, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681c      	ldr	r4, [r3, #0]
 800c412:	f7f4 fbe1 	bl	8000bd8 <__aeabi_d2uiz>
 800c416:	4603      	mov	r3, r0
 800c418:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800c41a:	e064      	b.n	800c4e6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c422:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c4f0 <setDuttyCycleAfOpt+0x1c4>
 800c426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c42a:	4b32      	ldr	r3, [pc, #200]	; (800c4f4 <setDuttyCycleAfOpt+0x1c8>)
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	ee07 3a90 	vmov	s15, r3
 800c432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43a:	ee17 0a90 	vmov	r0, s15
 800c43e:	f7f4 f89b 	bl	8000578 <__aeabi_f2d>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800c44a:	f04f 0200 	mov.w	r2, #0
 800c44e:	4b2a      	ldr	r3, [pc, #168]	; (800c4f8 <setDuttyCycleAfOpt+0x1cc>)
 800c450:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c454:	f7f4 fa12 	bl	800087c <__aeabi_ddiv>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4610      	mov	r0, r2
 800c45e:	4619      	mov	r1, r3
 800c460:	f04f 0200 	mov.w	r2, #0
 800c464:	4b25      	ldr	r3, [pc, #148]	; (800c4fc <setDuttyCycleAfOpt+0x1d0>)
 800c466:	f7f3 ff27 	bl	80002b8 <__aeabi_dsub>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4610      	mov	r0, r2
 800c470:	4619      	mov	r1, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681c      	ldr	r4, [r3, #0]
 800c476:	f7f4 fbaf 	bl	8000bd8 <__aeabi_d2uiz>
 800c47a:	4603      	mov	r3, r0
 800c47c:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800c47e:	e032      	b.n	800c4e6 <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	edd3 7a06 	vldr	s15, [r3, #24]
 800c486:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c4f0 <setDuttyCycleAfOpt+0x1c4>
 800c48a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c48e:	4b19      	ldr	r3, [pc, #100]	; (800c4f4 <setDuttyCycleAfOpt+0x1c8>)
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	ee07 3a90 	vmov	s15, r3
 800c496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49e:	ee17 0a90 	vmov	r0, s15
 800c4a2:	f7f4 f869 	bl	8000578 <__aeabi_f2d>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <setDuttyCycleAfOpt+0x1cc>)
 800c4b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c4b8:	f7f4 f9e0 	bl	800087c <__aeabi_ddiv>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	4b0c      	ldr	r3, [pc, #48]	; (800c4fc <setDuttyCycleAfOpt+0x1d0>)
 800c4ca:	f7f3 fef5 	bl	80002b8 <__aeabi_dsub>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681c      	ldr	r4, [r3, #0]
 800c4da:	f7f4 fb7d 	bl	8000bd8 <__aeabi_d2uiz>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800c4e2:	e000      	b.n	800c4e6 <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 800c4e4:	bf00      	nop
	}

	}// fin del switch-case


}
 800c4e6:	bf00      	nop
 800c4e8:	372c      	adds	r7, #44	; 0x2c
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	42c80000 	.word	0x42c80000
 800c4f4:	2000dc20 	.word	0x2000dc20
 800c4f8:	40590000 	.word	0x40590000
 800c4fc:	3ff00000 	.word	0x3ff00000

0800c500 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	7a1b      	ldrb	r3, [r3, #8]
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	d82f      	bhi.n	800c570 <disableOutput+0x70>
 800c510:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <disableOutput+0x18>)
 800c512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c516:	bf00      	nop
 800c518:	0800c529 	.word	0x0800c529
 800c51c:	0800c53b 	.word	0x0800c53b
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	0800c55f 	.word	0x0800c55f
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6a1a      	ldr	r2, [r3, #32]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 0201 	bic.w	r2, r2, #1
 800c536:	621a      	str	r2, [r3, #32]

			break;
 800c538:	e01b      	b.n	800c572 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6a1a      	ldr	r2, [r3, #32]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0210 	bic.w	r2, r2, #16
 800c548:	621a      	str	r2, [r3, #32]

			break;
 800c54a:	e012      	b.n	800c572 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a1a      	ldr	r2, [r3, #32]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c55a:	621a      	str	r2, [r3, #32]

			break;
 800c55c:	e009      	b.n	800c572 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6a1a      	ldr	r2, [r3, #32]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c56c:	621a      	str	r2, [r3, #32]

			break;
 800c56e:	e000      	b.n	800c572 <disableOutput+0x72>
		}

		default: {
			break;
 800c570:	bf00      	nop
		}
		}

	return RESET;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <PWMx_Toggle>:

void PWMx_Toggle(PWM_Handler_t *ptrPwmHandler){
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7a1b      	ldrb	r3, [r3, #8]
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d82f      	bhi.n	800c5f0 <PWMx_Toggle+0x70>
 800c590:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <PWMx_Toggle+0x18>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5a9 	.word	0x0800c5a9
 800c59c:	0800c5bb 	.word	0x0800c5bb
 800c5a0:	0800c5cd 	.word	0x0800c5cd
 800c5a4:	0800c5df 	.word	0x0800c5df
			case PWM_CHANNEL_1: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC1P;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6a1a      	ldr	r2, [r3, #32]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f082 0202 	eor.w	r2, r2, #2
 800c5b6:	621a      	str	r2, [r3, #32]

				break;
 800c5b8:	e01b      	b.n	800c5f2 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_2: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC2P;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6a1a      	ldr	r2, [r3, #32]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f082 0220 	eor.w	r2, r2, #32
 800c5c8:	621a      	str	r2, [r3, #32]

				break;
 800c5ca:	e012      	b.n	800c5f2 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_3: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC3P;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	6a1a      	ldr	r2, [r3, #32]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 800c5da:	621a      	str	r2, [r3, #32]

				break;
 800c5dc:	e009      	b.n	800c5f2 <PWMx_Toggle+0x72>
			}

			case PWM_CHANNEL_4: {
				// Activamos el polarity en este canal
				ptrPwmHandler->ptrTIMx->CCER ^= TIM_CCER_CC4P;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6a1a      	ldr	r2, [r3, #32]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c5ec:	621a      	str	r2, [r3, #32]

				break;
 800c5ee:	e000      	b.n	800c5f2 <PWMx_Toggle+0x72>
			}

			default: {
				break;
 800c5f0:	bf00      	nop
			}
			}


}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop

0800c600 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 800c60a:	4b92      	ldr	r3, [pc, #584]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a91      	ldr	r2, [pc, #580]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c614:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800c616:	4b8f      	ldr	r3, [pc, #572]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c61c:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 800c61e:	4b8e      	ldr	r3, [pc, #568]	; (800c858 <RCC_enableMaxFrequencies+0x258>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a8d      	ldr	r2, [pc, #564]	; (800c858 <RCC_enableMaxFrequencies+0x258>)
 800c624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c628:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 800c62a:	4b8a      	ldr	r3, [pc, #552]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	4a89      	ldr	r2, [pc, #548]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c630:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c634:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	2b08      	cmp	r3, #8
 800c63a:	f200 82fc 	bhi.w	800cc36 <RCC_enableMaxFrequencies+0x636>
 800c63e:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <RCC_enableMaxFrequencies+0x44>)
 800c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c644:	0800c669 	.word	0x0800c669
 800c648:	0800c70b 	.word	0x0800c70b
 800c64c:	0800c7ad 	.word	0x0800c7ad
 800c650:	0800c861 	.word	0x0800c861
 800c654:	0800c903 	.word	0x0800c903
 800c658:	0800c9a5 	.word	0x0800c9a5
 800c65c:	0800ca51 	.word	0x0800ca51
 800c660:	0800caf3 	.word	0x0800caf3
 800c664:	0800cb95 	.word	0x0800cb95
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c668:	4b7a      	ldr	r3, [pc, #488]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	4a79      	ldr	r2, [pc, #484]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c66e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c672:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c674:	4b77      	ldr	r3, [pc, #476]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4a76      	ldr	r2, [pc, #472]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c67a:	f043 0310 	orr.w	r3, r3, #16
 800c67e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c680:	4b74      	ldr	r3, [pc, #464]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	4a73      	ldr	r2, [pc, #460]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c686:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c68a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c68e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c690:	4b70      	ldr	r3, [pc, #448]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	4a6f      	ldr	r2, [pc, #444]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c696:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c69a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c69c:	4b6d      	ldr	r3, [pc, #436]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	4a6c      	ldr	r2, [pc, #432]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c6a6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c6a8:	4b6a      	ldr	r3, [pc, #424]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	4a69      	ldr	r2, [pc, #420]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6b2:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c6b4:	4b67      	ldr	r3, [pc, #412]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	4a66      	ldr	r2, [pc, #408]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6be:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c6c0:	4b64      	ldr	r3, [pc, #400]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	4a63      	ldr	r2, [pc, #396]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6ca:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c6cc:	4b61      	ldr	r3, [pc, #388]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	4a60      	ldr	r2, [pc, #384]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6d6:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c6d8:	4b5e      	ldr	r3, [pc, #376]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a5d      	ldr	r2, [pc, #372]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6e2:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c6e4:	e000      	b.n	800c6e8 <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 800c6e6:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c6e8:	4b5a      	ldr	r3, [pc, #360]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0f8      	beq.n	800c6e6 <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c6f4:	4b59      	ldr	r3, [pc, #356]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a58      	ldr	r2, [pc, #352]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c6fa:	f023 030f 	bic.w	r3, r3, #15
 800c6fe:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c700:	4b56      	ldr	r3, [pc, #344]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c702:	4a56      	ldr	r2, [pc, #344]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6013      	str	r3, [r2, #0]

			break;
 800c708:	e296      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c70a:	4b52      	ldr	r3, [pc, #328]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	4a51      	ldr	r2, [pc, #324]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c710:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c714:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c716:	4b4f      	ldr	r3, [pc, #316]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	4a4e      	ldr	r2, [pc, #312]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c71c:	f043 0310 	orr.w	r3, r3, #16
 800c720:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c722:	4b4c      	ldr	r3, [pc, #304]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	4a4b      	ldr	r2, [pc, #300]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c728:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c730:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c732:	4b48      	ldr	r3, [pc, #288]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	4a47      	ldr	r2, [pc, #284]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c738:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c73c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c73e:	4b45      	ldr	r3, [pc, #276]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	4a44      	ldr	r2, [pc, #272]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c744:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c748:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800c74a:	4b42      	ldr	r3, [pc, #264]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	4a41      	ldr	r2, [pc, #260]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c754:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c756:	4b3f      	ldr	r3, [pc, #252]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	4a3e      	ldr	r2, [pc, #248]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c75c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c760:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c762:	4b3c      	ldr	r3, [pc, #240]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	4a3b      	ldr	r2, [pc, #236]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c76c:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c76e:	4b39      	ldr	r3, [pc, #228]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	4a38      	ldr	r2, [pc, #224]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c778:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c77a:	4b36      	ldr	r3, [pc, #216]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a35      	ldr	r2, [pc, #212]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c784:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c786:	e000      	b.n	800c78a <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800c788:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c78a:	4b32      	ldr	r3, [pc, #200]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c792:	2b00      	cmp	r3, #0
 800c794:	d0f8      	beq.n	800c788 <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c796:	4b31      	ldr	r3, [pc, #196]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a30      	ldr	r2, [pc, #192]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c79c:	f023 030f 	bic.w	r3, r3, #15
 800c7a0:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 800c7a2:	4b2e      	ldr	r3, [pc, #184]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c7a4:	4a2d      	ldr	r2, [pc, #180]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6013      	str	r3, [r2, #0]

			break;
 800c7aa:	e245      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c7ac:	4b29      	ldr	r3, [pc, #164]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	4a28      	ldr	r2, [pc, #160]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7b6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c7b8:	4b26      	ldr	r3, [pc, #152]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	4a25      	ldr	r2, [pc, #148]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7be:	f043 0310 	orr.w	r3, r3, #16
 800c7c2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c7c4:	4b23      	ldr	r3, [pc, #140]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4a22      	ldr	r2, [pc, #136]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c7ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7d2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 800c7d4:	4b1f      	ldr	r3, [pc, #124]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	4a1e      	ldr	r2, [pc, #120]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7da:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 800c7de:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c7e0:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	4a1b      	ldr	r2, [pc, #108]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c7ea:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800c7ec:	4b19      	ldr	r3, [pc, #100]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	4a18      	ldr	r2, [pc, #96]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7f6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c7f8:	4b16      	ldr	r3, [pc, #88]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	4a15      	ldr	r2, [pc, #84]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c802:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c804:	4b13      	ldr	r3, [pc, #76]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	4a12      	ldr	r2, [pc, #72]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c80a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c80e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c810:	4b10      	ldr	r3, [pc, #64]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	4a0f      	ldr	r2, [pc, #60]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c81a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c81c:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a0c      	ldr	r2, [pc, #48]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c826:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c828:	e000      	b.n	800c82c <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 800c82a:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c82c:	4b09      	ldr	r3, [pc, #36]	; (800c854 <RCC_enableMaxFrequencies+0x254>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d0f8      	beq.n	800c82a <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c838:	4b08      	ldr	r3, [pc, #32]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a07      	ldr	r2, [pc, #28]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c83e:	f023 030f 	bic.w	r3, r3, #15
 800c842:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c844:	4b05      	ldr	r3, [pc, #20]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a04      	ldr	r2, [pc, #16]	; (800c85c <RCC_enableMaxFrequencies+0x25c>)
 800c84a:	f043 0301 	orr.w	r3, r3, #1
 800c84e:	6013      	str	r3, [r2, #0]


			break;
 800c850:	e1f2      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
 800c852:	bf00      	nop
 800c854:	40023800 	.word	0x40023800
 800c858:	40007000 	.word	0x40007000
 800c85c:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c860:	4b79      	ldr	r3, [pc, #484]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	4a78      	ldr	r2, [pc, #480]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c86a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c86c:	4b76      	ldr	r3, [pc, #472]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	4a75      	ldr	r2, [pc, #468]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c872:	f043 0310 	orr.w	r3, r3, #16
 800c876:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c878:	4b73      	ldr	r3, [pc, #460]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	4a72      	ldr	r2, [pc, #456]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c87e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c886:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800c888:	4b6f      	ldr	r3, [pc, #444]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	4a6e      	ldr	r2, [pc, #440]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c88e:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800c892:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c894:	4b6c      	ldr	r3, [pc, #432]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	4a6b      	ldr	r2, [pc, #428]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c89a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c89e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c8a0:	4b69      	ldr	r3, [pc, #420]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8a2:	4a69      	ldr	r2, [pc, #420]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c8a8:	4b67      	ldr	r3, [pc, #412]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	4a66      	ldr	r2, [pc, #408]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8b2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c8b4:	4b64      	ldr	r3, [pc, #400]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	4a63      	ldr	r2, [pc, #396]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8be:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 800c8c0:	4b61      	ldr	r3, [pc, #388]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	4a60      	ldr	r2, [pc, #384]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8ca:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c8cc:	4b5e      	ldr	r3, [pc, #376]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a5d      	ldr	r2, [pc, #372]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8d6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c8d8:	e000      	b.n	800c8dc <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 800c8da:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c8dc:	4b5a      	ldr	r3, [pc, #360]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0f8      	beq.n	800c8da <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c8e8:	4b58      	ldr	r3, [pc, #352]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a57      	ldr	r2, [pc, #348]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c8ee:	f023 030f 	bic.w	r3, r3, #15
 800c8f2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c8f4:	4b55      	ldr	r3, [pc, #340]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a54      	ldr	r2, [pc, #336]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c8fa:	f043 0301 	orr.w	r3, r3, #1
 800c8fe:	6013      	str	r3, [r2, #0]

			break;
 800c900:	e19a      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c902:	4b51      	ldr	r3, [pc, #324]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	4a50      	ldr	r2, [pc, #320]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c908:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c90c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c90e:	4b4e      	ldr	r3, [pc, #312]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4a4d      	ldr	r2, [pc, #308]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c914:	f043 0310 	orr.w	r3, r3, #16
 800c918:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c91a:	4b4b      	ldr	r3, [pc, #300]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	4a4a      	ldr	r2, [pc, #296]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c920:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c928:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 800c92a:	4b47      	ldr	r3, [pc, #284]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	4a46      	ldr	r2, [pc, #280]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c930:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800c934:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c936:	4b44      	ldr	r3, [pc, #272]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	4a43      	ldr	r2, [pc, #268]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c93c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c940:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c942:	4b41      	ldr	r3, [pc, #260]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c944:	4a40      	ldr	r2, [pc, #256]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c94a:	4b3f      	ldr	r3, [pc, #252]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	4a3e      	ldr	r2, [pc, #248]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c954:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c956:	4b3c      	ldr	r3, [pc, #240]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	4a3b      	ldr	r2, [pc, #236]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c95c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c960:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800c962:	4b39      	ldr	r3, [pc, #228]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	4a38      	ldr	r2, [pc, #224]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c96c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800c96e:	4b36      	ldr	r3, [pc, #216]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a35      	ldr	r2, [pc, #212]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c978:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c97a:	e000      	b.n	800c97e <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 800c97c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800c97e:	4b32      	ldr	r3, [pc, #200]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0f8      	beq.n	800c97c <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800c98a:	4b30      	ldr	r3, [pc, #192]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a2f      	ldr	r2, [pc, #188]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c990:	f023 030f 	bic.w	r3, r3, #15
 800c994:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 800c996:	4b2d      	ldr	r3, [pc, #180]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a2c      	ldr	r2, [pc, #176]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800c99c:	f043 0301 	orr.w	r3, r3, #1
 800c9a0:	6013      	str	r3, [r2, #0]

			break;
 800c9a2:	e149      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800c9a4:	4b28      	ldr	r3, [pc, #160]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	4a27      	ldr	r2, [pc, #156]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9ae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800c9b0:	4b25      	ldr	r3, [pc, #148]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	4a24      	ldr	r2, [pc, #144]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9b6:	f043 0310 	orr.w	r3, r3, #16
 800c9ba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800c9bc:	4b22      	ldr	r3, [pc, #136]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	4a21      	ldr	r2, [pc, #132]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c9c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9ca:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 800c9cc:	4b1e      	ldr	r3, [pc, #120]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	4a1d      	ldr	r2, [pc, #116]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9d2:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 800c9d6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800c9d8:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	4a1a      	ldr	r2, [pc, #104]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c9e2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800c9e4:	4b18      	ldr	r3, [pc, #96]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9e6:	4a18      	ldr	r2, [pc, #96]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800c9ec:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	4a15      	ldr	r2, [pc, #84]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9f6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800c9f8:	4b13      	ldr	r3, [pc, #76]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	4a12      	ldr	r2, [pc, #72]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800c9fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca02:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800ca04:	4b10      	ldr	r3, [pc, #64]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	4a0f      	ldr	r2, [pc, #60]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800ca0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ca0e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800ca10:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a0c      	ldr	r2, [pc, #48]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800ca16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca1a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800ca1c:	e000      	b.n	800ca20 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 800ca1e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800ca20:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <RCC_enableMaxFrequencies+0x448>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d0f8      	beq.n	800ca1e <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800ca2c:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a06      	ldr	r2, [pc, #24]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800ca32:	f023 030f 	bic.w	r3, r3, #15
 800ca36:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800ca38:	4b04      	ldr	r3, [pc, #16]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a03      	ldr	r2, [pc, #12]	; (800ca4c <RCC_enableMaxFrequencies+0x44c>)
 800ca3e:	f043 0302 	orr.w	r3, r3, #2
 800ca42:	6013      	str	r3, [r2, #0]

			break;
 800ca44:	e0f8      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
 800ca46:	bf00      	nop
 800ca48:	40023800 	.word	0x40023800
 800ca4c:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800ca50:	4b84      	ldr	r3, [pc, #528]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	4a83      	ldr	r2, [pc, #524]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca5a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800ca5c:	4b81      	ldr	r3, [pc, #516]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4a80      	ldr	r2, [pc, #512]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca62:	f043 0310 	orr.w	r3, r3, #16
 800ca66:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800ca68:	4b7e      	ldr	r3, [pc, #504]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	4a7d      	ldr	r2, [pc, #500]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ca72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca76:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 800ca78:	4b7a      	ldr	r3, [pc, #488]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	4a79      	ldr	r2, [pc, #484]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca7e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800ca82:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800ca84:	4b77      	ldr	r3, [pc, #476]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	4a76      	ldr	r2, [pc, #472]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ca8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800ca90:	4b74      	ldr	r3, [pc, #464]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca92:	4a74      	ldr	r2, [pc, #464]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800ca98:	4b72      	ldr	r3, [pc, #456]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	4a71      	ldr	r2, [pc, #452]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800ca9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caa2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800caa4:	4b6f      	ldr	r3, [pc, #444]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	4a6e      	ldr	r2, [pc, #440]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800caaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800caae:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cab0:	4b6c      	ldr	r3, [pc, #432]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	4a6b      	ldr	r2, [pc, #428]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800caba:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cabc:	4b69      	ldr	r3, [pc, #420]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a68      	ldr	r2, [pc, #416]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cac6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cac8:	e000      	b.n	800cacc <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 800caca:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cacc:	4b65      	ldr	r3, [pc, #404]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d0f8      	beq.n	800caca <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cad8:	4b63      	ldr	r3, [pc, #396]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a62      	ldr	r2, [pc, #392]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cade:	f023 030f 	bic.w	r3, r3, #15
 800cae2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cae4:	4b60      	ldr	r3, [pc, #384]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a5f      	ldr	r2, [pc, #380]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800caea:	f043 0302 	orr.w	r3, r3, #2
 800caee:	6013      	str	r3, [r2, #0]

			break;
 800caf0:	e0a2      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800caf2:	4b5c      	ldr	r3, [pc, #368]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	4a5b      	ldr	r2, [pc, #364]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800caf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cafc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800cafe:	4b59      	ldr	r3, [pc, #356]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	4a58      	ldr	r2, [pc, #352]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb04:	f043 0310 	orr.w	r3, r3, #16
 800cb08:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cb0a:	4b56      	ldr	r3, [pc, #344]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4a55      	ldr	r2, [pc, #340]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb10:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cb14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb18:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 800cb1a:	4b52      	ldr	r3, [pc, #328]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	4a51      	ldr	r2, [pc, #324]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb20:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 800cb24:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cb26:	4b4f      	ldr	r3, [pc, #316]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	4a4e      	ldr	r2, [pc, #312]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb2c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cb30:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cb32:	4b4c      	ldr	r3, [pc, #304]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb34:	4a4b      	ldr	r2, [pc, #300]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cb3a:	4b4a      	ldr	r3, [pc, #296]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	4a49      	ldr	r2, [pc, #292]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb44:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cb46:	4b47      	ldr	r3, [pc, #284]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	4a46      	ldr	r2, [pc, #280]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb50:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cb52:	4b44      	ldr	r3, [pc, #272]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	4a43      	ldr	r2, [pc, #268]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cb5c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cb5e:	4b41      	ldr	r3, [pc, #260]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a40      	ldr	r2, [pc, #256]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb68:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cb6a:	e000      	b.n	800cb6e <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 800cb6c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cb6e:	4b3d      	ldr	r3, [pc, #244]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0f8      	beq.n	800cb6c <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cb7a:	4b3b      	ldr	r3, [pc, #236]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a3a      	ldr	r2, [pc, #232]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cb80:	f023 030f 	bic.w	r3, r3, #15
 800cb84:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 800cb86:	4b38      	ldr	r3, [pc, #224]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a37      	ldr	r2, [pc, #220]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cb8c:	f043 0302 	orr.w	r3, r3, #2
 800cb90:	6013      	str	r3, [r2, #0]

			break;
 800cb92:	e051      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800cb94:	4b33      	ldr	r3, [pc, #204]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	4a32      	ldr	r2, [pc, #200]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cb9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb9e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 800cba0:	4b30      	ldr	r3, [pc, #192]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4a2f      	ldr	r2, [pc, #188]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cba6:	f043 0308 	orr.w	r3, r3, #8
 800cbaa:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 800cbac:	4b2d      	ldr	r3, [pc, #180]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	4a2c      	ldr	r2, [pc, #176]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cbb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbba:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 800cbbc:	4b29      	ldr	r3, [pc, #164]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	4a28      	ldr	r2, [pc, #160]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbc2:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 800cbc6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 800cbc8:	4b26      	ldr	r3, [pc, #152]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	4a25      	ldr	r2, [pc, #148]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cbd2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 800cbd4:	4b23      	ldr	r3, [pc, #140]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbd6:	4a23      	ldr	r2, [pc, #140]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800cbdc:	4b21      	ldr	r3, [pc, #132]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	4a20      	ldr	r2, [pc, #128]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbe6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 800cbe8:	4b1e      	ldr	r3, [pc, #120]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbf2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 800cbf4:	4b1b      	ldr	r3, [pc, #108]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	4a1a      	ldr	r2, [pc, #104]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cbfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cbfe:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800cc00:	4b18      	ldr	r3, [pc, #96]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a17      	ldr	r2, [pc, #92]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cc06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc0a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cc0c:	e000      	b.n	800cc10 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 800cc0e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800cc10:	4b14      	ldr	r3, [pc, #80]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d0f8      	beq.n	800cc0e <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800cc1c:	4b12      	ldr	r3, [pc, #72]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a11      	ldr	r2, [pc, #68]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cc22:	f023 030f 	bic.w	r3, r3, #15
 800cc26:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 800cc28:	4b0f      	ldr	r3, [pc, #60]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a0e      	ldr	r2, [pc, #56]	; (800cc68 <RCC_enableMaxFrequencies+0x668>)
 800cc2e:	f043 0303 	orr.w	r3, r3, #3
 800cc32:	6013      	str	r3, [r2, #0]

			break;
 800cc34:	e000      	b.n	800cc38 <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 800cc36:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800cc38:	4b0a      	ldr	r3, [pc, #40]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	4a09      	ldr	r2, [pc, #36]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cc3e:	f043 0302 	orr.w	r3, r3, #2
 800cc42:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800cc44:	e000      	b.n	800cc48 <RCC_enableMaxFrequencies+0x648>
		__NOP();
 800cc46:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 800cc48:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <RCC_enableMaxFrequencies+0x664>)
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	f003 0308 	and.w	r3, r3, #8
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d0f8      	beq.n	800cc46 <RCC_enableMaxFrequencies+0x646>
	}

//	SystemCoreClockUpdate();

}
 800cc54:	bf00      	nop
 800cc56:	bf00      	nop
 800cc58:	370c      	adds	r7, #12
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	40023800 	.word	0x40023800
 800cc68:	40023c00 	.word	0x40023c00

0800cc6c <__NVIC_EnableIRQ>:
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	db0b      	blt.n	800cc96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	f003 021f 	and.w	r2, r3, #31
 800cc84:	4907      	ldr	r1, [pc, #28]	; (800cca4 <__NVIC_EnableIRQ+0x38>)
 800cc86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc8a:	095b      	lsrs	r3, r3, #5
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	fa00 f202 	lsl.w	r2, r0, r2
 800cc92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cc96:	bf00      	nop
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	e000e100 	.word	0xe000e100

0800cca8 <__NVIC_SetPriority>:
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	6039      	str	r1, [r7, #0]
 800ccb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ccb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	db0a      	blt.n	800ccd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	490c      	ldr	r1, [pc, #48]	; (800ccf4 <__NVIC_SetPriority+0x4c>)
 800ccc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccc6:	0112      	lsls	r2, r2, #4
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	440b      	add	r3, r1
 800cccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ccd0:	e00a      	b.n	800cce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	4908      	ldr	r1, [pc, #32]	; (800ccf8 <__NVIC_SetPriority+0x50>)
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	f003 030f 	and.w	r3, r3, #15
 800ccde:	3b04      	subs	r3, #4
 800cce0:	0112      	lsls	r2, r2, #4
 800cce2:	b2d2      	uxtb	r2, r2
 800cce4:	440b      	add	r3, r1
 800cce6:	761a      	strb	r2, [r3, #24]
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	e000e100 	.word	0xe000e100
 800ccf8:	e000ed00 	.word	0xe000ed00

0800ccfc <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 800ccfc:	b590      	push	{r4, r7, lr}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd04:	b672      	cpsid	i
}
 800cd06:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a91      	ldr	r2, [pc, #580]	; (800cf54 <USART_Config+0x258>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d106      	bne.n	800cd20 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800cd12:	4b91      	ldr	r3, [pc, #580]	; (800cf58 <USART_Config+0x25c>)
 800cd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd16:	4a90      	ldr	r2, [pc, #576]	; (800cf58 <USART_Config+0x25c>)
 800cd18:	f043 0310 	orr.w	r3, r3, #16
 800cd1c:	6453      	str	r3, [r2, #68]	; 0x44
 800cd1e:	e018      	b.n	800cd52 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a8d      	ldr	r2, [pc, #564]	; (800cf5c <USART_Config+0x260>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d106      	bne.n	800cd38 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800cd2a:	4b8b      	ldr	r3, [pc, #556]	; (800cf58 <USART_Config+0x25c>)
 800cd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2e:	4a8a      	ldr	r2, [pc, #552]	; (800cf58 <USART_Config+0x25c>)
 800cd30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd34:	6413      	str	r3, [r2, #64]	; 0x40
 800cd36:	e00c      	b.n	800cd52 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a88      	ldr	r2, [pc, #544]	; (800cf60 <USART_Config+0x264>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d106      	bne.n	800cd50 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 800cd42:	4b85      	ldr	r3, [pc, #532]	; (800cf58 <USART_Config+0x25c>)
 800cd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd46:	4a84      	ldr	r2, [pc, #528]	; (800cf58 <USART_Config+0x25c>)
 800cd48:	f043 0320 	orr.w	r3, r3, #32
 800cd4c:	6453      	str	r3, [r2, #68]	; 0x44
 800cd4e:	e000      	b.n	800cd52 <USART_Config+0x56>
	}
	else{
		__NOP();
 800cd50:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2200      	movs	r2, #0
 800cd58:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7a5b      	ldrb	r3, [r3, #9]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d025      	beq.n	800cdb6 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7a5b      	ldrb	r3, [r3, #9]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d110      	bne.n	800cd94 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cd80:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68da      	ldr	r2, [r3, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd90:	60da      	str	r2, [r3, #12]
 800cd92:	e018      	b.n	800cdc6 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cda2:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68da      	ldr	r2, [r3, #12]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdb2:	60da      	str	r2, [r3, #12]
 800cdb4:	e007      	b.n	800cdc6 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68da      	ldr	r2, [r3, #12]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdc4:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7a1b      	ldrb	r3, [r3, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d108      	bne.n	800cde0 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68da      	ldr	r2, [r3, #12]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cddc:	60da      	str	r2, [r3, #12]
 800cdde:	e007      	b.n	800cdf0 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68da      	ldr	r2, [r3, #12]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdee:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	7a9b      	ldrb	r3, [r3, #10]
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d82f      	bhi.n	800ce58 <USART_Config+0x15c>
 800cdf8:	a201      	add	r2, pc, #4	; (adr r2, 800ce00 <USART_Config+0x104>)
 800cdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdfe:	bf00      	nop
 800ce00:	0800ce11 	.word	0x0800ce11
 800ce04:	0800ce23 	.word	0x0800ce23
 800ce08:	0800ce35 	.word	0x0800ce35
 800ce0c:	0800ce47 	.word	0x0800ce47
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	691a      	ldr	r2, [r3, #16]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ce1e:	611a      	str	r2, [r3, #16]
			break;
 800ce20:	e023      	b.n	800ce6a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce30:	611a      	str	r2, [r3, #16]
			break;
 800ce32:	e01a      	b.n	800ce6a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	691a      	ldr	r2, [r3, #16]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ce42:	611a      	str	r2, [r3, #16]
			break;
 800ce44:	e011      	b.n	800ce6a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	691a      	ldr	r2, [r3, #16]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800ce54:	611a      	str	r2, [r3, #16]
			break;
 800ce56:	e008      	b.n	800ce6a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	691a      	ldr	r2, [r3, #16]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800ce66:	611a      	str	r2, [r3, #16]
			break;
 800ce68:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68da      	ldr	r2, [r3, #12]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681c      	ldr	r4, [r3, #0]
 800ce72:	4611      	mov	r1, r2
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 f8d7 	bl	800d028 <brrCalculus>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	799b      	ldrb	r3, [r3, #6]
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d82e      	bhi.n	800cee4 <USART_Config+0x1e8>
 800ce86:	a201      	add	r2, pc, #4	; (adr r2, 800ce8c <USART_Config+0x190>)
 800ce88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8c:	0800ce9d 	.word	0x0800ce9d
 800ce90:	0800ceaf 	.word	0x0800ceaf
 800ce94:	0800cec1 	.word	0x0800cec1
 800ce98:	0800ced3 	.word	0x0800ced3
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68da      	ldr	r2, [r3, #12]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f042 0208 	orr.w	r2, r2, #8
 800ceaa:	60da      	str	r2, [r3, #12]
			break;
 800ceac:	e023      	b.n	800cef6 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f042 0204 	orr.w	r2, r2, #4
 800cebc:	60da      	str	r2, [r3, #12]
			break;
 800cebe:	e01a      	b.n	800cef6 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68da      	ldr	r2, [r3, #12]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f042 020c 	orr.w	r2, r2, #12
 800cece:	60da      	str	r2, [r3, #12]
			break;
 800ced0:	e011      	b.n	800cef6 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68da      	ldr	r2, [r3, #12]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f022 020c 	bic.w	r2, r2, #12
 800cee0:	60da      	str	r2, [r3, #12]
			break;
 800cee2:	e008      	b.n	800cef6 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68da      	ldr	r2, [r3, #12]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 020c 	bic.w	r2, r2, #12
 800cef2:	60da      	str	r2, [r3, #12]
			break;
 800cef4:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	799b      	ldrb	r3, [r3, #6]
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d008      	beq.n	800cf10 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68da      	ldr	r2, [r3, #12]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf0c:	60da      	str	r2, [r3, #12]
 800cf0e:	e007      	b.n	800cf20 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf1e:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	795b      	ldrb	r3, [r3, #5]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d139      	bne.n	800cf9c <USART_Config+0x2a0>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f042 0220 	orr.w	r2, r2, #32
 800cf36:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a05      	ldr	r2, [pc, #20]	; (800cf54 <USART_Config+0x258>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d110      	bne.n	800cf64 <USART_Config+0x268>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800cf42:	2025      	movs	r0, #37	; 0x25
 800cf44:	f7ff fe92 	bl	800cc6c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART1_IRQn, 1);
 800cf48:	2101      	movs	r1, #1
 800cf4a:	2025      	movs	r0, #37	; 0x25
 800cf4c:	f7ff feac 	bl	800cca8 <__NVIC_SetPriority>
 800cf50:	e02c      	b.n	800cfac <USART_Config+0x2b0>
 800cf52:	bf00      	nop
 800cf54:	40011000 	.word	0x40011000
 800cf58:	40023800 	.word	0x40023800
 800cf5c:	40004400 	.word	0x40004400
 800cf60:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a2c      	ldr	r2, [pc, #176]	; (800d01c <USART_Config+0x320>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d107      	bne.n	800cf7e <USART_Config+0x282>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800cf6e:	2026      	movs	r0, #38	; 0x26
 800cf70:	f7ff fe7c 	bl	800cc6c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART2_IRQn, 1);
 800cf74:	2101      	movs	r1, #1
 800cf76:	2026      	movs	r0, #38	; 0x26
 800cf78:	f7ff fe96 	bl	800cca8 <__NVIC_SetPriority>
 800cf7c:	e016      	b.n	800cfac <USART_Config+0x2b0>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a27      	ldr	r2, [pc, #156]	; (800d020 <USART_Config+0x324>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d107      	bne.n	800cf98 <USART_Config+0x29c>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800cf88:	2047      	movs	r0, #71	; 0x47
 800cf8a:	f7ff fe6f 	bl	800cc6c <__NVIC_EnableIRQ>
					__NVIC_SetPriority(USART6_IRQn, 1);
 800cf8e:	2101      	movs	r1, #1
 800cf90:	2047      	movs	r0, #71	; 0x47
 800cf92:	f7ff fe89 	bl	800cca8 <__NVIC_SetPriority>
 800cf96:	e009      	b.n	800cfac <USART_Config+0x2b0>
		}
		else{
				__NOP();
 800cf98:	bf00      	nop
 800cf9a:	e007      	b.n	800cfac <USART_Config+0x2b0>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68da      	ldr	r2, [r3, #12]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f022 0220 	bic.w	r2, r2, #32
 800cfaa:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	791b      	ldrb	r3, [r3, #4]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d124      	bne.n	800cffe <USART_Config+0x302>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68da      	ldr	r2, [r3, #12]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cfc2:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a16      	ldr	r2, [pc, #88]	; (800d024 <USART_Config+0x328>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d103      	bne.n	800cfd6 <USART_Config+0x2da>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 800cfce:	2025      	movs	r0, #37	; 0x25
 800cfd0:	f7ff fe4c 	bl	800cc6c <__NVIC_EnableIRQ>
 800cfd4:	e01b      	b.n	800d00e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a10      	ldr	r2, [pc, #64]	; (800d01c <USART_Config+0x320>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d103      	bne.n	800cfe8 <USART_Config+0x2ec>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 800cfe0:	2026      	movs	r0, #38	; 0x26
 800cfe2:	f7ff fe43 	bl	800cc6c <__NVIC_EnableIRQ>
 800cfe6:	e012      	b.n	800d00e <USART_Config+0x312>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a0c      	ldr	r2, [pc, #48]	; (800d020 <USART_Config+0x324>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d103      	bne.n	800cffa <USART_Config+0x2fe>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800cff2:	2047      	movs	r0, #71	; 0x47
 800cff4:	f7ff fe3a 	bl	800cc6c <__NVIC_EnableIRQ>
 800cff8:	e009      	b.n	800d00e <USART_Config+0x312>
		}
		else{
				__NOP();
 800cffa:	bf00      	nop
 800cffc:	e007      	b.n	800d00e <USART_Config+0x312>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68da      	ldr	r2, [r3, #12]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d00c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800d00e:	b662      	cpsie	i
}
 800d010:	bf00      	nop
	}

	__enable_irq();
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	bd90      	pop	{r4, r7, pc}
 800d01a:	bf00      	nop
 800d01c:	40004400 	.word	0x40004400
 800d020:	40011400 	.word	0x40011400
 800d024:	40011000 	.word	0x40011000

0800d028 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 800d028:	b5b0      	push	{r4, r5, r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	79db      	ldrb	r3, [r3, #7]
 800d036:	2b03      	cmp	r3, #3
 800d038:	f200 8217 	bhi.w	800d46a <brrCalculus+0x442>
 800d03c:	a201      	add	r2, pc, #4	; (adr r2, 800d044 <brrCalculus+0x1c>)
 800d03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d042:	bf00      	nop
 800d044:	0800d055 	.word	0x0800d055
 800d048:	0800d14f 	.word	0x0800d14f
 800d04c:	0800d269 	.word	0x0800d269
 800d050:	0800d371 	.word	0x0800d371

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 800d054:	4980      	ldr	r1, [pc, #512]	; (800d258 <brrCalculus+0x230>)
 800d056:	a37c      	add	r3, pc, #496	; (adr r3, 800d248 <brrCalculus+0x220>)
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	ee07 3a90 	vmov	s15, r3
 800d066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06a:	ee17 0a90 	vmov	r0, s15
 800d06e:	f7f3 fa83 	bl	8000578 <__aeabi_f2d>
 800d072:	4b79      	ldr	r3, [pc, #484]	; (800d258 <brrCalculus+0x230>)
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f7f3 fad6 	bl	8000628 <__aeabi_dmul>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	4975      	ldr	r1, [pc, #468]	; (800d258 <brrCalculus+0x230>)
 800d082:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d086:	4b74      	ldr	r3, [pc, #464]	; (800d258 <brrCalculus+0x230>)
 800d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08c:	4610      	mov	r0, r2
 800d08e:	4619      	mov	r1, r3
 800d090:	f7f3 fd7a 	bl	8000b88 <__aeabi_d2iz>
 800d094:	4603      	mov	r3, r0
 800d096:	b29a      	uxth	r2, r3
 800d098:	4b70      	ldr	r3, [pc, #448]	; (800d25c <brrCalculus+0x234>)
 800d09a:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d09c:	4b6e      	ldr	r3, [pc, #440]	; (800d258 <brrCalculus+0x230>)
 800d09e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d0a2:	4b6d      	ldr	r3, [pc, #436]	; (800d258 <brrCalculus+0x230>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	f7f3 fd6c 	bl	8000b88 <__aeabi_d2iz>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f3 fa4e 	bl	8000554 <__aeabi_i2d>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	4620      	mov	r0, r4
 800d0be:	4629      	mov	r1, r5
 800d0c0:	f7f3 f8fa 	bl	80002b8 <__aeabi_dsub>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	f7f3 fda4 	bl	8000c18 <__aeabi_d2f>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	4a63      	ldr	r2, [pc, #396]	; (800d260 <brrCalculus+0x238>)
 800d0d4:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d0d6:	4b62      	ldr	r3, [pc, #392]	; (800d260 <brrCalculus+0x238>)
 800d0d8:	edd3 7a00 	vldr	s15, [r3]
 800d0dc:	2004      	movs	r0, #4
 800d0de:	eeb0 0a67 	vmov.f32	s0, s15
 800d0e2:	f000 fa6d 	bl	800d5c0 <roundToNDecimals>
 800d0e6:	eef0 7a40 	vmov.f32	s15, s0
 800d0ea:	4b5d      	ldr	r3, [pc, #372]	; (800d260 <brrCalculus+0x238>)
 800d0ec:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d0f0:	4b5b      	ldr	r3, [pc, #364]	; (800d260 <brrCalculus+0x238>)
 800d0f2:	edd3 7a00 	vldr	s15, [r3]
 800d0f6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d0fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0fe:	4b58      	ldr	r3, [pc, #352]	; (800d260 <brrCalculus+0x238>)
 800d100:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d104:	4b56      	ldr	r3, [pc, #344]	; (800d260 <brrCalculus+0x238>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4618      	mov	r0, r3
 800d10a:	f7f3 fa35 	bl	8000578 <__aeabi_f2d>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	ec43 2b10 	vmov	d0, r2, r3
 800d116:	f003 fc97 	bl	8010a48 <round>
 800d11a:	ec53 2b10 	vmov	r2, r3, d0
 800d11e:	4610      	mov	r0, r2
 800d120:	4619      	mov	r1, r3
 800d122:	f7f3 fd79 	bl	8000c18 <__aeabi_d2f>
 800d126:	4603      	mov	r3, r0
 800d128:	4a4d      	ldr	r2, [pc, #308]	; (800d260 <brrCalculus+0x238>)
 800d12a:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d12c:	4b4b      	ldr	r3, [pc, #300]	; (800d25c <brrCalculus+0x234>)
 800d12e:	881b      	ldrh	r3, [r3, #0]
 800d130:	011b      	lsls	r3, r3, #4
 800d132:	b29a      	uxth	r2, r3
 800d134:	4b4a      	ldr	r3, [pc, #296]	; (800d260 <brrCalculus+0x238>)
 800d136:	edd3 7a00 	vldr	s15, [r3]
 800d13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d13e:	ee17 3a90 	vmov	r3, s15
 800d142:	b29b      	uxth	r3, r3
 800d144:	4313      	orrs	r3, r2
 800d146:	b29a      	uxth	r2, r3
 800d148:	4b46      	ldr	r3, [pc, #280]	; (800d264 <brrCalculus+0x23c>)
 800d14a:	801a      	strh	r2, [r3, #0]


		break;
 800d14c:	e18f      	b.n	800d46e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 800d14e:	4942      	ldr	r1, [pc, #264]	; (800d258 <brrCalculus+0x230>)
 800d150:	a33f      	add	r3, pc, #252	; (adr r3, 800d250 <brrCalculus+0x228>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	ee07 3a90 	vmov	s15, r3
 800d160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d164:	ee17 0a90 	vmov	r0, s15
 800d168:	f7f3 fa06 	bl	8000578 <__aeabi_f2d>
 800d16c:	4b3a      	ldr	r3, [pc, #232]	; (800d258 <brrCalculus+0x230>)
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f7f3 fa59 	bl	8000628 <__aeabi_dmul>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	4937      	ldr	r1, [pc, #220]	; (800d258 <brrCalculus+0x230>)
 800d17c:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d180:	4b35      	ldr	r3, [pc, #212]	; (800d258 <brrCalculus+0x230>)
 800d182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d186:	4610      	mov	r0, r2
 800d188:	4619      	mov	r1, r3
 800d18a:	f7f3 fcfd 	bl	8000b88 <__aeabi_d2iz>
 800d18e:	4603      	mov	r3, r0
 800d190:	b29a      	uxth	r2, r3
 800d192:	4b32      	ldr	r3, [pc, #200]	; (800d25c <brrCalculus+0x234>)
 800d194:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d196:	4b30      	ldr	r3, [pc, #192]	; (800d258 <brrCalculus+0x230>)
 800d198:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d19c:	4b2e      	ldr	r3, [pc, #184]	; (800d258 <brrCalculus+0x230>)
 800d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	f7f3 fcef 	bl	8000b88 <__aeabi_d2iz>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f3 f9d1 	bl	8000554 <__aeabi_i2d>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 f87d 	bl	80002b8 <__aeabi_dsub>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4610      	mov	r0, r2
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	f7f3 fd27 	bl	8000c18 <__aeabi_d2f>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4a24      	ldr	r2, [pc, #144]	; (800d260 <brrCalculus+0x238>)
 800d1ce:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d1d0:	4b23      	ldr	r3, [pc, #140]	; (800d260 <brrCalculus+0x238>)
 800d1d2:	edd3 7a00 	vldr	s15, [r3]
 800d1d6:	2004      	movs	r0, #4
 800d1d8:	eeb0 0a67 	vmov.f32	s0, s15
 800d1dc:	f000 f9f0 	bl	800d5c0 <roundToNDecimals>
 800d1e0:	eef0 7a40 	vmov.f32	s15, s0
 800d1e4:	4b1e      	ldr	r3, [pc, #120]	; (800d260 <brrCalculus+0x238>)
 800d1e6:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d1ea:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <brrCalculus+0x238>)
 800d1ec:	edd3 7a00 	vldr	s15, [r3]
 800d1f0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d1f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1f8:	4b19      	ldr	r3, [pc, #100]	; (800d260 <brrCalculus+0x238>)
 800d1fa:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d1fe:	4b18      	ldr	r3, [pc, #96]	; (800d260 <brrCalculus+0x238>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4618      	mov	r0, r3
 800d204:	f7f3 f9b8 	bl	8000578 <__aeabi_f2d>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	ec43 2b10 	vmov	d0, r2, r3
 800d210:	f003 fc1a 	bl	8010a48 <round>
 800d214:	ec53 2b10 	vmov	r2, r3, d0
 800d218:	4610      	mov	r0, r2
 800d21a:	4619      	mov	r1, r3
 800d21c:	f7f3 fcfc 	bl	8000c18 <__aeabi_d2f>
 800d220:	4603      	mov	r3, r0
 800d222:	4a0f      	ldr	r2, [pc, #60]	; (800d260 <brrCalculus+0x238>)
 800d224:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d226:	4b0d      	ldr	r3, [pc, #52]	; (800d25c <brrCalculus+0x234>)
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	011b      	lsls	r3, r3, #4
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <brrCalculus+0x238>)
 800d230:	edd3 7a00 	vldr	s15, [r3]
 800d234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d238:	ee17 3a90 	vmov	r3, s15
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	4313      	orrs	r3, r2
 800d240:	b29a      	uxth	r2, r3
 800d242:	4b08      	ldr	r3, [pc, #32]	; (800d264 <brrCalculus+0x23c>)
 800d244:	801a      	strh	r2, [r3, #0]


		break;
 800d246:	e112      	b.n	800d46e <brrCalculus+0x446>
 800d248:	b4e81b4f 	.word	0xb4e81b4f
 800d24c:	3edb4e81 	.word	0x3edb4e81
 800d250:	b4e81b4f 	.word	0xb4e81b4f
 800d254:	3ecb4e81 	.word	0x3ecb4e81
 800d258:	2000dc30 	.word	0x2000dc30
 800d25c:	2000dc24 	.word	0x2000dc24
 800d260:	2000dc28 	.word	0x2000dc28
 800d264:	2000dc22 	.word	0x2000dc22
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 800d268:	4989      	ldr	r1, [pc, #548]	; (800d490 <brrCalculus+0x468>)
 800d26a:	a385      	add	r3, pc, #532	; (adr r3, 800d480 <brrCalculus+0x458>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27e:	ee17 0a90 	vmov	r0, s15
 800d282:	f7f3 f979 	bl	8000578 <__aeabi_f2d>
 800d286:	4b82      	ldr	r3, [pc, #520]	; (800d490 <brrCalculus+0x468>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	f7f3 f9cc 	bl	8000628 <__aeabi_dmul>
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	497e      	ldr	r1, [pc, #504]	; (800d490 <brrCalculus+0x468>)
 800d296:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d29a:	4b7d      	ldr	r3, [pc, #500]	; (800d490 <brrCalculus+0x468>)
 800d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f7f3 fc70 	bl	8000b88 <__aeabi_d2iz>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	4b79      	ldr	r3, [pc, #484]	; (800d494 <brrCalculus+0x46c>)
 800d2ae:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d2b0:	4b77      	ldr	r3, [pc, #476]	; (800d490 <brrCalculus+0x468>)
 800d2b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d2b6:	4b76      	ldr	r3, [pc, #472]	; (800d490 <brrCalculus+0x468>)
 800d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2bc:	4610      	mov	r0, r2
 800d2be:	4619      	mov	r1, r3
 800d2c0:	f7f3 fc62 	bl	8000b88 <__aeabi_d2iz>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7f3 f944 	bl	8000554 <__aeabi_i2d>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	f7f2 fff0 	bl	80002b8 <__aeabi_dsub>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4610      	mov	r0, r2
 800d2de:	4619      	mov	r1, r3
 800d2e0:	f7f3 fc9a 	bl	8000c18 <__aeabi_d2f>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	4a6c      	ldr	r2, [pc, #432]	; (800d498 <brrCalculus+0x470>)
 800d2e8:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d2ea:	4b6b      	ldr	r3, [pc, #428]	; (800d498 <brrCalculus+0x470>)
 800d2ec:	edd3 7a00 	vldr	s15, [r3]
 800d2f0:	2004      	movs	r0, #4
 800d2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800d2f6:	f000 f963 	bl	800d5c0 <roundToNDecimals>
 800d2fa:	eef0 7a40 	vmov.f32	s15, s0
 800d2fe:	4b66      	ldr	r3, [pc, #408]	; (800d498 <brrCalculus+0x470>)
 800d300:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d304:	4b64      	ldr	r3, [pc, #400]	; (800d498 <brrCalculus+0x470>)
 800d306:	edd3 7a00 	vldr	s15, [r3]
 800d30a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d30e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d312:	4b61      	ldr	r3, [pc, #388]	; (800d498 <brrCalculus+0x470>)
 800d314:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 800d318:	4b5f      	ldr	r3, [pc, #380]	; (800d498 <brrCalculus+0x470>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f3 f92b 	bl	8000578 <__aeabi_f2d>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	ec43 2b10 	vmov	d0, r2, r3
 800d32a:	f003 fb8d 	bl	8010a48 <round>
 800d32e:	ec51 0b10 	vmov	r0, r1, d0
 800d332:	f04f 0200 	mov.w	r2, #0
 800d336:	4b59      	ldr	r3, [pc, #356]	; (800d49c <brrCalculus+0x474>)
 800d338:	f7f2 ffc0 	bl	80002bc <__adddf3>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4610      	mov	r0, r2
 800d342:	4619      	mov	r1, r3
 800d344:	f7f3 fc68 	bl	8000c18 <__aeabi_d2f>
 800d348:	4603      	mov	r3, r0
 800d34a:	4a53      	ldr	r2, [pc, #332]	; (800d498 <brrCalculus+0x470>)
 800d34c:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d34e:	4b51      	ldr	r3, [pc, #324]	; (800d494 <brrCalculus+0x46c>)
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	011b      	lsls	r3, r3, #4
 800d354:	b29a      	uxth	r2, r3
 800d356:	4b50      	ldr	r3, [pc, #320]	; (800d498 <brrCalculus+0x470>)
 800d358:	edd3 7a00 	vldr	s15, [r3]
 800d35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d360:	ee17 3a90 	vmov	r3, s15
 800d364:	b29b      	uxth	r3, r3
 800d366:	4313      	orrs	r3, r2
 800d368:	b29a      	uxth	r2, r3
 800d36a:	4b4d      	ldr	r3, [pc, #308]	; (800d4a0 <brrCalculus+0x478>)
 800d36c:	801a      	strh	r2, [r3, #0]


		break;
 800d36e:	e07e      	b.n	800d46e <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 800d370:	4947      	ldr	r1, [pc, #284]	; (800d490 <brrCalculus+0x468>)
 800d372:	a345      	add	r3, pc, #276	; (adr r3, 800d488 <brrCalculus+0x460>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	ee07 3a90 	vmov	s15, r3
 800d382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d386:	ee17 0a90 	vmov	r0, s15
 800d38a:	f7f3 f8f5 	bl	8000578 <__aeabi_f2d>
 800d38e:	4b40      	ldr	r3, [pc, #256]	; (800d490 <brrCalculus+0x468>)
 800d390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d394:	f7f3 f948 	bl	8000628 <__aeabi_dmul>
 800d398:	4602      	mov	r2, r0
 800d39a:	460b      	mov	r3, r1
 800d39c:	493c      	ldr	r1, [pc, #240]	; (800d490 <brrCalculus+0x468>)
 800d39e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800d3a2:	4b3b      	ldr	r3, [pc, #236]	; (800d490 <brrCalculus+0x468>)
 800d3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f7f3 fbec 	bl	8000b88 <__aeabi_d2iz>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	4b37      	ldr	r3, [pc, #220]	; (800d494 <brrCalculus+0x46c>)
 800d3b6:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800d3b8:	4b35      	ldr	r3, [pc, #212]	; (800d490 <brrCalculus+0x468>)
 800d3ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d3be:	4b34      	ldr	r3, [pc, #208]	; (800d490 <brrCalculus+0x468>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	f7f3 fbde 	bl	8000b88 <__aeabi_d2iz>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7f3 f8c0 	bl	8000554 <__aeabi_i2d>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4629      	mov	r1, r5
 800d3dc:	f7f2 ff6c 	bl	80002b8 <__aeabi_dsub>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	f7f3 fc16 	bl	8000c18 <__aeabi_d2f>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4a2a      	ldr	r2, [pc, #168]	; (800d498 <brrCalculus+0x470>)
 800d3f0:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800d3f2:	4b29      	ldr	r3, [pc, #164]	; (800d498 <brrCalculus+0x470>)
 800d3f4:	edd3 7a00 	vldr	s15, [r3]
 800d3f8:	2004      	movs	r0, #4
 800d3fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d3fe:	f000 f8df 	bl	800d5c0 <roundToNDecimals>
 800d402:	eef0 7a40 	vmov.f32	s15, s0
 800d406:	4b24      	ldr	r3, [pc, #144]	; (800d498 <brrCalculus+0x470>)
 800d408:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 800d40c:	4b22      	ldr	r3, [pc, #136]	; (800d498 <brrCalculus+0x470>)
 800d40e:	edd3 7a00 	vldr	s15, [r3]
 800d412:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800d416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d41a:	4b1f      	ldr	r3, [pc, #124]	; (800d498 <brrCalculus+0x470>)
 800d41c:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 800d420:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <brrCalculus+0x470>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f7f3 f8a7 	bl	8000578 <__aeabi_f2d>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	ec43 2b10 	vmov	d0, r2, r3
 800d432:	f003 fb09 	bl	8010a48 <round>
 800d436:	ec53 2b10 	vmov	r2, r3, d0
 800d43a:	4610      	mov	r0, r2
 800d43c:	4619      	mov	r1, r3
 800d43e:	f7f3 fbeb 	bl	8000c18 <__aeabi_d2f>
 800d442:	4603      	mov	r3, r0
 800d444:	4a14      	ldr	r2, [pc, #80]	; (800d498 <brrCalculus+0x470>)
 800d446:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 800d448:	4b12      	ldr	r3, [pc, #72]	; (800d494 <brrCalculus+0x46c>)
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	011b      	lsls	r3, r3, #4
 800d44e:	b29a      	uxth	r2, r3
 800d450:	4b11      	ldr	r3, [pc, #68]	; (800d498 <brrCalculus+0x470>)
 800d452:	edd3 7a00 	vldr	s15, [r3]
 800d456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d45a:	ee17 3a90 	vmov	r3, s15
 800d45e:	b29b      	uxth	r3, r3
 800d460:	4313      	orrs	r3, r2
 800d462:	b29a      	uxth	r2, r3
 800d464:	4b0e      	ldr	r3, [pc, #56]	; (800d4a0 <brrCalculus+0x478>)
 800d466:	801a      	strh	r2, [r3, #0]


		break;
 800d468:	e001      	b.n	800d46e <brrCalculus+0x446>
	}
	default:{

		__NOP();
 800d46a:	bf00      	nop
		break;
 800d46c:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 800d46e:	4b0c      	ldr	r3, [pc, #48]	; (800d4a0 <brrCalculus+0x478>)
 800d470:	881b      	ldrh	r3, [r3, #0]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bdb0      	pop	{r4, r5, r7, pc}
 800d47a:	bf00      	nop
 800d47c:	f3af 8000 	nop.w
 800d480:	789abcdf 	.word	0x789abcdf
 800d484:	3ec23456 	.word	0x3ec23456
 800d488:	789abcdf 	.word	0x789abcdf
 800d48c:	3ea23456 	.word	0x3ea23456
 800d490:	2000dc30 	.word	0x2000dc30
 800d494:	2000dc24 	.word	0x2000dc24
 800d498:	2000dc28 	.word	0x2000dc28
 800d49c:	3ff00000 	.word	0x3ff00000
 800d4a0:	2000dc22 	.word	0x2000dc22

0800d4a4 <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d4ae:	e000      	b.n	800d4b2 <writeChar+0xe>
		__NOP();
 800d4b0:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d0f7      	beq.n	800d4b0 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	605a      	str	r2, [r3, #4]

}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 800d4de:	e008      	b.n	800d4f2 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f7ff ffdc 	bl	800d4a4 <writeChar>
		msgToSend ++ ;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1f2      	bne.n	800d4e0 <writeMsg+0xc>
	}
}
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 800d504:	b480      	push	{r7}
 800d506:	af00      	add	r7, sp, #0
	__NOP();
 800d508:	bf00      	nop
}
 800d50a:	bf00      	nop
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 800d514:	b480      	push	{r7}
 800d516:	af00      	add	r7, sp, #0
	__NOP();
 800d518:	bf00      	nop
}
 800d51a:	bf00      	nop
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 800d524:	b480      	push	{r7}
 800d526:	af00      	add	r7, sp, #0
	return auxRxData;
 800d528:	4b03      	ldr	r3, [pc, #12]	; (800d538 <getRxData+0x14>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	2000dc38 	.word	0x2000dc38

0800d53c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <USART2_IRQHandler+0x24>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 0320 	and.w	r3, r3, #32
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d006      	beq.n	800d55a <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 800d54c:	4b04      	ldr	r3, [pc, #16]	; (800d560 <USART2_IRQHandler+0x24>)
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	b2da      	uxtb	r2, r3
 800d552:	4b04      	ldr	r3, [pc, #16]	; (800d564 <USART2_IRQHandler+0x28>)
 800d554:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 800d556:	f7f5 fa4f 	bl	80029f8 <usart2Rx_Callback>
	}

}
 800d55a:	bf00      	nop
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	40004400 	.word	0x40004400
 800d564:	2000dc38 	.word	0x2000dc38

0800d568 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 800d568:	b580      	push	{r7, lr}
 800d56a:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 800d56c:	4b07      	ldr	r3, [pc, #28]	; (800d58c <USART1_IRQHandler+0x24>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 0320 	and.w	r3, r3, #32
 800d574:	2b00      	cmp	r3, #0
 800d576:	d006      	beq.n	800d586 <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 800d578:	4b04      	ldr	r3, [pc, #16]	; (800d58c <USART1_IRQHandler+0x24>)
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	4b04      	ldr	r3, [pc, #16]	; (800d590 <USART1_IRQHandler+0x28>)
 800d580:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800d582:	f7ff ffbf 	bl	800d504 <usart1Rx_Callback>
	}
}
 800d586:	bf00      	nop
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	40011000 	.word	0x40011000
 800d590:	2000dc38 	.word	0x2000dc38

0800d594 <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 800d598:	4b07      	ldr	r3, [pc, #28]	; (800d5b8 <USART6_IRQHandler+0x24>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f003 0320 	and.w	r3, r3, #32
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d006      	beq.n	800d5b2 <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800d5a4:	4b04      	ldr	r3, [pc, #16]	; (800d5b8 <USART6_IRQHandler+0x24>)
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	4b04      	ldr	r3, [pc, #16]	; (800d5bc <USART6_IRQHandler+0x28>)
 800d5ac:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800d5ae:	f7ff ffb1 	bl	800d514 <usart6Rx_Callback>
	}

}
 800d5b2:	bf00      	nop
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	40011400 	.word	0x40011400
 800d5bc:	2000dc38 	.word	0x2000dc38

0800d5c0 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d5ca:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 800d5cc:	6838      	ldr	r0, [r7, #0]
 800d5ce:	f7f2 ffc1 	bl	8000554 <__aeabi_i2d>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	ec43 2b11 	vmov	d1, r2, r3
 800d5da:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800d658 <roundToNDecimals+0x98>
 800d5de:	f003 fb09 	bl	8010bf4 <pow>
 800d5e2:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7f2 ffc6 	bl	8000578 <__aeabi_f2d>
 800d5ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d5f0:	f7f3 f81a 	bl	8000628 <__aeabi_dmul>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f7f3 fb0c 	bl	8000c18 <__aeabi_d2f>
 800d600:	4603      	mov	r3, r0
 800d602:	607b      	str	r3, [r7, #4]

    number = round(number);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7f2 ffb7 	bl	8000578 <__aeabi_f2d>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	ec43 2b10 	vmov	d0, r2, r3
 800d612:	f003 fa19 	bl	8010a48 <round>
 800d616:	ec53 2b10 	vmov	r2, r3, d0
 800d61a:	4610      	mov	r0, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	f7f3 fafb 	bl	8000c18 <__aeabi_d2f>
 800d622:	4603      	mov	r3, r0
 800d624:	607b      	str	r3, [r7, #4]

    number /= factor;
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7f2 ffa6 	bl	8000578 <__aeabi_f2d>
 800d62c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d630:	f7f3 f924 	bl	800087c <__aeabi_ddiv>
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	4610      	mov	r0, r2
 800d63a:	4619      	mov	r1, r3
 800d63c:	f7f3 faec 	bl	8000c18 <__aeabi_d2f>
 800d640:	4603      	mov	r3, r0
 800d642:	607b      	str	r3, [r7, #4]

    return number;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	ee07 3a90 	vmov	s15, r3
}
 800d64a:	eeb0 0a67 	vmov.f32	s0, s15
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	f3af 8000 	nop.w
 800d658:	00000000 	.word	0x00000000
 800d65c:	40240000 	.word	0x40240000

0800d660 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	460b      	mov	r3, r1
 800d66a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 800d66c:	b672      	cpsid	i
}
 800d66e:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a12      	ldr	r2, [pc, #72]	; (800d6c0 <usart_Set_Priority+0x60>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d105      	bne.n	800d686 <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 800d67a:	78fb      	ldrb	r3, [r7, #3]
 800d67c:	4619      	mov	r1, r3
 800d67e:	2025      	movs	r0, #37	; 0x25
 800d680:	f7ff fb12 	bl	800cca8 <__NVIC_SetPriority>
 800d684:	e016      	b.n	800d6b4 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a0e      	ldr	r2, [pc, #56]	; (800d6c4 <usart_Set_Priority+0x64>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d105      	bne.n	800d69c <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	4619      	mov	r1, r3
 800d694:	2026      	movs	r0, #38	; 0x26
 800d696:	f7ff fb07 	bl	800cca8 <__NVIC_SetPriority>
 800d69a:	e00b      	b.n	800d6b4 <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a09      	ldr	r2, [pc, #36]	; (800d6c8 <usart_Set_Priority+0x68>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d105      	bne.n	800d6b2 <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800d6a6:	78fb      	ldrb	r3, [r7, #3]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	2047      	movs	r0, #71	; 0x47
 800d6ac:	f7ff fafc 	bl	800cca8 <__NVIC_SetPriority>
 800d6b0:	e000      	b.n	800d6b4 <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800d6b2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800d6b4:	b662      	cpsie	i
}
 800d6b6:	bf00      	nop



	__enable_irq();

}
 800d6b8:	bf00      	nop
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	40011000 	.word	0x40011000
 800d6c4:	40004400 	.word	0x40004400
 800d6c8:	40011400 	.word	0x40011400

0800d6cc <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
//
//	ptrDMA_handler[1]->ptrDMAType = DMA1;
//	ptrDMA_handler[1]->ptrDMAStream = DMA1_Stream6;

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a89      	ldr	r2, [pc, #548]	; (800d900 <i2c_config+0x234>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d106      	bne.n	800d6ec <i2c_config+0x20>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 800d6de:	4b89      	ldr	r3, [pc, #548]	; (800d904 <i2c_config+0x238>)
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	4a88      	ldr	r2, [pc, #544]	; (800d904 <i2c_config+0x238>)
 800d6e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d6e8:	6413      	str	r3, [r2, #64]	; 0x40
 800d6ea:	e016      	b.n	800d71a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a85      	ldr	r2, [pc, #532]	; (800d908 <i2c_config+0x23c>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d106      	bne.n	800d704 <i2c_config+0x38>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 800d6f6:	4b83      	ldr	r3, [pc, #524]	; (800d904 <i2c_config+0x238>)
 800d6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fa:	4a82      	ldr	r2, [pc, #520]	; (800d904 <i2c_config+0x238>)
 800d6fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d700:	6413      	str	r3, [r2, #64]	; 0x40
 800d702:	e00a      	b.n	800d71a <i2c_config+0x4e>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a80      	ldr	r2, [pc, #512]	; (800d90c <i2c_config+0x240>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d105      	bne.n	800d71a <i2c_config+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 800d70e:	4b7d      	ldr	r3, [pc, #500]	; (800d904 <i2c_config+0x238>)
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	4a7c      	ldr	r2, [pc, #496]	; (800d904 <i2c_config+0x238>)
 800d714:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d718:	6413      	str	r3, [r2, #64]	; 0x40
	}



	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0201 	bic.w	r2, r2, #1
 800d728:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d72a:	e000      	b.n	800d72e <i2c_config+0x62>
		__NOP();
 800d72c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	f003 0302 	and.w	r3, r3, #2
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1f7      	bne.n	800d72c <i2c_config+0x60>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d74a:	601a      	str	r2, [r3, #0]

	__NOP();
 800d74c:	bf00      	nop

	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d75c:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800d76c:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	79db      	ldrb	r3, [r3, #7]
 800d772:	2b10      	cmp	r3, #16
 800d774:	d108      	bne.n	800d788 <i2c_config+0xbc>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	685a      	ldr	r2, [r3, #4]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f042 0210 	orr.w	r2, r2, #16
 800d784:	605a      	str	r2, [r3, #4]
 800d786:	e018      	b.n	800d7ba <i2c_config+0xee>

	}else if(ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_25_MHz_FOR_I2C){
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	79db      	ldrb	r3, [r3, #7]
 800d78c:	2b19      	cmp	r3, #25
 800d78e:	d108      	bne.n	800d7a2 <i2c_config+0xd6>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_25_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685a      	ldr	r2, [r3, #4]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f042 0219 	orr.w	r2, r2, #25
 800d79e:	605a      	str	r2, [r3, #4]
 800d7a0:	e00b      	b.n	800d7ba <i2c_config+0xee>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	79db      	ldrb	r3, [r3, #7]
 800d7a6:	2b32      	cmp	r3, #50	; 0x32
 800d7a8:	d107      	bne.n	800d7ba <i2c_config+0xee>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	685a      	ldr	r2, [r3, #4]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 800d7b8:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	795b      	ldrb	r3, [r3, #5]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d15c      	bne.n	800d88c <i2c_config+0x1c0>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	69da      	ldr	r2, [r3, #28]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7e0:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	79db      	ldrb	r3, [r3, #7]
 800d7e6:	2b32      	cmp	r3, #50	; 0x32
 800d7e8:	d03f      	beq.n	800d86a <i2c_config+0x19e>
 800d7ea:	2b32      	cmp	r3, #50	; 0x32
 800d7ec:	f300 80b2 	bgt.w	800d954 <i2c_config+0x288>
 800d7f0:	2b19      	cmp	r3, #25
 800d7f2:	d029      	beq.n	800d848 <i2c_config+0x17c>
 800d7f4:	2b19      	cmp	r3, #25
 800d7f6:	f300 80ad 	bgt.w	800d954 <i2c_config+0x288>
 800d7fa:	2b04      	cmp	r3, #4
 800d7fc:	d002      	beq.n	800d804 <i2c_config+0x138>
 800d7fe:	2b10      	cmp	r3, #16
 800d800:	d011      	beq.n	800d826 <i2c_config+0x15a>


				break;
			}default:{

				break;
 800d802:	e0a7      	b.n	800d954 <i2c_config+0x288>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	69da      	ldr	r2, [r3, #28]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f042 0214 	orr.w	r2, r2, #20
 800d812:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6a1a      	ldr	r2, [r3, #32]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f042 0205 	orr.w	r2, r2, #5
 800d822:	621a      	str	r2, [r3, #32]
				break;
 800d824:	e099      	b.n	800d95a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	69da      	ldr	r2, [r3, #28]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800d834:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	6a1a      	ldr	r2, [r3, #32]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f042 0211 	orr.w	r2, r2, #17
 800d844:	621a      	str	r2, [r3, #32]
				break;
 800d846:	e088      	b.n	800d95a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_25MHz << I2C_CCR_CCR_Pos);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	69da      	ldr	r2, [r3, #28]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 800d856:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_25MHz;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6a1a      	ldr	r2, [r3, #32]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f042 0215 	orr.w	r2, r2, #21
 800d866:	621a      	str	r2, [r3, #32]
				break;
 800d868:	e077      	b.n	800d95a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	69da      	ldr	r2, [r3, #28]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 800d878:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6a1a      	ldr	r2, [r3, #32]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 800d888:	621a      	str	r2, [r3, #32]
				break;
 800d88a:	e066      	b.n	800d95a <i2c_config+0x28e>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	69da      	ldr	r2, [r3, #28]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d89a:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	79db      	ldrb	r3, [r3, #7]
 800d8a0:	2b32      	cmp	r3, #50	; 0x32
 800d8a2:	d046      	beq.n	800d932 <i2c_config+0x266>
 800d8a4:	2b32      	cmp	r3, #50	; 0x32
 800d8a6:	dc57      	bgt.n	800d958 <i2c_config+0x28c>
 800d8a8:	2b19      	cmp	r3, #25
 800d8aa:	d031      	beq.n	800d910 <i2c_config+0x244>
 800d8ac:	2b19      	cmp	r3, #25
 800d8ae:	dc53      	bgt.n	800d958 <i2c_config+0x28c>
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d002      	beq.n	800d8ba <i2c_config+0x1ee>
 800d8b4:	2b10      	cmp	r3, #16
 800d8b6:	d011      	beq.n	800d8dc <i2c_config+0x210>


				break;
			}default:{

				break;
 800d8b8:	e04e      	b.n	800d958 <i2c_config+0x28c>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	69da      	ldr	r2, [r3, #28]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f042 0203 	orr.w	r2, r2, #3
 800d8c8:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6a1a      	ldr	r2, [r3, #32]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f042 0202 	orr.w	r2, r2, #2
 800d8d8:	621a      	str	r2, [r3, #32]
				break;
 800d8da:	e03e      	b.n	800d95a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	69da      	ldr	r2, [r3, #28]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f042 020d 	orr.w	r2, r2, #13
 800d8ea:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6a1a      	ldr	r2, [r3, #32]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f042 0206 	orr.w	r2, r2, #6
 800d8fa:	621a      	str	r2, [r3, #32]
				break;
 800d8fc:	e02d      	b.n	800d95a <i2c_config+0x28e>
 800d8fe:	bf00      	nop
 800d900:	40005400 	.word	0x40005400
 800d904:	40023800 	.word	0x40023800
 800d908:	40005800 	.word	0x40005800
 800d90c:	40005c00 	.word	0x40005c00
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_25MHz << I2C_CCR_CCR_Pos);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	69da      	ldr	r2, [r3, #28]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f042 0215 	orr.w	r2, r2, #21
 800d91e:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_25MHz;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6a1a      	ldr	r2, [r3, #32]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f042 0208 	orr.w	r2, r2, #8
 800d92e:	621a      	str	r2, [r3, #32]
				break;
 800d930:	e013      	b.n	800d95a <i2c_config+0x28e>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	69da      	ldr	r2, [r3, #28]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 800d940:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6a1a      	ldr	r2, [r3, #32]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f042 0210 	orr.w	r2, r2, #16
 800d950:	621a      	str	r2, [r3, #32]
				break;
 800d952:	e002      	b.n	800d95a <i2c_config+0x28e>
				break;
 800d954:	bf00      	nop
 800d956:	e002      	b.n	800d95e <i2c_config+0x292>
				break;
 800d958:	bf00      	nop

		}

	}

	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d95a:	e000      	b.n	800d95e <i2c_config+0x292>
		__NOP();
 800d95c:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	f003 0302 	and.w	r3, r3, #2
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1f7      	bne.n	800d95c <i2c_config+0x290>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f042 0201 	orr.w	r2, r2, #1
 800d97a:	601a      	str	r2, [r3, #0]


}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d99e:	601a      	str	r2, [r3, #0]
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	7a1b      	ldrb	r3, [r3, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d009      	beq.n	800d9d0 <i2c_startTransaction+0x24>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9ca:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d9cc:	e000      	b.n	800d9d0 <i2c_startTransaction+0x24>
		__NOP();
 800d9ce:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	f003 0302 	and.w	r3, r3, #2
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d1f7      	bne.n	800d9ce <i2c_startTransaction+0x22>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9ec:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800d9ee:	e000      	b.n	800d9f2 <i2c_startTransaction+0x46>
		__NOP();
 800d9f0:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0f7      	beq.n	800d9f0 <i2c_startTransaction+0x44>
	}
}
 800da00:	bf00      	nop
 800da02:	bf00      	nop
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]

	// Activamos el DMA request segun lo pedido por el usuario
	if (ptrHandlerI2C->I2C_Config.dma_Request){
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7a1b      	ldrb	r3, [r3, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d007      	beq.n	800da2e <i2c_reStartTransaction+0x20>
		// Si estamos aqui e sporque queremos usar la DMA para la transaccion efectiva de datos
		ptrHandlerI2C->ptrI2Cx->CR2 |= I2C_CR2_DMAEN;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da2c:	605a      	str	r2, [r3, #4]
	}else{
		// Si estamos aqui es porque no queremos usar un DMA request para la transaccion de datos
	}

	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da3c:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da3e:	e000      	b.n	800da42 <i2c_reStartTransaction+0x34>
		__NOP();
 800da40:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d0f7      	beq.n	800da40 <i2c_reStartTransaction+0x32>
	}
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr

0800da5e <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 800da5e:	b480      	push	{r7}
 800da60:	b083      	sub	sp, #12
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da74:	601a      	str	r2, [r3, #0]
}
 800da76:	bf00      	nop
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 800da82:	b480      	push	{r7}
 800da84:	b085      	sub	sp, #20
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	460b      	mov	r3, r1
 800da8c:	70fb      	strb	r3, [r7, #3]
 800da8e:	4613      	mov	r3, r2
 800da90:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 800da96:	78fb      	ldrb	r3, [r7, #3]
 800da98:	005a      	lsls	r2, r3, #1
 800da9a:	78bb      	ldrb	r3, [r7, #2]
 800da9c:	431a      	orrs	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800daa4:	e000      	b.n	800daa8 <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 800daa6:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	f003 0302 	and.w	r3, r3, #2
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d0f7      	beq.n	800daa6 <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	695b      	ldr	r3, [r3, #20]
 800dabc:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	73fb      	strb	r3, [r7, #15]

}
 800dac6:	bf00      	nop
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	460b      	mov	r3, r1
 800dadc:	70fb      	strb	r3, [r7, #3]

	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	78fa      	ldrb	r2, [r7, #3]
 800dae4:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800dae6:	e000      	b.n	800daea <i2c_sendMemoryAddress+0x18>
		__NOP();
 800dae8:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	695b      	ldr	r3, [r3, #20]
 800daf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d0f7      	beq.n	800dae8 <i2c_sendMemoryAddress+0x16>
	}
}
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	370c      	adds	r7, #12
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 800db06:	b480      	push	{r7}
 800db08:	b083      	sub	sp, #12
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	78fa      	ldrb	r2, [r7, #3]
 800db18:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800db1a:	e000      	b.n	800db1e <i2c_sendDataByte+0x18>
		__NOP();
 800db1c:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	f003 0304 	and.w	r3, r3, #4
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d0f7      	beq.n	800db1c <i2c_sendDataByte+0x16>
	}
}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr

0800db3a <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 800db3a:	b480      	push	{r7}
 800db3c:	b083      	sub	sp, #12
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800db42:	e000      	b.n	800db46 <i2c_readDataByte+0xc>
		__NOP();
 800db44:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0f7      	beq.n	800db44 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	691b      	ldr	r3, [r3, #16]
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	799b      	ldrb	r3, [r3, #6]
}
 800db64:	4618      	mov	r0, r3
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <__errno>:
 800db70:	4b01      	ldr	r3, [pc, #4]	; (800db78 <__errno+0x8>)
 800db72:	6818      	ldr	r0, [r3, #0]
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	20000040 	.word	0x20000040

0800db7c <__libc_init_array>:
 800db7c:	b570      	push	{r4, r5, r6, lr}
 800db7e:	4d0d      	ldr	r5, [pc, #52]	; (800dbb4 <__libc_init_array+0x38>)
 800db80:	4c0d      	ldr	r4, [pc, #52]	; (800dbb8 <__libc_init_array+0x3c>)
 800db82:	1b64      	subs	r4, r4, r5
 800db84:	10a4      	asrs	r4, r4, #2
 800db86:	2600      	movs	r6, #0
 800db88:	42a6      	cmp	r6, r4
 800db8a:	d109      	bne.n	800dba0 <__libc_init_array+0x24>
 800db8c:	4d0b      	ldr	r5, [pc, #44]	; (800dbbc <__libc_init_array+0x40>)
 800db8e:	4c0c      	ldr	r4, [pc, #48]	; (800dbc0 <__libc_init_array+0x44>)
 800db90:	f005 fbc2 	bl	8013318 <_init>
 800db94:	1b64      	subs	r4, r4, r5
 800db96:	10a4      	asrs	r4, r4, #2
 800db98:	2600      	movs	r6, #0
 800db9a:	42a6      	cmp	r6, r4
 800db9c:	d105      	bne.n	800dbaa <__libc_init_array+0x2e>
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba4:	4798      	blx	r3
 800dba6:	3601      	adds	r6, #1
 800dba8:	e7ee      	b.n	800db88 <__libc_init_array+0xc>
 800dbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbae:	4798      	blx	r3
 800dbb0:	3601      	adds	r6, #1
 800dbb2:	e7f2      	b.n	800db9a <__libc_init_array+0x1e>
 800dbb4:	08014030 	.word	0x08014030
 800dbb8:	08014030 	.word	0x08014030
 800dbbc:	08014030 	.word	0x08014030
 800dbc0:	08014034 	.word	0x08014034

0800dbc4 <malloc>:
 800dbc4:	4b02      	ldr	r3, [pc, #8]	; (800dbd0 <malloc+0xc>)
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	6818      	ldr	r0, [r3, #0]
 800dbca:	f000 b885 	b.w	800dcd8 <_malloc_r>
 800dbce:	bf00      	nop
 800dbd0:	20000040 	.word	0x20000040

0800dbd4 <memcpy>:
 800dbd4:	440a      	add	r2, r1
 800dbd6:	4291      	cmp	r1, r2
 800dbd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbdc:	d100      	bne.n	800dbe0 <memcpy+0xc>
 800dbde:	4770      	bx	lr
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbea:	4291      	cmp	r1, r2
 800dbec:	d1f9      	bne.n	800dbe2 <memcpy+0xe>
 800dbee:	bd10      	pop	{r4, pc}

0800dbf0 <memset>:
 800dbf0:	4402      	add	r2, r0
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d100      	bne.n	800dbfa <memset+0xa>
 800dbf8:	4770      	bx	lr
 800dbfa:	f803 1b01 	strb.w	r1, [r3], #1
 800dbfe:	e7f9      	b.n	800dbf4 <memset+0x4>

0800dc00 <_free_r>:
 800dc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d044      	beq.n	800dc90 <_free_r+0x90>
 800dc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc0a:	9001      	str	r0, [sp, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f1a1 0404 	sub.w	r4, r1, #4
 800dc12:	bfb8      	it	lt
 800dc14:	18e4      	addlt	r4, r4, r3
 800dc16:	f001 fbed 	bl	800f3f4 <__malloc_lock>
 800dc1a:	4a1e      	ldr	r2, [pc, #120]	; (800dc94 <_free_r+0x94>)
 800dc1c:	9801      	ldr	r0, [sp, #4]
 800dc1e:	6813      	ldr	r3, [r2, #0]
 800dc20:	b933      	cbnz	r3, 800dc30 <_free_r+0x30>
 800dc22:	6063      	str	r3, [r4, #4]
 800dc24:	6014      	str	r4, [r2, #0]
 800dc26:	b003      	add	sp, #12
 800dc28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc2c:	f001 bbe8 	b.w	800f400 <__malloc_unlock>
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	d908      	bls.n	800dc46 <_free_r+0x46>
 800dc34:	6825      	ldr	r5, [r4, #0]
 800dc36:	1961      	adds	r1, r4, r5
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	bf01      	itttt	eq
 800dc3c:	6819      	ldreq	r1, [r3, #0]
 800dc3e:	685b      	ldreq	r3, [r3, #4]
 800dc40:	1949      	addeq	r1, r1, r5
 800dc42:	6021      	streq	r1, [r4, #0]
 800dc44:	e7ed      	b.n	800dc22 <_free_r+0x22>
 800dc46:	461a      	mov	r2, r3
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	b10b      	cbz	r3, 800dc50 <_free_r+0x50>
 800dc4c:	42a3      	cmp	r3, r4
 800dc4e:	d9fa      	bls.n	800dc46 <_free_r+0x46>
 800dc50:	6811      	ldr	r1, [r2, #0]
 800dc52:	1855      	adds	r5, r2, r1
 800dc54:	42a5      	cmp	r5, r4
 800dc56:	d10b      	bne.n	800dc70 <_free_r+0x70>
 800dc58:	6824      	ldr	r4, [r4, #0]
 800dc5a:	4421      	add	r1, r4
 800dc5c:	1854      	adds	r4, r2, r1
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	6011      	str	r1, [r2, #0]
 800dc62:	d1e0      	bne.n	800dc26 <_free_r+0x26>
 800dc64:	681c      	ldr	r4, [r3, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	6053      	str	r3, [r2, #4]
 800dc6a:	4421      	add	r1, r4
 800dc6c:	6011      	str	r1, [r2, #0]
 800dc6e:	e7da      	b.n	800dc26 <_free_r+0x26>
 800dc70:	d902      	bls.n	800dc78 <_free_r+0x78>
 800dc72:	230c      	movs	r3, #12
 800dc74:	6003      	str	r3, [r0, #0]
 800dc76:	e7d6      	b.n	800dc26 <_free_r+0x26>
 800dc78:	6825      	ldr	r5, [r4, #0]
 800dc7a:	1961      	adds	r1, r4, r5
 800dc7c:	428b      	cmp	r3, r1
 800dc7e:	bf04      	itt	eq
 800dc80:	6819      	ldreq	r1, [r3, #0]
 800dc82:	685b      	ldreq	r3, [r3, #4]
 800dc84:	6063      	str	r3, [r4, #4]
 800dc86:	bf04      	itt	eq
 800dc88:	1949      	addeq	r1, r1, r5
 800dc8a:	6021      	streq	r1, [r4, #0]
 800dc8c:	6054      	str	r4, [r2, #4]
 800dc8e:	e7ca      	b.n	800dc26 <_free_r+0x26>
 800dc90:	b003      	add	sp, #12
 800dc92:	bd30      	pop	{r4, r5, pc}
 800dc94:	2000dc3c 	.word	0x2000dc3c

0800dc98 <sbrk_aligned>:
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	4e0e      	ldr	r6, [pc, #56]	; (800dcd4 <sbrk_aligned+0x3c>)
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	6831      	ldr	r1, [r6, #0]
 800dca0:	4605      	mov	r5, r0
 800dca2:	b911      	cbnz	r1, 800dcaa <sbrk_aligned+0x12>
 800dca4:	f000 fcf6 	bl	800e694 <_sbrk_r>
 800dca8:	6030      	str	r0, [r6, #0]
 800dcaa:	4621      	mov	r1, r4
 800dcac:	4628      	mov	r0, r5
 800dcae:	f000 fcf1 	bl	800e694 <_sbrk_r>
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	d00a      	beq.n	800dccc <sbrk_aligned+0x34>
 800dcb6:	1cc4      	adds	r4, r0, #3
 800dcb8:	f024 0403 	bic.w	r4, r4, #3
 800dcbc:	42a0      	cmp	r0, r4
 800dcbe:	d007      	beq.n	800dcd0 <sbrk_aligned+0x38>
 800dcc0:	1a21      	subs	r1, r4, r0
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f000 fce6 	bl	800e694 <_sbrk_r>
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d101      	bne.n	800dcd0 <sbrk_aligned+0x38>
 800dccc:	f04f 34ff 	mov.w	r4, #4294967295
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	bd70      	pop	{r4, r5, r6, pc}
 800dcd4:	2000dc40 	.word	0x2000dc40

0800dcd8 <_malloc_r>:
 800dcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcdc:	1ccd      	adds	r5, r1, #3
 800dcde:	f025 0503 	bic.w	r5, r5, #3
 800dce2:	3508      	adds	r5, #8
 800dce4:	2d0c      	cmp	r5, #12
 800dce6:	bf38      	it	cc
 800dce8:	250c      	movcc	r5, #12
 800dcea:	2d00      	cmp	r5, #0
 800dcec:	4607      	mov	r7, r0
 800dcee:	db01      	blt.n	800dcf4 <_malloc_r+0x1c>
 800dcf0:	42a9      	cmp	r1, r5
 800dcf2:	d905      	bls.n	800dd00 <_malloc_r+0x28>
 800dcf4:	230c      	movs	r3, #12
 800dcf6:	603b      	str	r3, [r7, #0]
 800dcf8:	2600      	movs	r6, #0
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd00:	4e2e      	ldr	r6, [pc, #184]	; (800ddbc <_malloc_r+0xe4>)
 800dd02:	f001 fb77 	bl	800f3f4 <__malloc_lock>
 800dd06:	6833      	ldr	r3, [r6, #0]
 800dd08:	461c      	mov	r4, r3
 800dd0a:	bb34      	cbnz	r4, 800dd5a <_malloc_r+0x82>
 800dd0c:	4629      	mov	r1, r5
 800dd0e:	4638      	mov	r0, r7
 800dd10:	f7ff ffc2 	bl	800dc98 <sbrk_aligned>
 800dd14:	1c43      	adds	r3, r0, #1
 800dd16:	4604      	mov	r4, r0
 800dd18:	d14d      	bne.n	800ddb6 <_malloc_r+0xde>
 800dd1a:	6834      	ldr	r4, [r6, #0]
 800dd1c:	4626      	mov	r6, r4
 800dd1e:	2e00      	cmp	r6, #0
 800dd20:	d140      	bne.n	800dda4 <_malloc_r+0xcc>
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	4631      	mov	r1, r6
 800dd26:	4638      	mov	r0, r7
 800dd28:	eb04 0803 	add.w	r8, r4, r3
 800dd2c:	f000 fcb2 	bl	800e694 <_sbrk_r>
 800dd30:	4580      	cmp	r8, r0
 800dd32:	d13a      	bne.n	800ddaa <_malloc_r+0xd2>
 800dd34:	6821      	ldr	r1, [r4, #0]
 800dd36:	3503      	adds	r5, #3
 800dd38:	1a6d      	subs	r5, r5, r1
 800dd3a:	f025 0503 	bic.w	r5, r5, #3
 800dd3e:	3508      	adds	r5, #8
 800dd40:	2d0c      	cmp	r5, #12
 800dd42:	bf38      	it	cc
 800dd44:	250c      	movcc	r5, #12
 800dd46:	4629      	mov	r1, r5
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f7ff ffa5 	bl	800dc98 <sbrk_aligned>
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d02b      	beq.n	800ddaa <_malloc_r+0xd2>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	442b      	add	r3, r5
 800dd56:	6023      	str	r3, [r4, #0]
 800dd58:	e00e      	b.n	800dd78 <_malloc_r+0xa0>
 800dd5a:	6822      	ldr	r2, [r4, #0]
 800dd5c:	1b52      	subs	r2, r2, r5
 800dd5e:	d41e      	bmi.n	800dd9e <_malloc_r+0xc6>
 800dd60:	2a0b      	cmp	r2, #11
 800dd62:	d916      	bls.n	800dd92 <_malloc_r+0xba>
 800dd64:	1961      	adds	r1, r4, r5
 800dd66:	42a3      	cmp	r3, r4
 800dd68:	6025      	str	r5, [r4, #0]
 800dd6a:	bf18      	it	ne
 800dd6c:	6059      	strne	r1, [r3, #4]
 800dd6e:	6863      	ldr	r3, [r4, #4]
 800dd70:	bf08      	it	eq
 800dd72:	6031      	streq	r1, [r6, #0]
 800dd74:	5162      	str	r2, [r4, r5]
 800dd76:	604b      	str	r3, [r1, #4]
 800dd78:	4638      	mov	r0, r7
 800dd7a:	f104 060b 	add.w	r6, r4, #11
 800dd7e:	f001 fb3f 	bl	800f400 <__malloc_unlock>
 800dd82:	f026 0607 	bic.w	r6, r6, #7
 800dd86:	1d23      	adds	r3, r4, #4
 800dd88:	1af2      	subs	r2, r6, r3
 800dd8a:	d0b6      	beq.n	800dcfa <_malloc_r+0x22>
 800dd8c:	1b9b      	subs	r3, r3, r6
 800dd8e:	50a3      	str	r3, [r4, r2]
 800dd90:	e7b3      	b.n	800dcfa <_malloc_r+0x22>
 800dd92:	6862      	ldr	r2, [r4, #4]
 800dd94:	42a3      	cmp	r3, r4
 800dd96:	bf0c      	ite	eq
 800dd98:	6032      	streq	r2, [r6, #0]
 800dd9a:	605a      	strne	r2, [r3, #4]
 800dd9c:	e7ec      	b.n	800dd78 <_malloc_r+0xa0>
 800dd9e:	4623      	mov	r3, r4
 800dda0:	6864      	ldr	r4, [r4, #4]
 800dda2:	e7b2      	b.n	800dd0a <_malloc_r+0x32>
 800dda4:	4634      	mov	r4, r6
 800dda6:	6876      	ldr	r6, [r6, #4]
 800dda8:	e7b9      	b.n	800dd1e <_malloc_r+0x46>
 800ddaa:	230c      	movs	r3, #12
 800ddac:	603b      	str	r3, [r7, #0]
 800ddae:	4638      	mov	r0, r7
 800ddb0:	f001 fb26 	bl	800f400 <__malloc_unlock>
 800ddb4:	e7a1      	b.n	800dcfa <_malloc_r+0x22>
 800ddb6:	6025      	str	r5, [r4, #0]
 800ddb8:	e7de      	b.n	800dd78 <_malloc_r+0xa0>
 800ddba:	bf00      	nop
 800ddbc:	2000dc3c 	.word	0x2000dc3c

0800ddc0 <__cvt>:
 800ddc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc4:	ec55 4b10 	vmov	r4, r5, d0
 800ddc8:	2d00      	cmp	r5, #0
 800ddca:	460e      	mov	r6, r1
 800ddcc:	4619      	mov	r1, r3
 800ddce:	462b      	mov	r3, r5
 800ddd0:	bfbb      	ittet	lt
 800ddd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ddd6:	461d      	movlt	r5, r3
 800ddd8:	2300      	movge	r3, #0
 800ddda:	232d      	movlt	r3, #45	; 0x2d
 800dddc:	700b      	strb	r3, [r1, #0]
 800ddde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dde0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dde4:	4691      	mov	r9, r2
 800dde6:	f023 0820 	bic.w	r8, r3, #32
 800ddea:	bfbc      	itt	lt
 800ddec:	4622      	movlt	r2, r4
 800ddee:	4614      	movlt	r4, r2
 800ddf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ddf4:	d005      	beq.n	800de02 <__cvt+0x42>
 800ddf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ddfa:	d100      	bne.n	800ddfe <__cvt+0x3e>
 800ddfc:	3601      	adds	r6, #1
 800ddfe:	2102      	movs	r1, #2
 800de00:	e000      	b.n	800de04 <__cvt+0x44>
 800de02:	2103      	movs	r1, #3
 800de04:	ab03      	add	r3, sp, #12
 800de06:	9301      	str	r3, [sp, #4]
 800de08:	ab02      	add	r3, sp, #8
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	ec45 4b10 	vmov	d0, r4, r5
 800de10:	4653      	mov	r3, sl
 800de12:	4632      	mov	r2, r6
 800de14:	f000 fcfc 	bl	800e810 <_dtoa_r>
 800de18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800de1c:	4607      	mov	r7, r0
 800de1e:	d102      	bne.n	800de26 <__cvt+0x66>
 800de20:	f019 0f01 	tst.w	r9, #1
 800de24:	d022      	beq.n	800de6c <__cvt+0xac>
 800de26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de2a:	eb07 0906 	add.w	r9, r7, r6
 800de2e:	d110      	bne.n	800de52 <__cvt+0x92>
 800de30:	783b      	ldrb	r3, [r7, #0]
 800de32:	2b30      	cmp	r3, #48	; 0x30
 800de34:	d10a      	bne.n	800de4c <__cvt+0x8c>
 800de36:	2200      	movs	r2, #0
 800de38:	2300      	movs	r3, #0
 800de3a:	4620      	mov	r0, r4
 800de3c:	4629      	mov	r1, r5
 800de3e:	f7f2 fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 800de42:	b918      	cbnz	r0, 800de4c <__cvt+0x8c>
 800de44:	f1c6 0601 	rsb	r6, r6, #1
 800de48:	f8ca 6000 	str.w	r6, [sl]
 800de4c:	f8da 3000 	ldr.w	r3, [sl]
 800de50:	4499      	add	r9, r3
 800de52:	2200      	movs	r2, #0
 800de54:	2300      	movs	r3, #0
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fe4d 	bl	8000af8 <__aeabi_dcmpeq>
 800de5e:	b108      	cbz	r0, 800de64 <__cvt+0xa4>
 800de60:	f8cd 900c 	str.w	r9, [sp, #12]
 800de64:	2230      	movs	r2, #48	; 0x30
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	454b      	cmp	r3, r9
 800de6a:	d307      	bcc.n	800de7c <__cvt+0xbc>
 800de6c:	9b03      	ldr	r3, [sp, #12]
 800de6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de70:	1bdb      	subs	r3, r3, r7
 800de72:	4638      	mov	r0, r7
 800de74:	6013      	str	r3, [r2, #0]
 800de76:	b004      	add	sp, #16
 800de78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7c:	1c59      	adds	r1, r3, #1
 800de7e:	9103      	str	r1, [sp, #12]
 800de80:	701a      	strb	r2, [r3, #0]
 800de82:	e7f0      	b.n	800de66 <__cvt+0xa6>

0800de84 <__exponent>:
 800de84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de86:	4603      	mov	r3, r0
 800de88:	2900      	cmp	r1, #0
 800de8a:	bfb8      	it	lt
 800de8c:	4249      	neglt	r1, r1
 800de8e:	f803 2b02 	strb.w	r2, [r3], #2
 800de92:	bfb4      	ite	lt
 800de94:	222d      	movlt	r2, #45	; 0x2d
 800de96:	222b      	movge	r2, #43	; 0x2b
 800de98:	2909      	cmp	r1, #9
 800de9a:	7042      	strb	r2, [r0, #1]
 800de9c:	dd2a      	ble.n	800def4 <__exponent+0x70>
 800de9e:	f10d 0407 	add.w	r4, sp, #7
 800dea2:	46a4      	mov	ip, r4
 800dea4:	270a      	movs	r7, #10
 800dea6:	46a6      	mov	lr, r4
 800dea8:	460a      	mov	r2, r1
 800deaa:	fb91 f6f7 	sdiv	r6, r1, r7
 800deae:	fb07 1516 	mls	r5, r7, r6, r1
 800deb2:	3530      	adds	r5, #48	; 0x30
 800deb4:	2a63      	cmp	r2, #99	; 0x63
 800deb6:	f104 34ff 	add.w	r4, r4, #4294967295
 800deba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800debe:	4631      	mov	r1, r6
 800dec0:	dcf1      	bgt.n	800dea6 <__exponent+0x22>
 800dec2:	3130      	adds	r1, #48	; 0x30
 800dec4:	f1ae 0502 	sub.w	r5, lr, #2
 800dec8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800decc:	1c44      	adds	r4, r0, #1
 800dece:	4629      	mov	r1, r5
 800ded0:	4561      	cmp	r1, ip
 800ded2:	d30a      	bcc.n	800deea <__exponent+0x66>
 800ded4:	f10d 0209 	add.w	r2, sp, #9
 800ded8:	eba2 020e 	sub.w	r2, r2, lr
 800dedc:	4565      	cmp	r5, ip
 800dede:	bf88      	it	hi
 800dee0:	2200      	movhi	r2, #0
 800dee2:	4413      	add	r3, r2
 800dee4:	1a18      	subs	r0, r3, r0
 800dee6:	b003      	add	sp, #12
 800dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800deee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800def2:	e7ed      	b.n	800ded0 <__exponent+0x4c>
 800def4:	2330      	movs	r3, #48	; 0x30
 800def6:	3130      	adds	r1, #48	; 0x30
 800def8:	7083      	strb	r3, [r0, #2]
 800defa:	70c1      	strb	r1, [r0, #3]
 800defc:	1d03      	adds	r3, r0, #4
 800defe:	e7f1      	b.n	800dee4 <__exponent+0x60>

0800df00 <_printf_float>:
 800df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df04:	ed2d 8b02 	vpush	{d8}
 800df08:	b08d      	sub	sp, #52	; 0x34
 800df0a:	460c      	mov	r4, r1
 800df0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800df10:	4616      	mov	r6, r2
 800df12:	461f      	mov	r7, r3
 800df14:	4605      	mov	r5, r0
 800df16:	f001 fa69 	bl	800f3ec <_localeconv_r>
 800df1a:	f8d0 a000 	ldr.w	sl, [r0]
 800df1e:	4650      	mov	r0, sl
 800df20:	f7f2 f968 	bl	80001f4 <strlen>
 800df24:	2300      	movs	r3, #0
 800df26:	930a      	str	r3, [sp, #40]	; 0x28
 800df28:	6823      	ldr	r3, [r4, #0]
 800df2a:	9305      	str	r3, [sp, #20]
 800df2c:	f8d8 3000 	ldr.w	r3, [r8]
 800df30:	f894 b018 	ldrb.w	fp, [r4, #24]
 800df34:	3307      	adds	r3, #7
 800df36:	f023 0307 	bic.w	r3, r3, #7
 800df3a:	f103 0208 	add.w	r2, r3, #8
 800df3e:	f8c8 2000 	str.w	r2, [r8]
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800df4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800df4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df52:	9307      	str	r3, [sp, #28]
 800df54:	f8cd 8018 	str.w	r8, [sp, #24]
 800df58:	ee08 0a10 	vmov	s16, r0
 800df5c:	4b9f      	ldr	r3, [pc, #636]	; (800e1dc <_printf_float+0x2dc>)
 800df5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df62:	f04f 32ff 	mov.w	r2, #4294967295
 800df66:	f7f2 fdf9 	bl	8000b5c <__aeabi_dcmpun>
 800df6a:	bb88      	cbnz	r0, 800dfd0 <_printf_float+0xd0>
 800df6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df70:	4b9a      	ldr	r3, [pc, #616]	; (800e1dc <_printf_float+0x2dc>)
 800df72:	f04f 32ff 	mov.w	r2, #4294967295
 800df76:	f7f2 fdd3 	bl	8000b20 <__aeabi_dcmple>
 800df7a:	bb48      	cbnz	r0, 800dfd0 <_printf_float+0xd0>
 800df7c:	2200      	movs	r2, #0
 800df7e:	2300      	movs	r3, #0
 800df80:	4640      	mov	r0, r8
 800df82:	4649      	mov	r1, r9
 800df84:	f7f2 fdc2 	bl	8000b0c <__aeabi_dcmplt>
 800df88:	b110      	cbz	r0, 800df90 <_printf_float+0x90>
 800df8a:	232d      	movs	r3, #45	; 0x2d
 800df8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df90:	4b93      	ldr	r3, [pc, #588]	; (800e1e0 <_printf_float+0x2e0>)
 800df92:	4894      	ldr	r0, [pc, #592]	; (800e1e4 <_printf_float+0x2e4>)
 800df94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800df98:	bf94      	ite	ls
 800df9a:	4698      	movls	r8, r3
 800df9c:	4680      	movhi	r8, r0
 800df9e:	2303      	movs	r3, #3
 800dfa0:	6123      	str	r3, [r4, #16]
 800dfa2:	9b05      	ldr	r3, [sp, #20]
 800dfa4:	f023 0204 	bic.w	r2, r3, #4
 800dfa8:	6022      	str	r2, [r4, #0]
 800dfaa:	f04f 0900 	mov.w	r9, #0
 800dfae:	9700      	str	r7, [sp, #0]
 800dfb0:	4633      	mov	r3, r6
 800dfb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	f000 f9d8 	bl	800e36c <_printf_common>
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	f040 8090 	bne.w	800e0e2 <_printf_float+0x1e2>
 800dfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc6:	b00d      	add	sp, #52	; 0x34
 800dfc8:	ecbd 8b02 	vpop	{d8}
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd0:	4642      	mov	r2, r8
 800dfd2:	464b      	mov	r3, r9
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	f7f2 fdc0 	bl	8000b5c <__aeabi_dcmpun>
 800dfdc:	b140      	cbz	r0, 800dff0 <_printf_float+0xf0>
 800dfde:	464b      	mov	r3, r9
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	bfbc      	itt	lt
 800dfe4:	232d      	movlt	r3, #45	; 0x2d
 800dfe6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dfea:	487f      	ldr	r0, [pc, #508]	; (800e1e8 <_printf_float+0x2e8>)
 800dfec:	4b7f      	ldr	r3, [pc, #508]	; (800e1ec <_printf_float+0x2ec>)
 800dfee:	e7d1      	b.n	800df94 <_printf_float+0x94>
 800dff0:	6863      	ldr	r3, [r4, #4]
 800dff2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dff6:	9206      	str	r2, [sp, #24]
 800dff8:	1c5a      	adds	r2, r3, #1
 800dffa:	d13f      	bne.n	800e07c <_printf_float+0x17c>
 800dffc:	2306      	movs	r3, #6
 800dffe:	6063      	str	r3, [r4, #4]
 800e000:	9b05      	ldr	r3, [sp, #20]
 800e002:	6861      	ldr	r1, [r4, #4]
 800e004:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e008:	2300      	movs	r3, #0
 800e00a:	9303      	str	r3, [sp, #12]
 800e00c:	ab0a      	add	r3, sp, #40	; 0x28
 800e00e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e012:	ab09      	add	r3, sp, #36	; 0x24
 800e014:	ec49 8b10 	vmov	d0, r8, r9
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	6022      	str	r2, [r4, #0]
 800e01c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e020:	4628      	mov	r0, r5
 800e022:	f7ff fecd 	bl	800ddc0 <__cvt>
 800e026:	9b06      	ldr	r3, [sp, #24]
 800e028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e02a:	2b47      	cmp	r3, #71	; 0x47
 800e02c:	4680      	mov	r8, r0
 800e02e:	d108      	bne.n	800e042 <_printf_float+0x142>
 800e030:	1cc8      	adds	r0, r1, #3
 800e032:	db02      	blt.n	800e03a <_printf_float+0x13a>
 800e034:	6863      	ldr	r3, [r4, #4]
 800e036:	4299      	cmp	r1, r3
 800e038:	dd41      	ble.n	800e0be <_printf_float+0x1be>
 800e03a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e03e:	fa5f fb8b 	uxtb.w	fp, fp
 800e042:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e046:	d820      	bhi.n	800e08a <_printf_float+0x18a>
 800e048:	3901      	subs	r1, #1
 800e04a:	465a      	mov	r2, fp
 800e04c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e050:	9109      	str	r1, [sp, #36]	; 0x24
 800e052:	f7ff ff17 	bl	800de84 <__exponent>
 800e056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e058:	1813      	adds	r3, r2, r0
 800e05a:	2a01      	cmp	r2, #1
 800e05c:	4681      	mov	r9, r0
 800e05e:	6123      	str	r3, [r4, #16]
 800e060:	dc02      	bgt.n	800e068 <_printf_float+0x168>
 800e062:	6822      	ldr	r2, [r4, #0]
 800e064:	07d2      	lsls	r2, r2, #31
 800e066:	d501      	bpl.n	800e06c <_printf_float+0x16c>
 800e068:	3301      	adds	r3, #1
 800e06a:	6123      	str	r3, [r4, #16]
 800e06c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e070:	2b00      	cmp	r3, #0
 800e072:	d09c      	beq.n	800dfae <_printf_float+0xae>
 800e074:	232d      	movs	r3, #45	; 0x2d
 800e076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e07a:	e798      	b.n	800dfae <_printf_float+0xae>
 800e07c:	9a06      	ldr	r2, [sp, #24]
 800e07e:	2a47      	cmp	r2, #71	; 0x47
 800e080:	d1be      	bne.n	800e000 <_printf_float+0x100>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1bc      	bne.n	800e000 <_printf_float+0x100>
 800e086:	2301      	movs	r3, #1
 800e088:	e7b9      	b.n	800dffe <_printf_float+0xfe>
 800e08a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e08e:	d118      	bne.n	800e0c2 <_printf_float+0x1c2>
 800e090:	2900      	cmp	r1, #0
 800e092:	6863      	ldr	r3, [r4, #4]
 800e094:	dd0b      	ble.n	800e0ae <_printf_float+0x1ae>
 800e096:	6121      	str	r1, [r4, #16]
 800e098:	b913      	cbnz	r3, 800e0a0 <_printf_float+0x1a0>
 800e09a:	6822      	ldr	r2, [r4, #0]
 800e09c:	07d0      	lsls	r0, r2, #31
 800e09e:	d502      	bpl.n	800e0a6 <_printf_float+0x1a6>
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	440b      	add	r3, r1
 800e0a4:	6123      	str	r3, [r4, #16]
 800e0a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e0a8:	f04f 0900 	mov.w	r9, #0
 800e0ac:	e7de      	b.n	800e06c <_printf_float+0x16c>
 800e0ae:	b913      	cbnz	r3, 800e0b6 <_printf_float+0x1b6>
 800e0b0:	6822      	ldr	r2, [r4, #0]
 800e0b2:	07d2      	lsls	r2, r2, #31
 800e0b4:	d501      	bpl.n	800e0ba <_printf_float+0x1ba>
 800e0b6:	3302      	adds	r3, #2
 800e0b8:	e7f4      	b.n	800e0a4 <_printf_float+0x1a4>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e7f2      	b.n	800e0a4 <_printf_float+0x1a4>
 800e0be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c4:	4299      	cmp	r1, r3
 800e0c6:	db05      	blt.n	800e0d4 <_printf_float+0x1d4>
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	6121      	str	r1, [r4, #16]
 800e0cc:	07d8      	lsls	r0, r3, #31
 800e0ce:	d5ea      	bpl.n	800e0a6 <_printf_float+0x1a6>
 800e0d0:	1c4b      	adds	r3, r1, #1
 800e0d2:	e7e7      	b.n	800e0a4 <_printf_float+0x1a4>
 800e0d4:	2900      	cmp	r1, #0
 800e0d6:	bfd4      	ite	le
 800e0d8:	f1c1 0202 	rsble	r2, r1, #2
 800e0dc:	2201      	movgt	r2, #1
 800e0de:	4413      	add	r3, r2
 800e0e0:	e7e0      	b.n	800e0a4 <_printf_float+0x1a4>
 800e0e2:	6823      	ldr	r3, [r4, #0]
 800e0e4:	055a      	lsls	r2, r3, #21
 800e0e6:	d407      	bmi.n	800e0f8 <_printf_float+0x1f8>
 800e0e8:	6923      	ldr	r3, [r4, #16]
 800e0ea:	4642      	mov	r2, r8
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	47b8      	blx	r7
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	d12c      	bne.n	800e150 <_printf_float+0x250>
 800e0f6:	e764      	b.n	800dfc2 <_printf_float+0xc2>
 800e0f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0fc:	f240 80e0 	bls.w	800e2c0 <_printf_float+0x3c0>
 800e100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e104:	2200      	movs	r2, #0
 800e106:	2300      	movs	r3, #0
 800e108:	f7f2 fcf6 	bl	8000af8 <__aeabi_dcmpeq>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d034      	beq.n	800e17a <_printf_float+0x27a>
 800e110:	4a37      	ldr	r2, [pc, #220]	; (800e1f0 <_printf_float+0x2f0>)
 800e112:	2301      	movs	r3, #1
 800e114:	4631      	mov	r1, r6
 800e116:	4628      	mov	r0, r5
 800e118:	47b8      	blx	r7
 800e11a:	3001      	adds	r0, #1
 800e11c:	f43f af51 	beq.w	800dfc2 <_printf_float+0xc2>
 800e120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e124:	429a      	cmp	r2, r3
 800e126:	db02      	blt.n	800e12e <_printf_float+0x22e>
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	07d8      	lsls	r0, r3, #31
 800e12c:	d510      	bpl.n	800e150 <_printf_float+0x250>
 800e12e:	ee18 3a10 	vmov	r3, s16
 800e132:	4652      	mov	r2, sl
 800e134:	4631      	mov	r1, r6
 800e136:	4628      	mov	r0, r5
 800e138:	47b8      	blx	r7
 800e13a:	3001      	adds	r0, #1
 800e13c:	f43f af41 	beq.w	800dfc2 <_printf_float+0xc2>
 800e140:	f04f 0800 	mov.w	r8, #0
 800e144:	f104 091a 	add.w	r9, r4, #26
 800e148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e14a:	3b01      	subs	r3, #1
 800e14c:	4543      	cmp	r3, r8
 800e14e:	dc09      	bgt.n	800e164 <_printf_float+0x264>
 800e150:	6823      	ldr	r3, [r4, #0]
 800e152:	079b      	lsls	r3, r3, #30
 800e154:	f100 8105 	bmi.w	800e362 <_printf_float+0x462>
 800e158:	68e0      	ldr	r0, [r4, #12]
 800e15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e15c:	4298      	cmp	r0, r3
 800e15e:	bfb8      	it	lt
 800e160:	4618      	movlt	r0, r3
 800e162:	e730      	b.n	800dfc6 <_printf_float+0xc6>
 800e164:	2301      	movs	r3, #1
 800e166:	464a      	mov	r2, r9
 800e168:	4631      	mov	r1, r6
 800e16a:	4628      	mov	r0, r5
 800e16c:	47b8      	blx	r7
 800e16e:	3001      	adds	r0, #1
 800e170:	f43f af27 	beq.w	800dfc2 <_printf_float+0xc2>
 800e174:	f108 0801 	add.w	r8, r8, #1
 800e178:	e7e6      	b.n	800e148 <_printf_float+0x248>
 800e17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	dc39      	bgt.n	800e1f4 <_printf_float+0x2f4>
 800e180:	4a1b      	ldr	r2, [pc, #108]	; (800e1f0 <_printf_float+0x2f0>)
 800e182:	2301      	movs	r3, #1
 800e184:	4631      	mov	r1, r6
 800e186:	4628      	mov	r0, r5
 800e188:	47b8      	blx	r7
 800e18a:	3001      	adds	r0, #1
 800e18c:	f43f af19 	beq.w	800dfc2 <_printf_float+0xc2>
 800e190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e194:	4313      	orrs	r3, r2
 800e196:	d102      	bne.n	800e19e <_printf_float+0x29e>
 800e198:	6823      	ldr	r3, [r4, #0]
 800e19a:	07d9      	lsls	r1, r3, #31
 800e19c:	d5d8      	bpl.n	800e150 <_printf_float+0x250>
 800e19e:	ee18 3a10 	vmov	r3, s16
 800e1a2:	4652      	mov	r2, sl
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	47b8      	blx	r7
 800e1aa:	3001      	adds	r0, #1
 800e1ac:	f43f af09 	beq.w	800dfc2 <_printf_float+0xc2>
 800e1b0:	f04f 0900 	mov.w	r9, #0
 800e1b4:	f104 0a1a 	add.w	sl, r4, #26
 800e1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ba:	425b      	negs	r3, r3
 800e1bc:	454b      	cmp	r3, r9
 800e1be:	dc01      	bgt.n	800e1c4 <_printf_float+0x2c4>
 800e1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1c2:	e792      	b.n	800e0ea <_printf_float+0x1ea>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	4652      	mov	r2, sl
 800e1c8:	4631      	mov	r1, r6
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f43f aef7 	beq.w	800dfc2 <_printf_float+0xc2>
 800e1d4:	f109 0901 	add.w	r9, r9, #1
 800e1d8:	e7ee      	b.n	800e1b8 <_printf_float+0x2b8>
 800e1da:	bf00      	nop
 800e1dc:	7fefffff 	.word	0x7fefffff
 800e1e0:	080139dc 	.word	0x080139dc
 800e1e4:	080139e0 	.word	0x080139e0
 800e1e8:	080139e8 	.word	0x080139e8
 800e1ec:	080139e4 	.word	0x080139e4
 800e1f0:	080139ec 	.word	0x080139ec
 800e1f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	bfa8      	it	ge
 800e1fc:	461a      	movge	r2, r3
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	4691      	mov	r9, r2
 800e202:	dc37      	bgt.n	800e274 <_printf_float+0x374>
 800e204:	f04f 0b00 	mov.w	fp, #0
 800e208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e20c:	f104 021a 	add.w	r2, r4, #26
 800e210:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	eba3 0309 	sub.w	r3, r3, r9
 800e218:	455b      	cmp	r3, fp
 800e21a:	dc33      	bgt.n	800e284 <_printf_float+0x384>
 800e21c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e220:	429a      	cmp	r2, r3
 800e222:	db3b      	blt.n	800e29c <_printf_float+0x39c>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	07da      	lsls	r2, r3, #31
 800e228:	d438      	bmi.n	800e29c <_printf_float+0x39c>
 800e22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22c:	9a05      	ldr	r2, [sp, #20]
 800e22e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e230:	1a9a      	subs	r2, r3, r2
 800e232:	eba3 0901 	sub.w	r9, r3, r1
 800e236:	4591      	cmp	r9, r2
 800e238:	bfa8      	it	ge
 800e23a:	4691      	movge	r9, r2
 800e23c:	f1b9 0f00 	cmp.w	r9, #0
 800e240:	dc35      	bgt.n	800e2ae <_printf_float+0x3ae>
 800e242:	f04f 0800 	mov.w	r8, #0
 800e246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e24a:	f104 0a1a 	add.w	sl, r4, #26
 800e24e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e252:	1a9b      	subs	r3, r3, r2
 800e254:	eba3 0309 	sub.w	r3, r3, r9
 800e258:	4543      	cmp	r3, r8
 800e25a:	f77f af79 	ble.w	800e150 <_printf_float+0x250>
 800e25e:	2301      	movs	r3, #1
 800e260:	4652      	mov	r2, sl
 800e262:	4631      	mov	r1, r6
 800e264:	4628      	mov	r0, r5
 800e266:	47b8      	blx	r7
 800e268:	3001      	adds	r0, #1
 800e26a:	f43f aeaa 	beq.w	800dfc2 <_printf_float+0xc2>
 800e26e:	f108 0801 	add.w	r8, r8, #1
 800e272:	e7ec      	b.n	800e24e <_printf_float+0x34e>
 800e274:	4613      	mov	r3, r2
 800e276:	4631      	mov	r1, r6
 800e278:	4642      	mov	r2, r8
 800e27a:	4628      	mov	r0, r5
 800e27c:	47b8      	blx	r7
 800e27e:	3001      	adds	r0, #1
 800e280:	d1c0      	bne.n	800e204 <_printf_float+0x304>
 800e282:	e69e      	b.n	800dfc2 <_printf_float+0xc2>
 800e284:	2301      	movs	r3, #1
 800e286:	4631      	mov	r1, r6
 800e288:	4628      	mov	r0, r5
 800e28a:	9205      	str	r2, [sp, #20]
 800e28c:	47b8      	blx	r7
 800e28e:	3001      	adds	r0, #1
 800e290:	f43f ae97 	beq.w	800dfc2 <_printf_float+0xc2>
 800e294:	9a05      	ldr	r2, [sp, #20]
 800e296:	f10b 0b01 	add.w	fp, fp, #1
 800e29a:	e7b9      	b.n	800e210 <_printf_float+0x310>
 800e29c:	ee18 3a10 	vmov	r3, s16
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	47b8      	blx	r7
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d1be      	bne.n	800e22a <_printf_float+0x32a>
 800e2ac:	e689      	b.n	800dfc2 <_printf_float+0xc2>
 800e2ae:	9a05      	ldr	r2, [sp, #20]
 800e2b0:	464b      	mov	r3, r9
 800e2b2:	4442      	add	r2, r8
 800e2b4:	4631      	mov	r1, r6
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	47b8      	blx	r7
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	d1c1      	bne.n	800e242 <_printf_float+0x342>
 800e2be:	e680      	b.n	800dfc2 <_printf_float+0xc2>
 800e2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2c2:	2a01      	cmp	r2, #1
 800e2c4:	dc01      	bgt.n	800e2ca <_printf_float+0x3ca>
 800e2c6:	07db      	lsls	r3, r3, #31
 800e2c8:	d538      	bpl.n	800e33c <_printf_float+0x43c>
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	4642      	mov	r2, r8
 800e2ce:	4631      	mov	r1, r6
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	47b8      	blx	r7
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	f43f ae74 	beq.w	800dfc2 <_printf_float+0xc2>
 800e2da:	ee18 3a10 	vmov	r3, s16
 800e2de:	4652      	mov	r2, sl
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47b8      	blx	r7
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	f43f ae6b 	beq.w	800dfc2 <_printf_float+0xc2>
 800e2ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	f7f2 fc00 	bl	8000af8 <__aeabi_dcmpeq>
 800e2f8:	b9d8      	cbnz	r0, 800e332 <_printf_float+0x432>
 800e2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2fc:	f108 0201 	add.w	r2, r8, #1
 800e300:	3b01      	subs	r3, #1
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	d10e      	bne.n	800e32a <_printf_float+0x42a>
 800e30c:	e659      	b.n	800dfc2 <_printf_float+0xc2>
 800e30e:	2301      	movs	r3, #1
 800e310:	4652      	mov	r2, sl
 800e312:	4631      	mov	r1, r6
 800e314:	4628      	mov	r0, r5
 800e316:	47b8      	blx	r7
 800e318:	3001      	adds	r0, #1
 800e31a:	f43f ae52 	beq.w	800dfc2 <_printf_float+0xc2>
 800e31e:	f108 0801 	add.w	r8, r8, #1
 800e322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e324:	3b01      	subs	r3, #1
 800e326:	4543      	cmp	r3, r8
 800e328:	dcf1      	bgt.n	800e30e <_printf_float+0x40e>
 800e32a:	464b      	mov	r3, r9
 800e32c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e330:	e6dc      	b.n	800e0ec <_printf_float+0x1ec>
 800e332:	f04f 0800 	mov.w	r8, #0
 800e336:	f104 0a1a 	add.w	sl, r4, #26
 800e33a:	e7f2      	b.n	800e322 <_printf_float+0x422>
 800e33c:	2301      	movs	r3, #1
 800e33e:	4642      	mov	r2, r8
 800e340:	e7df      	b.n	800e302 <_printf_float+0x402>
 800e342:	2301      	movs	r3, #1
 800e344:	464a      	mov	r2, r9
 800e346:	4631      	mov	r1, r6
 800e348:	4628      	mov	r0, r5
 800e34a:	47b8      	blx	r7
 800e34c:	3001      	adds	r0, #1
 800e34e:	f43f ae38 	beq.w	800dfc2 <_printf_float+0xc2>
 800e352:	f108 0801 	add.w	r8, r8, #1
 800e356:	68e3      	ldr	r3, [r4, #12]
 800e358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e35a:	1a5b      	subs	r3, r3, r1
 800e35c:	4543      	cmp	r3, r8
 800e35e:	dcf0      	bgt.n	800e342 <_printf_float+0x442>
 800e360:	e6fa      	b.n	800e158 <_printf_float+0x258>
 800e362:	f04f 0800 	mov.w	r8, #0
 800e366:	f104 0919 	add.w	r9, r4, #25
 800e36a:	e7f4      	b.n	800e356 <_printf_float+0x456>

0800e36c <_printf_common>:
 800e36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e370:	4616      	mov	r6, r2
 800e372:	4699      	mov	r9, r3
 800e374:	688a      	ldr	r2, [r1, #8]
 800e376:	690b      	ldr	r3, [r1, #16]
 800e378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e37c:	4293      	cmp	r3, r2
 800e37e:	bfb8      	it	lt
 800e380:	4613      	movlt	r3, r2
 800e382:	6033      	str	r3, [r6, #0]
 800e384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e388:	4607      	mov	r7, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	b10a      	cbz	r2, 800e392 <_printf_common+0x26>
 800e38e:	3301      	adds	r3, #1
 800e390:	6033      	str	r3, [r6, #0]
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	0699      	lsls	r1, r3, #26
 800e396:	bf42      	ittt	mi
 800e398:	6833      	ldrmi	r3, [r6, #0]
 800e39a:	3302      	addmi	r3, #2
 800e39c:	6033      	strmi	r3, [r6, #0]
 800e39e:	6825      	ldr	r5, [r4, #0]
 800e3a0:	f015 0506 	ands.w	r5, r5, #6
 800e3a4:	d106      	bne.n	800e3b4 <_printf_common+0x48>
 800e3a6:	f104 0a19 	add.w	sl, r4, #25
 800e3aa:	68e3      	ldr	r3, [r4, #12]
 800e3ac:	6832      	ldr	r2, [r6, #0]
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	42ab      	cmp	r3, r5
 800e3b2:	dc26      	bgt.n	800e402 <_printf_common+0x96>
 800e3b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3b8:	1e13      	subs	r3, r2, #0
 800e3ba:	6822      	ldr	r2, [r4, #0]
 800e3bc:	bf18      	it	ne
 800e3be:	2301      	movne	r3, #1
 800e3c0:	0692      	lsls	r2, r2, #26
 800e3c2:	d42b      	bmi.n	800e41c <_printf_common+0xb0>
 800e3c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	47c0      	blx	r8
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	d01e      	beq.n	800e410 <_printf_common+0xa4>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	68e5      	ldr	r5, [r4, #12]
 800e3d6:	6832      	ldr	r2, [r6, #0]
 800e3d8:	f003 0306 	and.w	r3, r3, #6
 800e3dc:	2b04      	cmp	r3, #4
 800e3de:	bf08      	it	eq
 800e3e0:	1aad      	subeq	r5, r5, r2
 800e3e2:	68a3      	ldr	r3, [r4, #8]
 800e3e4:	6922      	ldr	r2, [r4, #16]
 800e3e6:	bf0c      	ite	eq
 800e3e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3ec:	2500      	movne	r5, #0
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	bfc4      	itt	gt
 800e3f2:	1a9b      	subgt	r3, r3, r2
 800e3f4:	18ed      	addgt	r5, r5, r3
 800e3f6:	2600      	movs	r6, #0
 800e3f8:	341a      	adds	r4, #26
 800e3fa:	42b5      	cmp	r5, r6
 800e3fc:	d11a      	bne.n	800e434 <_printf_common+0xc8>
 800e3fe:	2000      	movs	r0, #0
 800e400:	e008      	b.n	800e414 <_printf_common+0xa8>
 800e402:	2301      	movs	r3, #1
 800e404:	4652      	mov	r2, sl
 800e406:	4649      	mov	r1, r9
 800e408:	4638      	mov	r0, r7
 800e40a:	47c0      	blx	r8
 800e40c:	3001      	adds	r0, #1
 800e40e:	d103      	bne.n	800e418 <_printf_common+0xac>
 800e410:	f04f 30ff 	mov.w	r0, #4294967295
 800e414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e418:	3501      	adds	r5, #1
 800e41a:	e7c6      	b.n	800e3aa <_printf_common+0x3e>
 800e41c:	18e1      	adds	r1, r4, r3
 800e41e:	1c5a      	adds	r2, r3, #1
 800e420:	2030      	movs	r0, #48	; 0x30
 800e422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e426:	4422      	add	r2, r4
 800e428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e42c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e430:	3302      	adds	r3, #2
 800e432:	e7c7      	b.n	800e3c4 <_printf_common+0x58>
 800e434:	2301      	movs	r3, #1
 800e436:	4622      	mov	r2, r4
 800e438:	4649      	mov	r1, r9
 800e43a:	4638      	mov	r0, r7
 800e43c:	47c0      	blx	r8
 800e43e:	3001      	adds	r0, #1
 800e440:	d0e6      	beq.n	800e410 <_printf_common+0xa4>
 800e442:	3601      	adds	r6, #1
 800e444:	e7d9      	b.n	800e3fa <_printf_common+0x8e>
	...

0800e448 <_printf_i>:
 800e448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e44c:	7e0f      	ldrb	r7, [r1, #24]
 800e44e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e450:	2f78      	cmp	r7, #120	; 0x78
 800e452:	4691      	mov	r9, r2
 800e454:	4680      	mov	r8, r0
 800e456:	460c      	mov	r4, r1
 800e458:	469a      	mov	sl, r3
 800e45a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e45e:	d807      	bhi.n	800e470 <_printf_i+0x28>
 800e460:	2f62      	cmp	r7, #98	; 0x62
 800e462:	d80a      	bhi.n	800e47a <_printf_i+0x32>
 800e464:	2f00      	cmp	r7, #0
 800e466:	f000 80d8 	beq.w	800e61a <_printf_i+0x1d2>
 800e46a:	2f58      	cmp	r7, #88	; 0x58
 800e46c:	f000 80a3 	beq.w	800e5b6 <_printf_i+0x16e>
 800e470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e478:	e03a      	b.n	800e4f0 <_printf_i+0xa8>
 800e47a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e47e:	2b15      	cmp	r3, #21
 800e480:	d8f6      	bhi.n	800e470 <_printf_i+0x28>
 800e482:	a101      	add	r1, pc, #4	; (adr r1, 800e488 <_printf_i+0x40>)
 800e484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e488:	0800e4e1 	.word	0x0800e4e1
 800e48c:	0800e4f5 	.word	0x0800e4f5
 800e490:	0800e471 	.word	0x0800e471
 800e494:	0800e471 	.word	0x0800e471
 800e498:	0800e471 	.word	0x0800e471
 800e49c:	0800e471 	.word	0x0800e471
 800e4a0:	0800e4f5 	.word	0x0800e4f5
 800e4a4:	0800e471 	.word	0x0800e471
 800e4a8:	0800e471 	.word	0x0800e471
 800e4ac:	0800e471 	.word	0x0800e471
 800e4b0:	0800e471 	.word	0x0800e471
 800e4b4:	0800e601 	.word	0x0800e601
 800e4b8:	0800e525 	.word	0x0800e525
 800e4bc:	0800e5e3 	.word	0x0800e5e3
 800e4c0:	0800e471 	.word	0x0800e471
 800e4c4:	0800e471 	.word	0x0800e471
 800e4c8:	0800e623 	.word	0x0800e623
 800e4cc:	0800e471 	.word	0x0800e471
 800e4d0:	0800e525 	.word	0x0800e525
 800e4d4:	0800e471 	.word	0x0800e471
 800e4d8:	0800e471 	.word	0x0800e471
 800e4dc:	0800e5eb 	.word	0x0800e5eb
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	1d1a      	adds	r2, r3, #4
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	602a      	str	r2, [r5, #0]
 800e4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e0a3      	b.n	800e63c <_printf_i+0x1f4>
 800e4f4:	6820      	ldr	r0, [r4, #0]
 800e4f6:	6829      	ldr	r1, [r5, #0]
 800e4f8:	0606      	lsls	r6, r0, #24
 800e4fa:	f101 0304 	add.w	r3, r1, #4
 800e4fe:	d50a      	bpl.n	800e516 <_printf_i+0xce>
 800e500:	680e      	ldr	r6, [r1, #0]
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	2e00      	cmp	r6, #0
 800e506:	da03      	bge.n	800e510 <_printf_i+0xc8>
 800e508:	232d      	movs	r3, #45	; 0x2d
 800e50a:	4276      	negs	r6, r6
 800e50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e510:	485e      	ldr	r0, [pc, #376]	; (800e68c <_printf_i+0x244>)
 800e512:	230a      	movs	r3, #10
 800e514:	e019      	b.n	800e54a <_printf_i+0x102>
 800e516:	680e      	ldr	r6, [r1, #0]
 800e518:	602b      	str	r3, [r5, #0]
 800e51a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e51e:	bf18      	it	ne
 800e520:	b236      	sxthne	r6, r6
 800e522:	e7ef      	b.n	800e504 <_printf_i+0xbc>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	6820      	ldr	r0, [r4, #0]
 800e528:	1d19      	adds	r1, r3, #4
 800e52a:	6029      	str	r1, [r5, #0]
 800e52c:	0601      	lsls	r1, r0, #24
 800e52e:	d501      	bpl.n	800e534 <_printf_i+0xec>
 800e530:	681e      	ldr	r6, [r3, #0]
 800e532:	e002      	b.n	800e53a <_printf_i+0xf2>
 800e534:	0646      	lsls	r6, r0, #25
 800e536:	d5fb      	bpl.n	800e530 <_printf_i+0xe8>
 800e538:	881e      	ldrh	r6, [r3, #0]
 800e53a:	4854      	ldr	r0, [pc, #336]	; (800e68c <_printf_i+0x244>)
 800e53c:	2f6f      	cmp	r7, #111	; 0x6f
 800e53e:	bf0c      	ite	eq
 800e540:	2308      	moveq	r3, #8
 800e542:	230a      	movne	r3, #10
 800e544:	2100      	movs	r1, #0
 800e546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e54a:	6865      	ldr	r5, [r4, #4]
 800e54c:	60a5      	str	r5, [r4, #8]
 800e54e:	2d00      	cmp	r5, #0
 800e550:	bfa2      	ittt	ge
 800e552:	6821      	ldrge	r1, [r4, #0]
 800e554:	f021 0104 	bicge.w	r1, r1, #4
 800e558:	6021      	strge	r1, [r4, #0]
 800e55a:	b90e      	cbnz	r6, 800e560 <_printf_i+0x118>
 800e55c:	2d00      	cmp	r5, #0
 800e55e:	d04d      	beq.n	800e5fc <_printf_i+0x1b4>
 800e560:	4615      	mov	r5, r2
 800e562:	fbb6 f1f3 	udiv	r1, r6, r3
 800e566:	fb03 6711 	mls	r7, r3, r1, r6
 800e56a:	5dc7      	ldrb	r7, [r0, r7]
 800e56c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e570:	4637      	mov	r7, r6
 800e572:	42bb      	cmp	r3, r7
 800e574:	460e      	mov	r6, r1
 800e576:	d9f4      	bls.n	800e562 <_printf_i+0x11a>
 800e578:	2b08      	cmp	r3, #8
 800e57a:	d10b      	bne.n	800e594 <_printf_i+0x14c>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	07de      	lsls	r6, r3, #31
 800e580:	d508      	bpl.n	800e594 <_printf_i+0x14c>
 800e582:	6923      	ldr	r3, [r4, #16]
 800e584:	6861      	ldr	r1, [r4, #4]
 800e586:	4299      	cmp	r1, r3
 800e588:	bfde      	ittt	le
 800e58a:	2330      	movle	r3, #48	; 0x30
 800e58c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e590:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e594:	1b52      	subs	r2, r2, r5
 800e596:	6122      	str	r2, [r4, #16]
 800e598:	f8cd a000 	str.w	sl, [sp]
 800e59c:	464b      	mov	r3, r9
 800e59e:	aa03      	add	r2, sp, #12
 800e5a0:	4621      	mov	r1, r4
 800e5a2:	4640      	mov	r0, r8
 800e5a4:	f7ff fee2 	bl	800e36c <_printf_common>
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d14c      	bne.n	800e646 <_printf_i+0x1fe>
 800e5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b0:	b004      	add	sp, #16
 800e5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b6:	4835      	ldr	r0, [pc, #212]	; (800e68c <_printf_i+0x244>)
 800e5b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5bc:	6829      	ldr	r1, [r5, #0]
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5c4:	6029      	str	r1, [r5, #0]
 800e5c6:	061d      	lsls	r5, r3, #24
 800e5c8:	d514      	bpl.n	800e5f4 <_printf_i+0x1ac>
 800e5ca:	07df      	lsls	r7, r3, #31
 800e5cc:	bf44      	itt	mi
 800e5ce:	f043 0320 	orrmi.w	r3, r3, #32
 800e5d2:	6023      	strmi	r3, [r4, #0]
 800e5d4:	b91e      	cbnz	r6, 800e5de <_printf_i+0x196>
 800e5d6:	6823      	ldr	r3, [r4, #0]
 800e5d8:	f023 0320 	bic.w	r3, r3, #32
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	2310      	movs	r3, #16
 800e5e0:	e7b0      	b.n	800e544 <_printf_i+0xfc>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	f043 0320 	orr.w	r3, r3, #32
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	2378      	movs	r3, #120	; 0x78
 800e5ec:	4828      	ldr	r0, [pc, #160]	; (800e690 <_printf_i+0x248>)
 800e5ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5f2:	e7e3      	b.n	800e5bc <_printf_i+0x174>
 800e5f4:	0659      	lsls	r1, r3, #25
 800e5f6:	bf48      	it	mi
 800e5f8:	b2b6      	uxthmi	r6, r6
 800e5fa:	e7e6      	b.n	800e5ca <_printf_i+0x182>
 800e5fc:	4615      	mov	r5, r2
 800e5fe:	e7bb      	b.n	800e578 <_printf_i+0x130>
 800e600:	682b      	ldr	r3, [r5, #0]
 800e602:	6826      	ldr	r6, [r4, #0]
 800e604:	6961      	ldr	r1, [r4, #20]
 800e606:	1d18      	adds	r0, r3, #4
 800e608:	6028      	str	r0, [r5, #0]
 800e60a:	0635      	lsls	r5, r6, #24
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	d501      	bpl.n	800e614 <_printf_i+0x1cc>
 800e610:	6019      	str	r1, [r3, #0]
 800e612:	e002      	b.n	800e61a <_printf_i+0x1d2>
 800e614:	0670      	lsls	r0, r6, #25
 800e616:	d5fb      	bpl.n	800e610 <_printf_i+0x1c8>
 800e618:	8019      	strh	r1, [r3, #0]
 800e61a:	2300      	movs	r3, #0
 800e61c:	6123      	str	r3, [r4, #16]
 800e61e:	4615      	mov	r5, r2
 800e620:	e7ba      	b.n	800e598 <_printf_i+0x150>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	1d1a      	adds	r2, r3, #4
 800e626:	602a      	str	r2, [r5, #0]
 800e628:	681d      	ldr	r5, [r3, #0]
 800e62a:	6862      	ldr	r2, [r4, #4]
 800e62c:	2100      	movs	r1, #0
 800e62e:	4628      	mov	r0, r5
 800e630:	f7f1 fdee 	bl	8000210 <memchr>
 800e634:	b108      	cbz	r0, 800e63a <_printf_i+0x1f2>
 800e636:	1b40      	subs	r0, r0, r5
 800e638:	6060      	str	r0, [r4, #4]
 800e63a:	6863      	ldr	r3, [r4, #4]
 800e63c:	6123      	str	r3, [r4, #16]
 800e63e:	2300      	movs	r3, #0
 800e640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e644:	e7a8      	b.n	800e598 <_printf_i+0x150>
 800e646:	6923      	ldr	r3, [r4, #16]
 800e648:	462a      	mov	r2, r5
 800e64a:	4649      	mov	r1, r9
 800e64c:	4640      	mov	r0, r8
 800e64e:	47d0      	blx	sl
 800e650:	3001      	adds	r0, #1
 800e652:	d0ab      	beq.n	800e5ac <_printf_i+0x164>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	079b      	lsls	r3, r3, #30
 800e658:	d413      	bmi.n	800e682 <_printf_i+0x23a>
 800e65a:	68e0      	ldr	r0, [r4, #12]
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	4298      	cmp	r0, r3
 800e660:	bfb8      	it	lt
 800e662:	4618      	movlt	r0, r3
 800e664:	e7a4      	b.n	800e5b0 <_printf_i+0x168>
 800e666:	2301      	movs	r3, #1
 800e668:	4632      	mov	r2, r6
 800e66a:	4649      	mov	r1, r9
 800e66c:	4640      	mov	r0, r8
 800e66e:	47d0      	blx	sl
 800e670:	3001      	adds	r0, #1
 800e672:	d09b      	beq.n	800e5ac <_printf_i+0x164>
 800e674:	3501      	adds	r5, #1
 800e676:	68e3      	ldr	r3, [r4, #12]
 800e678:	9903      	ldr	r1, [sp, #12]
 800e67a:	1a5b      	subs	r3, r3, r1
 800e67c:	42ab      	cmp	r3, r5
 800e67e:	dcf2      	bgt.n	800e666 <_printf_i+0x21e>
 800e680:	e7eb      	b.n	800e65a <_printf_i+0x212>
 800e682:	2500      	movs	r5, #0
 800e684:	f104 0619 	add.w	r6, r4, #25
 800e688:	e7f5      	b.n	800e676 <_printf_i+0x22e>
 800e68a:	bf00      	nop
 800e68c:	080139ee 	.word	0x080139ee
 800e690:	080139ff 	.word	0x080139ff

0800e694 <_sbrk_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d06      	ldr	r5, [pc, #24]	; (800e6b0 <_sbrk_r+0x1c>)
 800e698:	2300      	movs	r3, #0
 800e69a:	4604      	mov	r4, r0
 800e69c:	4608      	mov	r0, r1
 800e69e:	602b      	str	r3, [r5, #0]
 800e6a0:	f004 fe2c 	bl	80132fc <_sbrk>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_sbrk_r+0x1a>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_sbrk_r+0x1a>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	2000dc44 	.word	0x2000dc44

0800e6b4 <siprintf>:
 800e6b4:	b40e      	push	{r1, r2, r3}
 800e6b6:	b500      	push	{lr}
 800e6b8:	b09c      	sub	sp, #112	; 0x70
 800e6ba:	ab1d      	add	r3, sp, #116	; 0x74
 800e6bc:	9002      	str	r0, [sp, #8]
 800e6be:	9006      	str	r0, [sp, #24]
 800e6c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e6c4:	4809      	ldr	r0, [pc, #36]	; (800e6ec <siprintf+0x38>)
 800e6c6:	9107      	str	r1, [sp, #28]
 800e6c8:	9104      	str	r1, [sp, #16]
 800e6ca:	4909      	ldr	r1, [pc, #36]	; (800e6f0 <siprintf+0x3c>)
 800e6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6d0:	9105      	str	r1, [sp, #20]
 800e6d2:	6800      	ldr	r0, [r0, #0]
 800e6d4:	9301      	str	r3, [sp, #4]
 800e6d6:	a902      	add	r1, sp, #8
 800e6d8:	f001 fa8e 	bl	800fbf8 <_svfiprintf_r>
 800e6dc:	9b02      	ldr	r3, [sp, #8]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	701a      	strb	r2, [r3, #0]
 800e6e2:	b01c      	add	sp, #112	; 0x70
 800e6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6e8:	b003      	add	sp, #12
 800e6ea:	4770      	bx	lr
 800e6ec:	20000040 	.word	0x20000040
 800e6f0:	ffff0208 	.word	0xffff0208

0800e6f4 <quorem>:
 800e6f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	6903      	ldr	r3, [r0, #16]
 800e6fa:	690c      	ldr	r4, [r1, #16]
 800e6fc:	42a3      	cmp	r3, r4
 800e6fe:	4607      	mov	r7, r0
 800e700:	f2c0 8081 	blt.w	800e806 <quorem+0x112>
 800e704:	3c01      	subs	r4, #1
 800e706:	f101 0814 	add.w	r8, r1, #20
 800e70a:	f100 0514 	add.w	r5, r0, #20
 800e70e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e712:	9301      	str	r3, [sp, #4]
 800e714:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e71c:	3301      	adds	r3, #1
 800e71e:	429a      	cmp	r2, r3
 800e720:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e724:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e728:	fbb2 f6f3 	udiv	r6, r2, r3
 800e72c:	d331      	bcc.n	800e792 <quorem+0x9e>
 800e72e:	f04f 0e00 	mov.w	lr, #0
 800e732:	4640      	mov	r0, r8
 800e734:	46ac      	mov	ip, r5
 800e736:	46f2      	mov	sl, lr
 800e738:	f850 2b04 	ldr.w	r2, [r0], #4
 800e73c:	b293      	uxth	r3, r2
 800e73e:	fb06 e303 	mla	r3, r6, r3, lr
 800e742:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e746:	b29b      	uxth	r3, r3
 800e748:	ebaa 0303 	sub.w	r3, sl, r3
 800e74c:	f8dc a000 	ldr.w	sl, [ip]
 800e750:	0c12      	lsrs	r2, r2, #16
 800e752:	fa13 f38a 	uxtah	r3, r3, sl
 800e756:	fb06 e202 	mla	r2, r6, r2, lr
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	9b00      	ldr	r3, [sp, #0]
 800e75e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e762:	b292      	uxth	r2, r2
 800e764:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e768:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e76c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e770:	4581      	cmp	r9, r0
 800e772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e776:	f84c 3b04 	str.w	r3, [ip], #4
 800e77a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e77e:	d2db      	bcs.n	800e738 <quorem+0x44>
 800e780:	f855 300b 	ldr.w	r3, [r5, fp]
 800e784:	b92b      	cbnz	r3, 800e792 <quorem+0x9e>
 800e786:	9b01      	ldr	r3, [sp, #4]
 800e788:	3b04      	subs	r3, #4
 800e78a:	429d      	cmp	r5, r3
 800e78c:	461a      	mov	r2, r3
 800e78e:	d32e      	bcc.n	800e7ee <quorem+0xfa>
 800e790:	613c      	str	r4, [r7, #16]
 800e792:	4638      	mov	r0, r7
 800e794:	f001 f8bc 	bl	800f910 <__mcmp>
 800e798:	2800      	cmp	r0, #0
 800e79a:	db24      	blt.n	800e7e6 <quorem+0xf2>
 800e79c:	3601      	adds	r6, #1
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f04f 0c00 	mov.w	ip, #0
 800e7a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7a8:	f8d0 e000 	ldr.w	lr, [r0]
 800e7ac:	b293      	uxth	r3, r2
 800e7ae:	ebac 0303 	sub.w	r3, ip, r3
 800e7b2:	0c12      	lsrs	r2, r2, #16
 800e7b4:	fa13 f38e 	uxtah	r3, r3, lr
 800e7b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e7bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7c6:	45c1      	cmp	r9, r8
 800e7c8:	f840 3b04 	str.w	r3, [r0], #4
 800e7cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e7d0:	d2e8      	bcs.n	800e7a4 <quorem+0xb0>
 800e7d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7da:	b922      	cbnz	r2, 800e7e6 <quorem+0xf2>
 800e7dc:	3b04      	subs	r3, #4
 800e7de:	429d      	cmp	r5, r3
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	d30a      	bcc.n	800e7fa <quorem+0x106>
 800e7e4:	613c      	str	r4, [r7, #16]
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	b003      	add	sp, #12
 800e7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ee:	6812      	ldr	r2, [r2, #0]
 800e7f0:	3b04      	subs	r3, #4
 800e7f2:	2a00      	cmp	r2, #0
 800e7f4:	d1cc      	bne.n	800e790 <quorem+0x9c>
 800e7f6:	3c01      	subs	r4, #1
 800e7f8:	e7c7      	b.n	800e78a <quorem+0x96>
 800e7fa:	6812      	ldr	r2, [r2, #0]
 800e7fc:	3b04      	subs	r3, #4
 800e7fe:	2a00      	cmp	r2, #0
 800e800:	d1f0      	bne.n	800e7e4 <quorem+0xf0>
 800e802:	3c01      	subs	r4, #1
 800e804:	e7eb      	b.n	800e7de <quorem+0xea>
 800e806:	2000      	movs	r0, #0
 800e808:	e7ee      	b.n	800e7e8 <quorem+0xf4>
 800e80a:	0000      	movs	r0, r0
 800e80c:	0000      	movs	r0, r0
	...

0800e810 <_dtoa_r>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	ed2d 8b04 	vpush	{d8-d9}
 800e818:	ec57 6b10 	vmov	r6, r7, d0
 800e81c:	b093      	sub	sp, #76	; 0x4c
 800e81e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e820:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e824:	9106      	str	r1, [sp, #24]
 800e826:	ee10 aa10 	vmov	sl, s0
 800e82a:	4604      	mov	r4, r0
 800e82c:	9209      	str	r2, [sp, #36]	; 0x24
 800e82e:	930c      	str	r3, [sp, #48]	; 0x30
 800e830:	46bb      	mov	fp, r7
 800e832:	b975      	cbnz	r5, 800e852 <_dtoa_r+0x42>
 800e834:	2010      	movs	r0, #16
 800e836:	f7ff f9c5 	bl	800dbc4 <malloc>
 800e83a:	4602      	mov	r2, r0
 800e83c:	6260      	str	r0, [r4, #36]	; 0x24
 800e83e:	b920      	cbnz	r0, 800e84a <_dtoa_r+0x3a>
 800e840:	4ba7      	ldr	r3, [pc, #668]	; (800eae0 <_dtoa_r+0x2d0>)
 800e842:	21ea      	movs	r1, #234	; 0xea
 800e844:	48a7      	ldr	r0, [pc, #668]	; (800eae4 <_dtoa_r+0x2d4>)
 800e846:	f001 fad7 	bl	800fdf8 <__assert_func>
 800e84a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e84e:	6005      	str	r5, [r0, #0]
 800e850:	60c5      	str	r5, [r0, #12]
 800e852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e854:	6819      	ldr	r1, [r3, #0]
 800e856:	b151      	cbz	r1, 800e86e <_dtoa_r+0x5e>
 800e858:	685a      	ldr	r2, [r3, #4]
 800e85a:	604a      	str	r2, [r1, #4]
 800e85c:	2301      	movs	r3, #1
 800e85e:	4093      	lsls	r3, r2
 800e860:	608b      	str	r3, [r1, #8]
 800e862:	4620      	mov	r0, r4
 800e864:	f000 fe12 	bl	800f48c <_Bfree>
 800e868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e86a:	2200      	movs	r2, #0
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	1e3b      	subs	r3, r7, #0
 800e870:	bfaa      	itet	ge
 800e872:	2300      	movge	r3, #0
 800e874:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e878:	f8c8 3000 	strge.w	r3, [r8]
 800e87c:	4b9a      	ldr	r3, [pc, #616]	; (800eae8 <_dtoa_r+0x2d8>)
 800e87e:	bfbc      	itt	lt
 800e880:	2201      	movlt	r2, #1
 800e882:	f8c8 2000 	strlt.w	r2, [r8]
 800e886:	ea33 030b 	bics.w	r3, r3, fp
 800e88a:	d11b      	bne.n	800e8c4 <_dtoa_r+0xb4>
 800e88c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e88e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e892:	6013      	str	r3, [r2, #0]
 800e894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e898:	4333      	orrs	r3, r6
 800e89a:	f000 8592 	beq.w	800f3c2 <_dtoa_r+0xbb2>
 800e89e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8a0:	b963      	cbnz	r3, 800e8bc <_dtoa_r+0xac>
 800e8a2:	4b92      	ldr	r3, [pc, #584]	; (800eaec <_dtoa_r+0x2dc>)
 800e8a4:	e022      	b.n	800e8ec <_dtoa_r+0xdc>
 800e8a6:	4b92      	ldr	r3, [pc, #584]	; (800eaf0 <_dtoa_r+0x2e0>)
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	3308      	adds	r3, #8
 800e8ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	9801      	ldr	r0, [sp, #4]
 800e8b2:	b013      	add	sp, #76	; 0x4c
 800e8b4:	ecbd 8b04 	vpop	{d8-d9}
 800e8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8bc:	4b8b      	ldr	r3, [pc, #556]	; (800eaec <_dtoa_r+0x2dc>)
 800e8be:	9301      	str	r3, [sp, #4]
 800e8c0:	3303      	adds	r3, #3
 800e8c2:	e7f3      	b.n	800e8ac <_dtoa_r+0x9c>
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	4659      	mov	r1, fp
 800e8cc:	f7f2 f914 	bl	8000af8 <__aeabi_dcmpeq>
 800e8d0:	ec4b ab19 	vmov	d9, sl, fp
 800e8d4:	4680      	mov	r8, r0
 800e8d6:	b158      	cbz	r0, 800e8f0 <_dtoa_r+0xe0>
 800e8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8da:	2301      	movs	r3, #1
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 856b 	beq.w	800f3bc <_dtoa_r+0xbac>
 800e8e6:	4883      	ldr	r0, [pc, #524]	; (800eaf4 <_dtoa_r+0x2e4>)
 800e8e8:	6018      	str	r0, [r3, #0]
 800e8ea:	1e43      	subs	r3, r0, #1
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	e7df      	b.n	800e8b0 <_dtoa_r+0xa0>
 800e8f0:	ec4b ab10 	vmov	d0, sl, fp
 800e8f4:	aa10      	add	r2, sp, #64	; 0x40
 800e8f6:	a911      	add	r1, sp, #68	; 0x44
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f001 f8af 	bl	800fa5c <__d2b>
 800e8fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e902:	ee08 0a10 	vmov	s16, r0
 800e906:	2d00      	cmp	r5, #0
 800e908:	f000 8084 	beq.w	800ea14 <_dtoa_r+0x204>
 800e90c:	ee19 3a90 	vmov	r3, s19
 800e910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e914:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e918:	4656      	mov	r6, sl
 800e91a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e91e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e922:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e926:	4b74      	ldr	r3, [pc, #464]	; (800eaf8 <_dtoa_r+0x2e8>)
 800e928:	2200      	movs	r2, #0
 800e92a:	4630      	mov	r0, r6
 800e92c:	4639      	mov	r1, r7
 800e92e:	f7f1 fcc3 	bl	80002b8 <__aeabi_dsub>
 800e932:	a365      	add	r3, pc, #404	; (adr r3, 800eac8 <_dtoa_r+0x2b8>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f7f1 fe76 	bl	8000628 <__aeabi_dmul>
 800e93c:	a364      	add	r3, pc, #400	; (adr r3, 800ead0 <_dtoa_r+0x2c0>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	f7f1 fcbb 	bl	80002bc <__adddf3>
 800e946:	4606      	mov	r6, r0
 800e948:	4628      	mov	r0, r5
 800e94a:	460f      	mov	r7, r1
 800e94c:	f7f1 fe02 	bl	8000554 <__aeabi_i2d>
 800e950:	a361      	add	r3, pc, #388	; (adr r3, 800ead8 <_dtoa_r+0x2c8>)
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	f7f1 fe67 	bl	8000628 <__aeabi_dmul>
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
 800e95e:	4630      	mov	r0, r6
 800e960:	4639      	mov	r1, r7
 800e962:	f7f1 fcab 	bl	80002bc <__adddf3>
 800e966:	4606      	mov	r6, r0
 800e968:	460f      	mov	r7, r1
 800e96a:	f7f2 f90d 	bl	8000b88 <__aeabi_d2iz>
 800e96e:	2200      	movs	r2, #0
 800e970:	9000      	str	r0, [sp, #0]
 800e972:	2300      	movs	r3, #0
 800e974:	4630      	mov	r0, r6
 800e976:	4639      	mov	r1, r7
 800e978:	f7f2 f8c8 	bl	8000b0c <__aeabi_dcmplt>
 800e97c:	b150      	cbz	r0, 800e994 <_dtoa_r+0x184>
 800e97e:	9800      	ldr	r0, [sp, #0]
 800e980:	f7f1 fde8 	bl	8000554 <__aeabi_i2d>
 800e984:	4632      	mov	r2, r6
 800e986:	463b      	mov	r3, r7
 800e988:	f7f2 f8b6 	bl	8000af8 <__aeabi_dcmpeq>
 800e98c:	b910      	cbnz	r0, 800e994 <_dtoa_r+0x184>
 800e98e:	9b00      	ldr	r3, [sp, #0]
 800e990:	3b01      	subs	r3, #1
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	2b16      	cmp	r3, #22
 800e998:	d85a      	bhi.n	800ea50 <_dtoa_r+0x240>
 800e99a:	9a00      	ldr	r2, [sp, #0]
 800e99c:	4b57      	ldr	r3, [pc, #348]	; (800eafc <_dtoa_r+0x2ec>)
 800e99e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a6:	ec51 0b19 	vmov	r0, r1, d9
 800e9aa:	f7f2 f8af 	bl	8000b0c <__aeabi_dcmplt>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	d050      	beq.n	800ea54 <_dtoa_r+0x244>
 800e9b2:	9b00      	ldr	r3, [sp, #0]
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9be:	1b5d      	subs	r5, r3, r5
 800e9c0:	1e6b      	subs	r3, r5, #1
 800e9c2:	9305      	str	r3, [sp, #20]
 800e9c4:	bf45      	ittet	mi
 800e9c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e9ca:	9304      	strmi	r3, [sp, #16]
 800e9cc:	2300      	movpl	r3, #0
 800e9ce:	2300      	movmi	r3, #0
 800e9d0:	bf4c      	ite	mi
 800e9d2:	9305      	strmi	r3, [sp, #20]
 800e9d4:	9304      	strpl	r3, [sp, #16]
 800e9d6:	9b00      	ldr	r3, [sp, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	db3d      	blt.n	800ea58 <_dtoa_r+0x248>
 800e9dc:	9b05      	ldr	r3, [sp, #20]
 800e9de:	9a00      	ldr	r2, [sp, #0]
 800e9e0:	920a      	str	r2, [sp, #40]	; 0x28
 800e9e2:	4413      	add	r3, r2
 800e9e4:	9305      	str	r3, [sp, #20]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	9307      	str	r3, [sp, #28]
 800e9ea:	9b06      	ldr	r3, [sp, #24]
 800e9ec:	2b09      	cmp	r3, #9
 800e9ee:	f200 8089 	bhi.w	800eb04 <_dtoa_r+0x2f4>
 800e9f2:	2b05      	cmp	r3, #5
 800e9f4:	bfc4      	itt	gt
 800e9f6:	3b04      	subgt	r3, #4
 800e9f8:	9306      	strgt	r3, [sp, #24]
 800e9fa:	9b06      	ldr	r3, [sp, #24]
 800e9fc:	f1a3 0302 	sub.w	r3, r3, #2
 800ea00:	bfcc      	ite	gt
 800ea02:	2500      	movgt	r5, #0
 800ea04:	2501      	movle	r5, #1
 800ea06:	2b03      	cmp	r3, #3
 800ea08:	f200 8087 	bhi.w	800eb1a <_dtoa_r+0x30a>
 800ea0c:	e8df f003 	tbb	[pc, r3]
 800ea10:	59383a2d 	.word	0x59383a2d
 800ea14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea18:	441d      	add	r5, r3
 800ea1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea1e:	2b20      	cmp	r3, #32
 800ea20:	bfc1      	itttt	gt
 800ea22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea2a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ea2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea32:	bfda      	itte	le
 800ea34:	f1c3 0320 	rsble	r3, r3, #32
 800ea38:	fa06 f003 	lslle.w	r0, r6, r3
 800ea3c:	4318      	orrgt	r0, r3
 800ea3e:	f7f1 fd79 	bl	8000534 <__aeabi_ui2d>
 800ea42:	2301      	movs	r3, #1
 800ea44:	4606      	mov	r6, r0
 800ea46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ea4a:	3d01      	subs	r5, #1
 800ea4c:	930e      	str	r3, [sp, #56]	; 0x38
 800ea4e:	e76a      	b.n	800e926 <_dtoa_r+0x116>
 800ea50:	2301      	movs	r3, #1
 800ea52:	e7b2      	b.n	800e9ba <_dtoa_r+0x1aa>
 800ea54:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea56:	e7b1      	b.n	800e9bc <_dtoa_r+0x1ac>
 800ea58:	9b04      	ldr	r3, [sp, #16]
 800ea5a:	9a00      	ldr	r2, [sp, #0]
 800ea5c:	1a9b      	subs	r3, r3, r2
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	4253      	negs	r3, r2
 800ea62:	9307      	str	r3, [sp, #28]
 800ea64:	2300      	movs	r3, #0
 800ea66:	930a      	str	r3, [sp, #40]	; 0x28
 800ea68:	e7bf      	b.n	800e9ea <_dtoa_r+0x1da>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	9308      	str	r3, [sp, #32]
 800ea6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	dc55      	bgt.n	800eb20 <_dtoa_r+0x310>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ea7e:	e00c      	b.n	800ea9a <_dtoa_r+0x28a>
 800ea80:	2301      	movs	r3, #1
 800ea82:	e7f3      	b.n	800ea6c <_dtoa_r+0x25c>
 800ea84:	2300      	movs	r3, #0
 800ea86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea88:	9308      	str	r3, [sp, #32]
 800ea8a:	9b00      	ldr	r3, [sp, #0]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	9302      	str	r3, [sp, #8]
 800ea90:	3301      	adds	r3, #1
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	9303      	str	r3, [sp, #12]
 800ea96:	bfb8      	it	lt
 800ea98:	2301      	movlt	r3, #1
 800ea9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	6042      	str	r2, [r0, #4]
 800eaa0:	2204      	movs	r2, #4
 800eaa2:	f102 0614 	add.w	r6, r2, #20
 800eaa6:	429e      	cmp	r6, r3
 800eaa8:	6841      	ldr	r1, [r0, #4]
 800eaaa:	d93d      	bls.n	800eb28 <_dtoa_r+0x318>
 800eaac:	4620      	mov	r0, r4
 800eaae:	f000 fcad 	bl	800f40c <_Balloc>
 800eab2:	9001      	str	r0, [sp, #4]
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d13b      	bne.n	800eb30 <_dtoa_r+0x320>
 800eab8:	4b11      	ldr	r3, [pc, #68]	; (800eb00 <_dtoa_r+0x2f0>)
 800eaba:	4602      	mov	r2, r0
 800eabc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eac0:	e6c0      	b.n	800e844 <_dtoa_r+0x34>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e7df      	b.n	800ea86 <_dtoa_r+0x276>
 800eac6:	bf00      	nop
 800eac8:	636f4361 	.word	0x636f4361
 800eacc:	3fd287a7 	.word	0x3fd287a7
 800ead0:	8b60c8b3 	.word	0x8b60c8b3
 800ead4:	3fc68a28 	.word	0x3fc68a28
 800ead8:	509f79fb 	.word	0x509f79fb
 800eadc:	3fd34413 	.word	0x3fd34413
 800eae0:	08013a1d 	.word	0x08013a1d
 800eae4:	08013a34 	.word	0x08013a34
 800eae8:	7ff00000 	.word	0x7ff00000
 800eaec:	08013a19 	.word	0x08013a19
 800eaf0:	08013a10 	.word	0x08013a10
 800eaf4:	080139ed 	.word	0x080139ed
 800eaf8:	3ff80000 	.word	0x3ff80000
 800eafc:	08013b28 	.word	0x08013b28
 800eb00:	08013a8f 	.word	0x08013a8f
 800eb04:	2501      	movs	r5, #1
 800eb06:	2300      	movs	r3, #0
 800eb08:	9306      	str	r3, [sp, #24]
 800eb0a:	9508      	str	r5, [sp, #32]
 800eb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb14:	2200      	movs	r2, #0
 800eb16:	2312      	movs	r3, #18
 800eb18:	e7b0      	b.n	800ea7c <_dtoa_r+0x26c>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	9308      	str	r3, [sp, #32]
 800eb1e:	e7f5      	b.n	800eb0c <_dtoa_r+0x2fc>
 800eb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb26:	e7b8      	b.n	800ea9a <_dtoa_r+0x28a>
 800eb28:	3101      	adds	r1, #1
 800eb2a:	6041      	str	r1, [r0, #4]
 800eb2c:	0052      	lsls	r2, r2, #1
 800eb2e:	e7b8      	b.n	800eaa2 <_dtoa_r+0x292>
 800eb30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb32:	9a01      	ldr	r2, [sp, #4]
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	9b03      	ldr	r3, [sp, #12]
 800eb38:	2b0e      	cmp	r3, #14
 800eb3a:	f200 809d 	bhi.w	800ec78 <_dtoa_r+0x468>
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	f000 809a 	beq.w	800ec78 <_dtoa_r+0x468>
 800eb44:	9b00      	ldr	r3, [sp, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	dd32      	ble.n	800ebb0 <_dtoa_r+0x3a0>
 800eb4a:	4ab7      	ldr	r2, [pc, #732]	; (800ee28 <_dtoa_r+0x618>)
 800eb4c:	f003 030f 	and.w	r3, r3, #15
 800eb50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb58:	9b00      	ldr	r3, [sp, #0]
 800eb5a:	05d8      	lsls	r0, r3, #23
 800eb5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eb60:	d516      	bpl.n	800eb90 <_dtoa_r+0x380>
 800eb62:	4bb2      	ldr	r3, [pc, #712]	; (800ee2c <_dtoa_r+0x61c>)
 800eb64:	ec51 0b19 	vmov	r0, r1, d9
 800eb68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb6c:	f7f1 fe86 	bl	800087c <__aeabi_ddiv>
 800eb70:	f007 070f 	and.w	r7, r7, #15
 800eb74:	4682      	mov	sl, r0
 800eb76:	468b      	mov	fp, r1
 800eb78:	2503      	movs	r5, #3
 800eb7a:	4eac      	ldr	r6, [pc, #688]	; (800ee2c <_dtoa_r+0x61c>)
 800eb7c:	b957      	cbnz	r7, 800eb94 <_dtoa_r+0x384>
 800eb7e:	4642      	mov	r2, r8
 800eb80:	464b      	mov	r3, r9
 800eb82:	4650      	mov	r0, sl
 800eb84:	4659      	mov	r1, fp
 800eb86:	f7f1 fe79 	bl	800087c <__aeabi_ddiv>
 800eb8a:	4682      	mov	sl, r0
 800eb8c:	468b      	mov	fp, r1
 800eb8e:	e028      	b.n	800ebe2 <_dtoa_r+0x3d2>
 800eb90:	2502      	movs	r5, #2
 800eb92:	e7f2      	b.n	800eb7a <_dtoa_r+0x36a>
 800eb94:	07f9      	lsls	r1, r7, #31
 800eb96:	d508      	bpl.n	800ebaa <_dtoa_r+0x39a>
 800eb98:	4640      	mov	r0, r8
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eba0:	f7f1 fd42 	bl	8000628 <__aeabi_dmul>
 800eba4:	3501      	adds	r5, #1
 800eba6:	4680      	mov	r8, r0
 800eba8:	4689      	mov	r9, r1
 800ebaa:	107f      	asrs	r7, r7, #1
 800ebac:	3608      	adds	r6, #8
 800ebae:	e7e5      	b.n	800eb7c <_dtoa_r+0x36c>
 800ebb0:	f000 809b 	beq.w	800ecea <_dtoa_r+0x4da>
 800ebb4:	9b00      	ldr	r3, [sp, #0]
 800ebb6:	4f9d      	ldr	r7, [pc, #628]	; (800ee2c <_dtoa_r+0x61c>)
 800ebb8:	425e      	negs	r6, r3
 800ebba:	4b9b      	ldr	r3, [pc, #620]	; (800ee28 <_dtoa_r+0x618>)
 800ebbc:	f006 020f 	and.w	r2, r6, #15
 800ebc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc8:	ec51 0b19 	vmov	r0, r1, d9
 800ebcc:	f7f1 fd2c 	bl	8000628 <__aeabi_dmul>
 800ebd0:	1136      	asrs	r6, r6, #4
 800ebd2:	4682      	mov	sl, r0
 800ebd4:	468b      	mov	fp, r1
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	2502      	movs	r5, #2
 800ebda:	2e00      	cmp	r6, #0
 800ebdc:	d17a      	bne.n	800ecd4 <_dtoa_r+0x4c4>
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1d3      	bne.n	800eb8a <_dtoa_r+0x37a>
 800ebe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 8082 	beq.w	800ecee <_dtoa_r+0x4de>
 800ebea:	4b91      	ldr	r3, [pc, #580]	; (800ee30 <_dtoa_r+0x620>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	4650      	mov	r0, sl
 800ebf0:	4659      	mov	r1, fp
 800ebf2:	f7f1 ff8b 	bl	8000b0c <__aeabi_dcmplt>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d079      	beq.n	800ecee <_dtoa_r+0x4de>
 800ebfa:	9b03      	ldr	r3, [sp, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d076      	beq.n	800ecee <_dtoa_r+0x4de>
 800ec00:	9b02      	ldr	r3, [sp, #8]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dd36      	ble.n	800ec74 <_dtoa_r+0x464>
 800ec06:	9b00      	ldr	r3, [sp, #0]
 800ec08:	4650      	mov	r0, sl
 800ec0a:	4659      	mov	r1, fp
 800ec0c:	1e5f      	subs	r7, r3, #1
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4b88      	ldr	r3, [pc, #544]	; (800ee34 <_dtoa_r+0x624>)
 800ec12:	f7f1 fd09 	bl	8000628 <__aeabi_dmul>
 800ec16:	9e02      	ldr	r6, [sp, #8]
 800ec18:	4682      	mov	sl, r0
 800ec1a:	468b      	mov	fp, r1
 800ec1c:	3501      	adds	r5, #1
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f7f1 fc98 	bl	8000554 <__aeabi_i2d>
 800ec24:	4652      	mov	r2, sl
 800ec26:	465b      	mov	r3, fp
 800ec28:	f7f1 fcfe 	bl	8000628 <__aeabi_dmul>
 800ec2c:	4b82      	ldr	r3, [pc, #520]	; (800ee38 <_dtoa_r+0x628>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f7f1 fb44 	bl	80002bc <__adddf3>
 800ec34:	46d0      	mov	r8, sl
 800ec36:	46d9      	mov	r9, fp
 800ec38:	4682      	mov	sl, r0
 800ec3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ec3e:	2e00      	cmp	r6, #0
 800ec40:	d158      	bne.n	800ecf4 <_dtoa_r+0x4e4>
 800ec42:	4b7e      	ldr	r3, [pc, #504]	; (800ee3c <_dtoa_r+0x62c>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	4640      	mov	r0, r8
 800ec48:	4649      	mov	r1, r9
 800ec4a:	f7f1 fb35 	bl	80002b8 <__aeabi_dsub>
 800ec4e:	4652      	mov	r2, sl
 800ec50:	465b      	mov	r3, fp
 800ec52:	4680      	mov	r8, r0
 800ec54:	4689      	mov	r9, r1
 800ec56:	f7f1 ff77 	bl	8000b48 <__aeabi_dcmpgt>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	f040 8295 	bne.w	800f18a <_dtoa_r+0x97a>
 800ec60:	4652      	mov	r2, sl
 800ec62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 ff4f 	bl	8000b0c <__aeabi_dcmplt>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	f040 8289 	bne.w	800f186 <_dtoa_r+0x976>
 800ec74:	ec5b ab19 	vmov	sl, fp, d9
 800ec78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f2c0 8148 	blt.w	800ef10 <_dtoa_r+0x700>
 800ec80:	9a00      	ldr	r2, [sp, #0]
 800ec82:	2a0e      	cmp	r2, #14
 800ec84:	f300 8144 	bgt.w	800ef10 <_dtoa_r+0x700>
 800ec88:	4b67      	ldr	r3, [pc, #412]	; (800ee28 <_dtoa_r+0x618>)
 800ec8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f280 80d5 	bge.w	800ee44 <_dtoa_r+0x634>
 800ec9a:	9b03      	ldr	r3, [sp, #12]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f300 80d1 	bgt.w	800ee44 <_dtoa_r+0x634>
 800eca2:	f040 826f 	bne.w	800f184 <_dtoa_r+0x974>
 800eca6:	4b65      	ldr	r3, [pc, #404]	; (800ee3c <_dtoa_r+0x62c>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4640      	mov	r0, r8
 800ecac:	4649      	mov	r1, r9
 800ecae:	f7f1 fcbb 	bl	8000628 <__aeabi_dmul>
 800ecb2:	4652      	mov	r2, sl
 800ecb4:	465b      	mov	r3, fp
 800ecb6:	f7f1 ff3d 	bl	8000b34 <__aeabi_dcmpge>
 800ecba:	9e03      	ldr	r6, [sp, #12]
 800ecbc:	4637      	mov	r7, r6
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	f040 8245 	bne.w	800f14e <_dtoa_r+0x93e>
 800ecc4:	9d01      	ldr	r5, [sp, #4]
 800ecc6:	2331      	movs	r3, #49	; 0x31
 800ecc8:	f805 3b01 	strb.w	r3, [r5], #1
 800eccc:	9b00      	ldr	r3, [sp, #0]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	e240      	b.n	800f156 <_dtoa_r+0x946>
 800ecd4:	07f2      	lsls	r2, r6, #31
 800ecd6:	d505      	bpl.n	800ece4 <_dtoa_r+0x4d4>
 800ecd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecdc:	f7f1 fca4 	bl	8000628 <__aeabi_dmul>
 800ece0:	3501      	adds	r5, #1
 800ece2:	2301      	movs	r3, #1
 800ece4:	1076      	asrs	r6, r6, #1
 800ece6:	3708      	adds	r7, #8
 800ece8:	e777      	b.n	800ebda <_dtoa_r+0x3ca>
 800ecea:	2502      	movs	r5, #2
 800ecec:	e779      	b.n	800ebe2 <_dtoa_r+0x3d2>
 800ecee:	9f00      	ldr	r7, [sp, #0]
 800ecf0:	9e03      	ldr	r6, [sp, #12]
 800ecf2:	e794      	b.n	800ec1e <_dtoa_r+0x40e>
 800ecf4:	9901      	ldr	r1, [sp, #4]
 800ecf6:	4b4c      	ldr	r3, [pc, #304]	; (800ee28 <_dtoa_r+0x618>)
 800ecf8:	4431      	add	r1, r6
 800ecfa:	910d      	str	r1, [sp, #52]	; 0x34
 800ecfc:	9908      	ldr	r1, [sp, #32]
 800ecfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed06:	2900      	cmp	r1, #0
 800ed08:	d043      	beq.n	800ed92 <_dtoa_r+0x582>
 800ed0a:	494d      	ldr	r1, [pc, #308]	; (800ee40 <_dtoa_r+0x630>)
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	f7f1 fdb5 	bl	800087c <__aeabi_ddiv>
 800ed12:	4652      	mov	r2, sl
 800ed14:	465b      	mov	r3, fp
 800ed16:	f7f1 facf 	bl	80002b8 <__aeabi_dsub>
 800ed1a:	9d01      	ldr	r5, [sp, #4]
 800ed1c:	4682      	mov	sl, r0
 800ed1e:	468b      	mov	fp, r1
 800ed20:	4649      	mov	r1, r9
 800ed22:	4640      	mov	r0, r8
 800ed24:	f7f1 ff30 	bl	8000b88 <__aeabi_d2iz>
 800ed28:	4606      	mov	r6, r0
 800ed2a:	f7f1 fc13 	bl	8000554 <__aeabi_i2d>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4640      	mov	r0, r8
 800ed34:	4649      	mov	r1, r9
 800ed36:	f7f1 fabf 	bl	80002b8 <__aeabi_dsub>
 800ed3a:	3630      	adds	r6, #48	; 0x30
 800ed3c:	f805 6b01 	strb.w	r6, [r5], #1
 800ed40:	4652      	mov	r2, sl
 800ed42:	465b      	mov	r3, fp
 800ed44:	4680      	mov	r8, r0
 800ed46:	4689      	mov	r9, r1
 800ed48:	f7f1 fee0 	bl	8000b0c <__aeabi_dcmplt>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d163      	bne.n	800ee18 <_dtoa_r+0x608>
 800ed50:	4642      	mov	r2, r8
 800ed52:	464b      	mov	r3, r9
 800ed54:	4936      	ldr	r1, [pc, #216]	; (800ee30 <_dtoa_r+0x620>)
 800ed56:	2000      	movs	r0, #0
 800ed58:	f7f1 faae 	bl	80002b8 <__aeabi_dsub>
 800ed5c:	4652      	mov	r2, sl
 800ed5e:	465b      	mov	r3, fp
 800ed60:	f7f1 fed4 	bl	8000b0c <__aeabi_dcmplt>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	f040 80b5 	bne.w	800eed4 <_dtoa_r+0x6c4>
 800ed6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed6c:	429d      	cmp	r5, r3
 800ed6e:	d081      	beq.n	800ec74 <_dtoa_r+0x464>
 800ed70:	4b30      	ldr	r3, [pc, #192]	; (800ee34 <_dtoa_r+0x624>)
 800ed72:	2200      	movs	r2, #0
 800ed74:	4650      	mov	r0, sl
 800ed76:	4659      	mov	r1, fp
 800ed78:	f7f1 fc56 	bl	8000628 <__aeabi_dmul>
 800ed7c:	4b2d      	ldr	r3, [pc, #180]	; (800ee34 <_dtoa_r+0x624>)
 800ed7e:	4682      	mov	sl, r0
 800ed80:	468b      	mov	fp, r1
 800ed82:	4640      	mov	r0, r8
 800ed84:	4649      	mov	r1, r9
 800ed86:	2200      	movs	r2, #0
 800ed88:	f7f1 fc4e 	bl	8000628 <__aeabi_dmul>
 800ed8c:	4680      	mov	r8, r0
 800ed8e:	4689      	mov	r9, r1
 800ed90:	e7c6      	b.n	800ed20 <_dtoa_r+0x510>
 800ed92:	4650      	mov	r0, sl
 800ed94:	4659      	mov	r1, fp
 800ed96:	f7f1 fc47 	bl	8000628 <__aeabi_dmul>
 800ed9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed9c:	9d01      	ldr	r5, [sp, #4]
 800ed9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eda0:	4682      	mov	sl, r0
 800eda2:	468b      	mov	fp, r1
 800eda4:	4649      	mov	r1, r9
 800eda6:	4640      	mov	r0, r8
 800eda8:	f7f1 feee 	bl	8000b88 <__aeabi_d2iz>
 800edac:	4606      	mov	r6, r0
 800edae:	f7f1 fbd1 	bl	8000554 <__aeabi_i2d>
 800edb2:	3630      	adds	r6, #48	; 0x30
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4640      	mov	r0, r8
 800edba:	4649      	mov	r1, r9
 800edbc:	f7f1 fa7c 	bl	80002b8 <__aeabi_dsub>
 800edc0:	f805 6b01 	strb.w	r6, [r5], #1
 800edc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edc6:	429d      	cmp	r5, r3
 800edc8:	4680      	mov	r8, r0
 800edca:	4689      	mov	r9, r1
 800edcc:	f04f 0200 	mov.w	r2, #0
 800edd0:	d124      	bne.n	800ee1c <_dtoa_r+0x60c>
 800edd2:	4b1b      	ldr	r3, [pc, #108]	; (800ee40 <_dtoa_r+0x630>)
 800edd4:	4650      	mov	r0, sl
 800edd6:	4659      	mov	r1, fp
 800edd8:	f7f1 fa70 	bl	80002bc <__adddf3>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4640      	mov	r0, r8
 800ede2:	4649      	mov	r1, r9
 800ede4:	f7f1 feb0 	bl	8000b48 <__aeabi_dcmpgt>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d173      	bne.n	800eed4 <_dtoa_r+0x6c4>
 800edec:	4652      	mov	r2, sl
 800edee:	465b      	mov	r3, fp
 800edf0:	4913      	ldr	r1, [pc, #76]	; (800ee40 <_dtoa_r+0x630>)
 800edf2:	2000      	movs	r0, #0
 800edf4:	f7f1 fa60 	bl	80002b8 <__aeabi_dsub>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	4640      	mov	r0, r8
 800edfe:	4649      	mov	r1, r9
 800ee00:	f7f1 fe84 	bl	8000b0c <__aeabi_dcmplt>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	f43f af35 	beq.w	800ec74 <_dtoa_r+0x464>
 800ee0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee0c:	1e6b      	subs	r3, r5, #1
 800ee0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee14:	2b30      	cmp	r3, #48	; 0x30
 800ee16:	d0f8      	beq.n	800ee0a <_dtoa_r+0x5fa>
 800ee18:	9700      	str	r7, [sp, #0]
 800ee1a:	e049      	b.n	800eeb0 <_dtoa_r+0x6a0>
 800ee1c:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <_dtoa_r+0x624>)
 800ee1e:	f7f1 fc03 	bl	8000628 <__aeabi_dmul>
 800ee22:	4680      	mov	r8, r0
 800ee24:	4689      	mov	r9, r1
 800ee26:	e7bd      	b.n	800eda4 <_dtoa_r+0x594>
 800ee28:	08013b28 	.word	0x08013b28
 800ee2c:	08013b00 	.word	0x08013b00
 800ee30:	3ff00000 	.word	0x3ff00000
 800ee34:	40240000 	.word	0x40240000
 800ee38:	401c0000 	.word	0x401c0000
 800ee3c:	40140000 	.word	0x40140000
 800ee40:	3fe00000 	.word	0x3fe00000
 800ee44:	9d01      	ldr	r5, [sp, #4]
 800ee46:	4656      	mov	r6, sl
 800ee48:	465f      	mov	r7, fp
 800ee4a:	4642      	mov	r2, r8
 800ee4c:	464b      	mov	r3, r9
 800ee4e:	4630      	mov	r0, r6
 800ee50:	4639      	mov	r1, r7
 800ee52:	f7f1 fd13 	bl	800087c <__aeabi_ddiv>
 800ee56:	f7f1 fe97 	bl	8000b88 <__aeabi_d2iz>
 800ee5a:	4682      	mov	sl, r0
 800ee5c:	f7f1 fb7a 	bl	8000554 <__aeabi_i2d>
 800ee60:	4642      	mov	r2, r8
 800ee62:	464b      	mov	r3, r9
 800ee64:	f7f1 fbe0 	bl	8000628 <__aeabi_dmul>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	4639      	mov	r1, r7
 800ee70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ee74:	f7f1 fa20 	bl	80002b8 <__aeabi_dsub>
 800ee78:	f805 6b01 	strb.w	r6, [r5], #1
 800ee7c:	9e01      	ldr	r6, [sp, #4]
 800ee7e:	9f03      	ldr	r7, [sp, #12]
 800ee80:	1bae      	subs	r6, r5, r6
 800ee82:	42b7      	cmp	r7, r6
 800ee84:	4602      	mov	r2, r0
 800ee86:	460b      	mov	r3, r1
 800ee88:	d135      	bne.n	800eef6 <_dtoa_r+0x6e6>
 800ee8a:	f7f1 fa17 	bl	80002bc <__adddf3>
 800ee8e:	4642      	mov	r2, r8
 800ee90:	464b      	mov	r3, r9
 800ee92:	4606      	mov	r6, r0
 800ee94:	460f      	mov	r7, r1
 800ee96:	f7f1 fe57 	bl	8000b48 <__aeabi_dcmpgt>
 800ee9a:	b9d0      	cbnz	r0, 800eed2 <_dtoa_r+0x6c2>
 800ee9c:	4642      	mov	r2, r8
 800ee9e:	464b      	mov	r3, r9
 800eea0:	4630      	mov	r0, r6
 800eea2:	4639      	mov	r1, r7
 800eea4:	f7f1 fe28 	bl	8000af8 <__aeabi_dcmpeq>
 800eea8:	b110      	cbz	r0, 800eeb0 <_dtoa_r+0x6a0>
 800eeaa:	f01a 0f01 	tst.w	sl, #1
 800eeae:	d110      	bne.n	800eed2 <_dtoa_r+0x6c2>
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	ee18 1a10 	vmov	r1, s16
 800eeb6:	f000 fae9 	bl	800f48c <_Bfree>
 800eeba:	2300      	movs	r3, #0
 800eebc:	9800      	ldr	r0, [sp, #0]
 800eebe:	702b      	strb	r3, [r5, #0]
 800eec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eec2:	3001      	adds	r0, #1
 800eec4:	6018      	str	r0, [r3, #0]
 800eec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f43f acf1 	beq.w	800e8b0 <_dtoa_r+0xa0>
 800eece:	601d      	str	r5, [r3, #0]
 800eed0:	e4ee      	b.n	800e8b0 <_dtoa_r+0xa0>
 800eed2:	9f00      	ldr	r7, [sp, #0]
 800eed4:	462b      	mov	r3, r5
 800eed6:	461d      	mov	r5, r3
 800eed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eedc:	2a39      	cmp	r2, #57	; 0x39
 800eede:	d106      	bne.n	800eeee <_dtoa_r+0x6de>
 800eee0:	9a01      	ldr	r2, [sp, #4]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d1f7      	bne.n	800eed6 <_dtoa_r+0x6c6>
 800eee6:	9901      	ldr	r1, [sp, #4]
 800eee8:	2230      	movs	r2, #48	; 0x30
 800eeea:	3701      	adds	r7, #1
 800eeec:	700a      	strb	r2, [r1, #0]
 800eeee:	781a      	ldrb	r2, [r3, #0]
 800eef0:	3201      	adds	r2, #1
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	e790      	b.n	800ee18 <_dtoa_r+0x608>
 800eef6:	4ba6      	ldr	r3, [pc, #664]	; (800f190 <_dtoa_r+0x980>)
 800eef8:	2200      	movs	r2, #0
 800eefa:	f7f1 fb95 	bl	8000628 <__aeabi_dmul>
 800eefe:	2200      	movs	r2, #0
 800ef00:	2300      	movs	r3, #0
 800ef02:	4606      	mov	r6, r0
 800ef04:	460f      	mov	r7, r1
 800ef06:	f7f1 fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d09d      	beq.n	800ee4a <_dtoa_r+0x63a>
 800ef0e:	e7cf      	b.n	800eeb0 <_dtoa_r+0x6a0>
 800ef10:	9a08      	ldr	r2, [sp, #32]
 800ef12:	2a00      	cmp	r2, #0
 800ef14:	f000 80d7 	beq.w	800f0c6 <_dtoa_r+0x8b6>
 800ef18:	9a06      	ldr	r2, [sp, #24]
 800ef1a:	2a01      	cmp	r2, #1
 800ef1c:	f300 80ba 	bgt.w	800f094 <_dtoa_r+0x884>
 800ef20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef22:	2a00      	cmp	r2, #0
 800ef24:	f000 80b2 	beq.w	800f08c <_dtoa_r+0x87c>
 800ef28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef2c:	9e07      	ldr	r6, [sp, #28]
 800ef2e:	9d04      	ldr	r5, [sp, #16]
 800ef30:	9a04      	ldr	r2, [sp, #16]
 800ef32:	441a      	add	r2, r3
 800ef34:	9204      	str	r2, [sp, #16]
 800ef36:	9a05      	ldr	r2, [sp, #20]
 800ef38:	2101      	movs	r1, #1
 800ef3a:	441a      	add	r2, r3
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	9205      	str	r2, [sp, #20]
 800ef40:	f000 fb5c 	bl	800f5fc <__i2b>
 800ef44:	4607      	mov	r7, r0
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	dd0c      	ble.n	800ef64 <_dtoa_r+0x754>
 800ef4a:	9b05      	ldr	r3, [sp, #20]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	dd09      	ble.n	800ef64 <_dtoa_r+0x754>
 800ef50:	42ab      	cmp	r3, r5
 800ef52:	9a04      	ldr	r2, [sp, #16]
 800ef54:	bfa8      	it	ge
 800ef56:	462b      	movge	r3, r5
 800ef58:	1ad2      	subs	r2, r2, r3
 800ef5a:	9204      	str	r2, [sp, #16]
 800ef5c:	9a05      	ldr	r2, [sp, #20]
 800ef5e:	1aed      	subs	r5, r5, r3
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	9305      	str	r3, [sp, #20]
 800ef64:	9b07      	ldr	r3, [sp, #28]
 800ef66:	b31b      	cbz	r3, 800efb0 <_dtoa_r+0x7a0>
 800ef68:	9b08      	ldr	r3, [sp, #32]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	f000 80af 	beq.w	800f0ce <_dtoa_r+0x8be>
 800ef70:	2e00      	cmp	r6, #0
 800ef72:	dd13      	ble.n	800ef9c <_dtoa_r+0x78c>
 800ef74:	4639      	mov	r1, r7
 800ef76:	4632      	mov	r2, r6
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f000 fbff 	bl	800f77c <__pow5mult>
 800ef7e:	ee18 2a10 	vmov	r2, s16
 800ef82:	4601      	mov	r1, r0
 800ef84:	4607      	mov	r7, r0
 800ef86:	4620      	mov	r0, r4
 800ef88:	f000 fb4e 	bl	800f628 <__multiply>
 800ef8c:	ee18 1a10 	vmov	r1, s16
 800ef90:	4680      	mov	r8, r0
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fa7a 	bl	800f48c <_Bfree>
 800ef98:	ee08 8a10 	vmov	s16, r8
 800ef9c:	9b07      	ldr	r3, [sp, #28]
 800ef9e:	1b9a      	subs	r2, r3, r6
 800efa0:	d006      	beq.n	800efb0 <_dtoa_r+0x7a0>
 800efa2:	ee18 1a10 	vmov	r1, s16
 800efa6:	4620      	mov	r0, r4
 800efa8:	f000 fbe8 	bl	800f77c <__pow5mult>
 800efac:	ee08 0a10 	vmov	s16, r0
 800efb0:	2101      	movs	r1, #1
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 fb22 	bl	800f5fc <__i2b>
 800efb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efba:	2b00      	cmp	r3, #0
 800efbc:	4606      	mov	r6, r0
 800efbe:	f340 8088 	ble.w	800f0d2 <_dtoa_r+0x8c2>
 800efc2:	461a      	mov	r2, r3
 800efc4:	4601      	mov	r1, r0
 800efc6:	4620      	mov	r0, r4
 800efc8:	f000 fbd8 	bl	800f77c <__pow5mult>
 800efcc:	9b06      	ldr	r3, [sp, #24]
 800efce:	2b01      	cmp	r3, #1
 800efd0:	4606      	mov	r6, r0
 800efd2:	f340 8081 	ble.w	800f0d8 <_dtoa_r+0x8c8>
 800efd6:	f04f 0800 	mov.w	r8, #0
 800efda:	6933      	ldr	r3, [r6, #16]
 800efdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800efe0:	6918      	ldr	r0, [r3, #16]
 800efe2:	f000 fabb 	bl	800f55c <__hi0bits>
 800efe6:	f1c0 0020 	rsb	r0, r0, #32
 800efea:	9b05      	ldr	r3, [sp, #20]
 800efec:	4418      	add	r0, r3
 800efee:	f010 001f 	ands.w	r0, r0, #31
 800eff2:	f000 8092 	beq.w	800f11a <_dtoa_r+0x90a>
 800eff6:	f1c0 0320 	rsb	r3, r0, #32
 800effa:	2b04      	cmp	r3, #4
 800effc:	f340 808a 	ble.w	800f114 <_dtoa_r+0x904>
 800f000:	f1c0 001c 	rsb	r0, r0, #28
 800f004:	9b04      	ldr	r3, [sp, #16]
 800f006:	4403      	add	r3, r0
 800f008:	9304      	str	r3, [sp, #16]
 800f00a:	9b05      	ldr	r3, [sp, #20]
 800f00c:	4403      	add	r3, r0
 800f00e:	4405      	add	r5, r0
 800f010:	9305      	str	r3, [sp, #20]
 800f012:	9b04      	ldr	r3, [sp, #16]
 800f014:	2b00      	cmp	r3, #0
 800f016:	dd07      	ble.n	800f028 <_dtoa_r+0x818>
 800f018:	ee18 1a10 	vmov	r1, s16
 800f01c:	461a      	mov	r2, r3
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 fc06 	bl	800f830 <__lshift>
 800f024:	ee08 0a10 	vmov	s16, r0
 800f028:	9b05      	ldr	r3, [sp, #20]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	dd05      	ble.n	800f03a <_dtoa_r+0x82a>
 800f02e:	4631      	mov	r1, r6
 800f030:	461a      	mov	r2, r3
 800f032:	4620      	mov	r0, r4
 800f034:	f000 fbfc 	bl	800f830 <__lshift>
 800f038:	4606      	mov	r6, r0
 800f03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d06e      	beq.n	800f11e <_dtoa_r+0x90e>
 800f040:	ee18 0a10 	vmov	r0, s16
 800f044:	4631      	mov	r1, r6
 800f046:	f000 fc63 	bl	800f910 <__mcmp>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	da67      	bge.n	800f11e <_dtoa_r+0x90e>
 800f04e:	9b00      	ldr	r3, [sp, #0]
 800f050:	3b01      	subs	r3, #1
 800f052:	ee18 1a10 	vmov	r1, s16
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	220a      	movs	r2, #10
 800f05a:	2300      	movs	r3, #0
 800f05c:	4620      	mov	r0, r4
 800f05e:	f000 fa37 	bl	800f4d0 <__multadd>
 800f062:	9b08      	ldr	r3, [sp, #32]
 800f064:	ee08 0a10 	vmov	s16, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	f000 81b1 	beq.w	800f3d0 <_dtoa_r+0xbc0>
 800f06e:	2300      	movs	r3, #0
 800f070:	4639      	mov	r1, r7
 800f072:	220a      	movs	r2, #10
 800f074:	4620      	mov	r0, r4
 800f076:	f000 fa2b 	bl	800f4d0 <__multadd>
 800f07a:	9b02      	ldr	r3, [sp, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	4607      	mov	r7, r0
 800f080:	f300 808e 	bgt.w	800f1a0 <_dtoa_r+0x990>
 800f084:	9b06      	ldr	r3, [sp, #24]
 800f086:	2b02      	cmp	r3, #2
 800f088:	dc51      	bgt.n	800f12e <_dtoa_r+0x91e>
 800f08a:	e089      	b.n	800f1a0 <_dtoa_r+0x990>
 800f08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f092:	e74b      	b.n	800ef2c <_dtoa_r+0x71c>
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	1e5e      	subs	r6, r3, #1
 800f098:	9b07      	ldr	r3, [sp, #28]
 800f09a:	42b3      	cmp	r3, r6
 800f09c:	bfbf      	itttt	lt
 800f09e:	9b07      	ldrlt	r3, [sp, #28]
 800f0a0:	9607      	strlt	r6, [sp, #28]
 800f0a2:	1af2      	sublt	r2, r6, r3
 800f0a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f0a6:	bfb6      	itet	lt
 800f0a8:	189b      	addlt	r3, r3, r2
 800f0aa:	1b9e      	subge	r6, r3, r6
 800f0ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f0ae:	9b03      	ldr	r3, [sp, #12]
 800f0b0:	bfb8      	it	lt
 800f0b2:	2600      	movlt	r6, #0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	bfb7      	itett	lt
 800f0b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f0bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f0c0:	1a9d      	sublt	r5, r3, r2
 800f0c2:	2300      	movlt	r3, #0
 800f0c4:	e734      	b.n	800ef30 <_dtoa_r+0x720>
 800f0c6:	9e07      	ldr	r6, [sp, #28]
 800f0c8:	9d04      	ldr	r5, [sp, #16]
 800f0ca:	9f08      	ldr	r7, [sp, #32]
 800f0cc:	e73b      	b.n	800ef46 <_dtoa_r+0x736>
 800f0ce:	9a07      	ldr	r2, [sp, #28]
 800f0d0:	e767      	b.n	800efa2 <_dtoa_r+0x792>
 800f0d2:	9b06      	ldr	r3, [sp, #24]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	dc18      	bgt.n	800f10a <_dtoa_r+0x8fa>
 800f0d8:	f1ba 0f00 	cmp.w	sl, #0
 800f0dc:	d115      	bne.n	800f10a <_dtoa_r+0x8fa>
 800f0de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0e2:	b993      	cbnz	r3, 800f10a <_dtoa_r+0x8fa>
 800f0e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0e8:	0d1b      	lsrs	r3, r3, #20
 800f0ea:	051b      	lsls	r3, r3, #20
 800f0ec:	b183      	cbz	r3, 800f110 <_dtoa_r+0x900>
 800f0ee:	9b04      	ldr	r3, [sp, #16]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	9304      	str	r3, [sp, #16]
 800f0f4:	9b05      	ldr	r3, [sp, #20]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	9305      	str	r3, [sp, #20]
 800f0fa:	f04f 0801 	mov.w	r8, #1
 800f0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f100:	2b00      	cmp	r3, #0
 800f102:	f47f af6a 	bne.w	800efda <_dtoa_r+0x7ca>
 800f106:	2001      	movs	r0, #1
 800f108:	e76f      	b.n	800efea <_dtoa_r+0x7da>
 800f10a:	f04f 0800 	mov.w	r8, #0
 800f10e:	e7f6      	b.n	800f0fe <_dtoa_r+0x8ee>
 800f110:	4698      	mov	r8, r3
 800f112:	e7f4      	b.n	800f0fe <_dtoa_r+0x8ee>
 800f114:	f43f af7d 	beq.w	800f012 <_dtoa_r+0x802>
 800f118:	4618      	mov	r0, r3
 800f11a:	301c      	adds	r0, #28
 800f11c:	e772      	b.n	800f004 <_dtoa_r+0x7f4>
 800f11e:	9b03      	ldr	r3, [sp, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	dc37      	bgt.n	800f194 <_dtoa_r+0x984>
 800f124:	9b06      	ldr	r3, [sp, #24]
 800f126:	2b02      	cmp	r3, #2
 800f128:	dd34      	ble.n	800f194 <_dtoa_r+0x984>
 800f12a:	9b03      	ldr	r3, [sp, #12]
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	9b02      	ldr	r3, [sp, #8]
 800f130:	b96b      	cbnz	r3, 800f14e <_dtoa_r+0x93e>
 800f132:	4631      	mov	r1, r6
 800f134:	2205      	movs	r2, #5
 800f136:	4620      	mov	r0, r4
 800f138:	f000 f9ca 	bl	800f4d0 <__multadd>
 800f13c:	4601      	mov	r1, r0
 800f13e:	4606      	mov	r6, r0
 800f140:	ee18 0a10 	vmov	r0, s16
 800f144:	f000 fbe4 	bl	800f910 <__mcmp>
 800f148:	2800      	cmp	r0, #0
 800f14a:	f73f adbb 	bgt.w	800ecc4 <_dtoa_r+0x4b4>
 800f14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f150:	9d01      	ldr	r5, [sp, #4]
 800f152:	43db      	mvns	r3, r3
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	f04f 0800 	mov.w	r8, #0
 800f15a:	4631      	mov	r1, r6
 800f15c:	4620      	mov	r0, r4
 800f15e:	f000 f995 	bl	800f48c <_Bfree>
 800f162:	2f00      	cmp	r7, #0
 800f164:	f43f aea4 	beq.w	800eeb0 <_dtoa_r+0x6a0>
 800f168:	f1b8 0f00 	cmp.w	r8, #0
 800f16c:	d005      	beq.n	800f17a <_dtoa_r+0x96a>
 800f16e:	45b8      	cmp	r8, r7
 800f170:	d003      	beq.n	800f17a <_dtoa_r+0x96a>
 800f172:	4641      	mov	r1, r8
 800f174:	4620      	mov	r0, r4
 800f176:	f000 f989 	bl	800f48c <_Bfree>
 800f17a:	4639      	mov	r1, r7
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 f985 	bl	800f48c <_Bfree>
 800f182:	e695      	b.n	800eeb0 <_dtoa_r+0x6a0>
 800f184:	2600      	movs	r6, #0
 800f186:	4637      	mov	r7, r6
 800f188:	e7e1      	b.n	800f14e <_dtoa_r+0x93e>
 800f18a:	9700      	str	r7, [sp, #0]
 800f18c:	4637      	mov	r7, r6
 800f18e:	e599      	b.n	800ecc4 <_dtoa_r+0x4b4>
 800f190:	40240000 	.word	0x40240000
 800f194:	9b08      	ldr	r3, [sp, #32]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f000 80ca 	beq.w	800f330 <_dtoa_r+0xb20>
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	9302      	str	r3, [sp, #8]
 800f1a0:	2d00      	cmp	r5, #0
 800f1a2:	dd05      	ble.n	800f1b0 <_dtoa_r+0x9a0>
 800f1a4:	4639      	mov	r1, r7
 800f1a6:	462a      	mov	r2, r5
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 fb41 	bl	800f830 <__lshift>
 800f1ae:	4607      	mov	r7, r0
 800f1b0:	f1b8 0f00 	cmp.w	r8, #0
 800f1b4:	d05b      	beq.n	800f26e <_dtoa_r+0xa5e>
 800f1b6:	6879      	ldr	r1, [r7, #4]
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 f927 	bl	800f40c <_Balloc>
 800f1be:	4605      	mov	r5, r0
 800f1c0:	b928      	cbnz	r0, 800f1ce <_dtoa_r+0x9be>
 800f1c2:	4b87      	ldr	r3, [pc, #540]	; (800f3e0 <_dtoa_r+0xbd0>)
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f1ca:	f7ff bb3b 	b.w	800e844 <_dtoa_r+0x34>
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	3202      	adds	r2, #2
 800f1d2:	0092      	lsls	r2, r2, #2
 800f1d4:	f107 010c 	add.w	r1, r7, #12
 800f1d8:	300c      	adds	r0, #12
 800f1da:	f7fe fcfb 	bl	800dbd4 <memcpy>
 800f1de:	2201      	movs	r2, #1
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 fb24 	bl	800f830 <__lshift>
 800f1e8:	9b01      	ldr	r3, [sp, #4]
 800f1ea:	f103 0901 	add.w	r9, r3, #1
 800f1ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f1f2:	4413      	add	r3, r2
 800f1f4:	9305      	str	r3, [sp, #20]
 800f1f6:	f00a 0301 	and.w	r3, sl, #1
 800f1fa:	46b8      	mov	r8, r7
 800f1fc:	9304      	str	r3, [sp, #16]
 800f1fe:	4607      	mov	r7, r0
 800f200:	4631      	mov	r1, r6
 800f202:	ee18 0a10 	vmov	r0, s16
 800f206:	f7ff fa75 	bl	800e6f4 <quorem>
 800f20a:	4641      	mov	r1, r8
 800f20c:	9002      	str	r0, [sp, #8]
 800f20e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f212:	ee18 0a10 	vmov	r0, s16
 800f216:	f000 fb7b 	bl	800f910 <__mcmp>
 800f21a:	463a      	mov	r2, r7
 800f21c:	9003      	str	r0, [sp, #12]
 800f21e:	4631      	mov	r1, r6
 800f220:	4620      	mov	r0, r4
 800f222:	f000 fb91 	bl	800f948 <__mdiff>
 800f226:	68c2      	ldr	r2, [r0, #12]
 800f228:	f109 3bff 	add.w	fp, r9, #4294967295
 800f22c:	4605      	mov	r5, r0
 800f22e:	bb02      	cbnz	r2, 800f272 <_dtoa_r+0xa62>
 800f230:	4601      	mov	r1, r0
 800f232:	ee18 0a10 	vmov	r0, s16
 800f236:	f000 fb6b 	bl	800f910 <__mcmp>
 800f23a:	4602      	mov	r2, r0
 800f23c:	4629      	mov	r1, r5
 800f23e:	4620      	mov	r0, r4
 800f240:	9207      	str	r2, [sp, #28]
 800f242:	f000 f923 	bl	800f48c <_Bfree>
 800f246:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f24a:	ea43 0102 	orr.w	r1, r3, r2
 800f24e:	9b04      	ldr	r3, [sp, #16]
 800f250:	430b      	orrs	r3, r1
 800f252:	464d      	mov	r5, r9
 800f254:	d10f      	bne.n	800f276 <_dtoa_r+0xa66>
 800f256:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f25a:	d02a      	beq.n	800f2b2 <_dtoa_r+0xaa2>
 800f25c:	9b03      	ldr	r3, [sp, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	dd02      	ble.n	800f268 <_dtoa_r+0xa58>
 800f262:	9b02      	ldr	r3, [sp, #8]
 800f264:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f268:	f88b a000 	strb.w	sl, [fp]
 800f26c:	e775      	b.n	800f15a <_dtoa_r+0x94a>
 800f26e:	4638      	mov	r0, r7
 800f270:	e7ba      	b.n	800f1e8 <_dtoa_r+0x9d8>
 800f272:	2201      	movs	r2, #1
 800f274:	e7e2      	b.n	800f23c <_dtoa_r+0xa2c>
 800f276:	9b03      	ldr	r3, [sp, #12]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	db04      	blt.n	800f286 <_dtoa_r+0xa76>
 800f27c:	9906      	ldr	r1, [sp, #24]
 800f27e:	430b      	orrs	r3, r1
 800f280:	9904      	ldr	r1, [sp, #16]
 800f282:	430b      	orrs	r3, r1
 800f284:	d122      	bne.n	800f2cc <_dtoa_r+0xabc>
 800f286:	2a00      	cmp	r2, #0
 800f288:	ddee      	ble.n	800f268 <_dtoa_r+0xa58>
 800f28a:	ee18 1a10 	vmov	r1, s16
 800f28e:	2201      	movs	r2, #1
 800f290:	4620      	mov	r0, r4
 800f292:	f000 facd 	bl	800f830 <__lshift>
 800f296:	4631      	mov	r1, r6
 800f298:	ee08 0a10 	vmov	s16, r0
 800f29c:	f000 fb38 	bl	800f910 <__mcmp>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	dc03      	bgt.n	800f2ac <_dtoa_r+0xa9c>
 800f2a4:	d1e0      	bne.n	800f268 <_dtoa_r+0xa58>
 800f2a6:	f01a 0f01 	tst.w	sl, #1
 800f2aa:	d0dd      	beq.n	800f268 <_dtoa_r+0xa58>
 800f2ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2b0:	d1d7      	bne.n	800f262 <_dtoa_r+0xa52>
 800f2b2:	2339      	movs	r3, #57	; 0x39
 800f2b4:	f88b 3000 	strb.w	r3, [fp]
 800f2b8:	462b      	mov	r3, r5
 800f2ba:	461d      	mov	r5, r3
 800f2bc:	3b01      	subs	r3, #1
 800f2be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f2c2:	2a39      	cmp	r2, #57	; 0x39
 800f2c4:	d071      	beq.n	800f3aa <_dtoa_r+0xb9a>
 800f2c6:	3201      	adds	r2, #1
 800f2c8:	701a      	strb	r2, [r3, #0]
 800f2ca:	e746      	b.n	800f15a <_dtoa_r+0x94a>
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	dd07      	ble.n	800f2e0 <_dtoa_r+0xad0>
 800f2d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2d4:	d0ed      	beq.n	800f2b2 <_dtoa_r+0xaa2>
 800f2d6:	f10a 0301 	add.w	r3, sl, #1
 800f2da:	f88b 3000 	strb.w	r3, [fp]
 800f2de:	e73c      	b.n	800f15a <_dtoa_r+0x94a>
 800f2e0:	9b05      	ldr	r3, [sp, #20]
 800f2e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f2e6:	4599      	cmp	r9, r3
 800f2e8:	d047      	beq.n	800f37a <_dtoa_r+0xb6a>
 800f2ea:	ee18 1a10 	vmov	r1, s16
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	220a      	movs	r2, #10
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f000 f8ec 	bl	800f4d0 <__multadd>
 800f2f8:	45b8      	cmp	r8, r7
 800f2fa:	ee08 0a10 	vmov	s16, r0
 800f2fe:	f04f 0300 	mov.w	r3, #0
 800f302:	f04f 020a 	mov.w	r2, #10
 800f306:	4641      	mov	r1, r8
 800f308:	4620      	mov	r0, r4
 800f30a:	d106      	bne.n	800f31a <_dtoa_r+0xb0a>
 800f30c:	f000 f8e0 	bl	800f4d0 <__multadd>
 800f310:	4680      	mov	r8, r0
 800f312:	4607      	mov	r7, r0
 800f314:	f109 0901 	add.w	r9, r9, #1
 800f318:	e772      	b.n	800f200 <_dtoa_r+0x9f0>
 800f31a:	f000 f8d9 	bl	800f4d0 <__multadd>
 800f31e:	4639      	mov	r1, r7
 800f320:	4680      	mov	r8, r0
 800f322:	2300      	movs	r3, #0
 800f324:	220a      	movs	r2, #10
 800f326:	4620      	mov	r0, r4
 800f328:	f000 f8d2 	bl	800f4d0 <__multadd>
 800f32c:	4607      	mov	r7, r0
 800f32e:	e7f1      	b.n	800f314 <_dtoa_r+0xb04>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	9302      	str	r3, [sp, #8]
 800f334:	9d01      	ldr	r5, [sp, #4]
 800f336:	ee18 0a10 	vmov	r0, s16
 800f33a:	4631      	mov	r1, r6
 800f33c:	f7ff f9da 	bl	800e6f4 <quorem>
 800f340:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f344:	9b01      	ldr	r3, [sp, #4]
 800f346:	f805 ab01 	strb.w	sl, [r5], #1
 800f34a:	1aea      	subs	r2, r5, r3
 800f34c:	9b02      	ldr	r3, [sp, #8]
 800f34e:	4293      	cmp	r3, r2
 800f350:	dd09      	ble.n	800f366 <_dtoa_r+0xb56>
 800f352:	ee18 1a10 	vmov	r1, s16
 800f356:	2300      	movs	r3, #0
 800f358:	220a      	movs	r2, #10
 800f35a:	4620      	mov	r0, r4
 800f35c:	f000 f8b8 	bl	800f4d0 <__multadd>
 800f360:	ee08 0a10 	vmov	s16, r0
 800f364:	e7e7      	b.n	800f336 <_dtoa_r+0xb26>
 800f366:	9b02      	ldr	r3, [sp, #8]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	bfc8      	it	gt
 800f36c:	461d      	movgt	r5, r3
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	bfd8      	it	le
 800f372:	2501      	movle	r5, #1
 800f374:	441d      	add	r5, r3
 800f376:	f04f 0800 	mov.w	r8, #0
 800f37a:	ee18 1a10 	vmov	r1, s16
 800f37e:	2201      	movs	r2, #1
 800f380:	4620      	mov	r0, r4
 800f382:	f000 fa55 	bl	800f830 <__lshift>
 800f386:	4631      	mov	r1, r6
 800f388:	ee08 0a10 	vmov	s16, r0
 800f38c:	f000 fac0 	bl	800f910 <__mcmp>
 800f390:	2800      	cmp	r0, #0
 800f392:	dc91      	bgt.n	800f2b8 <_dtoa_r+0xaa8>
 800f394:	d102      	bne.n	800f39c <_dtoa_r+0xb8c>
 800f396:	f01a 0f01 	tst.w	sl, #1
 800f39a:	d18d      	bne.n	800f2b8 <_dtoa_r+0xaa8>
 800f39c:	462b      	mov	r3, r5
 800f39e:	461d      	mov	r5, r3
 800f3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3a4:	2a30      	cmp	r2, #48	; 0x30
 800f3a6:	d0fa      	beq.n	800f39e <_dtoa_r+0xb8e>
 800f3a8:	e6d7      	b.n	800f15a <_dtoa_r+0x94a>
 800f3aa:	9a01      	ldr	r2, [sp, #4]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d184      	bne.n	800f2ba <_dtoa_r+0xaaa>
 800f3b0:	9b00      	ldr	r3, [sp, #0]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	2331      	movs	r3, #49	; 0x31
 800f3b8:	7013      	strb	r3, [r2, #0]
 800f3ba:	e6ce      	b.n	800f15a <_dtoa_r+0x94a>
 800f3bc:	4b09      	ldr	r3, [pc, #36]	; (800f3e4 <_dtoa_r+0xbd4>)
 800f3be:	f7ff ba95 	b.w	800e8ec <_dtoa_r+0xdc>
 800f3c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f47f aa6e 	bne.w	800e8a6 <_dtoa_r+0x96>
 800f3ca:	4b07      	ldr	r3, [pc, #28]	; (800f3e8 <_dtoa_r+0xbd8>)
 800f3cc:	f7ff ba8e 	b.w	800e8ec <_dtoa_r+0xdc>
 800f3d0:	9b02      	ldr	r3, [sp, #8]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	dcae      	bgt.n	800f334 <_dtoa_r+0xb24>
 800f3d6:	9b06      	ldr	r3, [sp, #24]
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	f73f aea8 	bgt.w	800f12e <_dtoa_r+0x91e>
 800f3de:	e7a9      	b.n	800f334 <_dtoa_r+0xb24>
 800f3e0:	08013a8f 	.word	0x08013a8f
 800f3e4:	080139ec 	.word	0x080139ec
 800f3e8:	08013a10 	.word	0x08013a10

0800f3ec <_localeconv_r>:
 800f3ec:	4800      	ldr	r0, [pc, #0]	; (800f3f0 <_localeconv_r+0x4>)
 800f3ee:	4770      	bx	lr
 800f3f0:	20000194 	.word	0x20000194

0800f3f4 <__malloc_lock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_lock+0x8>)
 800f3f6:	f000 bd30 	b.w	800fe5a <__retarget_lock_acquire_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	2000dc48 	.word	0x2000dc48

0800f400 <__malloc_unlock>:
 800f400:	4801      	ldr	r0, [pc, #4]	; (800f408 <__malloc_unlock+0x8>)
 800f402:	f000 bd2b 	b.w	800fe5c <__retarget_lock_release_recursive>
 800f406:	bf00      	nop
 800f408:	2000dc48 	.word	0x2000dc48

0800f40c <_Balloc>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f410:	4604      	mov	r4, r0
 800f412:	460d      	mov	r5, r1
 800f414:	b976      	cbnz	r6, 800f434 <_Balloc+0x28>
 800f416:	2010      	movs	r0, #16
 800f418:	f7fe fbd4 	bl	800dbc4 <malloc>
 800f41c:	4602      	mov	r2, r0
 800f41e:	6260      	str	r0, [r4, #36]	; 0x24
 800f420:	b920      	cbnz	r0, 800f42c <_Balloc+0x20>
 800f422:	4b18      	ldr	r3, [pc, #96]	; (800f484 <_Balloc+0x78>)
 800f424:	4818      	ldr	r0, [pc, #96]	; (800f488 <_Balloc+0x7c>)
 800f426:	2166      	movs	r1, #102	; 0x66
 800f428:	f000 fce6 	bl	800fdf8 <__assert_func>
 800f42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f430:	6006      	str	r6, [r0, #0]
 800f432:	60c6      	str	r6, [r0, #12]
 800f434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f436:	68f3      	ldr	r3, [r6, #12]
 800f438:	b183      	cbz	r3, 800f45c <_Balloc+0x50>
 800f43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f442:	b9b8      	cbnz	r0, 800f474 <_Balloc+0x68>
 800f444:	2101      	movs	r1, #1
 800f446:	fa01 f605 	lsl.w	r6, r1, r5
 800f44a:	1d72      	adds	r2, r6, #5
 800f44c:	0092      	lsls	r2, r2, #2
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 fb60 	bl	800fb14 <_calloc_r>
 800f454:	b160      	cbz	r0, 800f470 <_Balloc+0x64>
 800f456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f45a:	e00e      	b.n	800f47a <_Balloc+0x6e>
 800f45c:	2221      	movs	r2, #33	; 0x21
 800f45e:	2104      	movs	r1, #4
 800f460:	4620      	mov	r0, r4
 800f462:	f000 fb57 	bl	800fb14 <_calloc_r>
 800f466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f468:	60f0      	str	r0, [r6, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1e4      	bne.n	800f43a <_Balloc+0x2e>
 800f470:	2000      	movs	r0, #0
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	6802      	ldr	r2, [r0, #0]
 800f476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f47a:	2300      	movs	r3, #0
 800f47c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f480:	e7f7      	b.n	800f472 <_Balloc+0x66>
 800f482:	bf00      	nop
 800f484:	08013a1d 	.word	0x08013a1d
 800f488:	08013aa0 	.word	0x08013aa0

0800f48c <_Bfree>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f490:	4605      	mov	r5, r0
 800f492:	460c      	mov	r4, r1
 800f494:	b976      	cbnz	r6, 800f4b4 <_Bfree+0x28>
 800f496:	2010      	movs	r0, #16
 800f498:	f7fe fb94 	bl	800dbc4 <malloc>
 800f49c:	4602      	mov	r2, r0
 800f49e:	6268      	str	r0, [r5, #36]	; 0x24
 800f4a0:	b920      	cbnz	r0, 800f4ac <_Bfree+0x20>
 800f4a2:	4b09      	ldr	r3, [pc, #36]	; (800f4c8 <_Bfree+0x3c>)
 800f4a4:	4809      	ldr	r0, [pc, #36]	; (800f4cc <_Bfree+0x40>)
 800f4a6:	218a      	movs	r1, #138	; 0x8a
 800f4a8:	f000 fca6 	bl	800fdf8 <__assert_func>
 800f4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4b0:	6006      	str	r6, [r0, #0]
 800f4b2:	60c6      	str	r6, [r0, #12]
 800f4b4:	b13c      	cbz	r4, 800f4c6 <_Bfree+0x3a>
 800f4b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f4b8:	6862      	ldr	r2, [r4, #4]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4c0:	6021      	str	r1, [r4, #0]
 800f4c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4c6:	bd70      	pop	{r4, r5, r6, pc}
 800f4c8:	08013a1d 	.word	0x08013a1d
 800f4cc:	08013aa0 	.word	0x08013aa0

0800f4d0 <__multadd>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	690d      	ldr	r5, [r1, #16]
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	460c      	mov	r4, r1
 800f4da:	461e      	mov	r6, r3
 800f4dc:	f101 0c14 	add.w	ip, r1, #20
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	f8dc 3000 	ldr.w	r3, [ip]
 800f4e6:	b299      	uxth	r1, r3
 800f4e8:	fb02 6101 	mla	r1, r2, r1, r6
 800f4ec:	0c1e      	lsrs	r6, r3, #16
 800f4ee:	0c0b      	lsrs	r3, r1, #16
 800f4f0:	fb02 3306 	mla	r3, r2, r6, r3
 800f4f4:	b289      	uxth	r1, r1
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4fc:	4285      	cmp	r5, r0
 800f4fe:	f84c 1b04 	str.w	r1, [ip], #4
 800f502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f506:	dcec      	bgt.n	800f4e2 <__multadd+0x12>
 800f508:	b30e      	cbz	r6, 800f54e <__multadd+0x7e>
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	42ab      	cmp	r3, r5
 800f50e:	dc19      	bgt.n	800f544 <__multadd+0x74>
 800f510:	6861      	ldr	r1, [r4, #4]
 800f512:	4638      	mov	r0, r7
 800f514:	3101      	adds	r1, #1
 800f516:	f7ff ff79 	bl	800f40c <_Balloc>
 800f51a:	4680      	mov	r8, r0
 800f51c:	b928      	cbnz	r0, 800f52a <__multadd+0x5a>
 800f51e:	4602      	mov	r2, r0
 800f520:	4b0c      	ldr	r3, [pc, #48]	; (800f554 <__multadd+0x84>)
 800f522:	480d      	ldr	r0, [pc, #52]	; (800f558 <__multadd+0x88>)
 800f524:	21b5      	movs	r1, #181	; 0xb5
 800f526:	f000 fc67 	bl	800fdf8 <__assert_func>
 800f52a:	6922      	ldr	r2, [r4, #16]
 800f52c:	3202      	adds	r2, #2
 800f52e:	f104 010c 	add.w	r1, r4, #12
 800f532:	0092      	lsls	r2, r2, #2
 800f534:	300c      	adds	r0, #12
 800f536:	f7fe fb4d 	bl	800dbd4 <memcpy>
 800f53a:	4621      	mov	r1, r4
 800f53c:	4638      	mov	r0, r7
 800f53e:	f7ff ffa5 	bl	800f48c <_Bfree>
 800f542:	4644      	mov	r4, r8
 800f544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f548:	3501      	adds	r5, #1
 800f54a:	615e      	str	r6, [r3, #20]
 800f54c:	6125      	str	r5, [r4, #16]
 800f54e:	4620      	mov	r0, r4
 800f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f554:	08013a8f 	.word	0x08013a8f
 800f558:	08013aa0 	.word	0x08013aa0

0800f55c <__hi0bits>:
 800f55c:	0c03      	lsrs	r3, r0, #16
 800f55e:	041b      	lsls	r3, r3, #16
 800f560:	b9d3      	cbnz	r3, 800f598 <__hi0bits+0x3c>
 800f562:	0400      	lsls	r0, r0, #16
 800f564:	2310      	movs	r3, #16
 800f566:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f56a:	bf04      	itt	eq
 800f56c:	0200      	lsleq	r0, r0, #8
 800f56e:	3308      	addeq	r3, #8
 800f570:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f574:	bf04      	itt	eq
 800f576:	0100      	lsleq	r0, r0, #4
 800f578:	3304      	addeq	r3, #4
 800f57a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f57e:	bf04      	itt	eq
 800f580:	0080      	lsleq	r0, r0, #2
 800f582:	3302      	addeq	r3, #2
 800f584:	2800      	cmp	r0, #0
 800f586:	db05      	blt.n	800f594 <__hi0bits+0x38>
 800f588:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f58c:	f103 0301 	add.w	r3, r3, #1
 800f590:	bf08      	it	eq
 800f592:	2320      	moveq	r3, #32
 800f594:	4618      	mov	r0, r3
 800f596:	4770      	bx	lr
 800f598:	2300      	movs	r3, #0
 800f59a:	e7e4      	b.n	800f566 <__hi0bits+0xa>

0800f59c <__lo0bits>:
 800f59c:	6803      	ldr	r3, [r0, #0]
 800f59e:	f013 0207 	ands.w	r2, r3, #7
 800f5a2:	4601      	mov	r1, r0
 800f5a4:	d00b      	beq.n	800f5be <__lo0bits+0x22>
 800f5a6:	07da      	lsls	r2, r3, #31
 800f5a8:	d423      	bmi.n	800f5f2 <__lo0bits+0x56>
 800f5aa:	0798      	lsls	r0, r3, #30
 800f5ac:	bf49      	itett	mi
 800f5ae:	085b      	lsrmi	r3, r3, #1
 800f5b0:	089b      	lsrpl	r3, r3, #2
 800f5b2:	2001      	movmi	r0, #1
 800f5b4:	600b      	strmi	r3, [r1, #0]
 800f5b6:	bf5c      	itt	pl
 800f5b8:	600b      	strpl	r3, [r1, #0]
 800f5ba:	2002      	movpl	r0, #2
 800f5bc:	4770      	bx	lr
 800f5be:	b298      	uxth	r0, r3
 800f5c0:	b9a8      	cbnz	r0, 800f5ee <__lo0bits+0x52>
 800f5c2:	0c1b      	lsrs	r3, r3, #16
 800f5c4:	2010      	movs	r0, #16
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	b90a      	cbnz	r2, 800f5ce <__lo0bits+0x32>
 800f5ca:	3008      	adds	r0, #8
 800f5cc:	0a1b      	lsrs	r3, r3, #8
 800f5ce:	071a      	lsls	r2, r3, #28
 800f5d0:	bf04      	itt	eq
 800f5d2:	091b      	lsreq	r3, r3, #4
 800f5d4:	3004      	addeq	r0, #4
 800f5d6:	079a      	lsls	r2, r3, #30
 800f5d8:	bf04      	itt	eq
 800f5da:	089b      	lsreq	r3, r3, #2
 800f5dc:	3002      	addeq	r0, #2
 800f5de:	07da      	lsls	r2, r3, #31
 800f5e0:	d403      	bmi.n	800f5ea <__lo0bits+0x4e>
 800f5e2:	085b      	lsrs	r3, r3, #1
 800f5e4:	f100 0001 	add.w	r0, r0, #1
 800f5e8:	d005      	beq.n	800f5f6 <__lo0bits+0x5a>
 800f5ea:	600b      	str	r3, [r1, #0]
 800f5ec:	4770      	bx	lr
 800f5ee:	4610      	mov	r0, r2
 800f5f0:	e7e9      	b.n	800f5c6 <__lo0bits+0x2a>
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	4770      	bx	lr
 800f5f6:	2020      	movs	r0, #32
 800f5f8:	4770      	bx	lr
	...

0800f5fc <__i2b>:
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	460c      	mov	r4, r1
 800f600:	2101      	movs	r1, #1
 800f602:	f7ff ff03 	bl	800f40c <_Balloc>
 800f606:	4602      	mov	r2, r0
 800f608:	b928      	cbnz	r0, 800f616 <__i2b+0x1a>
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <__i2b+0x24>)
 800f60c:	4805      	ldr	r0, [pc, #20]	; (800f624 <__i2b+0x28>)
 800f60e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f612:	f000 fbf1 	bl	800fdf8 <__assert_func>
 800f616:	2301      	movs	r3, #1
 800f618:	6144      	str	r4, [r0, #20]
 800f61a:	6103      	str	r3, [r0, #16]
 800f61c:	bd10      	pop	{r4, pc}
 800f61e:	bf00      	nop
 800f620:	08013a8f 	.word	0x08013a8f
 800f624:	08013aa0 	.word	0x08013aa0

0800f628 <__multiply>:
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	4691      	mov	r9, r2
 800f62e:	690a      	ldr	r2, [r1, #16]
 800f630:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f634:	429a      	cmp	r2, r3
 800f636:	bfb8      	it	lt
 800f638:	460b      	movlt	r3, r1
 800f63a:	460c      	mov	r4, r1
 800f63c:	bfbc      	itt	lt
 800f63e:	464c      	movlt	r4, r9
 800f640:	4699      	movlt	r9, r3
 800f642:	6927      	ldr	r7, [r4, #16]
 800f644:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f648:	68a3      	ldr	r3, [r4, #8]
 800f64a:	6861      	ldr	r1, [r4, #4]
 800f64c:	eb07 060a 	add.w	r6, r7, sl
 800f650:	42b3      	cmp	r3, r6
 800f652:	b085      	sub	sp, #20
 800f654:	bfb8      	it	lt
 800f656:	3101      	addlt	r1, #1
 800f658:	f7ff fed8 	bl	800f40c <_Balloc>
 800f65c:	b930      	cbnz	r0, 800f66c <__multiply+0x44>
 800f65e:	4602      	mov	r2, r0
 800f660:	4b44      	ldr	r3, [pc, #272]	; (800f774 <__multiply+0x14c>)
 800f662:	4845      	ldr	r0, [pc, #276]	; (800f778 <__multiply+0x150>)
 800f664:	f240 115d 	movw	r1, #349	; 0x15d
 800f668:	f000 fbc6 	bl	800fdf8 <__assert_func>
 800f66c:	f100 0514 	add.w	r5, r0, #20
 800f670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f674:	462b      	mov	r3, r5
 800f676:	2200      	movs	r2, #0
 800f678:	4543      	cmp	r3, r8
 800f67a:	d321      	bcc.n	800f6c0 <__multiply+0x98>
 800f67c:	f104 0314 	add.w	r3, r4, #20
 800f680:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f684:	f109 0314 	add.w	r3, r9, #20
 800f688:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f68c:	9202      	str	r2, [sp, #8]
 800f68e:	1b3a      	subs	r2, r7, r4
 800f690:	3a15      	subs	r2, #21
 800f692:	f022 0203 	bic.w	r2, r2, #3
 800f696:	3204      	adds	r2, #4
 800f698:	f104 0115 	add.w	r1, r4, #21
 800f69c:	428f      	cmp	r7, r1
 800f69e:	bf38      	it	cc
 800f6a0:	2204      	movcc	r2, #4
 800f6a2:	9201      	str	r2, [sp, #4]
 800f6a4:	9a02      	ldr	r2, [sp, #8]
 800f6a6:	9303      	str	r3, [sp, #12]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d80c      	bhi.n	800f6c6 <__multiply+0x9e>
 800f6ac:	2e00      	cmp	r6, #0
 800f6ae:	dd03      	ble.n	800f6b8 <__multiply+0x90>
 800f6b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d05a      	beq.n	800f76e <__multiply+0x146>
 800f6b8:	6106      	str	r6, [r0, #16]
 800f6ba:	b005      	add	sp, #20
 800f6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c0:	f843 2b04 	str.w	r2, [r3], #4
 800f6c4:	e7d8      	b.n	800f678 <__multiply+0x50>
 800f6c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f6ca:	f1ba 0f00 	cmp.w	sl, #0
 800f6ce:	d024      	beq.n	800f71a <__multiply+0xf2>
 800f6d0:	f104 0e14 	add.w	lr, r4, #20
 800f6d4:	46a9      	mov	r9, r5
 800f6d6:	f04f 0c00 	mov.w	ip, #0
 800f6da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f6de:	f8d9 1000 	ldr.w	r1, [r9]
 800f6e2:	fa1f fb82 	uxth.w	fp, r2
 800f6e6:	b289      	uxth	r1, r1
 800f6e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800f6ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f6f0:	f8d9 2000 	ldr.w	r2, [r9]
 800f6f4:	4461      	add	r1, ip
 800f6f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800f6fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f702:	b289      	uxth	r1, r1
 800f704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f708:	4577      	cmp	r7, lr
 800f70a:	f849 1b04 	str.w	r1, [r9], #4
 800f70e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f712:	d8e2      	bhi.n	800f6da <__multiply+0xb2>
 800f714:	9a01      	ldr	r2, [sp, #4]
 800f716:	f845 c002 	str.w	ip, [r5, r2]
 800f71a:	9a03      	ldr	r2, [sp, #12]
 800f71c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f720:	3304      	adds	r3, #4
 800f722:	f1b9 0f00 	cmp.w	r9, #0
 800f726:	d020      	beq.n	800f76a <__multiply+0x142>
 800f728:	6829      	ldr	r1, [r5, #0]
 800f72a:	f104 0c14 	add.w	ip, r4, #20
 800f72e:	46ae      	mov	lr, r5
 800f730:	f04f 0a00 	mov.w	sl, #0
 800f734:	f8bc b000 	ldrh.w	fp, [ip]
 800f738:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f73c:	fb09 220b 	mla	r2, r9, fp, r2
 800f740:	4492      	add	sl, r2
 800f742:	b289      	uxth	r1, r1
 800f744:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f748:	f84e 1b04 	str.w	r1, [lr], #4
 800f74c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f750:	f8be 1000 	ldrh.w	r1, [lr]
 800f754:	0c12      	lsrs	r2, r2, #16
 800f756:	fb09 1102 	mla	r1, r9, r2, r1
 800f75a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f75e:	4567      	cmp	r7, ip
 800f760:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f764:	d8e6      	bhi.n	800f734 <__multiply+0x10c>
 800f766:	9a01      	ldr	r2, [sp, #4]
 800f768:	50a9      	str	r1, [r5, r2]
 800f76a:	3504      	adds	r5, #4
 800f76c:	e79a      	b.n	800f6a4 <__multiply+0x7c>
 800f76e:	3e01      	subs	r6, #1
 800f770:	e79c      	b.n	800f6ac <__multiply+0x84>
 800f772:	bf00      	nop
 800f774:	08013a8f 	.word	0x08013a8f
 800f778:	08013aa0 	.word	0x08013aa0

0800f77c <__pow5mult>:
 800f77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f780:	4615      	mov	r5, r2
 800f782:	f012 0203 	ands.w	r2, r2, #3
 800f786:	4606      	mov	r6, r0
 800f788:	460f      	mov	r7, r1
 800f78a:	d007      	beq.n	800f79c <__pow5mult+0x20>
 800f78c:	4c25      	ldr	r4, [pc, #148]	; (800f824 <__pow5mult+0xa8>)
 800f78e:	3a01      	subs	r2, #1
 800f790:	2300      	movs	r3, #0
 800f792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f796:	f7ff fe9b 	bl	800f4d0 <__multadd>
 800f79a:	4607      	mov	r7, r0
 800f79c:	10ad      	asrs	r5, r5, #2
 800f79e:	d03d      	beq.n	800f81c <__pow5mult+0xa0>
 800f7a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f7a2:	b97c      	cbnz	r4, 800f7c4 <__pow5mult+0x48>
 800f7a4:	2010      	movs	r0, #16
 800f7a6:	f7fe fa0d 	bl	800dbc4 <malloc>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	6270      	str	r0, [r6, #36]	; 0x24
 800f7ae:	b928      	cbnz	r0, 800f7bc <__pow5mult+0x40>
 800f7b0:	4b1d      	ldr	r3, [pc, #116]	; (800f828 <__pow5mult+0xac>)
 800f7b2:	481e      	ldr	r0, [pc, #120]	; (800f82c <__pow5mult+0xb0>)
 800f7b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f7b8:	f000 fb1e 	bl	800fdf8 <__assert_func>
 800f7bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7c0:	6004      	str	r4, [r0, #0]
 800f7c2:	60c4      	str	r4, [r0, #12]
 800f7c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f7c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f7cc:	b94c      	cbnz	r4, 800f7e2 <__pow5mult+0x66>
 800f7ce:	f240 2171 	movw	r1, #625	; 0x271
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7ff ff12 	bl	800f5fc <__i2b>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7de:	4604      	mov	r4, r0
 800f7e0:	6003      	str	r3, [r0, #0]
 800f7e2:	f04f 0900 	mov.w	r9, #0
 800f7e6:	07eb      	lsls	r3, r5, #31
 800f7e8:	d50a      	bpl.n	800f800 <__pow5mult+0x84>
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	f7ff ff1a 	bl	800f628 <__multiply>
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	4680      	mov	r8, r0
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f7ff fe47 	bl	800f48c <_Bfree>
 800f7fe:	4647      	mov	r7, r8
 800f800:	106d      	asrs	r5, r5, #1
 800f802:	d00b      	beq.n	800f81c <__pow5mult+0xa0>
 800f804:	6820      	ldr	r0, [r4, #0]
 800f806:	b938      	cbnz	r0, 800f818 <__pow5mult+0x9c>
 800f808:	4622      	mov	r2, r4
 800f80a:	4621      	mov	r1, r4
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff ff0b 	bl	800f628 <__multiply>
 800f812:	6020      	str	r0, [r4, #0]
 800f814:	f8c0 9000 	str.w	r9, [r0]
 800f818:	4604      	mov	r4, r0
 800f81a:	e7e4      	b.n	800f7e6 <__pow5mult+0x6a>
 800f81c:	4638      	mov	r0, r7
 800f81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f822:	bf00      	nop
 800f824:	08013bf0 	.word	0x08013bf0
 800f828:	08013a1d 	.word	0x08013a1d
 800f82c:	08013aa0 	.word	0x08013aa0

0800f830 <__lshift>:
 800f830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f834:	460c      	mov	r4, r1
 800f836:	6849      	ldr	r1, [r1, #4]
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	4607      	mov	r7, r0
 800f842:	4691      	mov	r9, r2
 800f844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f848:	f108 0601 	add.w	r6, r8, #1
 800f84c:	42b3      	cmp	r3, r6
 800f84e:	db0b      	blt.n	800f868 <__lshift+0x38>
 800f850:	4638      	mov	r0, r7
 800f852:	f7ff fddb 	bl	800f40c <_Balloc>
 800f856:	4605      	mov	r5, r0
 800f858:	b948      	cbnz	r0, 800f86e <__lshift+0x3e>
 800f85a:	4602      	mov	r2, r0
 800f85c:	4b2a      	ldr	r3, [pc, #168]	; (800f908 <__lshift+0xd8>)
 800f85e:	482b      	ldr	r0, [pc, #172]	; (800f90c <__lshift+0xdc>)
 800f860:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f864:	f000 fac8 	bl	800fdf8 <__assert_func>
 800f868:	3101      	adds	r1, #1
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	e7ee      	b.n	800f84c <__lshift+0x1c>
 800f86e:	2300      	movs	r3, #0
 800f870:	f100 0114 	add.w	r1, r0, #20
 800f874:	f100 0210 	add.w	r2, r0, #16
 800f878:	4618      	mov	r0, r3
 800f87a:	4553      	cmp	r3, sl
 800f87c:	db37      	blt.n	800f8ee <__lshift+0xbe>
 800f87e:	6920      	ldr	r0, [r4, #16]
 800f880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f884:	f104 0314 	add.w	r3, r4, #20
 800f888:	f019 091f 	ands.w	r9, r9, #31
 800f88c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f894:	d02f      	beq.n	800f8f6 <__lshift+0xc6>
 800f896:	f1c9 0e20 	rsb	lr, r9, #32
 800f89a:	468a      	mov	sl, r1
 800f89c:	f04f 0c00 	mov.w	ip, #0
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	fa02 f209 	lsl.w	r2, r2, r9
 800f8a6:	ea42 020c 	orr.w	r2, r2, ip
 800f8aa:	f84a 2b04 	str.w	r2, [sl], #4
 800f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b2:	4298      	cmp	r0, r3
 800f8b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f8b8:	d8f2      	bhi.n	800f8a0 <__lshift+0x70>
 800f8ba:	1b03      	subs	r3, r0, r4
 800f8bc:	3b15      	subs	r3, #21
 800f8be:	f023 0303 	bic.w	r3, r3, #3
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	f104 0215 	add.w	r2, r4, #21
 800f8c8:	4290      	cmp	r0, r2
 800f8ca:	bf38      	it	cc
 800f8cc:	2304      	movcc	r3, #4
 800f8ce:	f841 c003 	str.w	ip, [r1, r3]
 800f8d2:	f1bc 0f00 	cmp.w	ip, #0
 800f8d6:	d001      	beq.n	800f8dc <__lshift+0xac>
 800f8d8:	f108 0602 	add.w	r6, r8, #2
 800f8dc:	3e01      	subs	r6, #1
 800f8de:	4638      	mov	r0, r7
 800f8e0:	612e      	str	r6, [r5, #16]
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	f7ff fdd2 	bl	800f48c <_Bfree>
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	e7c1      	b.n	800f87a <__lshift+0x4a>
 800f8f6:	3904      	subs	r1, #4
 800f8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800f900:	4298      	cmp	r0, r3
 800f902:	d8f9      	bhi.n	800f8f8 <__lshift+0xc8>
 800f904:	e7ea      	b.n	800f8dc <__lshift+0xac>
 800f906:	bf00      	nop
 800f908:	08013a8f 	.word	0x08013a8f
 800f90c:	08013aa0 	.word	0x08013aa0

0800f910 <__mcmp>:
 800f910:	b530      	push	{r4, r5, lr}
 800f912:	6902      	ldr	r2, [r0, #16]
 800f914:	690c      	ldr	r4, [r1, #16]
 800f916:	1b12      	subs	r2, r2, r4
 800f918:	d10e      	bne.n	800f938 <__mcmp+0x28>
 800f91a:	f100 0314 	add.w	r3, r0, #20
 800f91e:	3114      	adds	r1, #20
 800f920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f92c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f930:	42a5      	cmp	r5, r4
 800f932:	d003      	beq.n	800f93c <__mcmp+0x2c>
 800f934:	d305      	bcc.n	800f942 <__mcmp+0x32>
 800f936:	2201      	movs	r2, #1
 800f938:	4610      	mov	r0, r2
 800f93a:	bd30      	pop	{r4, r5, pc}
 800f93c:	4283      	cmp	r3, r0
 800f93e:	d3f3      	bcc.n	800f928 <__mcmp+0x18>
 800f940:	e7fa      	b.n	800f938 <__mcmp+0x28>
 800f942:	f04f 32ff 	mov.w	r2, #4294967295
 800f946:	e7f7      	b.n	800f938 <__mcmp+0x28>

0800f948 <__mdiff>:
 800f948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	460c      	mov	r4, r1
 800f94e:	4606      	mov	r6, r0
 800f950:	4611      	mov	r1, r2
 800f952:	4620      	mov	r0, r4
 800f954:	4690      	mov	r8, r2
 800f956:	f7ff ffdb 	bl	800f910 <__mcmp>
 800f95a:	1e05      	subs	r5, r0, #0
 800f95c:	d110      	bne.n	800f980 <__mdiff+0x38>
 800f95e:	4629      	mov	r1, r5
 800f960:	4630      	mov	r0, r6
 800f962:	f7ff fd53 	bl	800f40c <_Balloc>
 800f966:	b930      	cbnz	r0, 800f976 <__mdiff+0x2e>
 800f968:	4b3a      	ldr	r3, [pc, #232]	; (800fa54 <__mdiff+0x10c>)
 800f96a:	4602      	mov	r2, r0
 800f96c:	f240 2132 	movw	r1, #562	; 0x232
 800f970:	4839      	ldr	r0, [pc, #228]	; (800fa58 <__mdiff+0x110>)
 800f972:	f000 fa41 	bl	800fdf8 <__assert_func>
 800f976:	2301      	movs	r3, #1
 800f978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f980:	bfa4      	itt	ge
 800f982:	4643      	movge	r3, r8
 800f984:	46a0      	movge	r8, r4
 800f986:	4630      	mov	r0, r6
 800f988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f98c:	bfa6      	itte	ge
 800f98e:	461c      	movge	r4, r3
 800f990:	2500      	movge	r5, #0
 800f992:	2501      	movlt	r5, #1
 800f994:	f7ff fd3a 	bl	800f40c <_Balloc>
 800f998:	b920      	cbnz	r0, 800f9a4 <__mdiff+0x5c>
 800f99a:	4b2e      	ldr	r3, [pc, #184]	; (800fa54 <__mdiff+0x10c>)
 800f99c:	4602      	mov	r2, r0
 800f99e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f9a2:	e7e5      	b.n	800f970 <__mdiff+0x28>
 800f9a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9a8:	6926      	ldr	r6, [r4, #16]
 800f9aa:	60c5      	str	r5, [r0, #12]
 800f9ac:	f104 0914 	add.w	r9, r4, #20
 800f9b0:	f108 0514 	add.w	r5, r8, #20
 800f9b4:	f100 0e14 	add.w	lr, r0, #20
 800f9b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f9bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f9c0:	f108 0210 	add.w	r2, r8, #16
 800f9c4:	46f2      	mov	sl, lr
 800f9c6:	2100      	movs	r1, #0
 800f9c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f9cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f9d0:	fa1f f883 	uxth.w	r8, r3
 800f9d4:	fa11 f18b 	uxtah	r1, r1, fp
 800f9d8:	0c1b      	lsrs	r3, r3, #16
 800f9da:	eba1 0808 	sub.w	r8, r1, r8
 800f9de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f9e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f9e6:	fa1f f888 	uxth.w	r8, r8
 800f9ea:	1419      	asrs	r1, r3, #16
 800f9ec:	454e      	cmp	r6, r9
 800f9ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f9f2:	f84a 3b04 	str.w	r3, [sl], #4
 800f9f6:	d8e7      	bhi.n	800f9c8 <__mdiff+0x80>
 800f9f8:	1b33      	subs	r3, r6, r4
 800f9fa:	3b15      	subs	r3, #21
 800f9fc:	f023 0303 	bic.w	r3, r3, #3
 800fa00:	3304      	adds	r3, #4
 800fa02:	3415      	adds	r4, #21
 800fa04:	42a6      	cmp	r6, r4
 800fa06:	bf38      	it	cc
 800fa08:	2304      	movcc	r3, #4
 800fa0a:	441d      	add	r5, r3
 800fa0c:	4473      	add	r3, lr
 800fa0e:	469e      	mov	lr, r3
 800fa10:	462e      	mov	r6, r5
 800fa12:	4566      	cmp	r6, ip
 800fa14:	d30e      	bcc.n	800fa34 <__mdiff+0xec>
 800fa16:	f10c 0203 	add.w	r2, ip, #3
 800fa1a:	1b52      	subs	r2, r2, r5
 800fa1c:	f022 0203 	bic.w	r2, r2, #3
 800fa20:	3d03      	subs	r5, #3
 800fa22:	45ac      	cmp	ip, r5
 800fa24:	bf38      	it	cc
 800fa26:	2200      	movcc	r2, #0
 800fa28:	441a      	add	r2, r3
 800fa2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa2e:	b17b      	cbz	r3, 800fa50 <__mdiff+0x108>
 800fa30:	6107      	str	r7, [r0, #16]
 800fa32:	e7a3      	b.n	800f97c <__mdiff+0x34>
 800fa34:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa38:	fa11 f288 	uxtah	r2, r1, r8
 800fa3c:	1414      	asrs	r4, r2, #16
 800fa3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fa42:	b292      	uxth	r2, r2
 800fa44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fa48:	f84e 2b04 	str.w	r2, [lr], #4
 800fa4c:	1421      	asrs	r1, r4, #16
 800fa4e:	e7e0      	b.n	800fa12 <__mdiff+0xca>
 800fa50:	3f01      	subs	r7, #1
 800fa52:	e7ea      	b.n	800fa2a <__mdiff+0xe2>
 800fa54:	08013a8f 	.word	0x08013a8f
 800fa58:	08013aa0 	.word	0x08013aa0

0800fa5c <__d2b>:
 800fa5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa60:	4689      	mov	r9, r1
 800fa62:	2101      	movs	r1, #1
 800fa64:	ec57 6b10 	vmov	r6, r7, d0
 800fa68:	4690      	mov	r8, r2
 800fa6a:	f7ff fccf 	bl	800f40c <_Balloc>
 800fa6e:	4604      	mov	r4, r0
 800fa70:	b930      	cbnz	r0, 800fa80 <__d2b+0x24>
 800fa72:	4602      	mov	r2, r0
 800fa74:	4b25      	ldr	r3, [pc, #148]	; (800fb0c <__d2b+0xb0>)
 800fa76:	4826      	ldr	r0, [pc, #152]	; (800fb10 <__d2b+0xb4>)
 800fa78:	f240 310a 	movw	r1, #778	; 0x30a
 800fa7c:	f000 f9bc 	bl	800fdf8 <__assert_func>
 800fa80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fa84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa88:	bb35      	cbnz	r5, 800fad8 <__d2b+0x7c>
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	9301      	str	r3, [sp, #4]
 800fa8e:	d028      	beq.n	800fae2 <__d2b+0x86>
 800fa90:	4668      	mov	r0, sp
 800fa92:	9600      	str	r6, [sp, #0]
 800fa94:	f7ff fd82 	bl	800f59c <__lo0bits>
 800fa98:	9900      	ldr	r1, [sp, #0]
 800fa9a:	b300      	cbz	r0, 800fade <__d2b+0x82>
 800fa9c:	9a01      	ldr	r2, [sp, #4]
 800fa9e:	f1c0 0320 	rsb	r3, r0, #32
 800faa2:	fa02 f303 	lsl.w	r3, r2, r3
 800faa6:	430b      	orrs	r3, r1
 800faa8:	40c2      	lsrs	r2, r0
 800faaa:	6163      	str	r3, [r4, #20]
 800faac:	9201      	str	r2, [sp, #4]
 800faae:	9b01      	ldr	r3, [sp, #4]
 800fab0:	61a3      	str	r3, [r4, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	bf14      	ite	ne
 800fab6:	2202      	movne	r2, #2
 800fab8:	2201      	moveq	r2, #1
 800faba:	6122      	str	r2, [r4, #16]
 800fabc:	b1d5      	cbz	r5, 800faf4 <__d2b+0x98>
 800fabe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fac2:	4405      	add	r5, r0
 800fac4:	f8c9 5000 	str.w	r5, [r9]
 800fac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800facc:	f8c8 0000 	str.w	r0, [r8]
 800fad0:	4620      	mov	r0, r4
 800fad2:	b003      	add	sp, #12
 800fad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fadc:	e7d5      	b.n	800fa8a <__d2b+0x2e>
 800fade:	6161      	str	r1, [r4, #20]
 800fae0:	e7e5      	b.n	800faae <__d2b+0x52>
 800fae2:	a801      	add	r0, sp, #4
 800fae4:	f7ff fd5a 	bl	800f59c <__lo0bits>
 800fae8:	9b01      	ldr	r3, [sp, #4]
 800faea:	6163      	str	r3, [r4, #20]
 800faec:	2201      	movs	r2, #1
 800faee:	6122      	str	r2, [r4, #16]
 800faf0:	3020      	adds	r0, #32
 800faf2:	e7e3      	b.n	800fabc <__d2b+0x60>
 800faf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800faf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fafc:	f8c9 0000 	str.w	r0, [r9]
 800fb00:	6918      	ldr	r0, [r3, #16]
 800fb02:	f7ff fd2b 	bl	800f55c <__hi0bits>
 800fb06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb0a:	e7df      	b.n	800facc <__d2b+0x70>
 800fb0c:	08013a8f 	.word	0x08013a8f
 800fb10:	08013aa0 	.word	0x08013aa0

0800fb14 <_calloc_r>:
 800fb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb16:	fba1 2402 	umull	r2, r4, r1, r2
 800fb1a:	b94c      	cbnz	r4, 800fb30 <_calloc_r+0x1c>
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	9201      	str	r2, [sp, #4]
 800fb20:	f7fe f8da 	bl	800dcd8 <_malloc_r>
 800fb24:	9a01      	ldr	r2, [sp, #4]
 800fb26:	4605      	mov	r5, r0
 800fb28:	b930      	cbnz	r0, 800fb38 <_calloc_r+0x24>
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	b003      	add	sp, #12
 800fb2e:	bd30      	pop	{r4, r5, pc}
 800fb30:	220c      	movs	r2, #12
 800fb32:	6002      	str	r2, [r0, #0]
 800fb34:	2500      	movs	r5, #0
 800fb36:	e7f8      	b.n	800fb2a <_calloc_r+0x16>
 800fb38:	4621      	mov	r1, r4
 800fb3a:	f7fe f859 	bl	800dbf0 <memset>
 800fb3e:	e7f4      	b.n	800fb2a <_calloc_r+0x16>

0800fb40 <__ssputs_r>:
 800fb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb44:	688e      	ldr	r6, [r1, #8]
 800fb46:	429e      	cmp	r6, r3
 800fb48:	4682      	mov	sl, r0
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	4690      	mov	r8, r2
 800fb4e:	461f      	mov	r7, r3
 800fb50:	d838      	bhi.n	800fbc4 <__ssputs_r+0x84>
 800fb52:	898a      	ldrh	r2, [r1, #12]
 800fb54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb58:	d032      	beq.n	800fbc0 <__ssputs_r+0x80>
 800fb5a:	6825      	ldr	r5, [r4, #0]
 800fb5c:	6909      	ldr	r1, [r1, #16]
 800fb5e:	eba5 0901 	sub.w	r9, r5, r1
 800fb62:	6965      	ldr	r5, [r4, #20]
 800fb64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	444b      	add	r3, r9
 800fb70:	106d      	asrs	r5, r5, #1
 800fb72:	429d      	cmp	r5, r3
 800fb74:	bf38      	it	cc
 800fb76:	461d      	movcc	r5, r3
 800fb78:	0553      	lsls	r3, r2, #21
 800fb7a:	d531      	bpl.n	800fbe0 <__ssputs_r+0xa0>
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	f7fe f8ab 	bl	800dcd8 <_malloc_r>
 800fb82:	4606      	mov	r6, r0
 800fb84:	b950      	cbnz	r0, 800fb9c <__ssputs_r+0x5c>
 800fb86:	230c      	movs	r3, #12
 800fb88:	f8ca 3000 	str.w	r3, [sl]
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb92:	81a3      	strh	r3, [r4, #12]
 800fb94:	f04f 30ff 	mov.w	r0, #4294967295
 800fb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb9c:	6921      	ldr	r1, [r4, #16]
 800fb9e:	464a      	mov	r2, r9
 800fba0:	f7fe f818 	bl	800dbd4 <memcpy>
 800fba4:	89a3      	ldrh	r3, [r4, #12]
 800fba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fbaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbae:	81a3      	strh	r3, [r4, #12]
 800fbb0:	6126      	str	r6, [r4, #16]
 800fbb2:	6165      	str	r5, [r4, #20]
 800fbb4:	444e      	add	r6, r9
 800fbb6:	eba5 0509 	sub.w	r5, r5, r9
 800fbba:	6026      	str	r6, [r4, #0]
 800fbbc:	60a5      	str	r5, [r4, #8]
 800fbbe:	463e      	mov	r6, r7
 800fbc0:	42be      	cmp	r6, r7
 800fbc2:	d900      	bls.n	800fbc6 <__ssputs_r+0x86>
 800fbc4:	463e      	mov	r6, r7
 800fbc6:	6820      	ldr	r0, [r4, #0]
 800fbc8:	4632      	mov	r2, r6
 800fbca:	4641      	mov	r1, r8
 800fbcc:	f000 f959 	bl	800fe82 <memmove>
 800fbd0:	68a3      	ldr	r3, [r4, #8]
 800fbd2:	1b9b      	subs	r3, r3, r6
 800fbd4:	60a3      	str	r3, [r4, #8]
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	4433      	add	r3, r6
 800fbda:	6023      	str	r3, [r4, #0]
 800fbdc:	2000      	movs	r0, #0
 800fbde:	e7db      	b.n	800fb98 <__ssputs_r+0x58>
 800fbe0:	462a      	mov	r2, r5
 800fbe2:	f000 f968 	bl	800feb6 <_realloc_r>
 800fbe6:	4606      	mov	r6, r0
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	d1e1      	bne.n	800fbb0 <__ssputs_r+0x70>
 800fbec:	6921      	ldr	r1, [r4, #16]
 800fbee:	4650      	mov	r0, sl
 800fbf0:	f7fe f806 	bl	800dc00 <_free_r>
 800fbf4:	e7c7      	b.n	800fb86 <__ssputs_r+0x46>
	...

0800fbf8 <_svfiprintf_r>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	4698      	mov	r8, r3
 800fbfe:	898b      	ldrh	r3, [r1, #12]
 800fc00:	061b      	lsls	r3, r3, #24
 800fc02:	b09d      	sub	sp, #116	; 0x74
 800fc04:	4607      	mov	r7, r0
 800fc06:	460d      	mov	r5, r1
 800fc08:	4614      	mov	r4, r2
 800fc0a:	d50e      	bpl.n	800fc2a <_svfiprintf_r+0x32>
 800fc0c:	690b      	ldr	r3, [r1, #16]
 800fc0e:	b963      	cbnz	r3, 800fc2a <_svfiprintf_r+0x32>
 800fc10:	2140      	movs	r1, #64	; 0x40
 800fc12:	f7fe f861 	bl	800dcd8 <_malloc_r>
 800fc16:	6028      	str	r0, [r5, #0]
 800fc18:	6128      	str	r0, [r5, #16]
 800fc1a:	b920      	cbnz	r0, 800fc26 <_svfiprintf_r+0x2e>
 800fc1c:	230c      	movs	r3, #12
 800fc1e:	603b      	str	r3, [r7, #0]
 800fc20:	f04f 30ff 	mov.w	r0, #4294967295
 800fc24:	e0d1      	b.n	800fdca <_svfiprintf_r+0x1d2>
 800fc26:	2340      	movs	r3, #64	; 0x40
 800fc28:	616b      	str	r3, [r5, #20]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc2e:	2320      	movs	r3, #32
 800fc30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc34:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc38:	2330      	movs	r3, #48	; 0x30
 800fc3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fde4 <_svfiprintf_r+0x1ec>
 800fc3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc42:	f04f 0901 	mov.w	r9, #1
 800fc46:	4623      	mov	r3, r4
 800fc48:	469a      	mov	sl, r3
 800fc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc4e:	b10a      	cbz	r2, 800fc54 <_svfiprintf_r+0x5c>
 800fc50:	2a25      	cmp	r2, #37	; 0x25
 800fc52:	d1f9      	bne.n	800fc48 <_svfiprintf_r+0x50>
 800fc54:	ebba 0b04 	subs.w	fp, sl, r4
 800fc58:	d00b      	beq.n	800fc72 <_svfiprintf_r+0x7a>
 800fc5a:	465b      	mov	r3, fp
 800fc5c:	4622      	mov	r2, r4
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4638      	mov	r0, r7
 800fc62:	f7ff ff6d 	bl	800fb40 <__ssputs_r>
 800fc66:	3001      	adds	r0, #1
 800fc68:	f000 80aa 	beq.w	800fdc0 <_svfiprintf_r+0x1c8>
 800fc6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc6e:	445a      	add	r2, fp
 800fc70:	9209      	str	r2, [sp, #36]	; 0x24
 800fc72:	f89a 3000 	ldrb.w	r3, [sl]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 80a2 	beq.w	800fdc0 <_svfiprintf_r+0x1c8>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc86:	f10a 0a01 	add.w	sl, sl, #1
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	9307      	str	r3, [sp, #28]
 800fc8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc92:	931a      	str	r3, [sp, #104]	; 0x68
 800fc94:	4654      	mov	r4, sl
 800fc96:	2205      	movs	r2, #5
 800fc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc9c:	4851      	ldr	r0, [pc, #324]	; (800fde4 <_svfiprintf_r+0x1ec>)
 800fc9e:	f7f0 fab7 	bl	8000210 <memchr>
 800fca2:	9a04      	ldr	r2, [sp, #16]
 800fca4:	b9d8      	cbnz	r0, 800fcde <_svfiprintf_r+0xe6>
 800fca6:	06d0      	lsls	r0, r2, #27
 800fca8:	bf44      	itt	mi
 800fcaa:	2320      	movmi	r3, #32
 800fcac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcb0:	0711      	lsls	r1, r2, #28
 800fcb2:	bf44      	itt	mi
 800fcb4:	232b      	movmi	r3, #43	; 0x2b
 800fcb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcba:	f89a 3000 	ldrb.w	r3, [sl]
 800fcbe:	2b2a      	cmp	r3, #42	; 0x2a
 800fcc0:	d015      	beq.n	800fcee <_svfiprintf_r+0xf6>
 800fcc2:	9a07      	ldr	r2, [sp, #28]
 800fcc4:	4654      	mov	r4, sl
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	f04f 0c0a 	mov.w	ip, #10
 800fccc:	4621      	mov	r1, r4
 800fcce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcd2:	3b30      	subs	r3, #48	; 0x30
 800fcd4:	2b09      	cmp	r3, #9
 800fcd6:	d94e      	bls.n	800fd76 <_svfiprintf_r+0x17e>
 800fcd8:	b1b0      	cbz	r0, 800fd08 <_svfiprintf_r+0x110>
 800fcda:	9207      	str	r2, [sp, #28]
 800fcdc:	e014      	b.n	800fd08 <_svfiprintf_r+0x110>
 800fcde:	eba0 0308 	sub.w	r3, r0, r8
 800fce2:	fa09 f303 	lsl.w	r3, r9, r3
 800fce6:	4313      	orrs	r3, r2
 800fce8:	9304      	str	r3, [sp, #16]
 800fcea:	46a2      	mov	sl, r4
 800fcec:	e7d2      	b.n	800fc94 <_svfiprintf_r+0x9c>
 800fcee:	9b03      	ldr	r3, [sp, #12]
 800fcf0:	1d19      	adds	r1, r3, #4
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	9103      	str	r1, [sp, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	bfbb      	ittet	lt
 800fcfa:	425b      	neglt	r3, r3
 800fcfc:	f042 0202 	orrlt.w	r2, r2, #2
 800fd00:	9307      	strge	r3, [sp, #28]
 800fd02:	9307      	strlt	r3, [sp, #28]
 800fd04:	bfb8      	it	lt
 800fd06:	9204      	strlt	r2, [sp, #16]
 800fd08:	7823      	ldrb	r3, [r4, #0]
 800fd0a:	2b2e      	cmp	r3, #46	; 0x2e
 800fd0c:	d10c      	bne.n	800fd28 <_svfiprintf_r+0x130>
 800fd0e:	7863      	ldrb	r3, [r4, #1]
 800fd10:	2b2a      	cmp	r3, #42	; 0x2a
 800fd12:	d135      	bne.n	800fd80 <_svfiprintf_r+0x188>
 800fd14:	9b03      	ldr	r3, [sp, #12]
 800fd16:	1d1a      	adds	r2, r3, #4
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	9203      	str	r2, [sp, #12]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bfb8      	it	lt
 800fd20:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd24:	3402      	adds	r4, #2
 800fd26:	9305      	str	r3, [sp, #20]
 800fd28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fdf4 <_svfiprintf_r+0x1fc>
 800fd2c:	7821      	ldrb	r1, [r4, #0]
 800fd2e:	2203      	movs	r2, #3
 800fd30:	4650      	mov	r0, sl
 800fd32:	f7f0 fa6d 	bl	8000210 <memchr>
 800fd36:	b140      	cbz	r0, 800fd4a <_svfiprintf_r+0x152>
 800fd38:	2340      	movs	r3, #64	; 0x40
 800fd3a:	eba0 000a 	sub.w	r0, r0, sl
 800fd3e:	fa03 f000 	lsl.w	r0, r3, r0
 800fd42:	9b04      	ldr	r3, [sp, #16]
 800fd44:	4303      	orrs	r3, r0
 800fd46:	3401      	adds	r4, #1
 800fd48:	9304      	str	r3, [sp, #16]
 800fd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4e:	4826      	ldr	r0, [pc, #152]	; (800fde8 <_svfiprintf_r+0x1f0>)
 800fd50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd54:	2206      	movs	r2, #6
 800fd56:	f7f0 fa5b 	bl	8000210 <memchr>
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	d038      	beq.n	800fdd0 <_svfiprintf_r+0x1d8>
 800fd5e:	4b23      	ldr	r3, [pc, #140]	; (800fdec <_svfiprintf_r+0x1f4>)
 800fd60:	bb1b      	cbnz	r3, 800fdaa <_svfiprintf_r+0x1b2>
 800fd62:	9b03      	ldr	r3, [sp, #12]
 800fd64:	3307      	adds	r3, #7
 800fd66:	f023 0307 	bic.w	r3, r3, #7
 800fd6a:	3308      	adds	r3, #8
 800fd6c:	9303      	str	r3, [sp, #12]
 800fd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd70:	4433      	add	r3, r6
 800fd72:	9309      	str	r3, [sp, #36]	; 0x24
 800fd74:	e767      	b.n	800fc46 <_svfiprintf_r+0x4e>
 800fd76:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	2001      	movs	r0, #1
 800fd7e:	e7a5      	b.n	800fccc <_svfiprintf_r+0xd4>
 800fd80:	2300      	movs	r3, #0
 800fd82:	3401      	adds	r4, #1
 800fd84:	9305      	str	r3, [sp, #20]
 800fd86:	4619      	mov	r1, r3
 800fd88:	f04f 0c0a 	mov.w	ip, #10
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd92:	3a30      	subs	r2, #48	; 0x30
 800fd94:	2a09      	cmp	r2, #9
 800fd96:	d903      	bls.n	800fda0 <_svfiprintf_r+0x1a8>
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d0c5      	beq.n	800fd28 <_svfiprintf_r+0x130>
 800fd9c:	9105      	str	r1, [sp, #20]
 800fd9e:	e7c3      	b.n	800fd28 <_svfiprintf_r+0x130>
 800fda0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fda4:	4604      	mov	r4, r0
 800fda6:	2301      	movs	r3, #1
 800fda8:	e7f0      	b.n	800fd8c <_svfiprintf_r+0x194>
 800fdaa:	ab03      	add	r3, sp, #12
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	462a      	mov	r2, r5
 800fdb0:	4b0f      	ldr	r3, [pc, #60]	; (800fdf0 <_svfiprintf_r+0x1f8>)
 800fdb2:	a904      	add	r1, sp, #16
 800fdb4:	4638      	mov	r0, r7
 800fdb6:	f7fe f8a3 	bl	800df00 <_printf_float>
 800fdba:	1c42      	adds	r2, r0, #1
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	d1d6      	bne.n	800fd6e <_svfiprintf_r+0x176>
 800fdc0:	89ab      	ldrh	r3, [r5, #12]
 800fdc2:	065b      	lsls	r3, r3, #25
 800fdc4:	f53f af2c 	bmi.w	800fc20 <_svfiprintf_r+0x28>
 800fdc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdca:	b01d      	add	sp, #116	; 0x74
 800fdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd0:	ab03      	add	r3, sp, #12
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	462a      	mov	r2, r5
 800fdd6:	4b06      	ldr	r3, [pc, #24]	; (800fdf0 <_svfiprintf_r+0x1f8>)
 800fdd8:	a904      	add	r1, sp, #16
 800fdda:	4638      	mov	r0, r7
 800fddc:	f7fe fb34 	bl	800e448 <_printf_i>
 800fde0:	e7eb      	b.n	800fdba <_svfiprintf_r+0x1c2>
 800fde2:	bf00      	nop
 800fde4:	08013bfc 	.word	0x08013bfc
 800fde8:	08013c06 	.word	0x08013c06
 800fdec:	0800df01 	.word	0x0800df01
 800fdf0:	0800fb41 	.word	0x0800fb41
 800fdf4:	08013c02 	.word	0x08013c02

0800fdf8 <__assert_func>:
 800fdf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdfa:	4614      	mov	r4, r2
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	4b09      	ldr	r3, [pc, #36]	; (800fe24 <__assert_func+0x2c>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4605      	mov	r5, r0
 800fe04:	68d8      	ldr	r0, [r3, #12]
 800fe06:	b14c      	cbz	r4, 800fe1c <__assert_func+0x24>
 800fe08:	4b07      	ldr	r3, [pc, #28]	; (800fe28 <__assert_func+0x30>)
 800fe0a:	9100      	str	r1, [sp, #0]
 800fe0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe10:	4906      	ldr	r1, [pc, #24]	; (800fe2c <__assert_func+0x34>)
 800fe12:	462b      	mov	r3, r5
 800fe14:	f000 f80e 	bl	800fe34 <fiprintf>
 800fe18:	f000 faa4 	bl	8010364 <abort>
 800fe1c:	4b04      	ldr	r3, [pc, #16]	; (800fe30 <__assert_func+0x38>)
 800fe1e:	461c      	mov	r4, r3
 800fe20:	e7f3      	b.n	800fe0a <__assert_func+0x12>
 800fe22:	bf00      	nop
 800fe24:	20000040 	.word	0x20000040
 800fe28:	08013c0d 	.word	0x08013c0d
 800fe2c:	08013c1a 	.word	0x08013c1a
 800fe30:	08013c48 	.word	0x08013c48

0800fe34 <fiprintf>:
 800fe34:	b40e      	push	{r1, r2, r3}
 800fe36:	b503      	push	{r0, r1, lr}
 800fe38:	4601      	mov	r1, r0
 800fe3a:	ab03      	add	r3, sp, #12
 800fe3c:	4805      	ldr	r0, [pc, #20]	; (800fe54 <fiprintf+0x20>)
 800fe3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe42:	6800      	ldr	r0, [r0, #0]
 800fe44:	9301      	str	r3, [sp, #4]
 800fe46:	f000 f88f 	bl	800ff68 <_vfiprintf_r>
 800fe4a:	b002      	add	sp, #8
 800fe4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe50:	b003      	add	sp, #12
 800fe52:	4770      	bx	lr
 800fe54:	20000040 	.word	0x20000040

0800fe58 <__retarget_lock_init_recursive>:
 800fe58:	4770      	bx	lr

0800fe5a <__retarget_lock_acquire_recursive>:
 800fe5a:	4770      	bx	lr

0800fe5c <__retarget_lock_release_recursive>:
 800fe5c:	4770      	bx	lr

0800fe5e <__ascii_mbtowc>:
 800fe5e:	b082      	sub	sp, #8
 800fe60:	b901      	cbnz	r1, 800fe64 <__ascii_mbtowc+0x6>
 800fe62:	a901      	add	r1, sp, #4
 800fe64:	b142      	cbz	r2, 800fe78 <__ascii_mbtowc+0x1a>
 800fe66:	b14b      	cbz	r3, 800fe7c <__ascii_mbtowc+0x1e>
 800fe68:	7813      	ldrb	r3, [r2, #0]
 800fe6a:	600b      	str	r3, [r1, #0]
 800fe6c:	7812      	ldrb	r2, [r2, #0]
 800fe6e:	1e10      	subs	r0, r2, #0
 800fe70:	bf18      	it	ne
 800fe72:	2001      	movne	r0, #1
 800fe74:	b002      	add	sp, #8
 800fe76:	4770      	bx	lr
 800fe78:	4610      	mov	r0, r2
 800fe7a:	e7fb      	b.n	800fe74 <__ascii_mbtowc+0x16>
 800fe7c:	f06f 0001 	mvn.w	r0, #1
 800fe80:	e7f8      	b.n	800fe74 <__ascii_mbtowc+0x16>

0800fe82 <memmove>:
 800fe82:	4288      	cmp	r0, r1
 800fe84:	b510      	push	{r4, lr}
 800fe86:	eb01 0402 	add.w	r4, r1, r2
 800fe8a:	d902      	bls.n	800fe92 <memmove+0x10>
 800fe8c:	4284      	cmp	r4, r0
 800fe8e:	4623      	mov	r3, r4
 800fe90:	d807      	bhi.n	800fea2 <memmove+0x20>
 800fe92:	1e43      	subs	r3, r0, #1
 800fe94:	42a1      	cmp	r1, r4
 800fe96:	d008      	beq.n	800feaa <memmove+0x28>
 800fe98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fea0:	e7f8      	b.n	800fe94 <memmove+0x12>
 800fea2:	4402      	add	r2, r0
 800fea4:	4601      	mov	r1, r0
 800fea6:	428a      	cmp	r2, r1
 800fea8:	d100      	bne.n	800feac <memmove+0x2a>
 800feaa:	bd10      	pop	{r4, pc}
 800feac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800feb4:	e7f7      	b.n	800fea6 <memmove+0x24>

0800feb6 <_realloc_r>:
 800feb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feba:	4680      	mov	r8, r0
 800febc:	4614      	mov	r4, r2
 800febe:	460e      	mov	r6, r1
 800fec0:	b921      	cbnz	r1, 800fecc <_realloc_r+0x16>
 800fec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fec6:	4611      	mov	r1, r2
 800fec8:	f7fd bf06 	b.w	800dcd8 <_malloc_r>
 800fecc:	b92a      	cbnz	r2, 800feda <_realloc_r+0x24>
 800fece:	f7fd fe97 	bl	800dc00 <_free_r>
 800fed2:	4625      	mov	r5, r4
 800fed4:	4628      	mov	r0, r5
 800fed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feda:	f000 fc67 	bl	80107ac <_malloc_usable_size_r>
 800fede:	4284      	cmp	r4, r0
 800fee0:	4607      	mov	r7, r0
 800fee2:	d802      	bhi.n	800feea <_realloc_r+0x34>
 800fee4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fee8:	d812      	bhi.n	800ff10 <_realloc_r+0x5a>
 800feea:	4621      	mov	r1, r4
 800feec:	4640      	mov	r0, r8
 800feee:	f7fd fef3 	bl	800dcd8 <_malloc_r>
 800fef2:	4605      	mov	r5, r0
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d0ed      	beq.n	800fed4 <_realloc_r+0x1e>
 800fef8:	42bc      	cmp	r4, r7
 800fefa:	4622      	mov	r2, r4
 800fefc:	4631      	mov	r1, r6
 800fefe:	bf28      	it	cs
 800ff00:	463a      	movcs	r2, r7
 800ff02:	f7fd fe67 	bl	800dbd4 <memcpy>
 800ff06:	4631      	mov	r1, r6
 800ff08:	4640      	mov	r0, r8
 800ff0a:	f7fd fe79 	bl	800dc00 <_free_r>
 800ff0e:	e7e1      	b.n	800fed4 <_realloc_r+0x1e>
 800ff10:	4635      	mov	r5, r6
 800ff12:	e7df      	b.n	800fed4 <_realloc_r+0x1e>

0800ff14 <__sfputc_r>:
 800ff14:	6893      	ldr	r3, [r2, #8]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	b410      	push	{r4}
 800ff1c:	6093      	str	r3, [r2, #8]
 800ff1e:	da08      	bge.n	800ff32 <__sfputc_r+0x1e>
 800ff20:	6994      	ldr	r4, [r2, #24]
 800ff22:	42a3      	cmp	r3, r4
 800ff24:	db01      	blt.n	800ff2a <__sfputc_r+0x16>
 800ff26:	290a      	cmp	r1, #10
 800ff28:	d103      	bne.n	800ff32 <__sfputc_r+0x1e>
 800ff2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff2e:	f000 b94b 	b.w	80101c8 <__swbuf_r>
 800ff32:	6813      	ldr	r3, [r2, #0]
 800ff34:	1c58      	adds	r0, r3, #1
 800ff36:	6010      	str	r0, [r2, #0]
 800ff38:	7019      	strb	r1, [r3, #0]
 800ff3a:	4608      	mov	r0, r1
 800ff3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <__sfputs_r>:
 800ff42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff44:	4606      	mov	r6, r0
 800ff46:	460f      	mov	r7, r1
 800ff48:	4614      	mov	r4, r2
 800ff4a:	18d5      	adds	r5, r2, r3
 800ff4c:	42ac      	cmp	r4, r5
 800ff4e:	d101      	bne.n	800ff54 <__sfputs_r+0x12>
 800ff50:	2000      	movs	r0, #0
 800ff52:	e007      	b.n	800ff64 <__sfputs_r+0x22>
 800ff54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff58:	463a      	mov	r2, r7
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f7ff ffda 	bl	800ff14 <__sfputc_r>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d1f3      	bne.n	800ff4c <__sfputs_r+0xa>
 800ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff68 <_vfiprintf_r>:
 800ff68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	460d      	mov	r5, r1
 800ff6e:	b09d      	sub	sp, #116	; 0x74
 800ff70:	4614      	mov	r4, r2
 800ff72:	4698      	mov	r8, r3
 800ff74:	4606      	mov	r6, r0
 800ff76:	b118      	cbz	r0, 800ff80 <_vfiprintf_r+0x18>
 800ff78:	6983      	ldr	r3, [r0, #24]
 800ff7a:	b90b      	cbnz	r3, 800ff80 <_vfiprintf_r+0x18>
 800ff7c:	f000 fb14 	bl	80105a8 <__sinit>
 800ff80:	4b89      	ldr	r3, [pc, #548]	; (80101a8 <_vfiprintf_r+0x240>)
 800ff82:	429d      	cmp	r5, r3
 800ff84:	d11b      	bne.n	800ffbe <_vfiprintf_r+0x56>
 800ff86:	6875      	ldr	r5, [r6, #4]
 800ff88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff8a:	07d9      	lsls	r1, r3, #31
 800ff8c:	d405      	bmi.n	800ff9a <_vfiprintf_r+0x32>
 800ff8e:	89ab      	ldrh	r3, [r5, #12]
 800ff90:	059a      	lsls	r2, r3, #22
 800ff92:	d402      	bmi.n	800ff9a <_vfiprintf_r+0x32>
 800ff94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff96:	f7ff ff60 	bl	800fe5a <__retarget_lock_acquire_recursive>
 800ff9a:	89ab      	ldrh	r3, [r5, #12]
 800ff9c:	071b      	lsls	r3, r3, #28
 800ff9e:	d501      	bpl.n	800ffa4 <_vfiprintf_r+0x3c>
 800ffa0:	692b      	ldr	r3, [r5, #16]
 800ffa2:	b9eb      	cbnz	r3, 800ffe0 <_vfiprintf_r+0x78>
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	f000 f96e 	bl	8010288 <__swsetup_r>
 800ffac:	b1c0      	cbz	r0, 800ffe0 <_vfiprintf_r+0x78>
 800ffae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffb0:	07dc      	lsls	r4, r3, #31
 800ffb2:	d50e      	bpl.n	800ffd2 <_vfiprintf_r+0x6a>
 800ffb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb8:	b01d      	add	sp, #116	; 0x74
 800ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffbe:	4b7b      	ldr	r3, [pc, #492]	; (80101ac <_vfiprintf_r+0x244>)
 800ffc0:	429d      	cmp	r5, r3
 800ffc2:	d101      	bne.n	800ffc8 <_vfiprintf_r+0x60>
 800ffc4:	68b5      	ldr	r5, [r6, #8]
 800ffc6:	e7df      	b.n	800ff88 <_vfiprintf_r+0x20>
 800ffc8:	4b79      	ldr	r3, [pc, #484]	; (80101b0 <_vfiprintf_r+0x248>)
 800ffca:	429d      	cmp	r5, r3
 800ffcc:	bf08      	it	eq
 800ffce:	68f5      	ldreq	r5, [r6, #12]
 800ffd0:	e7da      	b.n	800ff88 <_vfiprintf_r+0x20>
 800ffd2:	89ab      	ldrh	r3, [r5, #12]
 800ffd4:	0598      	lsls	r0, r3, #22
 800ffd6:	d4ed      	bmi.n	800ffb4 <_vfiprintf_r+0x4c>
 800ffd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffda:	f7ff ff3f 	bl	800fe5c <__retarget_lock_release_recursive>
 800ffde:	e7e9      	b.n	800ffb4 <_vfiprintf_r+0x4c>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe4:	2320      	movs	r3, #32
 800ffe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffea:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffee:	2330      	movs	r3, #48	; 0x30
 800fff0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80101b4 <_vfiprintf_r+0x24c>
 800fff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fff8:	f04f 0901 	mov.w	r9, #1
 800fffc:	4623      	mov	r3, r4
 800fffe:	469a      	mov	sl, r3
 8010000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010004:	b10a      	cbz	r2, 801000a <_vfiprintf_r+0xa2>
 8010006:	2a25      	cmp	r2, #37	; 0x25
 8010008:	d1f9      	bne.n	800fffe <_vfiprintf_r+0x96>
 801000a:	ebba 0b04 	subs.w	fp, sl, r4
 801000e:	d00b      	beq.n	8010028 <_vfiprintf_r+0xc0>
 8010010:	465b      	mov	r3, fp
 8010012:	4622      	mov	r2, r4
 8010014:	4629      	mov	r1, r5
 8010016:	4630      	mov	r0, r6
 8010018:	f7ff ff93 	bl	800ff42 <__sfputs_r>
 801001c:	3001      	adds	r0, #1
 801001e:	f000 80aa 	beq.w	8010176 <_vfiprintf_r+0x20e>
 8010022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010024:	445a      	add	r2, fp
 8010026:	9209      	str	r2, [sp, #36]	; 0x24
 8010028:	f89a 3000 	ldrb.w	r3, [sl]
 801002c:	2b00      	cmp	r3, #0
 801002e:	f000 80a2 	beq.w	8010176 <_vfiprintf_r+0x20e>
 8010032:	2300      	movs	r3, #0
 8010034:	f04f 32ff 	mov.w	r2, #4294967295
 8010038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801003c:	f10a 0a01 	add.w	sl, sl, #1
 8010040:	9304      	str	r3, [sp, #16]
 8010042:	9307      	str	r3, [sp, #28]
 8010044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010048:	931a      	str	r3, [sp, #104]	; 0x68
 801004a:	4654      	mov	r4, sl
 801004c:	2205      	movs	r2, #5
 801004e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010052:	4858      	ldr	r0, [pc, #352]	; (80101b4 <_vfiprintf_r+0x24c>)
 8010054:	f7f0 f8dc 	bl	8000210 <memchr>
 8010058:	9a04      	ldr	r2, [sp, #16]
 801005a:	b9d8      	cbnz	r0, 8010094 <_vfiprintf_r+0x12c>
 801005c:	06d1      	lsls	r1, r2, #27
 801005e:	bf44      	itt	mi
 8010060:	2320      	movmi	r3, #32
 8010062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010066:	0713      	lsls	r3, r2, #28
 8010068:	bf44      	itt	mi
 801006a:	232b      	movmi	r3, #43	; 0x2b
 801006c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010070:	f89a 3000 	ldrb.w	r3, [sl]
 8010074:	2b2a      	cmp	r3, #42	; 0x2a
 8010076:	d015      	beq.n	80100a4 <_vfiprintf_r+0x13c>
 8010078:	9a07      	ldr	r2, [sp, #28]
 801007a:	4654      	mov	r4, sl
 801007c:	2000      	movs	r0, #0
 801007e:	f04f 0c0a 	mov.w	ip, #10
 8010082:	4621      	mov	r1, r4
 8010084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010088:	3b30      	subs	r3, #48	; 0x30
 801008a:	2b09      	cmp	r3, #9
 801008c:	d94e      	bls.n	801012c <_vfiprintf_r+0x1c4>
 801008e:	b1b0      	cbz	r0, 80100be <_vfiprintf_r+0x156>
 8010090:	9207      	str	r2, [sp, #28]
 8010092:	e014      	b.n	80100be <_vfiprintf_r+0x156>
 8010094:	eba0 0308 	sub.w	r3, r0, r8
 8010098:	fa09 f303 	lsl.w	r3, r9, r3
 801009c:	4313      	orrs	r3, r2
 801009e:	9304      	str	r3, [sp, #16]
 80100a0:	46a2      	mov	sl, r4
 80100a2:	e7d2      	b.n	801004a <_vfiprintf_r+0xe2>
 80100a4:	9b03      	ldr	r3, [sp, #12]
 80100a6:	1d19      	adds	r1, r3, #4
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	9103      	str	r1, [sp, #12]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	bfbb      	ittet	lt
 80100b0:	425b      	neglt	r3, r3
 80100b2:	f042 0202 	orrlt.w	r2, r2, #2
 80100b6:	9307      	strge	r3, [sp, #28]
 80100b8:	9307      	strlt	r3, [sp, #28]
 80100ba:	bfb8      	it	lt
 80100bc:	9204      	strlt	r2, [sp, #16]
 80100be:	7823      	ldrb	r3, [r4, #0]
 80100c0:	2b2e      	cmp	r3, #46	; 0x2e
 80100c2:	d10c      	bne.n	80100de <_vfiprintf_r+0x176>
 80100c4:	7863      	ldrb	r3, [r4, #1]
 80100c6:	2b2a      	cmp	r3, #42	; 0x2a
 80100c8:	d135      	bne.n	8010136 <_vfiprintf_r+0x1ce>
 80100ca:	9b03      	ldr	r3, [sp, #12]
 80100cc:	1d1a      	adds	r2, r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	9203      	str	r2, [sp, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	bfb8      	it	lt
 80100d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80100da:	3402      	adds	r4, #2
 80100dc:	9305      	str	r3, [sp, #20]
 80100de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80101c4 <_vfiprintf_r+0x25c>
 80100e2:	7821      	ldrb	r1, [r4, #0]
 80100e4:	2203      	movs	r2, #3
 80100e6:	4650      	mov	r0, sl
 80100e8:	f7f0 f892 	bl	8000210 <memchr>
 80100ec:	b140      	cbz	r0, 8010100 <_vfiprintf_r+0x198>
 80100ee:	2340      	movs	r3, #64	; 0x40
 80100f0:	eba0 000a 	sub.w	r0, r0, sl
 80100f4:	fa03 f000 	lsl.w	r0, r3, r0
 80100f8:	9b04      	ldr	r3, [sp, #16]
 80100fa:	4303      	orrs	r3, r0
 80100fc:	3401      	adds	r4, #1
 80100fe:	9304      	str	r3, [sp, #16]
 8010100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010104:	482c      	ldr	r0, [pc, #176]	; (80101b8 <_vfiprintf_r+0x250>)
 8010106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801010a:	2206      	movs	r2, #6
 801010c:	f7f0 f880 	bl	8000210 <memchr>
 8010110:	2800      	cmp	r0, #0
 8010112:	d03f      	beq.n	8010194 <_vfiprintf_r+0x22c>
 8010114:	4b29      	ldr	r3, [pc, #164]	; (80101bc <_vfiprintf_r+0x254>)
 8010116:	bb1b      	cbnz	r3, 8010160 <_vfiprintf_r+0x1f8>
 8010118:	9b03      	ldr	r3, [sp, #12]
 801011a:	3307      	adds	r3, #7
 801011c:	f023 0307 	bic.w	r3, r3, #7
 8010120:	3308      	adds	r3, #8
 8010122:	9303      	str	r3, [sp, #12]
 8010124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010126:	443b      	add	r3, r7
 8010128:	9309      	str	r3, [sp, #36]	; 0x24
 801012a:	e767      	b.n	800fffc <_vfiprintf_r+0x94>
 801012c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010130:	460c      	mov	r4, r1
 8010132:	2001      	movs	r0, #1
 8010134:	e7a5      	b.n	8010082 <_vfiprintf_r+0x11a>
 8010136:	2300      	movs	r3, #0
 8010138:	3401      	adds	r4, #1
 801013a:	9305      	str	r3, [sp, #20]
 801013c:	4619      	mov	r1, r3
 801013e:	f04f 0c0a 	mov.w	ip, #10
 8010142:	4620      	mov	r0, r4
 8010144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010148:	3a30      	subs	r2, #48	; 0x30
 801014a:	2a09      	cmp	r2, #9
 801014c:	d903      	bls.n	8010156 <_vfiprintf_r+0x1ee>
 801014e:	2b00      	cmp	r3, #0
 8010150:	d0c5      	beq.n	80100de <_vfiprintf_r+0x176>
 8010152:	9105      	str	r1, [sp, #20]
 8010154:	e7c3      	b.n	80100de <_vfiprintf_r+0x176>
 8010156:	fb0c 2101 	mla	r1, ip, r1, r2
 801015a:	4604      	mov	r4, r0
 801015c:	2301      	movs	r3, #1
 801015e:	e7f0      	b.n	8010142 <_vfiprintf_r+0x1da>
 8010160:	ab03      	add	r3, sp, #12
 8010162:	9300      	str	r3, [sp, #0]
 8010164:	462a      	mov	r2, r5
 8010166:	4b16      	ldr	r3, [pc, #88]	; (80101c0 <_vfiprintf_r+0x258>)
 8010168:	a904      	add	r1, sp, #16
 801016a:	4630      	mov	r0, r6
 801016c:	f7fd fec8 	bl	800df00 <_printf_float>
 8010170:	4607      	mov	r7, r0
 8010172:	1c78      	adds	r0, r7, #1
 8010174:	d1d6      	bne.n	8010124 <_vfiprintf_r+0x1bc>
 8010176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010178:	07d9      	lsls	r1, r3, #31
 801017a:	d405      	bmi.n	8010188 <_vfiprintf_r+0x220>
 801017c:	89ab      	ldrh	r3, [r5, #12]
 801017e:	059a      	lsls	r2, r3, #22
 8010180:	d402      	bmi.n	8010188 <_vfiprintf_r+0x220>
 8010182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010184:	f7ff fe6a 	bl	800fe5c <__retarget_lock_release_recursive>
 8010188:	89ab      	ldrh	r3, [r5, #12]
 801018a:	065b      	lsls	r3, r3, #25
 801018c:	f53f af12 	bmi.w	800ffb4 <_vfiprintf_r+0x4c>
 8010190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010192:	e711      	b.n	800ffb8 <_vfiprintf_r+0x50>
 8010194:	ab03      	add	r3, sp, #12
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	462a      	mov	r2, r5
 801019a:	4b09      	ldr	r3, [pc, #36]	; (80101c0 <_vfiprintf_r+0x258>)
 801019c:	a904      	add	r1, sp, #16
 801019e:	4630      	mov	r0, r6
 80101a0:	f7fe f952 	bl	800e448 <_printf_i>
 80101a4:	e7e4      	b.n	8010170 <_vfiprintf_r+0x208>
 80101a6:	bf00      	nop
 80101a8:	08013d74 	.word	0x08013d74
 80101ac:	08013d94 	.word	0x08013d94
 80101b0:	08013d54 	.word	0x08013d54
 80101b4:	08013bfc 	.word	0x08013bfc
 80101b8:	08013c06 	.word	0x08013c06
 80101bc:	0800df01 	.word	0x0800df01
 80101c0:	0800ff43 	.word	0x0800ff43
 80101c4:	08013c02 	.word	0x08013c02

080101c8 <__swbuf_r>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	460e      	mov	r6, r1
 80101cc:	4614      	mov	r4, r2
 80101ce:	4605      	mov	r5, r0
 80101d0:	b118      	cbz	r0, 80101da <__swbuf_r+0x12>
 80101d2:	6983      	ldr	r3, [r0, #24]
 80101d4:	b90b      	cbnz	r3, 80101da <__swbuf_r+0x12>
 80101d6:	f000 f9e7 	bl	80105a8 <__sinit>
 80101da:	4b21      	ldr	r3, [pc, #132]	; (8010260 <__swbuf_r+0x98>)
 80101dc:	429c      	cmp	r4, r3
 80101de:	d12b      	bne.n	8010238 <__swbuf_r+0x70>
 80101e0:	686c      	ldr	r4, [r5, #4]
 80101e2:	69a3      	ldr	r3, [r4, #24]
 80101e4:	60a3      	str	r3, [r4, #8]
 80101e6:	89a3      	ldrh	r3, [r4, #12]
 80101e8:	071a      	lsls	r2, r3, #28
 80101ea:	d52f      	bpl.n	801024c <__swbuf_r+0x84>
 80101ec:	6923      	ldr	r3, [r4, #16]
 80101ee:	b36b      	cbz	r3, 801024c <__swbuf_r+0x84>
 80101f0:	6923      	ldr	r3, [r4, #16]
 80101f2:	6820      	ldr	r0, [r4, #0]
 80101f4:	1ac0      	subs	r0, r0, r3
 80101f6:	6963      	ldr	r3, [r4, #20]
 80101f8:	b2f6      	uxtb	r6, r6
 80101fa:	4283      	cmp	r3, r0
 80101fc:	4637      	mov	r7, r6
 80101fe:	dc04      	bgt.n	801020a <__swbuf_r+0x42>
 8010200:	4621      	mov	r1, r4
 8010202:	4628      	mov	r0, r5
 8010204:	f000 f93c 	bl	8010480 <_fflush_r>
 8010208:	bb30      	cbnz	r0, 8010258 <__swbuf_r+0x90>
 801020a:	68a3      	ldr	r3, [r4, #8]
 801020c:	3b01      	subs	r3, #1
 801020e:	60a3      	str	r3, [r4, #8]
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	6022      	str	r2, [r4, #0]
 8010216:	701e      	strb	r6, [r3, #0]
 8010218:	6963      	ldr	r3, [r4, #20]
 801021a:	3001      	adds	r0, #1
 801021c:	4283      	cmp	r3, r0
 801021e:	d004      	beq.n	801022a <__swbuf_r+0x62>
 8010220:	89a3      	ldrh	r3, [r4, #12]
 8010222:	07db      	lsls	r3, r3, #31
 8010224:	d506      	bpl.n	8010234 <__swbuf_r+0x6c>
 8010226:	2e0a      	cmp	r6, #10
 8010228:	d104      	bne.n	8010234 <__swbuf_r+0x6c>
 801022a:	4621      	mov	r1, r4
 801022c:	4628      	mov	r0, r5
 801022e:	f000 f927 	bl	8010480 <_fflush_r>
 8010232:	b988      	cbnz	r0, 8010258 <__swbuf_r+0x90>
 8010234:	4638      	mov	r0, r7
 8010236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010238:	4b0a      	ldr	r3, [pc, #40]	; (8010264 <__swbuf_r+0x9c>)
 801023a:	429c      	cmp	r4, r3
 801023c:	d101      	bne.n	8010242 <__swbuf_r+0x7a>
 801023e:	68ac      	ldr	r4, [r5, #8]
 8010240:	e7cf      	b.n	80101e2 <__swbuf_r+0x1a>
 8010242:	4b09      	ldr	r3, [pc, #36]	; (8010268 <__swbuf_r+0xa0>)
 8010244:	429c      	cmp	r4, r3
 8010246:	bf08      	it	eq
 8010248:	68ec      	ldreq	r4, [r5, #12]
 801024a:	e7ca      	b.n	80101e2 <__swbuf_r+0x1a>
 801024c:	4621      	mov	r1, r4
 801024e:	4628      	mov	r0, r5
 8010250:	f000 f81a 	bl	8010288 <__swsetup_r>
 8010254:	2800      	cmp	r0, #0
 8010256:	d0cb      	beq.n	80101f0 <__swbuf_r+0x28>
 8010258:	f04f 37ff 	mov.w	r7, #4294967295
 801025c:	e7ea      	b.n	8010234 <__swbuf_r+0x6c>
 801025e:	bf00      	nop
 8010260:	08013d74 	.word	0x08013d74
 8010264:	08013d94 	.word	0x08013d94
 8010268:	08013d54 	.word	0x08013d54

0801026c <__ascii_wctomb>:
 801026c:	b149      	cbz	r1, 8010282 <__ascii_wctomb+0x16>
 801026e:	2aff      	cmp	r2, #255	; 0xff
 8010270:	bf85      	ittet	hi
 8010272:	238a      	movhi	r3, #138	; 0x8a
 8010274:	6003      	strhi	r3, [r0, #0]
 8010276:	700a      	strbls	r2, [r1, #0]
 8010278:	f04f 30ff 	movhi.w	r0, #4294967295
 801027c:	bf98      	it	ls
 801027e:	2001      	movls	r0, #1
 8010280:	4770      	bx	lr
 8010282:	4608      	mov	r0, r1
 8010284:	4770      	bx	lr
	...

08010288 <__swsetup_r>:
 8010288:	4b32      	ldr	r3, [pc, #200]	; (8010354 <__swsetup_r+0xcc>)
 801028a:	b570      	push	{r4, r5, r6, lr}
 801028c:	681d      	ldr	r5, [r3, #0]
 801028e:	4606      	mov	r6, r0
 8010290:	460c      	mov	r4, r1
 8010292:	b125      	cbz	r5, 801029e <__swsetup_r+0x16>
 8010294:	69ab      	ldr	r3, [r5, #24]
 8010296:	b913      	cbnz	r3, 801029e <__swsetup_r+0x16>
 8010298:	4628      	mov	r0, r5
 801029a:	f000 f985 	bl	80105a8 <__sinit>
 801029e:	4b2e      	ldr	r3, [pc, #184]	; (8010358 <__swsetup_r+0xd0>)
 80102a0:	429c      	cmp	r4, r3
 80102a2:	d10f      	bne.n	80102c4 <__swsetup_r+0x3c>
 80102a4:	686c      	ldr	r4, [r5, #4]
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102ac:	0719      	lsls	r1, r3, #28
 80102ae:	d42c      	bmi.n	801030a <__swsetup_r+0x82>
 80102b0:	06dd      	lsls	r5, r3, #27
 80102b2:	d411      	bmi.n	80102d8 <__swsetup_r+0x50>
 80102b4:	2309      	movs	r3, #9
 80102b6:	6033      	str	r3, [r6, #0]
 80102b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102bc:	81a3      	strh	r3, [r4, #12]
 80102be:	f04f 30ff 	mov.w	r0, #4294967295
 80102c2:	e03e      	b.n	8010342 <__swsetup_r+0xba>
 80102c4:	4b25      	ldr	r3, [pc, #148]	; (801035c <__swsetup_r+0xd4>)
 80102c6:	429c      	cmp	r4, r3
 80102c8:	d101      	bne.n	80102ce <__swsetup_r+0x46>
 80102ca:	68ac      	ldr	r4, [r5, #8]
 80102cc:	e7eb      	b.n	80102a6 <__swsetup_r+0x1e>
 80102ce:	4b24      	ldr	r3, [pc, #144]	; (8010360 <__swsetup_r+0xd8>)
 80102d0:	429c      	cmp	r4, r3
 80102d2:	bf08      	it	eq
 80102d4:	68ec      	ldreq	r4, [r5, #12]
 80102d6:	e7e6      	b.n	80102a6 <__swsetup_r+0x1e>
 80102d8:	0758      	lsls	r0, r3, #29
 80102da:	d512      	bpl.n	8010302 <__swsetup_r+0x7a>
 80102dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102de:	b141      	cbz	r1, 80102f2 <__swsetup_r+0x6a>
 80102e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102e4:	4299      	cmp	r1, r3
 80102e6:	d002      	beq.n	80102ee <__swsetup_r+0x66>
 80102e8:	4630      	mov	r0, r6
 80102ea:	f7fd fc89 	bl	800dc00 <_free_r>
 80102ee:	2300      	movs	r3, #0
 80102f0:	6363      	str	r3, [r4, #52]	; 0x34
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102f8:	81a3      	strh	r3, [r4, #12]
 80102fa:	2300      	movs	r3, #0
 80102fc:	6063      	str	r3, [r4, #4]
 80102fe:	6923      	ldr	r3, [r4, #16]
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	f043 0308 	orr.w	r3, r3, #8
 8010308:	81a3      	strh	r3, [r4, #12]
 801030a:	6923      	ldr	r3, [r4, #16]
 801030c:	b94b      	cbnz	r3, 8010322 <__swsetup_r+0x9a>
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010318:	d003      	beq.n	8010322 <__swsetup_r+0x9a>
 801031a:	4621      	mov	r1, r4
 801031c:	4630      	mov	r0, r6
 801031e:	f000 fa05 	bl	801072c <__smakebuf_r>
 8010322:	89a0      	ldrh	r0, [r4, #12]
 8010324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010328:	f010 0301 	ands.w	r3, r0, #1
 801032c:	d00a      	beq.n	8010344 <__swsetup_r+0xbc>
 801032e:	2300      	movs	r3, #0
 8010330:	60a3      	str	r3, [r4, #8]
 8010332:	6963      	ldr	r3, [r4, #20]
 8010334:	425b      	negs	r3, r3
 8010336:	61a3      	str	r3, [r4, #24]
 8010338:	6923      	ldr	r3, [r4, #16]
 801033a:	b943      	cbnz	r3, 801034e <__swsetup_r+0xc6>
 801033c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010340:	d1ba      	bne.n	80102b8 <__swsetup_r+0x30>
 8010342:	bd70      	pop	{r4, r5, r6, pc}
 8010344:	0781      	lsls	r1, r0, #30
 8010346:	bf58      	it	pl
 8010348:	6963      	ldrpl	r3, [r4, #20]
 801034a:	60a3      	str	r3, [r4, #8]
 801034c:	e7f4      	b.n	8010338 <__swsetup_r+0xb0>
 801034e:	2000      	movs	r0, #0
 8010350:	e7f7      	b.n	8010342 <__swsetup_r+0xba>
 8010352:	bf00      	nop
 8010354:	20000040 	.word	0x20000040
 8010358:	08013d74 	.word	0x08013d74
 801035c:	08013d94 	.word	0x08013d94
 8010360:	08013d54 	.word	0x08013d54

08010364 <abort>:
 8010364:	b508      	push	{r3, lr}
 8010366:	2006      	movs	r0, #6
 8010368:	f000 fa50 	bl	801080c <raise>
 801036c:	2001      	movs	r0, #1
 801036e:	f7f4 f96f 	bl	8004650 <_exit>
	...

08010374 <__sflush_r>:
 8010374:	898a      	ldrh	r2, [r1, #12]
 8010376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037a:	4605      	mov	r5, r0
 801037c:	0710      	lsls	r0, r2, #28
 801037e:	460c      	mov	r4, r1
 8010380:	d458      	bmi.n	8010434 <__sflush_r+0xc0>
 8010382:	684b      	ldr	r3, [r1, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	dc05      	bgt.n	8010394 <__sflush_r+0x20>
 8010388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801038a:	2b00      	cmp	r3, #0
 801038c:	dc02      	bgt.n	8010394 <__sflush_r+0x20>
 801038e:	2000      	movs	r0, #0
 8010390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010396:	2e00      	cmp	r6, #0
 8010398:	d0f9      	beq.n	801038e <__sflush_r+0x1a>
 801039a:	2300      	movs	r3, #0
 801039c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103a0:	682f      	ldr	r7, [r5, #0]
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	d032      	beq.n	801040c <__sflush_r+0x98>
 80103a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	075a      	lsls	r2, r3, #29
 80103ac:	d505      	bpl.n	80103ba <__sflush_r+0x46>
 80103ae:	6863      	ldr	r3, [r4, #4]
 80103b0:	1ac0      	subs	r0, r0, r3
 80103b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103b4:	b10b      	cbz	r3, 80103ba <__sflush_r+0x46>
 80103b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103b8:	1ac0      	subs	r0, r0, r3
 80103ba:	2300      	movs	r3, #0
 80103bc:	4602      	mov	r2, r0
 80103be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103c0:	6a21      	ldr	r1, [r4, #32]
 80103c2:	4628      	mov	r0, r5
 80103c4:	47b0      	blx	r6
 80103c6:	1c43      	adds	r3, r0, #1
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	d106      	bne.n	80103da <__sflush_r+0x66>
 80103cc:	6829      	ldr	r1, [r5, #0]
 80103ce:	291d      	cmp	r1, #29
 80103d0:	d82c      	bhi.n	801042c <__sflush_r+0xb8>
 80103d2:	4a2a      	ldr	r2, [pc, #168]	; (801047c <__sflush_r+0x108>)
 80103d4:	40ca      	lsrs	r2, r1
 80103d6:	07d6      	lsls	r6, r2, #31
 80103d8:	d528      	bpl.n	801042c <__sflush_r+0xb8>
 80103da:	2200      	movs	r2, #0
 80103dc:	6062      	str	r2, [r4, #4]
 80103de:	04d9      	lsls	r1, r3, #19
 80103e0:	6922      	ldr	r2, [r4, #16]
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	d504      	bpl.n	80103f0 <__sflush_r+0x7c>
 80103e6:	1c42      	adds	r2, r0, #1
 80103e8:	d101      	bne.n	80103ee <__sflush_r+0x7a>
 80103ea:	682b      	ldr	r3, [r5, #0]
 80103ec:	b903      	cbnz	r3, 80103f0 <__sflush_r+0x7c>
 80103ee:	6560      	str	r0, [r4, #84]	; 0x54
 80103f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103f2:	602f      	str	r7, [r5, #0]
 80103f4:	2900      	cmp	r1, #0
 80103f6:	d0ca      	beq.n	801038e <__sflush_r+0x1a>
 80103f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103fc:	4299      	cmp	r1, r3
 80103fe:	d002      	beq.n	8010406 <__sflush_r+0x92>
 8010400:	4628      	mov	r0, r5
 8010402:	f7fd fbfd 	bl	800dc00 <_free_r>
 8010406:	2000      	movs	r0, #0
 8010408:	6360      	str	r0, [r4, #52]	; 0x34
 801040a:	e7c1      	b.n	8010390 <__sflush_r+0x1c>
 801040c:	6a21      	ldr	r1, [r4, #32]
 801040e:	2301      	movs	r3, #1
 8010410:	4628      	mov	r0, r5
 8010412:	47b0      	blx	r6
 8010414:	1c41      	adds	r1, r0, #1
 8010416:	d1c7      	bne.n	80103a8 <__sflush_r+0x34>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0c4      	beq.n	80103a8 <__sflush_r+0x34>
 801041e:	2b1d      	cmp	r3, #29
 8010420:	d001      	beq.n	8010426 <__sflush_r+0xb2>
 8010422:	2b16      	cmp	r3, #22
 8010424:	d101      	bne.n	801042a <__sflush_r+0xb6>
 8010426:	602f      	str	r7, [r5, #0]
 8010428:	e7b1      	b.n	801038e <__sflush_r+0x1a>
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	e7ad      	b.n	8010390 <__sflush_r+0x1c>
 8010434:	690f      	ldr	r7, [r1, #16]
 8010436:	2f00      	cmp	r7, #0
 8010438:	d0a9      	beq.n	801038e <__sflush_r+0x1a>
 801043a:	0793      	lsls	r3, r2, #30
 801043c:	680e      	ldr	r6, [r1, #0]
 801043e:	bf08      	it	eq
 8010440:	694b      	ldreq	r3, [r1, #20]
 8010442:	600f      	str	r7, [r1, #0]
 8010444:	bf18      	it	ne
 8010446:	2300      	movne	r3, #0
 8010448:	eba6 0807 	sub.w	r8, r6, r7
 801044c:	608b      	str	r3, [r1, #8]
 801044e:	f1b8 0f00 	cmp.w	r8, #0
 8010452:	dd9c      	ble.n	801038e <__sflush_r+0x1a>
 8010454:	6a21      	ldr	r1, [r4, #32]
 8010456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010458:	4643      	mov	r3, r8
 801045a:	463a      	mov	r2, r7
 801045c:	4628      	mov	r0, r5
 801045e:	47b0      	blx	r6
 8010460:	2800      	cmp	r0, #0
 8010462:	dc06      	bgt.n	8010472 <__sflush_r+0xfe>
 8010464:	89a3      	ldrh	r3, [r4, #12]
 8010466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801046a:	81a3      	strh	r3, [r4, #12]
 801046c:	f04f 30ff 	mov.w	r0, #4294967295
 8010470:	e78e      	b.n	8010390 <__sflush_r+0x1c>
 8010472:	4407      	add	r7, r0
 8010474:	eba8 0800 	sub.w	r8, r8, r0
 8010478:	e7e9      	b.n	801044e <__sflush_r+0xda>
 801047a:	bf00      	nop
 801047c:	20400001 	.word	0x20400001

08010480 <_fflush_r>:
 8010480:	b538      	push	{r3, r4, r5, lr}
 8010482:	690b      	ldr	r3, [r1, #16]
 8010484:	4605      	mov	r5, r0
 8010486:	460c      	mov	r4, r1
 8010488:	b913      	cbnz	r3, 8010490 <_fflush_r+0x10>
 801048a:	2500      	movs	r5, #0
 801048c:	4628      	mov	r0, r5
 801048e:	bd38      	pop	{r3, r4, r5, pc}
 8010490:	b118      	cbz	r0, 801049a <_fflush_r+0x1a>
 8010492:	6983      	ldr	r3, [r0, #24]
 8010494:	b90b      	cbnz	r3, 801049a <_fflush_r+0x1a>
 8010496:	f000 f887 	bl	80105a8 <__sinit>
 801049a:	4b14      	ldr	r3, [pc, #80]	; (80104ec <_fflush_r+0x6c>)
 801049c:	429c      	cmp	r4, r3
 801049e:	d11b      	bne.n	80104d8 <_fflush_r+0x58>
 80104a0:	686c      	ldr	r4, [r5, #4]
 80104a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d0ef      	beq.n	801048a <_fflush_r+0xa>
 80104aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80104ac:	07d0      	lsls	r0, r2, #31
 80104ae:	d404      	bmi.n	80104ba <_fflush_r+0x3a>
 80104b0:	0599      	lsls	r1, r3, #22
 80104b2:	d402      	bmi.n	80104ba <_fflush_r+0x3a>
 80104b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104b6:	f7ff fcd0 	bl	800fe5a <__retarget_lock_acquire_recursive>
 80104ba:	4628      	mov	r0, r5
 80104bc:	4621      	mov	r1, r4
 80104be:	f7ff ff59 	bl	8010374 <__sflush_r>
 80104c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104c4:	07da      	lsls	r2, r3, #31
 80104c6:	4605      	mov	r5, r0
 80104c8:	d4e0      	bmi.n	801048c <_fflush_r+0xc>
 80104ca:	89a3      	ldrh	r3, [r4, #12]
 80104cc:	059b      	lsls	r3, r3, #22
 80104ce:	d4dd      	bmi.n	801048c <_fflush_r+0xc>
 80104d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104d2:	f7ff fcc3 	bl	800fe5c <__retarget_lock_release_recursive>
 80104d6:	e7d9      	b.n	801048c <_fflush_r+0xc>
 80104d8:	4b05      	ldr	r3, [pc, #20]	; (80104f0 <_fflush_r+0x70>)
 80104da:	429c      	cmp	r4, r3
 80104dc:	d101      	bne.n	80104e2 <_fflush_r+0x62>
 80104de:	68ac      	ldr	r4, [r5, #8]
 80104e0:	e7df      	b.n	80104a2 <_fflush_r+0x22>
 80104e2:	4b04      	ldr	r3, [pc, #16]	; (80104f4 <_fflush_r+0x74>)
 80104e4:	429c      	cmp	r4, r3
 80104e6:	bf08      	it	eq
 80104e8:	68ec      	ldreq	r4, [r5, #12]
 80104ea:	e7da      	b.n	80104a2 <_fflush_r+0x22>
 80104ec:	08013d74 	.word	0x08013d74
 80104f0:	08013d94 	.word	0x08013d94
 80104f4:	08013d54 	.word	0x08013d54

080104f8 <std>:
 80104f8:	2300      	movs	r3, #0
 80104fa:	b510      	push	{r4, lr}
 80104fc:	4604      	mov	r4, r0
 80104fe:	e9c0 3300 	strd	r3, r3, [r0]
 8010502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010506:	6083      	str	r3, [r0, #8]
 8010508:	8181      	strh	r1, [r0, #12]
 801050a:	6643      	str	r3, [r0, #100]	; 0x64
 801050c:	81c2      	strh	r2, [r0, #14]
 801050e:	6183      	str	r3, [r0, #24]
 8010510:	4619      	mov	r1, r3
 8010512:	2208      	movs	r2, #8
 8010514:	305c      	adds	r0, #92	; 0x5c
 8010516:	f7fd fb6b 	bl	800dbf0 <memset>
 801051a:	4b05      	ldr	r3, [pc, #20]	; (8010530 <std+0x38>)
 801051c:	6263      	str	r3, [r4, #36]	; 0x24
 801051e:	4b05      	ldr	r3, [pc, #20]	; (8010534 <std+0x3c>)
 8010520:	62a3      	str	r3, [r4, #40]	; 0x28
 8010522:	4b05      	ldr	r3, [pc, #20]	; (8010538 <std+0x40>)
 8010524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010526:	4b05      	ldr	r3, [pc, #20]	; (801053c <std+0x44>)
 8010528:	6224      	str	r4, [r4, #32]
 801052a:	6323      	str	r3, [r4, #48]	; 0x30
 801052c:	bd10      	pop	{r4, pc}
 801052e:	bf00      	nop
 8010530:	08010845 	.word	0x08010845
 8010534:	08010867 	.word	0x08010867
 8010538:	0801089f 	.word	0x0801089f
 801053c:	080108c3 	.word	0x080108c3

08010540 <_cleanup_r>:
 8010540:	4901      	ldr	r1, [pc, #4]	; (8010548 <_cleanup_r+0x8>)
 8010542:	f000 b8af 	b.w	80106a4 <_fwalk_reent>
 8010546:	bf00      	nop
 8010548:	08010481 	.word	0x08010481

0801054c <__sfmoreglue>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	2268      	movs	r2, #104	; 0x68
 8010550:	1e4d      	subs	r5, r1, #1
 8010552:	4355      	muls	r5, r2
 8010554:	460e      	mov	r6, r1
 8010556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801055a:	f7fd fbbd 	bl	800dcd8 <_malloc_r>
 801055e:	4604      	mov	r4, r0
 8010560:	b140      	cbz	r0, 8010574 <__sfmoreglue+0x28>
 8010562:	2100      	movs	r1, #0
 8010564:	e9c0 1600 	strd	r1, r6, [r0]
 8010568:	300c      	adds	r0, #12
 801056a:	60a0      	str	r0, [r4, #8]
 801056c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010570:	f7fd fb3e 	bl	800dbf0 <memset>
 8010574:	4620      	mov	r0, r4
 8010576:	bd70      	pop	{r4, r5, r6, pc}

08010578 <__sfp_lock_acquire>:
 8010578:	4801      	ldr	r0, [pc, #4]	; (8010580 <__sfp_lock_acquire+0x8>)
 801057a:	f7ff bc6e 	b.w	800fe5a <__retarget_lock_acquire_recursive>
 801057e:	bf00      	nop
 8010580:	2000dc49 	.word	0x2000dc49

08010584 <__sfp_lock_release>:
 8010584:	4801      	ldr	r0, [pc, #4]	; (801058c <__sfp_lock_release+0x8>)
 8010586:	f7ff bc69 	b.w	800fe5c <__retarget_lock_release_recursive>
 801058a:	bf00      	nop
 801058c:	2000dc49 	.word	0x2000dc49

08010590 <__sinit_lock_acquire>:
 8010590:	4801      	ldr	r0, [pc, #4]	; (8010598 <__sinit_lock_acquire+0x8>)
 8010592:	f7ff bc62 	b.w	800fe5a <__retarget_lock_acquire_recursive>
 8010596:	bf00      	nop
 8010598:	2000dc4a 	.word	0x2000dc4a

0801059c <__sinit_lock_release>:
 801059c:	4801      	ldr	r0, [pc, #4]	; (80105a4 <__sinit_lock_release+0x8>)
 801059e:	f7ff bc5d 	b.w	800fe5c <__retarget_lock_release_recursive>
 80105a2:	bf00      	nop
 80105a4:	2000dc4a 	.word	0x2000dc4a

080105a8 <__sinit>:
 80105a8:	b510      	push	{r4, lr}
 80105aa:	4604      	mov	r4, r0
 80105ac:	f7ff fff0 	bl	8010590 <__sinit_lock_acquire>
 80105b0:	69a3      	ldr	r3, [r4, #24]
 80105b2:	b11b      	cbz	r3, 80105bc <__sinit+0x14>
 80105b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105b8:	f7ff bff0 	b.w	801059c <__sinit_lock_release>
 80105bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80105c0:	6523      	str	r3, [r4, #80]	; 0x50
 80105c2:	4b13      	ldr	r3, [pc, #76]	; (8010610 <__sinit+0x68>)
 80105c4:	4a13      	ldr	r2, [pc, #76]	; (8010614 <__sinit+0x6c>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80105ca:	42a3      	cmp	r3, r4
 80105cc:	bf04      	itt	eq
 80105ce:	2301      	moveq	r3, #1
 80105d0:	61a3      	streq	r3, [r4, #24]
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 f820 	bl	8010618 <__sfp>
 80105d8:	6060      	str	r0, [r4, #4]
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 f81c 	bl	8010618 <__sfp>
 80105e0:	60a0      	str	r0, [r4, #8]
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 f818 	bl	8010618 <__sfp>
 80105e8:	2200      	movs	r2, #0
 80105ea:	60e0      	str	r0, [r4, #12]
 80105ec:	2104      	movs	r1, #4
 80105ee:	6860      	ldr	r0, [r4, #4]
 80105f0:	f7ff ff82 	bl	80104f8 <std>
 80105f4:	68a0      	ldr	r0, [r4, #8]
 80105f6:	2201      	movs	r2, #1
 80105f8:	2109      	movs	r1, #9
 80105fa:	f7ff ff7d 	bl	80104f8 <std>
 80105fe:	68e0      	ldr	r0, [r4, #12]
 8010600:	2202      	movs	r2, #2
 8010602:	2112      	movs	r1, #18
 8010604:	f7ff ff78 	bl	80104f8 <std>
 8010608:	2301      	movs	r3, #1
 801060a:	61a3      	str	r3, [r4, #24]
 801060c:	e7d2      	b.n	80105b4 <__sinit+0xc>
 801060e:	bf00      	nop
 8010610:	080139d8 	.word	0x080139d8
 8010614:	08010541 	.word	0x08010541

08010618 <__sfp>:
 8010618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061a:	4607      	mov	r7, r0
 801061c:	f7ff ffac 	bl	8010578 <__sfp_lock_acquire>
 8010620:	4b1e      	ldr	r3, [pc, #120]	; (801069c <__sfp+0x84>)
 8010622:	681e      	ldr	r6, [r3, #0]
 8010624:	69b3      	ldr	r3, [r6, #24]
 8010626:	b913      	cbnz	r3, 801062e <__sfp+0x16>
 8010628:	4630      	mov	r0, r6
 801062a:	f7ff ffbd 	bl	80105a8 <__sinit>
 801062e:	3648      	adds	r6, #72	; 0x48
 8010630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010634:	3b01      	subs	r3, #1
 8010636:	d503      	bpl.n	8010640 <__sfp+0x28>
 8010638:	6833      	ldr	r3, [r6, #0]
 801063a:	b30b      	cbz	r3, 8010680 <__sfp+0x68>
 801063c:	6836      	ldr	r6, [r6, #0]
 801063e:	e7f7      	b.n	8010630 <__sfp+0x18>
 8010640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010644:	b9d5      	cbnz	r5, 801067c <__sfp+0x64>
 8010646:	4b16      	ldr	r3, [pc, #88]	; (80106a0 <__sfp+0x88>)
 8010648:	60e3      	str	r3, [r4, #12]
 801064a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801064e:	6665      	str	r5, [r4, #100]	; 0x64
 8010650:	f7ff fc02 	bl	800fe58 <__retarget_lock_init_recursive>
 8010654:	f7ff ff96 	bl	8010584 <__sfp_lock_release>
 8010658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801065c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010660:	6025      	str	r5, [r4, #0]
 8010662:	61a5      	str	r5, [r4, #24]
 8010664:	2208      	movs	r2, #8
 8010666:	4629      	mov	r1, r5
 8010668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801066c:	f7fd fac0 	bl	800dbf0 <memset>
 8010670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010678:	4620      	mov	r0, r4
 801067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801067c:	3468      	adds	r4, #104	; 0x68
 801067e:	e7d9      	b.n	8010634 <__sfp+0x1c>
 8010680:	2104      	movs	r1, #4
 8010682:	4638      	mov	r0, r7
 8010684:	f7ff ff62 	bl	801054c <__sfmoreglue>
 8010688:	4604      	mov	r4, r0
 801068a:	6030      	str	r0, [r6, #0]
 801068c:	2800      	cmp	r0, #0
 801068e:	d1d5      	bne.n	801063c <__sfp+0x24>
 8010690:	f7ff ff78 	bl	8010584 <__sfp_lock_release>
 8010694:	230c      	movs	r3, #12
 8010696:	603b      	str	r3, [r7, #0]
 8010698:	e7ee      	b.n	8010678 <__sfp+0x60>
 801069a:	bf00      	nop
 801069c:	080139d8 	.word	0x080139d8
 80106a0:	ffff0001 	.word	0xffff0001

080106a4 <_fwalk_reent>:
 80106a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a8:	4606      	mov	r6, r0
 80106aa:	4688      	mov	r8, r1
 80106ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106b0:	2700      	movs	r7, #0
 80106b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106b6:	f1b9 0901 	subs.w	r9, r9, #1
 80106ba:	d505      	bpl.n	80106c8 <_fwalk_reent+0x24>
 80106bc:	6824      	ldr	r4, [r4, #0]
 80106be:	2c00      	cmp	r4, #0
 80106c0:	d1f7      	bne.n	80106b2 <_fwalk_reent+0xe>
 80106c2:	4638      	mov	r0, r7
 80106c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106c8:	89ab      	ldrh	r3, [r5, #12]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d907      	bls.n	80106de <_fwalk_reent+0x3a>
 80106ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106d2:	3301      	adds	r3, #1
 80106d4:	d003      	beq.n	80106de <_fwalk_reent+0x3a>
 80106d6:	4629      	mov	r1, r5
 80106d8:	4630      	mov	r0, r6
 80106da:	47c0      	blx	r8
 80106dc:	4307      	orrs	r7, r0
 80106de:	3568      	adds	r5, #104	; 0x68
 80106e0:	e7e9      	b.n	80106b6 <_fwalk_reent+0x12>

080106e2 <__swhatbuf_r>:
 80106e2:	b570      	push	{r4, r5, r6, lr}
 80106e4:	460e      	mov	r6, r1
 80106e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ea:	2900      	cmp	r1, #0
 80106ec:	b096      	sub	sp, #88	; 0x58
 80106ee:	4614      	mov	r4, r2
 80106f0:	461d      	mov	r5, r3
 80106f2:	da08      	bge.n	8010706 <__swhatbuf_r+0x24>
 80106f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80106f8:	2200      	movs	r2, #0
 80106fa:	602a      	str	r2, [r5, #0]
 80106fc:	061a      	lsls	r2, r3, #24
 80106fe:	d410      	bmi.n	8010722 <__swhatbuf_r+0x40>
 8010700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010704:	e00e      	b.n	8010724 <__swhatbuf_r+0x42>
 8010706:	466a      	mov	r2, sp
 8010708:	f000 f902 	bl	8010910 <_fstat_r>
 801070c:	2800      	cmp	r0, #0
 801070e:	dbf1      	blt.n	80106f4 <__swhatbuf_r+0x12>
 8010710:	9a01      	ldr	r2, [sp, #4]
 8010712:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010716:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801071a:	425a      	negs	r2, r3
 801071c:	415a      	adcs	r2, r3
 801071e:	602a      	str	r2, [r5, #0]
 8010720:	e7ee      	b.n	8010700 <__swhatbuf_r+0x1e>
 8010722:	2340      	movs	r3, #64	; 0x40
 8010724:	2000      	movs	r0, #0
 8010726:	6023      	str	r3, [r4, #0]
 8010728:	b016      	add	sp, #88	; 0x58
 801072a:	bd70      	pop	{r4, r5, r6, pc}

0801072c <__smakebuf_r>:
 801072c:	898b      	ldrh	r3, [r1, #12]
 801072e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010730:	079d      	lsls	r5, r3, #30
 8010732:	4606      	mov	r6, r0
 8010734:	460c      	mov	r4, r1
 8010736:	d507      	bpl.n	8010748 <__smakebuf_r+0x1c>
 8010738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801073c:	6023      	str	r3, [r4, #0]
 801073e:	6123      	str	r3, [r4, #16]
 8010740:	2301      	movs	r3, #1
 8010742:	6163      	str	r3, [r4, #20]
 8010744:	b002      	add	sp, #8
 8010746:	bd70      	pop	{r4, r5, r6, pc}
 8010748:	ab01      	add	r3, sp, #4
 801074a:	466a      	mov	r2, sp
 801074c:	f7ff ffc9 	bl	80106e2 <__swhatbuf_r>
 8010750:	9900      	ldr	r1, [sp, #0]
 8010752:	4605      	mov	r5, r0
 8010754:	4630      	mov	r0, r6
 8010756:	f7fd fabf 	bl	800dcd8 <_malloc_r>
 801075a:	b948      	cbnz	r0, 8010770 <__smakebuf_r+0x44>
 801075c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010760:	059a      	lsls	r2, r3, #22
 8010762:	d4ef      	bmi.n	8010744 <__smakebuf_r+0x18>
 8010764:	f023 0303 	bic.w	r3, r3, #3
 8010768:	f043 0302 	orr.w	r3, r3, #2
 801076c:	81a3      	strh	r3, [r4, #12]
 801076e:	e7e3      	b.n	8010738 <__smakebuf_r+0xc>
 8010770:	4b0d      	ldr	r3, [pc, #52]	; (80107a8 <__smakebuf_r+0x7c>)
 8010772:	62b3      	str	r3, [r6, #40]	; 0x28
 8010774:	89a3      	ldrh	r3, [r4, #12]
 8010776:	6020      	str	r0, [r4, #0]
 8010778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801077c:	81a3      	strh	r3, [r4, #12]
 801077e:	9b00      	ldr	r3, [sp, #0]
 8010780:	6163      	str	r3, [r4, #20]
 8010782:	9b01      	ldr	r3, [sp, #4]
 8010784:	6120      	str	r0, [r4, #16]
 8010786:	b15b      	cbz	r3, 80107a0 <__smakebuf_r+0x74>
 8010788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801078c:	4630      	mov	r0, r6
 801078e:	f000 f8d1 	bl	8010934 <_isatty_r>
 8010792:	b128      	cbz	r0, 80107a0 <__smakebuf_r+0x74>
 8010794:	89a3      	ldrh	r3, [r4, #12]
 8010796:	f023 0303 	bic.w	r3, r3, #3
 801079a:	f043 0301 	orr.w	r3, r3, #1
 801079e:	81a3      	strh	r3, [r4, #12]
 80107a0:	89a0      	ldrh	r0, [r4, #12]
 80107a2:	4305      	orrs	r5, r0
 80107a4:	81a5      	strh	r5, [r4, #12]
 80107a6:	e7cd      	b.n	8010744 <__smakebuf_r+0x18>
 80107a8:	08010541 	.word	0x08010541

080107ac <_malloc_usable_size_r>:
 80107ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107b0:	1f18      	subs	r0, r3, #4
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	bfbc      	itt	lt
 80107b6:	580b      	ldrlt	r3, [r1, r0]
 80107b8:	18c0      	addlt	r0, r0, r3
 80107ba:	4770      	bx	lr

080107bc <_raise_r>:
 80107bc:	291f      	cmp	r1, #31
 80107be:	b538      	push	{r3, r4, r5, lr}
 80107c0:	4604      	mov	r4, r0
 80107c2:	460d      	mov	r5, r1
 80107c4:	d904      	bls.n	80107d0 <_raise_r+0x14>
 80107c6:	2316      	movs	r3, #22
 80107c8:	6003      	str	r3, [r0, #0]
 80107ca:	f04f 30ff 	mov.w	r0, #4294967295
 80107ce:	bd38      	pop	{r3, r4, r5, pc}
 80107d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80107d2:	b112      	cbz	r2, 80107da <_raise_r+0x1e>
 80107d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107d8:	b94b      	cbnz	r3, 80107ee <_raise_r+0x32>
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 f830 	bl	8010840 <_getpid_r>
 80107e0:	462a      	mov	r2, r5
 80107e2:	4601      	mov	r1, r0
 80107e4:	4620      	mov	r0, r4
 80107e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107ea:	f000 b817 	b.w	801081c <_kill_r>
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d00a      	beq.n	8010808 <_raise_r+0x4c>
 80107f2:	1c59      	adds	r1, r3, #1
 80107f4:	d103      	bne.n	80107fe <_raise_r+0x42>
 80107f6:	2316      	movs	r3, #22
 80107f8:	6003      	str	r3, [r0, #0]
 80107fa:	2001      	movs	r0, #1
 80107fc:	e7e7      	b.n	80107ce <_raise_r+0x12>
 80107fe:	2400      	movs	r4, #0
 8010800:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010804:	4628      	mov	r0, r5
 8010806:	4798      	blx	r3
 8010808:	2000      	movs	r0, #0
 801080a:	e7e0      	b.n	80107ce <_raise_r+0x12>

0801080c <raise>:
 801080c:	4b02      	ldr	r3, [pc, #8]	; (8010818 <raise+0xc>)
 801080e:	4601      	mov	r1, r0
 8010810:	6818      	ldr	r0, [r3, #0]
 8010812:	f7ff bfd3 	b.w	80107bc <_raise_r>
 8010816:	bf00      	nop
 8010818:	20000040 	.word	0x20000040

0801081c <_kill_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d07      	ldr	r5, [pc, #28]	; (801083c <_kill_r+0x20>)
 8010820:	2300      	movs	r3, #0
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	4611      	mov	r1, r2
 8010828:	602b      	str	r3, [r5, #0]
 801082a:	f7f3 ff01 	bl	8004630 <_kill>
 801082e:	1c43      	adds	r3, r0, #1
 8010830:	d102      	bne.n	8010838 <_kill_r+0x1c>
 8010832:	682b      	ldr	r3, [r5, #0]
 8010834:	b103      	cbz	r3, 8010838 <_kill_r+0x1c>
 8010836:	6023      	str	r3, [r4, #0]
 8010838:	bd38      	pop	{r3, r4, r5, pc}
 801083a:	bf00      	nop
 801083c:	2000dc44 	.word	0x2000dc44

08010840 <_getpid_r>:
 8010840:	f7f3 beee 	b.w	8004620 <_getpid>

08010844 <__sread>:
 8010844:	b510      	push	{r4, lr}
 8010846:	460c      	mov	r4, r1
 8010848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801084c:	f000 f894 	bl	8010978 <_read_r>
 8010850:	2800      	cmp	r0, #0
 8010852:	bfab      	itete	ge
 8010854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010856:	89a3      	ldrhlt	r3, [r4, #12]
 8010858:	181b      	addge	r3, r3, r0
 801085a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801085e:	bfac      	ite	ge
 8010860:	6563      	strge	r3, [r4, #84]	; 0x54
 8010862:	81a3      	strhlt	r3, [r4, #12]
 8010864:	bd10      	pop	{r4, pc}

08010866 <__swrite>:
 8010866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801086a:	461f      	mov	r7, r3
 801086c:	898b      	ldrh	r3, [r1, #12]
 801086e:	05db      	lsls	r3, r3, #23
 8010870:	4605      	mov	r5, r0
 8010872:	460c      	mov	r4, r1
 8010874:	4616      	mov	r6, r2
 8010876:	d505      	bpl.n	8010884 <__swrite+0x1e>
 8010878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087c:	2302      	movs	r3, #2
 801087e:	2200      	movs	r2, #0
 8010880:	f000 f868 	bl	8010954 <_lseek_r>
 8010884:	89a3      	ldrh	r3, [r4, #12]
 8010886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801088a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801088e:	81a3      	strh	r3, [r4, #12]
 8010890:	4632      	mov	r2, r6
 8010892:	463b      	mov	r3, r7
 8010894:	4628      	mov	r0, r5
 8010896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801089a:	f000 b817 	b.w	80108cc <_write_r>

0801089e <__sseek>:
 801089e:	b510      	push	{r4, lr}
 80108a0:	460c      	mov	r4, r1
 80108a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a6:	f000 f855 	bl	8010954 <_lseek_r>
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	89a3      	ldrh	r3, [r4, #12]
 80108ae:	bf15      	itete	ne
 80108b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80108b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108ba:	81a3      	strheq	r3, [r4, #12]
 80108bc:	bf18      	it	ne
 80108be:	81a3      	strhne	r3, [r4, #12]
 80108c0:	bd10      	pop	{r4, pc}

080108c2 <__sclose>:
 80108c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c6:	f000 b813 	b.w	80108f0 <_close_r>
	...

080108cc <_write_r>:
 80108cc:	b538      	push	{r3, r4, r5, lr}
 80108ce:	4d07      	ldr	r5, [pc, #28]	; (80108ec <_write_r+0x20>)
 80108d0:	4604      	mov	r4, r0
 80108d2:	4608      	mov	r0, r1
 80108d4:	4611      	mov	r1, r2
 80108d6:	2200      	movs	r2, #0
 80108d8:	602a      	str	r2, [r5, #0]
 80108da:	461a      	mov	r2, r3
 80108dc:	f7f3 fedf 	bl	800469e <_write>
 80108e0:	1c43      	adds	r3, r0, #1
 80108e2:	d102      	bne.n	80108ea <_write_r+0x1e>
 80108e4:	682b      	ldr	r3, [r5, #0]
 80108e6:	b103      	cbz	r3, 80108ea <_write_r+0x1e>
 80108e8:	6023      	str	r3, [r4, #0]
 80108ea:	bd38      	pop	{r3, r4, r5, pc}
 80108ec:	2000dc44 	.word	0x2000dc44

080108f0 <_close_r>:
 80108f0:	b538      	push	{r3, r4, r5, lr}
 80108f2:	4d06      	ldr	r5, [pc, #24]	; (801090c <_close_r+0x1c>)
 80108f4:	2300      	movs	r3, #0
 80108f6:	4604      	mov	r4, r0
 80108f8:	4608      	mov	r0, r1
 80108fa:	602b      	str	r3, [r5, #0]
 80108fc:	f7f3 feeb 	bl	80046d6 <_close>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_close_r+0x1a>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_close_r+0x1a>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	2000dc44 	.word	0x2000dc44

08010910 <_fstat_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	4d07      	ldr	r5, [pc, #28]	; (8010930 <_fstat_r+0x20>)
 8010914:	2300      	movs	r3, #0
 8010916:	4604      	mov	r4, r0
 8010918:	4608      	mov	r0, r1
 801091a:	4611      	mov	r1, r2
 801091c:	602b      	str	r3, [r5, #0]
 801091e:	f7f3 fee6 	bl	80046ee <_fstat>
 8010922:	1c43      	adds	r3, r0, #1
 8010924:	d102      	bne.n	801092c <_fstat_r+0x1c>
 8010926:	682b      	ldr	r3, [r5, #0]
 8010928:	b103      	cbz	r3, 801092c <_fstat_r+0x1c>
 801092a:	6023      	str	r3, [r4, #0]
 801092c:	bd38      	pop	{r3, r4, r5, pc}
 801092e:	bf00      	nop
 8010930:	2000dc44 	.word	0x2000dc44

08010934 <_isatty_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	4d06      	ldr	r5, [pc, #24]	; (8010950 <_isatty_r+0x1c>)
 8010938:	2300      	movs	r3, #0
 801093a:	4604      	mov	r4, r0
 801093c:	4608      	mov	r0, r1
 801093e:	602b      	str	r3, [r5, #0]
 8010940:	f7f3 fee5 	bl	800470e <_isatty>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d102      	bne.n	801094e <_isatty_r+0x1a>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	b103      	cbz	r3, 801094e <_isatty_r+0x1a>
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	2000dc44 	.word	0x2000dc44

08010954 <_lseek_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d07      	ldr	r5, [pc, #28]	; (8010974 <_lseek_r+0x20>)
 8010958:	4604      	mov	r4, r0
 801095a:	4608      	mov	r0, r1
 801095c:	4611      	mov	r1, r2
 801095e:	2200      	movs	r2, #0
 8010960:	602a      	str	r2, [r5, #0]
 8010962:	461a      	mov	r2, r3
 8010964:	f7f3 fede 	bl	8004724 <_lseek>
 8010968:	1c43      	adds	r3, r0, #1
 801096a:	d102      	bne.n	8010972 <_lseek_r+0x1e>
 801096c:	682b      	ldr	r3, [r5, #0]
 801096e:	b103      	cbz	r3, 8010972 <_lseek_r+0x1e>
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	bd38      	pop	{r3, r4, r5, pc}
 8010974:	2000dc44 	.word	0x2000dc44

08010978 <_read_r>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	4d07      	ldr	r5, [pc, #28]	; (8010998 <_read_r+0x20>)
 801097c:	4604      	mov	r4, r0
 801097e:	4608      	mov	r0, r1
 8010980:	4611      	mov	r1, r2
 8010982:	2200      	movs	r2, #0
 8010984:	602a      	str	r2, [r5, #0]
 8010986:	461a      	mov	r2, r3
 8010988:	f7f3 fe6c 	bl	8004664 <_read>
 801098c:	1c43      	adds	r3, r0, #1
 801098e:	d102      	bne.n	8010996 <_read_r+0x1e>
 8010990:	682b      	ldr	r3, [r5, #0]
 8010992:	b103      	cbz	r3, 8010996 <_read_r+0x1e>
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	bd38      	pop	{r3, r4, r5, pc}
 8010998:	2000dc44 	.word	0x2000dc44
 801099c:	00000000 	.word	0x00000000

080109a0 <cos>:
 80109a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109a2:	ec53 2b10 	vmov	r2, r3, d0
 80109a6:	4826      	ldr	r0, [pc, #152]	; (8010a40 <cos+0xa0>)
 80109a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80109ac:	4281      	cmp	r1, r0
 80109ae:	dc06      	bgt.n	80109be <cos+0x1e>
 80109b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010a38 <cos+0x98>
 80109b4:	b005      	add	sp, #20
 80109b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80109ba:	f001 bcd5 	b.w	8012368 <__kernel_cos>
 80109be:	4821      	ldr	r0, [pc, #132]	; (8010a44 <cos+0xa4>)
 80109c0:	4281      	cmp	r1, r0
 80109c2:	dd09      	ble.n	80109d8 <cos+0x38>
 80109c4:	ee10 0a10 	vmov	r0, s0
 80109c8:	4619      	mov	r1, r3
 80109ca:	f7ef fc75 	bl	80002b8 <__aeabi_dsub>
 80109ce:	ec41 0b10 	vmov	d0, r0, r1
 80109d2:	b005      	add	sp, #20
 80109d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80109d8:	4668      	mov	r0, sp
 80109da:	f001 fa05 	bl	8011de8 <__ieee754_rem_pio2>
 80109de:	f000 0003 	and.w	r0, r0, #3
 80109e2:	2801      	cmp	r0, #1
 80109e4:	d00b      	beq.n	80109fe <cos+0x5e>
 80109e6:	2802      	cmp	r0, #2
 80109e8:	d016      	beq.n	8010a18 <cos+0x78>
 80109ea:	b9e0      	cbnz	r0, 8010a26 <cos+0x86>
 80109ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80109f0:	ed9d 0b00 	vldr	d0, [sp]
 80109f4:	f001 fcb8 	bl	8012368 <__kernel_cos>
 80109f8:	ec51 0b10 	vmov	r0, r1, d0
 80109fc:	e7e7      	b.n	80109ce <cos+0x2e>
 80109fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a02:	ed9d 0b00 	vldr	d0, [sp]
 8010a06:	f002 f8c7 	bl	8012b98 <__kernel_sin>
 8010a0a:	ec53 2b10 	vmov	r2, r3, d0
 8010a0e:	ee10 0a10 	vmov	r0, s0
 8010a12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010a16:	e7da      	b.n	80109ce <cos+0x2e>
 8010a18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a1c:	ed9d 0b00 	vldr	d0, [sp]
 8010a20:	f001 fca2 	bl	8012368 <__kernel_cos>
 8010a24:	e7f1      	b.n	8010a0a <cos+0x6a>
 8010a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a2a:	ed9d 0b00 	vldr	d0, [sp]
 8010a2e:	2001      	movs	r0, #1
 8010a30:	f002 f8b2 	bl	8012b98 <__kernel_sin>
 8010a34:	e7e0      	b.n	80109f8 <cos+0x58>
 8010a36:	bf00      	nop
	...
 8010a40:	3fe921fb 	.word	0x3fe921fb
 8010a44:	7fefffff 	.word	0x7fefffff

08010a48 <round>:
 8010a48:	ec51 0b10 	vmov	r0, r1, d0
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8010a52:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8010a56:	2c13      	cmp	r4, #19
 8010a58:	ee10 2a10 	vmov	r2, s0
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	dc19      	bgt.n	8010a94 <round+0x4c>
 8010a60:	2c00      	cmp	r4, #0
 8010a62:	da09      	bge.n	8010a78 <round+0x30>
 8010a64:	3401      	adds	r4, #1
 8010a66:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010a6a:	d103      	bne.n	8010a74 <round+0x2c>
 8010a6c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010a70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010a74:	2200      	movs	r2, #0
 8010a76:	e028      	b.n	8010aca <round+0x82>
 8010a78:	4d15      	ldr	r5, [pc, #84]	; (8010ad0 <round+0x88>)
 8010a7a:	4125      	asrs	r5, r4
 8010a7c:	ea01 0605 	and.w	r6, r1, r5
 8010a80:	4332      	orrs	r2, r6
 8010a82:	d00e      	beq.n	8010aa2 <round+0x5a>
 8010a84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010a88:	fa42 f404 	asr.w	r4, r2, r4
 8010a8c:	4423      	add	r3, r4
 8010a8e:	ea23 0305 	bic.w	r3, r3, r5
 8010a92:	e7ef      	b.n	8010a74 <round+0x2c>
 8010a94:	2c33      	cmp	r4, #51	; 0x33
 8010a96:	dd07      	ble.n	8010aa8 <round+0x60>
 8010a98:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010a9c:	d101      	bne.n	8010aa2 <round+0x5a>
 8010a9e:	f7ef fc0d 	bl	80002bc <__adddf3>
 8010aa2:	ec41 0b10 	vmov	d0, r0, r1
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}
 8010aa8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8010aac:	f04f 35ff 	mov.w	r5, #4294967295
 8010ab0:	40f5      	lsrs	r5, r6
 8010ab2:	4228      	tst	r0, r5
 8010ab4:	d0f5      	beq.n	8010aa2 <round+0x5a>
 8010ab6:	2101      	movs	r1, #1
 8010ab8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010abc:	fa01 f404 	lsl.w	r4, r1, r4
 8010ac0:	1912      	adds	r2, r2, r4
 8010ac2:	bf28      	it	cs
 8010ac4:	185b      	addcs	r3, r3, r1
 8010ac6:	ea22 0205 	bic.w	r2, r2, r5
 8010aca:	4619      	mov	r1, r3
 8010acc:	4610      	mov	r0, r2
 8010ace:	e7e8      	b.n	8010aa2 <round+0x5a>
 8010ad0:	000fffff 	.word	0x000fffff
 8010ad4:	00000000 	.word	0x00000000

08010ad8 <sin>:
 8010ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ada:	ec53 2b10 	vmov	r2, r3, d0
 8010ade:	4828      	ldr	r0, [pc, #160]	; (8010b80 <sin+0xa8>)
 8010ae0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010ae4:	4281      	cmp	r1, r0
 8010ae6:	dc07      	bgt.n	8010af8 <sin+0x20>
 8010ae8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010b78 <sin+0xa0>
 8010aec:	2000      	movs	r0, #0
 8010aee:	b005      	add	sp, #20
 8010af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010af4:	f002 b850 	b.w	8012b98 <__kernel_sin>
 8010af8:	4822      	ldr	r0, [pc, #136]	; (8010b84 <sin+0xac>)
 8010afa:	4281      	cmp	r1, r0
 8010afc:	dd09      	ble.n	8010b12 <sin+0x3a>
 8010afe:	ee10 0a10 	vmov	r0, s0
 8010b02:	4619      	mov	r1, r3
 8010b04:	f7ef fbd8 	bl	80002b8 <__aeabi_dsub>
 8010b08:	ec41 0b10 	vmov	d0, r0, r1
 8010b0c:	b005      	add	sp, #20
 8010b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b12:	4668      	mov	r0, sp
 8010b14:	f001 f968 	bl	8011de8 <__ieee754_rem_pio2>
 8010b18:	f000 0003 	and.w	r0, r0, #3
 8010b1c:	2801      	cmp	r0, #1
 8010b1e:	d00c      	beq.n	8010b3a <sin+0x62>
 8010b20:	2802      	cmp	r0, #2
 8010b22:	d011      	beq.n	8010b48 <sin+0x70>
 8010b24:	b9f0      	cbnz	r0, 8010b64 <sin+0x8c>
 8010b26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b2a:	ed9d 0b00 	vldr	d0, [sp]
 8010b2e:	2001      	movs	r0, #1
 8010b30:	f002 f832 	bl	8012b98 <__kernel_sin>
 8010b34:	ec51 0b10 	vmov	r0, r1, d0
 8010b38:	e7e6      	b.n	8010b08 <sin+0x30>
 8010b3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b3e:	ed9d 0b00 	vldr	d0, [sp]
 8010b42:	f001 fc11 	bl	8012368 <__kernel_cos>
 8010b46:	e7f5      	b.n	8010b34 <sin+0x5c>
 8010b48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b4c:	ed9d 0b00 	vldr	d0, [sp]
 8010b50:	2001      	movs	r0, #1
 8010b52:	f002 f821 	bl	8012b98 <__kernel_sin>
 8010b56:	ec53 2b10 	vmov	r2, r3, d0
 8010b5a:	ee10 0a10 	vmov	r0, s0
 8010b5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010b62:	e7d1      	b.n	8010b08 <sin+0x30>
 8010b64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b68:	ed9d 0b00 	vldr	d0, [sp]
 8010b6c:	f001 fbfc 	bl	8012368 <__kernel_cos>
 8010b70:	e7f1      	b.n	8010b56 <sin+0x7e>
 8010b72:	bf00      	nop
 8010b74:	f3af 8000 	nop.w
	...
 8010b80:	3fe921fb 	.word	0x3fe921fb
 8010b84:	7fefffff 	.word	0x7fefffff

08010b88 <acos>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	ed2d 8b02 	vpush	{d8}
 8010b8e:	ec55 4b10 	vmov	r4, r5, d0
 8010b92:	f000 f8cd 	bl	8010d30 <__ieee754_acos>
 8010b96:	4622      	mov	r2, r4
 8010b98:	462b      	mov	r3, r5
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8010ba2:	eef0 8a60 	vmov.f32	s17, s1
 8010ba6:	f7ef ffd9 	bl	8000b5c <__aeabi_dcmpun>
 8010baa:	b9a8      	cbnz	r0, 8010bd8 <acos+0x50>
 8010bac:	ec45 4b10 	vmov	d0, r4, r5
 8010bb0:	f002 fa82 	bl	80130b8 <fabs>
 8010bb4:	4b0c      	ldr	r3, [pc, #48]	; (8010be8 <acos+0x60>)
 8010bb6:	ec51 0b10 	vmov	r0, r1, d0
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f7ef ffc4 	bl	8000b48 <__aeabi_dcmpgt>
 8010bc0:	b150      	cbz	r0, 8010bd8 <acos+0x50>
 8010bc2:	f7fc ffd5 	bl	800db70 <__errno>
 8010bc6:	ecbd 8b02 	vpop	{d8}
 8010bca:	2321      	movs	r3, #33	; 0x21
 8010bcc:	6003      	str	r3, [r0, #0]
 8010bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bd2:	4806      	ldr	r0, [pc, #24]	; (8010bec <acos+0x64>)
 8010bd4:	f002 bb04 	b.w	80131e0 <nan>
 8010bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8010bdc:	eef0 0a68 	vmov.f32	s1, s17
 8010be0:	ecbd 8b02 	vpop	{d8}
 8010be4:	bd38      	pop	{r3, r4, r5, pc}
 8010be6:	bf00      	nop
 8010be8:	3ff00000 	.word	0x3ff00000
 8010bec:	08013c48 	.word	0x08013c48

08010bf0 <atan2>:
 8010bf0:	f000 bafe 	b.w	80111f0 <__ieee754_atan2>

08010bf4 <pow>:
 8010bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bf6:	ed2d 8b02 	vpush	{d8}
 8010bfa:	eeb0 8a40 	vmov.f32	s16, s0
 8010bfe:	eef0 8a60 	vmov.f32	s17, s1
 8010c02:	ec55 4b11 	vmov	r4, r5, d1
 8010c06:	f000 fbbf 	bl	8011388 <__ieee754_pow>
 8010c0a:	4622      	mov	r2, r4
 8010c0c:	462b      	mov	r3, r5
 8010c0e:	4620      	mov	r0, r4
 8010c10:	4629      	mov	r1, r5
 8010c12:	ec57 6b10 	vmov	r6, r7, d0
 8010c16:	f7ef ffa1 	bl	8000b5c <__aeabi_dcmpun>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d13b      	bne.n	8010c96 <pow+0xa2>
 8010c1e:	ec51 0b18 	vmov	r0, r1, d8
 8010c22:	2200      	movs	r2, #0
 8010c24:	2300      	movs	r3, #0
 8010c26:	f7ef ff67 	bl	8000af8 <__aeabi_dcmpeq>
 8010c2a:	b1b8      	cbz	r0, 8010c5c <pow+0x68>
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	2300      	movs	r3, #0
 8010c30:	4620      	mov	r0, r4
 8010c32:	4629      	mov	r1, r5
 8010c34:	f7ef ff60 	bl	8000af8 <__aeabi_dcmpeq>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	d146      	bne.n	8010cca <pow+0xd6>
 8010c3c:	ec45 4b10 	vmov	d0, r4, r5
 8010c40:	f002 fa43 	bl	80130ca <finite>
 8010c44:	b338      	cbz	r0, 8010c96 <pow+0xa2>
 8010c46:	2200      	movs	r2, #0
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	f7ef ff5d 	bl	8000b0c <__aeabi_dcmplt>
 8010c52:	b300      	cbz	r0, 8010c96 <pow+0xa2>
 8010c54:	f7fc ff8c 	bl	800db70 <__errno>
 8010c58:	2322      	movs	r3, #34	; 0x22
 8010c5a:	e01b      	b.n	8010c94 <pow+0xa0>
 8010c5c:	ec47 6b10 	vmov	d0, r6, r7
 8010c60:	f002 fa33 	bl	80130ca <finite>
 8010c64:	b9e0      	cbnz	r0, 8010ca0 <pow+0xac>
 8010c66:	eeb0 0a48 	vmov.f32	s0, s16
 8010c6a:	eef0 0a68 	vmov.f32	s1, s17
 8010c6e:	f002 fa2c 	bl	80130ca <finite>
 8010c72:	b1a8      	cbz	r0, 8010ca0 <pow+0xac>
 8010c74:	ec45 4b10 	vmov	d0, r4, r5
 8010c78:	f002 fa27 	bl	80130ca <finite>
 8010c7c:	b180      	cbz	r0, 8010ca0 <pow+0xac>
 8010c7e:	4632      	mov	r2, r6
 8010c80:	463b      	mov	r3, r7
 8010c82:	4630      	mov	r0, r6
 8010c84:	4639      	mov	r1, r7
 8010c86:	f7ef ff69 	bl	8000b5c <__aeabi_dcmpun>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	d0e2      	beq.n	8010c54 <pow+0x60>
 8010c8e:	f7fc ff6f 	bl	800db70 <__errno>
 8010c92:	2321      	movs	r3, #33	; 0x21
 8010c94:	6003      	str	r3, [r0, #0]
 8010c96:	ecbd 8b02 	vpop	{d8}
 8010c9a:	ec47 6b10 	vmov	d0, r6, r7
 8010c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	f7ef ff26 	bl	8000af8 <__aeabi_dcmpeq>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d0f2      	beq.n	8010c96 <pow+0xa2>
 8010cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8010cb4:	eef0 0a68 	vmov.f32	s1, s17
 8010cb8:	f002 fa07 	bl	80130ca <finite>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d0ea      	beq.n	8010c96 <pow+0xa2>
 8010cc0:	ec45 4b10 	vmov	d0, r4, r5
 8010cc4:	f002 fa01 	bl	80130ca <finite>
 8010cc8:	e7c3      	b.n	8010c52 <pow+0x5e>
 8010cca:	4f01      	ldr	r7, [pc, #4]	; (8010cd0 <pow+0xdc>)
 8010ccc:	2600      	movs	r6, #0
 8010cce:	e7e2      	b.n	8010c96 <pow+0xa2>
 8010cd0:	3ff00000 	.word	0x3ff00000

08010cd4 <sqrt>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	ed2d 8b02 	vpush	{d8}
 8010cda:	ec55 4b10 	vmov	r4, r5, d0
 8010cde:	f001 fa8f 	bl	8012200 <__ieee754_sqrt>
 8010ce2:	4622      	mov	r2, r4
 8010ce4:	462b      	mov	r3, r5
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	4629      	mov	r1, r5
 8010cea:	eeb0 8a40 	vmov.f32	s16, s0
 8010cee:	eef0 8a60 	vmov.f32	s17, s1
 8010cf2:	f7ef ff33 	bl	8000b5c <__aeabi_dcmpun>
 8010cf6:	b990      	cbnz	r0, 8010d1e <sqrt+0x4a>
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	4629      	mov	r1, r5
 8010d00:	f7ef ff04 	bl	8000b0c <__aeabi_dcmplt>
 8010d04:	b158      	cbz	r0, 8010d1e <sqrt+0x4a>
 8010d06:	f7fc ff33 	bl	800db70 <__errno>
 8010d0a:	2321      	movs	r3, #33	; 0x21
 8010d0c:	6003      	str	r3, [r0, #0]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	2300      	movs	r3, #0
 8010d12:	4610      	mov	r0, r2
 8010d14:	4619      	mov	r1, r3
 8010d16:	f7ef fdb1 	bl	800087c <__aeabi_ddiv>
 8010d1a:	ec41 0b18 	vmov	d8, r0, r1
 8010d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8010d22:	eef0 0a68 	vmov.f32	s1, s17
 8010d26:	ecbd 8b02 	vpop	{d8}
 8010d2a:	bd38      	pop	{r3, r4, r5, pc}
 8010d2c:	0000      	movs	r0, r0
	...

08010d30 <__ieee754_acos>:
 8010d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d34:	ec55 4b10 	vmov	r4, r5, d0
 8010d38:	49b7      	ldr	r1, [pc, #732]	; (8011018 <__ieee754_acos+0x2e8>)
 8010d3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d3e:	428b      	cmp	r3, r1
 8010d40:	dd1b      	ble.n	8010d7a <__ieee754_acos+0x4a>
 8010d42:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010d46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010d4a:	4323      	orrs	r3, r4
 8010d4c:	d106      	bne.n	8010d5c <__ieee754_acos+0x2c>
 8010d4e:	2d00      	cmp	r5, #0
 8010d50:	f300 8211 	bgt.w	8011176 <__ieee754_acos+0x446>
 8010d54:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010fb0 <__ieee754_acos+0x280>
 8010d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5c:	ee10 2a10 	vmov	r2, s0
 8010d60:	462b      	mov	r3, r5
 8010d62:	ee10 0a10 	vmov	r0, s0
 8010d66:	4629      	mov	r1, r5
 8010d68:	f7ef faa6 	bl	80002b8 <__aeabi_dsub>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	f7ef fd84 	bl	800087c <__aeabi_ddiv>
 8010d74:	ec41 0b10 	vmov	d0, r0, r1
 8010d78:	e7ee      	b.n	8010d58 <__ieee754_acos+0x28>
 8010d7a:	49a8      	ldr	r1, [pc, #672]	; (801101c <__ieee754_acos+0x2ec>)
 8010d7c:	428b      	cmp	r3, r1
 8010d7e:	f300 8087 	bgt.w	8010e90 <__ieee754_acos+0x160>
 8010d82:	4aa7      	ldr	r2, [pc, #668]	; (8011020 <__ieee754_acos+0x2f0>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	f340 81f9 	ble.w	801117c <__ieee754_acos+0x44c>
 8010d8a:	ee10 2a10 	vmov	r2, s0
 8010d8e:	ee10 0a10 	vmov	r0, s0
 8010d92:	462b      	mov	r3, r5
 8010d94:	4629      	mov	r1, r5
 8010d96:	f7ef fc47 	bl	8000628 <__aeabi_dmul>
 8010d9a:	a387      	add	r3, pc, #540	; (adr r3, 8010fb8 <__ieee754_acos+0x288>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	4606      	mov	r6, r0
 8010da2:	460f      	mov	r7, r1
 8010da4:	f7ef fc40 	bl	8000628 <__aeabi_dmul>
 8010da8:	a385      	add	r3, pc, #532	; (adr r3, 8010fc0 <__ieee754_acos+0x290>)
 8010daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dae:	f7ef fa85 	bl	80002bc <__adddf3>
 8010db2:	4632      	mov	r2, r6
 8010db4:	463b      	mov	r3, r7
 8010db6:	f7ef fc37 	bl	8000628 <__aeabi_dmul>
 8010dba:	a383      	add	r3, pc, #524	; (adr r3, 8010fc8 <__ieee754_acos+0x298>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	f7ef fa7a 	bl	80002b8 <__aeabi_dsub>
 8010dc4:	4632      	mov	r2, r6
 8010dc6:	463b      	mov	r3, r7
 8010dc8:	f7ef fc2e 	bl	8000628 <__aeabi_dmul>
 8010dcc:	a380      	add	r3, pc, #512	; (adr r3, 8010fd0 <__ieee754_acos+0x2a0>)
 8010dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd2:	f7ef fa73 	bl	80002bc <__adddf3>
 8010dd6:	4632      	mov	r2, r6
 8010dd8:	463b      	mov	r3, r7
 8010dda:	f7ef fc25 	bl	8000628 <__aeabi_dmul>
 8010dde:	a37e      	add	r3, pc, #504	; (adr r3, 8010fd8 <__ieee754_acos+0x2a8>)
 8010de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de4:	f7ef fa68 	bl	80002b8 <__aeabi_dsub>
 8010de8:	4632      	mov	r2, r6
 8010dea:	463b      	mov	r3, r7
 8010dec:	f7ef fc1c 	bl	8000628 <__aeabi_dmul>
 8010df0:	a37b      	add	r3, pc, #492	; (adr r3, 8010fe0 <__ieee754_acos+0x2b0>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fa61 	bl	80002bc <__adddf3>
 8010dfa:	4632      	mov	r2, r6
 8010dfc:	463b      	mov	r3, r7
 8010dfe:	f7ef fc13 	bl	8000628 <__aeabi_dmul>
 8010e02:	a379      	add	r3, pc, #484	; (adr r3, 8010fe8 <__ieee754_acos+0x2b8>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	4680      	mov	r8, r0
 8010e0a:	4689      	mov	r9, r1
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	4639      	mov	r1, r7
 8010e10:	f7ef fc0a 	bl	8000628 <__aeabi_dmul>
 8010e14:	a376      	add	r3, pc, #472	; (adr r3, 8010ff0 <__ieee754_acos+0x2c0>)
 8010e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1a:	f7ef fa4d 	bl	80002b8 <__aeabi_dsub>
 8010e1e:	4632      	mov	r2, r6
 8010e20:	463b      	mov	r3, r7
 8010e22:	f7ef fc01 	bl	8000628 <__aeabi_dmul>
 8010e26:	a374      	add	r3, pc, #464	; (adr r3, 8010ff8 <__ieee754_acos+0x2c8>)
 8010e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2c:	f7ef fa46 	bl	80002bc <__adddf3>
 8010e30:	4632      	mov	r2, r6
 8010e32:	463b      	mov	r3, r7
 8010e34:	f7ef fbf8 	bl	8000628 <__aeabi_dmul>
 8010e38:	a371      	add	r3, pc, #452	; (adr r3, 8011000 <__ieee754_acos+0x2d0>)
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	f7ef fa3b 	bl	80002b8 <__aeabi_dsub>
 8010e42:	4632      	mov	r2, r6
 8010e44:	463b      	mov	r3, r7
 8010e46:	f7ef fbef 	bl	8000628 <__aeabi_dmul>
 8010e4a:	4b76      	ldr	r3, [pc, #472]	; (8011024 <__ieee754_acos+0x2f4>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f7ef fa35 	bl	80002bc <__adddf3>
 8010e52:	4602      	mov	r2, r0
 8010e54:	460b      	mov	r3, r1
 8010e56:	4640      	mov	r0, r8
 8010e58:	4649      	mov	r1, r9
 8010e5a:	f7ef fd0f 	bl	800087c <__aeabi_ddiv>
 8010e5e:	4622      	mov	r2, r4
 8010e60:	462b      	mov	r3, r5
 8010e62:	f7ef fbe1 	bl	8000628 <__aeabi_dmul>
 8010e66:	4602      	mov	r2, r0
 8010e68:	460b      	mov	r3, r1
 8010e6a:	a167      	add	r1, pc, #412	; (adr r1, 8011008 <__ieee754_acos+0x2d8>)
 8010e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e70:	f7ef fa22 	bl	80002b8 <__aeabi_dsub>
 8010e74:	4602      	mov	r2, r0
 8010e76:	460b      	mov	r3, r1
 8010e78:	4620      	mov	r0, r4
 8010e7a:	4629      	mov	r1, r5
 8010e7c:	f7ef fa1c 	bl	80002b8 <__aeabi_dsub>
 8010e80:	4602      	mov	r2, r0
 8010e82:	460b      	mov	r3, r1
 8010e84:	a162      	add	r1, pc, #392	; (adr r1, 8011010 <__ieee754_acos+0x2e0>)
 8010e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e8a:	f7ef fa15 	bl	80002b8 <__aeabi_dsub>
 8010e8e:	e771      	b.n	8010d74 <__ieee754_acos+0x44>
 8010e90:	2d00      	cmp	r5, #0
 8010e92:	f280 80cb 	bge.w	801102c <__ieee754_acos+0x2fc>
 8010e96:	ee10 0a10 	vmov	r0, s0
 8010e9a:	4b62      	ldr	r3, [pc, #392]	; (8011024 <__ieee754_acos+0x2f4>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	f7ef fa0c 	bl	80002bc <__adddf3>
 8010ea4:	4b60      	ldr	r3, [pc, #384]	; (8011028 <__ieee754_acos+0x2f8>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f7ef fbbe 	bl	8000628 <__aeabi_dmul>
 8010eac:	a342      	add	r3, pc, #264	; (adr r3, 8010fb8 <__ieee754_acos+0x288>)
 8010eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	460d      	mov	r5, r1
 8010eb6:	f7ef fbb7 	bl	8000628 <__aeabi_dmul>
 8010eba:	a341      	add	r3, pc, #260	; (adr r3, 8010fc0 <__ieee754_acos+0x290>)
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f7ef f9fc 	bl	80002bc <__adddf3>
 8010ec4:	4622      	mov	r2, r4
 8010ec6:	462b      	mov	r3, r5
 8010ec8:	f7ef fbae 	bl	8000628 <__aeabi_dmul>
 8010ecc:	a33e      	add	r3, pc, #248	; (adr r3, 8010fc8 <__ieee754_acos+0x298>)
 8010ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed2:	f7ef f9f1 	bl	80002b8 <__aeabi_dsub>
 8010ed6:	4622      	mov	r2, r4
 8010ed8:	462b      	mov	r3, r5
 8010eda:	f7ef fba5 	bl	8000628 <__aeabi_dmul>
 8010ede:	a33c      	add	r3, pc, #240	; (adr r3, 8010fd0 <__ieee754_acos+0x2a0>)
 8010ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee4:	f7ef f9ea 	bl	80002bc <__adddf3>
 8010ee8:	4622      	mov	r2, r4
 8010eea:	462b      	mov	r3, r5
 8010eec:	f7ef fb9c 	bl	8000628 <__aeabi_dmul>
 8010ef0:	a339      	add	r3, pc, #228	; (adr r3, 8010fd8 <__ieee754_acos+0x2a8>)
 8010ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef6:	f7ef f9df 	bl	80002b8 <__aeabi_dsub>
 8010efa:	4622      	mov	r2, r4
 8010efc:	462b      	mov	r3, r5
 8010efe:	f7ef fb93 	bl	8000628 <__aeabi_dmul>
 8010f02:	a337      	add	r3, pc, #220	; (adr r3, 8010fe0 <__ieee754_acos+0x2b0>)
 8010f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f08:	f7ef f9d8 	bl	80002bc <__adddf3>
 8010f0c:	4622      	mov	r2, r4
 8010f0e:	462b      	mov	r3, r5
 8010f10:	f7ef fb8a 	bl	8000628 <__aeabi_dmul>
 8010f14:	ec45 4b10 	vmov	d0, r4, r5
 8010f18:	4680      	mov	r8, r0
 8010f1a:	4689      	mov	r9, r1
 8010f1c:	f001 f970 	bl	8012200 <__ieee754_sqrt>
 8010f20:	a331      	add	r3, pc, #196	; (adr r3, 8010fe8 <__ieee754_acos+0x2b8>)
 8010f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f26:	4620      	mov	r0, r4
 8010f28:	4629      	mov	r1, r5
 8010f2a:	ec57 6b10 	vmov	r6, r7, d0
 8010f2e:	f7ef fb7b 	bl	8000628 <__aeabi_dmul>
 8010f32:	a32f      	add	r3, pc, #188	; (adr r3, 8010ff0 <__ieee754_acos+0x2c0>)
 8010f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f38:	f7ef f9be 	bl	80002b8 <__aeabi_dsub>
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	462b      	mov	r3, r5
 8010f40:	f7ef fb72 	bl	8000628 <__aeabi_dmul>
 8010f44:	a32c      	add	r3, pc, #176	; (adr r3, 8010ff8 <__ieee754_acos+0x2c8>)
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	f7ef f9b7 	bl	80002bc <__adddf3>
 8010f4e:	4622      	mov	r2, r4
 8010f50:	462b      	mov	r3, r5
 8010f52:	f7ef fb69 	bl	8000628 <__aeabi_dmul>
 8010f56:	a32a      	add	r3, pc, #168	; (adr r3, 8011000 <__ieee754_acos+0x2d0>)
 8010f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5c:	f7ef f9ac 	bl	80002b8 <__aeabi_dsub>
 8010f60:	4622      	mov	r2, r4
 8010f62:	462b      	mov	r3, r5
 8010f64:	f7ef fb60 	bl	8000628 <__aeabi_dmul>
 8010f68:	4b2e      	ldr	r3, [pc, #184]	; (8011024 <__ieee754_acos+0x2f4>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f7ef f9a6 	bl	80002bc <__adddf3>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	4640      	mov	r0, r8
 8010f76:	4649      	mov	r1, r9
 8010f78:	f7ef fc80 	bl	800087c <__aeabi_ddiv>
 8010f7c:	4632      	mov	r2, r6
 8010f7e:	463b      	mov	r3, r7
 8010f80:	f7ef fb52 	bl	8000628 <__aeabi_dmul>
 8010f84:	a320      	add	r3, pc, #128	; (adr r3, 8011008 <__ieee754_acos+0x2d8>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	f7ef f995 	bl	80002b8 <__aeabi_dsub>
 8010f8e:	4632      	mov	r2, r6
 8010f90:	463b      	mov	r3, r7
 8010f92:	f7ef f993 	bl	80002bc <__adddf3>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	f7ef f98f 	bl	80002bc <__adddf3>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	a103      	add	r1, pc, #12	; (adr r1, 8010fb0 <__ieee754_acos+0x280>)
 8010fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fa8:	e76f      	b.n	8010e8a <__ieee754_acos+0x15a>
 8010faa:	bf00      	nop
 8010fac:	f3af 8000 	nop.w
 8010fb0:	54442d18 	.word	0x54442d18
 8010fb4:	400921fb 	.word	0x400921fb
 8010fb8:	0dfdf709 	.word	0x0dfdf709
 8010fbc:	3f023de1 	.word	0x3f023de1
 8010fc0:	7501b288 	.word	0x7501b288
 8010fc4:	3f49efe0 	.word	0x3f49efe0
 8010fc8:	b5688f3b 	.word	0xb5688f3b
 8010fcc:	3fa48228 	.word	0x3fa48228
 8010fd0:	0e884455 	.word	0x0e884455
 8010fd4:	3fc9c155 	.word	0x3fc9c155
 8010fd8:	03eb6f7d 	.word	0x03eb6f7d
 8010fdc:	3fd4d612 	.word	0x3fd4d612
 8010fe0:	55555555 	.word	0x55555555
 8010fe4:	3fc55555 	.word	0x3fc55555
 8010fe8:	b12e9282 	.word	0xb12e9282
 8010fec:	3fb3b8c5 	.word	0x3fb3b8c5
 8010ff0:	1b8d0159 	.word	0x1b8d0159
 8010ff4:	3fe6066c 	.word	0x3fe6066c
 8010ff8:	9c598ac8 	.word	0x9c598ac8
 8010ffc:	40002ae5 	.word	0x40002ae5
 8011000:	1c8a2d4b 	.word	0x1c8a2d4b
 8011004:	40033a27 	.word	0x40033a27
 8011008:	33145c07 	.word	0x33145c07
 801100c:	3c91a626 	.word	0x3c91a626
 8011010:	54442d18 	.word	0x54442d18
 8011014:	3ff921fb 	.word	0x3ff921fb
 8011018:	3fefffff 	.word	0x3fefffff
 801101c:	3fdfffff 	.word	0x3fdfffff
 8011020:	3c600000 	.word	0x3c600000
 8011024:	3ff00000 	.word	0x3ff00000
 8011028:	3fe00000 	.word	0x3fe00000
 801102c:	ee10 2a10 	vmov	r2, s0
 8011030:	462b      	mov	r3, r5
 8011032:	496d      	ldr	r1, [pc, #436]	; (80111e8 <__ieee754_acos+0x4b8>)
 8011034:	2000      	movs	r0, #0
 8011036:	f7ef f93f 	bl	80002b8 <__aeabi_dsub>
 801103a:	4b6c      	ldr	r3, [pc, #432]	; (80111ec <__ieee754_acos+0x4bc>)
 801103c:	2200      	movs	r2, #0
 801103e:	f7ef faf3 	bl	8000628 <__aeabi_dmul>
 8011042:	4604      	mov	r4, r0
 8011044:	460d      	mov	r5, r1
 8011046:	ec45 4b10 	vmov	d0, r4, r5
 801104a:	f001 f8d9 	bl	8012200 <__ieee754_sqrt>
 801104e:	a34e      	add	r3, pc, #312	; (adr r3, 8011188 <__ieee754_acos+0x458>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	4620      	mov	r0, r4
 8011056:	4629      	mov	r1, r5
 8011058:	ec59 8b10 	vmov	r8, r9, d0
 801105c:	f7ef fae4 	bl	8000628 <__aeabi_dmul>
 8011060:	a34b      	add	r3, pc, #300	; (adr r3, 8011190 <__ieee754_acos+0x460>)
 8011062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011066:	f7ef f929 	bl	80002bc <__adddf3>
 801106a:	4622      	mov	r2, r4
 801106c:	462b      	mov	r3, r5
 801106e:	f7ef fadb 	bl	8000628 <__aeabi_dmul>
 8011072:	a349      	add	r3, pc, #292	; (adr r3, 8011198 <__ieee754_acos+0x468>)
 8011074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011078:	f7ef f91e 	bl	80002b8 <__aeabi_dsub>
 801107c:	4622      	mov	r2, r4
 801107e:	462b      	mov	r3, r5
 8011080:	f7ef fad2 	bl	8000628 <__aeabi_dmul>
 8011084:	a346      	add	r3, pc, #280	; (adr r3, 80111a0 <__ieee754_acos+0x470>)
 8011086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108a:	f7ef f917 	bl	80002bc <__adddf3>
 801108e:	4622      	mov	r2, r4
 8011090:	462b      	mov	r3, r5
 8011092:	f7ef fac9 	bl	8000628 <__aeabi_dmul>
 8011096:	a344      	add	r3, pc, #272	; (adr r3, 80111a8 <__ieee754_acos+0x478>)
 8011098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109c:	f7ef f90c 	bl	80002b8 <__aeabi_dsub>
 80110a0:	4622      	mov	r2, r4
 80110a2:	462b      	mov	r3, r5
 80110a4:	f7ef fac0 	bl	8000628 <__aeabi_dmul>
 80110a8:	a341      	add	r3, pc, #260	; (adr r3, 80111b0 <__ieee754_acos+0x480>)
 80110aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ae:	f7ef f905 	bl	80002bc <__adddf3>
 80110b2:	4622      	mov	r2, r4
 80110b4:	462b      	mov	r3, r5
 80110b6:	f7ef fab7 	bl	8000628 <__aeabi_dmul>
 80110ba:	a33f      	add	r3, pc, #252	; (adr r3, 80111b8 <__ieee754_acos+0x488>)
 80110bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c0:	4682      	mov	sl, r0
 80110c2:	468b      	mov	fp, r1
 80110c4:	4620      	mov	r0, r4
 80110c6:	4629      	mov	r1, r5
 80110c8:	f7ef faae 	bl	8000628 <__aeabi_dmul>
 80110cc:	a33c      	add	r3, pc, #240	; (adr r3, 80111c0 <__ieee754_acos+0x490>)
 80110ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d2:	f7ef f8f1 	bl	80002b8 <__aeabi_dsub>
 80110d6:	4622      	mov	r2, r4
 80110d8:	462b      	mov	r3, r5
 80110da:	f7ef faa5 	bl	8000628 <__aeabi_dmul>
 80110de:	a33a      	add	r3, pc, #232	; (adr r3, 80111c8 <__ieee754_acos+0x498>)
 80110e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e4:	f7ef f8ea 	bl	80002bc <__adddf3>
 80110e8:	4622      	mov	r2, r4
 80110ea:	462b      	mov	r3, r5
 80110ec:	f7ef fa9c 	bl	8000628 <__aeabi_dmul>
 80110f0:	a337      	add	r3, pc, #220	; (adr r3, 80111d0 <__ieee754_acos+0x4a0>)
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	f7ef f8df 	bl	80002b8 <__aeabi_dsub>
 80110fa:	4622      	mov	r2, r4
 80110fc:	462b      	mov	r3, r5
 80110fe:	f7ef fa93 	bl	8000628 <__aeabi_dmul>
 8011102:	4b39      	ldr	r3, [pc, #228]	; (80111e8 <__ieee754_acos+0x4b8>)
 8011104:	2200      	movs	r2, #0
 8011106:	f7ef f8d9 	bl	80002bc <__adddf3>
 801110a:	4602      	mov	r2, r0
 801110c:	460b      	mov	r3, r1
 801110e:	4650      	mov	r0, sl
 8011110:	4659      	mov	r1, fp
 8011112:	f7ef fbb3 	bl	800087c <__aeabi_ddiv>
 8011116:	4642      	mov	r2, r8
 8011118:	464b      	mov	r3, r9
 801111a:	f7ef fa85 	bl	8000628 <__aeabi_dmul>
 801111e:	2600      	movs	r6, #0
 8011120:	4682      	mov	sl, r0
 8011122:	468b      	mov	fp, r1
 8011124:	4632      	mov	r2, r6
 8011126:	464b      	mov	r3, r9
 8011128:	4630      	mov	r0, r6
 801112a:	4649      	mov	r1, r9
 801112c:	f7ef fa7c 	bl	8000628 <__aeabi_dmul>
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4620      	mov	r0, r4
 8011136:	4629      	mov	r1, r5
 8011138:	f7ef f8be 	bl	80002b8 <__aeabi_dsub>
 801113c:	4632      	mov	r2, r6
 801113e:	4604      	mov	r4, r0
 8011140:	460d      	mov	r5, r1
 8011142:	464b      	mov	r3, r9
 8011144:	4640      	mov	r0, r8
 8011146:	4649      	mov	r1, r9
 8011148:	f7ef f8b8 	bl	80002bc <__adddf3>
 801114c:	4602      	mov	r2, r0
 801114e:	460b      	mov	r3, r1
 8011150:	4620      	mov	r0, r4
 8011152:	4629      	mov	r1, r5
 8011154:	f7ef fb92 	bl	800087c <__aeabi_ddiv>
 8011158:	4602      	mov	r2, r0
 801115a:	460b      	mov	r3, r1
 801115c:	4650      	mov	r0, sl
 801115e:	4659      	mov	r1, fp
 8011160:	f7ef f8ac 	bl	80002bc <__adddf3>
 8011164:	4632      	mov	r2, r6
 8011166:	464b      	mov	r3, r9
 8011168:	f7ef f8a8 	bl	80002bc <__adddf3>
 801116c:	4602      	mov	r2, r0
 801116e:	460b      	mov	r3, r1
 8011170:	f7ef f8a4 	bl	80002bc <__adddf3>
 8011174:	e5fe      	b.n	8010d74 <__ieee754_acos+0x44>
 8011176:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80111d8 <__ieee754_acos+0x4a8>
 801117a:	e5ed      	b.n	8010d58 <__ieee754_acos+0x28>
 801117c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80111e0 <__ieee754_acos+0x4b0>
 8011180:	e5ea      	b.n	8010d58 <__ieee754_acos+0x28>
 8011182:	bf00      	nop
 8011184:	f3af 8000 	nop.w
 8011188:	0dfdf709 	.word	0x0dfdf709
 801118c:	3f023de1 	.word	0x3f023de1
 8011190:	7501b288 	.word	0x7501b288
 8011194:	3f49efe0 	.word	0x3f49efe0
 8011198:	b5688f3b 	.word	0xb5688f3b
 801119c:	3fa48228 	.word	0x3fa48228
 80111a0:	0e884455 	.word	0x0e884455
 80111a4:	3fc9c155 	.word	0x3fc9c155
 80111a8:	03eb6f7d 	.word	0x03eb6f7d
 80111ac:	3fd4d612 	.word	0x3fd4d612
 80111b0:	55555555 	.word	0x55555555
 80111b4:	3fc55555 	.word	0x3fc55555
 80111b8:	b12e9282 	.word	0xb12e9282
 80111bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80111c0:	1b8d0159 	.word	0x1b8d0159
 80111c4:	3fe6066c 	.word	0x3fe6066c
 80111c8:	9c598ac8 	.word	0x9c598ac8
 80111cc:	40002ae5 	.word	0x40002ae5
 80111d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80111d4:	40033a27 	.word	0x40033a27
	...
 80111e0:	54442d18 	.word	0x54442d18
 80111e4:	3ff921fb 	.word	0x3ff921fb
 80111e8:	3ff00000 	.word	0x3ff00000
 80111ec:	3fe00000 	.word	0x3fe00000

080111f0 <__ieee754_atan2>:
 80111f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111f4:	ec57 6b11 	vmov	r6, r7, d1
 80111f8:	4273      	negs	r3, r6
 80111fa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011380 <__ieee754_atan2+0x190>
 80111fe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011202:	4333      	orrs	r3, r6
 8011204:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011208:	4573      	cmp	r3, lr
 801120a:	ec51 0b10 	vmov	r0, r1, d0
 801120e:	ee11 8a10 	vmov	r8, s2
 8011212:	d80a      	bhi.n	801122a <__ieee754_atan2+0x3a>
 8011214:	4244      	negs	r4, r0
 8011216:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801121a:	4304      	orrs	r4, r0
 801121c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011220:	4574      	cmp	r4, lr
 8011222:	ee10 9a10 	vmov	r9, s0
 8011226:	468c      	mov	ip, r1
 8011228:	d907      	bls.n	801123a <__ieee754_atan2+0x4a>
 801122a:	4632      	mov	r2, r6
 801122c:	463b      	mov	r3, r7
 801122e:	f7ef f845 	bl	80002bc <__adddf3>
 8011232:	ec41 0b10 	vmov	d0, r0, r1
 8011236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801123e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011242:	4334      	orrs	r4, r6
 8011244:	d103      	bne.n	801124e <__ieee754_atan2+0x5e>
 8011246:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801124a:	f001 bd95 	b.w	8012d78 <atan>
 801124e:	17bc      	asrs	r4, r7, #30
 8011250:	f004 0402 	and.w	r4, r4, #2
 8011254:	ea53 0909 	orrs.w	r9, r3, r9
 8011258:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801125c:	d107      	bne.n	801126e <__ieee754_atan2+0x7e>
 801125e:	2c02      	cmp	r4, #2
 8011260:	d060      	beq.n	8011324 <__ieee754_atan2+0x134>
 8011262:	2c03      	cmp	r4, #3
 8011264:	d1e5      	bne.n	8011232 <__ieee754_atan2+0x42>
 8011266:	a142      	add	r1, pc, #264	; (adr r1, 8011370 <__ieee754_atan2+0x180>)
 8011268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801126c:	e7e1      	b.n	8011232 <__ieee754_atan2+0x42>
 801126e:	ea52 0808 	orrs.w	r8, r2, r8
 8011272:	d106      	bne.n	8011282 <__ieee754_atan2+0x92>
 8011274:	f1bc 0f00 	cmp.w	ip, #0
 8011278:	da5f      	bge.n	801133a <__ieee754_atan2+0x14a>
 801127a:	a13f      	add	r1, pc, #252	; (adr r1, 8011378 <__ieee754_atan2+0x188>)
 801127c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011280:	e7d7      	b.n	8011232 <__ieee754_atan2+0x42>
 8011282:	4572      	cmp	r2, lr
 8011284:	d10f      	bne.n	80112a6 <__ieee754_atan2+0xb6>
 8011286:	4293      	cmp	r3, r2
 8011288:	f104 34ff 	add.w	r4, r4, #4294967295
 801128c:	d107      	bne.n	801129e <__ieee754_atan2+0xae>
 801128e:	2c02      	cmp	r4, #2
 8011290:	d84c      	bhi.n	801132c <__ieee754_atan2+0x13c>
 8011292:	4b35      	ldr	r3, [pc, #212]	; (8011368 <__ieee754_atan2+0x178>)
 8011294:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011298:	e9d4 0100 	ldrd	r0, r1, [r4]
 801129c:	e7c9      	b.n	8011232 <__ieee754_atan2+0x42>
 801129e:	2c02      	cmp	r4, #2
 80112a0:	d848      	bhi.n	8011334 <__ieee754_atan2+0x144>
 80112a2:	4b32      	ldr	r3, [pc, #200]	; (801136c <__ieee754_atan2+0x17c>)
 80112a4:	e7f6      	b.n	8011294 <__ieee754_atan2+0xa4>
 80112a6:	4573      	cmp	r3, lr
 80112a8:	d0e4      	beq.n	8011274 <__ieee754_atan2+0x84>
 80112aa:	1a9b      	subs	r3, r3, r2
 80112ac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80112b0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80112b4:	da1e      	bge.n	80112f4 <__ieee754_atan2+0x104>
 80112b6:	2f00      	cmp	r7, #0
 80112b8:	da01      	bge.n	80112be <__ieee754_atan2+0xce>
 80112ba:	323c      	adds	r2, #60	; 0x3c
 80112bc:	db1e      	blt.n	80112fc <__ieee754_atan2+0x10c>
 80112be:	4632      	mov	r2, r6
 80112c0:	463b      	mov	r3, r7
 80112c2:	f7ef fadb 	bl	800087c <__aeabi_ddiv>
 80112c6:	ec41 0b10 	vmov	d0, r0, r1
 80112ca:	f001 fef5 	bl	80130b8 <fabs>
 80112ce:	f001 fd53 	bl	8012d78 <atan>
 80112d2:	ec51 0b10 	vmov	r0, r1, d0
 80112d6:	2c01      	cmp	r4, #1
 80112d8:	d013      	beq.n	8011302 <__ieee754_atan2+0x112>
 80112da:	2c02      	cmp	r4, #2
 80112dc:	d015      	beq.n	801130a <__ieee754_atan2+0x11a>
 80112de:	2c00      	cmp	r4, #0
 80112e0:	d0a7      	beq.n	8011232 <__ieee754_atan2+0x42>
 80112e2:	a319      	add	r3, pc, #100	; (adr r3, 8011348 <__ieee754_atan2+0x158>)
 80112e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e8:	f7ee ffe6 	bl	80002b8 <__aeabi_dsub>
 80112ec:	a318      	add	r3, pc, #96	; (adr r3, 8011350 <__ieee754_atan2+0x160>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	e014      	b.n	801131e <__ieee754_atan2+0x12e>
 80112f4:	a118      	add	r1, pc, #96	; (adr r1, 8011358 <__ieee754_atan2+0x168>)
 80112f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112fa:	e7ec      	b.n	80112d6 <__ieee754_atan2+0xe6>
 80112fc:	2000      	movs	r0, #0
 80112fe:	2100      	movs	r1, #0
 8011300:	e7e9      	b.n	80112d6 <__ieee754_atan2+0xe6>
 8011302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011306:	4619      	mov	r1, r3
 8011308:	e793      	b.n	8011232 <__ieee754_atan2+0x42>
 801130a:	a30f      	add	r3, pc, #60	; (adr r3, 8011348 <__ieee754_atan2+0x158>)
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	f7ee ffd2 	bl	80002b8 <__aeabi_dsub>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	a10d      	add	r1, pc, #52	; (adr r1, 8011350 <__ieee754_atan2+0x160>)
 801131a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801131e:	f7ee ffcb 	bl	80002b8 <__aeabi_dsub>
 8011322:	e786      	b.n	8011232 <__ieee754_atan2+0x42>
 8011324:	a10a      	add	r1, pc, #40	; (adr r1, 8011350 <__ieee754_atan2+0x160>)
 8011326:	e9d1 0100 	ldrd	r0, r1, [r1]
 801132a:	e782      	b.n	8011232 <__ieee754_atan2+0x42>
 801132c:	a10c      	add	r1, pc, #48	; (adr r1, 8011360 <__ieee754_atan2+0x170>)
 801132e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011332:	e77e      	b.n	8011232 <__ieee754_atan2+0x42>
 8011334:	2000      	movs	r0, #0
 8011336:	2100      	movs	r1, #0
 8011338:	e77b      	b.n	8011232 <__ieee754_atan2+0x42>
 801133a:	a107      	add	r1, pc, #28	; (adr r1, 8011358 <__ieee754_atan2+0x168>)
 801133c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011340:	e777      	b.n	8011232 <__ieee754_atan2+0x42>
 8011342:	bf00      	nop
 8011344:	f3af 8000 	nop.w
 8011348:	33145c07 	.word	0x33145c07
 801134c:	3ca1a626 	.word	0x3ca1a626
 8011350:	54442d18 	.word	0x54442d18
 8011354:	400921fb 	.word	0x400921fb
 8011358:	54442d18 	.word	0x54442d18
 801135c:	3ff921fb 	.word	0x3ff921fb
 8011360:	54442d18 	.word	0x54442d18
 8011364:	3fe921fb 	.word	0x3fe921fb
 8011368:	08013db8 	.word	0x08013db8
 801136c:	08013dd0 	.word	0x08013dd0
 8011370:	54442d18 	.word	0x54442d18
 8011374:	c00921fb 	.word	0xc00921fb
 8011378:	54442d18 	.word	0x54442d18
 801137c:	bff921fb 	.word	0xbff921fb
 8011380:	7ff00000 	.word	0x7ff00000
 8011384:	00000000 	.word	0x00000000

08011388 <__ieee754_pow>:
 8011388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138c:	ed2d 8b06 	vpush	{d8-d10}
 8011390:	b089      	sub	sp, #36	; 0x24
 8011392:	ed8d 1b00 	vstr	d1, [sp]
 8011396:	e9dd 2900 	ldrd	r2, r9, [sp]
 801139a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801139e:	ea58 0102 	orrs.w	r1, r8, r2
 80113a2:	ec57 6b10 	vmov	r6, r7, d0
 80113a6:	d115      	bne.n	80113d4 <__ieee754_pow+0x4c>
 80113a8:	19b3      	adds	r3, r6, r6
 80113aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80113ae:	4152      	adcs	r2, r2
 80113b0:	4299      	cmp	r1, r3
 80113b2:	4b89      	ldr	r3, [pc, #548]	; (80115d8 <__ieee754_pow+0x250>)
 80113b4:	4193      	sbcs	r3, r2
 80113b6:	f080 84d2 	bcs.w	8011d5e <__ieee754_pow+0x9d6>
 80113ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113be:	4630      	mov	r0, r6
 80113c0:	4639      	mov	r1, r7
 80113c2:	f7ee ff7b 	bl	80002bc <__adddf3>
 80113c6:	ec41 0b10 	vmov	d0, r0, r1
 80113ca:	b009      	add	sp, #36	; 0x24
 80113cc:	ecbd 8b06 	vpop	{d8-d10}
 80113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d4:	4b81      	ldr	r3, [pc, #516]	; (80115dc <__ieee754_pow+0x254>)
 80113d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80113da:	429c      	cmp	r4, r3
 80113dc:	ee10 aa10 	vmov	sl, s0
 80113e0:	463d      	mov	r5, r7
 80113e2:	dc06      	bgt.n	80113f2 <__ieee754_pow+0x6a>
 80113e4:	d101      	bne.n	80113ea <__ieee754_pow+0x62>
 80113e6:	2e00      	cmp	r6, #0
 80113e8:	d1e7      	bne.n	80113ba <__ieee754_pow+0x32>
 80113ea:	4598      	cmp	r8, r3
 80113ec:	dc01      	bgt.n	80113f2 <__ieee754_pow+0x6a>
 80113ee:	d10f      	bne.n	8011410 <__ieee754_pow+0x88>
 80113f0:	b172      	cbz	r2, 8011410 <__ieee754_pow+0x88>
 80113f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80113f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80113fa:	ea55 050a 	orrs.w	r5, r5, sl
 80113fe:	d1dc      	bne.n	80113ba <__ieee754_pow+0x32>
 8011400:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011404:	18db      	adds	r3, r3, r3
 8011406:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801140a:	4152      	adcs	r2, r2
 801140c:	429d      	cmp	r5, r3
 801140e:	e7d0      	b.n	80113b2 <__ieee754_pow+0x2a>
 8011410:	2d00      	cmp	r5, #0
 8011412:	da3b      	bge.n	801148c <__ieee754_pow+0x104>
 8011414:	4b72      	ldr	r3, [pc, #456]	; (80115e0 <__ieee754_pow+0x258>)
 8011416:	4598      	cmp	r8, r3
 8011418:	dc51      	bgt.n	80114be <__ieee754_pow+0x136>
 801141a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801141e:	4598      	cmp	r8, r3
 8011420:	f340 84ac 	ble.w	8011d7c <__ieee754_pow+0x9f4>
 8011424:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801142c:	2b14      	cmp	r3, #20
 801142e:	dd0f      	ble.n	8011450 <__ieee754_pow+0xc8>
 8011430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011434:	fa22 f103 	lsr.w	r1, r2, r3
 8011438:	fa01 f303 	lsl.w	r3, r1, r3
 801143c:	4293      	cmp	r3, r2
 801143e:	f040 849d 	bne.w	8011d7c <__ieee754_pow+0x9f4>
 8011442:	f001 0101 	and.w	r1, r1, #1
 8011446:	f1c1 0302 	rsb	r3, r1, #2
 801144a:	9304      	str	r3, [sp, #16]
 801144c:	b182      	cbz	r2, 8011470 <__ieee754_pow+0xe8>
 801144e:	e05f      	b.n	8011510 <__ieee754_pow+0x188>
 8011450:	2a00      	cmp	r2, #0
 8011452:	d15b      	bne.n	801150c <__ieee754_pow+0x184>
 8011454:	f1c3 0314 	rsb	r3, r3, #20
 8011458:	fa48 f103 	asr.w	r1, r8, r3
 801145c:	fa01 f303 	lsl.w	r3, r1, r3
 8011460:	4543      	cmp	r3, r8
 8011462:	f040 8488 	bne.w	8011d76 <__ieee754_pow+0x9ee>
 8011466:	f001 0101 	and.w	r1, r1, #1
 801146a:	f1c1 0302 	rsb	r3, r1, #2
 801146e:	9304      	str	r3, [sp, #16]
 8011470:	4b5c      	ldr	r3, [pc, #368]	; (80115e4 <__ieee754_pow+0x25c>)
 8011472:	4598      	cmp	r8, r3
 8011474:	d132      	bne.n	80114dc <__ieee754_pow+0x154>
 8011476:	f1b9 0f00 	cmp.w	r9, #0
 801147a:	f280 8478 	bge.w	8011d6e <__ieee754_pow+0x9e6>
 801147e:	4959      	ldr	r1, [pc, #356]	; (80115e4 <__ieee754_pow+0x25c>)
 8011480:	4632      	mov	r2, r6
 8011482:	463b      	mov	r3, r7
 8011484:	2000      	movs	r0, #0
 8011486:	f7ef f9f9 	bl	800087c <__aeabi_ddiv>
 801148a:	e79c      	b.n	80113c6 <__ieee754_pow+0x3e>
 801148c:	2300      	movs	r3, #0
 801148e:	9304      	str	r3, [sp, #16]
 8011490:	2a00      	cmp	r2, #0
 8011492:	d13d      	bne.n	8011510 <__ieee754_pow+0x188>
 8011494:	4b51      	ldr	r3, [pc, #324]	; (80115dc <__ieee754_pow+0x254>)
 8011496:	4598      	cmp	r8, r3
 8011498:	d1ea      	bne.n	8011470 <__ieee754_pow+0xe8>
 801149a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801149e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80114a2:	ea53 030a 	orrs.w	r3, r3, sl
 80114a6:	f000 845a 	beq.w	8011d5e <__ieee754_pow+0x9d6>
 80114aa:	4b4f      	ldr	r3, [pc, #316]	; (80115e8 <__ieee754_pow+0x260>)
 80114ac:	429c      	cmp	r4, r3
 80114ae:	dd08      	ble.n	80114c2 <__ieee754_pow+0x13a>
 80114b0:	f1b9 0f00 	cmp.w	r9, #0
 80114b4:	f2c0 8457 	blt.w	8011d66 <__ieee754_pow+0x9de>
 80114b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114bc:	e783      	b.n	80113c6 <__ieee754_pow+0x3e>
 80114be:	2302      	movs	r3, #2
 80114c0:	e7e5      	b.n	801148e <__ieee754_pow+0x106>
 80114c2:	f1b9 0f00 	cmp.w	r9, #0
 80114c6:	f04f 0000 	mov.w	r0, #0
 80114ca:	f04f 0100 	mov.w	r1, #0
 80114ce:	f6bf af7a 	bge.w	80113c6 <__ieee754_pow+0x3e>
 80114d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80114d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80114da:	e774      	b.n	80113c6 <__ieee754_pow+0x3e>
 80114dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80114e0:	d106      	bne.n	80114f0 <__ieee754_pow+0x168>
 80114e2:	4632      	mov	r2, r6
 80114e4:	463b      	mov	r3, r7
 80114e6:	4630      	mov	r0, r6
 80114e8:	4639      	mov	r1, r7
 80114ea:	f7ef f89d 	bl	8000628 <__aeabi_dmul>
 80114ee:	e76a      	b.n	80113c6 <__ieee754_pow+0x3e>
 80114f0:	4b3e      	ldr	r3, [pc, #248]	; (80115ec <__ieee754_pow+0x264>)
 80114f2:	4599      	cmp	r9, r3
 80114f4:	d10c      	bne.n	8011510 <__ieee754_pow+0x188>
 80114f6:	2d00      	cmp	r5, #0
 80114f8:	db0a      	blt.n	8011510 <__ieee754_pow+0x188>
 80114fa:	ec47 6b10 	vmov	d0, r6, r7
 80114fe:	b009      	add	sp, #36	; 0x24
 8011500:	ecbd 8b06 	vpop	{d8-d10}
 8011504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	f000 be7a 	b.w	8012200 <__ieee754_sqrt>
 801150c:	2300      	movs	r3, #0
 801150e:	9304      	str	r3, [sp, #16]
 8011510:	ec47 6b10 	vmov	d0, r6, r7
 8011514:	f001 fdd0 	bl	80130b8 <fabs>
 8011518:	ec51 0b10 	vmov	r0, r1, d0
 801151c:	f1ba 0f00 	cmp.w	sl, #0
 8011520:	d129      	bne.n	8011576 <__ieee754_pow+0x1ee>
 8011522:	b124      	cbz	r4, 801152e <__ieee754_pow+0x1a6>
 8011524:	4b2f      	ldr	r3, [pc, #188]	; (80115e4 <__ieee754_pow+0x25c>)
 8011526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801152a:	429a      	cmp	r2, r3
 801152c:	d123      	bne.n	8011576 <__ieee754_pow+0x1ee>
 801152e:	f1b9 0f00 	cmp.w	r9, #0
 8011532:	da05      	bge.n	8011540 <__ieee754_pow+0x1b8>
 8011534:	4602      	mov	r2, r0
 8011536:	460b      	mov	r3, r1
 8011538:	2000      	movs	r0, #0
 801153a:	492a      	ldr	r1, [pc, #168]	; (80115e4 <__ieee754_pow+0x25c>)
 801153c:	f7ef f99e 	bl	800087c <__aeabi_ddiv>
 8011540:	2d00      	cmp	r5, #0
 8011542:	f6bf af40 	bge.w	80113c6 <__ieee754_pow+0x3e>
 8011546:	9b04      	ldr	r3, [sp, #16]
 8011548:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801154c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011550:	4323      	orrs	r3, r4
 8011552:	d108      	bne.n	8011566 <__ieee754_pow+0x1de>
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	4610      	mov	r0, r2
 801155a:	4619      	mov	r1, r3
 801155c:	f7ee feac 	bl	80002b8 <__aeabi_dsub>
 8011560:	4602      	mov	r2, r0
 8011562:	460b      	mov	r3, r1
 8011564:	e78f      	b.n	8011486 <__ieee754_pow+0xfe>
 8011566:	9b04      	ldr	r3, [sp, #16]
 8011568:	2b01      	cmp	r3, #1
 801156a:	f47f af2c 	bne.w	80113c6 <__ieee754_pow+0x3e>
 801156e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011572:	4619      	mov	r1, r3
 8011574:	e727      	b.n	80113c6 <__ieee754_pow+0x3e>
 8011576:	0feb      	lsrs	r3, r5, #31
 8011578:	3b01      	subs	r3, #1
 801157a:	9306      	str	r3, [sp, #24]
 801157c:	9a06      	ldr	r2, [sp, #24]
 801157e:	9b04      	ldr	r3, [sp, #16]
 8011580:	4313      	orrs	r3, r2
 8011582:	d102      	bne.n	801158a <__ieee754_pow+0x202>
 8011584:	4632      	mov	r2, r6
 8011586:	463b      	mov	r3, r7
 8011588:	e7e6      	b.n	8011558 <__ieee754_pow+0x1d0>
 801158a:	4b19      	ldr	r3, [pc, #100]	; (80115f0 <__ieee754_pow+0x268>)
 801158c:	4598      	cmp	r8, r3
 801158e:	f340 80fb 	ble.w	8011788 <__ieee754_pow+0x400>
 8011592:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011596:	4598      	cmp	r8, r3
 8011598:	4b13      	ldr	r3, [pc, #76]	; (80115e8 <__ieee754_pow+0x260>)
 801159a:	dd0c      	ble.n	80115b6 <__ieee754_pow+0x22e>
 801159c:	429c      	cmp	r4, r3
 801159e:	dc0f      	bgt.n	80115c0 <__ieee754_pow+0x238>
 80115a0:	f1b9 0f00 	cmp.w	r9, #0
 80115a4:	da0f      	bge.n	80115c6 <__ieee754_pow+0x23e>
 80115a6:	2000      	movs	r0, #0
 80115a8:	b009      	add	sp, #36	; 0x24
 80115aa:	ecbd 8b06 	vpop	{d8-d10}
 80115ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b2:	f001 bbd6 	b.w	8012d62 <__math_oflow>
 80115b6:	429c      	cmp	r4, r3
 80115b8:	dbf2      	blt.n	80115a0 <__ieee754_pow+0x218>
 80115ba:	4b0a      	ldr	r3, [pc, #40]	; (80115e4 <__ieee754_pow+0x25c>)
 80115bc:	429c      	cmp	r4, r3
 80115be:	dd19      	ble.n	80115f4 <__ieee754_pow+0x26c>
 80115c0:	f1b9 0f00 	cmp.w	r9, #0
 80115c4:	dcef      	bgt.n	80115a6 <__ieee754_pow+0x21e>
 80115c6:	2000      	movs	r0, #0
 80115c8:	b009      	add	sp, #36	; 0x24
 80115ca:	ecbd 8b06 	vpop	{d8-d10}
 80115ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d2:	f001 bbbd 	b.w	8012d50 <__math_uflow>
 80115d6:	bf00      	nop
 80115d8:	fff00000 	.word	0xfff00000
 80115dc:	7ff00000 	.word	0x7ff00000
 80115e0:	433fffff 	.word	0x433fffff
 80115e4:	3ff00000 	.word	0x3ff00000
 80115e8:	3fefffff 	.word	0x3fefffff
 80115ec:	3fe00000 	.word	0x3fe00000
 80115f0:	41e00000 	.word	0x41e00000
 80115f4:	4b60      	ldr	r3, [pc, #384]	; (8011778 <__ieee754_pow+0x3f0>)
 80115f6:	2200      	movs	r2, #0
 80115f8:	f7ee fe5e 	bl	80002b8 <__aeabi_dsub>
 80115fc:	a354      	add	r3, pc, #336	; (adr r3, 8011750 <__ieee754_pow+0x3c8>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	4604      	mov	r4, r0
 8011604:	460d      	mov	r5, r1
 8011606:	f7ef f80f 	bl	8000628 <__aeabi_dmul>
 801160a:	a353      	add	r3, pc, #332	; (adr r3, 8011758 <__ieee754_pow+0x3d0>)
 801160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011610:	4606      	mov	r6, r0
 8011612:	460f      	mov	r7, r1
 8011614:	4620      	mov	r0, r4
 8011616:	4629      	mov	r1, r5
 8011618:	f7ef f806 	bl	8000628 <__aeabi_dmul>
 801161c:	4b57      	ldr	r3, [pc, #348]	; (801177c <__ieee754_pow+0x3f4>)
 801161e:	4682      	mov	sl, r0
 8011620:	468b      	mov	fp, r1
 8011622:	2200      	movs	r2, #0
 8011624:	4620      	mov	r0, r4
 8011626:	4629      	mov	r1, r5
 8011628:	f7ee fffe 	bl	8000628 <__aeabi_dmul>
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	a14b      	add	r1, pc, #300	; (adr r1, 8011760 <__ieee754_pow+0x3d8>)
 8011632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011636:	f7ee fe3f 	bl	80002b8 <__aeabi_dsub>
 801163a:	4622      	mov	r2, r4
 801163c:	462b      	mov	r3, r5
 801163e:	f7ee fff3 	bl	8000628 <__aeabi_dmul>
 8011642:	4602      	mov	r2, r0
 8011644:	460b      	mov	r3, r1
 8011646:	2000      	movs	r0, #0
 8011648:	494d      	ldr	r1, [pc, #308]	; (8011780 <__ieee754_pow+0x3f8>)
 801164a:	f7ee fe35 	bl	80002b8 <__aeabi_dsub>
 801164e:	4622      	mov	r2, r4
 8011650:	4680      	mov	r8, r0
 8011652:	4689      	mov	r9, r1
 8011654:	462b      	mov	r3, r5
 8011656:	4620      	mov	r0, r4
 8011658:	4629      	mov	r1, r5
 801165a:	f7ee ffe5 	bl	8000628 <__aeabi_dmul>
 801165e:	4602      	mov	r2, r0
 8011660:	460b      	mov	r3, r1
 8011662:	4640      	mov	r0, r8
 8011664:	4649      	mov	r1, r9
 8011666:	f7ee ffdf 	bl	8000628 <__aeabi_dmul>
 801166a:	a33f      	add	r3, pc, #252	; (adr r3, 8011768 <__ieee754_pow+0x3e0>)
 801166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011670:	f7ee ffda 	bl	8000628 <__aeabi_dmul>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	4650      	mov	r0, sl
 801167a:	4659      	mov	r1, fp
 801167c:	f7ee fe1c 	bl	80002b8 <__aeabi_dsub>
 8011680:	4602      	mov	r2, r0
 8011682:	460b      	mov	r3, r1
 8011684:	4680      	mov	r8, r0
 8011686:	4689      	mov	r9, r1
 8011688:	4630      	mov	r0, r6
 801168a:	4639      	mov	r1, r7
 801168c:	f7ee fe16 	bl	80002bc <__adddf3>
 8011690:	2000      	movs	r0, #0
 8011692:	4632      	mov	r2, r6
 8011694:	463b      	mov	r3, r7
 8011696:	4604      	mov	r4, r0
 8011698:	460d      	mov	r5, r1
 801169a:	f7ee fe0d 	bl	80002b8 <__aeabi_dsub>
 801169e:	4602      	mov	r2, r0
 80116a0:	460b      	mov	r3, r1
 80116a2:	4640      	mov	r0, r8
 80116a4:	4649      	mov	r1, r9
 80116a6:	f7ee fe07 	bl	80002b8 <__aeabi_dsub>
 80116aa:	9b04      	ldr	r3, [sp, #16]
 80116ac:	9a06      	ldr	r2, [sp, #24]
 80116ae:	3b01      	subs	r3, #1
 80116b0:	4313      	orrs	r3, r2
 80116b2:	4682      	mov	sl, r0
 80116b4:	468b      	mov	fp, r1
 80116b6:	f040 81e7 	bne.w	8011a88 <__ieee754_pow+0x700>
 80116ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011770 <__ieee754_pow+0x3e8>
 80116be:	eeb0 8a47 	vmov.f32	s16, s14
 80116c2:	eef0 8a67 	vmov.f32	s17, s15
 80116c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80116ca:	2600      	movs	r6, #0
 80116cc:	4632      	mov	r2, r6
 80116ce:	463b      	mov	r3, r7
 80116d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116d4:	f7ee fdf0 	bl	80002b8 <__aeabi_dsub>
 80116d8:	4622      	mov	r2, r4
 80116da:	462b      	mov	r3, r5
 80116dc:	f7ee ffa4 	bl	8000628 <__aeabi_dmul>
 80116e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116e4:	4680      	mov	r8, r0
 80116e6:	4689      	mov	r9, r1
 80116e8:	4650      	mov	r0, sl
 80116ea:	4659      	mov	r1, fp
 80116ec:	f7ee ff9c 	bl	8000628 <__aeabi_dmul>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	4640      	mov	r0, r8
 80116f6:	4649      	mov	r1, r9
 80116f8:	f7ee fde0 	bl	80002bc <__adddf3>
 80116fc:	4632      	mov	r2, r6
 80116fe:	463b      	mov	r3, r7
 8011700:	4680      	mov	r8, r0
 8011702:	4689      	mov	r9, r1
 8011704:	4620      	mov	r0, r4
 8011706:	4629      	mov	r1, r5
 8011708:	f7ee ff8e 	bl	8000628 <__aeabi_dmul>
 801170c:	460b      	mov	r3, r1
 801170e:	4604      	mov	r4, r0
 8011710:	460d      	mov	r5, r1
 8011712:	4602      	mov	r2, r0
 8011714:	4649      	mov	r1, r9
 8011716:	4640      	mov	r0, r8
 8011718:	f7ee fdd0 	bl	80002bc <__adddf3>
 801171c:	4b19      	ldr	r3, [pc, #100]	; (8011784 <__ieee754_pow+0x3fc>)
 801171e:	4299      	cmp	r1, r3
 8011720:	ec45 4b19 	vmov	d9, r4, r5
 8011724:	4606      	mov	r6, r0
 8011726:	460f      	mov	r7, r1
 8011728:	468b      	mov	fp, r1
 801172a:	f340 82f1 	ble.w	8011d10 <__ieee754_pow+0x988>
 801172e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011736:	4303      	orrs	r3, r0
 8011738:	f000 81e4 	beq.w	8011b04 <__ieee754_pow+0x77c>
 801173c:	ec51 0b18 	vmov	r0, r1, d8
 8011740:	2200      	movs	r2, #0
 8011742:	2300      	movs	r3, #0
 8011744:	f7ef f9e2 	bl	8000b0c <__aeabi_dcmplt>
 8011748:	3800      	subs	r0, #0
 801174a:	bf18      	it	ne
 801174c:	2001      	movne	r0, #1
 801174e:	e72b      	b.n	80115a8 <__ieee754_pow+0x220>
 8011750:	60000000 	.word	0x60000000
 8011754:	3ff71547 	.word	0x3ff71547
 8011758:	f85ddf44 	.word	0xf85ddf44
 801175c:	3e54ae0b 	.word	0x3e54ae0b
 8011760:	55555555 	.word	0x55555555
 8011764:	3fd55555 	.word	0x3fd55555
 8011768:	652b82fe 	.word	0x652b82fe
 801176c:	3ff71547 	.word	0x3ff71547
 8011770:	00000000 	.word	0x00000000
 8011774:	bff00000 	.word	0xbff00000
 8011778:	3ff00000 	.word	0x3ff00000
 801177c:	3fd00000 	.word	0x3fd00000
 8011780:	3fe00000 	.word	0x3fe00000
 8011784:	408fffff 	.word	0x408fffff
 8011788:	4bd5      	ldr	r3, [pc, #852]	; (8011ae0 <__ieee754_pow+0x758>)
 801178a:	402b      	ands	r3, r5
 801178c:	2200      	movs	r2, #0
 801178e:	b92b      	cbnz	r3, 801179c <__ieee754_pow+0x414>
 8011790:	4bd4      	ldr	r3, [pc, #848]	; (8011ae4 <__ieee754_pow+0x75c>)
 8011792:	f7ee ff49 	bl	8000628 <__aeabi_dmul>
 8011796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801179a:	460c      	mov	r4, r1
 801179c:	1523      	asrs	r3, r4, #20
 801179e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80117a2:	4413      	add	r3, r2
 80117a4:	9305      	str	r3, [sp, #20]
 80117a6:	4bd0      	ldr	r3, [pc, #832]	; (8011ae8 <__ieee754_pow+0x760>)
 80117a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80117ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80117b0:	429c      	cmp	r4, r3
 80117b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80117b6:	dd08      	ble.n	80117ca <__ieee754_pow+0x442>
 80117b8:	4bcc      	ldr	r3, [pc, #816]	; (8011aec <__ieee754_pow+0x764>)
 80117ba:	429c      	cmp	r4, r3
 80117bc:	f340 8162 	ble.w	8011a84 <__ieee754_pow+0x6fc>
 80117c0:	9b05      	ldr	r3, [sp, #20]
 80117c2:	3301      	adds	r3, #1
 80117c4:	9305      	str	r3, [sp, #20]
 80117c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80117ca:	2400      	movs	r4, #0
 80117cc:	00e3      	lsls	r3, r4, #3
 80117ce:	9307      	str	r3, [sp, #28]
 80117d0:	4bc7      	ldr	r3, [pc, #796]	; (8011af0 <__ieee754_pow+0x768>)
 80117d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80117d6:	ed93 7b00 	vldr	d7, [r3]
 80117da:	4629      	mov	r1, r5
 80117dc:	ec53 2b17 	vmov	r2, r3, d7
 80117e0:	eeb0 9a47 	vmov.f32	s18, s14
 80117e4:	eef0 9a67 	vmov.f32	s19, s15
 80117e8:	4682      	mov	sl, r0
 80117ea:	f7ee fd65 	bl	80002b8 <__aeabi_dsub>
 80117ee:	4652      	mov	r2, sl
 80117f0:	4606      	mov	r6, r0
 80117f2:	460f      	mov	r7, r1
 80117f4:	462b      	mov	r3, r5
 80117f6:	ec51 0b19 	vmov	r0, r1, d9
 80117fa:	f7ee fd5f 	bl	80002bc <__adddf3>
 80117fe:	4602      	mov	r2, r0
 8011800:	460b      	mov	r3, r1
 8011802:	2000      	movs	r0, #0
 8011804:	49bb      	ldr	r1, [pc, #748]	; (8011af4 <__ieee754_pow+0x76c>)
 8011806:	f7ef f839 	bl	800087c <__aeabi_ddiv>
 801180a:	ec41 0b1a 	vmov	d10, r0, r1
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	4630      	mov	r0, r6
 8011814:	4639      	mov	r1, r7
 8011816:	f7ee ff07 	bl	8000628 <__aeabi_dmul>
 801181a:	2300      	movs	r3, #0
 801181c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011820:	9302      	str	r3, [sp, #8]
 8011822:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011826:	46ab      	mov	fp, r5
 8011828:	106d      	asrs	r5, r5, #1
 801182a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801182e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011832:	ec41 0b18 	vmov	d8, r0, r1
 8011836:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801183a:	2200      	movs	r2, #0
 801183c:	4640      	mov	r0, r8
 801183e:	4649      	mov	r1, r9
 8011840:	4614      	mov	r4, r2
 8011842:	461d      	mov	r5, r3
 8011844:	f7ee fef0 	bl	8000628 <__aeabi_dmul>
 8011848:	4602      	mov	r2, r0
 801184a:	460b      	mov	r3, r1
 801184c:	4630      	mov	r0, r6
 801184e:	4639      	mov	r1, r7
 8011850:	f7ee fd32 	bl	80002b8 <__aeabi_dsub>
 8011854:	ec53 2b19 	vmov	r2, r3, d9
 8011858:	4606      	mov	r6, r0
 801185a:	460f      	mov	r7, r1
 801185c:	4620      	mov	r0, r4
 801185e:	4629      	mov	r1, r5
 8011860:	f7ee fd2a 	bl	80002b8 <__aeabi_dsub>
 8011864:	4602      	mov	r2, r0
 8011866:	460b      	mov	r3, r1
 8011868:	4650      	mov	r0, sl
 801186a:	4659      	mov	r1, fp
 801186c:	f7ee fd24 	bl	80002b8 <__aeabi_dsub>
 8011870:	4642      	mov	r2, r8
 8011872:	464b      	mov	r3, r9
 8011874:	f7ee fed8 	bl	8000628 <__aeabi_dmul>
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	4630      	mov	r0, r6
 801187e:	4639      	mov	r1, r7
 8011880:	f7ee fd1a 	bl	80002b8 <__aeabi_dsub>
 8011884:	ec53 2b1a 	vmov	r2, r3, d10
 8011888:	f7ee fece 	bl	8000628 <__aeabi_dmul>
 801188c:	ec53 2b18 	vmov	r2, r3, d8
 8011890:	ec41 0b19 	vmov	d9, r0, r1
 8011894:	ec51 0b18 	vmov	r0, r1, d8
 8011898:	f7ee fec6 	bl	8000628 <__aeabi_dmul>
 801189c:	a37c      	add	r3, pc, #496	; (adr r3, 8011a90 <__ieee754_pow+0x708>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	4604      	mov	r4, r0
 80118a4:	460d      	mov	r5, r1
 80118a6:	f7ee febf 	bl	8000628 <__aeabi_dmul>
 80118aa:	a37b      	add	r3, pc, #492	; (adr r3, 8011a98 <__ieee754_pow+0x710>)
 80118ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b0:	f7ee fd04 	bl	80002bc <__adddf3>
 80118b4:	4622      	mov	r2, r4
 80118b6:	462b      	mov	r3, r5
 80118b8:	f7ee feb6 	bl	8000628 <__aeabi_dmul>
 80118bc:	a378      	add	r3, pc, #480	; (adr r3, 8011aa0 <__ieee754_pow+0x718>)
 80118be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c2:	f7ee fcfb 	bl	80002bc <__adddf3>
 80118c6:	4622      	mov	r2, r4
 80118c8:	462b      	mov	r3, r5
 80118ca:	f7ee fead 	bl	8000628 <__aeabi_dmul>
 80118ce:	a376      	add	r3, pc, #472	; (adr r3, 8011aa8 <__ieee754_pow+0x720>)
 80118d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d4:	f7ee fcf2 	bl	80002bc <__adddf3>
 80118d8:	4622      	mov	r2, r4
 80118da:	462b      	mov	r3, r5
 80118dc:	f7ee fea4 	bl	8000628 <__aeabi_dmul>
 80118e0:	a373      	add	r3, pc, #460	; (adr r3, 8011ab0 <__ieee754_pow+0x728>)
 80118e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e6:	f7ee fce9 	bl	80002bc <__adddf3>
 80118ea:	4622      	mov	r2, r4
 80118ec:	462b      	mov	r3, r5
 80118ee:	f7ee fe9b 	bl	8000628 <__aeabi_dmul>
 80118f2:	a371      	add	r3, pc, #452	; (adr r3, 8011ab8 <__ieee754_pow+0x730>)
 80118f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f8:	f7ee fce0 	bl	80002bc <__adddf3>
 80118fc:	4622      	mov	r2, r4
 80118fe:	4606      	mov	r6, r0
 8011900:	460f      	mov	r7, r1
 8011902:	462b      	mov	r3, r5
 8011904:	4620      	mov	r0, r4
 8011906:	4629      	mov	r1, r5
 8011908:	f7ee fe8e 	bl	8000628 <__aeabi_dmul>
 801190c:	4602      	mov	r2, r0
 801190e:	460b      	mov	r3, r1
 8011910:	4630      	mov	r0, r6
 8011912:	4639      	mov	r1, r7
 8011914:	f7ee fe88 	bl	8000628 <__aeabi_dmul>
 8011918:	4642      	mov	r2, r8
 801191a:	4604      	mov	r4, r0
 801191c:	460d      	mov	r5, r1
 801191e:	464b      	mov	r3, r9
 8011920:	ec51 0b18 	vmov	r0, r1, d8
 8011924:	f7ee fcca 	bl	80002bc <__adddf3>
 8011928:	ec53 2b19 	vmov	r2, r3, d9
 801192c:	f7ee fe7c 	bl	8000628 <__aeabi_dmul>
 8011930:	4622      	mov	r2, r4
 8011932:	462b      	mov	r3, r5
 8011934:	f7ee fcc2 	bl	80002bc <__adddf3>
 8011938:	4642      	mov	r2, r8
 801193a:	4682      	mov	sl, r0
 801193c:	468b      	mov	fp, r1
 801193e:	464b      	mov	r3, r9
 8011940:	4640      	mov	r0, r8
 8011942:	4649      	mov	r1, r9
 8011944:	f7ee fe70 	bl	8000628 <__aeabi_dmul>
 8011948:	4b6b      	ldr	r3, [pc, #428]	; (8011af8 <__ieee754_pow+0x770>)
 801194a:	2200      	movs	r2, #0
 801194c:	4606      	mov	r6, r0
 801194e:	460f      	mov	r7, r1
 8011950:	f7ee fcb4 	bl	80002bc <__adddf3>
 8011954:	4652      	mov	r2, sl
 8011956:	465b      	mov	r3, fp
 8011958:	f7ee fcb0 	bl	80002bc <__adddf3>
 801195c:	2000      	movs	r0, #0
 801195e:	4604      	mov	r4, r0
 8011960:	460d      	mov	r5, r1
 8011962:	4602      	mov	r2, r0
 8011964:	460b      	mov	r3, r1
 8011966:	4640      	mov	r0, r8
 8011968:	4649      	mov	r1, r9
 801196a:	f7ee fe5d 	bl	8000628 <__aeabi_dmul>
 801196e:	4b62      	ldr	r3, [pc, #392]	; (8011af8 <__ieee754_pow+0x770>)
 8011970:	4680      	mov	r8, r0
 8011972:	4689      	mov	r9, r1
 8011974:	2200      	movs	r2, #0
 8011976:	4620      	mov	r0, r4
 8011978:	4629      	mov	r1, r5
 801197a:	f7ee fc9d 	bl	80002b8 <__aeabi_dsub>
 801197e:	4632      	mov	r2, r6
 8011980:	463b      	mov	r3, r7
 8011982:	f7ee fc99 	bl	80002b8 <__aeabi_dsub>
 8011986:	4602      	mov	r2, r0
 8011988:	460b      	mov	r3, r1
 801198a:	4650      	mov	r0, sl
 801198c:	4659      	mov	r1, fp
 801198e:	f7ee fc93 	bl	80002b8 <__aeabi_dsub>
 8011992:	ec53 2b18 	vmov	r2, r3, d8
 8011996:	f7ee fe47 	bl	8000628 <__aeabi_dmul>
 801199a:	4622      	mov	r2, r4
 801199c:	4606      	mov	r6, r0
 801199e:	460f      	mov	r7, r1
 80119a0:	462b      	mov	r3, r5
 80119a2:	ec51 0b19 	vmov	r0, r1, d9
 80119a6:	f7ee fe3f 	bl	8000628 <__aeabi_dmul>
 80119aa:	4602      	mov	r2, r0
 80119ac:	460b      	mov	r3, r1
 80119ae:	4630      	mov	r0, r6
 80119b0:	4639      	mov	r1, r7
 80119b2:	f7ee fc83 	bl	80002bc <__adddf3>
 80119b6:	4606      	mov	r6, r0
 80119b8:	460f      	mov	r7, r1
 80119ba:	4602      	mov	r2, r0
 80119bc:	460b      	mov	r3, r1
 80119be:	4640      	mov	r0, r8
 80119c0:	4649      	mov	r1, r9
 80119c2:	f7ee fc7b 	bl	80002bc <__adddf3>
 80119c6:	a33e      	add	r3, pc, #248	; (adr r3, 8011ac0 <__ieee754_pow+0x738>)
 80119c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119cc:	2000      	movs	r0, #0
 80119ce:	4604      	mov	r4, r0
 80119d0:	460d      	mov	r5, r1
 80119d2:	f7ee fe29 	bl	8000628 <__aeabi_dmul>
 80119d6:	4642      	mov	r2, r8
 80119d8:	ec41 0b18 	vmov	d8, r0, r1
 80119dc:	464b      	mov	r3, r9
 80119de:	4620      	mov	r0, r4
 80119e0:	4629      	mov	r1, r5
 80119e2:	f7ee fc69 	bl	80002b8 <__aeabi_dsub>
 80119e6:	4602      	mov	r2, r0
 80119e8:	460b      	mov	r3, r1
 80119ea:	4630      	mov	r0, r6
 80119ec:	4639      	mov	r1, r7
 80119ee:	f7ee fc63 	bl	80002b8 <__aeabi_dsub>
 80119f2:	a335      	add	r3, pc, #212	; (adr r3, 8011ac8 <__ieee754_pow+0x740>)
 80119f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f8:	f7ee fe16 	bl	8000628 <__aeabi_dmul>
 80119fc:	a334      	add	r3, pc, #208	; (adr r3, 8011ad0 <__ieee754_pow+0x748>)
 80119fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a02:	4606      	mov	r6, r0
 8011a04:	460f      	mov	r7, r1
 8011a06:	4620      	mov	r0, r4
 8011a08:	4629      	mov	r1, r5
 8011a0a:	f7ee fe0d 	bl	8000628 <__aeabi_dmul>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	460b      	mov	r3, r1
 8011a12:	4630      	mov	r0, r6
 8011a14:	4639      	mov	r1, r7
 8011a16:	f7ee fc51 	bl	80002bc <__adddf3>
 8011a1a:	9a07      	ldr	r2, [sp, #28]
 8011a1c:	4b37      	ldr	r3, [pc, #220]	; (8011afc <__ieee754_pow+0x774>)
 8011a1e:	4413      	add	r3, r2
 8011a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a24:	f7ee fc4a 	bl	80002bc <__adddf3>
 8011a28:	4682      	mov	sl, r0
 8011a2a:	9805      	ldr	r0, [sp, #20]
 8011a2c:	468b      	mov	fp, r1
 8011a2e:	f7ee fd91 	bl	8000554 <__aeabi_i2d>
 8011a32:	9a07      	ldr	r2, [sp, #28]
 8011a34:	4b32      	ldr	r3, [pc, #200]	; (8011b00 <__ieee754_pow+0x778>)
 8011a36:	4413      	add	r3, r2
 8011a38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a3c:	4606      	mov	r6, r0
 8011a3e:	460f      	mov	r7, r1
 8011a40:	4652      	mov	r2, sl
 8011a42:	465b      	mov	r3, fp
 8011a44:	ec51 0b18 	vmov	r0, r1, d8
 8011a48:	f7ee fc38 	bl	80002bc <__adddf3>
 8011a4c:	4642      	mov	r2, r8
 8011a4e:	464b      	mov	r3, r9
 8011a50:	f7ee fc34 	bl	80002bc <__adddf3>
 8011a54:	4632      	mov	r2, r6
 8011a56:	463b      	mov	r3, r7
 8011a58:	f7ee fc30 	bl	80002bc <__adddf3>
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	4632      	mov	r2, r6
 8011a60:	463b      	mov	r3, r7
 8011a62:	4604      	mov	r4, r0
 8011a64:	460d      	mov	r5, r1
 8011a66:	f7ee fc27 	bl	80002b8 <__aeabi_dsub>
 8011a6a:	4642      	mov	r2, r8
 8011a6c:	464b      	mov	r3, r9
 8011a6e:	f7ee fc23 	bl	80002b8 <__aeabi_dsub>
 8011a72:	ec53 2b18 	vmov	r2, r3, d8
 8011a76:	f7ee fc1f 	bl	80002b8 <__aeabi_dsub>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	4650      	mov	r0, sl
 8011a80:	4659      	mov	r1, fp
 8011a82:	e610      	b.n	80116a6 <__ieee754_pow+0x31e>
 8011a84:	2401      	movs	r4, #1
 8011a86:	e6a1      	b.n	80117cc <__ieee754_pow+0x444>
 8011a88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011ad8 <__ieee754_pow+0x750>
 8011a8c:	e617      	b.n	80116be <__ieee754_pow+0x336>
 8011a8e:	bf00      	nop
 8011a90:	4a454eef 	.word	0x4a454eef
 8011a94:	3fca7e28 	.word	0x3fca7e28
 8011a98:	93c9db65 	.word	0x93c9db65
 8011a9c:	3fcd864a 	.word	0x3fcd864a
 8011aa0:	a91d4101 	.word	0xa91d4101
 8011aa4:	3fd17460 	.word	0x3fd17460
 8011aa8:	518f264d 	.word	0x518f264d
 8011aac:	3fd55555 	.word	0x3fd55555
 8011ab0:	db6fabff 	.word	0xdb6fabff
 8011ab4:	3fdb6db6 	.word	0x3fdb6db6
 8011ab8:	33333303 	.word	0x33333303
 8011abc:	3fe33333 	.word	0x3fe33333
 8011ac0:	e0000000 	.word	0xe0000000
 8011ac4:	3feec709 	.word	0x3feec709
 8011ac8:	dc3a03fd 	.word	0xdc3a03fd
 8011acc:	3feec709 	.word	0x3feec709
 8011ad0:	145b01f5 	.word	0x145b01f5
 8011ad4:	be3e2fe0 	.word	0xbe3e2fe0
 8011ad8:	00000000 	.word	0x00000000
 8011adc:	3ff00000 	.word	0x3ff00000
 8011ae0:	7ff00000 	.word	0x7ff00000
 8011ae4:	43400000 	.word	0x43400000
 8011ae8:	0003988e 	.word	0x0003988e
 8011aec:	000bb679 	.word	0x000bb679
 8011af0:	08013de8 	.word	0x08013de8
 8011af4:	3ff00000 	.word	0x3ff00000
 8011af8:	40080000 	.word	0x40080000
 8011afc:	08013e08 	.word	0x08013e08
 8011b00:	08013df8 	.word	0x08013df8
 8011b04:	a3b5      	add	r3, pc, #724	; (adr r3, 8011ddc <__ieee754_pow+0xa54>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	4640      	mov	r0, r8
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	f7ee fbd5 	bl	80002bc <__adddf3>
 8011b12:	4622      	mov	r2, r4
 8011b14:	ec41 0b1a 	vmov	d10, r0, r1
 8011b18:	462b      	mov	r3, r5
 8011b1a:	4630      	mov	r0, r6
 8011b1c:	4639      	mov	r1, r7
 8011b1e:	f7ee fbcb 	bl	80002b8 <__aeabi_dsub>
 8011b22:	4602      	mov	r2, r0
 8011b24:	460b      	mov	r3, r1
 8011b26:	ec51 0b1a 	vmov	r0, r1, d10
 8011b2a:	f7ef f80d 	bl	8000b48 <__aeabi_dcmpgt>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	f47f ae04 	bne.w	801173c <__ieee754_pow+0x3b4>
 8011b34:	4aa4      	ldr	r2, [pc, #656]	; (8011dc8 <__ieee754_pow+0xa40>)
 8011b36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	f340 8108 	ble.w	8011d50 <__ieee754_pow+0x9c8>
 8011b40:	151b      	asrs	r3, r3, #20
 8011b42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011b46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011b4a:	fa4a f303 	asr.w	r3, sl, r3
 8011b4e:	445b      	add	r3, fp
 8011b50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011b54:	4e9d      	ldr	r6, [pc, #628]	; (8011dcc <__ieee754_pow+0xa44>)
 8011b56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011b5a:	4116      	asrs	r6, r2
 8011b5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011b60:	2000      	movs	r0, #0
 8011b62:	ea23 0106 	bic.w	r1, r3, r6
 8011b66:	f1c2 0214 	rsb	r2, r2, #20
 8011b6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011b6e:	fa4a fa02 	asr.w	sl, sl, r2
 8011b72:	f1bb 0f00 	cmp.w	fp, #0
 8011b76:	4602      	mov	r2, r0
 8011b78:	460b      	mov	r3, r1
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	bfb8      	it	lt
 8011b80:	f1ca 0a00 	rsblt	sl, sl, #0
 8011b84:	f7ee fb98 	bl	80002b8 <__aeabi_dsub>
 8011b88:	ec41 0b19 	vmov	d9, r0, r1
 8011b8c:	4642      	mov	r2, r8
 8011b8e:	464b      	mov	r3, r9
 8011b90:	ec51 0b19 	vmov	r0, r1, d9
 8011b94:	f7ee fb92 	bl	80002bc <__adddf3>
 8011b98:	a37b      	add	r3, pc, #492	; (adr r3, 8011d88 <__ieee754_pow+0xa00>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	460d      	mov	r5, r1
 8011ba4:	f7ee fd40 	bl	8000628 <__aeabi_dmul>
 8011ba8:	ec53 2b19 	vmov	r2, r3, d9
 8011bac:	4606      	mov	r6, r0
 8011bae:	460f      	mov	r7, r1
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	4629      	mov	r1, r5
 8011bb4:	f7ee fb80 	bl	80002b8 <__aeabi_dsub>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	460b      	mov	r3, r1
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	f7ee fb7a 	bl	80002b8 <__aeabi_dsub>
 8011bc4:	a372      	add	r3, pc, #456	; (adr r3, 8011d90 <__ieee754_pow+0xa08>)
 8011bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bca:	f7ee fd2d 	bl	8000628 <__aeabi_dmul>
 8011bce:	a372      	add	r3, pc, #456	; (adr r3, 8011d98 <__ieee754_pow+0xa10>)
 8011bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd4:	4680      	mov	r8, r0
 8011bd6:	4689      	mov	r9, r1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	f7ee fd24 	bl	8000628 <__aeabi_dmul>
 8011be0:	4602      	mov	r2, r0
 8011be2:	460b      	mov	r3, r1
 8011be4:	4640      	mov	r0, r8
 8011be6:	4649      	mov	r1, r9
 8011be8:	f7ee fb68 	bl	80002bc <__adddf3>
 8011bec:	4604      	mov	r4, r0
 8011bee:	460d      	mov	r5, r1
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	4639      	mov	r1, r7
 8011bf8:	f7ee fb60 	bl	80002bc <__adddf3>
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	463b      	mov	r3, r7
 8011c00:	4680      	mov	r8, r0
 8011c02:	4689      	mov	r9, r1
 8011c04:	f7ee fb58 	bl	80002b8 <__aeabi_dsub>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	4629      	mov	r1, r5
 8011c10:	f7ee fb52 	bl	80002b8 <__aeabi_dsub>
 8011c14:	4642      	mov	r2, r8
 8011c16:	4606      	mov	r6, r0
 8011c18:	460f      	mov	r7, r1
 8011c1a:	464b      	mov	r3, r9
 8011c1c:	4640      	mov	r0, r8
 8011c1e:	4649      	mov	r1, r9
 8011c20:	f7ee fd02 	bl	8000628 <__aeabi_dmul>
 8011c24:	a35e      	add	r3, pc, #376	; (adr r3, 8011da0 <__ieee754_pow+0xa18>)
 8011c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	f7ee fcfb 	bl	8000628 <__aeabi_dmul>
 8011c32:	a35d      	add	r3, pc, #372	; (adr r3, 8011da8 <__ieee754_pow+0xa20>)
 8011c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c38:	f7ee fb3e 	bl	80002b8 <__aeabi_dsub>
 8011c3c:	4622      	mov	r2, r4
 8011c3e:	462b      	mov	r3, r5
 8011c40:	f7ee fcf2 	bl	8000628 <__aeabi_dmul>
 8011c44:	a35a      	add	r3, pc, #360	; (adr r3, 8011db0 <__ieee754_pow+0xa28>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	f7ee fb37 	bl	80002bc <__adddf3>
 8011c4e:	4622      	mov	r2, r4
 8011c50:	462b      	mov	r3, r5
 8011c52:	f7ee fce9 	bl	8000628 <__aeabi_dmul>
 8011c56:	a358      	add	r3, pc, #352	; (adr r3, 8011db8 <__ieee754_pow+0xa30>)
 8011c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5c:	f7ee fb2c 	bl	80002b8 <__aeabi_dsub>
 8011c60:	4622      	mov	r2, r4
 8011c62:	462b      	mov	r3, r5
 8011c64:	f7ee fce0 	bl	8000628 <__aeabi_dmul>
 8011c68:	a355      	add	r3, pc, #340	; (adr r3, 8011dc0 <__ieee754_pow+0xa38>)
 8011c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6e:	f7ee fb25 	bl	80002bc <__adddf3>
 8011c72:	4622      	mov	r2, r4
 8011c74:	462b      	mov	r3, r5
 8011c76:	f7ee fcd7 	bl	8000628 <__aeabi_dmul>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	4640      	mov	r0, r8
 8011c80:	4649      	mov	r1, r9
 8011c82:	f7ee fb19 	bl	80002b8 <__aeabi_dsub>
 8011c86:	4604      	mov	r4, r0
 8011c88:	460d      	mov	r5, r1
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	4640      	mov	r0, r8
 8011c90:	4649      	mov	r1, r9
 8011c92:	f7ee fcc9 	bl	8000628 <__aeabi_dmul>
 8011c96:	2200      	movs	r2, #0
 8011c98:	ec41 0b19 	vmov	d9, r0, r1
 8011c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	f7ee fb08 	bl	80002b8 <__aeabi_dsub>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	460b      	mov	r3, r1
 8011cac:	ec51 0b19 	vmov	r0, r1, d9
 8011cb0:	f7ee fde4 	bl	800087c <__aeabi_ddiv>
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	460d      	mov	r5, r1
 8011cba:	463b      	mov	r3, r7
 8011cbc:	4640      	mov	r0, r8
 8011cbe:	4649      	mov	r1, r9
 8011cc0:	f7ee fcb2 	bl	8000628 <__aeabi_dmul>
 8011cc4:	4632      	mov	r2, r6
 8011cc6:	463b      	mov	r3, r7
 8011cc8:	f7ee faf8 	bl	80002bc <__adddf3>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	f7ee faf0 	bl	80002b8 <__aeabi_dsub>
 8011cd8:	4642      	mov	r2, r8
 8011cda:	464b      	mov	r3, r9
 8011cdc:	f7ee faec 	bl	80002b8 <__aeabi_dsub>
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	493a      	ldr	r1, [pc, #232]	; (8011dd0 <__ieee754_pow+0xa48>)
 8011ce6:	2000      	movs	r0, #0
 8011ce8:	f7ee fae6 	bl	80002b8 <__aeabi_dsub>
 8011cec:	ec41 0b10 	vmov	d0, r0, r1
 8011cf0:	ee10 3a90 	vmov	r3, s1
 8011cf4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cfc:	da2b      	bge.n	8011d56 <__ieee754_pow+0x9ce>
 8011cfe:	4650      	mov	r0, sl
 8011d00:	f001 fa76 	bl	80131f0 <scalbn>
 8011d04:	ec51 0b10 	vmov	r0, r1, d0
 8011d08:	ec53 2b18 	vmov	r2, r3, d8
 8011d0c:	f7ff bbed 	b.w	80114ea <__ieee754_pow+0x162>
 8011d10:	4b30      	ldr	r3, [pc, #192]	; (8011dd4 <__ieee754_pow+0xa4c>)
 8011d12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011d16:	429e      	cmp	r6, r3
 8011d18:	f77f af0c 	ble.w	8011b34 <__ieee754_pow+0x7ac>
 8011d1c:	4b2e      	ldr	r3, [pc, #184]	; (8011dd8 <__ieee754_pow+0xa50>)
 8011d1e:	440b      	add	r3, r1
 8011d20:	4303      	orrs	r3, r0
 8011d22:	d009      	beq.n	8011d38 <__ieee754_pow+0x9b0>
 8011d24:	ec51 0b18 	vmov	r0, r1, d8
 8011d28:	2200      	movs	r2, #0
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	f7ee feee 	bl	8000b0c <__aeabi_dcmplt>
 8011d30:	3800      	subs	r0, #0
 8011d32:	bf18      	it	ne
 8011d34:	2001      	movne	r0, #1
 8011d36:	e447      	b.n	80115c8 <__ieee754_pow+0x240>
 8011d38:	4622      	mov	r2, r4
 8011d3a:	462b      	mov	r3, r5
 8011d3c:	f7ee fabc 	bl	80002b8 <__aeabi_dsub>
 8011d40:	4642      	mov	r2, r8
 8011d42:	464b      	mov	r3, r9
 8011d44:	f7ee fef6 	bl	8000b34 <__aeabi_dcmpge>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	f43f aef3 	beq.w	8011b34 <__ieee754_pow+0x7ac>
 8011d4e:	e7e9      	b.n	8011d24 <__ieee754_pow+0x99c>
 8011d50:	f04f 0a00 	mov.w	sl, #0
 8011d54:	e71a      	b.n	8011b8c <__ieee754_pow+0x804>
 8011d56:	ec51 0b10 	vmov	r0, r1, d0
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	e7d4      	b.n	8011d08 <__ieee754_pow+0x980>
 8011d5e:	491c      	ldr	r1, [pc, #112]	; (8011dd0 <__ieee754_pow+0xa48>)
 8011d60:	2000      	movs	r0, #0
 8011d62:	f7ff bb30 	b.w	80113c6 <__ieee754_pow+0x3e>
 8011d66:	2000      	movs	r0, #0
 8011d68:	2100      	movs	r1, #0
 8011d6a:	f7ff bb2c 	b.w	80113c6 <__ieee754_pow+0x3e>
 8011d6e:	4630      	mov	r0, r6
 8011d70:	4639      	mov	r1, r7
 8011d72:	f7ff bb28 	b.w	80113c6 <__ieee754_pow+0x3e>
 8011d76:	9204      	str	r2, [sp, #16]
 8011d78:	f7ff bb7a 	b.w	8011470 <__ieee754_pow+0xe8>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	f7ff bb64 	b.w	801144a <__ieee754_pow+0xc2>
 8011d82:	bf00      	nop
 8011d84:	f3af 8000 	nop.w
 8011d88:	00000000 	.word	0x00000000
 8011d8c:	3fe62e43 	.word	0x3fe62e43
 8011d90:	fefa39ef 	.word	0xfefa39ef
 8011d94:	3fe62e42 	.word	0x3fe62e42
 8011d98:	0ca86c39 	.word	0x0ca86c39
 8011d9c:	be205c61 	.word	0xbe205c61
 8011da0:	72bea4d0 	.word	0x72bea4d0
 8011da4:	3e663769 	.word	0x3e663769
 8011da8:	c5d26bf1 	.word	0xc5d26bf1
 8011dac:	3ebbbd41 	.word	0x3ebbbd41
 8011db0:	af25de2c 	.word	0xaf25de2c
 8011db4:	3f11566a 	.word	0x3f11566a
 8011db8:	16bebd93 	.word	0x16bebd93
 8011dbc:	3f66c16c 	.word	0x3f66c16c
 8011dc0:	5555553e 	.word	0x5555553e
 8011dc4:	3fc55555 	.word	0x3fc55555
 8011dc8:	3fe00000 	.word	0x3fe00000
 8011dcc:	000fffff 	.word	0x000fffff
 8011dd0:	3ff00000 	.word	0x3ff00000
 8011dd4:	4090cbff 	.word	0x4090cbff
 8011dd8:	3f6f3400 	.word	0x3f6f3400
 8011ddc:	652b82fe 	.word	0x652b82fe
 8011de0:	3c971547 	.word	0x3c971547
 8011de4:	00000000 	.word	0x00000000

08011de8 <__ieee754_rem_pio2>:
 8011de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dec:	ed2d 8b02 	vpush	{d8}
 8011df0:	ec55 4b10 	vmov	r4, r5, d0
 8011df4:	4bca      	ldr	r3, [pc, #808]	; (8012120 <__ieee754_rem_pio2+0x338>)
 8011df6:	b08b      	sub	sp, #44	; 0x2c
 8011df8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011dfc:	4598      	cmp	r8, r3
 8011dfe:	4682      	mov	sl, r0
 8011e00:	9502      	str	r5, [sp, #8]
 8011e02:	dc08      	bgt.n	8011e16 <__ieee754_rem_pio2+0x2e>
 8011e04:	2200      	movs	r2, #0
 8011e06:	2300      	movs	r3, #0
 8011e08:	ed80 0b00 	vstr	d0, [r0]
 8011e0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011e10:	f04f 0b00 	mov.w	fp, #0
 8011e14:	e028      	b.n	8011e68 <__ieee754_rem_pio2+0x80>
 8011e16:	4bc3      	ldr	r3, [pc, #780]	; (8012124 <__ieee754_rem_pio2+0x33c>)
 8011e18:	4598      	cmp	r8, r3
 8011e1a:	dc78      	bgt.n	8011f0e <__ieee754_rem_pio2+0x126>
 8011e1c:	9b02      	ldr	r3, [sp, #8]
 8011e1e:	4ec2      	ldr	r6, [pc, #776]	; (8012128 <__ieee754_rem_pio2+0x340>)
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	ee10 0a10 	vmov	r0, s0
 8011e26:	a3b0      	add	r3, pc, #704	; (adr r3, 80120e8 <__ieee754_rem_pio2+0x300>)
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	dd39      	ble.n	8011ea4 <__ieee754_rem_pio2+0xbc>
 8011e30:	f7ee fa42 	bl	80002b8 <__aeabi_dsub>
 8011e34:	45b0      	cmp	r8, r6
 8011e36:	4604      	mov	r4, r0
 8011e38:	460d      	mov	r5, r1
 8011e3a:	d01b      	beq.n	8011e74 <__ieee754_rem_pio2+0x8c>
 8011e3c:	a3ac      	add	r3, pc, #688	; (adr r3, 80120f0 <__ieee754_rem_pio2+0x308>)
 8011e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e42:	f7ee fa39 	bl	80002b8 <__aeabi_dsub>
 8011e46:	4602      	mov	r2, r0
 8011e48:	460b      	mov	r3, r1
 8011e4a:	e9ca 2300 	strd	r2, r3, [sl]
 8011e4e:	4620      	mov	r0, r4
 8011e50:	4629      	mov	r1, r5
 8011e52:	f7ee fa31 	bl	80002b8 <__aeabi_dsub>
 8011e56:	a3a6      	add	r3, pc, #664	; (adr r3, 80120f0 <__ieee754_rem_pio2+0x308>)
 8011e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5c:	f7ee fa2c 	bl	80002b8 <__aeabi_dsub>
 8011e60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011e64:	f04f 0b01 	mov.w	fp, #1
 8011e68:	4658      	mov	r0, fp
 8011e6a:	b00b      	add	sp, #44	; 0x2c
 8011e6c:	ecbd 8b02 	vpop	{d8}
 8011e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e74:	a3a0      	add	r3, pc, #640	; (adr r3, 80120f8 <__ieee754_rem_pio2+0x310>)
 8011e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7a:	f7ee fa1d 	bl	80002b8 <__aeabi_dsub>
 8011e7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012100 <__ieee754_rem_pio2+0x318>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	4604      	mov	r4, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	f7ee fa16 	bl	80002b8 <__aeabi_dsub>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	460b      	mov	r3, r1
 8011e90:	e9ca 2300 	strd	r2, r3, [sl]
 8011e94:	4620      	mov	r0, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	f7ee fa0e 	bl	80002b8 <__aeabi_dsub>
 8011e9c:	a398      	add	r3, pc, #608	; (adr r3, 8012100 <__ieee754_rem_pio2+0x318>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	e7db      	b.n	8011e5c <__ieee754_rem_pio2+0x74>
 8011ea4:	f7ee fa0a 	bl	80002bc <__adddf3>
 8011ea8:	45b0      	cmp	r8, r6
 8011eaa:	4604      	mov	r4, r0
 8011eac:	460d      	mov	r5, r1
 8011eae:	d016      	beq.n	8011ede <__ieee754_rem_pio2+0xf6>
 8011eb0:	a38f      	add	r3, pc, #572	; (adr r3, 80120f0 <__ieee754_rem_pio2+0x308>)
 8011eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb6:	f7ee fa01 	bl	80002bc <__adddf3>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	e9ca 2300 	strd	r2, r3, [sl]
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	f7ee f9f7 	bl	80002b8 <__aeabi_dsub>
 8011eca:	a389      	add	r3, pc, #548	; (adr r3, 80120f0 <__ieee754_rem_pio2+0x308>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	f7ee f9f4 	bl	80002bc <__adddf3>
 8011ed4:	f04f 3bff 	mov.w	fp, #4294967295
 8011ed8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011edc:	e7c4      	b.n	8011e68 <__ieee754_rem_pio2+0x80>
 8011ede:	a386      	add	r3, pc, #536	; (adr r3, 80120f8 <__ieee754_rem_pio2+0x310>)
 8011ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee4:	f7ee f9ea 	bl	80002bc <__adddf3>
 8011ee8:	a385      	add	r3, pc, #532	; (adr r3, 8012100 <__ieee754_rem_pio2+0x318>)
 8011eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eee:	4604      	mov	r4, r0
 8011ef0:	460d      	mov	r5, r1
 8011ef2:	f7ee f9e3 	bl	80002bc <__adddf3>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	e9ca 2300 	strd	r2, r3, [sl]
 8011efe:	4620      	mov	r0, r4
 8011f00:	4629      	mov	r1, r5
 8011f02:	f7ee f9d9 	bl	80002b8 <__aeabi_dsub>
 8011f06:	a37e      	add	r3, pc, #504	; (adr r3, 8012100 <__ieee754_rem_pio2+0x318>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	e7e0      	b.n	8011ed0 <__ieee754_rem_pio2+0xe8>
 8011f0e:	4b87      	ldr	r3, [pc, #540]	; (801212c <__ieee754_rem_pio2+0x344>)
 8011f10:	4598      	cmp	r8, r3
 8011f12:	f300 80d9 	bgt.w	80120c8 <__ieee754_rem_pio2+0x2e0>
 8011f16:	f001 f8cf 	bl	80130b8 <fabs>
 8011f1a:	ec55 4b10 	vmov	r4, r5, d0
 8011f1e:	ee10 0a10 	vmov	r0, s0
 8011f22:	a379      	add	r3, pc, #484	; (adr r3, 8012108 <__ieee754_rem_pio2+0x320>)
 8011f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f28:	4629      	mov	r1, r5
 8011f2a:	f7ee fb7d 	bl	8000628 <__aeabi_dmul>
 8011f2e:	4b80      	ldr	r3, [pc, #512]	; (8012130 <__ieee754_rem_pio2+0x348>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	f7ee f9c3 	bl	80002bc <__adddf3>
 8011f36:	f7ee fe27 	bl	8000b88 <__aeabi_d2iz>
 8011f3a:	4683      	mov	fp, r0
 8011f3c:	f7ee fb0a 	bl	8000554 <__aeabi_i2d>
 8011f40:	4602      	mov	r2, r0
 8011f42:	460b      	mov	r3, r1
 8011f44:	ec43 2b18 	vmov	d8, r2, r3
 8011f48:	a367      	add	r3, pc, #412	; (adr r3, 80120e8 <__ieee754_rem_pio2+0x300>)
 8011f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4e:	f7ee fb6b 	bl	8000628 <__aeabi_dmul>
 8011f52:	4602      	mov	r2, r0
 8011f54:	460b      	mov	r3, r1
 8011f56:	4620      	mov	r0, r4
 8011f58:	4629      	mov	r1, r5
 8011f5a:	f7ee f9ad 	bl	80002b8 <__aeabi_dsub>
 8011f5e:	a364      	add	r3, pc, #400	; (adr r3, 80120f0 <__ieee754_rem_pio2+0x308>)
 8011f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f64:	4606      	mov	r6, r0
 8011f66:	460f      	mov	r7, r1
 8011f68:	ec51 0b18 	vmov	r0, r1, d8
 8011f6c:	f7ee fb5c 	bl	8000628 <__aeabi_dmul>
 8011f70:	f1bb 0f1f 	cmp.w	fp, #31
 8011f74:	4604      	mov	r4, r0
 8011f76:	460d      	mov	r5, r1
 8011f78:	dc0d      	bgt.n	8011f96 <__ieee754_rem_pio2+0x1ae>
 8011f7a:	4b6e      	ldr	r3, [pc, #440]	; (8012134 <__ieee754_rem_pio2+0x34c>)
 8011f7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f84:	4543      	cmp	r3, r8
 8011f86:	d006      	beq.n	8011f96 <__ieee754_rem_pio2+0x1ae>
 8011f88:	4622      	mov	r2, r4
 8011f8a:	462b      	mov	r3, r5
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	4639      	mov	r1, r7
 8011f90:	f7ee f992 	bl	80002b8 <__aeabi_dsub>
 8011f94:	e00f      	b.n	8011fb6 <__ieee754_rem_pio2+0x1ce>
 8011f96:	462b      	mov	r3, r5
 8011f98:	4622      	mov	r2, r4
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	4639      	mov	r1, r7
 8011f9e:	f7ee f98b 	bl	80002b8 <__aeabi_dsub>
 8011fa2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011fa6:	9303      	str	r3, [sp, #12]
 8011fa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011fac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011fb0:	f1b8 0f10 	cmp.w	r8, #16
 8011fb4:	dc02      	bgt.n	8011fbc <__ieee754_rem_pio2+0x1d4>
 8011fb6:	e9ca 0100 	strd	r0, r1, [sl]
 8011fba:	e039      	b.n	8012030 <__ieee754_rem_pio2+0x248>
 8011fbc:	a34e      	add	r3, pc, #312	; (adr r3, 80120f8 <__ieee754_rem_pio2+0x310>)
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	ec51 0b18 	vmov	r0, r1, d8
 8011fc6:	f7ee fb2f 	bl	8000628 <__aeabi_dmul>
 8011fca:	4604      	mov	r4, r0
 8011fcc:	460d      	mov	r5, r1
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	4639      	mov	r1, r7
 8011fd6:	f7ee f96f 	bl	80002b8 <__aeabi_dsub>
 8011fda:	4602      	mov	r2, r0
 8011fdc:	460b      	mov	r3, r1
 8011fde:	4680      	mov	r8, r0
 8011fe0:	4689      	mov	r9, r1
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	4639      	mov	r1, r7
 8011fe6:	f7ee f967 	bl	80002b8 <__aeabi_dsub>
 8011fea:	4622      	mov	r2, r4
 8011fec:	462b      	mov	r3, r5
 8011fee:	f7ee f963 	bl	80002b8 <__aeabi_dsub>
 8011ff2:	a343      	add	r3, pc, #268	; (adr r3, 8012100 <__ieee754_rem_pio2+0x318>)
 8011ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	460d      	mov	r5, r1
 8011ffc:	ec51 0b18 	vmov	r0, r1, d8
 8012000:	f7ee fb12 	bl	8000628 <__aeabi_dmul>
 8012004:	4622      	mov	r2, r4
 8012006:	462b      	mov	r3, r5
 8012008:	f7ee f956 	bl	80002b8 <__aeabi_dsub>
 801200c:	4602      	mov	r2, r0
 801200e:	460b      	mov	r3, r1
 8012010:	4604      	mov	r4, r0
 8012012:	460d      	mov	r5, r1
 8012014:	4640      	mov	r0, r8
 8012016:	4649      	mov	r1, r9
 8012018:	f7ee f94e 	bl	80002b8 <__aeabi_dsub>
 801201c:	9a03      	ldr	r2, [sp, #12]
 801201e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	2b31      	cmp	r3, #49	; 0x31
 8012026:	dc24      	bgt.n	8012072 <__ieee754_rem_pio2+0x28a>
 8012028:	e9ca 0100 	strd	r0, r1, [sl]
 801202c:	4646      	mov	r6, r8
 801202e:	464f      	mov	r7, r9
 8012030:	e9da 8900 	ldrd	r8, r9, [sl]
 8012034:	4630      	mov	r0, r6
 8012036:	4642      	mov	r2, r8
 8012038:	464b      	mov	r3, r9
 801203a:	4639      	mov	r1, r7
 801203c:	f7ee f93c 	bl	80002b8 <__aeabi_dsub>
 8012040:	462b      	mov	r3, r5
 8012042:	4622      	mov	r2, r4
 8012044:	f7ee f938 	bl	80002b8 <__aeabi_dsub>
 8012048:	9b02      	ldr	r3, [sp, #8]
 801204a:	2b00      	cmp	r3, #0
 801204c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012050:	f6bf af0a 	bge.w	8011e68 <__ieee754_rem_pio2+0x80>
 8012054:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012058:	f8ca 3004 	str.w	r3, [sl, #4]
 801205c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012060:	f8ca 8000 	str.w	r8, [sl]
 8012064:	f8ca 0008 	str.w	r0, [sl, #8]
 8012068:	f8ca 300c 	str.w	r3, [sl, #12]
 801206c:	f1cb 0b00 	rsb	fp, fp, #0
 8012070:	e6fa      	b.n	8011e68 <__ieee754_rem_pio2+0x80>
 8012072:	a327      	add	r3, pc, #156	; (adr r3, 8012110 <__ieee754_rem_pio2+0x328>)
 8012074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012078:	ec51 0b18 	vmov	r0, r1, d8
 801207c:	f7ee fad4 	bl	8000628 <__aeabi_dmul>
 8012080:	4604      	mov	r4, r0
 8012082:	460d      	mov	r5, r1
 8012084:	4602      	mov	r2, r0
 8012086:	460b      	mov	r3, r1
 8012088:	4640      	mov	r0, r8
 801208a:	4649      	mov	r1, r9
 801208c:	f7ee f914 	bl	80002b8 <__aeabi_dsub>
 8012090:	4602      	mov	r2, r0
 8012092:	460b      	mov	r3, r1
 8012094:	4606      	mov	r6, r0
 8012096:	460f      	mov	r7, r1
 8012098:	4640      	mov	r0, r8
 801209a:	4649      	mov	r1, r9
 801209c:	f7ee f90c 	bl	80002b8 <__aeabi_dsub>
 80120a0:	4622      	mov	r2, r4
 80120a2:	462b      	mov	r3, r5
 80120a4:	f7ee f908 	bl	80002b8 <__aeabi_dsub>
 80120a8:	a31b      	add	r3, pc, #108	; (adr r3, 8012118 <__ieee754_rem_pio2+0x330>)
 80120aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ae:	4604      	mov	r4, r0
 80120b0:	460d      	mov	r5, r1
 80120b2:	ec51 0b18 	vmov	r0, r1, d8
 80120b6:	f7ee fab7 	bl	8000628 <__aeabi_dmul>
 80120ba:	4622      	mov	r2, r4
 80120bc:	462b      	mov	r3, r5
 80120be:	f7ee f8fb 	bl	80002b8 <__aeabi_dsub>
 80120c2:	4604      	mov	r4, r0
 80120c4:	460d      	mov	r5, r1
 80120c6:	e75f      	b.n	8011f88 <__ieee754_rem_pio2+0x1a0>
 80120c8:	4b1b      	ldr	r3, [pc, #108]	; (8012138 <__ieee754_rem_pio2+0x350>)
 80120ca:	4598      	cmp	r8, r3
 80120cc:	dd36      	ble.n	801213c <__ieee754_rem_pio2+0x354>
 80120ce:	ee10 2a10 	vmov	r2, s0
 80120d2:	462b      	mov	r3, r5
 80120d4:	4620      	mov	r0, r4
 80120d6:	4629      	mov	r1, r5
 80120d8:	f7ee f8ee 	bl	80002b8 <__aeabi_dsub>
 80120dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120e0:	e9ca 0100 	strd	r0, r1, [sl]
 80120e4:	e694      	b.n	8011e10 <__ieee754_rem_pio2+0x28>
 80120e6:	bf00      	nop
 80120e8:	54400000 	.word	0x54400000
 80120ec:	3ff921fb 	.word	0x3ff921fb
 80120f0:	1a626331 	.word	0x1a626331
 80120f4:	3dd0b461 	.word	0x3dd0b461
 80120f8:	1a600000 	.word	0x1a600000
 80120fc:	3dd0b461 	.word	0x3dd0b461
 8012100:	2e037073 	.word	0x2e037073
 8012104:	3ba3198a 	.word	0x3ba3198a
 8012108:	6dc9c883 	.word	0x6dc9c883
 801210c:	3fe45f30 	.word	0x3fe45f30
 8012110:	2e000000 	.word	0x2e000000
 8012114:	3ba3198a 	.word	0x3ba3198a
 8012118:	252049c1 	.word	0x252049c1
 801211c:	397b839a 	.word	0x397b839a
 8012120:	3fe921fb 	.word	0x3fe921fb
 8012124:	4002d97b 	.word	0x4002d97b
 8012128:	3ff921fb 	.word	0x3ff921fb
 801212c:	413921fb 	.word	0x413921fb
 8012130:	3fe00000 	.word	0x3fe00000
 8012134:	08013e18 	.word	0x08013e18
 8012138:	7fefffff 	.word	0x7fefffff
 801213c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012140:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012144:	ee10 0a10 	vmov	r0, s0
 8012148:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801214c:	ee10 6a10 	vmov	r6, s0
 8012150:	460f      	mov	r7, r1
 8012152:	f7ee fd19 	bl	8000b88 <__aeabi_d2iz>
 8012156:	f7ee f9fd 	bl	8000554 <__aeabi_i2d>
 801215a:	4602      	mov	r2, r0
 801215c:	460b      	mov	r3, r1
 801215e:	4630      	mov	r0, r6
 8012160:	4639      	mov	r1, r7
 8012162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012166:	f7ee f8a7 	bl	80002b8 <__aeabi_dsub>
 801216a:	4b23      	ldr	r3, [pc, #140]	; (80121f8 <__ieee754_rem_pio2+0x410>)
 801216c:	2200      	movs	r2, #0
 801216e:	f7ee fa5b 	bl	8000628 <__aeabi_dmul>
 8012172:	460f      	mov	r7, r1
 8012174:	4606      	mov	r6, r0
 8012176:	f7ee fd07 	bl	8000b88 <__aeabi_d2iz>
 801217a:	f7ee f9eb 	bl	8000554 <__aeabi_i2d>
 801217e:	4602      	mov	r2, r0
 8012180:	460b      	mov	r3, r1
 8012182:	4630      	mov	r0, r6
 8012184:	4639      	mov	r1, r7
 8012186:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801218a:	f7ee f895 	bl	80002b8 <__aeabi_dsub>
 801218e:	4b1a      	ldr	r3, [pc, #104]	; (80121f8 <__ieee754_rem_pio2+0x410>)
 8012190:	2200      	movs	r2, #0
 8012192:	f7ee fa49 	bl	8000628 <__aeabi_dmul>
 8012196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801219a:	ad04      	add	r5, sp, #16
 801219c:	f04f 0803 	mov.w	r8, #3
 80121a0:	46a9      	mov	r9, r5
 80121a2:	2600      	movs	r6, #0
 80121a4:	2700      	movs	r7, #0
 80121a6:	4632      	mov	r2, r6
 80121a8:	463b      	mov	r3, r7
 80121aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80121ae:	46c3      	mov	fp, r8
 80121b0:	3d08      	subs	r5, #8
 80121b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80121b6:	f7ee fc9f 	bl	8000af8 <__aeabi_dcmpeq>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d1f3      	bne.n	80121a6 <__ieee754_rem_pio2+0x3be>
 80121be:	4b0f      	ldr	r3, [pc, #60]	; (80121fc <__ieee754_rem_pio2+0x414>)
 80121c0:	9301      	str	r3, [sp, #4]
 80121c2:	2302      	movs	r3, #2
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	4622      	mov	r2, r4
 80121c8:	465b      	mov	r3, fp
 80121ca:	4651      	mov	r1, sl
 80121cc:	4648      	mov	r0, r9
 80121ce:	f000 f993 	bl	80124f8 <__kernel_rem_pio2>
 80121d2:	9b02      	ldr	r3, [sp, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	4683      	mov	fp, r0
 80121d8:	f6bf ae46 	bge.w	8011e68 <__ieee754_rem_pio2+0x80>
 80121dc:	e9da 2100 	ldrd	r2, r1, [sl]
 80121e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121e4:	e9ca 2300 	strd	r2, r3, [sl]
 80121e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80121ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80121f4:	e73a      	b.n	801206c <__ieee754_rem_pio2+0x284>
 80121f6:	bf00      	nop
 80121f8:	41700000 	.word	0x41700000
 80121fc:	08013e98 	.word	0x08013e98

08012200 <__ieee754_sqrt>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	ec55 4b10 	vmov	r4, r5, d0
 8012208:	4e55      	ldr	r6, [pc, #340]	; (8012360 <__ieee754_sqrt+0x160>)
 801220a:	43ae      	bics	r6, r5
 801220c:	ee10 0a10 	vmov	r0, s0
 8012210:	ee10 3a10 	vmov	r3, s0
 8012214:	462a      	mov	r2, r5
 8012216:	4629      	mov	r1, r5
 8012218:	d110      	bne.n	801223c <__ieee754_sqrt+0x3c>
 801221a:	ee10 2a10 	vmov	r2, s0
 801221e:	462b      	mov	r3, r5
 8012220:	f7ee fa02 	bl	8000628 <__aeabi_dmul>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4620      	mov	r0, r4
 801222a:	4629      	mov	r1, r5
 801222c:	f7ee f846 	bl	80002bc <__adddf3>
 8012230:	4604      	mov	r4, r0
 8012232:	460d      	mov	r5, r1
 8012234:	ec45 4b10 	vmov	d0, r4, r5
 8012238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801223c:	2d00      	cmp	r5, #0
 801223e:	dc10      	bgt.n	8012262 <__ieee754_sqrt+0x62>
 8012240:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012244:	4330      	orrs	r0, r6
 8012246:	d0f5      	beq.n	8012234 <__ieee754_sqrt+0x34>
 8012248:	b15d      	cbz	r5, 8012262 <__ieee754_sqrt+0x62>
 801224a:	ee10 2a10 	vmov	r2, s0
 801224e:	462b      	mov	r3, r5
 8012250:	ee10 0a10 	vmov	r0, s0
 8012254:	f7ee f830 	bl	80002b8 <__aeabi_dsub>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	f7ee fb0e 	bl	800087c <__aeabi_ddiv>
 8012260:	e7e6      	b.n	8012230 <__ieee754_sqrt+0x30>
 8012262:	1512      	asrs	r2, r2, #20
 8012264:	d074      	beq.n	8012350 <__ieee754_sqrt+0x150>
 8012266:	07d4      	lsls	r4, r2, #31
 8012268:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801226c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012274:	bf5e      	ittt	pl
 8012276:	0fda      	lsrpl	r2, r3, #31
 8012278:	005b      	lslpl	r3, r3, #1
 801227a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801227e:	2400      	movs	r4, #0
 8012280:	0fda      	lsrs	r2, r3, #31
 8012282:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012286:	107f      	asrs	r7, r7, #1
 8012288:	005b      	lsls	r3, r3, #1
 801228a:	2516      	movs	r5, #22
 801228c:	4620      	mov	r0, r4
 801228e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012292:	1886      	adds	r6, r0, r2
 8012294:	428e      	cmp	r6, r1
 8012296:	bfde      	ittt	le
 8012298:	1b89      	suble	r1, r1, r6
 801229a:	18b0      	addle	r0, r6, r2
 801229c:	18a4      	addle	r4, r4, r2
 801229e:	0049      	lsls	r1, r1, #1
 80122a0:	3d01      	subs	r5, #1
 80122a2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80122a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80122aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80122ae:	d1f0      	bne.n	8012292 <__ieee754_sqrt+0x92>
 80122b0:	462a      	mov	r2, r5
 80122b2:	f04f 0e20 	mov.w	lr, #32
 80122b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80122ba:	4281      	cmp	r1, r0
 80122bc:	eb06 0c05 	add.w	ip, r6, r5
 80122c0:	dc02      	bgt.n	80122c8 <__ieee754_sqrt+0xc8>
 80122c2:	d113      	bne.n	80122ec <__ieee754_sqrt+0xec>
 80122c4:	459c      	cmp	ip, r3
 80122c6:	d811      	bhi.n	80122ec <__ieee754_sqrt+0xec>
 80122c8:	f1bc 0f00 	cmp.w	ip, #0
 80122cc:	eb0c 0506 	add.w	r5, ip, r6
 80122d0:	da43      	bge.n	801235a <__ieee754_sqrt+0x15a>
 80122d2:	2d00      	cmp	r5, #0
 80122d4:	db41      	blt.n	801235a <__ieee754_sqrt+0x15a>
 80122d6:	f100 0801 	add.w	r8, r0, #1
 80122da:	1a09      	subs	r1, r1, r0
 80122dc:	459c      	cmp	ip, r3
 80122de:	bf88      	it	hi
 80122e0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80122e4:	eba3 030c 	sub.w	r3, r3, ip
 80122e8:	4432      	add	r2, r6
 80122ea:	4640      	mov	r0, r8
 80122ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80122f0:	f1be 0e01 	subs.w	lr, lr, #1
 80122f4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80122f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80122fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012300:	d1db      	bne.n	80122ba <__ieee754_sqrt+0xba>
 8012302:	430b      	orrs	r3, r1
 8012304:	d006      	beq.n	8012314 <__ieee754_sqrt+0x114>
 8012306:	1c50      	adds	r0, r2, #1
 8012308:	bf13      	iteet	ne
 801230a:	3201      	addne	r2, #1
 801230c:	3401      	addeq	r4, #1
 801230e:	4672      	moveq	r2, lr
 8012310:	f022 0201 	bicne.w	r2, r2, #1
 8012314:	1063      	asrs	r3, r4, #1
 8012316:	0852      	lsrs	r2, r2, #1
 8012318:	07e1      	lsls	r1, r4, #31
 801231a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801231e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012322:	bf48      	it	mi
 8012324:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012328:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801232c:	4614      	mov	r4, r2
 801232e:	e781      	b.n	8012234 <__ieee754_sqrt+0x34>
 8012330:	0ad9      	lsrs	r1, r3, #11
 8012332:	3815      	subs	r0, #21
 8012334:	055b      	lsls	r3, r3, #21
 8012336:	2900      	cmp	r1, #0
 8012338:	d0fa      	beq.n	8012330 <__ieee754_sqrt+0x130>
 801233a:	02cd      	lsls	r5, r1, #11
 801233c:	d50a      	bpl.n	8012354 <__ieee754_sqrt+0x154>
 801233e:	f1c2 0420 	rsb	r4, r2, #32
 8012342:	fa23 f404 	lsr.w	r4, r3, r4
 8012346:	1e55      	subs	r5, r2, #1
 8012348:	4093      	lsls	r3, r2
 801234a:	4321      	orrs	r1, r4
 801234c:	1b42      	subs	r2, r0, r5
 801234e:	e78a      	b.n	8012266 <__ieee754_sqrt+0x66>
 8012350:	4610      	mov	r0, r2
 8012352:	e7f0      	b.n	8012336 <__ieee754_sqrt+0x136>
 8012354:	0049      	lsls	r1, r1, #1
 8012356:	3201      	adds	r2, #1
 8012358:	e7ef      	b.n	801233a <__ieee754_sqrt+0x13a>
 801235a:	4680      	mov	r8, r0
 801235c:	e7bd      	b.n	80122da <__ieee754_sqrt+0xda>
 801235e:	bf00      	nop
 8012360:	7ff00000 	.word	0x7ff00000
 8012364:	00000000 	.word	0x00000000

08012368 <__kernel_cos>:
 8012368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801236c:	ec57 6b10 	vmov	r6, r7, d0
 8012370:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012374:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012378:	ed8d 1b00 	vstr	d1, [sp]
 801237c:	da07      	bge.n	801238e <__kernel_cos+0x26>
 801237e:	ee10 0a10 	vmov	r0, s0
 8012382:	4639      	mov	r1, r7
 8012384:	f7ee fc00 	bl	8000b88 <__aeabi_d2iz>
 8012388:	2800      	cmp	r0, #0
 801238a:	f000 8088 	beq.w	801249e <__kernel_cos+0x136>
 801238e:	4632      	mov	r2, r6
 8012390:	463b      	mov	r3, r7
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ee f947 	bl	8000628 <__aeabi_dmul>
 801239a:	4b51      	ldr	r3, [pc, #324]	; (80124e0 <__kernel_cos+0x178>)
 801239c:	2200      	movs	r2, #0
 801239e:	4604      	mov	r4, r0
 80123a0:	460d      	mov	r5, r1
 80123a2:	f7ee f941 	bl	8000628 <__aeabi_dmul>
 80123a6:	a340      	add	r3, pc, #256	; (adr r3, 80124a8 <__kernel_cos+0x140>)
 80123a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ac:	4682      	mov	sl, r0
 80123ae:	468b      	mov	fp, r1
 80123b0:	4620      	mov	r0, r4
 80123b2:	4629      	mov	r1, r5
 80123b4:	f7ee f938 	bl	8000628 <__aeabi_dmul>
 80123b8:	a33d      	add	r3, pc, #244	; (adr r3, 80124b0 <__kernel_cos+0x148>)
 80123ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123be:	f7ed ff7d 	bl	80002bc <__adddf3>
 80123c2:	4622      	mov	r2, r4
 80123c4:	462b      	mov	r3, r5
 80123c6:	f7ee f92f 	bl	8000628 <__aeabi_dmul>
 80123ca:	a33b      	add	r3, pc, #236	; (adr r3, 80124b8 <__kernel_cos+0x150>)
 80123cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d0:	f7ed ff72 	bl	80002b8 <__aeabi_dsub>
 80123d4:	4622      	mov	r2, r4
 80123d6:	462b      	mov	r3, r5
 80123d8:	f7ee f926 	bl	8000628 <__aeabi_dmul>
 80123dc:	a338      	add	r3, pc, #224	; (adr r3, 80124c0 <__kernel_cos+0x158>)
 80123de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e2:	f7ed ff6b 	bl	80002bc <__adddf3>
 80123e6:	4622      	mov	r2, r4
 80123e8:	462b      	mov	r3, r5
 80123ea:	f7ee f91d 	bl	8000628 <__aeabi_dmul>
 80123ee:	a336      	add	r3, pc, #216	; (adr r3, 80124c8 <__kernel_cos+0x160>)
 80123f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f4:	f7ed ff60 	bl	80002b8 <__aeabi_dsub>
 80123f8:	4622      	mov	r2, r4
 80123fa:	462b      	mov	r3, r5
 80123fc:	f7ee f914 	bl	8000628 <__aeabi_dmul>
 8012400:	a333      	add	r3, pc, #204	; (adr r3, 80124d0 <__kernel_cos+0x168>)
 8012402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012406:	f7ed ff59 	bl	80002bc <__adddf3>
 801240a:	4622      	mov	r2, r4
 801240c:	462b      	mov	r3, r5
 801240e:	f7ee f90b 	bl	8000628 <__aeabi_dmul>
 8012412:	4622      	mov	r2, r4
 8012414:	462b      	mov	r3, r5
 8012416:	f7ee f907 	bl	8000628 <__aeabi_dmul>
 801241a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801241e:	4604      	mov	r4, r0
 8012420:	460d      	mov	r5, r1
 8012422:	4630      	mov	r0, r6
 8012424:	4639      	mov	r1, r7
 8012426:	f7ee f8ff 	bl	8000628 <__aeabi_dmul>
 801242a:	460b      	mov	r3, r1
 801242c:	4602      	mov	r2, r0
 801242e:	4629      	mov	r1, r5
 8012430:	4620      	mov	r0, r4
 8012432:	f7ed ff41 	bl	80002b8 <__aeabi_dsub>
 8012436:	4b2b      	ldr	r3, [pc, #172]	; (80124e4 <__kernel_cos+0x17c>)
 8012438:	4598      	cmp	r8, r3
 801243a:	4606      	mov	r6, r0
 801243c:	460f      	mov	r7, r1
 801243e:	dc10      	bgt.n	8012462 <__kernel_cos+0xfa>
 8012440:	4602      	mov	r2, r0
 8012442:	460b      	mov	r3, r1
 8012444:	4650      	mov	r0, sl
 8012446:	4659      	mov	r1, fp
 8012448:	f7ed ff36 	bl	80002b8 <__aeabi_dsub>
 801244c:	460b      	mov	r3, r1
 801244e:	4926      	ldr	r1, [pc, #152]	; (80124e8 <__kernel_cos+0x180>)
 8012450:	4602      	mov	r2, r0
 8012452:	2000      	movs	r0, #0
 8012454:	f7ed ff30 	bl	80002b8 <__aeabi_dsub>
 8012458:	ec41 0b10 	vmov	d0, r0, r1
 801245c:	b003      	add	sp, #12
 801245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012462:	4b22      	ldr	r3, [pc, #136]	; (80124ec <__kernel_cos+0x184>)
 8012464:	4920      	ldr	r1, [pc, #128]	; (80124e8 <__kernel_cos+0x180>)
 8012466:	4598      	cmp	r8, r3
 8012468:	bfcc      	ite	gt
 801246a:	4d21      	ldrgt	r5, [pc, #132]	; (80124f0 <__kernel_cos+0x188>)
 801246c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012470:	2400      	movs	r4, #0
 8012472:	4622      	mov	r2, r4
 8012474:	462b      	mov	r3, r5
 8012476:	2000      	movs	r0, #0
 8012478:	f7ed ff1e 	bl	80002b8 <__aeabi_dsub>
 801247c:	4622      	mov	r2, r4
 801247e:	4680      	mov	r8, r0
 8012480:	4689      	mov	r9, r1
 8012482:	462b      	mov	r3, r5
 8012484:	4650      	mov	r0, sl
 8012486:	4659      	mov	r1, fp
 8012488:	f7ed ff16 	bl	80002b8 <__aeabi_dsub>
 801248c:	4632      	mov	r2, r6
 801248e:	463b      	mov	r3, r7
 8012490:	f7ed ff12 	bl	80002b8 <__aeabi_dsub>
 8012494:	4602      	mov	r2, r0
 8012496:	460b      	mov	r3, r1
 8012498:	4640      	mov	r0, r8
 801249a:	4649      	mov	r1, r9
 801249c:	e7da      	b.n	8012454 <__kernel_cos+0xec>
 801249e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80124d8 <__kernel_cos+0x170>
 80124a2:	e7db      	b.n	801245c <__kernel_cos+0xf4>
 80124a4:	f3af 8000 	nop.w
 80124a8:	be8838d4 	.word	0xbe8838d4
 80124ac:	bda8fae9 	.word	0xbda8fae9
 80124b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80124b4:	3e21ee9e 	.word	0x3e21ee9e
 80124b8:	809c52ad 	.word	0x809c52ad
 80124bc:	3e927e4f 	.word	0x3e927e4f
 80124c0:	19cb1590 	.word	0x19cb1590
 80124c4:	3efa01a0 	.word	0x3efa01a0
 80124c8:	16c15177 	.word	0x16c15177
 80124cc:	3f56c16c 	.word	0x3f56c16c
 80124d0:	5555554c 	.word	0x5555554c
 80124d4:	3fa55555 	.word	0x3fa55555
 80124d8:	00000000 	.word	0x00000000
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	3fe00000 	.word	0x3fe00000
 80124e4:	3fd33332 	.word	0x3fd33332
 80124e8:	3ff00000 	.word	0x3ff00000
 80124ec:	3fe90000 	.word	0x3fe90000
 80124f0:	3fd20000 	.word	0x3fd20000
 80124f4:	00000000 	.word	0x00000000

080124f8 <__kernel_rem_pio2>:
 80124f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124fc:	ed2d 8b02 	vpush	{d8}
 8012500:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012504:	f112 0f14 	cmn.w	r2, #20
 8012508:	9308      	str	r3, [sp, #32]
 801250a:	9101      	str	r1, [sp, #4]
 801250c:	4bc4      	ldr	r3, [pc, #784]	; (8012820 <__kernel_rem_pio2+0x328>)
 801250e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012510:	900b      	str	r0, [sp, #44]	; 0x2c
 8012512:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012516:	9302      	str	r3, [sp, #8]
 8012518:	9b08      	ldr	r3, [sp, #32]
 801251a:	f103 33ff 	add.w	r3, r3, #4294967295
 801251e:	bfa8      	it	ge
 8012520:	1ed4      	subge	r4, r2, #3
 8012522:	9306      	str	r3, [sp, #24]
 8012524:	bfb2      	itee	lt
 8012526:	2400      	movlt	r4, #0
 8012528:	2318      	movge	r3, #24
 801252a:	fb94 f4f3 	sdivge	r4, r4, r3
 801252e:	f06f 0317 	mvn.w	r3, #23
 8012532:	fb04 3303 	mla	r3, r4, r3, r3
 8012536:	eb03 0a02 	add.w	sl, r3, r2
 801253a:	9b02      	ldr	r3, [sp, #8]
 801253c:	9a06      	ldr	r2, [sp, #24]
 801253e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012810 <__kernel_rem_pio2+0x318>
 8012542:	eb03 0802 	add.w	r8, r3, r2
 8012546:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012548:	1aa7      	subs	r7, r4, r2
 801254a:	ae22      	add	r6, sp, #136	; 0x88
 801254c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012550:	2500      	movs	r5, #0
 8012552:	4545      	cmp	r5, r8
 8012554:	dd13      	ble.n	801257e <__kernel_rem_pio2+0x86>
 8012556:	9b08      	ldr	r3, [sp, #32]
 8012558:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012810 <__kernel_rem_pio2+0x318>
 801255c:	aa22      	add	r2, sp, #136	; 0x88
 801255e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012562:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012566:	f04f 0800 	mov.w	r8, #0
 801256a:	9b02      	ldr	r3, [sp, #8]
 801256c:	4598      	cmp	r8, r3
 801256e:	dc2f      	bgt.n	80125d0 <__kernel_rem_pio2+0xd8>
 8012570:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012574:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012578:	462f      	mov	r7, r5
 801257a:	2600      	movs	r6, #0
 801257c:	e01b      	b.n	80125b6 <__kernel_rem_pio2+0xbe>
 801257e:	42ef      	cmn	r7, r5
 8012580:	d407      	bmi.n	8012592 <__kernel_rem_pio2+0x9a>
 8012582:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012586:	f7ed ffe5 	bl	8000554 <__aeabi_i2d>
 801258a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801258e:	3501      	adds	r5, #1
 8012590:	e7df      	b.n	8012552 <__kernel_rem_pio2+0x5a>
 8012592:	ec51 0b18 	vmov	r0, r1, d8
 8012596:	e7f8      	b.n	801258a <__kernel_rem_pio2+0x92>
 8012598:	e9d7 2300 	ldrd	r2, r3, [r7]
 801259c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80125a0:	f7ee f842 	bl	8000628 <__aeabi_dmul>
 80125a4:	4602      	mov	r2, r0
 80125a6:	460b      	mov	r3, r1
 80125a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80125ac:	f7ed fe86 	bl	80002bc <__adddf3>
 80125b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80125b4:	3601      	adds	r6, #1
 80125b6:	9b06      	ldr	r3, [sp, #24]
 80125b8:	429e      	cmp	r6, r3
 80125ba:	f1a7 0708 	sub.w	r7, r7, #8
 80125be:	ddeb      	ble.n	8012598 <__kernel_rem_pio2+0xa0>
 80125c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80125c4:	f108 0801 	add.w	r8, r8, #1
 80125c8:	ecab 7b02 	vstmia	fp!, {d7}
 80125cc:	3508      	adds	r5, #8
 80125ce:	e7cc      	b.n	801256a <__kernel_rem_pio2+0x72>
 80125d0:	9b02      	ldr	r3, [sp, #8]
 80125d2:	aa0e      	add	r2, sp, #56	; 0x38
 80125d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125d8:	930d      	str	r3, [sp, #52]	; 0x34
 80125da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80125dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80125e0:	9c02      	ldr	r4, [sp, #8]
 80125e2:	930c      	str	r3, [sp, #48]	; 0x30
 80125e4:	00e3      	lsls	r3, r4, #3
 80125e6:	930a      	str	r3, [sp, #40]	; 0x28
 80125e8:	ab9a      	add	r3, sp, #616	; 0x268
 80125ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80125f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80125f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80125f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80125fc:	46c3      	mov	fp, r8
 80125fe:	46a1      	mov	r9, r4
 8012600:	f1b9 0f00 	cmp.w	r9, #0
 8012604:	f1a5 0508 	sub.w	r5, r5, #8
 8012608:	dc77      	bgt.n	80126fa <__kernel_rem_pio2+0x202>
 801260a:	ec47 6b10 	vmov	d0, r6, r7
 801260e:	4650      	mov	r0, sl
 8012610:	f000 fdee 	bl	80131f0 <scalbn>
 8012614:	ec57 6b10 	vmov	r6, r7, d0
 8012618:	2200      	movs	r2, #0
 801261a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801261e:	ee10 0a10 	vmov	r0, s0
 8012622:	4639      	mov	r1, r7
 8012624:	f7ee f800 	bl	8000628 <__aeabi_dmul>
 8012628:	ec41 0b10 	vmov	d0, r0, r1
 801262c:	f000 fd58 	bl	80130e0 <floor>
 8012630:	4b7c      	ldr	r3, [pc, #496]	; (8012824 <__kernel_rem_pio2+0x32c>)
 8012632:	ec51 0b10 	vmov	r0, r1, d0
 8012636:	2200      	movs	r2, #0
 8012638:	f7ed fff6 	bl	8000628 <__aeabi_dmul>
 801263c:	4602      	mov	r2, r0
 801263e:	460b      	mov	r3, r1
 8012640:	4630      	mov	r0, r6
 8012642:	4639      	mov	r1, r7
 8012644:	f7ed fe38 	bl	80002b8 <__aeabi_dsub>
 8012648:	460f      	mov	r7, r1
 801264a:	4606      	mov	r6, r0
 801264c:	f7ee fa9c 	bl	8000b88 <__aeabi_d2iz>
 8012650:	9004      	str	r0, [sp, #16]
 8012652:	f7ed ff7f 	bl	8000554 <__aeabi_i2d>
 8012656:	4602      	mov	r2, r0
 8012658:	460b      	mov	r3, r1
 801265a:	4630      	mov	r0, r6
 801265c:	4639      	mov	r1, r7
 801265e:	f7ed fe2b 	bl	80002b8 <__aeabi_dsub>
 8012662:	f1ba 0f00 	cmp.w	sl, #0
 8012666:	4606      	mov	r6, r0
 8012668:	460f      	mov	r7, r1
 801266a:	dd6d      	ble.n	8012748 <__kernel_rem_pio2+0x250>
 801266c:	1e62      	subs	r2, r4, #1
 801266e:	ab0e      	add	r3, sp, #56	; 0x38
 8012670:	9d04      	ldr	r5, [sp, #16]
 8012672:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012676:	f1ca 0118 	rsb	r1, sl, #24
 801267a:	fa40 f301 	asr.w	r3, r0, r1
 801267e:	441d      	add	r5, r3
 8012680:	408b      	lsls	r3, r1
 8012682:	1ac0      	subs	r0, r0, r3
 8012684:	ab0e      	add	r3, sp, #56	; 0x38
 8012686:	9504      	str	r5, [sp, #16]
 8012688:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801268c:	f1ca 0317 	rsb	r3, sl, #23
 8012690:	fa40 fb03 	asr.w	fp, r0, r3
 8012694:	f1bb 0f00 	cmp.w	fp, #0
 8012698:	dd65      	ble.n	8012766 <__kernel_rem_pio2+0x26e>
 801269a:	9b04      	ldr	r3, [sp, #16]
 801269c:	2200      	movs	r2, #0
 801269e:	3301      	adds	r3, #1
 80126a0:	9304      	str	r3, [sp, #16]
 80126a2:	4615      	mov	r5, r2
 80126a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80126a8:	4294      	cmp	r4, r2
 80126aa:	f300 809c 	bgt.w	80127e6 <__kernel_rem_pio2+0x2ee>
 80126ae:	f1ba 0f00 	cmp.w	sl, #0
 80126b2:	dd07      	ble.n	80126c4 <__kernel_rem_pio2+0x1cc>
 80126b4:	f1ba 0f01 	cmp.w	sl, #1
 80126b8:	f000 80c0 	beq.w	801283c <__kernel_rem_pio2+0x344>
 80126bc:	f1ba 0f02 	cmp.w	sl, #2
 80126c0:	f000 80c6 	beq.w	8012850 <__kernel_rem_pio2+0x358>
 80126c4:	f1bb 0f02 	cmp.w	fp, #2
 80126c8:	d14d      	bne.n	8012766 <__kernel_rem_pio2+0x26e>
 80126ca:	4632      	mov	r2, r6
 80126cc:	463b      	mov	r3, r7
 80126ce:	4956      	ldr	r1, [pc, #344]	; (8012828 <__kernel_rem_pio2+0x330>)
 80126d0:	2000      	movs	r0, #0
 80126d2:	f7ed fdf1 	bl	80002b8 <__aeabi_dsub>
 80126d6:	4606      	mov	r6, r0
 80126d8:	460f      	mov	r7, r1
 80126da:	2d00      	cmp	r5, #0
 80126dc:	d043      	beq.n	8012766 <__kernel_rem_pio2+0x26e>
 80126de:	4650      	mov	r0, sl
 80126e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012818 <__kernel_rem_pio2+0x320>
 80126e4:	f000 fd84 	bl	80131f0 <scalbn>
 80126e8:	4630      	mov	r0, r6
 80126ea:	4639      	mov	r1, r7
 80126ec:	ec53 2b10 	vmov	r2, r3, d0
 80126f0:	f7ed fde2 	bl	80002b8 <__aeabi_dsub>
 80126f4:	4606      	mov	r6, r0
 80126f6:	460f      	mov	r7, r1
 80126f8:	e035      	b.n	8012766 <__kernel_rem_pio2+0x26e>
 80126fa:	4b4c      	ldr	r3, [pc, #304]	; (801282c <__kernel_rem_pio2+0x334>)
 80126fc:	2200      	movs	r2, #0
 80126fe:	4630      	mov	r0, r6
 8012700:	4639      	mov	r1, r7
 8012702:	f7ed ff91 	bl	8000628 <__aeabi_dmul>
 8012706:	f7ee fa3f 	bl	8000b88 <__aeabi_d2iz>
 801270a:	f7ed ff23 	bl	8000554 <__aeabi_i2d>
 801270e:	4602      	mov	r2, r0
 8012710:	460b      	mov	r3, r1
 8012712:	ec43 2b18 	vmov	d8, r2, r3
 8012716:	4b46      	ldr	r3, [pc, #280]	; (8012830 <__kernel_rem_pio2+0x338>)
 8012718:	2200      	movs	r2, #0
 801271a:	f7ed ff85 	bl	8000628 <__aeabi_dmul>
 801271e:	4602      	mov	r2, r0
 8012720:	460b      	mov	r3, r1
 8012722:	4630      	mov	r0, r6
 8012724:	4639      	mov	r1, r7
 8012726:	f7ed fdc7 	bl	80002b8 <__aeabi_dsub>
 801272a:	f7ee fa2d 	bl	8000b88 <__aeabi_d2iz>
 801272e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012732:	f84b 0b04 	str.w	r0, [fp], #4
 8012736:	ec51 0b18 	vmov	r0, r1, d8
 801273a:	f7ed fdbf 	bl	80002bc <__adddf3>
 801273e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012742:	4606      	mov	r6, r0
 8012744:	460f      	mov	r7, r1
 8012746:	e75b      	b.n	8012600 <__kernel_rem_pio2+0x108>
 8012748:	d106      	bne.n	8012758 <__kernel_rem_pio2+0x260>
 801274a:	1e63      	subs	r3, r4, #1
 801274c:	aa0e      	add	r2, sp, #56	; 0x38
 801274e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012752:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8012756:	e79d      	b.n	8012694 <__kernel_rem_pio2+0x19c>
 8012758:	4b36      	ldr	r3, [pc, #216]	; (8012834 <__kernel_rem_pio2+0x33c>)
 801275a:	2200      	movs	r2, #0
 801275c:	f7ee f9ea 	bl	8000b34 <__aeabi_dcmpge>
 8012760:	2800      	cmp	r0, #0
 8012762:	d13d      	bne.n	80127e0 <__kernel_rem_pio2+0x2e8>
 8012764:	4683      	mov	fp, r0
 8012766:	2200      	movs	r2, #0
 8012768:	2300      	movs	r3, #0
 801276a:	4630      	mov	r0, r6
 801276c:	4639      	mov	r1, r7
 801276e:	f7ee f9c3 	bl	8000af8 <__aeabi_dcmpeq>
 8012772:	2800      	cmp	r0, #0
 8012774:	f000 80c0 	beq.w	80128f8 <__kernel_rem_pio2+0x400>
 8012778:	1e65      	subs	r5, r4, #1
 801277a:	462b      	mov	r3, r5
 801277c:	2200      	movs	r2, #0
 801277e:	9902      	ldr	r1, [sp, #8]
 8012780:	428b      	cmp	r3, r1
 8012782:	da6c      	bge.n	801285e <__kernel_rem_pio2+0x366>
 8012784:	2a00      	cmp	r2, #0
 8012786:	f000 8089 	beq.w	801289c <__kernel_rem_pio2+0x3a4>
 801278a:	ab0e      	add	r3, sp, #56	; 0x38
 801278c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012790:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012794:	2b00      	cmp	r3, #0
 8012796:	f000 80ad 	beq.w	80128f4 <__kernel_rem_pio2+0x3fc>
 801279a:	4650      	mov	r0, sl
 801279c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012818 <__kernel_rem_pio2+0x320>
 80127a0:	f000 fd26 	bl	80131f0 <scalbn>
 80127a4:	ab9a      	add	r3, sp, #616	; 0x268
 80127a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80127aa:	ec57 6b10 	vmov	r6, r7, d0
 80127ae:	00ec      	lsls	r4, r5, #3
 80127b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80127b4:	46aa      	mov	sl, r5
 80127b6:	f1ba 0f00 	cmp.w	sl, #0
 80127ba:	f280 80d6 	bge.w	801296a <__kernel_rem_pio2+0x472>
 80127be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012810 <__kernel_rem_pio2+0x318>
 80127c2:	462e      	mov	r6, r5
 80127c4:	2e00      	cmp	r6, #0
 80127c6:	f2c0 8104 	blt.w	80129d2 <__kernel_rem_pio2+0x4da>
 80127ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80127cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80127d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012838 <__kernel_rem_pio2+0x340>
 80127d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80127d8:	f04f 0800 	mov.w	r8, #0
 80127dc:	1baf      	subs	r7, r5, r6
 80127de:	e0ea      	b.n	80129b6 <__kernel_rem_pio2+0x4be>
 80127e0:	f04f 0b02 	mov.w	fp, #2
 80127e4:	e759      	b.n	801269a <__kernel_rem_pio2+0x1a2>
 80127e6:	f8d8 3000 	ldr.w	r3, [r8]
 80127ea:	b955      	cbnz	r5, 8012802 <__kernel_rem_pio2+0x30a>
 80127ec:	b123      	cbz	r3, 80127f8 <__kernel_rem_pio2+0x300>
 80127ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80127f2:	f8c8 3000 	str.w	r3, [r8]
 80127f6:	2301      	movs	r3, #1
 80127f8:	3201      	adds	r2, #1
 80127fa:	f108 0804 	add.w	r8, r8, #4
 80127fe:	461d      	mov	r5, r3
 8012800:	e752      	b.n	80126a8 <__kernel_rem_pio2+0x1b0>
 8012802:	1acb      	subs	r3, r1, r3
 8012804:	f8c8 3000 	str.w	r3, [r8]
 8012808:	462b      	mov	r3, r5
 801280a:	e7f5      	b.n	80127f8 <__kernel_rem_pio2+0x300>
 801280c:	f3af 8000 	nop.w
	...
 801281c:	3ff00000 	.word	0x3ff00000
 8012820:	08013fe0 	.word	0x08013fe0
 8012824:	40200000 	.word	0x40200000
 8012828:	3ff00000 	.word	0x3ff00000
 801282c:	3e700000 	.word	0x3e700000
 8012830:	41700000 	.word	0x41700000
 8012834:	3fe00000 	.word	0x3fe00000
 8012838:	08013fa0 	.word	0x08013fa0
 801283c:	1e62      	subs	r2, r4, #1
 801283e:	ab0e      	add	r3, sp, #56	; 0x38
 8012840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012844:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012848:	a90e      	add	r1, sp, #56	; 0x38
 801284a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801284e:	e739      	b.n	80126c4 <__kernel_rem_pio2+0x1cc>
 8012850:	1e62      	subs	r2, r4, #1
 8012852:	ab0e      	add	r3, sp, #56	; 0x38
 8012854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012858:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801285c:	e7f4      	b.n	8012848 <__kernel_rem_pio2+0x350>
 801285e:	a90e      	add	r1, sp, #56	; 0x38
 8012860:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012864:	3b01      	subs	r3, #1
 8012866:	430a      	orrs	r2, r1
 8012868:	e789      	b.n	801277e <__kernel_rem_pio2+0x286>
 801286a:	3301      	adds	r3, #1
 801286c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012870:	2900      	cmp	r1, #0
 8012872:	d0fa      	beq.n	801286a <__kernel_rem_pio2+0x372>
 8012874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012876:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801287a:	446a      	add	r2, sp
 801287c:	3a98      	subs	r2, #152	; 0x98
 801287e:	920a      	str	r2, [sp, #40]	; 0x28
 8012880:	9a08      	ldr	r2, [sp, #32]
 8012882:	18e3      	adds	r3, r4, r3
 8012884:	18a5      	adds	r5, r4, r2
 8012886:	aa22      	add	r2, sp, #136	; 0x88
 8012888:	f104 0801 	add.w	r8, r4, #1
 801288c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012890:	9304      	str	r3, [sp, #16]
 8012892:	9b04      	ldr	r3, [sp, #16]
 8012894:	4543      	cmp	r3, r8
 8012896:	da04      	bge.n	80128a2 <__kernel_rem_pio2+0x3aa>
 8012898:	461c      	mov	r4, r3
 801289a:	e6a3      	b.n	80125e4 <__kernel_rem_pio2+0xec>
 801289c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801289e:	2301      	movs	r3, #1
 80128a0:	e7e4      	b.n	801286c <__kernel_rem_pio2+0x374>
 80128a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80128a8:	f7ed fe54 	bl	8000554 <__aeabi_i2d>
 80128ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 80128b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128b2:	46ab      	mov	fp, r5
 80128b4:	461c      	mov	r4, r3
 80128b6:	f04f 0900 	mov.w	r9, #0
 80128ba:	2600      	movs	r6, #0
 80128bc:	2700      	movs	r7, #0
 80128be:	9b06      	ldr	r3, [sp, #24]
 80128c0:	4599      	cmp	r9, r3
 80128c2:	dd06      	ble.n	80128d2 <__kernel_rem_pio2+0x3da>
 80128c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80128ca:	f108 0801 	add.w	r8, r8, #1
 80128ce:	930a      	str	r3, [sp, #40]	; 0x28
 80128d0:	e7df      	b.n	8012892 <__kernel_rem_pio2+0x39a>
 80128d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80128d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80128da:	f7ed fea5 	bl	8000628 <__aeabi_dmul>
 80128de:	4602      	mov	r2, r0
 80128e0:	460b      	mov	r3, r1
 80128e2:	4630      	mov	r0, r6
 80128e4:	4639      	mov	r1, r7
 80128e6:	f7ed fce9 	bl	80002bc <__adddf3>
 80128ea:	f109 0901 	add.w	r9, r9, #1
 80128ee:	4606      	mov	r6, r0
 80128f0:	460f      	mov	r7, r1
 80128f2:	e7e4      	b.n	80128be <__kernel_rem_pio2+0x3c6>
 80128f4:	3d01      	subs	r5, #1
 80128f6:	e748      	b.n	801278a <__kernel_rem_pio2+0x292>
 80128f8:	ec47 6b10 	vmov	d0, r6, r7
 80128fc:	f1ca 0000 	rsb	r0, sl, #0
 8012900:	f000 fc76 	bl	80131f0 <scalbn>
 8012904:	ec57 6b10 	vmov	r6, r7, d0
 8012908:	4ba0      	ldr	r3, [pc, #640]	; (8012b8c <__kernel_rem_pio2+0x694>)
 801290a:	ee10 0a10 	vmov	r0, s0
 801290e:	2200      	movs	r2, #0
 8012910:	4639      	mov	r1, r7
 8012912:	f7ee f90f 	bl	8000b34 <__aeabi_dcmpge>
 8012916:	b1f8      	cbz	r0, 8012958 <__kernel_rem_pio2+0x460>
 8012918:	4b9d      	ldr	r3, [pc, #628]	; (8012b90 <__kernel_rem_pio2+0x698>)
 801291a:	2200      	movs	r2, #0
 801291c:	4630      	mov	r0, r6
 801291e:	4639      	mov	r1, r7
 8012920:	f7ed fe82 	bl	8000628 <__aeabi_dmul>
 8012924:	f7ee f930 	bl	8000b88 <__aeabi_d2iz>
 8012928:	4680      	mov	r8, r0
 801292a:	f7ed fe13 	bl	8000554 <__aeabi_i2d>
 801292e:	4b97      	ldr	r3, [pc, #604]	; (8012b8c <__kernel_rem_pio2+0x694>)
 8012930:	2200      	movs	r2, #0
 8012932:	f7ed fe79 	bl	8000628 <__aeabi_dmul>
 8012936:	460b      	mov	r3, r1
 8012938:	4602      	mov	r2, r0
 801293a:	4639      	mov	r1, r7
 801293c:	4630      	mov	r0, r6
 801293e:	f7ed fcbb 	bl	80002b8 <__aeabi_dsub>
 8012942:	f7ee f921 	bl	8000b88 <__aeabi_d2iz>
 8012946:	1c65      	adds	r5, r4, #1
 8012948:	ab0e      	add	r3, sp, #56	; 0x38
 801294a:	f10a 0a18 	add.w	sl, sl, #24
 801294e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012952:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012956:	e720      	b.n	801279a <__kernel_rem_pio2+0x2a2>
 8012958:	4630      	mov	r0, r6
 801295a:	4639      	mov	r1, r7
 801295c:	f7ee f914 	bl	8000b88 <__aeabi_d2iz>
 8012960:	ab0e      	add	r3, sp, #56	; 0x38
 8012962:	4625      	mov	r5, r4
 8012964:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012968:	e717      	b.n	801279a <__kernel_rem_pio2+0x2a2>
 801296a:	ab0e      	add	r3, sp, #56	; 0x38
 801296c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012970:	f7ed fdf0 	bl	8000554 <__aeabi_i2d>
 8012974:	4632      	mov	r2, r6
 8012976:	463b      	mov	r3, r7
 8012978:	f7ed fe56 	bl	8000628 <__aeabi_dmul>
 801297c:	4b84      	ldr	r3, [pc, #528]	; (8012b90 <__kernel_rem_pio2+0x698>)
 801297e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8012982:	2200      	movs	r2, #0
 8012984:	4630      	mov	r0, r6
 8012986:	4639      	mov	r1, r7
 8012988:	f7ed fe4e 	bl	8000628 <__aeabi_dmul>
 801298c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012990:	4606      	mov	r6, r0
 8012992:	460f      	mov	r7, r1
 8012994:	e70f      	b.n	80127b6 <__kernel_rem_pio2+0x2be>
 8012996:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801299a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801299e:	f7ed fe43 	bl	8000628 <__aeabi_dmul>
 80129a2:	4602      	mov	r2, r0
 80129a4:	460b      	mov	r3, r1
 80129a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129aa:	f7ed fc87 	bl	80002bc <__adddf3>
 80129ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80129b2:	f108 0801 	add.w	r8, r8, #1
 80129b6:	9b02      	ldr	r3, [sp, #8]
 80129b8:	4598      	cmp	r8, r3
 80129ba:	dc01      	bgt.n	80129c0 <__kernel_rem_pio2+0x4c8>
 80129bc:	45b8      	cmp	r8, r7
 80129be:	ddea      	ble.n	8012996 <__kernel_rem_pio2+0x49e>
 80129c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80129c4:	ab4a      	add	r3, sp, #296	; 0x128
 80129c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80129ca:	ed87 7b00 	vstr	d7, [r7]
 80129ce:	3e01      	subs	r6, #1
 80129d0:	e6f8      	b.n	80127c4 <__kernel_rem_pio2+0x2cc>
 80129d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80129d4:	2b02      	cmp	r3, #2
 80129d6:	dc0b      	bgt.n	80129f0 <__kernel_rem_pio2+0x4f8>
 80129d8:	2b00      	cmp	r3, #0
 80129da:	dc35      	bgt.n	8012a48 <__kernel_rem_pio2+0x550>
 80129dc:	d059      	beq.n	8012a92 <__kernel_rem_pio2+0x59a>
 80129de:	9b04      	ldr	r3, [sp, #16]
 80129e0:	f003 0007 	and.w	r0, r3, #7
 80129e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80129e8:	ecbd 8b02 	vpop	{d8}
 80129ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	d1f3      	bne.n	80129de <__kernel_rem_pio2+0x4e6>
 80129f6:	ab4a      	add	r3, sp, #296	; 0x128
 80129f8:	4423      	add	r3, r4
 80129fa:	9306      	str	r3, [sp, #24]
 80129fc:	461c      	mov	r4, r3
 80129fe:	469a      	mov	sl, r3
 8012a00:	9502      	str	r5, [sp, #8]
 8012a02:	9b02      	ldr	r3, [sp, #8]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f1aa 0a08 	sub.w	sl, sl, #8
 8012a0a:	dc6b      	bgt.n	8012ae4 <__kernel_rem_pio2+0x5ec>
 8012a0c:	46aa      	mov	sl, r5
 8012a0e:	f1ba 0f01 	cmp.w	sl, #1
 8012a12:	f1a4 0408 	sub.w	r4, r4, #8
 8012a16:	f300 8085 	bgt.w	8012b24 <__kernel_rem_pio2+0x62c>
 8012a1a:	9c06      	ldr	r4, [sp, #24]
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	3408      	adds	r4, #8
 8012a20:	2100      	movs	r1, #0
 8012a22:	2d01      	cmp	r5, #1
 8012a24:	f300 809d 	bgt.w	8012b62 <__kernel_rem_pio2+0x66a>
 8012a28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012a2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012a30:	f1bb 0f00 	cmp.w	fp, #0
 8012a34:	f040 809b 	bne.w	8012b6e <__kernel_rem_pio2+0x676>
 8012a38:	9b01      	ldr	r3, [sp, #4]
 8012a3a:	e9c3 5600 	strd	r5, r6, [r3]
 8012a3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8012a42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012a46:	e7ca      	b.n	80129de <__kernel_rem_pio2+0x4e6>
 8012a48:	3408      	adds	r4, #8
 8012a4a:	ab4a      	add	r3, sp, #296	; 0x128
 8012a4c:	441c      	add	r4, r3
 8012a4e:	462e      	mov	r6, r5
 8012a50:	2000      	movs	r0, #0
 8012a52:	2100      	movs	r1, #0
 8012a54:	2e00      	cmp	r6, #0
 8012a56:	da36      	bge.n	8012ac6 <__kernel_rem_pio2+0x5ce>
 8012a58:	f1bb 0f00 	cmp.w	fp, #0
 8012a5c:	d039      	beq.n	8012ad2 <__kernel_rem_pio2+0x5da>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a64:	9c01      	ldr	r4, [sp, #4]
 8012a66:	e9c4 2300 	strd	r2, r3, [r4]
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012a72:	f7ed fc21 	bl	80002b8 <__aeabi_dsub>
 8012a76:	ae4c      	add	r6, sp, #304	; 0x130
 8012a78:	2401      	movs	r4, #1
 8012a7a:	42a5      	cmp	r5, r4
 8012a7c:	da2c      	bge.n	8012ad8 <__kernel_rem_pio2+0x5e0>
 8012a7e:	f1bb 0f00 	cmp.w	fp, #0
 8012a82:	d002      	beq.n	8012a8a <__kernel_rem_pio2+0x592>
 8012a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a88:	4619      	mov	r1, r3
 8012a8a:	9b01      	ldr	r3, [sp, #4]
 8012a8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012a90:	e7a5      	b.n	80129de <__kernel_rem_pio2+0x4e6>
 8012a92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8012a96:	eb0d 0403 	add.w	r4, sp, r3
 8012a9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	2d00      	cmp	r5, #0
 8012aa4:	da09      	bge.n	8012aba <__kernel_rem_pio2+0x5c2>
 8012aa6:	f1bb 0f00 	cmp.w	fp, #0
 8012aaa:	d002      	beq.n	8012ab2 <__kernel_rem_pio2+0x5ba>
 8012aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	9b01      	ldr	r3, [sp, #4]
 8012ab4:	e9c3 0100 	strd	r0, r1, [r3]
 8012ab8:	e791      	b.n	80129de <__kernel_rem_pio2+0x4e6>
 8012aba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012abe:	f7ed fbfd 	bl	80002bc <__adddf3>
 8012ac2:	3d01      	subs	r5, #1
 8012ac4:	e7ed      	b.n	8012aa2 <__kernel_rem_pio2+0x5aa>
 8012ac6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012aca:	f7ed fbf7 	bl	80002bc <__adddf3>
 8012ace:	3e01      	subs	r6, #1
 8012ad0:	e7c0      	b.n	8012a54 <__kernel_rem_pio2+0x55c>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	e7c5      	b.n	8012a64 <__kernel_rem_pio2+0x56c>
 8012ad8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012adc:	f7ed fbee 	bl	80002bc <__adddf3>
 8012ae0:	3401      	adds	r4, #1
 8012ae2:	e7ca      	b.n	8012a7a <__kernel_rem_pio2+0x582>
 8012ae4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ae8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012aec:	9b02      	ldr	r3, [sp, #8]
 8012aee:	3b01      	subs	r3, #1
 8012af0:	9302      	str	r3, [sp, #8]
 8012af2:	4632      	mov	r2, r6
 8012af4:	463b      	mov	r3, r7
 8012af6:	4640      	mov	r0, r8
 8012af8:	4649      	mov	r1, r9
 8012afa:	f7ed fbdf 	bl	80002bc <__adddf3>
 8012afe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b02:	4602      	mov	r2, r0
 8012b04:	460b      	mov	r3, r1
 8012b06:	4640      	mov	r0, r8
 8012b08:	4649      	mov	r1, r9
 8012b0a:	f7ed fbd5 	bl	80002b8 <__aeabi_dsub>
 8012b0e:	4632      	mov	r2, r6
 8012b10:	463b      	mov	r3, r7
 8012b12:	f7ed fbd3 	bl	80002bc <__adddf3>
 8012b16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012b1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b1e:	ed8a 7b00 	vstr	d7, [sl]
 8012b22:	e76e      	b.n	8012a02 <__kernel_rem_pio2+0x50a>
 8012b24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012b28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012b2c:	4640      	mov	r0, r8
 8012b2e:	4632      	mov	r2, r6
 8012b30:	463b      	mov	r3, r7
 8012b32:	4649      	mov	r1, r9
 8012b34:	f7ed fbc2 	bl	80002bc <__adddf3>
 8012b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4640      	mov	r0, r8
 8012b42:	4649      	mov	r1, r9
 8012b44:	f7ed fbb8 	bl	80002b8 <__aeabi_dsub>
 8012b48:	4632      	mov	r2, r6
 8012b4a:	463b      	mov	r3, r7
 8012b4c:	f7ed fbb6 	bl	80002bc <__adddf3>
 8012b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012b58:	ed84 7b00 	vstr	d7, [r4]
 8012b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b60:	e755      	b.n	8012a0e <__kernel_rem_pio2+0x516>
 8012b62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b66:	f7ed fba9 	bl	80002bc <__adddf3>
 8012b6a:	3d01      	subs	r5, #1
 8012b6c:	e759      	b.n	8012a22 <__kernel_rem_pio2+0x52a>
 8012b6e:	9b01      	ldr	r3, [sp, #4]
 8012b70:	9a01      	ldr	r2, [sp, #4]
 8012b72:	601d      	str	r5, [r3, #0]
 8012b74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8012b78:	605c      	str	r4, [r3, #4]
 8012b7a:	609f      	str	r7, [r3, #8]
 8012b7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012b80:	60d3      	str	r3, [r2, #12]
 8012b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b86:	6110      	str	r0, [r2, #16]
 8012b88:	6153      	str	r3, [r2, #20]
 8012b8a:	e728      	b.n	80129de <__kernel_rem_pio2+0x4e6>
 8012b8c:	41700000 	.word	0x41700000
 8012b90:	3e700000 	.word	0x3e700000
 8012b94:	00000000 	.word	0x00000000

08012b98 <__kernel_sin>:
 8012b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	ed2d 8b04 	vpush	{d8-d9}
 8012ba0:	eeb0 8a41 	vmov.f32	s16, s2
 8012ba4:	eef0 8a61 	vmov.f32	s17, s3
 8012ba8:	ec55 4b10 	vmov	r4, r5, d0
 8012bac:	b083      	sub	sp, #12
 8012bae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012bb6:	9001      	str	r0, [sp, #4]
 8012bb8:	da06      	bge.n	8012bc8 <__kernel_sin+0x30>
 8012bba:	ee10 0a10 	vmov	r0, s0
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	f7ed ffe2 	bl	8000b88 <__aeabi_d2iz>
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d051      	beq.n	8012c6c <__kernel_sin+0xd4>
 8012bc8:	4622      	mov	r2, r4
 8012bca:	462b      	mov	r3, r5
 8012bcc:	4620      	mov	r0, r4
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7ed fd2a 	bl	8000628 <__aeabi_dmul>
 8012bd4:	4682      	mov	sl, r0
 8012bd6:	468b      	mov	fp, r1
 8012bd8:	4602      	mov	r2, r0
 8012bda:	460b      	mov	r3, r1
 8012bdc:	4620      	mov	r0, r4
 8012bde:	4629      	mov	r1, r5
 8012be0:	f7ed fd22 	bl	8000628 <__aeabi_dmul>
 8012be4:	a341      	add	r3, pc, #260	; (adr r3, 8012cec <__kernel_sin+0x154>)
 8012be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bea:	4680      	mov	r8, r0
 8012bec:	4689      	mov	r9, r1
 8012bee:	4650      	mov	r0, sl
 8012bf0:	4659      	mov	r1, fp
 8012bf2:	f7ed fd19 	bl	8000628 <__aeabi_dmul>
 8012bf6:	a33f      	add	r3, pc, #252	; (adr r3, 8012cf4 <__kernel_sin+0x15c>)
 8012bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bfc:	f7ed fb5c 	bl	80002b8 <__aeabi_dsub>
 8012c00:	4652      	mov	r2, sl
 8012c02:	465b      	mov	r3, fp
 8012c04:	f7ed fd10 	bl	8000628 <__aeabi_dmul>
 8012c08:	a33c      	add	r3, pc, #240	; (adr r3, 8012cfc <__kernel_sin+0x164>)
 8012c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0e:	f7ed fb55 	bl	80002bc <__adddf3>
 8012c12:	4652      	mov	r2, sl
 8012c14:	465b      	mov	r3, fp
 8012c16:	f7ed fd07 	bl	8000628 <__aeabi_dmul>
 8012c1a:	a33a      	add	r3, pc, #232	; (adr r3, 8012d04 <__kernel_sin+0x16c>)
 8012c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c20:	f7ed fb4a 	bl	80002b8 <__aeabi_dsub>
 8012c24:	4652      	mov	r2, sl
 8012c26:	465b      	mov	r3, fp
 8012c28:	f7ed fcfe 	bl	8000628 <__aeabi_dmul>
 8012c2c:	a337      	add	r3, pc, #220	; (adr r3, 8012d0c <__kernel_sin+0x174>)
 8012c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c32:	f7ed fb43 	bl	80002bc <__adddf3>
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	4606      	mov	r6, r0
 8012c3a:	460f      	mov	r7, r1
 8012c3c:	b9eb      	cbnz	r3, 8012c7a <__kernel_sin+0xe2>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	460b      	mov	r3, r1
 8012c42:	4650      	mov	r0, sl
 8012c44:	4659      	mov	r1, fp
 8012c46:	f7ed fcef 	bl	8000628 <__aeabi_dmul>
 8012c4a:	a325      	add	r3, pc, #148	; (adr r3, 8012ce0 <__kernel_sin+0x148>)
 8012c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c50:	f7ed fb32 	bl	80002b8 <__aeabi_dsub>
 8012c54:	4642      	mov	r2, r8
 8012c56:	464b      	mov	r3, r9
 8012c58:	f7ed fce6 	bl	8000628 <__aeabi_dmul>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4620      	mov	r0, r4
 8012c62:	4629      	mov	r1, r5
 8012c64:	f7ed fb2a 	bl	80002bc <__adddf3>
 8012c68:	4604      	mov	r4, r0
 8012c6a:	460d      	mov	r5, r1
 8012c6c:	ec45 4b10 	vmov	d0, r4, r5
 8012c70:	b003      	add	sp, #12
 8012c72:	ecbd 8b04 	vpop	{d8-d9}
 8012c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c7a:	4b1b      	ldr	r3, [pc, #108]	; (8012ce8 <__kernel_sin+0x150>)
 8012c7c:	ec51 0b18 	vmov	r0, r1, d8
 8012c80:	2200      	movs	r2, #0
 8012c82:	f7ed fcd1 	bl	8000628 <__aeabi_dmul>
 8012c86:	4632      	mov	r2, r6
 8012c88:	ec41 0b19 	vmov	d9, r0, r1
 8012c8c:	463b      	mov	r3, r7
 8012c8e:	4640      	mov	r0, r8
 8012c90:	4649      	mov	r1, r9
 8012c92:	f7ed fcc9 	bl	8000628 <__aeabi_dmul>
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
 8012c9a:	ec51 0b19 	vmov	r0, r1, d9
 8012c9e:	f7ed fb0b 	bl	80002b8 <__aeabi_dsub>
 8012ca2:	4652      	mov	r2, sl
 8012ca4:	465b      	mov	r3, fp
 8012ca6:	f7ed fcbf 	bl	8000628 <__aeabi_dmul>
 8012caa:	ec53 2b18 	vmov	r2, r3, d8
 8012cae:	f7ed fb03 	bl	80002b8 <__aeabi_dsub>
 8012cb2:	a30b      	add	r3, pc, #44	; (adr r3, 8012ce0 <__kernel_sin+0x148>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	4640      	mov	r0, r8
 8012cbe:	4649      	mov	r1, r9
 8012cc0:	f7ed fcb2 	bl	8000628 <__aeabi_dmul>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	4630      	mov	r0, r6
 8012cca:	4639      	mov	r1, r7
 8012ccc:	f7ed faf6 	bl	80002bc <__adddf3>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	460b      	mov	r3, r1
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	4629      	mov	r1, r5
 8012cd8:	f7ed faee 	bl	80002b8 <__aeabi_dsub>
 8012cdc:	e7c4      	b.n	8012c68 <__kernel_sin+0xd0>
 8012cde:	bf00      	nop
 8012ce0:	55555549 	.word	0x55555549
 8012ce4:	3fc55555 	.word	0x3fc55555
 8012ce8:	3fe00000 	.word	0x3fe00000
 8012cec:	5acfd57c 	.word	0x5acfd57c
 8012cf0:	3de5d93a 	.word	0x3de5d93a
 8012cf4:	8a2b9ceb 	.word	0x8a2b9ceb
 8012cf8:	3e5ae5e6 	.word	0x3e5ae5e6
 8012cfc:	57b1fe7d 	.word	0x57b1fe7d
 8012d00:	3ec71de3 	.word	0x3ec71de3
 8012d04:	19c161d5 	.word	0x19c161d5
 8012d08:	3f2a01a0 	.word	0x3f2a01a0
 8012d0c:	1110f8a6 	.word	0x1110f8a6
 8012d10:	3f811111 	.word	0x3f811111

08012d14 <with_errno>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	4604      	mov	r4, r0
 8012d18:	460d      	mov	r5, r1
 8012d1a:	4616      	mov	r6, r2
 8012d1c:	f7fa ff28 	bl	800db70 <__errno>
 8012d20:	4629      	mov	r1, r5
 8012d22:	6006      	str	r6, [r0, #0]
 8012d24:	4620      	mov	r0, r4
 8012d26:	bd70      	pop	{r4, r5, r6, pc}

08012d28 <xflow>:
 8012d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d2a:	4614      	mov	r4, r2
 8012d2c:	461d      	mov	r5, r3
 8012d2e:	b108      	cbz	r0, 8012d34 <xflow+0xc>
 8012d30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012d34:	e9cd 2300 	strd	r2, r3, [sp]
 8012d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ed fc72 	bl	8000628 <__aeabi_dmul>
 8012d44:	2222      	movs	r2, #34	; 0x22
 8012d46:	b003      	add	sp, #12
 8012d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d4c:	f7ff bfe2 	b.w	8012d14 <with_errno>

08012d50 <__math_uflow>:
 8012d50:	b508      	push	{r3, lr}
 8012d52:	2200      	movs	r2, #0
 8012d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012d58:	f7ff ffe6 	bl	8012d28 <xflow>
 8012d5c:	ec41 0b10 	vmov	d0, r0, r1
 8012d60:	bd08      	pop	{r3, pc}

08012d62 <__math_oflow>:
 8012d62:	b508      	push	{r3, lr}
 8012d64:	2200      	movs	r2, #0
 8012d66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012d6a:	f7ff ffdd 	bl	8012d28 <xflow>
 8012d6e:	ec41 0b10 	vmov	d0, r0, r1
 8012d72:	bd08      	pop	{r3, pc}
 8012d74:	0000      	movs	r0, r0
	...

08012d78 <atan>:
 8012d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	ec55 4b10 	vmov	r4, r5, d0
 8012d80:	4bc3      	ldr	r3, [pc, #780]	; (8013090 <atan+0x318>)
 8012d82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012d86:	429e      	cmp	r6, r3
 8012d88:	46ab      	mov	fp, r5
 8012d8a:	dd18      	ble.n	8012dbe <atan+0x46>
 8012d8c:	4bc1      	ldr	r3, [pc, #772]	; (8013094 <atan+0x31c>)
 8012d8e:	429e      	cmp	r6, r3
 8012d90:	dc01      	bgt.n	8012d96 <atan+0x1e>
 8012d92:	d109      	bne.n	8012da8 <atan+0x30>
 8012d94:	b144      	cbz	r4, 8012da8 <atan+0x30>
 8012d96:	4622      	mov	r2, r4
 8012d98:	462b      	mov	r3, r5
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	4629      	mov	r1, r5
 8012d9e:	f7ed fa8d 	bl	80002bc <__adddf3>
 8012da2:	4604      	mov	r4, r0
 8012da4:	460d      	mov	r5, r1
 8012da6:	e006      	b.n	8012db6 <atan+0x3e>
 8012da8:	f1bb 0f00 	cmp.w	fp, #0
 8012dac:	f300 8131 	bgt.w	8013012 <atan+0x29a>
 8012db0:	a59b      	add	r5, pc, #620	; (adr r5, 8013020 <atan+0x2a8>)
 8012db2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012db6:	ec45 4b10 	vmov	d0, r4, r5
 8012dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbe:	4bb6      	ldr	r3, [pc, #728]	; (8013098 <atan+0x320>)
 8012dc0:	429e      	cmp	r6, r3
 8012dc2:	dc14      	bgt.n	8012dee <atan+0x76>
 8012dc4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012dc8:	429e      	cmp	r6, r3
 8012dca:	dc0d      	bgt.n	8012de8 <atan+0x70>
 8012dcc:	a396      	add	r3, pc, #600	; (adr r3, 8013028 <atan+0x2b0>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	ee10 0a10 	vmov	r0, s0
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	f7ed fa70 	bl	80002bc <__adddf3>
 8012ddc:	4baf      	ldr	r3, [pc, #700]	; (801309c <atan+0x324>)
 8012dde:	2200      	movs	r2, #0
 8012de0:	f7ed feb2 	bl	8000b48 <__aeabi_dcmpgt>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d1e6      	bne.n	8012db6 <atan+0x3e>
 8012de8:	f04f 3aff 	mov.w	sl, #4294967295
 8012dec:	e02b      	b.n	8012e46 <atan+0xce>
 8012dee:	f000 f963 	bl	80130b8 <fabs>
 8012df2:	4bab      	ldr	r3, [pc, #684]	; (80130a0 <atan+0x328>)
 8012df4:	429e      	cmp	r6, r3
 8012df6:	ec55 4b10 	vmov	r4, r5, d0
 8012dfa:	f300 80bf 	bgt.w	8012f7c <atan+0x204>
 8012dfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012e02:	429e      	cmp	r6, r3
 8012e04:	f300 80a0 	bgt.w	8012f48 <atan+0x1d0>
 8012e08:	ee10 2a10 	vmov	r2, s0
 8012e0c:	ee10 0a10 	vmov	r0, s0
 8012e10:	462b      	mov	r3, r5
 8012e12:	4629      	mov	r1, r5
 8012e14:	f7ed fa52 	bl	80002bc <__adddf3>
 8012e18:	4ba0      	ldr	r3, [pc, #640]	; (801309c <atan+0x324>)
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	f7ed fa4c 	bl	80002b8 <__aeabi_dsub>
 8012e20:	2200      	movs	r2, #0
 8012e22:	4606      	mov	r6, r0
 8012e24:	460f      	mov	r7, r1
 8012e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	f7ed fa45 	bl	80002bc <__adddf3>
 8012e32:	4602      	mov	r2, r0
 8012e34:	460b      	mov	r3, r1
 8012e36:	4630      	mov	r0, r6
 8012e38:	4639      	mov	r1, r7
 8012e3a:	f7ed fd1f 	bl	800087c <__aeabi_ddiv>
 8012e3e:	f04f 0a00 	mov.w	sl, #0
 8012e42:	4604      	mov	r4, r0
 8012e44:	460d      	mov	r5, r1
 8012e46:	4622      	mov	r2, r4
 8012e48:	462b      	mov	r3, r5
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	f7ed fbeb 	bl	8000628 <__aeabi_dmul>
 8012e52:	4602      	mov	r2, r0
 8012e54:	460b      	mov	r3, r1
 8012e56:	4680      	mov	r8, r0
 8012e58:	4689      	mov	r9, r1
 8012e5a:	f7ed fbe5 	bl	8000628 <__aeabi_dmul>
 8012e5e:	a374      	add	r3, pc, #464	; (adr r3, 8013030 <atan+0x2b8>)
 8012e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e64:	4606      	mov	r6, r0
 8012e66:	460f      	mov	r7, r1
 8012e68:	f7ed fbde 	bl	8000628 <__aeabi_dmul>
 8012e6c:	a372      	add	r3, pc, #456	; (adr r3, 8013038 <atan+0x2c0>)
 8012e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e72:	f7ed fa23 	bl	80002bc <__adddf3>
 8012e76:	4632      	mov	r2, r6
 8012e78:	463b      	mov	r3, r7
 8012e7a:	f7ed fbd5 	bl	8000628 <__aeabi_dmul>
 8012e7e:	a370      	add	r3, pc, #448	; (adr r3, 8013040 <atan+0x2c8>)
 8012e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e84:	f7ed fa1a 	bl	80002bc <__adddf3>
 8012e88:	4632      	mov	r2, r6
 8012e8a:	463b      	mov	r3, r7
 8012e8c:	f7ed fbcc 	bl	8000628 <__aeabi_dmul>
 8012e90:	a36d      	add	r3, pc, #436	; (adr r3, 8013048 <atan+0x2d0>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	f7ed fa11 	bl	80002bc <__adddf3>
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	463b      	mov	r3, r7
 8012e9e:	f7ed fbc3 	bl	8000628 <__aeabi_dmul>
 8012ea2:	a36b      	add	r3, pc, #428	; (adr r3, 8013050 <atan+0x2d8>)
 8012ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea8:	f7ed fa08 	bl	80002bc <__adddf3>
 8012eac:	4632      	mov	r2, r6
 8012eae:	463b      	mov	r3, r7
 8012eb0:	f7ed fbba 	bl	8000628 <__aeabi_dmul>
 8012eb4:	a368      	add	r3, pc, #416	; (adr r3, 8013058 <atan+0x2e0>)
 8012eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eba:	f7ed f9ff 	bl	80002bc <__adddf3>
 8012ebe:	4642      	mov	r2, r8
 8012ec0:	464b      	mov	r3, r9
 8012ec2:	f7ed fbb1 	bl	8000628 <__aeabi_dmul>
 8012ec6:	a366      	add	r3, pc, #408	; (adr r3, 8013060 <atan+0x2e8>)
 8012ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ecc:	4680      	mov	r8, r0
 8012ece:	4689      	mov	r9, r1
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	f7ed fba8 	bl	8000628 <__aeabi_dmul>
 8012ed8:	a363      	add	r3, pc, #396	; (adr r3, 8013068 <atan+0x2f0>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	f7ed f9eb 	bl	80002b8 <__aeabi_dsub>
 8012ee2:	4632      	mov	r2, r6
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	f7ed fb9f 	bl	8000628 <__aeabi_dmul>
 8012eea:	a361      	add	r3, pc, #388	; (adr r3, 8013070 <atan+0x2f8>)
 8012eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef0:	f7ed f9e2 	bl	80002b8 <__aeabi_dsub>
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	f7ed fb96 	bl	8000628 <__aeabi_dmul>
 8012efc:	a35e      	add	r3, pc, #376	; (adr r3, 8013078 <atan+0x300>)
 8012efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f02:	f7ed f9d9 	bl	80002b8 <__aeabi_dsub>
 8012f06:	4632      	mov	r2, r6
 8012f08:	463b      	mov	r3, r7
 8012f0a:	f7ed fb8d 	bl	8000628 <__aeabi_dmul>
 8012f0e:	a35c      	add	r3, pc, #368	; (adr r3, 8013080 <atan+0x308>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f14:	f7ed f9d0 	bl	80002b8 <__aeabi_dsub>
 8012f18:	4632      	mov	r2, r6
 8012f1a:	463b      	mov	r3, r7
 8012f1c:	f7ed fb84 	bl	8000628 <__aeabi_dmul>
 8012f20:	4602      	mov	r2, r0
 8012f22:	460b      	mov	r3, r1
 8012f24:	4640      	mov	r0, r8
 8012f26:	4649      	mov	r1, r9
 8012f28:	f7ed f9c8 	bl	80002bc <__adddf3>
 8012f2c:	4622      	mov	r2, r4
 8012f2e:	462b      	mov	r3, r5
 8012f30:	f7ed fb7a 	bl	8000628 <__aeabi_dmul>
 8012f34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012f38:	4602      	mov	r2, r0
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	d14b      	bne.n	8012fd6 <atan+0x25e>
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4629      	mov	r1, r5
 8012f42:	f7ed f9b9 	bl	80002b8 <__aeabi_dsub>
 8012f46:	e72c      	b.n	8012da2 <atan+0x2a>
 8012f48:	ee10 0a10 	vmov	r0, s0
 8012f4c:	4b53      	ldr	r3, [pc, #332]	; (801309c <atan+0x324>)
 8012f4e:	2200      	movs	r2, #0
 8012f50:	4629      	mov	r1, r5
 8012f52:	f7ed f9b1 	bl	80002b8 <__aeabi_dsub>
 8012f56:	4b51      	ldr	r3, [pc, #324]	; (801309c <atan+0x324>)
 8012f58:	4606      	mov	r6, r0
 8012f5a:	460f      	mov	r7, r1
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	4620      	mov	r0, r4
 8012f60:	4629      	mov	r1, r5
 8012f62:	f7ed f9ab 	bl	80002bc <__adddf3>
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	4639      	mov	r1, r7
 8012f6e:	f7ed fc85 	bl	800087c <__aeabi_ddiv>
 8012f72:	f04f 0a01 	mov.w	sl, #1
 8012f76:	4604      	mov	r4, r0
 8012f78:	460d      	mov	r5, r1
 8012f7a:	e764      	b.n	8012e46 <atan+0xce>
 8012f7c:	4b49      	ldr	r3, [pc, #292]	; (80130a4 <atan+0x32c>)
 8012f7e:	429e      	cmp	r6, r3
 8012f80:	da1d      	bge.n	8012fbe <atan+0x246>
 8012f82:	ee10 0a10 	vmov	r0, s0
 8012f86:	4b48      	ldr	r3, [pc, #288]	; (80130a8 <atan+0x330>)
 8012f88:	2200      	movs	r2, #0
 8012f8a:	4629      	mov	r1, r5
 8012f8c:	f7ed f994 	bl	80002b8 <__aeabi_dsub>
 8012f90:	4b45      	ldr	r3, [pc, #276]	; (80130a8 <atan+0x330>)
 8012f92:	4606      	mov	r6, r0
 8012f94:	460f      	mov	r7, r1
 8012f96:	2200      	movs	r2, #0
 8012f98:	4620      	mov	r0, r4
 8012f9a:	4629      	mov	r1, r5
 8012f9c:	f7ed fb44 	bl	8000628 <__aeabi_dmul>
 8012fa0:	4b3e      	ldr	r3, [pc, #248]	; (801309c <atan+0x324>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f7ed f98a 	bl	80002bc <__adddf3>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	4630      	mov	r0, r6
 8012fae:	4639      	mov	r1, r7
 8012fb0:	f7ed fc64 	bl	800087c <__aeabi_ddiv>
 8012fb4:	f04f 0a02 	mov.w	sl, #2
 8012fb8:	4604      	mov	r4, r0
 8012fba:	460d      	mov	r5, r1
 8012fbc:	e743      	b.n	8012e46 <atan+0xce>
 8012fbe:	462b      	mov	r3, r5
 8012fc0:	ee10 2a10 	vmov	r2, s0
 8012fc4:	4939      	ldr	r1, [pc, #228]	; (80130ac <atan+0x334>)
 8012fc6:	2000      	movs	r0, #0
 8012fc8:	f7ed fc58 	bl	800087c <__aeabi_ddiv>
 8012fcc:	f04f 0a03 	mov.w	sl, #3
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	460d      	mov	r5, r1
 8012fd4:	e737      	b.n	8012e46 <atan+0xce>
 8012fd6:	4b36      	ldr	r3, [pc, #216]	; (80130b0 <atan+0x338>)
 8012fd8:	4e36      	ldr	r6, [pc, #216]	; (80130b4 <atan+0x33c>)
 8012fda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012fde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012fe2:	e9da 2300 	ldrd	r2, r3, [sl]
 8012fe6:	f7ed f967 	bl	80002b8 <__aeabi_dsub>
 8012fea:	4622      	mov	r2, r4
 8012fec:	462b      	mov	r3, r5
 8012fee:	f7ed f963 	bl	80002b8 <__aeabi_dsub>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012ffa:	f7ed f95d 	bl	80002b8 <__aeabi_dsub>
 8012ffe:	f1bb 0f00 	cmp.w	fp, #0
 8013002:	4604      	mov	r4, r0
 8013004:	460d      	mov	r5, r1
 8013006:	f6bf aed6 	bge.w	8012db6 <atan+0x3e>
 801300a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801300e:	461d      	mov	r5, r3
 8013010:	e6d1      	b.n	8012db6 <atan+0x3e>
 8013012:	a51d      	add	r5, pc, #116	; (adr r5, 8013088 <atan+0x310>)
 8013014:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013018:	e6cd      	b.n	8012db6 <atan+0x3e>
 801301a:	bf00      	nop
 801301c:	f3af 8000 	nop.w
 8013020:	54442d18 	.word	0x54442d18
 8013024:	bff921fb 	.word	0xbff921fb
 8013028:	8800759c 	.word	0x8800759c
 801302c:	7e37e43c 	.word	0x7e37e43c
 8013030:	e322da11 	.word	0xe322da11
 8013034:	3f90ad3a 	.word	0x3f90ad3a
 8013038:	24760deb 	.word	0x24760deb
 801303c:	3fa97b4b 	.word	0x3fa97b4b
 8013040:	a0d03d51 	.word	0xa0d03d51
 8013044:	3fb10d66 	.word	0x3fb10d66
 8013048:	c54c206e 	.word	0xc54c206e
 801304c:	3fb745cd 	.word	0x3fb745cd
 8013050:	920083ff 	.word	0x920083ff
 8013054:	3fc24924 	.word	0x3fc24924
 8013058:	5555550d 	.word	0x5555550d
 801305c:	3fd55555 	.word	0x3fd55555
 8013060:	2c6a6c2f 	.word	0x2c6a6c2f
 8013064:	bfa2b444 	.word	0xbfa2b444
 8013068:	52defd9a 	.word	0x52defd9a
 801306c:	3fadde2d 	.word	0x3fadde2d
 8013070:	af749a6d 	.word	0xaf749a6d
 8013074:	3fb3b0f2 	.word	0x3fb3b0f2
 8013078:	fe231671 	.word	0xfe231671
 801307c:	3fbc71c6 	.word	0x3fbc71c6
 8013080:	9998ebc4 	.word	0x9998ebc4
 8013084:	3fc99999 	.word	0x3fc99999
 8013088:	54442d18 	.word	0x54442d18
 801308c:	3ff921fb 	.word	0x3ff921fb
 8013090:	440fffff 	.word	0x440fffff
 8013094:	7ff00000 	.word	0x7ff00000
 8013098:	3fdbffff 	.word	0x3fdbffff
 801309c:	3ff00000 	.word	0x3ff00000
 80130a0:	3ff2ffff 	.word	0x3ff2ffff
 80130a4:	40038000 	.word	0x40038000
 80130a8:	3ff80000 	.word	0x3ff80000
 80130ac:	bff00000 	.word	0xbff00000
 80130b0:	08014010 	.word	0x08014010
 80130b4:	08013ff0 	.word	0x08013ff0

080130b8 <fabs>:
 80130b8:	ec51 0b10 	vmov	r0, r1, d0
 80130bc:	ee10 2a10 	vmov	r2, s0
 80130c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130c4:	ec43 2b10 	vmov	d0, r2, r3
 80130c8:	4770      	bx	lr

080130ca <finite>:
 80130ca:	b082      	sub	sp, #8
 80130cc:	ed8d 0b00 	vstr	d0, [sp]
 80130d0:	9801      	ldr	r0, [sp, #4]
 80130d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80130d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80130da:	0fc0      	lsrs	r0, r0, #31
 80130dc:	b002      	add	sp, #8
 80130de:	4770      	bx	lr

080130e0 <floor>:
 80130e0:	ec51 0b10 	vmov	r0, r1, d0
 80130e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80130ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80130f0:	2e13      	cmp	r6, #19
 80130f2:	ee10 5a10 	vmov	r5, s0
 80130f6:	ee10 8a10 	vmov	r8, s0
 80130fa:	460c      	mov	r4, r1
 80130fc:	dc32      	bgt.n	8013164 <floor+0x84>
 80130fe:	2e00      	cmp	r6, #0
 8013100:	da14      	bge.n	801312c <floor+0x4c>
 8013102:	a333      	add	r3, pc, #204	; (adr r3, 80131d0 <floor+0xf0>)
 8013104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013108:	f7ed f8d8 	bl	80002bc <__adddf3>
 801310c:	2200      	movs	r2, #0
 801310e:	2300      	movs	r3, #0
 8013110:	f7ed fd1a 	bl	8000b48 <__aeabi_dcmpgt>
 8013114:	b138      	cbz	r0, 8013126 <floor+0x46>
 8013116:	2c00      	cmp	r4, #0
 8013118:	da57      	bge.n	80131ca <floor+0xea>
 801311a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801311e:	431d      	orrs	r5, r3
 8013120:	d001      	beq.n	8013126 <floor+0x46>
 8013122:	4c2d      	ldr	r4, [pc, #180]	; (80131d8 <floor+0xf8>)
 8013124:	2500      	movs	r5, #0
 8013126:	4621      	mov	r1, r4
 8013128:	4628      	mov	r0, r5
 801312a:	e025      	b.n	8013178 <floor+0x98>
 801312c:	4f2b      	ldr	r7, [pc, #172]	; (80131dc <floor+0xfc>)
 801312e:	4137      	asrs	r7, r6
 8013130:	ea01 0307 	and.w	r3, r1, r7
 8013134:	4303      	orrs	r3, r0
 8013136:	d01f      	beq.n	8013178 <floor+0x98>
 8013138:	a325      	add	r3, pc, #148	; (adr r3, 80131d0 <floor+0xf0>)
 801313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313e:	f7ed f8bd 	bl	80002bc <__adddf3>
 8013142:	2200      	movs	r2, #0
 8013144:	2300      	movs	r3, #0
 8013146:	f7ed fcff 	bl	8000b48 <__aeabi_dcmpgt>
 801314a:	2800      	cmp	r0, #0
 801314c:	d0eb      	beq.n	8013126 <floor+0x46>
 801314e:	2c00      	cmp	r4, #0
 8013150:	bfbe      	ittt	lt
 8013152:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013156:	fa43 f606 	asrlt.w	r6, r3, r6
 801315a:	19a4      	addlt	r4, r4, r6
 801315c:	ea24 0407 	bic.w	r4, r4, r7
 8013160:	2500      	movs	r5, #0
 8013162:	e7e0      	b.n	8013126 <floor+0x46>
 8013164:	2e33      	cmp	r6, #51	; 0x33
 8013166:	dd0b      	ble.n	8013180 <floor+0xa0>
 8013168:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801316c:	d104      	bne.n	8013178 <floor+0x98>
 801316e:	ee10 2a10 	vmov	r2, s0
 8013172:	460b      	mov	r3, r1
 8013174:	f7ed f8a2 	bl	80002bc <__adddf3>
 8013178:	ec41 0b10 	vmov	d0, r0, r1
 801317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013180:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013184:	f04f 33ff 	mov.w	r3, #4294967295
 8013188:	fa23 f707 	lsr.w	r7, r3, r7
 801318c:	4207      	tst	r7, r0
 801318e:	d0f3      	beq.n	8013178 <floor+0x98>
 8013190:	a30f      	add	r3, pc, #60	; (adr r3, 80131d0 <floor+0xf0>)
 8013192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013196:	f7ed f891 	bl	80002bc <__adddf3>
 801319a:	2200      	movs	r2, #0
 801319c:	2300      	movs	r3, #0
 801319e:	f7ed fcd3 	bl	8000b48 <__aeabi_dcmpgt>
 80131a2:	2800      	cmp	r0, #0
 80131a4:	d0bf      	beq.n	8013126 <floor+0x46>
 80131a6:	2c00      	cmp	r4, #0
 80131a8:	da02      	bge.n	80131b0 <floor+0xd0>
 80131aa:	2e14      	cmp	r6, #20
 80131ac:	d103      	bne.n	80131b6 <floor+0xd6>
 80131ae:	3401      	adds	r4, #1
 80131b0:	ea25 0507 	bic.w	r5, r5, r7
 80131b4:	e7b7      	b.n	8013126 <floor+0x46>
 80131b6:	2301      	movs	r3, #1
 80131b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80131bc:	fa03 f606 	lsl.w	r6, r3, r6
 80131c0:	4435      	add	r5, r6
 80131c2:	4545      	cmp	r5, r8
 80131c4:	bf38      	it	cc
 80131c6:	18e4      	addcc	r4, r4, r3
 80131c8:	e7f2      	b.n	80131b0 <floor+0xd0>
 80131ca:	2500      	movs	r5, #0
 80131cc:	462c      	mov	r4, r5
 80131ce:	e7aa      	b.n	8013126 <floor+0x46>
 80131d0:	8800759c 	.word	0x8800759c
 80131d4:	7e37e43c 	.word	0x7e37e43c
 80131d8:	bff00000 	.word	0xbff00000
 80131dc:	000fffff 	.word	0x000fffff

080131e0 <nan>:
 80131e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80131e8 <nan+0x8>
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	00000000 	.word	0x00000000
 80131ec:	7ff80000 	.word	0x7ff80000

080131f0 <scalbn>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	ec55 4b10 	vmov	r4, r5, d0
 80131f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80131fa:	4606      	mov	r6, r0
 80131fc:	462b      	mov	r3, r5
 80131fe:	b99a      	cbnz	r2, 8013228 <scalbn+0x38>
 8013200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013204:	4323      	orrs	r3, r4
 8013206:	d036      	beq.n	8013276 <scalbn+0x86>
 8013208:	4b39      	ldr	r3, [pc, #228]	; (80132f0 <scalbn+0x100>)
 801320a:	4629      	mov	r1, r5
 801320c:	ee10 0a10 	vmov	r0, s0
 8013210:	2200      	movs	r2, #0
 8013212:	f7ed fa09 	bl	8000628 <__aeabi_dmul>
 8013216:	4b37      	ldr	r3, [pc, #220]	; (80132f4 <scalbn+0x104>)
 8013218:	429e      	cmp	r6, r3
 801321a:	4604      	mov	r4, r0
 801321c:	460d      	mov	r5, r1
 801321e:	da10      	bge.n	8013242 <scalbn+0x52>
 8013220:	a32b      	add	r3, pc, #172	; (adr r3, 80132d0 <scalbn+0xe0>)
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	e03a      	b.n	801329e <scalbn+0xae>
 8013228:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801322c:	428a      	cmp	r2, r1
 801322e:	d10c      	bne.n	801324a <scalbn+0x5a>
 8013230:	ee10 2a10 	vmov	r2, s0
 8013234:	4620      	mov	r0, r4
 8013236:	4629      	mov	r1, r5
 8013238:	f7ed f840 	bl	80002bc <__adddf3>
 801323c:	4604      	mov	r4, r0
 801323e:	460d      	mov	r5, r1
 8013240:	e019      	b.n	8013276 <scalbn+0x86>
 8013242:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013246:	460b      	mov	r3, r1
 8013248:	3a36      	subs	r2, #54	; 0x36
 801324a:	4432      	add	r2, r6
 801324c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013250:	428a      	cmp	r2, r1
 8013252:	dd08      	ble.n	8013266 <scalbn+0x76>
 8013254:	2d00      	cmp	r5, #0
 8013256:	a120      	add	r1, pc, #128	; (adr r1, 80132d8 <scalbn+0xe8>)
 8013258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801325c:	da1c      	bge.n	8013298 <scalbn+0xa8>
 801325e:	a120      	add	r1, pc, #128	; (adr r1, 80132e0 <scalbn+0xf0>)
 8013260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013264:	e018      	b.n	8013298 <scalbn+0xa8>
 8013266:	2a00      	cmp	r2, #0
 8013268:	dd08      	ble.n	801327c <scalbn+0x8c>
 801326a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801326e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013272:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013276:	ec45 4b10 	vmov	d0, r4, r5
 801327a:	bd70      	pop	{r4, r5, r6, pc}
 801327c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013280:	da19      	bge.n	80132b6 <scalbn+0xc6>
 8013282:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013286:	429e      	cmp	r6, r3
 8013288:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801328c:	dd0a      	ble.n	80132a4 <scalbn+0xb4>
 801328e:	a112      	add	r1, pc, #72	; (adr r1, 80132d8 <scalbn+0xe8>)
 8013290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1e2      	bne.n	801325e <scalbn+0x6e>
 8013298:	a30f      	add	r3, pc, #60	; (adr r3, 80132d8 <scalbn+0xe8>)
 801329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329e:	f7ed f9c3 	bl	8000628 <__aeabi_dmul>
 80132a2:	e7cb      	b.n	801323c <scalbn+0x4c>
 80132a4:	a10a      	add	r1, pc, #40	; (adr r1, 80132d0 <scalbn+0xe0>)
 80132a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d0b8      	beq.n	8013220 <scalbn+0x30>
 80132ae:	a10e      	add	r1, pc, #56	; (adr r1, 80132e8 <scalbn+0xf8>)
 80132b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132b4:	e7b4      	b.n	8013220 <scalbn+0x30>
 80132b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132ba:	3236      	adds	r2, #54	; 0x36
 80132bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80132c4:	4620      	mov	r0, r4
 80132c6:	4b0c      	ldr	r3, [pc, #48]	; (80132f8 <scalbn+0x108>)
 80132c8:	2200      	movs	r2, #0
 80132ca:	e7e8      	b.n	801329e <scalbn+0xae>
 80132cc:	f3af 8000 	nop.w
 80132d0:	c2f8f359 	.word	0xc2f8f359
 80132d4:	01a56e1f 	.word	0x01a56e1f
 80132d8:	8800759c 	.word	0x8800759c
 80132dc:	7e37e43c 	.word	0x7e37e43c
 80132e0:	8800759c 	.word	0x8800759c
 80132e4:	fe37e43c 	.word	0xfe37e43c
 80132e8:	c2f8f359 	.word	0xc2f8f359
 80132ec:	81a56e1f 	.word	0x81a56e1f
 80132f0:	43500000 	.word	0x43500000
 80132f4:	ffff3cb0 	.word	0xffff3cb0
 80132f8:	3c900000 	.word	0x3c900000

080132fc <_sbrk>:
 80132fc:	4a04      	ldr	r2, [pc, #16]	; (8013310 <_sbrk+0x14>)
 80132fe:	6811      	ldr	r1, [r2, #0]
 8013300:	4603      	mov	r3, r0
 8013302:	b909      	cbnz	r1, 8013308 <_sbrk+0xc>
 8013304:	4903      	ldr	r1, [pc, #12]	; (8013314 <_sbrk+0x18>)
 8013306:	6011      	str	r1, [r2, #0]
 8013308:	6810      	ldr	r0, [r2, #0]
 801330a:	4403      	add	r3, r0
 801330c:	6013      	str	r3, [r2, #0]
 801330e:	4770      	bx	lr
 8013310:	2000dc4c 	.word	0x2000dc4c
 8013314:	200005e5 	.word	0x200005e5

08013318 <_init>:
 8013318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801331a:	bf00      	nop
 801331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801331e:	bc08      	pop	{r3}
 8013320:	469e      	mov	lr, r3
 8013322:	4770      	bx	lr

08013324 <_fini>:
 8013324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013326:	bf00      	nop
 8013328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801332a:	bc08      	pop	{r3}
 801332c:	469e      	mov	lr, r3
 801332e:	4770      	bx	lr
