
Base_FreeRTOS_Org.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800be98  0800be98  0001be98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c498  0800c498  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c498  0800c498  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c498  0800c498  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c49c  0800c49c  0001c49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013108  20000090  0800c52c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013198  0800c52c  00023198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c120  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a6  00000000  00000000  0002c1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bec  00000000  00000000  0002f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c931  00000000  00000000  000414bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000608be  00000000  00000000  0004dded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae6ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000ae6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be80 	.word	0x0800be80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800be80 	.word	0x0800be80

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:

// VARIABLES VARIAS DEL ROBOT
#define fixed_dutty 28

int main(void)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
 8000cbc:	af02      	add	r7, sp, #8


	//Activamos el FPU o la unidad de punto flotante
	SCB -> CPACR |= (0xF << 20);
 8000cbe:	4b88      	ldr	r3, [pc, #544]	; (8000ee0 <main+0x228>)
 8000cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc4:	4a86      	ldr	r2, [pc, #536]	; (8000ee0 <main+0x228>)
 8000cc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//Activamos el contador
   	DWT -> CTRL    |= (1 << 0);
 8000cce:	4b85      	ldr	r3, [pc, #532]	; (8000ee4 <main+0x22c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a84      	ldr	r2, [pc, #528]	; (8000ee4 <main+0x22c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6013      	str	r3, [r2, #0]
//	SEGGER_SYSVIEW_Conf();
//	/* Despues activamos el sistema */
//	SEGGER_SYSVIEW_Start();


	inSystem ();
 8000cda:	f000 f939 	bl	8000f50 <inSystem>

	cal_Gyro = calibracionGyros(&handler_MPUAccel_6050, 'z');
 8000cde:	217a      	movs	r1, #122	; 0x7a
 8000ce0:	4881      	ldr	r0, [pc, #516]	; (8000ee8 <main+0x230>)
 8000ce2:	f000 ff2d 	bl	8001b40 <calibracionGyros>
 8000ce6:	ee10 3a10 	vmov	r3, s0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fc44 	bl	8000578 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	497d      	ldr	r1, [pc, #500]	; (8000eec <main+0x234>)
 8000cf6:	e9c1 2300 	strd	r2, r3, [r1]


	/////////////////////////////////TAREA DEL MENU//////////////////////////////////////

	xReturned = xTaskCreate(
 8000cfa:	4b7d      	ldr	r3, [pc, #500]	; (8000ef0 <main+0x238>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2303      	movs	r3, #3
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2300      	movs	r3, #0
 8000d04:	22c8      	movs	r2, #200	; 0xc8
 8000d06:	497b      	ldr	r1, [pc, #492]	; (8000ef4 <main+0x23c>)
 8000d08:	487b      	ldr	r0, [pc, #492]	; (8000ef8 <main+0x240>)
 8000d0a:	f001 febf 	bl	8002a8c <xTaskCreate>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a7a      	ldr	r2, [pc, #488]	; (8000efc <main+0x244>)
 8000d12:	6013      	str	r3, [r2, #0]
					NULL,                   // parametro pasado a la tarea
					3,                      // Prioridad de la tarea
					&xHandleTask_Menu );    // Handler de la tarea respectiva


	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d14:	4b79      	ldr	r3, [pc, #484]	; (8000efc <main+0x244>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d00a      	beq.n	8000d32 <main+0x7a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d20:	f383 8811 	msr	BASEPRI, r3
 8000d24:	f3bf 8f6f 	isb	sy
 8000d28:	f3bf 8f4f 	dsb	sy
 8000d2c:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000d2e:	bf00      	nop
 8000d30:	e7fe      	b.n	8000d30 <main+0x78>


	/////////////////////////////////TAREA DE IMPRESIÓN//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Print, "Task-Print",STACK_SIZE,NULL,2,&xHandleTask_Print );
 8000d32:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <main+0x248>)
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	2302      	movs	r3, #2
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	22c8      	movs	r2, #200	; 0xc8
 8000d3e:	4971      	ldr	r1, [pc, #452]	; (8000f04 <main+0x24c>)
 8000d40:	4871      	ldr	r0, [pc, #452]	; (8000f08 <main+0x250>)
 8000d42:	f001 fea3 	bl	8002a8c <xTaskCreate>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a6c      	ldr	r2, [pc, #432]	; (8000efc <main+0x244>)
 8000d4a:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS ); // Nos aseguramos de que se creo la tarea de una forma correcta
 8000d4c:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <main+0x244>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d00a      	beq.n	8000d6a <main+0xb2>
        __asm volatile
 8000d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d58:	f383 8811 	msr	BASEPRI, r3
 8000d5c:	f3bf 8f6f 	isb	sy
 8000d60:	f3bf 8f4f 	dsb	sy
 8000d64:	61bb      	str	r3, [r7, #24]
    }
 8000d66:	bf00      	nop
 8000d68:	e7fe      	b.n	8000d68 <main+0xb0>

	 /////////////////////////////////TAREA DE COMANDOS //////////////////////////////////////

	xReturned = xTaskCreate(vTask_Commands,"Task-Commands",STACK_SIZE,NULL,3,&xHandleTask_Commands );
 8000d6a:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <main+0x254>)
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	2303      	movs	r3, #3
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	22c8      	movs	r2, #200	; 0xc8
 8000d76:	4966      	ldr	r1, [pc, #408]	; (8000f10 <main+0x258>)
 8000d78:	4866      	ldr	r0, [pc, #408]	; (8000f14 <main+0x25c>)
 8000d7a:	f001 fe87 	bl	8002a8c <xTaskCreate>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a5e      	ldr	r2, [pc, #376]	; (8000efc <main+0x244>)
 8000d82:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <main+0x244>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00a      	beq.n	8000da2 <main+0xea>
        __asm volatile
 8000d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d90:	f383 8811 	msr	BASEPRI, r3
 8000d94:	f3bf 8f6f 	isb	sy
 8000d98:	f3bf 8f4f 	dsb	sy
 8000d9c:	617b      	str	r3, [r7, #20]
    }
 8000d9e:	bf00      	nop
 8000da0:	e7fe      	b.n	8000da0 <main+0xe8>

	 /////////////////////////////////TAREA DE STOP //////////////////////////////////////


	xReturned = xTaskCreate(vTask_Stop,"Task-Stop",STACK_SIZE,NULL,3,&xHandleTask_Stop );
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <main+0x260>)
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	2303      	movs	r3, #3
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	2300      	movs	r3, #0
 8000dac:	22c8      	movs	r2, #200	; 0xc8
 8000dae:	495b      	ldr	r1, [pc, #364]	; (8000f1c <main+0x264>)
 8000db0:	485b      	ldr	r0, [pc, #364]	; (8000f20 <main+0x268>)
 8000db2:	f001 fe6b 	bl	8002a8c <xTaskCreate>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a50      	ldr	r2, [pc, #320]	; (8000efc <main+0x244>)
 8000dba:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <main+0x244>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d00a      	beq.n	8000dda <main+0x122>
        __asm volatile
 8000dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	613b      	str	r3, [r7, #16]
    }
 8000dd6:	bf00      	nop
 8000dd8:	e7fe      	b.n	8000dd8 <main+0x120>

	 /////////////////////////////////TAREA DE GO//////////////////////////////////////

	xReturned = xTaskCreate(vTask_Go,"Task-Go",STACK_SIZE,NULL,3,&xHandleTask_Go );
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <main+0x26c>)
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	2303      	movs	r3, #3
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	22c8      	movs	r2, #200	; 0xc8
 8000de6:	4950      	ldr	r1, [pc, #320]	; (8000f28 <main+0x270>)
 8000de8:	4850      	ldr	r0, [pc, #320]	; (8000f2c <main+0x274>)
 8000dea:	f001 fe4f 	bl	8002a8c <xTaskCreate>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a42      	ldr	r2, [pc, #264]	; (8000efc <main+0x244>)
 8000df2:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000df4:	4b41      	ldr	r3, [pc, #260]	; (8000efc <main+0x244>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d00a      	beq.n	8000e12 <main+0x15a>
        __asm volatile
 8000dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e00:	f383 8811 	msr	BASEPRI, r3
 8000e04:	f3bf 8f6f 	isb	sy
 8000e08:	f3bf 8f4f 	dsb	sy
 8000e0c:	60fb      	str	r3, [r7, #12]
    }
 8000e0e:	bf00      	nop
 8000e10:	e7fe      	b.n	8000e10 <main+0x158>

	 /////////////////////////////////TAREA DE PID//////////////////////////////////////

	xReturned = xTaskCreate(vTask_PID,"Task-PID",STACK_SIZE,NULL,3,&xHandleTask_PID );
 8000e12:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <main+0x278>)
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2303      	movs	r3, #3
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	22c8      	movs	r2, #200	; 0xc8
 8000e1e:	4945      	ldr	r1, [pc, #276]	; (8000f34 <main+0x27c>)
 8000e20:	4845      	ldr	r0, [pc, #276]	; (8000f38 <main+0x280>)
 8000e22:	f001 fe33 	bl	8002a8c <xTaskCreate>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a34      	ldr	r2, [pc, #208]	; (8000efc <main+0x244>)
 8000e2a:	6013      	str	r3, [r2, #0]

	 configASSERT( xReturned == pdPASS );// Nos aseguramos de que se creo la tarea de una forma correcta
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <main+0x244>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d00a      	beq.n	8000e4a <main+0x192>
        __asm volatile
 8000e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e38:	f383 8811 	msr	BASEPRI, r3
 8000e3c:	f3bf 8f6f 	isb	sy
 8000e40:	f3bf 8f4f 	dsb	sy
 8000e44:	60bb      	str	r3, [r7, #8]
    }
 8000e46:	bf00      	nop
 8000e48:	e7fe      	b.n	8000e48 <main+0x190>


	 //Creacion de colas
	 // Para cada funcion de crear se tiene que definir el largo de la cola,, y el
	 // largo de cada elemento de la cola.
	 xQueue_InputData = xQueueCreate(10,sizeof(char));
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	200a      	movs	r0, #10
 8000e50:	f001 f8d0 	bl	8001ff4 <xQueueGenericCreate>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <main+0x284>)
 8000e58:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_InputData != NULL);// Verificamos que se creo la cola correctamente
 8000e5a:	4b38      	ldr	r3, [pc, #224]	; (8000f3c <main+0x284>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10a      	bne.n	8000e78 <main+0x1c0>
        __asm volatile
 8000e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e66:	f383 8811 	msr	BASEPRI, r3
 8000e6a:	f3bf 8f6f 	isb	sy
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	607b      	str	r3, [r7, #4]
    }
 8000e74:	bf00      	nop
 8000e76:	e7fe      	b.n	8000e76 <main+0x1be>

	 //XQueue_Print = xQueueCreate (10, sizeof (struct AMessage *))
	 xQueue_Print = xQueueCreate(10,sizeof(size_t));
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	200a      	movs	r0, #10
 8000e7e:	f001 f8b9 	bl	8001ff4 <xQueueGenericCreate>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <main+0x288>)
 8000e86:	6013      	str	r3, [r2, #0]
	 configASSERT(xQueue_Print != NULL); // Verificamos que se creo la cola correctamente
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <main+0x288>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10a      	bne.n	8000ea6 <main+0x1ee>
        __asm volatile
 8000e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e94:	f383 8811 	msr	BASEPRI, r3
 8000e98:	f3bf 8f6f 	isb	sy
 8000e9c:	f3bf 8f4f 	dsb	sy
 8000ea0:	603b      	str	r3, [r7, #0]
    }
 8000ea2:	bf00      	nop
 8000ea4:	e7fe      	b.n	8000ea4 <main+0x1ec>
	 //Creando el timer de FreeRTOS


	 /* Start the created tasks running. */

	 handler_led_timer = xTimerCreate("led_timer",
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <main+0x28c>)
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eb2:	4825      	ldr	r0, [pc, #148]	; (8000f48 <main+0x290>)
 8000eb4:	f002 fec0 	bl	8003c38 <xTimerCreate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <main+0x294>)
 8000ebc:	6013      	str	r3, [r2, #0]
			 	 	 	 	 	 	 pdMS_TO_TICKS(500),
									 pdTRUE,
									 (void *) 1,
									 led_state_callback);

	 xTimerStart(handler_led_timer, portMAX_DELAY);
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <main+0x294>)
 8000ec0:	681c      	ldr	r4, [r3, #0]
 8000ec2:	f002 f825 	bl	8002f10 <xTaskGetTickCount>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f002 ff0c 	bl	8003cf0 <xTimerGenericCommand>

	 // Definicion del semaforo para saltar interrupciiones y definir tareas de diferentes prioridades



	 vTaskStartScheduler();
 8000ed8:	f001 ff1e 	bl	8002d18 <vTaskStartScheduler>


    /* Loop forever */
	while(1){
 8000edc:	e7fe      	b.n	8000edc <main+0x224>
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	e0001000 	.word	0xe0001000
 8000ee8:	20000274 	.word	0x20000274
 8000eec:	200003a0 	.word	0x200003a0
 8000ef0:	200000b0 	.word	0x200000b0
 8000ef4:	0800bf7c 	.word	0x0800bf7c
 8000ef8:	080013c5 	.word	0x080013c5
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	200000b4 	.word	0x200000b4
 8000f04:	0800bf88 	.word	0x0800bf88
 8000f08:	080015a9 	.word	0x080015a9
 8000f0c:	200000b8 	.word	0x200000b8
 8000f10:	0800bf94 	.word	0x0800bf94
 8000f14:	0800150d 	.word	0x0800150d
 8000f18:	200000bc 	.word	0x200000bc
 8000f1c:	0800bfa4 	.word	0x0800bfa4
 8000f20:	0800154d 	.word	0x0800154d
 8000f24:	200000c0 	.word	0x200000c0
 8000f28:	0800bfb0 	.word	0x0800bfb0
 8000f2c:	08001569 	.word	0x08001569
 8000f30:	200000c4 	.word	0x200000c4
 8000f34:	0800bfb8 	.word	0x0800bfb8
 8000f38:	08001595 	.word	0x08001595
 8000f3c:	200000cc 	.word	0x200000cc
 8000f40:	200000c8 	.word	0x200000c8
 8000f44:	08001d4d 	.word	0x08001d4d
 8000f48:	0800bfc4 	.word	0x0800bfc4
 8000f4c:	200000d0 	.word	0x200000d0

08000f50 <inSystem>:

	}
}


void inSystem (void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0


	//Descripcion de la configuracion

	// Activamos la maxima velocidad del microcontrolador
	RCC_enableMaxFrequencies(RCC_100MHz);
 8000f54:	2008      	movs	r0, #8
 8000f56:	f006 fc35 	bl	80077c4 <RCC_enableMaxFrequencies>

//	//BLINKY LED
	handlerPinA5.pGPIOx = GPIOA;
 8000f5a:	4baf      	ldr	r3, [pc, #700]	; (8001218 <inSystem+0x2c8>)
 8000f5c:	4aaf      	ldr	r2, [pc, #700]	; (800121c <inSystem+0x2cc>)
 8000f5e:	601a      	str	r2, [r3, #0]
	handlerPinA5.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
 8000f60:	4bad      	ldr	r3, [pc, #692]	; (8001218 <inSystem+0x2c8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	725a      	strb	r2, [r3, #9]
	handlerPinA5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000f66:	4bac      	ldr	r3, [pc, #688]	; (8001218 <inSystem+0x2c8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	715a      	strb	r2, [r3, #5]
	handlerPinA5.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 8000f6c:	4baa      	ldr	r3, [pc, #680]	; (8001218 <inSystem+0x2c8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	721a      	strb	r2, [r3, #8]
	handlerPinA5.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000f72:	4ba9      	ldr	r3, [pc, #676]	; (8001218 <inSystem+0x2c8>)
 8000f74:	2205      	movs	r2, #5
 8000f76:	711a      	strb	r2, [r3, #4]
	handlerPinA5.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000f78:	4ba7      	ldr	r3, [pc, #668]	; (8001218 <inSystem+0x2c8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	71da      	strb	r2, [r3, #7]
	handlerPinA5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8000f7e:	4ba6      	ldr	r3, [pc, #664]	; (8001218 <inSystem+0x2c8>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerPinA5);
 8000f84:	48a4      	ldr	r0, [pc, #656]	; (8001218 <inSystem+0x2c8>)
 8000f86:	f005 faa9 	bl	80064dc <GPIO_Config>
	GPIO_WritePin(&handlerPinA5, RESET);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	48a2      	ldr	r0, [pc, #648]	; (8001218 <inSystem+0x2c8>)
 8000f8e:	f005 fbcf 	bl	8006730 <GPIO_WritePin>
	//////////////////////////////////////////////////// Velocidad de motores //////////////////////////////////////////////


		//PWM
		// PWM motor 1
		handlerPinPwm_1.pGPIOx                             = GPIOA;
 8000f92:	4ba3      	ldr	r3, [pc, #652]	; (8001220 <inSystem+0x2d0>)
 8000f94:	4aa1      	ldr	r2, [pc, #644]	; (800121c <inSystem+0x2cc>)
 8000f96:	601a      	str	r2, [r3, #0]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000f98:	4ba1      	ldr	r3, [pc, #644]	; (8001220 <inSystem+0x2d0>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	725a      	strb	r2, [r3, #9]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000f9e:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <inSystem+0x2d0>)
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	715a      	strb	r2, [r3, #5]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8000fa4:	4b9e      	ldr	r3, [pc, #632]	; (8001220 <inSystem+0x2d0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	721a      	strb	r2, [r3, #8]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinNumber      = PIN_0;
 8000faa:	4b9d      	ldr	r3, [pc, #628]	; (8001220 <inSystem+0x2d0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	711a      	strb	r2, [r3, #4]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8000fb0:	4b9b      	ldr	r3, [pc, #620]	; (8001220 <inSystem+0x2d0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	71da      	strb	r2, [r3, #7]
		handlerPinPwm_1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8000fb6:	4b9a      	ldr	r3, [pc, #616]	; (8001220 <inSystem+0x2d0>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerPinPwm_1);
 8000fbc:	4898      	ldr	r0, [pc, #608]	; (8001220 <inSystem+0x2d0>)
 8000fbe:	f005 fa8d 	bl	80064dc <GPIO_Config>

		handlerPWM_1.ptrTIMx            = TIM5;
 8000fc2:	4b98      	ldr	r3, [pc, #608]	; (8001224 <inSystem+0x2d4>)
 8000fc4:	4a98      	ldr	r2, [pc, #608]	; (8001228 <inSystem+0x2d8>)
 8000fc6:	601a      	str	r2, [r3, #0]
		handlerPWM_1.config.channel     = PWM_CHANNEL_1;
 8000fc8:	4b96      	ldr	r3, [pc, #600]	; (8001224 <inSystem+0x2d4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	711a      	strb	r2, [r3, #4]
		handlerPWM_1.config.duttyCicle  = fixed_dutty;
 8000fce:	4b95      	ldr	r3, [pc, #596]	; (8001224 <inSystem+0x2d4>)
 8000fd0:	4a96      	ldr	r2, [pc, #600]	; (800122c <inSystem+0x2dc>)
 8000fd2:	611a      	str	r2, [r3, #16]
		handlerPWM_1.config.periodo     = 33; // se maneja 30 hz por testeo
 8000fd4:	4b93      	ldr	r3, [pc, #588]	; (8001224 <inSystem+0x2d4>)
 8000fd6:	2221      	movs	r2, #33	; 0x21
 8000fd8:	819a      	strh	r2, [r3, #12]
		handlerPWM_1.config.prescaler   = PWM_SPEED_100MHz_1us;
 8000fda:	4b92      	ldr	r3, [pc, #584]	; (8001224 <inSystem+0x2d4>)
 8000fdc:	2264      	movs	r2, #100	; 0x64
 8000fde:	609a      	str	r2, [r3, #8]
		handlerPWM_1.config.polarity    = PWM_ENABLE_POLARITY;
 8000fe0:	4b90      	ldr	r3, [pc, #576]	; (8001224 <inSystem+0x2d4>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	751a      	strb	r2, [r3, #20]
		handlerPWM_1.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8000fe6:	4b8f      	ldr	r3, [pc, #572]	; (8001224 <inSystem+0x2d4>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	755a      	strb	r2, [r3, #21]
		pwm_Config(&handlerPWM_1);
 8000fec:	488d      	ldr	r0, [pc, #564]	; (8001224 <inSystem+0x2d4>)
 8000fee:	f005 ff4d 	bl	8006e8c <pwm_Config>

		//PWM motor 2
		handlerPinPwm_2.pGPIOx                             = GPIOA;
 8000ff2:	4b8f      	ldr	r3, [pc, #572]	; (8001230 <inSystem+0x2e0>)
 8000ff4:	4a89      	ldr	r2, [pc, #548]	; (800121c <inSystem+0x2cc>)
 8000ff6:	601a      	str	r2, [r3, #0]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF2;
 8000ff8:	4b8d      	ldr	r3, [pc, #564]	; (8001230 <inSystem+0x2e0>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	725a      	strb	r2, [r3, #9]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8000ffe:	4b8c      	ldr	r3, [pc, #560]	; (8001230 <inSystem+0x2e0>)
 8001000:	2202      	movs	r2, #2
 8001002:	715a      	strb	r2, [r3, #5]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001004:	4b8a      	ldr	r3, [pc, #552]	; (8001230 <inSystem+0x2e0>)
 8001006:	2200      	movs	r2, #0
 8001008:	721a      	strb	r2, [r3, #8]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800100a:	4b89      	ldr	r3, [pc, #548]	; (8001230 <inSystem+0x2e0>)
 800100c:	2201      	movs	r2, #1
 800100e:	711a      	strb	r2, [r3, #4]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001010:	4b87      	ldr	r3, [pc, #540]	; (8001230 <inSystem+0x2e0>)
 8001012:	2200      	movs	r2, #0
 8001014:	71da      	strb	r2, [r3, #7]
		handlerPinPwm_2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001016:	4b86      	ldr	r3, [pc, #536]	; (8001230 <inSystem+0x2e0>)
 8001018:	2202      	movs	r2, #2
 800101a:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerPinPwm_2);
 800101c:	4884      	ldr	r0, [pc, #528]	; (8001230 <inSystem+0x2e0>)
 800101e:	f005 fa5d 	bl	80064dc <GPIO_Config>

		handlerPWM_2.ptrTIMx            = TIM5;
 8001022:	4b84      	ldr	r3, [pc, #528]	; (8001234 <inSystem+0x2e4>)
 8001024:	4a80      	ldr	r2, [pc, #512]	; (8001228 <inSystem+0x2d8>)
 8001026:	601a      	str	r2, [r3, #0]
		handlerPWM_2.config.channel     = PWM_CHANNEL_2;
 8001028:	4b82      	ldr	r3, [pc, #520]	; (8001234 <inSystem+0x2e4>)
 800102a:	2201      	movs	r2, #1
 800102c:	711a      	strb	r2, [r3, #4]
		handlerPWM_2.config.duttyCicle  = fixed_dutty;
 800102e:	4b81      	ldr	r3, [pc, #516]	; (8001234 <inSystem+0x2e4>)
 8001030:	4a7e      	ldr	r2, [pc, #504]	; (800122c <inSystem+0x2dc>)
 8001032:	611a      	str	r2, [r3, #16]
		handlerPWM_2.config.periodo     = 33;// se maneja 25 hz por testeo
 8001034:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <inSystem+0x2e4>)
 8001036:	2221      	movs	r2, #33	; 0x21
 8001038:	819a      	strh	r2, [r3, #12]
		handlerPWM_2.config.prescaler   = PWM_SPEED_100MHz_1us;
 800103a:	4b7e      	ldr	r3, [pc, #504]	; (8001234 <inSystem+0x2e4>)
 800103c:	2264      	movs	r2, #100	; 0x64
 800103e:	609a      	str	r2, [r3, #8]
		handlerPWM_2.config.polarity    = PWM_ENABLE_POLARITY;
 8001040:	4b7c      	ldr	r3, [pc, #496]	; (8001234 <inSystem+0x2e4>)
 8001042:	2201      	movs	r2, #1
 8001044:	751a      	strb	r2, [r3, #20]
		handlerPWM_2.config.optocoupler = PWM_ENABLE_OPTOCOUPLER;
 8001046:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <inSystem+0x2e4>)
 8001048:	2201      	movs	r2, #1
 800104a:	755a      	strb	r2, [r3, #21]
		pwm_Config(&handlerPWM_2);
 800104c:	4879      	ldr	r0, [pc, #484]	; (8001234 <inSystem+0x2e4>)
 800104e:	f005 ff1d 	bl	8006e8c <pwm_Config>
		startPwmSignal(&handlerPWM_2); // INICIAMOS EL TIMER 5 PARA AMBOS CANALES
 8001052:	4878      	ldr	r0, [pc, #480]	; (8001234 <inSystem+0x2e4>)
 8001054:	f006 f804 	bl	8007060 <startPwmSignal>

		////////////////////////////////////// Enable 1 y 2, encendido y apagado de motores //////////////////////////////////////////////



		handlerEn1PinC10.pGPIOx                             = GPIOC;
 8001058:	4b77      	ldr	r3, [pc, #476]	; (8001238 <inSystem+0x2e8>)
 800105a:	4a78      	ldr	r2, [pc, #480]	; (800123c <inSystem+0x2ec>)
 800105c:	601a      	str	r2, [r3, #0]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800105e:	4b76      	ldr	r3, [pc, #472]	; (8001238 <inSystem+0x2e8>)
 8001060:	2200      	movs	r2, #0
 8001062:	725a      	strb	r2, [r3, #9]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 8001064:	4b74      	ldr	r3, [pc, #464]	; (8001238 <inSystem+0x2e8>)
 8001066:	2201      	movs	r2, #1
 8001068:	715a      	strb	r2, [r3, #5]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinNumber      = PIN_10;
 800106a:	4b73      	ldr	r3, [pc, #460]	; (8001238 <inSystem+0x2e8>)
 800106c:	220a      	movs	r2, #10
 800106e:	711a      	strb	r2, [r3, #4]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001070:	4b71      	ldr	r3, [pc, #452]	; (8001238 <inSystem+0x2e8>)
 8001072:	2200      	movs	r2, #0
 8001074:	721a      	strb	r2, [r3, #8]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001076:	4b70      	ldr	r3, [pc, #448]	; (8001238 <inSystem+0x2e8>)
 8001078:	2200      	movs	r2, #0
 800107a:	71da      	strb	r2, [r3, #7]
		handlerEn1PinC10.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800107c:	4b6e      	ldr	r3, [pc, #440]	; (8001238 <inSystem+0x2e8>)
 800107e:	2202      	movs	r2, #2
 8001080:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerEn1PinC10);
 8001082:	486d      	ldr	r0, [pc, #436]	; (8001238 <inSystem+0x2e8>)
 8001084:	f005 fa2a 	bl	80064dc <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerEn1PinC10, RESET);
 8001088:	2100      	movs	r1, #0
 800108a:	486b      	ldr	r0, [pc, #428]	; (8001238 <inSystem+0x2e8>)
 800108c:	f005 fb7b 	bl	8006786 <GPIO_WritePin_Afopt>

		handlerEn2PinC11.pGPIOx                             = GPIOC;
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <inSystem+0x2f0>)
 8001092:	4a6a      	ldr	r2, [pc, #424]	; (800123c <inSystem+0x2ec>)
 8001094:	601a      	str	r2, [r3, #0]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001096:	4b6a      	ldr	r3, [pc, #424]	; (8001240 <inSystem+0x2f0>)
 8001098:	2200      	movs	r2, #0
 800109a:	725a      	strb	r2, [r3, #9]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800109c:	4b68      	ldr	r3, [pc, #416]	; (8001240 <inSystem+0x2f0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	715a      	strb	r2, [r3, #5]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinNumber      = PIN_11;
 80010a2:	4b67      	ldr	r3, [pc, #412]	; (8001240 <inSystem+0x2f0>)
 80010a4:	220b      	movs	r2, #11
 80010a6:	711a      	strb	r2, [r3, #4]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <inSystem+0x2f0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	721a      	strb	r2, [r3, #8]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010ae:	4b64      	ldr	r3, [pc, #400]	; (8001240 <inSystem+0x2f0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	71da      	strb	r2, [r3, #7]
		handlerEn2PinC11.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010b4:	4b62      	ldr	r3, [pc, #392]	; (8001240 <inSystem+0x2f0>)
 80010b6:	2202      	movs	r2, #2
 80010b8:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerEn2PinC11);
 80010ba:	4861      	ldr	r0, [pc, #388]	; (8001240 <inSystem+0x2f0>)
 80010bc:	f005 fa0e 	bl	80064dc <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerEn2PinC11, RESET);
 80010c0:	2100      	movs	r1, #0
 80010c2:	485f      	ldr	r0, [pc, #380]	; (8001240 <inSystem+0x2f0>)
 80010c4:	f005 fb5f 	bl	8006786 <GPIO_WritePin_Afopt>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////////// In 1 y 2, direccion de colores CW y CCW //////////////////////////////////////////////

		handlerIn1PinC12.pGPIOx                             = GPIOC;
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <inSystem+0x2f4>)
 80010ca:	4a5c      	ldr	r2, [pc, #368]	; (800123c <inSystem+0x2ec>)
 80010cc:	601a      	str	r2, [r3, #0]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <inSystem+0x2f4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	725a      	strb	r2, [r3, #9]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <inSystem+0x2f4>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	715a      	strb	r2, [r3, #5]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinNumber      = PIN_12;
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <inSystem+0x2f4>)
 80010dc:	220c      	movs	r2, #12
 80010de:	711a      	strb	r2, [r3, #4]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <inSystem+0x2f4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	721a      	strb	r2, [r3, #8]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <inSystem+0x2f4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	71da      	strb	r2, [r3, #7]
		handlerIn1PinC12.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <inSystem+0x2f4>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerIn1PinC12);
 80010f2:	4854      	ldr	r0, [pc, #336]	; (8001244 <inSystem+0x2f4>)
 80010f4:	f005 f9f2 	bl	80064dc <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerIn1PinC12, RESET); // default
 80010f8:	2100      	movs	r1, #0
 80010fa:	4852      	ldr	r0, [pc, #328]	; (8001244 <inSystem+0x2f4>)
 80010fc:	f005 fb43 	bl	8006786 <GPIO_WritePin_Afopt>

		handlerIn2PinD2.pGPIOx                             = GPIOD;
 8001100:	4b51      	ldr	r3, [pc, #324]	; (8001248 <inSystem+0x2f8>)
 8001102:	4a52      	ldr	r2, [pc, #328]	; (800124c <inSystem+0x2fc>)
 8001104:	601a      	str	r2, [r3, #0]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 8001106:	4b50      	ldr	r3, [pc, #320]	; (8001248 <inSystem+0x2f8>)
 8001108:	2200      	movs	r2, #0
 800110a:	725a      	strb	r2, [r3, #9]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_OUT;
 800110c:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <inSystem+0x2f8>)
 800110e:	2201      	movs	r2, #1
 8001110:	715a      	strb	r2, [r3, #5]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinNumber      = PIN_2;
 8001112:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <inSystem+0x2f8>)
 8001114:	2202      	movs	r2, #2
 8001116:	711a      	strb	r2, [r3, #4]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001118:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <inSystem+0x2f8>)
 800111a:	2200      	movs	r2, #0
 800111c:	721a      	strb	r2, [r3, #8]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <inSystem+0x2f8>)
 8001120:	2200      	movs	r2, #0
 8001122:	71da      	strb	r2, [r3, #7]
		handlerIn2PinD2.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001124:	4b48      	ldr	r3, [pc, #288]	; (8001248 <inSystem+0x2f8>)
 8001126:	2202      	movs	r2, #2
 8001128:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerIn2PinD2);
 800112a:	4847      	ldr	r0, [pc, #284]	; (8001248 <inSystem+0x2f8>)
 800112c:	f005 f9d6 	bl	80064dc <GPIO_Config>
		GPIO_WritePin_Afopt(&handlerIn2PinD2, RESET); // default
 8001130:	2100      	movs	r1, #0
 8001132:	4845      	ldr	r0, [pc, #276]	; (8001248 <inSystem+0x2f8>)
 8001134:	f005 fb27 	bl	8006786 <GPIO_WritePin_Afopt>
		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////////// Conteo de encoders motor 1 y motor 2//////////////////////////////////////////////


		handlerEncoder1PinC1.pGPIOx                             = GPIOC;
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <inSystem+0x300>)
 800113a:	4a40      	ldr	r2, [pc, #256]	; (800123c <inSystem+0x2ec>)
 800113c:	601a      	str	r2, [r3, #0]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800113e:	4b44      	ldr	r3, [pc, #272]	; (8001250 <inSystem+0x300>)
 8001140:	2200      	movs	r2, #0
 8001142:	725a      	strb	r2, [r3, #9]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <inSystem+0x300>)
 8001146:	2200      	movs	r2, #0
 8001148:	715a      	strb	r2, [r3, #5]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinNumber      = PIN_1;
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <inSystem+0x300>)
 800114c:	2201      	movs	r2, #1
 800114e:	711a      	strb	r2, [r3, #4]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <inSystem+0x300>)
 8001152:	2200      	movs	r2, #0
 8001154:	721a      	strb	r2, [r3, #8]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <inSystem+0x300>)
 8001158:	2200      	movs	r2, #0
 800115a:	71da      	strb	r2, [r3, #7]
		handlerEncoder1PinC1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <inSystem+0x300>)
 800115e:	2202      	movs	r2, #2
 8001160:	719a      	strb	r2, [r3, #6]
		handlerExtiConEnc_1.pGPIOHandler                        = &handlerEncoder1PinC1;
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <inSystem+0x304>)
 8001164:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <inSystem+0x300>)
 8001166:	601a      	str	r2, [r3, #0]
		handlerExtiConEnc_1.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 8001168:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <inSystem+0x304>)
 800116a:	2202      	movs	r2, #2
 800116c:	711a      	strb	r2, [r3, #4]
		extInt_Config(&handlerExtiConEnc_1);
 800116e:	4839      	ldr	r0, [pc, #228]	; (8001254 <inSystem+0x304>)
 8001170:	f004 f976 	bl	8005460 <extInt_Config>

		handlerEncoder2PinC3.pGPIOx                             = GPIOC;
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <inSystem+0x308>)
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <inSystem+0x2ec>)
 8001178:	601a      	str	r2, [r3, #0]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinAltFunMode  = AF0;
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <inSystem+0x308>)
 800117c:	2200      	movs	r2, #0
 800117e:	725a      	strb	r2, [r3, #9]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_IN;
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <inSystem+0x308>)
 8001182:	2200      	movs	r2, #0
 8001184:	715a      	strb	r2, [r3, #5]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinNumber      = PIN_3;
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <inSystem+0x308>)
 8001188:	2203      	movs	r2, #3
 800118a:	711a      	strb	r2, [r3, #4]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_PUSHPULL;
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <inSystem+0x308>)
 800118e:	2200      	movs	r2, #0
 8001190:	721a      	strb	r2, [r3, #8]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <inSystem+0x308>)
 8001194:	2200      	movs	r2, #0
 8001196:	71da      	strb	r2, [r3, #7]
		handlerEncoder2PinC3.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_FAST;
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <inSystem+0x308>)
 800119a:	2202      	movs	r2, #2
 800119c:	719a      	strb	r2, [r3, #6]
		handlerExtiConEnc_2.pGPIOHandler                        = &handlerEncoder2PinC3;
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <inSystem+0x30c>)
 80011a0:	4a2d      	ldr	r2, [pc, #180]	; (8001258 <inSystem+0x308>)
 80011a2:	601a      	str	r2, [r3, #0]
		handlerExtiConEnc_2.edgeType                            = EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <inSystem+0x30c>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	711a      	strb	r2, [r3, #4]
		extInt_Config(&handlerExtiConEnc_2);
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <inSystem+0x30c>)
 80011ac:	f004 f958 	bl	8005460 <extInt_Config>

		///////////////////////////////////////////Comunicación serial para comandos //////////////////////////////////////////////


		//USART 2 Comunicacion serial
		handlerUSART_RX.pGPIOx = GPIOA;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <inSystem+0x310>)
 80011b2:	4a1a      	ldr	r2, [pc, #104]	; (800121c <inSystem+0x2cc>)
 80011b4:	601a      	str	r2, [r3, #0]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <inSystem+0x310>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	725a      	strb	r2, [r3, #9]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <inSystem+0x310>)
 80011be:	2202      	movs	r2, #2
 80011c0:	715a      	strb	r2, [r3, #5]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <inSystem+0x310>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	721a      	strb	r2, [r3, #8]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <inSystem+0x310>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	711a      	strb	r2, [r3, #4]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <inSystem+0x310>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	71da      	strb	r2, [r3, #7]
		handlerUSART_RX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <inSystem+0x310>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerUSART_RX);
 80011da:	4821      	ldr	r0, [pc, #132]	; (8001260 <inSystem+0x310>)
 80011dc:	f005 f97e 	bl	80064dc <GPIO_Config>


		handlerUSART_TX.pGPIOx = GPIOA;
 80011e0:	4b20      	ldr	r3, [pc, #128]	; (8001264 <inSystem+0x314>)
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <inSystem+0x2cc>)
 80011e4:	601a      	str	r2, [r3, #0]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinAltFunMode = AF7;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <inSystem+0x314>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	725a      	strb	r2, [r3, #9]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <inSystem+0x314>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	715a      	strb	r2, [r3, #5]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PUSHPULL;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <inSystem+0x314>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	721a      	strb	r2, [r3, #8]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <inSystem+0x314>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	711a      	strb	r2, [r3, #4]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <inSystem+0x314>)
 8001200:	2200      	movs	r2, #0
 8001202:	71da      	strb	r2, [r3, #7]
		handlerUSART_TX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OSPEEDR_FAST;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <inSystem+0x314>)
 8001206:	2202      	movs	r2, #2
 8001208:	719a      	strb	r2, [r3, #6]
		GPIO_Config(&handlerUSART_TX);
 800120a:	4816      	ldr	r0, [pc, #88]	; (8001264 <inSystem+0x314>)
 800120c:	f005 f966 	bl	80064dc <GPIO_Config>

		handlerUSART2.ptrUSARTx                      = USART2;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <inSystem+0x318>)
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <inSystem+0x31c>)
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e02b      	b.n	8001270 <inSystem+0x320>
 8001218:	200000d4 	.word	0x200000d4
 800121c:	40020000 	.word	0x40020000
 8001220:	2000018c 	.word	0x2000018c
 8001224:	2000023c 	.word	0x2000023c
 8001228:	40000c00 	.word	0x40000c00
 800122c:	41e00000 	.word	0x41e00000
 8001230:	20000198 	.word	0x20000198
 8001234:	20000254 	.word	0x20000254
 8001238:	200001b0 	.word	0x200001b0
 800123c:	40020800 	.word	0x40020800
 8001240:	200001a4 	.word	0x200001a4
 8001244:	200001c8 	.word	0x200001c8
 8001248:	200001bc 	.word	0x200001bc
 800124c:	40020c00 	.word	0x40020c00
 8001250:	200001d4 	.word	0x200001d4
 8001254:	20000204 	.word	0x20000204
 8001258:	200001e0 	.word	0x200001e0
 800125c:	2000020c 	.word	0x2000020c
 8001260:	200000e0 	.word	0x200000e0
 8001264:	200000ec 	.word	0x200000ec
 8001268:	200000f8 	.word	0x200000f8
 800126c:	40004400 	.word	0x40004400
		handlerUSART2.USART_Config.USART_MCUvelocity = USART_50MHz_VELOCITY;
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <inSystem+0x448>)
 8001272:	4a4a      	ldr	r2, [pc, #296]	; (800139c <inSystem+0x44c>)
 8001274:	60da      	str	r2, [r3, #12]
		handlerUSART2.USART_Config.USART_baudrate    = USART_BAUDRATE_19200;
 8001276:	4b48      	ldr	r3, [pc, #288]	; (8001398 <inSystem+0x448>)
 8001278:	2201      	movs	r2, #1
 800127a:	71da      	strb	r2, [r3, #7]
		handlerUSART2.USART_Config.USART_enableInRx  = USART_INTERRUPT_RX_ENABLE;
 800127c:	4b46      	ldr	r3, [pc, #280]	; (8001398 <inSystem+0x448>)
 800127e:	2201      	movs	r2, #1
 8001280:	715a      	strb	r2, [r3, #5]
		handlerUSART2.USART_Config.USART_enableInTx  = USART_INTERRUPT_TX_DISABLE;
 8001282:	4b45      	ldr	r3, [pc, #276]	; (8001398 <inSystem+0x448>)
 8001284:	2200      	movs	r2, #0
 8001286:	711a      	strb	r2, [r3, #4]
		handlerUSART2.USART_Config.USART_mode        = USART_MODE_RXTX;
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <inSystem+0x448>)
 800128a:	2202      	movs	r2, #2
 800128c:	719a      	strb	r2, [r3, #6]
		handlerUSART2.USART_Config.USART_parity      = USART_PARITY_NONE;
 800128e:	4b42      	ldr	r3, [pc, #264]	; (8001398 <inSystem+0x448>)
 8001290:	2200      	movs	r2, #0
 8001292:	725a      	strb	r2, [r3, #9]
		handlerUSART2.USART_Config.USART_stopbits    = USART_STOPBIT_1;
 8001294:	4b40      	ldr	r3, [pc, #256]	; (8001398 <inSystem+0x448>)
 8001296:	2200      	movs	r2, #0
 8001298:	729a      	strb	r2, [r3, #10]
		handlerUSART2.USART_Config.USART_datasize    = USART_DATASIZE_8BIT;
 800129a:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <inSystem+0x448>)
 800129c:	2200      	movs	r2, #0
 800129e:	721a      	strb	r2, [r3, #8]
		USART_Config(&handlerUSART2);
 80012a0:	483d      	ldr	r0, [pc, #244]	; (8001398 <inSystem+0x448>)
 80012a2:	f006 fe0b 	bl	8007ebc <USART_Config>
		usart_Set_Priority(&handlerUSART2, e_USART_PRIORITY_6);
 80012a6:	2106      	movs	r1, #6
 80012a8:	483b      	ldr	r0, [pc, #236]	; (8001398 <inSystem+0x448>)
 80012aa:	f007 faad 	bl	8008808 <usart_Set_Priority>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		///////////////////////////////////////////Timer para el control de la Distancia y la velocidad//////////////////////////////////////////////

		handlerTIM2_PARAMETROS_MOVIMIENTO.ptrTIMx                           = TIM2;
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <inSystem+0x450>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
		handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_interruptEnable  = BTIMER_ENABLE_INTERRUPT;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <inSystem+0x450>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	741a      	strb	r2, [r3, #16]
		handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <inSystem+0x450>)
 80012be:	2200      	movs	r2, #0
 80012c0:	711a      	strb	r2, [r3, #4]
		handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_10us;
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <inSystem+0x450>)
 80012c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c8:	609a      	str	r2, [r3, #8]
		handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period           = 16;
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <inSystem+0x450>)
 80012cc:	2210      	movs	r2, #16
 80012ce:	60da      	str	r2, [r3, #12]
		BasicTimer_Config(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 80012d0:	4833      	ldr	r0, [pc, #204]	; (80013a0 <inSystem+0x450>)
 80012d2:	f003 fc81 	bl	8004bd8 <BasicTimer_Config>
		TIM_SetPriority(&handlerTIM2_PARAMETROS_MOVIMIENTO, e_TIM_PRIORITY_6);
 80012d6:	2106      	movs	r1, #6
 80012d8:	4831      	ldr	r0, [pc, #196]	; (80013a0 <inSystem+0x450>)
 80012da:	f003 fdf7 	bl	8004ecc <TIM_SetPriority>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Configuracion PINES B8 (SCL) B9 (SDA) e I2C1 //////////////////////////////////////////////

		handler_PINB8_I2C1.pGPIOx                             = GPIOB;
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <inSystem+0x454>)
 80012e0:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <inSystem+0x458>)
 80012e2:	601a      	str	r2, [r3, #0]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <inSystem+0x454>)
 80012e6:	2204      	movs	r2, #4
 80012e8:	725a      	strb	r2, [r3, #9]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <inSystem+0x454>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	715a      	strb	r2, [r3, #5]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_8;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <inSystem+0x454>)
 80012f2:	2208      	movs	r2, #8
 80012f4:	711a      	strb	r2, [r3, #4]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <inSystem+0x454>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	721a      	strb	r2, [r3, #8]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <inSystem+0x454>)
 80012fe:	2200      	movs	r2, #0
 8001300:	71da      	strb	r2, [r3, #7]
		handler_PINB8_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <inSystem+0x454>)
 8001304:	2203      	movs	r2, #3
 8001306:	719a      	strb	r2, [r3, #6]

		handler_PINB9_I2C1.pGPIOx                             = GPIOB;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <inSystem+0x45c>)
 800130a:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <inSystem+0x458>)
 800130c:	601a      	str	r2, [r3, #0]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinAltFunMode  = AF4;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <inSystem+0x45c>)
 8001310:	2204      	movs	r2, #4
 8001312:	725a      	strb	r2, [r3, #9]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinMode        = GPIO_MODE_ALTFN;
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <inSystem+0x45c>)
 8001316:	2202      	movs	r2, #2
 8001318:	715a      	strb	r2, [r3, #5]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinNumber      = PIN_9;
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <inSystem+0x45c>)
 800131c:	2209      	movs	r2, #9
 800131e:	711a      	strb	r2, [r3, #4]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinOPType      = GPIO_OTYPE_OPENDRAIN;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <inSystem+0x45c>)
 8001322:	2201      	movs	r2, #1
 8001324:	721a      	strb	r2, [r3, #8]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NOTHING;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <inSystem+0x45c>)
 8001328:	2200      	movs	r2, #0
 800132a:	71da      	strb	r2, [r3, #7]
		handler_PINB9_I2C1.GPIO_PinConfig.GPIO_PinSpeed       = GPIO_OSPEEDR_HIGH;
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <inSystem+0x45c>)
 800132e:	2203      	movs	r2, #3
 8001330:	719a      	strb	r2, [r3, #6]

		handler_I2C1.ptrI2Cx = I2C1;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <inSystem+0x460>)
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <inSystem+0x464>)
 8001336:	601a      	str	r2, [r3, #0]
		handler_I2C1.I2C_Config.clkSpeed = MAIN_CLOCK_50_MHz_FOR_I2C;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <inSystem+0x460>)
 800133a:	2232      	movs	r2, #50	; 0x32
 800133c:	71da      	strb	r2, [r3, #7]
		handler_I2C1.I2C_Config.slaveAddress = ADDRESS_DOWN;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <inSystem+0x460>)
 8001340:	2268      	movs	r2, #104	; 0x68
 8001342:	711a      	strb	r2, [r3, #4]
		handler_I2C1.I2C_Config.modeI2C = I2C_MODE_FM;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <inSystem+0x460>)
 8001346:	2201      	movs	r2, #1
 8001348:	715a      	strb	r2, [r3, #5]

		handler_MPUAccel_6050.ptrGPIOhandlerSCL  = &handler_PINB8_I2C1;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <inSystem+0x468>)
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <inSystem+0x454>)
 800134e:	605a      	str	r2, [r3, #4]
		handler_MPUAccel_6050.ptrGPIOhandlerSDA  = &handler_PINB9_I2C1;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <inSystem+0x468>)
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <inSystem+0x45c>)
 8001354:	609a      	str	r2, [r3, #8]
		handler_MPUAccel_6050.ptrI2Chandler   = &handler_I2C1;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <inSystem+0x468>)
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <inSystem+0x460>)
 800135a:	60da      	str	r2, [r3, #12]
		handler_MPUAccel_6050.fullScaleACCEL  = ACCEL_2G;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <inSystem+0x468>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
		handler_MPUAccel_6050.fullScaleGYRO   = GYRO_250;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <inSystem+0x468>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
		configMPUAccel(&handler_MPUAccel_6050);
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <inSystem+0x468>)
 800136a:	f005 fa6f 	bl	800684c <configMPUAccel>

		//////////////////////////////////////////////////// /////////////////// //////////////////////////////////////////////

		////////////////////////////////Timer 4 para contador de tiempo ////////////////////////////////////

		handlerTIM4_time.ptrTIMx                           = TIM4;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <inSystem+0x46c>)
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <inSystem+0x470>)
 8001372:	601a      	str	r2, [r3, #0]
		handlerTIM4_time.TIMx_Config.TIMx_interruptEnable  = BTIMER_DISABLE_INTERRUPT;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <inSystem+0x46c>)
 8001376:	2200      	movs	r2, #0
 8001378:	741a      	strb	r2, [r3, #16]
		handlerTIM4_time.TIMx_Config.TIMx_mode             = BTIMER_MODE_UP;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <inSystem+0x46c>)
 800137c:	2200      	movs	r2, #0
 800137e:	711a      	strb	r2, [r3, #4]
		handlerTIM4_time.TIMx_Config.TIMx_speed            = BTIMER_SPEED_100MHz_100us;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <inSystem+0x46c>)
 8001382:	f242 7210 	movw	r2, #10000	; 0x2710
 8001386:	609a      	str	r2, [r3, #8]
		handlerTIM4_time.TIMx_Config.TIMx_period           = 1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <inSystem+0x46c>)
 800138a:	2201      	movs	r2, #1
 800138c:	60da      	str	r2, [r3, #12]
		BasicTimer_Config(&handlerTIM4_time);
 800138e:	480b      	ldr	r0, [pc, #44]	; (80013bc <inSystem+0x46c>)
 8001390:	f003 fc22 	bl	8004bd8 <BasicTimer_Config>




}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200000f8 	.word	0x200000f8
 800139c:	02faf080 	.word	0x02faf080
 80013a0:	20000214 	.word	0x20000214
 80013a4:	200001ec 	.word	0x200001ec
 80013a8:	40020400 	.word	0x40020400
 80013ac:	200001f8 	.word	0x200001f8
 80013b0:	2000026c 	.word	0x2000026c
 80013b4:	40005400 	.word	0x40005400
 80013b8:	20000274 	.word	0x20000274
 80013bc:	20000228 	.word	0x20000228
 80013c0:	40000800 	.word	0x40000800

080013c4 <vTask_Menu>:
}

//////////////////////////////////////////////////////////////////////// MENU STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Menu( void * pvParameters ){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t *cmd;

	const char* msg_menu = "==================================\n"
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <vTask_Menu+0x124>)
 80013ce:	60fb      	str	r3, [r7, #12]
						   "Enter your choice here:";

	while (1){

		// Envia a imprimir en la consola lo que se debe mostrar en el menu
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <vTask_Menu+0x128>)
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	f107 010c 	add.w	r1, r7, #12
 80013d8:	2300      	movs	r3, #0
 80013da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013de:	f000 fe8b 	bl	80020f8 <xQueueGenericSend>

		// Se queda esperando a recibir el comando que se debe ejecutar
		xTaskNotifyWait (0,0,&cmd_addr, portMAX_DELAY);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ea:	9200      	str	r2, [sp, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	f002 f927 	bl	8003644 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	617b      	str	r3, [r7, #20]

		// El comando recibido solo tener el largo de 1 caracter
		if(cmd->functionType != -1){
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001402:	d052      	beq.n	80014aa <vTask_Menu+0xe6>

			switch (cmd->functionType) {
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d030      	beq.n	800146e <vTask_Menu+0xaa>
 800140c:	2b03      	cmp	r3, #3
 800140e:	dc43      	bgt.n	8001498 <vTask_Menu+0xd4>
 8001410:	2b01      	cmp	r3, #1
 8001412:	d002      	beq.n	800141a <vTask_Menu+0x56>
 8001414:	2b02      	cmp	r3, #2
 8001416:	d015      	beq.n	8001444 <vTask_Menu+0x80>
 8001418:	e03e      	b.n	8001498 <vTask_Menu+0xd4>
				case 1:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <vTask_Menu+0x128>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001424:	4932      	ldr	r1, [pc, #200]	; (80014f0 <vTask_Menu+0x12c>)
 8001426:	f000 fe67 	bl	80020f8 <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <vTask_Menu+0x130>)
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Go,0,eNoAction);
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <vTask_Menu+0x134>)
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	f002 f981 	bl	8003744 <xTaskGenericNotify>


					break;
 8001442:	e046      	b.n	80014d2 <vTask_Menu+0x10e>
				}case 2:{

					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_1,portMAX_DELAY);
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <vTask_Menu+0x128>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800144e:	4928      	ldr	r1, [pc, #160]	; (80014f0 <vTask_Menu+0x12c>)
 8001450:	f000 fe52 	bl	80020f8 <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sGo;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <vTask_Menu+0x130>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <vTask_Menu+0x138>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2300      	movs	r3, #0
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	f002 f96c 	bl	8003744 <xTaskGenericNotify>


					break;
 800146c:	e031      	b.n	80014d2 <vTask_Menu+0x10e>
				}case 3:{
					//Envia a imprimir en la consola lo que se debe mostrar en el menu
					xQueueSend(xQueue_Print,&msg_option_2,portMAX_DELAY);
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <vTask_Menu+0x128>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	2300      	movs	r3, #0
 8001474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001478:	4921      	ldr	r1, [pc, #132]	; (8001500 <vTask_Menu+0x13c>)
 800147a:	f000 fe3d 	bl	80020f8 <xQueueGenericSend>

					// Aca se deberia notificar para cambiar la variable next_state y notification
					next_state = sMainMenu;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <vTask_Menu+0x130>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
					xTaskNotify(xHandleTask_Menu,0,eNoAction);
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <vTask_Menu+0x138>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	2300      	movs	r3, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	f002 f957 	bl	8003744 <xTaskGenericNotify>



					break;
 8001496:	e01c      	b.n	80014d2 <vTask_Menu+0x10e>
				}
				default:{
					xQueueSend(xQueue_Print,&msg_option_n,portMAX_DELAY);
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <vTask_Menu+0x128>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a2:	4918      	ldr	r1, [pc, #96]	; (8001504 <vTask_Menu+0x140>)
 80014a4:	f000 fe28 	bl	80020f8 <xQueueGenericSend>
					continue;
 80014a8:	e01c      	b.n	80014e4 <vTask_Menu+0x120>

				}
			}

		}else{
			xQueueSend(xQueue_Print, &msg_invalid,portMAX_DELAY);
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <vTask_Menu+0x128>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	2300      	movs	r3, #0
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b4:	4914      	ldr	r1, [pc, #80]	; (8001508 <vTask_Menu+0x144>)
 80014b6:	f000 fe1f 	bl	80020f8 <xQueueGenericSend>
			//Aca se deberia notificar cambiar la variable next_state y notificar
			next_state = sMainMenu;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <vTask_Menu+0x130>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
			xTaskNotify(xHandleTask_Menu,0,eNoAction);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <vTask_Menu+0x138>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	f002 f939 	bl	8003744 <xTaskGenericNotify>
		}

		// La tarea vuelve a quedar en un estado de espera por un tiempo indefinido
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2300      	movs	r3, #0
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2000      	movs	r0, #0
 80014e0:	f002 f8b0 	bl	8003644 <xTaskGenericNotifyWait>
		xQueueSend(xQueue_Print, &msg_menu, portMAX_DELAY);
 80014e4:	e774      	b.n	80013d0 <vTask_Menu+0xc>
 80014e6:	bf00      	nop
 80014e8:	0800bfd0 	.word	0x0800bfd0
 80014ec:	200000c8 	.word	0x200000c8
 80014f0:	20000004 	.word	0x20000004
 80014f4:	2000034c 	.word	0x2000034c
 80014f8:	200000c0 	.word	0x200000c0
 80014fc:	200000b0 	.word	0x200000b0
 8001500:	20000008 	.word	0x20000008
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000000 	.word	0x20000000

0800150c <vTask_Commands>:

	}// Fin del loop de esta tarea

}

void vTask_Commands( void * pvParameters ){
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af02      	add	r7, sp, #8
 8001512:	6078      	str	r0, [r7, #4]

	BaseType_t notify_status = {0};
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
	command_t cmd = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]

   while(1){

	   //Esperamos la notificacion desde la interrupcion
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f002 f886 	bl	8003644 <xTaskGenericNotifyWait>
 8001538:	61f8      	str	r0, [r7, #28]

	   //Cuando es verdadero significa que se recibio una notificacion
	   if (notify_status == pdPASS){
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d1f2      	bne.n	8001526 <vTask_Commands+0x1a>

		   process_command(&cmd);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f847 	bl	80015d8 <process_command>
	   notify_status = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800154a:	e7ec      	b.n	8001526 <vTask_Commands+0x1a>

0800154c <vTask_Stop>:


////////////////////////////////////////////////////////////////////////STOP STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Stop( void * pvParameters ){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
 8001552:	6078      	str	r0, [r7, #4]

	while(1){
		 //Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f002 f86f 	bl	8003644 <xTaskGenericNotifyWait>
 8001566:	e7f5      	b.n	8001554 <vTask_Stop+0x8>

08001568 <vTask_Go>:


////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void vTask_Go( void * pvParameters ){
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]


	while(1){

		//Esperamos la notificacion desde la interrupcion de comandos
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2000      	movs	r0, #0
 800157e:	f002 f861 	bl	8003644 <xTaskGenericNotifyWait>

		 On_Off_motor(SET);
 8001582:	2001      	movs	r0, #1
 8001584:	f000 fb98 	bl	8001cb8 <On_Off_motor>
		 startTimer(&handlerTIM2_PARAMETROS_MOVIMIENTO);
 8001588:	4801      	ldr	r0, [pc, #4]	; (8001590 <vTask_Go+0x28>)
 800158a:	f003 ff27 	bl	80053dc <startTimer>
		 xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // Esoerar hasta que la notificacion salte
 800158e:	e7ef      	b.n	8001570 <vTask_Go+0x8>
 8001590:	20000214 	.word	0x20000214

08001594 <vTask_PID>:


}


void vTask_PID( void * pvParameters ){
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]



}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <vTask_Print>:

////////////////////////////////////////////////////////////////////////GO STATE/////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void vTask_Print( void * pvParameters ){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

	uint32_t *msg;

   while(1){

	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <vTask_Print+0x28>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f107 010c 	add.w	r1, r7, #12
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 ff43 	bl	8002448 <xQueueReceive>
	   //usart write command
	   writeMsg(&handlerUSART2, (char*) msg);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <vTask_Print+0x2c>)
 80015c8:	f007 f858 	bl	800867c <writeMsg>
	   xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 80015cc:	e7f0      	b.n	80015b0 <vTask_Print+0x8>
 80015ce:	bf00      	nop
 80015d0:	200000c8 	.word	0x200000c8
 80015d4:	200000f8 	.word	0x200000f8

080015d8 <process_command>:
   }
}

void process_command (command_t *cmd){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af02      	add	r7, sp, #8
 80015de:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f821 	bl	8001628 <extract_command>


	if (next_state == sMainMenu){
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <process_command+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <process_command+0x2a>
		//Notificamos a la tarea respectiva
		xTaskNotify(xHandleTask_Menu,(uint32_t)cmd, eSetValueWithOverwrite);
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <process_command+0x48>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2303      	movs	r3, #3
 80015fa:	2100      	movs	r1, #0
 80015fc:	f002 f8a2 	bl	8003744 <xTaskGenericNotify>
		//Notificamos a la tarea en el estado de parada.
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
	}


}
 8001600:	e008      	b.n	8001614 <process_command+0x3c>
		xTaskNotify(xHandleTask_Stop,0, eNoAction);
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <process_command+0x4c>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	f002 f898 	bl	8003744 <xTaskGenericNotify>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000034c 	.word	0x2000034c
 8001620:	200000b0 	.word	0x200000b0
 8001624:	200000bc 	.word	0x200000bc

08001628 <extract_command>:

int extract_command (command_t *cmd){
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	6078      	str	r0, [r7, #4]

	uint8_t item;
	uint8_t counter_j = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;

	status = uxQueueMessagesWaiting(xQueue_InputData);
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <extract_command+0x9c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f001 f874 	bl	8002726 <uxQueueMessagesWaiting>
 800163e:	4603      	mov	r3, r0
 8001640:	613b      	str	r3, [r7, #16]
	if (status == 0){
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <extract_command+0x26>
		return -1;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800164c:	e036      	b.n	80016bc <extract_command+0x94>
	}

	do{
		// Recibimos un elemento y lo montamos en el item ademas no deseamos bloquarlo
		status = xQueueReceive(xQueue_InputData, &item,0);
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <extract_command+0x9c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f107 010f 	add.w	r1, r7, #15
 8001656:	2200      	movs	r2, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f000 fef5 	bl	8002448 <xQueueReceive>
 800165e:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE){
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d106      	bne.n	8001674 <extract_command+0x4c>

			//vamos llenando el arreglo del comando
			cmd->payload[counter_j++] = item;
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	75fa      	strb	r2, [r7, #23]
 800166c:	461a      	mov	r2, r3
 800166e:	7bf9      	ldrb	r1, [r7, #15]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	5499      	strb	r1, [r3, r2]

		}
	}while(item != '#');
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	2b23      	cmp	r3, #35	; 0x23
 8001678:	d1e9      	bne.n	800164e <extract_command+0x26>

	cmd->payload[counter_j-1] = '\0'; // Agregamos la terminacion nula para que tengamos un string
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	3b01      	subs	r3, #1
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	2100      	movs	r1, #0
 8001682:	54d1      	strb	r1, [r2, r3]

	// Del comando entregado extraemos toda la informacion necesaria para poder usarla luego en los estados necesarios
	sscanf((char *) cmd->payload, "%s %u %u %u %s", function ,&firstParameter, &secondParameter, &thirdParameter, userMsg);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <extract_command+0xa0>)
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <extract_command+0xa4>)
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <extract_command+0xa8>)
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <extract_command+0xac>)
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <extract_command+0xb0>)
 8001696:	4911      	ldr	r1, [pc, #68]	; (80016dc <extract_command+0xb4>)
 8001698:	f007 fcfc 	bl	8009094 <siscanf>

	if (strcmp(function, "Go") == 0){
 800169c:	4910      	ldr	r1, [pc, #64]	; (80016e0 <extract_command+0xb8>)
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <extract_command+0xb0>)
 80016a0:	f7fe fd9e 	bl	80001e0 <strcmp>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <extract_command+0x8a>
			cmd->functionType = 1;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	e003      	b.n	80016ba <extract_command+0x92>
	}else{
		cmd->functionType = -1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b8:	60da      	str	r2, [r3, #12]
	}

	return 0;
 80016ba:	2300      	movs	r3, #0

}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200000cc 	.word	0x200000cc
 80016c8:	2000030c 	.word	0x2000030c
 80016cc:	20000308 	.word	0x20000308
 80016d0:	20000304 	.word	0x20000304
 80016d4:	20000300 	.word	0x20000300
 80016d8:	200002dc 	.word	0x200002dc
 80016dc:	0800c054 	.word	0x0800c054
 80016e0:	0800c064 	.word	0x0800c064

080016e4 <usart2Rx_Callback>:



//Interripcion USART2
void usart2Rx_Callback(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af02      	add	r7, sp, #8

	rxData = getRxData();
 80016ea:	f006 ffef 	bl	80086cc <getRxData>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <usart2Rx_Callback+0x88>)
 80016f4:	701a      	strb	r2, [r3, #0]
//
	BaseType_t xHigerPriorituTaskWoken;
	(void) xHigerPriorituTaskWoken;
	xHigerPriorituTaskWoken = pdFALSE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]

	//Verificamos que la cola aun no se encuentra llena
	xReturned = xQueueIsQueueFullFromISR(xQueue_InputData);
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <usart2Rx_Callback+0x8c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 f93f 	bl	8002982 <xQueueIsQueueFullFromISR>
 8001704:	4603      	mov	r3, r0
 8001706:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <usart2Rx_Callback+0x90>)
 8001708:	6013      	str	r3, [r2, #0]
	// Si retorna que aun tiene espacio entoncesretorna falso

	if (xReturned != pdTRUE ){
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <usart2Rx_Callback+0x90>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d007      	beq.n	8001722 <usart2Rx_Callback+0x3e>

		xQueueSendToBackFromISR(xQueue_InputData,
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <usart2Rx_Callback+0x8c>)
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	4914      	ldr	r1, [pc, #80]	; (800176c <usart2Rx_Callback+0x88>)
 800171c:	f000 fdea 	bl	80022f4 <xQueueGenericSendFromISR>
 8001720:	e011      	b.n	8001746 <usart2Rx_Callback+0x62>


	}else{


		if (rxData == '#'){
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <usart2Rx_Callback+0x88>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b23      	cmp	r3, #35	; 0x23
 8001728:	d10d      	bne.n	8001746 <usart2Rx_Callback+0x62>

			xQueueReceiveFromISR(xQueue_InputData,
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <usart2Rx_Callback+0x8c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <usart2Rx_Callback+0x88>)
 8001732:	4618      	mov	r0, r3
 8001734:	f000 ff68 	bl	8002608 <xQueueReceiveFromISR>
								 (void *) &rxData,
								 NULL);
			xQueueSendToBackFromISR(xQueue_InputData,
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <usart2Rx_Callback+0x8c>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	2300      	movs	r3, #0
 800173e:	2200      	movs	r2, #0
 8001740:	490a      	ldr	r1, [pc, #40]	; (800176c <usart2Rx_Callback+0x88>)
 8001742:	f000 fdd7 	bl	80022f4 <xQueueGenericSendFromISR>
									,NULL);
		}

	}

	if (rxData == '#'){
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <usart2Rx_Callback+0x88>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b23      	cmp	r3, #35	; 0x23
 800174c:	d10a      	bne.n	8001764 <usart2Rx_Callback+0x80>
		// Se manda la notificacion de la tarea que se quiere mover al estado de RUN
		xTaskNotifyFromISR(xHandleTask_Commands,
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <usart2Rx_Callback+0x94>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	f002 f8d0 	bl	8003904 <xTaskGenericNotifyFromISR>
						   eNoAction,
						   NULL);
//		xSemaphoreGiveFromISR(xSemaphore_Handle, &xHigerPriorituTaskWoken);

	}
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002fc 	.word	0x200002fc
 8001770:	200000cc 	.word	0x200000cc
 8001774:	200000ac 	.word	0x200000ac
 8001778:	200000b8 	.word	0x200000b8
 800177c:	00000000 	.word	0x00000000

08001780 <BasicTimer2_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void){
 8001780:	b580      	push	{r7, lr}
 8001782:	ed2d 8b02 	vpush	{d8}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	//Leemos el ángulo
	//Lectura velocidad angular
	float w = readGyro_Z(&handler_MPUAccel_6050) - cal_Gyro;
 800178a:	487f      	ldr	r0, [pc, #508]	; (8001988 <BasicTimer2_Callback+0x208>)
 800178c:	f005 faf8 	bl	8006d80 <readGyro_Z>
 8001790:	ee10 3a10 	vmov	r3, s0
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feef 	bl	8000578 <__aeabi_f2d>
 800179a:	4b7c      	ldr	r3, [pc, #496]	; (800198c <BasicTimer2_Callback+0x20c>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7fe fd8a 	bl	80002b8 <__aeabi_dsub>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fa34 	bl	8000c18 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	607b      	str	r3, [r7, #4]
	//Calculo angulo
	float ang_d = (w * 16)/1000; // conversion de velocidad angular a grados absolutos con respecto al inicio del programa
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80017bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c0:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001990 <BasicTimer2_Callback+0x210>
 80017c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c8:	edc7 7a00 	vstr	s15, [r7]


	parameters_Pos_Robot.grad_relativo = ang_d;
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f7fe fed3 	bl	8000578 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	496f      	ldr	r1, [pc, #444]	; (8001994 <BasicTimer2_Callback+0x214>)
 80017d8:	e9c1 2300 	strd	r2, r3, [r1]

	//Verificamos el modo
	if(flag_mode == 1)
 80017dc:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <BasicTimer2_Callback+0x218>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f040 80f5 	bne.w	80019d0 <BasicTimer2_Callback+0x250>
	{
		//Acumulamos los angulos
		sum_ang += parameters_Pos_Robot.grad_relativo;
 80017e6:	4b6d      	ldr	r3, [pc, #436]	; (800199c <BasicTimer2_Callback+0x21c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fec4 	bl	8000578 <__aeabi_f2d>
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <BasicTimer2_Callback+0x214>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe fd61 	bl	80002bc <__adddf3>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff fa09 	bl	8000c18 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	4a64      	ldr	r2, [pc, #400]	; (800199c <BasicTimer2_Callback+0x21c>)
 800180a:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += handlerTIM2_PARAMETROS_MOVIMIENTO.TIMx_Config.TIMx_period;
 800180c:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <BasicTimer2_Callback+0x220>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <BasicTimer2_Callback+0x224>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <BasicTimer2_Callback+0x224>)
 800181c:	801a      	strh	r2, [r3, #0]

		//----------------Accion a realizar con un tiempo especifico--------------------
		if(counting_action>=timeAction_TIMER_Sampling)
 800181e:	4b62      	ldr	r3, [pc, #392]	; (80019a8 <BasicTimer2_Callback+0x228>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b61      	ldr	r3, [pc, #388]	; (80019ac <BasicTimer2_Callback+0x22c>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	f200 80a2 	bhi.w	8001972 <BasicTimer2_Callback+0x1f2>
		{
			//Guardamos el tiempo entre acciones especificas
			time_accion = time_accumulated;
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <BasicTimer2_Callback+0x224>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b5e      	ldr	r3, [pc, #376]	; (80019b0 <BasicTimer2_Callback+0x230>)
 8001836:	601a      	str	r2, [r3, #0]
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			promAng = sum_ang/counting_action;
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <BasicTimer2_Callback+0x21c>)
 800183a:	edd3 6a00 	vldr	s13, [r3]
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <BasicTimer2_Callback+0x22c>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <BasicTimer2_Callback+0x234>)
 8001850:	edc3 7a00 	vstr	s15, [r3]
			parameters_Pos_Robot.phi_relativo = (promAng*M_PI)/180;          //[rad]
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <BasicTimer2_Callback+0x234>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe8d 	bl	8000578 <__aeabi_f2d>
 800185e:	a348      	add	r3, pc, #288	; (adr r3, 8001980 <BasicTimer2_Callback+0x200>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fee0 	bl	8000628 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <BasicTimer2_Callback+0x238>)
 8001876:	f7ff f801 	bl	800087c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4945      	ldr	r1, [pc, #276]	; (8001994 <BasicTimer2_Callback+0x214>)
 8001880:	e9c1 2302 	strd	r2, r3, [r1, #8]
			parameters_Pos_Robot.phi_relativo = atan2(sin(parameters_Pos_Robot.phi_relativo),cos(parameters_Pos_Robot.phi_relativo));
 8001884:	4b43      	ldr	r3, [pc, #268]	; (8001994 <BasicTimer2_Callback+0x214>)
 8001886:	ed93 7b02 	vldr	d7, [r3, #8]
 800188a:	eeb0 0a47 	vmov.f32	s0, s14
 800188e:	eef0 0a67 	vmov.f32	s1, s15
 8001892:	f008 f99d 	bl	8009bd0 <sin>
 8001896:	eeb0 8a40 	vmov.f32	s16, s0
 800189a:	eef0 8a60 	vmov.f32	s17, s1
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <BasicTimer2_Callback+0x214>)
 80018a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80018a4:	eeb0 0a47 	vmov.f32	s0, s14
 80018a8:	eef0 0a67 	vmov.f32	s1, s15
 80018ac:	f008 f8f4 	bl	8009a98 <cos>
 80018b0:	eeb0 7a40 	vmov.f32	s14, s0
 80018b4:	eef0 7a60 	vmov.f32	s15, s1
 80018b8:	eeb0 1a47 	vmov.f32	s2, s14
 80018bc:	eef0 1a67 	vmov.f32	s3, s15
 80018c0:	eeb0 0a48 	vmov.f32	s0, s16
 80018c4:	eef0 0a68 	vmov.f32	s1, s17
 80018c8:	f008 f9da 	bl	8009c80 <atan2>
 80018cc:	eeb0 7a40 	vmov.f32	s14, s0
 80018d0:	eef0 7a60 	vmov.f32	s15, s1
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <BasicTimer2_Callback+0x214>)
 80018d6:	ed83 7b02 	vstr	d7, [r3, #8]
			//Calculamos la velocidad
			handler_Motor_1.parametersMotor.dis = (cm_1*handler_Motor_1.parametersMotor.counts);                   //[mm]
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <BasicTimer2_Callback+0x23c>)
 80018dc:	791b      	ldrb	r3, [r3, #4]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <BasicTimer2_Callback+0x240>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f0:	4b32      	ldr	r3, [pc, #200]	; (80019bc <BasicTimer2_Callback+0x23c>)
 80018f2:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_2.parametersMotor.dis = (cm_2*handler_Motor_2.parametersMotor.counts);				   //[mm]
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <BasicTimer2_Callback+0x244>)
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <BasicTimer2_Callback+0x248>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <BasicTimer2_Callback+0x244>)
 800190e:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_1.parametersMotor.vel = handler_Motor_1.parametersMotor.dis/time_accion;      //[m/s]
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <BasicTimer2_Callback+0x23c>)
 8001914:	edd3 6a03 	vldr	s13, [r3, #12]
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <BasicTimer2_Callback+0x230>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <BasicTimer2_Callback+0x23c>)
 800192a:	edc3 7a02 	vstr	s15, [r3, #8]
			handler_Motor_2.parametersMotor.vel = handler_Motor_2.parametersMotor.dis/time_accion;      //[m/s]
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <BasicTimer2_Callback+0x244>)
 8001930:	edd3 6a03 	vldr	s13, [r3, #12]
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <BasicTimer2_Callback+0x230>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <BasicTimer2_Callback+0x244>)
 8001946:	edc3 7a02 	vstr	s15, [r3, #8]
			//Reiniciamos el numero de conteos
			handler_Motor_1.parametersMotor.counts = 0;
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <BasicTimer2_Callback+0x23c>)
 800194c:	2200      	movs	r2, #0
 800194e:	711a      	strb	r2, [r3, #4]
			handler_Motor_2.parametersMotor.counts = 0;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <BasicTimer2_Callback+0x244>)
 8001952:	2200      	movs	r2, #0
 8001954:	711a      	strb	r2, [r3, #4]
			//Reiniciamos variable
			sum_ang = 0;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <BasicTimer2_Callback+0x21c>)
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <BasicTimer2_Callback+0x224>)
 8001960:	2200      	movs	r2, #0
 8001962:	801a      	strh	r2, [r3, #0]
			//Reiniciamos el contador de accion
			counting_action = 0;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <BasicTimer2_Callback+0x22c>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
			//Levantamos bandera
			flag_action = 1;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <BasicTimer2_Callback+0x24c>)
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]

		//Combinar ambos ángulos
		ang_complementary = parameters_Pos_Robot.grad_relativo + ang_for_Displament_ICR;
	}
	else{  __NOP(); }
}
 8001970:	e0c0      	b.n	8001af4 <BasicTimer2_Callback+0x374>
		else{ counting_action++; }
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <BasicTimer2_Callback+0x22c>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <BasicTimer2_Callback+0x22c>)
 800197c:	801a      	strh	r2, [r3, #0]
}
 800197e:	e0b9      	b.n	8001af4 <BasicTimer2_Callback+0x374>
 8001980:	54442d18 	.word	0x54442d18
 8001984:	400921fb 	.word	0x400921fb
 8001988:	20000274 	.word	0x20000274
 800198c:	200003a0 	.word	0x200003a0
 8001990:	447a0000 	.word	0x447a0000
 8001994:	20000358 	.word	0x20000358
 8001998:	2000034d 	.word	0x2000034d
 800199c:	200003a8 	.word	0x200003a8
 80019a0:	20000214 	.word	0x20000214
 80019a4:	20000350 	.word	0x20000350
 80019a8:	20000010 	.word	0x20000010
 80019ac:	20000352 	.word	0x20000352
 80019b0:	20000354 	.word	0x20000354
 80019b4:	200003ac 	.word	0x200003ac
 80019b8:	40668000 	.word	0x40668000
 80019bc:	20000284 	.word	0x20000284
 80019c0:	20000014 	.word	0x20000014
 80019c4:	200002b0 	.word	0x200002b0
 80019c8:	20000018 	.word	0x20000018
 80019cc:	2000034e 	.word	0x2000034e
	else if(flag_mode==2)
 80019d0:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <BasicTimer2_Callback+0x388>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	f040 808c 	bne.w	8001af2 <BasicTimer2_Callback+0x372>
		if(counting_action>=timeAction_TIMER_Sampling)
 80019da:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <BasicTimer2_Callback+0x38c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <BasicTimer2_Callback+0x390>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d870      	bhi.n	8001aca <BasicTimer2_Callback+0x34a>
			time_accion = time_accumulated;
 80019e8:	4b4a      	ldr	r3, [pc, #296]	; (8001b14 <BasicTimer2_Callback+0x394>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <BasicTimer2_Callback+0x398>)
 80019f0:	601a      	str	r2, [r3, #0]
			handler_Motor_1.parametersMotor.dis = (cm_1*handler_Motor_1.parametersMotor.counts);                   //[mm]
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <BasicTimer2_Callback+0x39c>)
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <BasicTimer2_Callback+0x3a0>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	4b44      	ldr	r3, [pc, #272]	; (8001b1c <BasicTimer2_Callback+0x39c>)
 8001a0a:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_2.parametersMotor.dis = (cm_2*handler_Motor_2.parametersMotor.counts);				   //[mm]
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <BasicTimer2_Callback+0x3a4>)
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <BasicTimer2_Callback+0x3a8>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a24:	4b3f      	ldr	r3, [pc, #252]	; (8001b24 <BasicTimer2_Callback+0x3a4>)
 8001a26:	edc3 7a03 	vstr	s15, [r3, #12]
			handler_Motor_1.parametersMotor.vel = handler_Motor_1.parametersMotor.dis/time_accion;      //[m/s]
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <BasicTimer2_Callback+0x39c>)
 8001a2c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <BasicTimer2_Callback+0x398>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <BasicTimer2_Callback+0x39c>)
 8001a42:	edc3 7a02 	vstr	s15, [r3, #8]
			handler_Motor_2.parametersMotor.vel = handler_Motor_2.parametersMotor.dis/time_accion;      //[m/s]
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <BasicTimer2_Callback+0x3a4>)
 8001a48:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a4c:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <BasicTimer2_Callback+0x398>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <BasicTimer2_Callback+0x3a4>)
 8001a5e:	edc3 7a02 	vstr	s15, [r3, #8]
			handler_Motor_2.parametersMotor.counts = 0;
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <BasicTimer2_Callback+0x3a4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	711a      	strb	r2, [r3, #4]
			handler_Motor_1.parametersMotor.counts = 0;
 8001a68:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <BasicTimer2_Callback+0x39c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	711a      	strb	r2, [r3, #4]
			ang_for_Displament_ICR += (((handler_Motor_2.parametersMotor.dis - handler_Motor_1.parametersMotor.dis)*100)
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <BasicTimer2_Callback+0x3a4>)
 8001a70:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <BasicTimer2_Callback+0x39c>)
 8001a76:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b2c <BasicTimer2_Callback+0x3ac>
 8001a82:	ee67 7a87 	vmul.f32	s15, s15, s14
					/distanceBetweenWheels)*(180/M_PI); //[rad]
 8001a86:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b30 <BasicTimer2_Callback+0x3b0>
 8001a8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a8e:	ee16 0a90 	vmov	r0, s13
 8001a92:	f7fe fd71 	bl	8000578 <__aeabi_f2d>
 8001a96:	a31a      	add	r3, pc, #104	; (adr r3, 8001b00 <BasicTimer2_Callback+0x380>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fdc4 	bl	8000628 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
			ang_for_Displament_ICR += (((handler_Motor_2.parametersMotor.dis - handler_Motor_1.parametersMotor.dis)*100)
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <BasicTimer2_Callback+0x3b4>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fc05 	bl	80002bc <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	491f      	ldr	r1, [pc, #124]	; (8001b34 <BasicTimer2_Callback+0x3b4>)
 8001ab8:	e9c1 2300 	strd	r2, r3, [r1]
			time_accumulated = 0;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <BasicTimer2_Callback+0x394>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
			counting_action = 0;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <BasicTimer2_Callback+0x390>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	e005      	b.n	8001ad6 <BasicTimer2_Callback+0x356>
		else{counting_action++;}
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <BasicTimer2_Callback+0x390>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <BasicTimer2_Callback+0x390>)
 8001ad4:	801a      	strh	r2, [r3, #0]
		ang_complementary = parameters_Pos_Robot.grad_relativo + ang_for_Displament_ICR;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <BasicTimer2_Callback+0x3b8>)
 8001ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <BasicTimer2_Callback+0x3b4>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fbeb 	bl	80002bc <__adddf3>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4914      	ldr	r1, [pc, #80]	; (8001b3c <BasicTimer2_Callback+0x3bc>)
 8001aec:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001af0:	e000      	b.n	8001af4 <BasicTimer2_Callback+0x374>
	else{  __NOP(); }
 8001af2:	bf00      	nop
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	ecbd 8b02 	vpop	{d8}
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	1a63c1f8 	.word	0x1a63c1f8
 8001b04:	404ca5dc 	.word	0x404ca5dc
 8001b08:	2000034d 	.word	0x2000034d
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000352 	.word	0x20000352
 8001b14:	20000350 	.word	0x20000350
 8001b18:	20000354 	.word	0x20000354
 8001b1c:	20000284 	.word	0x20000284
 8001b20:	20000014 	.word	0x20000014
 8001b24:	200002b0 	.word	0x200002b0
 8001b28:	20000018 	.word	0x20000018
 8001b2c:	42c80000 	.word	0x42c80000
 8001b30:	4625a000 	.word	0x4625a000
 8001b34:	200003b0 	.word	0x200003b0
 8001b38:	20000358 	.word	0x20000358
 8001b3c:	200003b8 	.word	0x200003b8

08001b40 <calibracionGyros>:

// Calibracion Gyros:

float calibracionGyros (MPUAccel_Config *ptrMPUAccel, uint8_t axis){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]

	uint16_t  numMedidas = 200;
 8001b4c:	23c8      	movs	r3, #200	; 0xc8
 8001b4e:	827b      	strh	r3, [r7, #18]
	float    medidas    = 0;
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
	float    suma       = 0;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
	uint8_t  contador   = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	76fb      	strb	r3, [r7, #27]
	float    promedio   = 0;
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

	switch (axis) {
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	2b7a      	cmp	r3, #122	; 0x7a
 8001b6a:	d05b      	beq.n	8001c24 <calibracionGyros+0xe4>
 8001b6c:	2b7a      	cmp	r3, #122	; 0x7a
 8001b6e:	dc6a      	bgt.n	8001c46 <calibracionGyros+0x106>
 8001b70:	2b78      	cmp	r3, #120	; 0x78
 8001b72:	d015      	beq.n	8001ba0 <calibracionGyros+0x60>
 8001b74:	2b79      	cmp	r3, #121	; 0x79
 8001b76:	d034      	beq.n	8001be2 <calibracionGyros+0xa2>
				contador++;
			}
			promedio = suma / numMedidas;
			break;
		}default:{
			break;
 8001b78:	e065      	b.n	8001c46 <calibracionGyros+0x106>
				medidas = readGyro_X(ptrMPUAccel);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f004 fff0 	bl	8006b60 <readGyro_X>
 8001b80:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001b84:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001b94:	7efb      	ldrb	r3, [r7, #27]
 8001b96:	3301      	adds	r3, #1
 8001b98:	76fb      	strb	r3, [r7, #27]
				delay_ms(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 f85c 	bl	8001c58 <delay_ms>
			while (contador < numMedidas){
 8001ba0:	7efb      	ldrb	r3, [r7, #27]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	8a7a      	ldrh	r2, [r7, #18]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d8e7      	bhi.n	8001b7a <calibracionGyros+0x3a>
			promedio = suma / numMedidas;
 8001baa:	8a7b      	ldrh	r3, [r7, #18]
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bbc:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001bc0:	e042      	b.n	8001c48 <calibracionGyros+0x108>
				medidas = readGyro_Y(ptrMPUAccel);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f005 f854 	bl	8006c70 <readGyro_Y>
 8001bc8:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001bcc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001bdc:	7efb      	ldrb	r3, [r7, #27]
 8001bde:	3301      	adds	r3, #1
 8001be0:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 8001be2:	7efb      	ldrb	r3, [r7, #27]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	8a7a      	ldrh	r2, [r7, #18]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8ea      	bhi.n	8001bc2 <calibracionGyros+0x82>
			promedio = suma / numMedidas;
 8001bec:	8a7b      	ldrh	r3, [r7, #18]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfe:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001c02:	e021      	b.n	8001c48 <calibracionGyros+0x108>
				medidas = readGyro_Z(ptrMPUAccel);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f005 f8bb 	bl	8006d80 <readGyro_Z>
 8001c0a:	ed87 0a03 	vstr	s0, [r7, #12]
				suma += medidas;
 8001c0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a07 	vstr	s15, [r7, #28]
				contador++;
 8001c1e:	7efb      	ldrb	r3, [r7, #27]
 8001c20:	3301      	adds	r3, #1
 8001c22:	76fb      	strb	r3, [r7, #27]
			while (contador < numMedidas){
 8001c24:	7efb      	ldrb	r3, [r7, #27]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	8a7a      	ldrh	r2, [r7, #18]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d8ea      	bhi.n	8001c04 <calibracionGyros+0xc4>
			promedio = suma / numMedidas;
 8001c2e:	8a7b      	ldrh	r3, [r7, #18]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c40:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8001c44:	e000      	b.n	8001c48 <calibracionGyros+0x108>
			break;
 8001c46:	bf00      	nop
		}
	}


	return promedio;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	ee07 3a90 	vmov	s15, r3
}
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <delay_ms>:


void delay_ms(uint16_t time_to_wait_ms){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]

	startTimer(&handlerTIM4_time);
 8001c62:	4814      	ldr	r0, [pc, #80]	; (8001cb4 <delay_ms+0x5c>)
 8001c64:	f003 fbba 	bl	80053dc <startTimer>
	// definimos una variable que almacenara el valor del counter en el timer 4
	uint16_t limit = (time_to_wait_ms * 10) - 1 ;
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	81bb      	strh	r3, [r7, #12]
	uint16_t CNT   = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	81fb      	strh	r3, [r7, #14]

	// comparamos el counter con el limit, y comenzamos a que cuente cada que el timer 4 haga una cuenta nueva
	while (CNT < limit){
 8001c7c:	e00e      	b.n	8001c9c <delay_ms+0x44>
		if (handlerTIM4_time.ptrTIMx->CNT == handlerTIM4_time.ptrTIMx->ARR)  {CNT += handlerTIM4_time.ptrTIMx->CNT;}
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <delay_ms+0x5c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <delay_ms+0x5c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <delay_ms+0x44>
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <delay_ms+0x5c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	89fb      	ldrh	r3, [r7, #14]
 8001c98:	4413      	add	r3, r2
 8001c9a:	81fb      	strh	r3, [r7, #14]
	while (CNT < limit){
 8001c9c:	89fa      	ldrh	r2, [r7, #14]
 8001c9e:	89bb      	ldrh	r3, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3ec      	bcc.n	8001c7e <delay_ms+0x26>
	}
	stopTimer(&handlerTIM4_time);
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <delay_ms+0x5c>)
 8001ca6:	f003 fbab 	bl	8005400 <stopTimer>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000228 	.word	0x20000228

08001cb8 <On_Off_motor>:
	parameters_Path_Robot.rotative_Grad    = parameters_Path_Robot.rotative_Grad_Relative = 0;
	parameters_Path_Robot.start_position_x =  parameters_Path_Robot.start_position_y      = 0;
}

//--------------------Operacion Motor----------------------
void On_Off_motor(uint8_t status){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]

	if(status == 1)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d122      	bne.n	8001d0e <On_Off_motor+0x56>
	{
		//Activamos el motor

		// ENCENCEMOS EL MOTOR 1 (LEFT)
			// Se setea la direccion seleccionada
			GPIO_WritePin_Afopt(handler_Motor_1.phandlerGPIOIN , SET); // Direccion hacia adelante
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <On_Off_motor+0x8c>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 fd59 	bl	8006786 <GPIO_WritePin_Afopt>
			//Se enciende el motor 1
			enableOutput(handler_Motor_1.phandlerPWM);
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <On_Off_motor+0x8c>)
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 f9d3 	bl	8007084 <enableOutput>
			GPIO_WritePin_Afopt(handler_Motor_1.phandlerGPIOEN,SET); // Encendemos el motor 1
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <On_Off_motor+0x8c>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 fd4e 	bl	8006786 <GPIO_WritePin_Afopt>

			// ENCENCEMOS EL MOTOR 2 (Right)
			// Se setea la direccion seleccionada
			GPIO_WritePin_Afopt(handler_Motor_2.phandlerGPIOIN, SET); // Encendemos el motor 2
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <On_Off_motor+0x90>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 fd48 	bl	8006786 <GPIO_WritePin_Afopt>
			//Se enciende el motor 2
			enableOutput(handler_Motor_2.phandlerPWM);
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <On_Off_motor+0x90>)
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 f9c2 	bl	8007084 <enableOutput>
			GPIO_WritePin_Afopt (handler_Motor_2.phandlerGPIOEN,SET);
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <On_Off_motor+0x90>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	2101      	movs	r1, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fd3d 	bl	8006786 <GPIO_WritePin_Afopt>
			// APAGAMOS EL MOTOR 2 (Right)
			//Se enciende el motor 2
			disableOutput(handler_Motor_2.phandlerPWM);
			GPIO_WritePin_Afopt (handler_Motor_2.phandlerGPIOEN,RESET);
	}
}
 8001d0c:	e015      	b.n	8001d3a <On_Off_motor+0x82>
			disableOutput(handler_Motor_1.phandlerPWM);
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <On_Off_motor+0x8c>)
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 fd16 	bl	8007744 <disableOutput>
			GPIO_WritePin_Afopt(handler_Motor_1.phandlerGPIOEN, RESET); // Apagamos el motor 1
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <On_Off_motor+0x8c>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fd31 	bl	8006786 <GPIO_WritePin_Afopt>
			disableOutput(handler_Motor_2.phandlerPWM);
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <On_Off_motor+0x90>)
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f005 fd0b 	bl	8007744 <disableOutput>
			GPIO_WritePin_Afopt (handler_Motor_2.phandlerGPIOEN,RESET);
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <On_Off_motor+0x90>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 fd26 	bl	8006786 <GPIO_WritePin_Afopt>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000284 	.word	0x20000284
 8001d48:	200002b0 	.word	0x200002b0

08001d4c <led_state_callback>:





void led_state_callback (TimerHandle_t xTimer){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

	GPIOxTooglePin(&handlerPinA5);
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <led_state_callback+0x18>)
 8001d56:	f004 fd62 	bl	800681e <GPIOxTooglePin>

}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200000d4 	.word	0x200000d4

08001d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d6c:	f006 fd82 	bl	8008874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d72:	490d      	ldr	r1, [pc, #52]	; (8001da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <LoopForever+0xe>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d88:	4c0a      	ldr	r4, [pc, #40]	; (8001db4 <LoopForever+0x16>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d96:	f007 f853 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9a:	f7fe ff8d 	bl	8000cb8 <main>

08001d9e <LoopForever>:

LoopForever:
    b LoopForever
 8001d9e:	e7fe      	b.n	8001d9e <LoopForever>
  ldr   r0, =_estack
 8001da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001dac:	0800c4a0 	.word	0x0800c4a0
  ldr r2, =_sbss
 8001db0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001db4:	20013198 	.word	0x20013198

08001db8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>

08001dba <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f103 0208 	add.w	r2, r3, #8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dd2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f103 0208 	add.w	r2, r3, #8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f103 0208 	add.w	r2, r3, #8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e72:	d103      	bne.n	8001e7c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e00c      	b.n	8001e96 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e002      	b.n	8001e8a <vListInsert+0x2e>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d2f6      	bcs.n	8001e84 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	601a      	str	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6892      	ldr	r2, [r2, #8]
 8001ee4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d103      	bne.n	8001f02 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10a      	bne.n	8001f4e <xQueueGenericReset+0x2a>
        __asm volatile
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	60bb      	str	r3, [r7, #8]
    }
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001f4e:	f002 fadb 	bl	8004508 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	68f9      	ldr	r1, [r7, #12]
 8001f5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	441a      	add	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	441a      	add	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d114      	bne.n	8001fce <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01a      	beq.n	8001fe2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 f913 	bl	80031dc <xTaskRemoveFromEventList>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <xQueueGenericReset+0xcc>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	e009      	b.n	8001fe2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fef1 	bl	8001dba <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3324      	adds	r3, #36	; 0x24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff feec 	bl	8001dba <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001fe2:	f002 fac1 	bl	8004568 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	e000ed04 	.word	0xe000ed04

08001ff4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08c      	sub	sp, #48	; 0x30
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	61bb      	str	r3, [r7, #24]
    }
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <xQueueGenericCreate+0x48>
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d101      	bne.n	8002040 <xQueueGenericCreate+0x4c>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <xQueueGenericCreate+0x4e>
 8002040:	2300      	movs	r3, #0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <xQueueGenericCreate+0x68>
        __asm volatile
 8002046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	617b      	str	r3, [r7, #20]
    }
 8002058:	bf00      	nop
 800205a:	e7fe      	b.n	800205a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002062:	d90a      	bls.n	800207a <xQueueGenericCreate+0x86>
        __asm volatile
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	613b      	str	r3, [r7, #16]
    }
 8002076:	bf00      	nop
 8002078:	e7fe      	b.n	8002078 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	3350      	adds	r3, #80	; 0x50
 800207e:	4618      	mov	r0, r3
 8002080:	f002 fb64 	bl	800474c <pvPortMalloc>
 8002084:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3350      	adds	r3, #80	; 0x50
 8002094:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f805 	bl	80020b2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
    }
 80020aa:	4618      	mov	r0, r3
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e002      	b.n	80020d4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020e0:	2101      	movs	r1, #1
 80020e2:	69b8      	ldr	r0, [r7, #24]
 80020e4:	f7ff ff1e 	bl	8001f24 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002106:	2300      	movs	r3, #0
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <xQueueGenericSend+0x32>
        __asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <xQueueGenericSend+0x40>
 8002130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <xQueueGenericSend+0x44>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <xQueueGenericSend+0x46>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <xQueueGenericSend+0x60>
        __asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002154:	bf00      	nop
 8002156:	e7fe      	b.n	8002156 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d103      	bne.n	8002166 <xQueueGenericSend+0x6e>
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <xQueueGenericSend+0x72>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <xQueueGenericSend+0x74>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10a      	bne.n	8002186 <xQueueGenericSend+0x8e>
        __asm volatile
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	623b      	str	r3, [r7, #32]
    }
 8002182:	bf00      	nop
 8002184:	e7fe      	b.n	8002184 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002186:	f001 f9c5 	bl	8003514 <xTaskGetSchedulerState>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <xQueueGenericSend+0x9e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <xQueueGenericSend+0xa2>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <xQueueGenericSend+0xa4>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xQueueGenericSend+0xbe>
        __asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	61fb      	str	r3, [r7, #28]
    }
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021b6:	f002 f9a7 	bl	8004508 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <xQueueGenericSend+0xd4>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d129      	bne.n	8002220 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021d2:	f000 fac6 	bl	8002762 <prvCopyDataToQueue>
 80021d6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	3324      	adds	r3, #36	; 0x24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fff9 	bl	80031dc <xTaskRemoveFromEventList>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <xQueueGenericSend+0x1f8>)
 80021f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	e00a      	b.n	8002218 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <xQueueGenericSend+0x1f8>)
 800220a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002218:	f002 f9a6 	bl	8004568 <vPortExitCritical>
                return pdPASS;
 800221c:	2301      	movs	r3, #1
 800221e:	e063      	b.n	80022e8 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d103      	bne.n	800222e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002226:	f002 f99f 	bl	8004568 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800222a:	2300      	movs	r3, #0
 800222c:	e05c      	b.n	80022e8 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f831 	bl	80032a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800223e:	2301      	movs	r3, #1
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002242:	f002 f991 	bl	8004568 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002246:	f000 fdb9 	bl	8002dbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800224a:	f002 f95d 	bl	8004508 <vPortEnterCritical>
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002254:	b25b      	sxtb	r3, r3
 8002256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800225a:	d103      	bne.n	8002264 <xQueueGenericSend+0x16c>
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800226a:	b25b      	sxtb	r3, r3
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002270:	d103      	bne.n	800227a <xQueueGenericSend+0x182>
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800227a:	f002 f975 	bl	8004568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800227e:	1d3a      	adds	r2, r7, #4
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f001 f820 	bl	80032cc <xTaskCheckForTimeOut>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d124      	bne.n	80022dc <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002294:	f000 fb5d 	bl	8002952 <prvIsQueueFull>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d018      	beq.n	80022d0 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	3310      	adds	r3, #16
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 ff48 	bl	800313c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80022ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ae:	f000 fae8 	bl	8002882 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80022b2:	f000 fd91 	bl	8002dd8 <xTaskResumeAll>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f47f af7c 	bne.w	80021b6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <xQueueGenericSend+0x1f8>)
 80022c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	e772      	b.n	80021b6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80022d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d2:	f000 fad6 	bl	8002882 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022d6:	f000 fd7f 	bl	8002dd8 <xTaskResumeAll>
 80022da:	e76c      	b.n	80021b6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80022dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022de:	f000 fad0 	bl	8002882 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022e2:	f000 fd79 	bl	8002dd8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80022e6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3738      	adds	r7, #56	; 0x38
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	e000ed04 	.word	0xe000ed04

080022f4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b090      	sub	sp, #64	; 0x40
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800231e:	bf00      	nop
 8002320:	e7fe      	b.n	8002320 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <xQueueGenericSendFromISR+0x3c>
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <xQueueGenericSendFromISR+0x40>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <xQueueGenericSendFromISR+0x42>
 8002334:	2300      	movs	r3, #0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800234c:	bf00      	nop
 800234e:	e7fe      	b.n	800234e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <xQueueGenericSendFromISR+0x6a>
 8002356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <xQueueGenericSendFromISR+0x6e>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <xQueueGenericSendFromISR+0x70>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	623b      	str	r3, [r7, #32]
    }
 800237a:	bf00      	nop
 800237c:	e7fe      	b.n	800237c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800237e:	f002 f9a5 	bl	80046cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002382:	f3ef 8211 	mrs	r2, BASEPRI
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61fa      	str	r2, [r7, #28]
 8002398:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800239a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <xQueueGenericSendFromISR+0xbc>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d13e      	bne.n	800242e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80023b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023c6:	f000 f9cc 	bl	8002762 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80023ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d2:	d112      	bne.n	80023fa <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d025      	beq.n	8002428 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	3324      	adds	r3, #36	; 0x24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fefb 	bl	80031dc <xTaskRemoveFromEventList>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01d      	beq.n	8002428 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01a      	beq.n	8002428 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e016      	b.n	8002428 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80023fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002400:	d10a      	bne.n	8002418 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	617b      	str	r3, [r7, #20]
    }
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800241c:	3301      	adds	r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	b25a      	sxtb	r2, r3
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002428:	2301      	movs	r3, #1
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800242c:	e001      	b.n	8002432 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800242e:	2300      	movs	r3, #0
 8002430:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800243c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002440:	4618      	mov	r0, r3
 8002442:	3740      	adds	r7, #64	; 0x40
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <xQueueReceive+0x30>
        __asm volatile
 8002462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	623b      	str	r3, [r7, #32]
    }
 8002474:	bf00      	nop
 8002476:	e7fe      	b.n	8002476 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <xQueueReceive+0x3e>
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <xQueueReceive+0x42>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <xQueueReceive+0x44>
 800248a:	2300      	movs	r3, #0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <xQueueReceive+0x5e>
        __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	61fb      	str	r3, [r7, #28]
    }
 80024a2:	bf00      	nop
 80024a4:	e7fe      	b.n	80024a4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a6:	f001 f835 	bl	8003514 <xTaskGetSchedulerState>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <xQueueReceive+0x6e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <xQueueReceive+0x72>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <xQueueReceive+0x74>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <xQueueReceive+0x8e>
        __asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	61bb      	str	r3, [r7, #24]
    }
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024d6:	f002 f817 	bl	8004508 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01f      	beq.n	8002526 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ea:	f000 f9a4 	bl	8002836 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00f      	beq.n	800251e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	3310      	adds	r3, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fe6a 	bl	80031dc <xTaskRemoveFromEventList>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <xQueueReceive+0x1bc>)
 8002510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800251e:	f002 f823 	bl	8004568 <vPortExitCritical>
                return pdPASS;
 8002522:	2301      	movs	r3, #1
 8002524:	e069      	b.n	80025fa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800252c:	f002 f81c 	bl	8004568 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002530:	2300      	movs	r3, #0
 8002532:	e062      	b.n	80025fa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4618      	mov	r0, r3
 8002540:	f000 feae 	bl	80032a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002548:	f002 f80e 	bl	8004568 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800254c:	f000 fc36 	bl	8002dbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002550:	f001 ffda 	bl	8004508 <vPortEnterCritical>
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255a:	b25b      	sxtb	r3, r3
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d103      	bne.n	800256a <xQueueReceive+0x122>
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002570:	b25b      	sxtb	r3, r3
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002576:	d103      	bne.n	8002580 <xQueueReceive+0x138>
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002580:	f001 fff2 	bl	8004568 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002584:	1d3a      	adds	r2, r7, #4
 8002586:	f107 0310 	add.w	r3, r7, #16
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fe9d 	bl	80032cc <xTaskCheckForTimeOut>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d123      	bne.n	80025e0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800259a:	f000 f9c4 	bl	8002926 <prvIsQueueEmpty>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d017      	beq.n	80025d4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fdc5 	bl	800313c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b4:	f000 f965 	bl	8002882 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025b8:	f000 fc0e 	bl	8002dd8 <xTaskResumeAll>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d189      	bne.n	80024d6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <xQueueReceive+0x1bc>)
 80025c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	e780      	b.n	80024d6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d6:	f000 f954 	bl	8002882 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025da:	f000 fbfd 	bl	8002dd8 <xTaskResumeAll>
 80025de:	e77a      	b.n	80024d6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e2:	f000 f94e 	bl	8002882 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025e6:	f000 fbf7 	bl	8002dd8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025ec:	f000 f99b 	bl	8002926 <prvIsQueueEmpty>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f43f af6f 	beq.w	80024d6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025f8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3730      	adds	r7, #48	; 0x30
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	e000ed04 	.word	0xe000ed04

08002608 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b090      	sub	sp, #64	; 0x40
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002630:	bf00      	nop
 8002632:	e7fe      	b.n	8002632 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d103      	bne.n	8002642 <xQueueReceiveFromISR+0x3a>
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <xQueueReceiveFromISR+0x3e>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <xQueueReceiveFromISR+0x40>
 8002646:	2300      	movs	r3, #0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002662:	f002 f833 	bl	80046cc <vPortValidateInterruptPriority>
        __asm volatile
 8002666:	f3ef 8211 	mrs	r2, BASEPRI
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	623a      	str	r2, [r7, #32]
 800267c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800267e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03e      	beq.n	800270c <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800269c:	f000 f8cb 	bl	8002836 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80026a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b0:	d112      	bne.n	80026d8 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d025      	beq.n	8002706 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	3310      	adds	r3, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fd8c 	bl	80031dc <xTaskRemoveFromEventList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01d      	beq.n	8002706 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01a      	beq.n	8002706 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e016      	b.n	8002706 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80026d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80026dc:	2b7f      	cmp	r3, #127	; 0x7f
 80026de:	d10a      	bne.n	80026f6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61bb      	str	r3, [r7, #24]
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80026f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	b25a      	sxtb	r2, r3
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8002706:	2301      	movs	r3, #1
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800270a:	e001      	b.n	8002710 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 800270c:	2300      	movs	r3, #0
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f383 8811 	msr	BASEPRI, r3
    }
 800271a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800271e:	4618      	mov	r0, r3
 8002720:	3740      	adds	r7, #64	; 0x40
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	60bb      	str	r3, [r7, #8]
    }
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800274a:	f001 fedd 	bl	8004508 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8002754:	f001 ff08 	bl	8004568 <vPortExitCritical>

    return uxReturn;
 8002758:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10d      	bne.n	800279c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d14d      	bne.n	8002824 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fedf 	bl	8003550 <xTaskPriorityDisinherit>
 8002792:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	e043      	b.n	8002824 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d119      	bne.n	80027d6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6858      	ldr	r0, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	461a      	mov	r2, r3
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	f006 fb6b 	bl	8008e88 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	441a      	add	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d32b      	bcc.n	8002824 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	e026      	b.n	8002824 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	68d8      	ldr	r0, [r3, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	461a      	mov	r2, r3
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	f006 fb51 	bl	8008e88 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	425b      	negs	r3, r3
 80027f0:	441a      	add	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d207      	bcs.n	8002812 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	425b      	negs	r3, r3
 800280c:	441a      	add	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d105      	bne.n	8002824 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	3b01      	subs	r3, #1
 8002822:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800282c:	697b      	ldr	r3, [r7, #20]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d018      	beq.n	800287a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	441a      	add	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d303      	bcc.n	800286a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	461a      	mov	r2, r3
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	f006 fb07 	bl	8008e88 <memcpy>
    }
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800288a:	f001 fe3d 	bl	8004508 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002894:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002896:	e011      	b.n	80028bc <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3324      	adds	r3, #36	; 0x24
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fc99 	bl	80031dc <xTaskRemoveFromEventList>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80028b0:	f000 fd72 	bl	8003398 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dce9      	bgt.n	8002898 <prvUnlockQueue+0x16>
 80028c4:	e000      	b.n	80028c8 <prvUnlockQueue+0x46>
                        break;
 80028c6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	22ff      	movs	r2, #255	; 0xff
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80028d0:	f001 fe4a 	bl	8004568 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028d4:	f001 fe18 	bl	8004508 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028de:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028e0:	e011      	b.n	8002906 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d012      	beq.n	8002910 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3310      	adds	r3, #16
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fc74 	bl	80031dc <xTaskRemoveFromEventList>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028fa:	f000 fd4d 	bl	8003398 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	3b01      	subs	r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800290a:	2b00      	cmp	r3, #0
 800290c:	dce9      	bgt.n	80028e2 <prvUnlockQueue+0x60>
 800290e:	e000      	b.n	8002912 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002910:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800291a:	f001 fe25 	bl	8004568 <vPortExitCritical>
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800292e:	f001 fdeb 	bl	8004508 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800293a:	2301      	movs	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e001      	b.n	8002944 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002944:	f001 fe10 	bl	8004568 <vPortExitCritical>

    return xReturn;
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800295a:	f001 fdd5 	bl	8004508 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	429a      	cmp	r2, r3
 8002968:	d102      	bne.n	8002970 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800296a:	2301      	movs	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e001      	b.n	8002974 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002974:	f001 fdf8 	bl	8004568 <vPortExitCritical>

    return xReturn;
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8002982:	b480      	push	{r7}
 8002984:	b087      	sub	sp, #28
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	60fb      	str	r3, [r7, #12]
    }
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d102      	bne.n	80029bc <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e001      	b.n	80029c0 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80029c0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80029c2:	4618      	mov	r0, r3
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e014      	b.n	8002a0a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029e0:	4a0f      	ldr	r2, [pc, #60]	; (8002a20 <vQueueAddToRegistry+0x50>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <vQueueAddToRegistry+0x50>)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <vQueueAddToRegistry+0x50>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002a02:	e006      	b.n	8002a12 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	d9e7      	bls.n	80029e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200003c0 	.word	0x200003c0

08002a24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a34:	f001 fd68 	bl	8004508 <vPortEnterCritical>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a44:	d103      	bne.n	8002a4e <vQueueWaitForMessageRestricted+0x2a>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a5a:	d103      	bne.n	8002a64 <vQueueWaitForMessageRestricted+0x40>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a64:	f001 fd80 	bl	8004568 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d106      	bne.n	8002a7e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3324      	adds	r3, #36	; 0x24
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fb83 	bl	8003184 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff feff 	bl	8002882 <prvUnlockQueue>
    }
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af04      	add	r7, sp, #16
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 fe53 	bl	800474c <pvPortMalloc>
 8002aa6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002aae:	2058      	movs	r0, #88	; 0x58
 8002ab0:	f001 fe4c 	bl	800474c <pvPortMalloc>
 8002ab4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac2:	e005      	b.n	8002ad0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002ac4:	6978      	ldr	r0, [r7, #20]
 8002ac6:	f001 ff21 	bl	800490c <vPortFree>
 8002aca:	e001      	b.n	8002ad0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d013      	beq.n	8002afe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9303      	str	r3, [sp, #12]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9302      	str	r3, [sp, #8]
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f80e 	bl	8002b0e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002af2:	69f8      	ldr	r0, [r7, #28]
 8002af4:	f000 f8a2 	bl	8002c3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e002      	b.n	8002b04 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b02:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b04:	69bb      	ldr	r3, [r7, #24]
    }
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b088      	sub	sp, #32
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	21a5      	movs	r1, #165	; 0xa5
 8002b28:	f006 f9bc 	bl	8008ea4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b36:	3b01      	subs	r3, #1
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f023 0307 	bic.w	r3, r3, #7
 8002b44:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	617b      	str	r3, [r7, #20]
    }
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01f      	beq.n	8002bac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	e012      	b.n	8002b98 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	7819      	ldrb	r1, [r3, #0]
 8002b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3334      	adds	r3, #52	; 0x34
 8002b82:	460a      	mov	r2, r1
 8002b84:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3301      	adds	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b09      	cmp	r3, #9
 8002b9c:	d9e9      	bls.n	8002b72 <prvInitialiseNewTask+0x64>
 8002b9e:	e000      	b.n	8002ba2 <prvInitialiseNewTask+0x94>
            {
                break;
 8002ba0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002baa:	e003      	b.n	8002bb4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d901      	bls.n	8002bbe <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	2200      	movs	r2, #0
 8002bce:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f910 	bl	8001dfa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	3318      	adds	r3, #24
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f90b 	bl	8001dfa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	f1c3 0205 	rsb	r2, r3, #5
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	3350      	adds	r3, #80	; 0x50
 8002bfe:	2204      	movs	r2, #4
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f006 f94e 	bl	8008ea4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	3354      	adds	r3, #84	; 0x54
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f006 f947 	bl	8008ea4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	68f9      	ldr	r1, [r7, #12]
 8002c1a:	69b8      	ldr	r0, [r7, #24]
 8002c1c:	f001 fb48 	bl	80042b0 <pxPortInitialiseStack>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c32:	bf00      	nop
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c44:	f001 fc60 	bl	8004508 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c48:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <prvAddNewTaskToReadyList+0xc0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <prvAddNewTaskToReadyList+0xc0>)
 8002c50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <prvAddNewTaskToReadyList+0xc4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c5a:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <prvAddNewTaskToReadyList+0xc4>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <prvAddNewTaskToReadyList+0xc0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d110      	bne.n	8002c8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c68:	f000 fbba 	bl	80033e0 <prvInitialiseTaskLists>
 8002c6c:	e00d      	b.n	8002c8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <prvAddNewTaskToReadyList+0xc8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <prvAddNewTaskToReadyList+0xc4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d802      	bhi.n	8002c8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <prvAddNewTaskToReadyList+0xc4>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <prvAddNewTaskToReadyList+0xcc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	4a1d      	ldr	r2, [pc, #116]	; (8002d08 <prvAddNewTaskToReadyList+0xcc>)
 8002c92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <prvAddNewTaskToReadyList+0xcc>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <prvAddNewTaskToReadyList+0xd0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <prvAddNewTaskToReadyList+0xd0>)
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <prvAddNewTaskToReadyList+0xd4>)
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7ff f8a5 	bl	8001e14 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cca:	f001 fc4d 	bl	8004568 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <prvAddNewTaskToReadyList+0xc8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <prvAddNewTaskToReadyList+0xc4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <prvAddNewTaskToReadyList+0xd8>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200004d8 	.word	0x200004d8
 8002d00:	20000400 	.word	0x20000400
 8002d04:	200004e4 	.word	0x200004e4
 8002d08:	200004f4 	.word	0x200004f4
 8002d0c:	200004e0 	.word	0x200004e0
 8002d10:	20000404 	.word	0x20000404
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <vTaskStartScheduler+0x88>)
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	2282      	movs	r2, #130	; 0x82
 8002d2a:	491e      	ldr	r1, [pc, #120]	; (8002da4 <vTaskStartScheduler+0x8c>)
 8002d2c:	481e      	ldr	r0, [pc, #120]	; (8002da8 <vTaskStartScheduler+0x90>)
 8002d2e:	f7ff fead 	bl	8002a8c <xTaskCreate>
 8002d32:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002d3a:	f000 ff4b 	bl	8003bd4 <xTimerCreateTimerTask>
 8002d3e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d116      	bne.n	8002d74 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	60bb      	str	r3, [r7, #8]
    }
 8002d58:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <vTaskStartScheduler+0x94>)
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d60:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <vTaskStartScheduler+0x98>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <vTaskStartScheduler+0x9c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d6e:	f001 fb29 	bl	80043c4 <xPortStartScheduler>
 8002d72:	e00e      	b.n	8002d92 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d10a      	bne.n	8002d92 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	607b      	str	r3, [r7, #4]
    }
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <vTaskStartScheduler+0xa0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200004fc 	.word	0x200004fc
 8002da4:	0800c068 	.word	0x0800c068
 8002da8:	080033b1 	.word	0x080033b1
 8002dac:	200004f8 	.word	0x200004f8
 8002db0:	200004e4 	.word	0x200004e4
 8002db4:	200004dc 	.word	0x200004dc
 8002db8:	2000001c 	.word	0x2000001c

08002dbc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <vTaskSuspendAll+0x18>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <vTaskSuspendAll+0x18>)
 8002dc8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	20000500 	.word	0x20000500

08002dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <xTaskResumeAll+0x114>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <xTaskResumeAll+0x2c>
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	603b      	str	r3, [r7, #0]
    }
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e04:	f001 fb80 	bl	8004508 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <xTaskResumeAll+0x114>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	4a37      	ldr	r2, [pc, #220]	; (8002eec <xTaskResumeAll+0x114>)
 8002e10:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e12:	4b36      	ldr	r3, [pc, #216]	; (8002eec <xTaskResumeAll+0x114>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d161      	bne.n	8002ede <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e1a:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <xTaskResumeAll+0x118>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d05d      	beq.n	8002ede <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e22:	e02e      	b.n	8002e82 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <xTaskResumeAll+0x11c>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3318      	adds	r3, #24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f84c 	bl	8001ece <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f847 	bl	8001ece <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	4b2b      	ldr	r3, [pc, #172]	; (8002ef8 <xTaskResumeAll+0x120>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <xTaskResumeAll+0x120>)
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <xTaskResumeAll+0x124>)
 8002e60:	441a      	add	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3304      	adds	r3, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f7fe ffd3 	bl	8001e14 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <xTaskResumeAll+0x128>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d302      	bcc.n	8002e82 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <xTaskResumeAll+0x12c>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <xTaskResumeAll+0x11c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cc      	bne.n	8002e24 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e90:	f000 fb24 	bl	80034dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <xTaskResumeAll+0x130>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ea0:	f000 f846 	bl	8002f30 <xTaskIncrementTick>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <xTaskResumeAll+0x12c>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f1      	bne.n	8002ea0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <xTaskResumeAll+0x130>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xTaskResumeAll+0x12c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <xTaskResumeAll+0x134>)
 8002ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ede:	f001 fb43 	bl	8004568 <vPortExitCritical>

    return xAlreadyYielded;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000500 	.word	0x20000500
 8002ef0:	200004d8 	.word	0x200004d8
 8002ef4:	20000498 	.word	0x20000498
 8002ef8:	200004e0 	.word	0x200004e0
 8002efc:	20000404 	.word	0x20000404
 8002f00:	20000400 	.word	0x20000400
 8002f04:	200004ec 	.word	0x200004ec
 8002f08:	200004e8 	.word	0x200004e8
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <xTaskGetTickCount+0x1c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f1c:	687b      	ldr	r3, [r7, #4]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200004dc 	.word	0x200004dc

08002f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <xTaskIncrementTick+0x128>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d17f      	bne.n	8003042 <xTaskIncrementTick+0x112>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f42:	4b46      	ldr	r3, [pc, #280]	; (800305c <xTaskIncrementTick+0x12c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f4a:	4a44      	ldr	r2, [pc, #272]	; (800305c <xTaskIncrementTick+0x12c>)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d120      	bne.n	8002f98 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <xTaskIncrementTick+0x130>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <xTaskIncrementTick+0x46>
        __asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	603b      	str	r3, [r7, #0]
    }
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xTaskIncrementTick+0x44>
 8002f76:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <xTaskIncrementTick+0x130>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b39      	ldr	r3, [pc, #228]	; (8003064 <xTaskIncrementTick+0x134>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a37      	ldr	r2, [pc, #220]	; (8003060 <xTaskIncrementTick+0x130>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4a37      	ldr	r2, [pc, #220]	; (8003064 <xTaskIncrementTick+0x134>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <xTaskIncrementTick+0x138>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a35      	ldr	r2, [pc, #212]	; (8003068 <xTaskIncrementTick+0x138>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	f000 faa2 	bl	80034dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <xTaskIncrementTick+0x13c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d348      	bcc.n	8003034 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <xTaskIncrementTick+0x130>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fac:	4b2f      	ldr	r3, [pc, #188]	; (800306c <xTaskIncrementTick+0x13c>)
 8002fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb2:	601a      	str	r2, [r3, #0]
                    break;
 8002fb4:	e03e      	b.n	8003034 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <xTaskIncrementTick+0x130>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d203      	bcs.n	8002fd6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fce:	4a27      	ldr	r2, [pc, #156]	; (800306c <xTaskIncrementTick+0x13c>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fd4:	e02e      	b.n	8003034 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe ff77 	bl	8001ece <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3318      	adds	r3, #24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe ff6e 	bl	8001ece <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <xTaskIncrementTick+0x140>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <xTaskIncrementTick+0x140>)
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a18      	ldr	r2, [pc, #96]	; (8003074 <xTaskIncrementTick+0x144>)
 8003012:	441a      	add	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7fe fefa 	bl	8001e14 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <xTaskIncrementTick+0x148>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	429a      	cmp	r2, r3
 800302c:	d3b9      	bcc.n	8002fa2 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003032:	e7b6      	b.n	8002fa2 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <xTaskIncrementTick+0x14c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d007      	beq.n	800304c <xTaskIncrementTick+0x11c>
                {
                    xSwitchRequired = pdTRUE;
 800303c:	2301      	movs	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e004      	b.n	800304c <xTaskIncrementTick+0x11c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <xTaskIncrementTick+0x150>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <xTaskIncrementTick+0x150>)
 800304a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800304c:	697b      	ldr	r3, [r7, #20]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000500 	.word	0x20000500
 800305c:	200004dc 	.word	0x200004dc
 8003060:	20000490 	.word	0x20000490
 8003064:	20000494 	.word	0x20000494
 8003068:	200004f0 	.word	0x200004f0
 800306c:	200004f8 	.word	0x200004f8
 8003070:	200004e0 	.word	0x200004e0
 8003074:	20000404 	.word	0x20000404
 8003078:	20000400 	.word	0x20000400
 800307c:	200004ec 	.word	0x200004ec
 8003080:	200004e8 	.word	0x200004e8

08003084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <vTaskSwitchContext+0xa4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <vTaskSwitchContext+0xa8>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003098:	e03f      	b.n	800311a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <vTaskSwitchContext+0xa8>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <vTaskSwitchContext+0xac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	f1c3 031f 	rsb	r3, r3, #31
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	491f      	ldr	r1, [pc, #124]	; (8003134 <vTaskSwitchContext+0xb0>)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	607b      	str	r3, [r7, #4]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <vTaskSwitchContext+0x5a>
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <vTaskSwitchContext+0xb0>)
 80030ec:	4413      	add	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	3308      	adds	r3, #8
 8003102:	429a      	cmp	r2, r3
 8003104:	d104      	bne.n	8003110 <vTaskSwitchContext+0x8c>
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <vTaskSwitchContext+0xb4>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000500 	.word	0x20000500
 800312c:	200004ec 	.word	0x200004ec
 8003130:	200004e0 	.word	0x200004e0
 8003134:	20000404 	.word	0x20000404
 8003138:	20000400 	.word	0x20000400

0800313c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60fb      	str	r3, [r7, #12]
    }
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <vTaskPlaceOnEventList+0x44>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3318      	adds	r3, #24
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fe fe76 	bl	8001e5c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003170:	2101      	movs	r1, #1
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f000 fcc8 	bl	8003b08 <prvAddCurrentTaskToDelayedList>
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000400 	.word	0x20000400

08003184 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	617b      	str	r3, [r7, #20]
    }
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3318      	adds	r3, #24
 80031b2:	4619      	mov	r1, r3
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7fe fe2d 	bl	8001e14 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031c4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	68b8      	ldr	r0, [r7, #8]
 80031ca:	f000 fc9d 	bl	8003b08 <prvAddCurrentTaskToDelayedList>
    }
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000400 	.word	0x20000400

080031dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60fb      	str	r3, [r7, #12]
    }
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3318      	adds	r3, #24
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fe5e 	bl	8001ece <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <xTaskRemoveFromEventList+0xac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11c      	bne.n	8003254 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3304      	adds	r3, #4
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fe55 	bl	8001ece <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <xTaskRemoveFromEventList+0xb0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <xTaskRemoveFromEventList+0xb0>)
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a13      	ldr	r2, [pc, #76]	; (8003290 <xTaskRemoveFromEventList+0xb4>)
 8003244:	441a      	add	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fe fde1 	bl	8001e14 <vListInsertEnd>
 8003252:	e005      	b.n	8003260 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3318      	adds	r3, #24
 8003258:	4619      	mov	r1, r3
 800325a:	480e      	ldr	r0, [pc, #56]	; (8003294 <xTaskRemoveFromEventList+0xb8>)
 800325c:	f7fe fdda 	bl	8001e14 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <xTaskRemoveFromEventList+0xbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	429a      	cmp	r2, r3
 800326c:	d905      	bls.n	800327a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <xTaskRemoveFromEventList+0xc0>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e001      	b.n	800327e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800327e:	697b      	ldr	r3, [r7, #20]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000500 	.word	0x20000500
 800328c:	200004e0 	.word	0x200004e0
 8003290:	20000404 	.word	0x20000404
 8003294:	20000498 	.word	0x20000498
 8003298:	20000400 	.word	0x20000400
 800329c:	200004ec 	.word	0x200004ec

080032a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <vTaskInternalSetTimeOutState+0x24>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <vTaskInternalSetTimeOutState+0x28>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	200004f0 	.word	0x200004f0
 80032c8:	200004dc 	.word	0x200004dc

080032cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80032dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	613b      	str	r3, [r7, #16]
    }
 80032ee:	bf00      	nop
 80032f0:	e7fe      	b.n	80032f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60fb      	str	r3, [r7, #12]
    }
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800330e:	f001 f8fb 	bl	8004508 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <xTaskCheckForTimeOut+0xc4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332a:	d102      	bne.n	8003332 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e026      	b.n	8003380 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <xTaskCheckForTimeOut+0xc8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d00a      	beq.n	8003354 <xTaskCheckForTimeOut+0x88>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	429a      	cmp	r2, r3
 8003346:	d305      	bcc.n	8003354 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003348:	2301      	movs	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e015      	b.n	8003380 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	429a      	cmp	r2, r3
 800335c:	d20b      	bcs.n	8003376 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad2      	subs	r2, r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff98 	bl	80032a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e004      	b.n	8003380 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800337c:	2301      	movs	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003380:	f001 f8f2 	bl	8004568 <vPortExitCritical>

    return xReturn;
 8003384:	69fb      	ldr	r3, [r7, #28]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200004dc 	.word	0x200004dc
 8003394:	200004f0 	.word	0x200004f0

08003398 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <vTaskMissedYield+0x14>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	200004ec 	.word	0x200004ec

080033b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033b8:	f000 f852 	bl	8003460 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <prvIdleTask+0x28>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d9f9      	bls.n	80033b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <prvIdleTask+0x2c>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033d4:	e7f0      	b.n	80033b8 <prvIdleTask+0x8>
 80033d6:	bf00      	nop
 80033d8:	20000404 	.word	0x20000404
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	e00c      	b.n	8003406 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <prvInitialiseTaskLists+0x60>)
 80033f8:	4413      	add	r3, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fcdd 	bl	8001dba <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3301      	adds	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d9ef      	bls.n	80033ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800340c:	480d      	ldr	r0, [pc, #52]	; (8003444 <prvInitialiseTaskLists+0x64>)
 800340e:	f7fe fcd4 	bl	8001dba <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003412:	480d      	ldr	r0, [pc, #52]	; (8003448 <prvInitialiseTaskLists+0x68>)
 8003414:	f7fe fcd1 	bl	8001dba <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003418:	480c      	ldr	r0, [pc, #48]	; (800344c <prvInitialiseTaskLists+0x6c>)
 800341a:	f7fe fcce 	bl	8001dba <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800341e:	480c      	ldr	r0, [pc, #48]	; (8003450 <prvInitialiseTaskLists+0x70>)
 8003420:	f7fe fccb 	bl	8001dba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003424:	480b      	ldr	r0, [pc, #44]	; (8003454 <prvInitialiseTaskLists+0x74>)
 8003426:	f7fe fcc8 	bl	8001dba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <prvInitialiseTaskLists+0x78>)
 800342c:	4a05      	ldr	r2, [pc, #20]	; (8003444 <prvInitialiseTaskLists+0x64>)
 800342e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <prvInitialiseTaskLists+0x7c>)
 8003432:	4a05      	ldr	r2, [pc, #20]	; (8003448 <prvInitialiseTaskLists+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000404 	.word	0x20000404
 8003444:	20000468 	.word	0x20000468
 8003448:	2000047c 	.word	0x2000047c
 800344c:	20000498 	.word	0x20000498
 8003450:	200004ac 	.word	0x200004ac
 8003454:	200004c4 	.word	0x200004c4
 8003458:	20000490 	.word	0x20000490
 800345c:	20000494 	.word	0x20000494

08003460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003466:	e019      	b.n	800349c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003468:	f001 f84e 	bl	8004508 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <prvCheckTasksWaitingTermination+0x50>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fd28 	bl	8001ece <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <prvCheckTasksWaitingTermination+0x54>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3b01      	subs	r3, #1
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <prvCheckTasksWaitingTermination+0x54>)
 8003486:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3b01      	subs	r3, #1
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 8003490:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003492:	f001 f869 	bl	8004568 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f810 	bl	80034bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e1      	bne.n	8003468 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200004ac 	.word	0x200004ac
 80034b4:	200004d8 	.word	0x200004d8
 80034b8:	200004c0 	.word	0x200004c0

080034bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fa1f 	bl	800490c <vPortFree>
                vPortFree( pxTCB );
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fa1c 	bl	800490c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <prvResetNextTaskUnblockTime+0x30>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <prvResetNextTaskUnblockTime+0x34>)
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034f2:	e005      	b.n	8003500 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <prvResetNextTaskUnblockTime+0x30>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <prvResetNextTaskUnblockTime+0x34>)
 80034fe:	6013      	str	r3, [r2, #0]
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000490 	.word	0x20000490
 8003510:	200004f8 	.word	0x200004f8

08003514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <xTaskGetSchedulerState+0x34>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003522:	2301      	movs	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	e008      	b.n	800353a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <xTaskGetSchedulerState+0x38>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003530:	2302      	movs	r3, #2
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	e001      	b.n	800353a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800353a:	687b      	ldr	r3, [r7, #4]
    }
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	200004e4 	.word	0x200004e4
 800354c:	20000500 	.word	0x20000500

08003550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <xTaskPriorityDisinherit+0xe8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d00a      	beq.n	8003586 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	60fb      	str	r3, [r7, #12]
    }
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	60bb      	str	r3, [r7, #8]
    }
 80035a0:	bf00      	nop
 80035a2:	e7fe      	b.n	80035a2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d039      	beq.n	800362e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d135      	bne.n	800362e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fc81 	bl	8001ece <uxListRemove>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	2201      	movs	r2, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43da      	mvns	r2, r3
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <xTaskPriorityDisinherit+0xec>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4013      	ands	r3, r2
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <xTaskPriorityDisinherit+0xec>)
 80035e6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f1c3 0205 	rsb	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	2201      	movs	r2, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <xTaskPriorityDisinherit+0xec>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <xTaskPriorityDisinherit+0xec>)
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <xTaskPriorityDisinherit+0xf0>)
 800361c:	441a      	add	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3304      	adds	r3, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7fe fbf5 	bl	8001e14 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800362e:	697b      	ldr	r3, [r7, #20]
    }
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000400 	.word	0x20000400
 800363c:	200004e0 	.word	0x200004e0
 8003640:	20000404 	.word	0x20000404

08003644 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	613b      	str	r3, [r7, #16]
    }
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800366e:	f000 ff4b 	bl	8004508 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003672:	4b32      	ldr	r3, [pc, #200]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4413      	add	r3, r2
 800367a:	3354      	adds	r3, #84	; 0x54
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d022      	beq.n	80036ca <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	3214      	adds	r2, #20
 800368c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	43d2      	mvns	r2, r2
 8003694:	4011      	ands	r1, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	3214      	adds	r2, #20
 800369a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800369e:	4b27      	ldr	r3, [pc, #156]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	3354      	adds	r3, #84	; 0x54
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036b2:	2101      	movs	r1, #1
 80036b4:	6a38      	ldr	r0, [r7, #32]
 80036b6:	f000 fa27 	bl	8003b08 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <xTaskGenericNotifyWait+0xfc>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80036ca:	f000 ff4d 	bl	8004568 <vPortExitCritical>

        taskENTER_CRITICAL();
 80036ce:	f000 ff1b 	bl	8004508 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	3214      	adds	r2, #20
 80036e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	3354      	adds	r3, #84	; 0x54
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d002      	beq.n	8003700 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e00e      	b.n	800371e <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	3214      	adds	r2, #20
 8003708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	43d2      	mvns	r2, r2
 8003710:	4011      	ands	r1, r2
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	3214      	adds	r2, #20
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800371a:	2301      	movs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <xTaskGenericNotifyWait+0xf8>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4413      	add	r3, r2
 8003726:	3354      	adds	r3, #84	; 0x54
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800372c:	f000 ff1c 	bl	8004568 <vPortExitCritical>

        return xReturn;
 8003730:	697b      	ldr	r3, [r7, #20]
    }
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000400 	.word	0x20000400
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003752:	2301      	movs	r3, #1
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <xTaskGenericNotify+0x2e>
        __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	623b      	str	r3, [r7, #32]
    }
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xTaskGenericNotify+0x4a>
        __asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61fb      	str	r3, [r7, #28]
    }
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003792:	f000 feb9 	bl	8004508 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	3214      	adds	r2, #20
 80037a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80037aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4413      	add	r3, r2
 80037b0:	3354      	adds	r3, #84	; 0x54
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80037b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	3354      	adds	r3, #84	; 0x54
 80037c0:	2202      	movs	r2, #2
 80037c2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d83b      	bhi.n	8003842 <xTaskGenericNotify+0xfe>
 80037ca:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <xTaskGenericNotify+0x8c>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	08003861 	.word	0x08003861
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003819 	.word	0x08003819
 80037e0:	08003827 	.word	0x08003827
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	3214      	adds	r2, #20
 80037ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	ea42 0103 	orr.w	r1, r2, r3
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	3214      	adds	r2, #20
 80037fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80037fe:	e032      	b.n	8003866 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	3214      	adds	r2, #20
 8003806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	3214      	adds	r2, #20
 8003812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003816:	e026      	b.n	8003866 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	3214      	adds	r2, #20
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003824:	e01f      	b.n	8003866 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800382a:	2b02      	cmp	r3, #2
 800382c:	d006      	beq.n	800383c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	3214      	adds	r2, #20
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800383a:	e014      	b.n	8003866 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800383c:	2300      	movs	r3, #0
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8003840:	e011      	b.n	8003866 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <xTaskGenericNotify+0x1ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <xTaskGenericNotify+0x120>
        __asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	61bb      	str	r3, [r7, #24]
    }
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <xTaskGenericNotify+0x11a>
                    break;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <xTaskGenericNotify+0x122>

                    break;
 8003864:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800386a:	2b01      	cmp	r3, #1
 800386c:	d139      	bne.n	80038e2 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	3304      	adds	r3, #4
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fb2b 	bl	8001ece <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <xTaskGenericNotify+0x1b0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <xTaskGenericNotify+0x1b0>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <xTaskGenericNotify+0x1b4>)
 8003898:	441a      	add	r2, r3
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7fe fab7 	bl	8001e14 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <xTaskGenericNotify+0x180>
        __asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	617b      	str	r3, [r7, #20]
    }
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <xTaskGenericNotify+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d907      	bls.n	80038e2 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <xTaskGenericNotify+0x1bc>)
 80038d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80038e2:	f000 fe41 	bl	8004568 <vPortExitCritical>

        return xReturn;
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80038e8:	4618      	mov	r0, r3
 80038ea:	3730      	adds	r7, #48	; 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200004dc 	.word	0x200004dc
 80038f4:	200004e0 	.word	0x200004e0
 80038f8:	20000404 	.word	0x20000404
 80038fc:	20000400 	.word	0x20000400
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003904:	b580      	push	{r7, lr}
 8003906:	b090      	sub	sp, #64	; 0x40
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003912:	2301      	movs	r3, #1
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800394e:	f000 febd 	bl	80046cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003956:	f3ef 8211 	mrs	r2, BASEPRI
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	627a      	str	r2, [r7, #36]	; 0x24
 800396c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8003972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003974:	2b00      	cmp	r3, #0
 8003976:	d006      	beq.n	8003986 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	3214      	adds	r2, #20
 800397e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4413      	add	r3, r2
 800398c:	3354      	adds	r3, #84	; 0x54
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	3354      	adds	r3, #84	; 0x54
 800399c:	2202      	movs	r2, #2
 800399e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d83b      	bhi.n	8003a1e <xTaskGenericNotifyFromISR+0x11a>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <xTaskGenericNotifyFromISR+0xa8>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a3d 	.word	0x08003a3d
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039f5 	.word	0x080039f5
 80039bc:	08003a03 	.word	0x08003a03
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	3214      	adds	r2, #20
 80039c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	ea42 0103 	orr.w	r1, r2, r3
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	3214      	adds	r2, #20
 80039d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039da:	e032      	b.n	8003a42 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	3214      	adds	r2, #20
 80039e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e6:	1c59      	adds	r1, r3, #1
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	3214      	adds	r2, #20
 80039ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80039f2:	e026      	b.n	8003a42 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	3214      	adds	r2, #20
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003a00:	e01f      	b.n	8003a42 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d006      	beq.n	8003a18 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	3214      	adds	r2, #20
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003a16:	e014      	b.n	8003a42 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8003a1c:	e011      	b.n	8003a42 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003a1e:	4b33      	ldr	r3, [pc, #204]	; (8003aec <xTaskGenericNotifyFromISR+0x1e8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	61fb      	str	r3, [r7, #28]
    }
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003a40:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d145      	bne.n	8003ad6 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	61bb      	str	r3, [r7, #24]
    }
 8003a64:	bf00      	nop
 8003a66:	e7fe      	b.n	8003a66 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <xTaskGenericNotifyFromISR+0x1ec>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11c      	bne.n	8003aaa <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	3304      	adds	r3, #4
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fa2a 	bl	8001ece <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	2201      	movs	r2, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <xTaskGenericNotifyFromISR+0x1f0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <xTaskGenericNotifyFromISR+0x1f0>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <xTaskGenericNotifyFromISR+0x1f4>)
 8003a9a:	441a      	add	r2, r3
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fe f9b6 	bl	8001e14 <vListInsertEnd>
 8003aa8:	e005      	b.n	8003ab6 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	3318      	adds	r3, #24
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4812      	ldr	r0, [pc, #72]	; (8003afc <xTaskGenericNotifyFromISR+0x1f8>)
 8003ab2:	f7fe f9af 	bl	8001e14 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <xTaskGenericNotifyFromISR+0x1fc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d908      	bls.n	8003ad6 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003acc:	2201      	movs	r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <xTaskGenericNotifyFromISR+0x200>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f383 8811 	msr	BASEPRI, r3
    }
 8003ae0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3740      	adds	r7, #64	; 0x40
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	200004dc 	.word	0x200004dc
 8003af0:	20000500 	.word	0x20000500
 8003af4:	200004e0 	.word	0x200004e0
 8003af8:	20000404 	.word	0x20000404
 8003afc:	20000498 	.word	0x20000498
 8003b00:	20000400 	.word	0x20000400
 8003b04:	200004ec 	.word	0x200004ec

08003b08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b18:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe f9d5 	bl	8001ece <uxListRemove>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2201      	movs	r2, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b48:	d10a      	bne.n	8003b60 <prvAddCurrentTaskToDelayedList+0x58>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	481a      	ldr	r0, [pc, #104]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b5a:	f7fe f95b 	bl	8001e14 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b5e:	e026      	b.n	8003bae <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d209      	bcs.n	8003b8c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b78:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fe f969 	bl	8001e5c <vListInsert>
}
 8003b8a:	e010      	b.n	8003bae <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f7fe f95f 	bl	8001e5c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d202      	bcs.n	8003bae <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003ba8:	4a09      	ldr	r2, [pc, #36]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6013      	str	r3, [r2, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200004dc 	.word	0x200004dc
 8003bbc:	20000400 	.word	0x20000400
 8003bc0:	200004e0 	.word	0x200004e0
 8003bc4:	200004c4 	.word	0x200004c4
 8003bc8:	20000494 	.word	0x20000494
 8003bcc:	20000490 	.word	0x20000490
 8003bd0:	200004f8 	.word	0x200004f8

08003bd4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003bde:	f000 fb31 	bl	8004244 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <xTimerCreateTimerTask+0x54>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <xTimerCreateTimerTask+0x58>)
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	2302      	movs	r3, #2
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bf8:	490d      	ldr	r1, [pc, #52]	; (8003c30 <xTimerCreateTimerTask+0x5c>)
 8003bfa:	480e      	ldr	r0, [pc, #56]	; (8003c34 <xTimerCreateTimerTask+0x60>)
 8003bfc:	f7fe ff46 	bl	8002a8c <xTaskCreate>
 8003c00:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	603b      	str	r3, [r7, #0]
    }
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c1e:	687b      	ldr	r3, [r7, #4]
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000534 	.word	0x20000534
 8003c2c:	20000538 	.word	0x20000538
 8003c30:	0800c070 	.word	0x0800c070
 8003c34:	08003e25 	.word	0x08003e25

08003c38 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003c46:	202c      	movs	r0, #44	; 0x2c
 8003c48:	f000 fd80 	bl	800474c <pvPortMalloc>
 8003c4c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f805 	bl	8003c7a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8003c70:	697b      	ldr	r3, [r7, #20]
        }
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	617b      	str	r3, [r7, #20]
    }
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01e      	beq.n	8003ce8 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8003caa:	f000 facb 	bl	8004244 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	6a3a      	ldr	r2, [r7, #32]
 8003cc4:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe f895 	bl	8001dfa <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	623b      	str	r3, [r7, #32]
    }
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <xTimerGenericCommand+0x98>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02a      	beq.n	8003d7c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	dc18      	bgt.n	8003d6a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d38:	f7ff fbec 	bl	8003514 <xTaskGetSchedulerState>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d109      	bne.n	8003d56 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <xTimerGenericCommand+0x98>)
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	f107 0114 	add.w	r1, r7, #20
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	f7fe f9d3 	bl	80020f8 <xQueueGenericSend>
 8003d52:	6278      	str	r0, [r7, #36]	; 0x24
 8003d54:	e012      	b.n	8003d7c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <xTimerGenericCommand+0x98>)
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f107 0114 	add.w	r1, r7, #20
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2200      	movs	r2, #0
 8003d62:	f7fe f9c9 	bl	80020f8 <xQueueGenericSend>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24
 8003d68:	e008      	b.n	8003d7c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <xTimerGenericCommand+0x98>)
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	f107 0114 	add.w	r1, r7, #20
 8003d72:	2300      	movs	r3, #0
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	f7fe fabd 	bl	80022f4 <xQueueGenericSendFromISR>
 8003d7a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000534 	.word	0x20000534

08003d8c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <prvProcessExpiredTimer+0x94>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fe f892 	bl	8001ece <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d022      	beq.n	8003dfe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	18d1      	adds	r1, r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	6978      	ldr	r0, [r7, #20]
 8003dc6:	f000 f8d1 	bl	8003f6c <prvInsertTimerInActiveList>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01f      	beq.n	8003e10 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7ff ff88 	bl	8003cf0 <xTimerGenericCommand>
 8003de0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
    }
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	4798      	blx	r3
    }
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2000052c 	.word	0x2000052c

08003e24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f857 	bl	8003ee4 <prvGetNextExpireTime>
 8003e36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f803 	bl	8003e48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e42:	f000 f8d5 	bl	8003ff0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e46:	e7f1      	b.n	8003e2c <prvTimerTask+0x8>

08003e48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e52:	f7fe ffb3 	bl	8002dbc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e56:	f107 0308 	add.w	r3, r7, #8
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f866 	bl	8003f2c <prvSampleTimeNow>
 8003e60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d130      	bne.n	8003eca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <prvProcessTimerOrBlockTask+0x3c>
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d806      	bhi.n	8003e84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e76:	f7fe ffaf 	bl	8002dd8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff85 	bl	8003d8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e82:	e024      	b.n	8003ece <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <prvProcessTimerOrBlockTask+0x90>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <prvProcessTimerOrBlockTask+0x50>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <prvProcessTimerOrBlockTask+0x52>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <prvProcessTimerOrBlockTask+0x94>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7fe fdbb 	bl	8002a24 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003eae:	f7fe ff93 	bl	8002dd8 <xTaskResumeAll>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <prvProcessTimerOrBlockTask+0x98>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
    }
 8003ec8:	e001      	b.n	8003ece <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003eca:	f7fe ff85 	bl	8002dd8 <xTaskResumeAll>
    }
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000530 	.word	0x20000530
 8003edc:	20000534 	.word	0x20000534
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <prvGetNextExpireTime+0x44>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <prvGetNextExpireTime+0x16>
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	e000      	b.n	8003efc <prvGetNextExpireTime+0x18>
 8003efa:	2200      	movs	r2, #0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <prvGetNextExpireTime+0x44>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e001      	b.n	8003f18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f18:	68fb      	ldr	r3, [r7, #12]
    }
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000052c 	.word	0x2000052c

08003f2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f34:	f7fe ffec 	bl	8002f10 <xTaskGetTickCount>
 8003f38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <prvSampleTimeNow+0x3c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d205      	bcs.n	8003f50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f44:	f000 f91a 	bl	800417c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e002      	b.n	8003f56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <prvSampleTimeNow+0x3c>)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000053c 	.word	0x2000053c

08003f6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d812      	bhi.n	8003fb8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e01b      	b.n	8003fde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <prvInsertTimerInActiveList+0x7c>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7fd ff53 	bl	8001e5c <vListInsert>
 8003fb6:	e012      	b.n	8003fde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d206      	bcs.n	8003fce <prvInsertTimerInActiveList+0x62>
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e007      	b.n	8003fde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <prvInsertTimerInActiveList+0x80>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fd ff3f 	bl	8001e5c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fde:	697b      	ldr	r3, [r7, #20]
    }
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000530 	.word	0x20000530
 8003fec:	2000052c 	.word	0x2000052c

08003ff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ff6:	e0ae      	b.n	8004156 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f2c0 80aa 	blt.w	8004154 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd ff5c 	bl	8001ece <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff87 	bl	8003f2c <prvSampleTimeNow>
 800401e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b09      	cmp	r3, #9
 8004024:	f200 8097 	bhi.w	8004156 <prvProcessReceivedCommands+0x166>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <prvProcessReceivedCommands+0x40>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004059 	.word	0x08004059
 8004034:	08004059 	.word	0x08004059
 8004038:	08004059 	.word	0x08004059
 800403c:	080040cd 	.word	0x080040cd
 8004040:	080040e1 	.word	0x080040e1
 8004044:	0800412b 	.word	0x0800412b
 8004048:	08004059 	.word	0x08004059
 800404c:	08004059 	.word	0x08004059
 8004050:	080040cd 	.word	0x080040cd
 8004054:	080040e1 	.word	0x080040e1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	18d1      	adds	r1, r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004078:	f7ff ff78 	bl	8003f6c <prvInsertTimerInActiveList>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d069      	beq.n	8004156 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004088:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05e      	beq.n	8004156 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	441a      	add	r2, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2300      	movs	r3, #0
 80040a6:	2100      	movs	r1, #0
 80040a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040aa:	f7ff fe21 	bl	8003cf0 <xTimerGenericCommand>
 80040ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d14f      	bne.n	8004156 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	61bb      	str	r3, [r7, #24]
    }
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80040de:	e03a      	b.n	8004156 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	617b      	str	r3, [r7, #20]
    }
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	18d1      	adds	r1, r2, r3
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004124:	f7ff ff22 	bl	8003f6c <prvInsertTimerInActiveList>
                        break;
 8004128:	e015      	b.n	8004156 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413a:	f000 fbe7 	bl	800490c <vPortFree>
 800413e:	e00a      	b.n	8004156 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	b2da      	uxtb	r2, r3
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004152:	e000      	b.n	8004156 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004154:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <prvProcessReceivedCommands+0x188>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f107 0108 	add.w	r1, r7, #8
 800415e:	2200      	movs	r2, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe f971 	bl	8002448 <xQueueReceive>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f47f af45 	bne.w	8003ff8 <prvProcessReceivedCommands+0x8>
        }
    }
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000534 	.word	0x20000534

0800417c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004182:	e048      	b.n	8004216 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004184:	4b2d      	ldr	r3, [pc, #180]	; (800423c <prvSwitchTimerLists+0xc0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <prvSwitchTimerLists+0xc0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3304      	adds	r3, #4
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd fe96 	bl	8001ece <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02e      	beq.n	8004216 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d90e      	bls.n	80041e8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <prvSwitchTimerLists+0xc0>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fd fe3b 	bl	8001e5c <vListInsert>
 80041e6:	e016      	b.n	8004216 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	2100      	movs	r1, #0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fd7c 	bl	8003cf0 <xTimerGenericCommand>
 80041f8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	603b      	str	r3, [r7, #0]
    }
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <prvSwitchTimerLists+0xc0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1b1      	bne.n	8004184 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <prvSwitchTimerLists+0xc0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <prvSwitchTimerLists+0xc4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a04      	ldr	r2, [pc, #16]	; (800423c <prvSwitchTimerLists+0xc0>)
 800422c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800422e:	4a04      	ldr	r2, [pc, #16]	; (8004240 <prvSwitchTimerLists+0xc4>)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	6013      	str	r3, [r2, #0]
    }
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	2000052c 	.word	0x2000052c
 8004240:	20000530 	.word	0x20000530

08004244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004248:	f000 f95e 	bl	8004508 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <prvCheckForValidListAndQueue+0x54>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11d      	bne.n	8004290 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004254:	4811      	ldr	r0, [pc, #68]	; (800429c <prvCheckForValidListAndQueue+0x58>)
 8004256:	f7fd fdb0 	bl	8001dba <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800425a:	4811      	ldr	r0, [pc, #68]	; (80042a0 <prvCheckForValidListAndQueue+0x5c>)
 800425c:	f7fd fdad 	bl	8001dba <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <prvCheckForValidListAndQueue+0x60>)
 8004262:	4a0e      	ldr	r2, [pc, #56]	; (800429c <prvCheckForValidListAndQueue+0x58>)
 8004264:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <prvCheckForValidListAndQueue+0x64>)
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <prvCheckForValidListAndQueue+0x5c>)
 800426a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800426c:	2200      	movs	r2, #0
 800426e:	210c      	movs	r1, #12
 8004270:	200a      	movs	r0, #10
 8004272:	f7fd febf 	bl	8001ff4 <xQueueGenericCreate>
 8004276:	4603      	mov	r3, r0
 8004278:	4a07      	ldr	r2, [pc, #28]	; (8004298 <prvCheckForValidListAndQueue+0x54>)
 800427a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <prvCheckForValidListAndQueue+0x54>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <prvCheckForValidListAndQueue+0x54>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4908      	ldr	r1, [pc, #32]	; (80042ac <prvCheckForValidListAndQueue+0x68>)
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fba0 	bl	80029d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004290:	f000 f96a 	bl	8004568 <vPortExitCritical>
    }
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000534 	.word	0x20000534
 800429c:	20000504 	.word	0x20000504
 80042a0:	20000518 	.word	0x20000518
 80042a4:	2000052c 	.word	0x2000052c
 80042a8:	20000530 	.word	0x20000530
 80042ac:	0800c078 	.word	0x0800c078

080042b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3b04      	subs	r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3b04      	subs	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f023 0201 	bic.w	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b04      	subs	r3, #4
 80042de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042e0:	4a0c      	ldr	r2, [pc, #48]	; (8004314 <pxPortInitialiseStack+0x64>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3b14      	subs	r3, #20
 80042ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b04      	subs	r3, #4
 80042f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f06f 0202 	mvn.w	r2, #2
 80042fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3b20      	subs	r3, #32
 8004304:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	08004319 	.word	0x08004319

08004318 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <prvTaskExitError+0x54>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432a:	d00a      	beq.n	8004342 <prvTaskExitError+0x2a>
        __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
    }
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <prvTaskExitError+0x28>
        __asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60bb      	str	r3, [r7, #8]
    }
 8004354:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004356:	bf00      	nop
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0fc      	beq.n	8004358 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000020 	.word	0x20000020

08004370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <pxCurrentTCBConst2>)
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	6808      	ldr	r0, [r1, #0]
 8004376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	f380 8809 	msr	PSP, r0
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	4770      	bx	lr
 800438c:	f3af 8000 	nop.w

08004390 <pxCurrentTCBConst2>:
 8004390:	20000400 	.word	0x20000400
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop

08004398 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004398:	4808      	ldr	r0, [pc, #32]	; (80043bc <prvPortStartFirstTask+0x24>)
 800439a:	6800      	ldr	r0, [r0, #0]
 800439c:	6800      	ldr	r0, [r0, #0]
 800439e:	f380 8808 	msr	MSP, r0
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f380 8814 	msr	CONTROL, r0
 80043aa:	b662      	cpsie	i
 80043ac:	b661      	cpsie	f
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	df00      	svc	0
 80043b8:	bf00      	nop
 80043ba:	0000      	.short	0x0000
 80043bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop

080043c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <xPortStartScheduler+0x120>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <xPortStartScheduler+0x124>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d10a      	bne.n	80043ea <xPortStartScheduler+0x26>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	613b      	str	r3, [r7, #16]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043ea:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <xPortStartScheduler+0x120>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a3f      	ldr	r2, [pc, #252]	; (80044ec <xPortStartScheduler+0x128>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d10a      	bne.n	800440a <xPortStartScheduler+0x46>
        __asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
    }
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <xPortStartScheduler+0x12c>)
 800440c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	22ff      	movs	r2, #255	; 0xff
 800441a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <xPortStartScheduler+0x130>)
 8004430:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <xPortStartScheduler+0x134>)
 8004434:	2207      	movs	r2, #7
 8004436:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004438:	e009      	b.n	800444e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800443a:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <xPortStartScheduler+0x134>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3b01      	subs	r3, #1
 8004440:	4a2d      	ldr	r2, [pc, #180]	; (80044f8 <xPortStartScheduler+0x134>)
 8004442:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d0ef      	beq.n	800443a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <xPortStartScheduler+0x134>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1c3 0307 	rsb	r3, r3, #7
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00a      	beq.n	800447c <xPortStartScheduler+0xb8>
        __asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	60bb      	str	r3, [r7, #8]
    }
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <xPortStartScheduler+0x134>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <xPortStartScheduler+0x134>)
 8004484:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <xPortStartScheduler+0x134>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800448e:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <xPortStartScheduler+0x134>)
 8004490:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <xPortStartScheduler+0x138>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <xPortStartScheduler+0x138>)
 80044a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <xPortStartScheduler+0x138>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <xPortStartScheduler+0x138>)
 80044ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044b2:	f000 f8db 	bl	800466c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <xPortStartScheduler+0x13c>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044bc:	f000 f8fa 	bl	80046b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <xPortStartScheduler+0x140>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0f      	ldr	r2, [pc, #60]	; (8004504 <xPortStartScheduler+0x140>)
 80044c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044cc:	f7ff ff64 	bl	8004398 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044d0:	f7fe fdd8 	bl	8003084 <vTaskSwitchContext>
    prvTaskExitError();
 80044d4:	f7ff ff20 	bl	8004318 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	410fc271 	.word	0x410fc271
 80044ec:	410fc270 	.word	0x410fc270
 80044f0:	e000e400 	.word	0xe000e400
 80044f4:	20000540 	.word	0x20000540
 80044f8:	20000544 	.word	0x20000544
 80044fc:	e000ed20 	.word	0xe000ed20
 8004500:	20000020 	.word	0x20000020
 8004504:	e000ef34 	.word	0xe000ef34

08004508 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
        __asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
    }
 8004520:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <vPortEnterCritical+0x58>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	4a0d      	ldr	r2, [pc, #52]	; (8004560 <vPortEnterCritical+0x58>)
 800452a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <vPortEnterCritical+0x58>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d10f      	bne.n	8004554 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <vPortEnterCritical+0x5c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <vPortEnterCritical+0x4c>
        __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	603b      	str	r3, [r7, #0]
    }
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <vPortEnterCritical+0x4a>
    }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000020 	.word	0x20000020
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <vPortExitCritical+0x50>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <vPortExitCritical+0x24>
        __asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	607b      	str	r3, [r7, #4]
    }
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <vPortExitCritical+0x50>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3b01      	subs	r3, #1
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <vPortExitCritical+0x50>)
 8004594:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <vPortExitCritical+0x50>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <vPortExitCritical+0x42>
 800459e:	2300      	movs	r3, #0
 80045a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f383 8811 	msr	BASEPRI, r3
    }
 80045a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000020 	.word	0x20000020
 80045bc:	00000000 	.word	0x00000000

080045c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045c0:	f3ef 8009 	mrs	r0, PSP
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <pxCurrentTCBConst>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f01e 0f10 	tst.w	lr, #16
 80045d0:	bf08      	it	eq
 80045d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045da:	6010      	str	r0, [r2, #0]
 80045dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045e4:	f380 8811 	msr	BASEPRI, r0
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f7fe fd48 	bl	8003084 <vTaskSwitchContext>
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f380 8811 	msr	BASEPRI, r0
 80045fc:	bc09      	pop	{r0, r3}
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	6808      	ldr	r0, [r1, #0]
 8004602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004606:	f01e 0f10 	tst.w	lr, #16
 800460a:	bf08      	it	eq
 800460c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004610:	f380 8809 	msr	PSP, r0
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	f3af 8000 	nop.w

08004620 <pxCurrentTCBConst>:
 8004620:	20000400 	.word	0x20000400
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop

08004628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
        __asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	607b      	str	r3, [r7, #4]
    }
 8004640:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004642:	f7fe fc75 	bl	8002f30 <xTaskIncrementTick>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <SysTick_Handler+0x40>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f383 8811 	msr	BASEPRI, r3
    }
 800465e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <vPortSetupTimerInterrupt+0x34>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <vPortSetupTimerInterrupt+0x38>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <vPortSetupTimerInterrupt+0x3c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <vPortSetupTimerInterrupt+0x40>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	099b      	lsrs	r3, r3, #6
 8004688:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <vPortSetupTimerInterrupt+0x44>)
 800468a:	3b01      	subs	r3, #1
 800468c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <vPortSetupTimerInterrupt+0x34>)
 8004690:	2207      	movs	r2, #7
 8004692:	601a      	str	r2, [r3, #0]
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000e010 	.word	0xe000e010
 80046a4:	e000e018 	.word	0xe000e018
 80046a8:	20000024 	.word	0x20000024
 80046ac:	10624dd3 	.word	0x10624dd3
 80046b0:	e000e014 	.word	0xe000e014

080046b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046c4 <vPortEnableVFP+0x10>
 80046b8:	6801      	ldr	r1, [r0, #0]
 80046ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046be:	6001      	str	r1, [r0, #0]
 80046c0:	4770      	bx	lr
 80046c2:	0000      	.short	0x0000
 80046c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop

080046cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80046d2:	f3ef 8305 	mrs	r3, IPSR
 80046d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	d914      	bls.n	8004708 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046de:	4a17      	ldr	r2, [pc, #92]	; (800473c <vPortValidateInterruptPriority+0x70>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046e8:	4b15      	ldr	r3, [pc, #84]	; (8004740 <vPortValidateInterruptPriority+0x74>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	7afa      	ldrb	r2, [r7, #11]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d20a      	bcs.n	8004708 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	607b      	str	r3, [r7, #4]
    }
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <vPortValidateInterruptPriority+0x78>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <vPortValidateInterruptPriority+0x7c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d90a      	bls.n	800472e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	603b      	str	r3, [r7, #0]
    }
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <vPortValidateInterruptPriority+0x60>
    }
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000e3f0 	.word	0xe000e3f0
 8004740:	20000540 	.word	0x20000540
 8004744:	e000ed0c 	.word	0xe000ed0c
 8004748:	20000544 	.word	0x20000544

0800474c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004758:	f7fe fb30 	bl	8002dbc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800475c:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <pvPortMalloc+0x1a8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004764:	f000 f934 	bl	80049d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004768:	4b63      	ldr	r3, [pc, #396]	; (80048f8 <pvPortMalloc+0x1ac>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4013      	ands	r3, r2
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 80a7 	bne.w	80048c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02d      	beq.n	80047d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800477c:	2208      	movs	r2, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d227      	bcs.n	80047d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004788:	2208      	movs	r2, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	2b00      	cmp	r3, #0
 8004798:	d021      	beq.n	80047de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	3308      	adds	r3, #8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d214      	bcs.n	80047d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	3308      	adds	r3, #8
 80047b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d010      	beq.n	80047de <pvPortMalloc+0x92>
        __asm volatile
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	617b      	str	r3, [r7, #20]
    }
 80047ce:	bf00      	nop
 80047d0:	e7fe      	b.n	80047d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047d6:	e002      	b.n	80047de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	e000      	b.n	80047e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d06e      	beq.n	80048c4 <pvPortMalloc+0x178>
 80047e6:	4b45      	ldr	r3, [pc, #276]	; (80048fc <pvPortMalloc+0x1b0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d869      	bhi.n	80048c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <pvPortMalloc+0x1b4>)
 80047f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <pvPortMalloc+0x1b4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047fa:	e004      	b.n	8004806 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	429a      	cmp	r2, r3
 800480e:	d903      	bls.n	8004818 <pvPortMalloc+0xcc>
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f1      	bne.n	80047fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <pvPortMalloc+0x1a8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	429a      	cmp	r2, r3
 8004820:	d050      	beq.n	80048c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2208      	movs	r2, #8
 8004828:	4413      	add	r3, r2
 800482a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	2308      	movs	r3, #8
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	429a      	cmp	r2, r3
 8004842:	d91f      	bls.n	8004884 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <pvPortMalloc+0x120>
        __asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	613b      	str	r3, [r7, #16]
    }
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800487e:	69b8      	ldr	r0, [r7, #24]
 8004880:	f000 f908 	bl	8004a94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004884:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <pvPortMalloc+0x1b0>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <pvPortMalloc+0x1b0>)
 8004890:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004892:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <pvPortMalloc+0x1b0>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <pvPortMalloc+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d203      	bcs.n	80048a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <pvPortMalloc+0x1b0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	; (8004904 <pvPortMalloc+0x1b8>)
 80048a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <pvPortMalloc+0x1ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <pvPortMalloc+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <pvPortMalloc+0x1bc>)
 80048c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048c4:	f7fe fa88 	bl	8002dd8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <pvPortMalloc+0x19c>
        __asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
    }
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80048e8:	69fb      	ldr	r3, [r7, #28]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20013150 	.word	0x20013150
 80048f8:	20013164 	.word	0x20013164
 80048fc:	20013154 	.word	0x20013154
 8004900:	20013148 	.word	0x20013148
 8004904:	20013158 	.word	0x20013158
 8004908:	2001315c 	.word	0x2001315c

0800490c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04d      	beq.n	80049ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800491e:	2308      	movs	r3, #8
 8004920:	425b      	negs	r3, r3
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <vPortFree+0xb8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <vPortFree+0x44>
        __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	60fb      	str	r3, [r7, #12]
    }
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <vPortFree+0x62>
        __asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	60bb      	str	r3, [r7, #8]
    }
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <vPortFree+0xb8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01e      	beq.n	80049ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11a      	bne.n	80049ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <vPortFree+0xb8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004994:	f7fe fa12 	bl	8002dbc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <vPortFree+0xbc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <vPortFree+0xbc>)
 80049a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049a6:	6938      	ldr	r0, [r7, #16]
 80049a8:	f000 f874 	bl	8004a94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049ac:	4b07      	ldr	r3, [pc, #28]	; (80049cc <vPortFree+0xc0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	4a06      	ldr	r2, [pc, #24]	; (80049cc <vPortFree+0xc0>)
 80049b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049b6:	f7fe fa0f 	bl	8002dd8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20013164 	.word	0x20013164
 80049c8:	20013154 	.word	0x20013154
 80049cc:	20013160 	.word	0x20013160

080049d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80049da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <prvHeapInit+0xac>)
 80049de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3307      	adds	r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <prvHeapInit+0xac>)
 8004a00:	4413      	add	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a08:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <prvHeapInit+0xb0>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a0e:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <prvHeapInit+0xb0>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <prvHeapInit+0xb4>)
 8004a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <prvHeapInit+0xb4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <prvHeapInit+0xb4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a50:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <prvHeapInit+0xb4>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <prvHeapInit+0xb8>)
 8004a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <prvHeapInit+0xbc>)
 8004a66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <prvHeapInit+0xc0>)
 8004a6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a6e:	601a      	str	r2, [r3, #0]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	20000548 	.word	0x20000548
 8004a80:	20013148 	.word	0x20013148
 8004a84:	20013150 	.word	0x20013150
 8004a88:	20013158 	.word	0x20013158
 8004a8c:	20013154 	.word	0x20013154
 8004a90:	20013164 	.word	0x20013164

08004a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <prvInsertBlockIntoFreeList+0xac>)
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e002      	b.n	8004aa8 <prvInsertBlockIntoFreeList+0x14>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d8f7      	bhi.n	8004aa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d108      	bne.n	8004ad6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d118      	bne.n	8004b1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <prvInsertBlockIntoFreeList+0xb0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d00d      	beq.n	8004b12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e008      	b.n	8004b24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <prvInsertBlockIntoFreeList+0xb0>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	e003      	b.n	8004b24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d002      	beq.n	8004b32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20013148 	.word	0x20013148
 8004b44:	20013150 	.word	0x20013150

08004b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	db0b      	blt.n	8004b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 021f 	and.w	r2, r3, #31
 8004b60:	4907      	ldr	r1, [pc, #28]	; (8004b80 <__NVIC_EnableIRQ+0x38>)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2001      	movs	r0, #1
 8004b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e100 	.word	0xe000e100

08004b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db0a      	blt.n	8004bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	490c      	ldr	r1, [pc, #48]	; (8004bd0 <__NVIC_SetPriority+0x4c>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bac:	e00a      	b.n	8004bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <__NVIC_SetPriority+0x50>)
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	761a      	strb	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000e100 	.word	0xe000e100
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

	uint32_t period = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
	uint32_t speed   = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004be8:	b672      	cpsid	i
}
 8004bea:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrBTimerHandler->ptrTIMx == TIM1){
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a85      	ldr	r2, [pc, #532]	; (8004e08 <BasicTimer_Config+0x230>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d106      	bne.n	8004c04 <BasicTimer_Config+0x2c>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8004bf6:	4b85      	ldr	r3, [pc, #532]	; (8004e0c <BasicTimer_Config+0x234>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	4a84      	ldr	r2, [pc, #528]	; (8004e0c <BasicTimer_Config+0x234>)
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	6453      	str	r3, [r2, #68]	; 0x44
 8004c02:	e030      	b.n	8004c66 <BasicTimer_Config+0x8e>

	}else if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d106      	bne.n	8004c1c <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004c0e:	4b7f      	ldr	r3, [pc, #508]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a7e      	ldr	r2, [pc, #504]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1a:	e024      	b.n	8004c66 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a7b      	ldr	r2, [pc, #492]	; (8004e10 <BasicTimer_Config+0x238>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d106      	bne.n	8004c34 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004c26:	4b79      	ldr	r3, [pc, #484]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a78      	ldr	r2, [pc, #480]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
 8004c32:	e018      	b.n	8004c66 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a76      	ldr	r2, [pc, #472]	; (8004e14 <BasicTimer_Config+0x23c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d106      	bne.n	8004c4c <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004c3e:	4b73      	ldr	r3, [pc, #460]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a72      	ldr	r2, [pc, #456]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c44:	f043 0304 	orr.w	r3, r3, #4
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4a:	e00c      	b.n	8004c66 <BasicTimer_Config+0x8e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a71      	ldr	r2, [pc, #452]	; (8004e18 <BasicTimer_Config+0x240>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d106      	bne.n	8004c64 <BasicTimer_Config+0x8c>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004c56:	4b6d      	ldr	r3, [pc, #436]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a6c      	ldr	r2, [pc, #432]	; (8004e0c <BasicTimer_Config+0x234>)
 8004c5c:	f043 0308 	orr.w	r3, r3, #8
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	e000      	b.n	8004c66 <BasicTimer_Config+0x8e>
	}
	else{
		__NOP();
 8004c64:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrBTimerHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c74:	601a      	str	r2, [r3, #0]
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */

	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6892      	ldr	r2, [r2, #8]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28


	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	791b      	ldrb	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 80d3 	bne.w	8004e30 <BasicTimer_Config+0x258>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0210 	bic.w	r2, r2, #16
 8004c98:	601a      	str	r2, [r3, #0]

		speed = ptrBTimerHandler->TIMx_Config.TIMx_speed;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		if ((speed == BTIMER_SPEED_16MHz_10us )
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ca4:	d022      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_20MHz_10us)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2bc8      	cmp	r3, #200	; 0xc8
 8004caa:	d01f      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_30MHz_10us)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004cb2:	d01b      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_40MHz_10us)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004cba:	d017      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_50MHz_10us)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cc2:	d013      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_60MHz_10us)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004cca:	d00f      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_70MHz_10us)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004cd2:	d00b      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_80MHz_10us)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004cda:	d007      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_90MHz_10us)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004ce2:	d003      	beq.n	8004cec <BasicTimer_Config+0x114>
		  ||(speed == BTIMER_SPEED_100MHz_10us)){
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cea:	d10b      	bne.n	8004d04 <BasicTimer_Config+0x12c>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 100 ;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2264      	movs	r2, #100	; 0x64
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	3a01      	subs	r2, #1
 8004d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d02:	e07c      	b.n	8004dfe <BasicTimer_Config+0x226>

		}else if ((speed == BTIMER_SPEED_16MHz_100us )
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d0a:	d029      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_20MHz_100us)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d12:	d025      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_30MHz_100us)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d020      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_40MHz_100us)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004d24:	d01c      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_50MHz_100us)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d017      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_60MHz_100us)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f241 7270 	movw	r2, #6000	; 0x1770
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d012      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_70MHz_100us)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00d      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_80MHz_100us)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004d4a:	d009      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_90MHz_100us)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f242 3228 	movw	r2, #9000	; 0x2328
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <BasicTimer_Config+0x188>
			   || (speed == BTIMER_SPEED_100MHz_100us)){
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10c      	bne.n	8004d7a <BasicTimer_Config+0x1a2>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period * 10   ;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	3a01      	subs	r2, #1
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d78:	e041      	b.n	8004dfe <BasicTimer_Config+0x226>



		}else if ((speed == BTIMER_SPEED_16MHz_1ms)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004d80:	d028      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_20MHz_1ms)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d023      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_30MHz_1ms)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f247 5230 	movw	r2, #30000	; 0x7530
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01e      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_40MHz_1ms)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d019      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_50MHz_1ms)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d014      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_60MHz_1ms)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00f      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_70MHz_1ms)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <BasicTimer_Config+0x244>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00b      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_80MHz_1ms)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <BasicTimer_Config+0x248>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_90MHz_1ms)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <BasicTimer_Config+0x24c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <BasicTimer_Config+0x1fc>
			   || (speed == BTIMER_SPEED_100MHz_1ms)){
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <BasicTimer_Config+0x250>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <BasicTimer_Config+0x20e>

			period = ptrBTimerHandler->TIMx_Config.TIMx_period;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	3a01      	subs	r2, #1
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004de4:	e00b      	b.n	8004dfe <BasicTimer_Config+0x226>

		}else{
			period = ptrBTimerHandler->TIMx_Config.TIMx_period / 10;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4a10      	ldr	r2, [pc, #64]	; (8004e2c <BasicTimer_Config+0x254>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	60fb      	str	r3, [r7, #12]

			ptrBTimerHandler->ptrTIMx->ARR = period - 1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
		}


		/* 3c. Reiniciamos el registro counter*/
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24
 8004e06:	e027      	b.n	8004e58 <BasicTimer_Config+0x280>
 8004e08:	40010000 	.word	0x40010000
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	00011170 	.word	0x00011170
 8004e20:	00013880 	.word	0x00013880
 8004e24:	00015f90 	.word	0x00015f90
 8004e28:	000186a0 	.word	0x000186a0
 8004e2c:	cccccccd 	.word	0xcccccccd

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_DIR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0210 	orr.w	r2, r2, #16
 8004e3e:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3a01      	subs	r2, #1
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24
	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	//ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d103      	bne.n	8004e7a <BasicTimer_Config+0x2a2>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8004e72:	201c      	movs	r0, #28
 8004e74:	f7ff fe68 	bl	8004b48 <__NVIC_EnableIRQ>
 8004e78:	e01b      	b.n	8004eb2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <BasicTimer_Config+0x2e8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d103      	bne.n	8004e8c <BasicTimer_Config+0x2b4>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8004e84:	201d      	movs	r0, #29
 8004e86:	f7ff fe5f 	bl	8004b48 <__NVIC_EnableIRQ>
 8004e8a:	e012      	b.n	8004eb2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <BasicTimer_Config+0x2ec>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d103      	bne.n	8004e9e <BasicTimer_Config+0x2c6>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8004e96:	201e      	movs	r0, #30
 8004e98:	f7ff fe56 	bl	8004b48 <__NVIC_EnableIRQ>
 8004e9c:	e009      	b.n	8004eb2 <BasicTimer_Config+0x2da>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <BasicTimer_Config+0x2f0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <BasicTimer_Config+0x2d8>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8004ea8:	2032      	movs	r0, #50	; 0x32
 8004eaa:	f7ff fe4d 	bl	8004b48 <__NVIC_EnableIRQ>
 8004eae:	e000      	b.n	8004eb2 <BasicTimer_Config+0x2da>
	}
	else{
		__NOP();
 8004eb0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004eb2:	b662      	cpsie	i
}
 8004eb4:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8004eb6:	bf00      	nop
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00

08004ecc <TIM_SetPriority>:

void TIM_SetPriority (BasicTimer_Handler_t *ptrBTimerHandler, uint8_t newPriority){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ed8:	b672      	cpsid	i
}
 8004eda:	bf00      	nop

	__disable_irq();

	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d105      	bne.n	8004ef2 <TIM_SetPriority+0x26>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_SetPriority(TIM2_IRQn, newPriority);
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	201c      	movs	r0, #28
 8004eec:	f7ff fe4a 	bl	8004b84 <__NVIC_SetPriority>
 8004ef0:	e021      	b.n	8004f36 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <TIM_SetPriority+0x78>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d105      	bne.n	8004f08 <TIM_SetPriority+0x3c>
		// Activando en NVIC para la interrupción del TIM3
		NVIC_SetPriority(TIM3_IRQn, newPriority);
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	4619      	mov	r1, r3
 8004f00:	201d      	movs	r0, #29
 8004f02:	f7ff fe3f 	bl	8004b84 <__NVIC_SetPriority>
 8004f06:	e016      	b.n	8004f36 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <TIM_SetPriority+0x7c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d105      	bne.n	8004f1e <TIM_SetPriority+0x52>
		// Activando en NVIC para la interrupción del TIM4
		NVIC_SetPriority(TIM4_IRQn, newPriority);
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	4619      	mov	r1, r3
 8004f16:	201e      	movs	r0, #30
 8004f18:	f7ff fe34 	bl	8004b84 <__NVIC_SetPriority>
 8004f1c:	e00b      	b.n	8004f36 <TIM_SetPriority+0x6a>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <TIM_SetPriority+0x80>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d105      	bne.n	8004f34 <TIM_SetPriority+0x68>
		// Activando en NVIC para la interrupción del TIM5
		NVIC_SetPriority(TIM5_IRQn, newPriority);
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	2032      	movs	r0, #50	; 0x32
 8004f2e:	f7ff fe29 	bl	8004b84 <__NVIC_SetPriority>
 8004f32:	e000      	b.n	8004f36 <TIM_SetPriority+0x6a>
	}
	else{
		__NOP();
 8004f34:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004f36:	b662      	cpsie	i
}
 8004f38:	bf00      	nop
	}

	__enable_irq();

}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00

08004f50 <BasicTimer3_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void){
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004f54:	bf00      	nop
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <BasicTimer4_Callback>:
__attribute__((weak)) void BasicTimer4_Callback(void){
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004f64:	bf00      	nop
}
 8004f66:	bf00      	nop
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <BasicTimer5_Callback>:
__attribute__((weak)) void BasicTimer5_Callback(void){
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004f74:	bf00      	nop
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <Capture_TIM2_Ch1_Callback>:

__attribute__((weak)) void Capture_TIM2_Ch1_Callback(void){
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004f84:	bf00      	nop
}
 8004f86:	bf00      	nop
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <Capture_TIM2_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch2_Callback(void){
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004f94:	bf00      	nop
}
 8004f96:	bf00      	nop
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <Capture_TIM2_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch3_Callback(void){
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004fa4:	bf00      	nop
}
 8004fa6:	bf00      	nop
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <Capture_TIM2_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM2_Ch4_Callback(void){
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004fb4:	bf00      	nop
}
 8004fb6:	bf00      	nop
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <Capture_TIM3_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch1_Callback(void){
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004fc4:	bf00      	nop
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <Capture_TIM3_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch2_Callback(void){
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004fd4:	bf00      	nop
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <Capture_TIM3_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch3_Callback(void){
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004fe4:	bf00      	nop
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <Capture_TIM3_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM3_Ch4_Callback(void){
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8004ff4:	bf00      	nop
}
 8004ff6:	bf00      	nop
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <Capture_TIM4_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch1_Callback(void){
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005004:	bf00      	nop
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <Capture_TIM4_Ch3_Callback>:
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}
__attribute__((weak)) void Capture_TIM4_Ch3_Callback(void){
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005014:	bf00      	nop
}
 8005016:	bf00      	nop
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <Capture_TIM4_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM4_Ch4_Callback(void){
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005024:	bf00      	nop
}
 8005026:	bf00      	nop
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <Capture_TIM5_Ch1_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch1_Callback(void){
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005034:	bf00      	nop
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <Capture_TIM5_Ch2_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch2_Callback(void){
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005044:	bf00      	nop
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <Capture_TIM5_Ch3_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch3_Callback(void){
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005054:	bf00      	nop
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <Capture_TIM5_Ch4_Callback>:
__attribute__((weak)) void Capture_TIM5_Ch4_Callback(void){
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8005064:	bf00      	nop
}
 8005066:	bf00      	nop
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM2->SR & TIM_SR_UIF){
 8005074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <TIM2_IRQHandler+0x28>
			TIM2->SR &= ~TIM_SR_UIF;
 8005082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6113      	str	r3, [r2, #16]
			/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
			BasicTimer2_Callback();
 8005092:	f7fc fb75 	bl	8001780 <BasicTimer2_Callback>
			TIM2->SR &= ~TIM_SR_CC4IF;
			TIM2->SR &= ~TIM_SR_CC4OF;
			Capture_TIM2_Ch4_Callback();
		}

}
 8005096:	e066      	b.n	8005166 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC1IF){
 8005098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <TIM2_IRQHandler+0x5c>
			TIM2->SR &= ~TIM_SR_CC1IF;
 80050a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050b0:	f023 0302 	bic.w	r3, r3, #2
 80050b4:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC1OF;
 80050b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c4:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch1_Callback();
 80050c6:	f7ff ff5b 	bl	8004f80 <Capture_TIM2_Ch1_Callback>
}
 80050ca:	e04c      	b.n	8005166 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC2IF){
 80050cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d012      	beq.n	8005100 <TIM2_IRQHandler+0x90>
			TIM2->SR &= ~TIM_SR_CC2IF;
 80050da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050e4:	f023 0304 	bic.w	r3, r3, #4
 80050e8:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC2OF;
 80050ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f8:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch2_Callback();
 80050fa:	f7ff ff49 	bl	8004f90 <Capture_TIM2_Ch2_Callback>
}
 80050fe:	e032      	b.n	8005166 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC3IF){
 8005100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <TIM2_IRQHandler+0xc4>
			TIM2->SR &= ~TIM_SR_CC3IF;
 800510e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005118:	f023 0308 	bic.w	r3, r3, #8
 800511c:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC3OF;
 800511e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512c:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch3_Callback();
 800512e:	f7ff ff37 	bl	8004fa0 <Capture_TIM2_Ch3_Callback>
}
 8005132:	e018      	b.n	8005166 <TIM2_IRQHandler+0xf6>
		}else if (TIM2->SR & TIM_SR_CC4IF){
 8005134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b00      	cmp	r3, #0
 8005140:	d011      	beq.n	8005166 <TIM2_IRQHandler+0xf6>
			TIM2->SR &= ~TIM_SR_CC4IF;
 8005142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800514c:	f023 0310 	bic.w	r3, r3, #16
 8005150:	6113      	str	r3, [r2, #16]
			TIM2->SR &= ~TIM_SR_CC4OF;
 8005152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800515c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005160:	6113      	str	r3, [r2, #16]
			Capture_TIM2_Ch4_Callback();
 8005162:	f7ff ff25 	bl	8004fb0 <Capture_TIM2_Ch4_Callback>
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM3->SR & TIM_SR_UIF){
 8005170:	4b31      	ldr	r3, [pc, #196]	; (8005238 <TIM3_IRQHandler+0xcc>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;
 800517c:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <TIM3_IRQHandler+0xcc>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <TIM3_IRQHandler+0xcc>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8005188:	f7ff fee2 	bl	8004f50 <BasicTimer3_Callback>
	}else if (TIM3->SR & TIM_SR_CC4IF){
		TIM3->SR &= ~TIM_SR_CC4IF;
		TIM3->SR &= ~TIM_SR_CC4OF;
		Capture_TIM3_Ch4_Callback();
	}
}
 800518c:	e052      	b.n	8005234 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC1IF){
 800518e:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <TIM3_IRQHandler+0xcc>)
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00e      	beq.n	80051b8 <TIM3_IRQHandler+0x4c>
		TIM3->SR &= ~TIM_SR_CC1IF;
 800519a:	4b27      	ldr	r3, [pc, #156]	; (8005238 <TIM3_IRQHandler+0xcc>)
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	4a26      	ldr	r2, [pc, #152]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051a0:	f023 0302 	bic.w	r3, r3, #2
 80051a4:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC1OF;
 80051a6:	4b24      	ldr	r3, [pc, #144]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	4a23      	ldr	r2, [pc, #140]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch1_Callback();
 80051b2:	f7ff ff05 	bl	8004fc0 <Capture_TIM3_Ch1_Callback>
}
 80051b6:	e03d      	b.n	8005234 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC2IF){
 80051b8:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00e      	beq.n	80051e2 <TIM3_IRQHandler+0x76>
		TIM3->SR &= ~TIM_SR_CC2IF;
 80051c4:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051ca:	f023 0304 	bic.w	r3, r3, #4
 80051ce:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC2OF;
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051da:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch2_Callback();
 80051dc:	f7ff fef8 	bl	8004fd0 <Capture_TIM3_Ch2_Callback>
}
 80051e0:	e028      	b.n	8005234 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC3IF){
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00e      	beq.n	800520c <TIM3_IRQHandler+0xa0>
		TIM3->SR &= ~TIM_SR_CC3IF;
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	4a11      	ldr	r2, [pc, #68]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051f4:	f023 0308 	bic.w	r3, r3, #8
 80051f8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC3OF;
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <TIM3_IRQHandler+0xcc>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <TIM3_IRQHandler+0xcc>)
 8005200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005204:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch3_Callback();
 8005206:	f7ff feeb 	bl	8004fe0 <Capture_TIM3_Ch3_Callback>
}
 800520a:	e013      	b.n	8005234 <TIM3_IRQHandler+0xc8>
	}else if (TIM3->SR & TIM_SR_CC4IF){
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <TIM3_IRQHandler+0xcc>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <TIM3_IRQHandler+0xc8>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8005218:	4b07      	ldr	r3, [pc, #28]	; (8005238 <TIM3_IRQHandler+0xcc>)
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	4a06      	ldr	r2, [pc, #24]	; (8005238 <TIM3_IRQHandler+0xcc>)
 800521e:	f023 0310 	bic.w	r3, r3, #16
 8005222:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_CC4OF;
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <TIM3_IRQHandler+0xcc>)
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	4a03      	ldr	r2, [pc, #12]	; (8005238 <TIM3_IRQHandler+0xcc>)
 800522a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800522e:	6113      	str	r3, [r2, #16]
		Capture_TIM3_Ch4_Callback();
 8005230:	f7ff fede 	bl	8004ff0 <Capture_TIM3_Ch4_Callback>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40000400 	.word	0x40000400

0800523c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM4->SR & TIM_SR_UIF){
 8005240:	4b31      	ldr	r3, [pc, #196]	; (8005308 <TIM4_IRQHandler+0xcc>)
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <TIM4_IRQHandler+0x22>
		TIM4->SR &= ~TIM_SR_UIF;
 800524c:	4b2e      	ldr	r3, [pc, #184]	; (8005308 <TIM4_IRQHandler+0xcc>)
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	4a2d      	ldr	r2, [pc, #180]	; (8005308 <TIM4_IRQHandler+0xcc>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8005258:	f7ff fe82 	bl	8004f60 <BasicTimer4_Callback>
		TIM4->SR &= ~TIM_SR_CC4IF;
		TIM4->SR &= ~TIM_SR_CC4OF;
		Capture_TIM4_Ch4_Callback();
	}

}
 800525c:	e052      	b.n	8005304 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC1IF){
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <TIM4_IRQHandler+0xcc>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00e      	beq.n	8005288 <TIM4_IRQHandler+0x4c>
		TIM4->SR &= ~TIM_SR_CC1IF;
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <TIM4_IRQHandler+0xcc>)
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM4_IRQHandler+0xcc>)
 8005270:	f023 0302 	bic.w	r3, r3, #2
 8005274:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC1OF;
 8005276:	4b24      	ldr	r3, [pc, #144]	; (8005308 <TIM4_IRQHandler+0xcc>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4a23      	ldr	r2, [pc, #140]	; (8005308 <TIM4_IRQHandler+0xcc>)
 800527c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005280:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch1_Callback();
 8005282:	f7ff febd 	bl	8005000 <Capture_TIM4_Ch1_Callback>
}
 8005286:	e03d      	b.n	8005304 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC2IF){
 8005288:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <TIM4_IRQHandler+0xcc>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <TIM4_IRQHandler+0x76>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8005294:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <TIM4_IRQHandler+0xcc>)
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <TIM4_IRQHandler+0xcc>)
 800529a:	f023 0304 	bic.w	r3, r3, #4
 800529e:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC2OF;
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052aa:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 80052ac:	f7ff fec8 	bl	8005040 <Capture_TIM5_Ch2_Callback>
}
 80052b0:	e028      	b.n	8005304 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC3IF){
 80052b2:	4b15      	ldr	r3, [pc, #84]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00e      	beq.n	80052dc <TIM4_IRQHandler+0xa0>
		TIM4->SR &= ~TIM_SR_CC3IF;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	4a11      	ldr	r2, [pc, #68]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052c4:	f023 0308 	bic.w	r3, r3, #8
 80052c8:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC3OF;
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	4a0e      	ldr	r2, [pc, #56]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d4:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch3_Callback();
 80052d6:	f7ff fe9b 	bl	8005010 <Capture_TIM4_Ch3_Callback>
}
 80052da:	e013      	b.n	8005304 <TIM4_IRQHandler+0xc8>
	}else if (TIM4->SR & TIM_SR_CC4IF){
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <TIM4_IRQHandler+0xc8>
		TIM4->SR &= ~TIM_SR_CC4IF;
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	4a06      	ldr	r2, [pc, #24]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052ee:	f023 0310 	bic.w	r3, r3, #16
 80052f2:	6113      	str	r3, [r2, #16]
		TIM4->SR &= ~TIM_SR_CC4OF;
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4a03      	ldr	r2, [pc, #12]	; (8005308 <TIM4_IRQHandler+0xcc>)
 80052fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fe:	6113      	str	r3, [r2, #16]
		Capture_TIM4_Ch4_Callback();
 8005300:	f7ff fe8e 	bl	8005020 <Capture_TIM4_Ch4_Callback>
}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40000800 	.word	0x40000800

0800530c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0

	/* Limpiamos la bandera que indica que la interrupción se ha generado */
	if (TIM5->SR & TIM_SR_UIF){
 8005310:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <TIM5_IRQHandler+0x22>
		TIM5->SR &= ~TIM_SR_UIF;
 800531c:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	4a2d      	ldr	r2, [pc, #180]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	6113      	str	r3, [r2, #16]
		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8005328:	f7ff fe22 	bl	8004f70 <BasicTimer5_Callback>
		TIM5->SR &= ~TIM_SR_CC4OF;
		Capture_TIM5_Ch4_Callback();
	}


}
 800532c:	e052      	b.n	80053d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC1IF){
 800532e:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00e      	beq.n	8005358 <TIM5_IRQHandler+0x4c>
		TIM5->SR &= ~TIM_SR_CC1IF;
 800533a:	4b27      	ldr	r3, [pc, #156]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	4a26      	ldr	r2, [pc, #152]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005340:	f023 0302 	bic.w	r3, r3, #2
 8005344:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC1OF;
 8005346:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	4a23      	ldr	r2, [pc, #140]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 800534c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005350:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch1_Callback();
 8005352:	f7ff fe6d 	bl	8005030 <Capture_TIM5_Ch1_Callback>
}
 8005356:	e03d      	b.n	80053d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC2IF){
 8005358:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <TIM5_IRQHandler+0x76>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8005364:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 800536a:	f023 0304 	bic.w	r3, r3, #4
 800536e:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC2OF;
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800537a:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch2_Callback();
 800537c:	f7ff fe60 	bl	8005040 <Capture_TIM5_Ch2_Callback>
}
 8005380:	e028      	b.n	80053d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC3IF){
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00e      	beq.n	80053ac <TIM5_IRQHandler+0xa0>
		TIM5->SR &= ~TIM_SR_CC3IF;
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 8005394:	f023 0308 	bic.w	r3, r3, #8
 8005398:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC3OF;
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 80053a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a4:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch3_Callback();
 80053a6:	f7ff fe53 	bl	8005050 <Capture_TIM5_Ch3_Callback>
}
 80053aa:	e013      	b.n	80053d4 <TIM5_IRQHandler+0xc8>
	}else if (TIM5->SR & TIM_SR_CC4IF){
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <TIM5_IRQHandler+0xc8>
		TIM5->SR &= ~TIM_SR_CC4IF;
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4a06      	ldr	r2, [pc, #24]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 80053be:	f023 0310 	bic.w	r3, r3, #16
 80053c2:	6113      	str	r3, [r2, #16]
		TIM5->SR &= ~TIM_SR_CC4OF;
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	4a03      	ldr	r2, [pc, #12]	; (80053d8 <TIM5_IRQHandler+0xcc>)
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ce:	6113      	str	r3, [r2, #16]
		Capture_TIM5_Ch4_Callback();
 80053d0:	f7ff fe46 	bl	8005060 <Capture_TIM5_Ch4_Callback>
}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40000c00 	.word	0x40000c00

080053dc <startTimer>:



void startTimer (BasicTimer_Handler_t *ptrTimerConfig){
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <stopTimer>:

void stopTimer (BasicTimer_Handler_t *ptrTimerConfig){
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	ptrTimerConfig->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <__NVIC_EnableIRQ>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	2b00      	cmp	r3, #0
 8005434:	db0b      	blt.n	800544e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	f003 021f 	and.w	r2, r3, #31
 800543c:	4907      	ldr	r1, [pc, #28]	; (800545c <__NVIC_EnableIRQ+0x38>)
 800543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2001      	movs	r0, #1
 8005446:	fa00 f202 	lsl.w	r2, r0, r2
 800544a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	e000e100 	.word	0xe000e100

08005460 <extInt_Config>:
#include "EXTIDriver.h"
#include "GPIOxDriver.h"
GPIO_Handler_t handlerSimplePin = {0};

// Haciendo prueba con PC15
void extInt_Config(EXTI_Config_t *extiConfig){
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

	/* 1.0 Se carga la configuración, que debe ser el PINx como entrada "simple" */
	GPIO_Config(extiConfig->pGPIOHandler);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f001 f835 	bl	80064dc <GPIO_Config>

	/* 2.0 Activamos el acceso al SYSCFG */
	RCC->APB2ENR = RCC_APB2ENR_SYSCFGEN;
 8005472:	4b96      	ldr	r3, [pc, #600]	; (80056cc <extInt_Config+0x26c>)
 8005474:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005478:	645a      	str	r2, [r3, #68]	; 0x44

	/* 3.0  Asignamos el canal EXTI que corresponde al PIN_y del puerto GPIO_X
	 * Debemos activar la línea PIN_Xy (Y = A, B, C... y x = 0, 1, 2, 3...)
	 * en el módulo EXTI */
		switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	791b      	ldrb	r3, [r3, #4]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	f200 85cd 	bhi.w	8006020 <extInt_Config+0xbc0>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <extInt_Config+0x2c>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054cd 	.word	0x080054cd
 8005490:	08005583 	.word	0x08005583
 8005494:	08005639 	.word	0x08005639
 8005498:	0800570f 	.word	0x0800570f
 800549c:	080057c5 	.word	0x080057c5
 80054a0:	08005873 	.word	0x08005873
 80054a4:	08005939 	.word	0x08005939
 80054a8:	080059e1 	.word	0x080059e1
 80054ac:	08005a89 	.word	0x08005a89
 80054b0:	08005b31 	.word	0x08005b31
 80054b4:	08005bf7 	.word	0x08005bf7
 80054b8:	08005c9f 	.word	0x08005c9f
 80054bc:	08005d47 	.word	0x08005d47
 80054c0:	08005e0d 	.word	0x08005e0d
 80054c4:	08005eb3 	.word	0x08005eb3
 80054c8:	08005f5b 	.word	0x08005f5b
		/* Configurando para el todos los pines GPIOX_0*/
				case 0: {
					/* SYSCFG_EXTICR1 */
					// Limpiamos primero la posición que deseamos configurar
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI0_Pos);
 80054cc:	4b80      	ldr	r3, [pc, #512]	; (80056d0 <extInt_Config+0x270>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4a7f      	ldr	r2, [pc, #508]	; (80056d0 <extInt_Config+0x270>)
 80054d2:	f023 030f 	bic.w	r3, r3, #15
 80054d6:	6093      	str	r3, [r2, #8]

					// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
					// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7d      	ldr	r2, [pc, #500]	; (80056d4 <extInt_Config+0x274>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d105      	bne.n	80054f0 <extInt_Config+0x90>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80054e4:	4b7a      	ldr	r3, [pc, #488]	; (80056d0 <extInt_Config+0x270>)
 80054e6:	4a7a      	ldr	r2, [pc, #488]	; (80056d0 <extInt_Config+0x270>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80054ec:	f000 bd9a 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a78      	ldr	r2, [pc, #480]	; (80056d8 <extInt_Config+0x278>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d107      	bne.n	800550c <extInt_Config+0xac>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80054fc:	4b74      	ldr	r3, [pc, #464]	; (80056d0 <extInt_Config+0x270>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4a73      	ldr	r2, [pc, #460]	; (80056d0 <extInt_Config+0x270>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6093      	str	r3, [r2, #8]
					break;
 8005508:	f000 bd8c 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a72      	ldr	r2, [pc, #456]	; (80056dc <extInt_Config+0x27c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d107      	bne.n	8005528 <extInt_Config+0xc8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8005518:	4b6d      	ldr	r3, [pc, #436]	; (80056d0 <extInt_Config+0x270>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4a6c      	ldr	r2, [pc, #432]	; (80056d0 <extInt_Config+0x270>)
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	6093      	str	r3, [r2, #8]
					break;
 8005524:	f000 bd7e 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a6c      	ldr	r2, [pc, #432]	; (80056e0 <extInt_Config+0x280>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d107      	bne.n	8005544 <extInt_Config+0xe4>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8005534:	4b66      	ldr	r3, [pc, #408]	; (80056d0 <extInt_Config+0x270>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a65      	ldr	r2, [pc, #404]	; (80056d0 <extInt_Config+0x270>)
 800553a:	f043 0303 	orr.w	r3, r3, #3
 800553e:	6093      	str	r3, [r2, #8]
					break;
 8005540:	f000 bd70 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a66      	ldr	r2, [pc, #408]	; (80056e4 <extInt_Config+0x284>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d107      	bne.n	8005560 <extInt_Config+0x100>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8005550:	4b5f      	ldr	r3, [pc, #380]	; (80056d0 <extInt_Config+0x270>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4a5e      	ldr	r2, [pc, #376]	; (80056d0 <extInt_Config+0x270>)
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	6093      	str	r3, [r2, #8]
					break;
 800555c:	f000 bd62 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a60      	ldr	r2, [pc, #384]	; (80056e8 <extInt_Config+0x288>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d107      	bne.n	800557c <extInt_Config+0x11c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 800556c:	4b58      	ldr	r3, [pc, #352]	; (80056d0 <extInt_Config+0x270>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a57      	ldr	r2, [pc, #348]	; (80056d0 <extInt_Config+0x270>)
 8005572:	f043 0307 	orr.w	r3, r3, #7
 8005576:	6093      	str	r3, [r2, #8]
					break;
 8005578:	f000 bd54 	b.w	8006024 <extInt_Config+0xbc4>
						__NOP();
 800557c:	bf00      	nop
					break;
 800557e:	f000 bd51 	b.w	8006024 <extInt_Config+0xbc4>
				}

				/* Configurando para el todos los pines GPIOX_1*/
				case 1: {
					/* SYSCFG_EXTICR1 */
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI1_Pos);
 8005582:	4b53      	ldr	r3, [pc, #332]	; (80056d0 <extInt_Config+0x270>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	4a52      	ldr	r2, [pc, #328]	; (80056d0 <extInt_Config+0x270>)
 8005588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558c:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a4f      	ldr	r2, [pc, #316]	; (80056d4 <extInt_Config+0x274>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d105      	bne.n	80055a6 <extInt_Config+0x146>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 800559a:	4b4d      	ldr	r3, [pc, #308]	; (80056d0 <extInt_Config+0x270>)
 800559c:	4a4c      	ldr	r2, [pc, #304]	; (80056d0 <extInt_Config+0x270>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 80055a2:	f000 bd3f 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a4a      	ldr	r2, [pc, #296]	; (80056d8 <extInt_Config+0x278>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d107      	bne.n	80055c2 <extInt_Config+0x162>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <extInt_Config+0x270>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a46      	ldr	r2, [pc, #280]	; (80056d0 <extInt_Config+0x270>)
 80055b8:	f043 0310 	orr.w	r3, r3, #16
 80055bc:	6093      	str	r3, [r2, #8]
					break;
 80055be:	f000 bd31 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a44      	ldr	r2, [pc, #272]	; (80056dc <extInt_Config+0x27c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d107      	bne.n	80055de <extInt_Config+0x17e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80055ce:	4b40      	ldr	r3, [pc, #256]	; (80056d0 <extInt_Config+0x270>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	4a3f      	ldr	r2, [pc, #252]	; (80056d0 <extInt_Config+0x270>)
 80055d4:	f043 0320 	orr.w	r3, r3, #32
 80055d8:	6093      	str	r3, [r2, #8]
					break;
 80055da:	f000 bd23 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a3e      	ldr	r2, [pc, #248]	; (80056e0 <extInt_Config+0x280>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d107      	bne.n	80055fa <extInt_Config+0x19a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <extInt_Config+0x270>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4a38      	ldr	r2, [pc, #224]	; (80056d0 <extInt_Config+0x270>)
 80055f0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80055f4:	6093      	str	r3, [r2, #8]
					break;
 80055f6:	f000 bd15 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a38      	ldr	r2, [pc, #224]	; (80056e4 <extInt_Config+0x284>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d107      	bne.n	8005616 <extInt_Config+0x1b6>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8005606:	4b32      	ldr	r3, [pc, #200]	; (80056d0 <extInt_Config+0x270>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	4a31      	ldr	r2, [pc, #196]	; (80056d0 <extInt_Config+0x270>)
 800560c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005610:	6093      	str	r3, [r2, #8]
					break;
 8005612:	f000 bd07 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a32      	ldr	r2, [pc, #200]	; (80056e8 <extInt_Config+0x288>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d107      	bne.n	8005632 <extInt_Config+0x1d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8005622:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <extInt_Config+0x270>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <extInt_Config+0x270>)
 8005628:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800562c:	6093      	str	r3, [r2, #8]
					break;
 800562e:	f000 bcf9 	b.w	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005632:	bf00      	nop
					break;
 8005634:	f000 bcf6 	b.w	8006024 <extInt_Config+0xbc4>

				}

				/* Configurando para el todos los pines GPIOX_2*/
				case 2: {
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI2_Pos);
 8005638:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <extInt_Config+0x270>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a24      	ldr	r2, [pc, #144]	; (80056d0 <extInt_Config+0x270>)
 800563e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005642:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <extInt_Config+0x274>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d105      	bne.n	800565c <extInt_Config+0x1fc>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8005650:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <extInt_Config+0x270>)
 8005652:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <extInt_Config+0x270>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 8005658:	f000 bce4 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1d      	ldr	r2, [pc, #116]	; (80056d8 <extInt_Config+0x278>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d107      	bne.n	8005678 <extInt_Config+0x218>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8005668:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <extInt_Config+0x270>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <extInt_Config+0x270>)
 800566e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005672:	6093      	str	r3, [r2, #8]
					break;
 8005674:	f000 bcd6 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <extInt_Config+0x27c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d107      	bne.n	8005694 <extInt_Config+0x234>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <extInt_Config+0x270>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a11      	ldr	r2, [pc, #68]	; (80056d0 <extInt_Config+0x270>)
 800568a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800568e:	6093      	str	r3, [r2, #8]
					break;
 8005690:	f000 bcc8 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <extInt_Config+0x280>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d107      	bne.n	80056b0 <extInt_Config+0x250>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <extInt_Config+0x270>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <extInt_Config+0x270>)
 80056a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056aa:	6093      	str	r3, [r2, #8]
					break;
 80056ac:	f000 bcba 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <extInt_Config+0x284>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d117      	bne.n	80056ec <extInt_Config+0x28c>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <extInt_Config+0x270>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <extInt_Config+0x270>)
 80056c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c6:	6093      	str	r3, [r2, #8]
					break;
 80056c8:	f000 bcac 	b.w	8006024 <extInt_Config+0xbc4>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40013800 	.word	0x40013800
 80056d4:	40020000 	.word	0x40020000
 80056d8:	40020400 	.word	0x40020400
 80056dc:	40020800 	.word	0x40020800
 80056e0:	40020c00 	.word	0x40020c00
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a8a      	ldr	r2, [pc, #552]	; (800591c <extInt_Config+0x4bc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d107      	bne.n	8005708 <extInt_Config+0x2a8>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80056f8:	4b89      	ldr	r3, [pc, #548]	; (8005920 <extInt_Config+0x4c0>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a88      	ldr	r2, [pc, #544]	; (8005920 <extInt_Config+0x4c0>)
 80056fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005702:	6093      	str	r3, [r2, #8]
					break;
 8005704:	f000 bc8e 	b.w	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005708:	bf00      	nop
					break;
 800570a:	f000 bc8b 	b.w	8006024 <extInt_Config+0xbc4>

				}

				case 3:{
					SYSCFG->EXTICR[0] &= ~(0xF << SYSCFG_EXTICR1_EXTI3_Pos);
 800570e:	4b84      	ldr	r3, [pc, #528]	; (8005920 <extInt_Config+0x4c0>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4a83      	ldr	r2, [pc, #524]	; (8005920 <extInt_Config+0x4c0>)
 8005714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005718:	6093      	str	r3, [r2, #8]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a80      	ldr	r2, [pc, #512]	; (8005924 <extInt_Config+0x4c4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d105      	bne.n	8005732 <extInt_Config+0x2d2>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8005726:	4b7e      	ldr	r3, [pc, #504]	; (8005920 <extInt_Config+0x4c0>)
 8005728:	4a7d      	ldr	r2, [pc, #500]	; (8005920 <extInt_Config+0x4c0>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	6093      	str	r3, [r2, #8]

					} else {
						__NOP();
					}

					break;
 800572e:	f000 bc79 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a7b      	ldr	r2, [pc, #492]	; (8005928 <extInt_Config+0x4c8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d107      	bne.n	800574e <extInt_Config+0x2ee>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800573e:	4b78      	ldr	r3, [pc, #480]	; (8005920 <extInt_Config+0x4c0>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4a77      	ldr	r2, [pc, #476]	; (8005920 <extInt_Config+0x4c0>)
 8005744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005748:	6093      	str	r3, [r2, #8]
					break;
 800574a:	f000 bc6b 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a75      	ldr	r2, [pc, #468]	; (800592c <extInt_Config+0x4cc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d107      	bne.n	800576a <extInt_Config+0x30a>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800575a:	4b71      	ldr	r3, [pc, #452]	; (8005920 <extInt_Config+0x4c0>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	4a70      	ldr	r2, [pc, #448]	; (8005920 <extInt_Config+0x4c0>)
 8005760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005764:	6093      	str	r3, [r2, #8]
					break;
 8005766:	f000 bc5d 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6f      	ldr	r2, [pc, #444]	; (8005930 <extInt_Config+0x4d0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d107      	bne.n	8005786 <extInt_Config+0x326>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8005776:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <extInt_Config+0x4c0>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4a69      	ldr	r2, [pc, #420]	; (8005920 <extInt_Config+0x4c0>)
 800577c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005780:	6093      	str	r3, [r2, #8]
					break;
 8005782:	f000 bc4f 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a69      	ldr	r2, [pc, #420]	; (8005934 <extInt_Config+0x4d4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d107      	bne.n	80057a2 <extInt_Config+0x342>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <extInt_Config+0x4c0>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4a62      	ldr	r2, [pc, #392]	; (8005920 <extInt_Config+0x4c0>)
 8005798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800579c:	6093      	str	r3, [r2, #8]
					break;
 800579e:	f000 bc41 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5c      	ldr	r2, [pc, #368]	; (800591c <extInt_Config+0x4bc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d107      	bne.n	80057be <extInt_Config+0x35e>
						SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80057ae:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <extInt_Config+0x4c0>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4a5b      	ldr	r2, [pc, #364]	; (8005920 <extInt_Config+0x4c0>)
 80057b4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80057b8:	6093      	str	r3, [r2, #8]
					break;
 80057ba:	f000 bc33 	b.w	8006024 <extInt_Config+0xbc4>
						__NOP();
 80057be:	bf00      	nop
					break;
 80057c0:	f000 bc30 	b.w	8006024 <extInt_Config+0xbc4>
				}
				case 4:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI4_Pos);
 80057c4:	4b56      	ldr	r3, [pc, #344]	; (8005920 <extInt_Config+0x4c0>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a55      	ldr	r2, [pc, #340]	; (8005920 <extInt_Config+0x4c0>)
 80057ca:	f023 030f 	bic.w	r3, r3, #15
 80057ce:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a53      	ldr	r2, [pc, #332]	; (8005924 <extInt_Config+0x4c4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d105      	bne.n	80057e8 <extInt_Config+0x388>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80057dc:	4b50      	ldr	r3, [pc, #320]	; (8005920 <extInt_Config+0x4c0>)
 80057de:	4a50      	ldr	r2, [pc, #320]	; (8005920 <extInt_Config+0x4c0>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 80057e4:	f000 bc1e 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a4e      	ldr	r2, [pc, #312]	; (8005928 <extInt_Config+0x4c8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d107      	bne.n	8005804 <extInt_Config+0x3a4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80057f4:	4b4a      	ldr	r3, [pc, #296]	; (8005920 <extInt_Config+0x4c0>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a49      	ldr	r2, [pc, #292]	; (8005920 <extInt_Config+0x4c0>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	60d3      	str	r3, [r2, #12]
					break;
 8005800:	f000 bc10 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a48      	ldr	r2, [pc, #288]	; (800592c <extInt_Config+0x4cc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d107      	bne.n	8005820 <extInt_Config+0x3c0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8005810:	4b43      	ldr	r3, [pc, #268]	; (8005920 <extInt_Config+0x4c0>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a42      	ldr	r2, [pc, #264]	; (8005920 <extInt_Config+0x4c0>)
 8005816:	f043 0302 	orr.w	r3, r3, #2
 800581a:	60d3      	str	r3, [r2, #12]
					break;
 800581c:	f000 bc02 	b.w	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a42      	ldr	r2, [pc, #264]	; (8005930 <extInt_Config+0x4d0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d106      	bne.n	800583a <extInt_Config+0x3da>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 800582c:	4b3c      	ldr	r3, [pc, #240]	; (8005920 <extInt_Config+0x4c0>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a3b      	ldr	r2, [pc, #236]	; (8005920 <extInt_Config+0x4c0>)
 8005832:	f043 0303 	orr.w	r3, r3, #3
 8005836:	60d3      	str	r3, [r2, #12]
					break;
 8005838:	e3f4      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3c      	ldr	r2, [pc, #240]	; (8005934 <extInt_Config+0x4d4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d106      	bne.n	8005854 <extInt_Config+0x3f4>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8005846:	4b36      	ldr	r3, [pc, #216]	; (8005920 <extInt_Config+0x4c0>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a35      	ldr	r2, [pc, #212]	; (8005920 <extInt_Config+0x4c0>)
 800584c:	f043 0304 	orr.w	r3, r3, #4
 8005850:	60d3      	str	r3, [r2, #12]
					break;
 8005852:	e3e7      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a30      	ldr	r2, [pc, #192]	; (800591c <extInt_Config+0x4bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d106      	bne.n	800586e <extInt_Config+0x40e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8005860:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <extInt_Config+0x4c0>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <extInt_Config+0x4c0>)
 8005866:	f043 0307 	orr.w	r3, r3, #7
 800586a:	60d3      	str	r3, [r2, #12]
					break;
 800586c:	e3da      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 800586e:	bf00      	nop
					break;
 8005870:	e3d8      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 5:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI5_Pos);
 8005872:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <extInt_Config+0x4c0>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <extInt_Config+0x4c0>)
 8005878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800587c:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a27      	ldr	r2, [pc, #156]	; (8005924 <extInt_Config+0x4c4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d104      	bne.n	8005894 <extInt_Config+0x434>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800588a:	4b25      	ldr	r3, [pc, #148]	; (8005920 <extInt_Config+0x4c0>)
 800588c:	4a24      	ldr	r2, [pc, #144]	; (8005920 <extInt_Config+0x4c0>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005892:	e3c7      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a23      	ldr	r2, [pc, #140]	; (8005928 <extInt_Config+0x4c8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d106      	bne.n	80058ae <extInt_Config+0x44e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80058a0:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <extInt_Config+0x4c0>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <extInt_Config+0x4c0>)
 80058a6:	f043 0310 	orr.w	r3, r3, #16
 80058aa:	60d3      	str	r3, [r2, #12]
					break;
 80058ac:	e3ba      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <extInt_Config+0x4cc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d106      	bne.n	80058c8 <extInt_Config+0x468>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80058ba:	4b19      	ldr	r3, [pc, #100]	; (8005920 <extInt_Config+0x4c0>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4a18      	ldr	r2, [pc, #96]	; (8005920 <extInt_Config+0x4c0>)
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	60d3      	str	r3, [r2, #12]
					break;
 80058c6:	e3ad      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <extInt_Config+0x4d0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d106      	bne.n	80058e2 <extInt_Config+0x482>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80058d4:	4b12      	ldr	r3, [pc, #72]	; (8005920 <extInt_Config+0x4c0>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <extInt_Config+0x4c0>)
 80058da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80058de:	60d3      	str	r3, [r2, #12]
					break;
 80058e0:	e3a0      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <extInt_Config+0x4d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d106      	bne.n	80058fc <extInt_Config+0x49c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80058ee:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <extInt_Config+0x4c0>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4a0b      	ldr	r2, [pc, #44]	; (8005920 <extInt_Config+0x4c0>)
 80058f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f8:	60d3      	str	r3, [r2, #12]
					break;
 80058fa:	e393      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a06      	ldr	r2, [pc, #24]	; (800591c <extInt_Config+0x4bc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d106      	bne.n	8005916 <extInt_Config+0x4b6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <extInt_Config+0x4c0>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a04      	ldr	r2, [pc, #16]	; (8005920 <extInt_Config+0x4c0>)
 800590e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005912:	60d3      	str	r3, [r2, #12]
					break;
 8005914:	e386      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005916:	bf00      	nop
					break;
 8005918:	e384      	b.n	8006024 <extInt_Config+0xbc4>
 800591a:	bf00      	nop
 800591c:	40021c00 	.word	0x40021c00
 8005920:	40013800 	.word	0x40013800
 8005924:	40020000 	.word	0x40020000
 8005928:	40020400 	.word	0x40020400
 800592c:	40020800 	.word	0x40020800
 8005930:	40020c00 	.word	0x40020c00
 8005934:	40021000 	.word	0x40021000
				}
				case 6:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI6_Pos);
 8005938:	4b86      	ldr	r3, [pc, #536]	; (8005b54 <extInt_Config+0x6f4>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a85      	ldr	r2, [pc, #532]	; (8005b54 <extInt_Config+0x6f4>)
 800593e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005942:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a83      	ldr	r2, [pc, #524]	; (8005b58 <extInt_Config+0x6f8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d104      	bne.n	800595a <extInt_Config+0x4fa>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8005950:	4b80      	ldr	r3, [pc, #512]	; (8005b54 <extInt_Config+0x6f4>)
 8005952:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <extInt_Config+0x6f4>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005958:	e364      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a7e      	ldr	r2, [pc, #504]	; (8005b5c <extInt_Config+0x6fc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d106      	bne.n	8005974 <extInt_Config+0x514>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <extInt_Config+0x6f4>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <extInt_Config+0x6f4>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	60d3      	str	r3, [r2, #12]
					break;
 8005972:	e357      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a79      	ldr	r2, [pc, #484]	; (8005b60 <extInt_Config+0x700>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d106      	bne.n	800598e <extInt_Config+0x52e>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8005980:	4b74      	ldr	r3, [pc, #464]	; (8005b54 <extInt_Config+0x6f4>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a73      	ldr	r2, [pc, #460]	; (8005b54 <extInt_Config+0x6f4>)
 8005986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800598a:	60d3      	str	r3, [r2, #12]
					break;
 800598c:	e34a      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a73      	ldr	r2, [pc, #460]	; (8005b64 <extInt_Config+0x704>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d106      	bne.n	80059a8 <extInt_Config+0x548>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 800599a:	4b6e      	ldr	r3, [pc, #440]	; (8005b54 <extInt_Config+0x6f4>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a6d      	ldr	r2, [pc, #436]	; (8005b54 <extInt_Config+0x6f4>)
 80059a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80059a4:	60d3      	str	r3, [r2, #12]
					break;
 80059a6:	e33d      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6e      	ldr	r2, [pc, #440]	; (8005b68 <extInt_Config+0x708>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d106      	bne.n	80059c2 <extInt_Config+0x562>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80059b4:	4b67      	ldr	r3, [pc, #412]	; (8005b54 <extInt_Config+0x6f4>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	4a66      	ldr	r2, [pc, #408]	; (8005b54 <extInt_Config+0x6f4>)
 80059ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059be:	60d3      	str	r3, [r2, #12]
					break;
 80059c0:	e330      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a68      	ldr	r2, [pc, #416]	; (8005b6c <extInt_Config+0x70c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d106      	bne.n	80059dc <extInt_Config+0x57c>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80059ce:	4b61      	ldr	r3, [pc, #388]	; (8005b54 <extInt_Config+0x6f4>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4a60      	ldr	r2, [pc, #384]	; (8005b54 <extInt_Config+0x6f4>)
 80059d4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059d8:	60d3      	str	r3, [r2, #12]
					break;
 80059da:	e323      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 80059dc:	bf00      	nop
					break;
 80059de:	e321      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 7:{
					SYSCFG->EXTICR[1] &= ~(0xF << SYSCFG_EXTICR2_EXTI7_Pos);
 80059e0:	4b5c      	ldr	r3, [pc, #368]	; (8005b54 <extInt_Config+0x6f4>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4a5b      	ldr	r2, [pc, #364]	; (8005b54 <extInt_Config+0x6f4>)
 80059e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ea:	60d3      	str	r3, [r2, #12]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a59      	ldr	r2, [pc, #356]	; (8005b58 <extInt_Config+0x6f8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d104      	bne.n	8005a02 <extInt_Config+0x5a2>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80059f8:	4b56      	ldr	r3, [pc, #344]	; (8005b54 <extInt_Config+0x6f4>)
 80059fa:	4a56      	ldr	r2, [pc, #344]	; (8005b54 <extInt_Config+0x6f4>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	60d3      	str	r3, [r2, #12]

					} else {
						__NOP();
					}

					break;
 8005a00:	e310      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a54      	ldr	r2, [pc, #336]	; (8005b5c <extInt_Config+0x6fc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d106      	bne.n	8005a1c <extInt_Config+0x5bc>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8005a0e:	4b51      	ldr	r3, [pc, #324]	; (8005b54 <extInt_Config+0x6f4>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	4a50      	ldr	r2, [pc, #320]	; (8005b54 <extInt_Config+0x6f4>)
 8005a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a18:	60d3      	str	r3, [r2, #12]
					break;
 8005a1a:	e303      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a4f      	ldr	r2, [pc, #316]	; (8005b60 <extInt_Config+0x700>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d106      	bne.n	8005a36 <extInt_Config+0x5d6>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8005a28:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <extInt_Config+0x6f4>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4a49      	ldr	r2, [pc, #292]	; (8005b54 <extInt_Config+0x6f4>)
 8005a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a32:	60d3      	str	r3, [r2, #12]
					break;
 8005a34:	e2f6      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a49      	ldr	r2, [pc, #292]	; (8005b64 <extInt_Config+0x704>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d106      	bne.n	8005a50 <extInt_Config+0x5f0>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8005a42:	4b44      	ldr	r3, [pc, #272]	; (8005b54 <extInt_Config+0x6f4>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4a43      	ldr	r2, [pc, #268]	; (8005b54 <extInt_Config+0x6f4>)
 8005a48:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005a4c:	60d3      	str	r3, [r2, #12]
					break;
 8005a4e:	e2e9      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a44      	ldr	r2, [pc, #272]	; (8005b68 <extInt_Config+0x708>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d106      	bne.n	8005a6a <extInt_Config+0x60a>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8005a5c:	4b3d      	ldr	r3, [pc, #244]	; (8005b54 <extInt_Config+0x6f4>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4a3c      	ldr	r2, [pc, #240]	; (8005b54 <extInt_Config+0x6f4>)
 8005a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a66:	60d3      	str	r3, [r2, #12]
					break;
 8005a68:	e2dc      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a3e      	ldr	r2, [pc, #248]	; (8005b6c <extInt_Config+0x70c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d106      	bne.n	8005a84 <extInt_Config+0x624>
						SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8005a76:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <extInt_Config+0x6f4>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	4a36      	ldr	r2, [pc, #216]	; (8005b54 <extInt_Config+0x6f4>)
 8005a7c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005a80:	60d3      	str	r3, [r2, #12]
					break;
 8005a82:	e2cf      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005a84:	bf00      	nop
					break;
 8005a86:	e2cd      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 8:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI8_Pos);
 8005a88:	4b32      	ldr	r3, [pc, #200]	; (8005b54 <extInt_Config+0x6f4>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	4a31      	ldr	r2, [pc, #196]	; (8005b54 <extInt_Config+0x6f4>)
 8005a8e:	f023 030f 	bic.w	r3, r3, #15
 8005a92:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <extInt_Config+0x6f8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d104      	bne.n	8005aaa <extInt_Config+0x64a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <extInt_Config+0x6f4>)
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	; (8005b54 <extInt_Config+0x6f4>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005aa8:	e2bc      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <extInt_Config+0x6fc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d106      	bne.n	8005ac4 <extInt_Config+0x664>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8005ab6:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <extInt_Config+0x6f4>)
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <extInt_Config+0x6f4>)
 8005abc:	f043 0301 	orr.w	r3, r3, #1
 8005ac0:	6113      	str	r3, [r2, #16]
					break;
 8005ac2:	e2af      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <extInt_Config+0x700>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d106      	bne.n	8005ade <extInt_Config+0x67e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <extInt_Config+0x6f4>)
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <extInt_Config+0x6f4>)
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	6113      	str	r3, [r2, #16]
					break;
 8005adc:	e2a2      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <extInt_Config+0x704>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d106      	bne.n	8005af8 <extInt_Config+0x698>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <extInt_Config+0x6f4>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <extInt_Config+0x6f4>)
 8005af0:	f043 0303 	orr.w	r3, r3, #3
 8005af4:	6113      	str	r3, [r2, #16]
					break;
 8005af6:	e295      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <extInt_Config+0x708>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d106      	bne.n	8005b12 <extInt_Config+0x6b2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <extInt_Config+0x6f4>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <extInt_Config+0x6f4>)
 8005b0a:	f043 0304 	orr.w	r3, r3, #4
 8005b0e:	6113      	str	r3, [r2, #16]
					break;
 8005b10:	e288      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <extInt_Config+0x70c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d106      	bne.n	8005b2c <extInt_Config+0x6cc>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <extInt_Config+0x6f4>)
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <extInt_Config+0x6f4>)
 8005b24:	f043 0307 	orr.w	r3, r3, #7
 8005b28:	6113      	str	r3, [r2, #16]
					break;
 8005b2a:	e27b      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005b2c:	bf00      	nop
					break;
 8005b2e:	e279      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 9:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI9_Pos);
 8005b30:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <extInt_Config+0x6f4>)
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	4a07      	ldr	r2, [pc, #28]	; (8005b54 <extInt_Config+0x6f4>)
 8005b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3a:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <extInt_Config+0x6f8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <extInt_Config+0x710>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8005b48:	4b02      	ldr	r3, [pc, #8]	; (8005b54 <extInt_Config+0x6f4>)
 8005b4a:	4a02      	ldr	r2, [pc, #8]	; (8005b54 <extInt_Config+0x6f4>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005b50:	e268      	b.n	8006024 <extInt_Config+0xbc4>
 8005b52:	bf00      	nop
 8005b54:	40013800 	.word	0x40013800
 8005b58:	40020000 	.word	0x40020000
 8005b5c:	40020400 	.word	0x40020400
 8005b60:	40020800 	.word	0x40020800
 8005b64:	40020c00 	.word	0x40020c00
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40021c00 	.word	0x40021c00
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a83      	ldr	r2, [pc, #524]	; (8005d84 <extInt_Config+0x924>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d106      	bne.n	8005b8a <extInt_Config+0x72a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8005b7c:	4b82      	ldr	r3, [pc, #520]	; (8005d88 <extInt_Config+0x928>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	4a81      	ldr	r2, [pc, #516]	; (8005d88 <extInt_Config+0x928>)
 8005b82:	f043 0310 	orr.w	r3, r3, #16
 8005b86:	6113      	str	r3, [r2, #16]
					break;
 8005b88:	e24c      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a7e      	ldr	r2, [pc, #504]	; (8005d8c <extInt_Config+0x92c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d106      	bne.n	8005ba4 <extInt_Config+0x744>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8005b96:	4b7c      	ldr	r3, [pc, #496]	; (8005d88 <extInt_Config+0x928>)
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	4a7b      	ldr	r2, [pc, #492]	; (8005d88 <extInt_Config+0x928>)
 8005b9c:	f043 0320 	orr.w	r3, r3, #32
 8005ba0:	6113      	str	r3, [r2, #16]
					break;
 8005ba2:	e23f      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a79      	ldr	r2, [pc, #484]	; (8005d90 <extInt_Config+0x930>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d106      	bne.n	8005bbe <extInt_Config+0x75e>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8005bb0:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <extInt_Config+0x928>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	4a74      	ldr	r2, [pc, #464]	; (8005d88 <extInt_Config+0x928>)
 8005bb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005bba:	6113      	str	r3, [r2, #16]
					break;
 8005bbc:	e232      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a73      	ldr	r2, [pc, #460]	; (8005d94 <extInt_Config+0x934>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d106      	bne.n	8005bd8 <extInt_Config+0x778>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8005bca:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <extInt_Config+0x928>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	4a6e      	ldr	r2, [pc, #440]	; (8005d88 <extInt_Config+0x928>)
 8005bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd4:	6113      	str	r3, [r2, #16]
					break;
 8005bd6:	e225      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a6e      	ldr	r2, [pc, #440]	; (8005d98 <extInt_Config+0x938>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d106      	bne.n	8005bf2 <extInt_Config+0x792>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8005be4:	4b68      	ldr	r3, [pc, #416]	; (8005d88 <extInt_Config+0x928>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	4a67      	ldr	r2, [pc, #412]	; (8005d88 <extInt_Config+0x928>)
 8005bea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005bee:	6113      	str	r3, [r2, #16]
					break;
 8005bf0:	e218      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005bf2:	bf00      	nop
					break;
 8005bf4:	e216      	b.n	8006024 <extInt_Config+0xbc4>
				}

				case 10:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI10_Pos);
 8005bf6:	4b64      	ldr	r3, [pc, #400]	; (8005d88 <extInt_Config+0x928>)
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	4a63      	ldr	r2, [pc, #396]	; (8005d88 <extInt_Config+0x928>)
 8005bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c00:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a64      	ldr	r2, [pc, #400]	; (8005d9c <extInt_Config+0x93c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d104      	bne.n	8005c18 <extInt_Config+0x7b8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8005c0e:	4b5e      	ldr	r3, [pc, #376]	; (8005d88 <extInt_Config+0x928>)
 8005c10:	4a5d      	ldr	r2, [pc, #372]	; (8005d88 <extInt_Config+0x928>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005c16:	e205      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a59      	ldr	r2, [pc, #356]	; (8005d84 <extInt_Config+0x924>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d106      	bne.n	8005c32 <extInt_Config+0x7d2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8005c24:	4b58      	ldr	r3, [pc, #352]	; (8005d88 <extInt_Config+0x928>)
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	4a57      	ldr	r2, [pc, #348]	; (8005d88 <extInt_Config+0x928>)
 8005c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2e:	6113      	str	r3, [r2, #16]
					break;
 8005c30:	e1f8      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a54      	ldr	r2, [pc, #336]	; (8005d8c <extInt_Config+0x92c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d106      	bne.n	8005c4c <extInt_Config+0x7ec>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8005c3e:	4b52      	ldr	r3, [pc, #328]	; (8005d88 <extInt_Config+0x928>)
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	4a51      	ldr	r2, [pc, #324]	; (8005d88 <extInt_Config+0x928>)
 8005c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c48:	6113      	str	r3, [r2, #16]
					break;
 8005c4a:	e1eb      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a4f      	ldr	r2, [pc, #316]	; (8005d90 <extInt_Config+0x930>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d106      	bne.n	8005c66 <extInt_Config+0x806>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8005c58:	4b4b      	ldr	r3, [pc, #300]	; (8005d88 <extInt_Config+0x928>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4a4a      	ldr	r2, [pc, #296]	; (8005d88 <extInt_Config+0x928>)
 8005c5e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005c62:	6113      	str	r3, [r2, #16]
					break;
 8005c64:	e1de      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a49      	ldr	r2, [pc, #292]	; (8005d94 <extInt_Config+0x934>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d106      	bne.n	8005c80 <extInt_Config+0x820>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8005c72:	4b45      	ldr	r3, [pc, #276]	; (8005d88 <extInt_Config+0x928>)
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	4a44      	ldr	r2, [pc, #272]	; (8005d88 <extInt_Config+0x928>)
 8005c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c7c:	6113      	str	r3, [r2, #16]
					break;
 8005c7e:	e1d1      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a44      	ldr	r2, [pc, #272]	; (8005d98 <extInt_Config+0x938>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d106      	bne.n	8005c9a <extInt_Config+0x83a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8005c8c:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <extInt_Config+0x928>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	4a3d      	ldr	r2, [pc, #244]	; (8005d88 <extInt_Config+0x928>)
 8005c92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c96:	6113      	str	r3, [r2, #16]
					break;
 8005c98:	e1c4      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005c9a:	bf00      	nop
					break;
 8005c9c:	e1c2      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 11:{
					SYSCFG->EXTICR[2] &= ~(0xF << SYSCFG_EXTICR3_EXTI11_Pos);
 8005c9e:	4b3a      	ldr	r3, [pc, #232]	; (8005d88 <extInt_Config+0x928>)
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	4a39      	ldr	r2, [pc, #228]	; (8005d88 <extInt_Config+0x928>)
 8005ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca8:	6113      	str	r3, [r2, #16]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a3a      	ldr	r2, [pc, #232]	; (8005d9c <extInt_Config+0x93c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d104      	bne.n	8005cc0 <extInt_Config+0x860>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8005cb6:	4b34      	ldr	r3, [pc, #208]	; (8005d88 <extInt_Config+0x928>)
 8005cb8:	4a33      	ldr	r2, [pc, #204]	; (8005d88 <extInt_Config+0x928>)
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	6113      	str	r3, [r2, #16]

					} else {
						__NOP();
					}

					break;
 8005cbe:	e1b1      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <extInt_Config+0x924>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d106      	bne.n	8005cda <extInt_Config+0x87a>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8005ccc:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <extInt_Config+0x928>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <extInt_Config+0x928>)
 8005cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cd6:	6113      	str	r3, [r2, #16]
					break;
 8005cd8:	e1a4      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <extInt_Config+0x92c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d106      	bne.n	8005cf4 <extInt_Config+0x894>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8005ce6:	4b28      	ldr	r3, [pc, #160]	; (8005d88 <extInt_Config+0x928>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <extInt_Config+0x928>)
 8005cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cf0:	6113      	str	r3, [r2, #16]
					break;
 8005cf2:	e197      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <extInt_Config+0x930>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d106      	bne.n	8005d0e <extInt_Config+0x8ae>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8005d00:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <extInt_Config+0x928>)
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <extInt_Config+0x928>)
 8005d06:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005d0a:	6113      	str	r3, [r2, #16]
					break;
 8005d0c:	e18a      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <extInt_Config+0x934>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d106      	bne.n	8005d28 <extInt_Config+0x8c8>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8005d1a:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <extInt_Config+0x928>)
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <extInt_Config+0x928>)
 8005d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d24:	6113      	str	r3, [r2, #16]
					break;
 8005d26:	e17d      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <extInt_Config+0x938>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d106      	bne.n	8005d42 <extInt_Config+0x8e2>
						SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8005d34:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <extInt_Config+0x928>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <extInt_Config+0x928>)
 8005d3a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8005d3e:	6113      	str	r3, [r2, #16]
					break;
 8005d40:	e170      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005d42:	bf00      	nop
					break;
 8005d44:	e16e      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 12:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI12_Pos);
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <extInt_Config+0x928>)
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <extInt_Config+0x928>)
 8005d4c:	f023 030f 	bic.w	r3, r3, #15
 8005d50:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a10      	ldr	r2, [pc, #64]	; (8005d9c <extInt_Config+0x93c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d104      	bne.n	8005d68 <extInt_Config+0x908>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <extInt_Config+0x928>)
 8005d60:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <extInt_Config+0x928>)
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8005d66:	e15d      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <extInt_Config+0x924>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d115      	bne.n	8005da0 <extInt_Config+0x940>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <extInt_Config+0x928>)
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	4a03      	ldr	r2, [pc, #12]	; (8005d88 <extInt_Config+0x928>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6153      	str	r3, [r2, #20]
					break;
 8005d80:	e150      	b.n	8006024 <extInt_Config+0xbc4>
 8005d82:	bf00      	nop
 8005d84:	40020400 	.word	0x40020400
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	40020800 	.word	0x40020800
 8005d90:	40020c00 	.word	0x40020c00
 8005d94:	40021000 	.word	0x40021000
 8005d98:	40021c00 	.word	0x40021c00
 8005d9c:	40020000 	.word	0x40020000
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a89      	ldr	r2, [pc, #548]	; (8005fcc <extInt_Config+0xb6c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d106      	bne.n	8005dba <extInt_Config+0x95a>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8005dac:	4b88      	ldr	r3, [pc, #544]	; (8005fd0 <extInt_Config+0xb70>)
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	4a87      	ldr	r2, [pc, #540]	; (8005fd0 <extInt_Config+0xb70>)
 8005db2:	f043 0302 	orr.w	r3, r3, #2
 8005db6:	6153      	str	r3, [r2, #20]
					break;
 8005db8:	e134      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a84      	ldr	r2, [pc, #528]	; (8005fd4 <extInt_Config+0xb74>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d106      	bne.n	8005dd4 <extInt_Config+0x974>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8005dc6:	4b82      	ldr	r3, [pc, #520]	; (8005fd0 <extInt_Config+0xb70>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	4a81      	ldr	r2, [pc, #516]	; (8005fd0 <extInt_Config+0xb70>)
 8005dcc:	f043 0303 	orr.w	r3, r3, #3
 8005dd0:	6153      	str	r3, [r2, #20]
					break;
 8005dd2:	e127      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a7f      	ldr	r2, [pc, #508]	; (8005fd8 <extInt_Config+0xb78>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d106      	bne.n	8005dee <extInt_Config+0x98e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8005de0:	4b7b      	ldr	r3, [pc, #492]	; (8005fd0 <extInt_Config+0xb70>)
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	4a7a      	ldr	r2, [pc, #488]	; (8005fd0 <extInt_Config+0xb70>)
 8005de6:	f043 0304 	orr.w	r3, r3, #4
 8005dea:	6153      	str	r3, [r2, #20]
					break;
 8005dec:	e11a      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a79      	ldr	r2, [pc, #484]	; (8005fdc <extInt_Config+0xb7c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d106      	bne.n	8005e08 <extInt_Config+0x9a8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8005dfa:	4b75      	ldr	r3, [pc, #468]	; (8005fd0 <extInt_Config+0xb70>)
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4a74      	ldr	r2, [pc, #464]	; (8005fd0 <extInt_Config+0xb70>)
 8005e00:	f043 0307 	orr.w	r3, r3, #7
 8005e04:	6153      	str	r3, [r2, #20]
					break;
 8005e06:	e10d      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005e08:	bf00      	nop
					break;
 8005e0a:	e10b      	b.n	8006024 <extInt_Config+0xbc4>
				}
				case 13:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI13_Pos);
 8005e0c:	4b70      	ldr	r3, [pc, #448]	; (8005fd0 <extInt_Config+0xb70>)
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	4a6f      	ldr	r2, [pc, #444]	; (8005fd0 <extInt_Config+0xb70>)
 8005e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e16:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a70      	ldr	r2, [pc, #448]	; (8005fe0 <extInt_Config+0xb80>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d104      	bne.n	8005e2e <extInt_Config+0x9ce>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8005e24:	4b6a      	ldr	r3, [pc, #424]	; (8005fd0 <extInt_Config+0xb70>)
 8005e26:	4a6a      	ldr	r2, [pc, #424]	; (8005fd0 <extInt_Config+0xb70>)
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	6153      	str	r3, [r2, #20]
 8005e2c:	e041      	b.n	8005eb2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a6b      	ldr	r2, [pc, #428]	; (8005fe4 <extInt_Config+0xb84>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d106      	bne.n	8005e48 <extInt_Config+0x9e8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8005e3a:	4b65      	ldr	r3, [pc, #404]	; (8005fd0 <extInt_Config+0xb70>)
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	4a64      	ldr	r2, [pc, #400]	; (8005fd0 <extInt_Config+0xb70>)
 8005e40:	f043 0310 	orr.w	r3, r3, #16
 8005e44:	6153      	str	r3, [r2, #20]
 8005e46:	e034      	b.n	8005eb2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a5f      	ldr	r2, [pc, #380]	; (8005fcc <extInt_Config+0xb6c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d106      	bne.n	8005e62 <extInt_Config+0xa02>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8005e54:	4b5e      	ldr	r3, [pc, #376]	; (8005fd0 <extInt_Config+0xb70>)
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	4a5d      	ldr	r2, [pc, #372]	; (8005fd0 <extInt_Config+0xb70>)
 8005e5a:	f043 0320 	orr.w	r3, r3, #32
 8005e5e:	6153      	str	r3, [r2, #20]
 8005e60:	e027      	b.n	8005eb2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5a      	ldr	r2, [pc, #360]	; (8005fd4 <extInt_Config+0xb74>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d106      	bne.n	8005e7c <extInt_Config+0xa1c>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8005e6e:	4b58      	ldr	r3, [pc, #352]	; (8005fd0 <extInt_Config+0xb70>)
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	4a57      	ldr	r2, [pc, #348]	; (8005fd0 <extInt_Config+0xb70>)
 8005e74:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005e78:	6153      	str	r3, [r2, #20]
 8005e7a:	e01a      	b.n	8005eb2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a55      	ldr	r2, [pc, #340]	; (8005fd8 <extInt_Config+0xb78>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d106      	bne.n	8005e96 <extInt_Config+0xa36>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8005e88:	4b51      	ldr	r3, [pc, #324]	; (8005fd0 <extInt_Config+0xb70>)
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	4a50      	ldr	r2, [pc, #320]	; (8005fd0 <extInt_Config+0xb70>)
 8005e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e92:	6153      	str	r3, [r2, #20]
 8005e94:	e00d      	b.n	8005eb2 <extInt_Config+0xa52>

					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a4f      	ldr	r2, [pc, #316]	; (8005fdc <extInt_Config+0xb7c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d106      	bne.n	8005eb0 <extInt_Config+0xa50>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8005ea2:	4b4b      	ldr	r3, [pc, #300]	; (8005fd0 <extInt_Config+0xb70>)
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	4a4a      	ldr	r2, [pc, #296]	; (8005fd0 <extInt_Config+0xb70>)
 8005ea8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005eac:	6153      	str	r3, [r2, #20]
 8005eae:	e000      	b.n	8005eb2 <extInt_Config+0xa52>

					} else {
						__NOP();
 8005eb0:	bf00      	nop
					}
				}
				case 14:{
					SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI14_Pos);
 8005eb2:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <extInt_Config+0xb70>)
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4a46      	ldr	r2, [pc, #280]	; (8005fd0 <extInt_Config+0xb70>)
 8005eb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ebc:	6153      	str	r3, [r2, #20]
					if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a46      	ldr	r2, [pc, #280]	; (8005fe0 <extInt_Config+0xb80>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d104      	bne.n	8005ed4 <extInt_Config+0xa74>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8005eca:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <extInt_Config+0xb70>)
 8005ecc:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <extInt_Config+0xb70>)
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	6153      	str	r3, [r2, #20]

					} else {
						__NOP();
					}

					break;
 8005ed2:	e0a7      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a42      	ldr	r2, [pc, #264]	; (8005fe4 <extInt_Config+0xb84>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d106      	bne.n	8005eee <extInt_Config+0xa8e>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	; (8005fd0 <extInt_Config+0xb70>)
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	4a3a      	ldr	r2, [pc, #232]	; (8005fd0 <extInt_Config+0xb70>)
 8005ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eea:	6153      	str	r3, [r2, #20]
					break;
 8005eec:	e09a      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a35      	ldr	r2, [pc, #212]	; (8005fcc <extInt_Config+0xb6c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d106      	bne.n	8005f08 <extInt_Config+0xaa8>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8005efa:	4b35      	ldr	r3, [pc, #212]	; (8005fd0 <extInt_Config+0xb70>)
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4a34      	ldr	r2, [pc, #208]	; (8005fd0 <extInt_Config+0xb70>)
 8005f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f04:	6153      	str	r3, [r2, #20]
					break;
 8005f06:	e08d      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a31      	ldr	r2, [pc, #196]	; (8005fd4 <extInt_Config+0xb74>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d106      	bne.n	8005f22 <extInt_Config+0xac2>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8005f14:	4b2e      	ldr	r3, [pc, #184]	; (8005fd0 <extInt_Config+0xb70>)
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	4a2d      	ldr	r2, [pc, #180]	; (8005fd0 <extInt_Config+0xb70>)
 8005f1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f1e:	6153      	str	r3, [r2, #20]
					break;
 8005f20:	e080      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <extInt_Config+0xb78>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d106      	bne.n	8005f3c <extInt_Config+0xadc>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8005f2e:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <extInt_Config+0xb70>)
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <extInt_Config+0xb70>)
 8005f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f38:	6153      	str	r3, [r2, #20]
					break;
 8005f3a:	e073      	b.n	8006024 <extInt_Config+0xbc4>
					} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <extInt_Config+0xb7c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d106      	bne.n	8005f56 <extInt_Config+0xaf6>
						SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8005f48:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <extInt_Config+0xb70>)
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	4a20      	ldr	r2, [pc, #128]	; (8005fd0 <extInt_Config+0xb70>)
 8005f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f52:	6153      	str	r3, [r2, #20]
					break;
 8005f54:	e066      	b.n	8006024 <extInt_Config+0xbc4>
						__NOP();
 8005f56:	bf00      	nop
					break;
 8005f58:	e064      	b.n	8006024 <extInt_Config+0xbc4>

				/* Configurando para el todos los pines GPIOX_15 */
				case 15: {
						/* SYSCFG_EXTICR4 */
						// Limpiamos primero la posición que deseamos configurar
						SYSCFG->EXTICR[3] &= ~(0xF << SYSCFG_EXTICR4_EXTI15_Pos);
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <extInt_Config+0xb70>)
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <extInt_Config+0xb70>)
 8005f60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f64:	6153      	str	r3, [r2, #20]

						// Ahora seleccionamos el valor a cargar en la posición, segun sea la selección
						// del puerto que vamos a utilizar: GPIOA_0, ó GPIOB_0, ó GPIOC_0, etc
						if (extiConfig->pGPIOHandler->pGPIOx == GPIOA) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <extInt_Config+0xb80>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d104      	bne.n	8005f7c <extInt_Config+0xb1c>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <extInt_Config+0xb70>)
 8005f74:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <extInt_Config+0xb70>)
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	6153      	str	r3, [r2, #20]
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);

						} else {
							__NOP();
						}
						break;
 8005f7a:	e053      	b.n	8006024 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOB) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <extInt_Config+0xb84>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d106      	bne.n	8005f96 <extInt_Config+0xb36>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <extInt_Config+0xb70>)
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <extInt_Config+0xb70>)
 8005f8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f92:	6153      	str	r3, [r2, #20]
						break;
 8005f94:	e046      	b.n	8006024 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOC) {
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a0b      	ldr	r2, [pc, #44]	; (8005fcc <extInt_Config+0xb6c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d106      	bne.n	8005fb0 <extInt_Config+0xb50>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <extInt_Config+0xb70>)
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <extInt_Config+0xb70>)
 8005fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fac:	6153      	str	r3, [r2, #20]
						break;
 8005fae:	e039      	b.n	8006024 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOD) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <extInt_Config+0xb74>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d115      	bne.n	8005fe8 <extInt_Config+0xb88>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8005fbc:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <extInt_Config+0xb70>)
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	4a03      	ldr	r2, [pc, #12]	; (8005fd0 <extInt_Config+0xb70>)
 8005fc2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005fc6:	6153      	str	r3, [r2, #20]
						break;
 8005fc8:	e02c      	b.n	8006024 <extInt_Config+0xbc4>
 8005fca:	bf00      	nop
 8005fcc:	40020800 	.word	0x40020800
 8005fd0:	40013800 	.word	0x40013800
 8005fd4:	40020c00 	.word	0x40020c00
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40021c00 	.word	0x40021c00
 8005fe0:	40020000 	.word	0x40020000
 8005fe4:	40020400 	.word	0x40020400
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOE) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a6c      	ldr	r2, [pc, #432]	; (80061a0 <extInt_Config+0xd40>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d106      	bne.n	8006002 <extInt_Config+0xba2>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8005ff4:	4b6b      	ldr	r3, [pc, #428]	; (80061a4 <extInt_Config+0xd44>)
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	4a6a      	ldr	r2, [pc, #424]	; (80061a4 <extInt_Config+0xd44>)
 8005ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ffe:	6153      	str	r3, [r2, #20]
						break;
 8006000:	e010      	b.n	8006024 <extInt_Config+0xbc4>
						} else if (extiConfig->pGPIOHandler->pGPIOx == GPIOH) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a67      	ldr	r2, [pc, #412]	; (80061a8 <extInt_Config+0xd48>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d106      	bne.n	800601c <extInt_Config+0xbbc>
							SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 800600e:	4b65      	ldr	r3, [pc, #404]	; (80061a4 <extInt_Config+0xd44>)
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	4a64      	ldr	r2, [pc, #400]	; (80061a4 <extInt_Config+0xd44>)
 8006014:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8006018:	6153      	str	r3, [r2, #20]
						break;
 800601a:	e003      	b.n	8006024 <extInt_Config+0xbc4>
							__NOP();
 800601c:	bf00      	nop
						break;
 800601e:	e001      	b.n	8006024 <extInt_Config+0xbc4>
					}

					default: {
						__NOP();
 8006020:	bf00      	nop
						break;
 8006022:	bf00      	nop

// Fin del switch-case

	/* 4.0 Seleccionamos el tipo de flanco */

	switch (extiConfig->edgeType) {
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	791b      	ldrb	r3, [r3, #4]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d020      	beq.n	800606e <extInt_Config+0xc0e>
 800602c:	2b02      	cmp	r3, #2
 800602e:	dc37      	bgt.n	80060a0 <extInt_Config+0xc40>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <extInt_Config+0xbda>
 8006034:	2b01      	cmp	r3, #1
 8006036:	d00d      	beq.n	8006054 <extInt_Config+0xbf4>
 8006038:	e032      	b.n	80060a0 <extInt_Config+0xc40>

	case EXTERNAL_INTERRUPT_FALLING_EDGE:{

		/* Falling Trigger selection register*/
		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800603a:	4b5c      	ldr	r3, [pc, #368]	; (80061ac <extInt_Config+0xd4c>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	7912      	ldrb	r2, [r2, #4]
 8006044:	4611      	mov	r1, r2
 8006046:	2201      	movs	r2, #1
 8006048:	408a      	lsls	r2, r1
 800604a:	4611      	mov	r1, r2
 800604c:	4a57      	ldr	r2, [pc, #348]	; (80061ac <extInt_Config+0xd4c>)
 800604e:	430b      	orrs	r3, r1
 8006050:	60d3      	str	r3, [r2, #12]

		break;
 8006052:	e027      	b.n	80060a4 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RISING_EDGE:{

		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006054:	4b55      	ldr	r3, [pc, #340]	; (80061ac <extInt_Config+0xd4c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	7912      	ldrb	r2, [r2, #4]
 800605e:	4611      	mov	r1, r2
 8006060:	2201      	movs	r2, #1
 8006062:	408a      	lsls	r2, r1
 8006064:	4611      	mov	r1, r2
 8006066:	4a51      	ldr	r2, [pc, #324]	; (80061ac <extInt_Config+0xd4c>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6093      	str	r3, [r2, #8]

		break;
 800606c:	e01a      	b.n	80060a4 <extInt_Config+0xc44>

	}case EXTERNAL_INTERRUPT_RASINGANDFALLING_EDGE:{

		EXTI->FTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800606e:	4b4f      	ldr	r3, [pc, #316]	; (80061ac <extInt_Config+0xd4c>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	7912      	ldrb	r2, [r2, #4]
 8006078:	4611      	mov	r1, r2
 800607a:	2201      	movs	r2, #1
 800607c:	408a      	lsls	r2, r1
 800607e:	4611      	mov	r1, r2
 8006080:	4a4a      	ldr	r2, [pc, #296]	; (80061ac <extInt_Config+0xd4c>)
 8006082:	430b      	orrs	r3, r1
 8006084:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006086:	4b49      	ldr	r3, [pc, #292]	; (80061ac <extInt_Config+0xd4c>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	7912      	ldrb	r2, [r2, #4]
 8006090:	4611      	mov	r1, r2
 8006092:	2201      	movs	r2, #1
 8006094:	408a      	lsls	r2, r1
 8006096:	4611      	mov	r1, r2
 8006098:	4a44      	ldr	r2, [pc, #272]	; (80061ac <extInt_Config+0xd4c>)
 800609a:	430b      	orrs	r3, r1
 800609c:	6093      	str	r3, [r2, #8]

		break;
 800609e:	e001      	b.n	80060a4 <extInt_Config+0xc44>

	}default :{

		__NOP();
 80060a0:	bf00      	nop
		break;
 80060a2:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80060a4:	b672      	cpsid	i
}
 80060a6:	bf00      	nop
	/* 5.0 Desactivo primero las interrupciones globales */
    __disable_irq();

	/* 6.0 Activamos la interrupción del canal que estamos configurando */
	// Interrupt Mask register
    EXTI->IMR |= (0x1 << extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80060a8:	4b40      	ldr	r3, [pc, #256]	; (80061ac <extInt_Config+0xd4c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	7912      	ldrb	r2, [r2, #4]
 80060b2:	4611      	mov	r1, r2
 80060b4:	2201      	movs	r2, #1
 80060b6:	408a      	lsls	r2, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	4a3c      	ldr	r2, [pc, #240]	; (80061ac <extInt_Config+0xd4c>)
 80060bc:	430b      	orrs	r3, r1
 80060be:	6013      	str	r3, [r2, #0]
	/* 6.1 Matriculamos la interrupción en el NVIC para el canal correspondiente,
	 * donde el canal 0 corresponde al EXTI_0, canal 1 al EXTI_1, etc.
	 *
	 * NOTA: Observar que algunos canales EXTI comparten un mismo vector de interrupción
	 * */
	switch (extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber) {
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	2b0f      	cmp	r3, #15
 80060c8:	d862      	bhi.n	8006190 <extInt_Config+0xd30>
 80060ca:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <extInt_Config+0xc70>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006121 	.word	0x08006121
 80060dc:	08006129 	.word	0x08006129
 80060e0:	08006131 	.word	0x08006131
 80060e4:	08006139 	.word	0x08006139
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006149 	.word	0x08006149
 80060f0:	08006151 	.word	0x08006151
 80060f4:	08006159 	.word	0x08006159
 80060f8:	08006161 	.word	0x08006161
 80060fc:	08006169 	.word	0x08006169
 8006100:	08006171 	.word	0x08006171
 8006104:	08006179 	.word	0x08006179
 8006108:	08006181 	.word	0x08006181
 800610c:	08006189 	.word	0x08006189
		case 0: {
			__NVIC_EnableIRQ(EXTI0_IRQn);
 8006110:	2006      	movs	r0, #6
 8006112:	f7ff f987 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006116:	e03d      	b.n	8006194 <extInt_Config+0xd34>
		}

		case 1: {
			__NVIC_EnableIRQ(EXTI1_IRQn);
 8006118:	2007      	movs	r0, #7
 800611a:	f7ff f983 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800611e:	e039      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 2: {
			__NVIC_EnableIRQ(EXTI2_IRQn);
 8006120:	2008      	movs	r0, #8
 8006122:	f7ff f97f 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006126:	e035      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 3: {
			__NVIC_EnableIRQ(EXTI3_IRQn);
 8006128:	2009      	movs	r0, #9
 800612a:	f7ff f97b 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800612e:	e031      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 4: {
			__NVIC_EnableIRQ(EXTI4_IRQn);
 8006130:	200a      	movs	r0, #10
 8006132:	f7ff f977 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006136:	e02d      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 5: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006138:	2017      	movs	r0, #23
 800613a:	f7ff f973 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800613e:	e029      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 6: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006140:	2017      	movs	r0, #23
 8006142:	f7ff f96f 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006146:	e025      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 7: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006148:	2017      	movs	r0, #23
 800614a:	f7ff f96b 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800614e:	e021      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 8: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006150:	2017      	movs	r0, #23
 8006152:	f7ff f967 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006156:	e01d      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 9: {
			__NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006158:	2017      	movs	r0, #23
 800615a:	f7ff f963 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800615e:	e019      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 10: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006160:	2028      	movs	r0, #40	; 0x28
 8006162:	f7ff f95f 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006166:	e015      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 11: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006168:	2028      	movs	r0, #40	; 0x28
 800616a:	f7ff f95b 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800616e:	e011      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 12: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006170:	2028      	movs	r0, #40	; 0x28
 8006172:	f7ff f957 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006176:	e00d      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 13: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006178:	2028      	movs	r0, #40	; 0x28
 800617a:	f7ff f953 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800617e:	e009      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 14: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006180:	2028      	movs	r0, #40	; 0x28
 8006182:	f7ff f94f 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 8006186:	e005      	b.n	8006194 <extInt_Config+0xd34>
		}
		case 15: {
			__NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006188:	2028      	movs	r0, #40	; 0x28
 800618a:	f7ff f94b 	bl	8005424 <__NVIC_EnableIRQ>
			break;
 800618e:	e001      	b.n	8006194 <extInt_Config+0xd34>
		}

		default: {
			__NOP();
 8006190:	bf00      	nop
			break;
 8006192:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006194:	b662      	cpsie	i
}
 8006196:	bf00      	nop


	/* 7.0 Volvemos a activar las interrupciones globales */
	__enable_irq();

}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	40013800 	.word	0x40013800
 80061a8:	40021c00 	.word	0x40021c00
 80061ac:	40013c00 	.word	0x40013c00

080061b0 <callback_extInt0>:
	__enable_irq();

}

/**/
__attribute__ ((weak)) void callback_extInt0(void){
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
	__NOP();
 80061b4:	bf00      	nop
}
 80061b6:	bf00      	nop
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <callback_extInt1>:
__attribute__ ((weak)) void callback_extInt1(void){
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
	__NOP();
 80061c4:	bf00      	nop
}
 80061c6:	bf00      	nop
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <callback_extInt2>:
__attribute__ ((weak)) void callback_extInt2(void){
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
	__NOP();
 80061d4:	bf00      	nop
}
 80061d6:	bf00      	nop
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <callback_extInt3>:
__attribute__ ((weak)) void callback_extInt3(void){
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
	__NOP();
 80061e4:	bf00      	nop
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <callback_extInt4>:
__attribute__ ((weak)) void callback_extInt4(void){
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
	__NOP();
 80061f4:	bf00      	nop
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <callback_extInt5>:
__attribute__ ((weak)) void callback_extInt5(void){
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	__NOP();
 8006204:	bf00      	nop
}
 8006206:	bf00      	nop
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <callback_extInt6>:
__attribute__ ((weak)) void callback_extInt6(void){
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
	__NOP();
 8006214:	bf00      	nop
}
 8006216:	bf00      	nop
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <callback_extInt7>:
__attribute__ ((weak)) void callback_extInt7(void){
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
	__NOP();
 8006224:	bf00      	nop
}
 8006226:	bf00      	nop
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <callback_extInt8>:
__attribute__ ((weak)) void callback_extInt8(void){
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
	__NOP();
 8006234:	bf00      	nop
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <callback_extInt9>:
__attribute__ ((weak)) void callback_extInt9(void){
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	__NOP();
 8006244:	bf00      	nop
}
 8006246:	bf00      	nop
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <callback_extInt10>:
__attribute__ ((weak)) void callback_extInt10(void){
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
	__NOP();
 8006254:	bf00      	nop
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <callback_extInt11>:
__attribute__ ((weak)) void callback_extInt11(void){
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
	__NOP();
 8006264:	bf00      	nop
}
 8006266:	bf00      	nop
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <callback_extInt12>:
__attribute__ ((weak)) void callback_extInt12(void){
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
	__NOP();
 8006274:	bf00      	nop
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <callback_extInt13>:
__attribute__ ((weak)) void callback_extInt13(void){
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
	__NOP();
 8006284:	bf00      	nop
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <callback_extInt14>:
__attribute__ ((weak)) void callback_extInt14(void){
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
	__NOP();
 8006294:	bf00      	nop
}
 8006296:	bf00      	nop
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <callback_extInt15>:
__attribute__ ((weak)) void callback_extInt15(void){
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
	__NOP();
 80062a4:	bf00      	nop
}
 80062a6:	bf00      	nop
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <EXTI0_IRQHandler>:
 */



/* ISR de la interrupción canal 0*/
void EXTI0_IRQHandler(void){
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR0){
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <EXTI0_IRQHandler+0x24>)
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <EXTI0_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR0;
 80062c0:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <EXTI0_IRQHandler+0x24>)
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	4a03      	ldr	r2, [pc, #12]	; (80062d4 <EXTI0_IRQHandler+0x24>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt0();
 80062cc:	f7ff ff70 	bl	80061b0 <callback_extInt0>
	}
}
 80062d0:	bf00      	nop
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40013c00 	.word	0x40013c00

080062d8 <EXTI1_IRQHandler>:
/* Agregue las demas IRQs de las interrupciones EXTI independientes ...
 * Por favor recuerde que debe agregar el bloque if para verificar que
 * en efecto esa es la interrupcion que se está atendiendo.
 */

void EXTI1_IRQHandler(void){
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR1){
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <EXTI1_IRQHandler+0x24>)
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <EXTI1_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR1;
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <EXTI1_IRQHandler+0x24>)
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	4a03      	ldr	r2, [pc, #12]	; (80062fc <EXTI1_IRQHandler+0x24>)
 80062ee:	f043 0302 	orr.w	r3, r3, #2
 80062f2:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt1();
 80062f4:	f7ff ff64 	bl	80061c0 <callback_extInt1>
	}
}
 80062f8:	bf00      	nop
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40013c00 	.word	0x40013c00

08006300 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR2){
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <EXTI2_IRQHandler+0x24>)
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <EXTI2_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR2;
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <EXTI2_IRQHandler+0x24>)
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	4a03      	ldr	r2, [pc, #12]	; (8006324 <EXTI2_IRQHandler+0x24>)
 8006316:	f043 0304 	orr.w	r3, r3, #4
 800631a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt2();
 800631c:	f7ff ff58 	bl	80061d0 <callback_extInt2>
	}
}
 8006320:	bf00      	nop
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40013c00 	.word	0x40013c00

08006328 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR3){
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <EXTI3_IRQHandler+0x24>)
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <EXTI3_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR3;
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <EXTI3_IRQHandler+0x24>)
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	4a03      	ldr	r2, [pc, #12]	; (800634c <EXTI3_IRQHandler+0x24>)
 800633e:	f043 0308 	orr.w	r3, r3, #8
 8006342:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt3();
 8006344:	f7ff ff4c 	bl	80061e0 <callback_extInt3>
	}
}
 8006348:	bf00      	nop
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40013c00 	.word	0x40013c00

08006350 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_0 del GPIO_X
	if(EXTI->PR & EXTI_PR_PR4){
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <EXTI4_IRQHandler+0x24>)
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d007      	beq.n	8006370 <EXTI4_IRQHandler+0x20>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR4;
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <EXTI4_IRQHandler+0x24>)
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	4a03      	ldr	r2, [pc, #12]	; (8006374 <EXTI4_IRQHandler+0x24>)
 8006366:	f043 0310 	orr.w	r3, r3, #16
 800636a:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt4();
 800636c:	f7ff ff40 	bl	80061f0 <callback_extInt4>
	}
}
 8006370:	bf00      	nop
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40013c00 	.word	0x40013c00

08006378 <EXTI9_5_IRQHandler>:
/* ISR de la interrupción canales 9_5
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI9_5_IRQHandler(void){
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5){
 800637c:	4b26      	ldr	r3, [pc, #152]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <EXTI9_5_IRQHandler+0x22>
			// Bajamos la bandera correspondiente
			EXTI->PR |= EXTI_PR_PR5;
 8006388:	4b23      	ldr	r3, [pc, #140]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	4a22      	ldr	r2, [pc, #136]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 800638e:	f043 0320 	orr.w	r3, r3, #32
 8006392:	6153      	str	r3, [r2, #20]

			// llamamos al callback
			callback_extInt5();
 8006394:	f7ff ff34 	bl	8006200 <callback_extInt5>
		// llamamos al callback
		callback_extInt9();
	}else{
		__NOP();
	}
}
 8006398:	e03c      	b.n	8006414 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR6){
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR6;
 80063a6:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	6153      	str	r3, [r2, #20]
		callback_extInt6();
 80063b2:	f7ff ff2d 	bl	8006210 <callback_extInt6>
}
 80063b6:	e02d      	b.n	8006414 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR7){
 80063b8:	4b17      	ldr	r3, [pc, #92]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR7;
 80063c4:	4b14      	ldr	r3, [pc, #80]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4a13      	ldr	r2, [pc, #76]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ce:	6153      	str	r3, [r2, #20]
		callback_extInt7();
 80063d0:	f7ff ff26 	bl	8006220 <callback_extInt7>
}
 80063d4:	e01e      	b.n	8006414 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR8){
 80063d6:	4b10      	ldr	r3, [pc, #64]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR8;
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	6153      	str	r3, [r2, #20]
		callback_extInt8();
 80063ee:	f7ff ff1f 	bl	8006230 <callback_extInt8>
}
 80063f2:	e00f      	b.n	8006414 <EXTI9_5_IRQHandler+0x9c>
	}else if(EXTI->PR & EXTI_PR_PR9){
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR9;
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	4a04      	ldr	r2, [pc, #16]	; (8006418 <EXTI9_5_IRQHandler+0xa0>)
 8006406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800640a:	6153      	str	r3, [r2, #20]
		callback_extInt9();
 800640c:	f7ff ff18 	bl	8006240 <callback_extInt9>
}
 8006410:	e000      	b.n	8006414 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8006412:	bf00      	nop
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40013c00 	.word	0x40013c00

0800641c <EXTI15_10_IRQHandler>:
/* ISR de la interrupción canales 15_10
 * Observe que debe agregar totos los posibles casos, los cuales
 * son identificados por un bloque if() y el analisis de la bandera
 * (pending register -> EXTI_PR)
 */
void EXTI15_10_IRQHandler(void){
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
	// Evaluamos si la interrupción que se lanzo corresponde al PIN_Y_15
	if(EXTI->PR & EXTI_PR_PR10){
 8006420:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <EXTI15_10_IRQHandler+0x22>
		// Bajamos la bandera correspondiente
		EXTI->PR |= EXTI_PR_PR10;
 800642c:	4b2a      	ldr	r3, [pc, #168]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	4a29      	ldr	r2, [pc, #164]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 8006432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006436:	6153      	str	r3, [r2, #20]

		// llamamos al callback
		callback_extInt10();
 8006438:	f7ff ff0a 	bl	8006250 <callback_extInt10>
		// llamamos al callback
		callback_extInt15();

	}

}
 800643c:	e049      	b.n	80064d2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR11){
 800643e:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006446:	2b00      	cmp	r3, #0
 8006448:	d008      	beq.n	800645c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= EXTI_PR_PR11;
 800644a:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 8006450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006454:	6153      	str	r3, [r2, #20]
		callback_extInt11();
 8006456:	f7ff ff03 	bl	8006260 <callback_extInt11>
}
 800645a:	e03a      	b.n	80064d2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR12){
 800645c:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= EXTI_PR_PR12;
 8006468:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	4a1a      	ldr	r2, [pc, #104]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800646e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006472:	6153      	str	r3, [r2, #20]
		callback_extInt12();
 8006474:	f7ff fefc 	bl	8006270 <callback_extInt12>
}
 8006478:	e02b      	b.n	80064d2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR13){
 800647a:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= EXTI_PR_PR13;
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	4a13      	ldr	r2, [pc, #76]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800648c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006490:	6153      	str	r3, [r2, #20]
		callback_extInt13();
 8006492:	f7ff fef5 	bl	8006280 <callback_extInt13>
}
 8006496:	e01c      	b.n	80064d2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR14){
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= EXTI_PR_PR14;
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4a0b      	ldr	r2, [pc, #44]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 80064aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ae:	6153      	str	r3, [r2, #20]
		callback_extInt14();
 80064b0:	f7ff feee 	bl	8006290 <callback_extInt14>
}
 80064b4:	e00d      	b.n	80064d2 <EXTI15_10_IRQHandler+0xb6>
	}else if(EXTI->PR & EXTI_PR_PR15){
 80064b6:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <EXTI15_10_IRQHandler+0xb6>
		EXTI->PR |= EXTI_PR_PR15;
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <EXTI15_10_IRQHandler+0xbc>)
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	6153      	str	r3, [r2, #20]
		callback_extInt15();
 80064ce:	f7ff fee7 	bl	80062a0 <callback_extInt15>
}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40013c00 	.word	0x40013c00

080064dc <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemente "activar el periferico o activar la señal de reloj del periferico.
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

	//Variable para hacer todoo paso a paso
	uint32_t auxConfig = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60bb      	str	r3, [r7, #8]

	// 1) Activar el periferico
	// Verificamos para GPIOA
	if (pGPIOHandler->pGPIOx == GPIOA){
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a88      	ldr	r2, [pc, #544]	; (8006714 <GPIO_Config+0x238>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d106      	bne.n	8006504 <GPIO_Config+0x28>
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80064f6:	4b88      	ldr	r3, [pc, #544]	; (8006718 <GPIO_Config+0x23c>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	4a87      	ldr	r2, [pc, #540]	; (8006718 <GPIO_Config+0x23c>)
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	6313      	str	r3, [r2, #48]	; 0x30
 8006502:	e03a      	b.n	800657a <GPIO_Config+0x9e>

	}
	//Verificamps para GPIOB
	else if (pGPIOHandler->pGPIOx == GPIOB){
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a84      	ldr	r2, [pc, #528]	; (800671c <GPIO_Config+0x240>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d106      	bne.n	800651c <GPIO_Config+0x40>
			//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
			RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 800650e:	4b82      	ldr	r3, [pc, #520]	; (8006718 <GPIO_Config+0x23c>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	4a81      	ldr	r2, [pc, #516]	; (8006718 <GPIO_Config+0x23c>)
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	6313      	str	r3, [r2, #48]	; 0x30
 800651a:	e02e      	b.n	800657a <GPIO_Config+0x9e>

		}
	//Verificamos para GPIOC
	else if (pGPIOHandler->pGPIOx == GPIOC){
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a7f      	ldr	r2, [pc, #508]	; (8006720 <GPIO_Config+0x244>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d106      	bne.n	8006534 <GPIO_Config+0x58>
				//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
				RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 8006526:	4b7c      	ldr	r3, [pc, #496]	; (8006718 <GPIO_Config+0x23c>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	4a7b      	ldr	r2, [pc, #492]	; (8006718 <GPIO_Config+0x23c>)
 800652c:	f043 0304 	orr.w	r3, r3, #4
 8006530:	6313      	str	r3, [r2, #48]	; 0x30
 8006532:	e022      	b.n	800657a <GPIO_Config+0x9e>

			}
	//Verificamos para GPIOD
		else if (pGPIOHandler->pGPIOx == GPIOD){
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a7a      	ldr	r2, [pc, #488]	; (8006724 <GPIO_Config+0x248>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d106      	bne.n	800654c <GPIO_Config+0x70>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 800653e:	4b76      	ldr	r3, [pc, #472]	; (8006718 <GPIO_Config+0x23c>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	4a75      	ldr	r2, [pc, #468]	; (8006718 <GPIO_Config+0x23c>)
 8006544:	f043 0308 	orr.w	r3, r3, #8
 8006548:	6313      	str	r3, [r2, #48]	; 0x30
 800654a:	e016      	b.n	800657a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOE
		else if (pGPIOHandler->pGPIOx == GPIOE){
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a75      	ldr	r2, [pc, #468]	; (8006728 <GPIO_Config+0x24c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d106      	bne.n	8006564 <GPIO_Config+0x88>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 8006556:	4b70      	ldr	r3, [pc, #448]	; (8006718 <GPIO_Config+0x23c>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	4a6f      	ldr	r2, [pc, #444]	; (8006718 <GPIO_Config+0x23c>)
 800655c:	f043 0310 	orr.w	r3, r3, #16
 8006560:	6313      	str	r3, [r2, #48]	; 0x30
 8006562:	e00a      	b.n	800657a <GPIO_Config+0x9e>

				}
	//Verificamos para GPIOH
		else if (pGPIOHandler->pGPIOx == GPIOH){
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a70      	ldr	r2, [pc, #448]	; (800672c <GPIO_Config+0x250>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d105      	bne.n	800657a <GPIO_Config+0x9e>
					//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
					RCC-> AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 800656e:	4b6a      	ldr	r3, [pc, #424]	; (8006718 <GPIO_Config+0x23c>)
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	4a69      	ldr	r2, [pc, #420]	; (8006718 <GPIO_Config+0x23c>)
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	6313      	str	r3, [r2, #48]	; 0x30
	 * 2) Configurando el registro GPIOx_MODER
	 * Aca estamos leyendo la config, moviendo "PinNumber" veces hacia la izquierda de ese valor (shift left)
	 * y todoo eso lo cargamos en la variable auxConfig.
	 */

	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	795b      	ldrb	r3, [r3, #5]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	791b      	ldrb	r3, [r3, #4]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	60fb      	str	r3, [r7, #12]

	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro (debemos escribir 0b00)
	 * para lo cual aplicamos una mascara y una operacion bitwise AND
	 */
	pGPIOHandler -> pGPIOx -> MODER &= ~(0b11 << 2 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	2103      	movs	r1, #3
 800659a:	fa01 f303 	lsl.w	r3, r1, r3
 800659e:	43db      	mvns	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	400a      	ands	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]

	/*
	 * Cargamos a auxConfig en el registro MODER
	 */
	pGPIOHandler-> pGPIOx -> MODER |= auxConfig;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6819      	ldr	r1, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7a1b      	ldrb	r3, [r3, #8]
 80065be:	461a      	mov	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	791b      	ldrb	r3, [r3, #4]
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	60fb      	str	r3, [r7, #12]
	//Limpiamos antes de cargar

	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	791b      	ldrb	r3, [r3, #4]
 80065d4:	4619      	mov	r1, r3
 80065d6:	2301      	movs	r3, #1
 80065d8:	408b      	lsls	r3, r1
 80065da:	43db      	mvns	r3, r3
 80065dc:	4619      	mov	r1, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	400a      	ands	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]

	//4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler-> GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	799b      	ldrb	r3, [r3, #6]
 80065fa:	461a      	mov	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	791b      	ldrb	r3, [r3, #4]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	791b      	ldrb	r3, [r3, #4]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	2103      	movs	r1, #3
 8006616:	fa01 f303 	lsl.w	r3, r1, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	4619      	mov	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	400a      	ands	r2, r1
 8006624:	609a      	str	r2, [r3, #8]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler ->pGPIOx->OSPEEDR |= auxConfig;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6899      	ldr	r1, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]

	// 5) Configurando si se desea pull-up, pull-down o flotante
	auxConfig = (pGPIOHandler -> GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	79db      	ldrb	r3, [r3, #7]
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	791b      	ldrb	r3, [r3, #4]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler ->pGPIOx -> PUPDR &= ~(0b11 << 2*pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	791b      	ldrb	r3, [r3, #4]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	2103      	movs	r1, #3
 8006656:	fa01 f303 	lsl.w	r3, r1, r3
 800665a:	43db      	mvns	r3, r3
 800665c:	4619      	mov	r1, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	400a      	ands	r2, r1
 8006664:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler-> pGPIOx->PUPDR |= auxConfig;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68d9      	ldr	r1, [r3, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	430a      	orrs	r2, r1
 8006674:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas... se vera luego
	if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_ALTFN){
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	795b      	ldrb	r3, [r3, #5]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d143      	bne.n	8006706 <GPIO_Config+0x22a>
		// seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRM)
		if (pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber < 8){
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	791b      	ldrb	r3, [r3, #4]
 8006682:	2b07      	cmp	r3, #7
 8006684:	d81f      	bhi.n	80066c6 <GPIO_Config+0x1ea>
			//Estamos en el registro AFRL, que controla los pines del PIN_0 al PIN_7
			auxPosition = 4 * pGPIOHandler -> GPIO_PinConfig.GPIO_PinNumber;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	791b      	ldrb	r3, [r3, #4]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del registro que deseamos escribir a continuacion
			pGPIOHandler -> pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6a1a      	ldr	r2, [r3, #32]
 8006694:	210f      	movs	r1, #15
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	4619      	mov	r1, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	400a      	ands	r2, r1
 80066a6:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler-> pGPIOx->AFR[0] |= (pGPIOHandler -> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7a5b      	ldrb	r3, [r3, #9]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ba:	4619      	mov	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	621a      	str	r2, [r3, #32]
			//Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);

		}
	}
}//Fin del GPIO_Config
 80066c4:	e01f      	b.n	8006706 <GPIO_Config+0x22a>
			auxPosition = 4 * (pGPIOHandler-> GPIO_PinConfig.GPIO_PinNumber -8);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	791b      	ldrb	r3, [r3, #4]
 80066ca:	3b08      	subs	r3, #8
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	60bb      	str	r3, [r7, #8]
			pGPIOHandler -> pGPIOx->AFR[1] &= ~(0b1111<<auxPosition);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066d6:	210f      	movs	r1, #15
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	fa01 f303 	lsl.w	r3, r1, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	4619      	mov	r1, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	400a      	ands	r2, r1
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler -> pGPIOx->AFR[1] |= (pGPIOHandler-> GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	7a5b      	ldrb	r3, [r3, #9]
 80066f4:	4619      	mov	r1, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	4619      	mov	r1, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	625a      	str	r2, [r3, #36]	; 0x24
}//Fin del GPIO_Config
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40020000 	.word	0x40020000
 8006718:	40023800 	.word	0x40023800
 800671c:	40020400 	.word	0x40020400
 8006720:	40020800 	.word	0x40020800
 8006724:	40020c00 	.word	0x40020c00
 8006728:	40021000 	.word	0x40021000
 800672c:	40021c00 	.word	0x40021c00

08006730 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 */

void GPIO_WritePin (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET){
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10d      	bne.n	800675e <GPIO_WritePin+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	4619      	mov	r1, r3
 800674e:	2301      	movs	r3, #1
 8006750:	408b      	lsls	r3, r1
 8006752:	4619      	mov	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	619a      	str	r2, [r3, #24]
	}
	else{
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}
}
 800675c:	e00d      	b.n	800677a <GPIO_WritePin+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	791b      	ldrb	r3, [r3, #4]
 8006768:	3310      	adds	r3, #16
 800676a:	2101      	movs	r1, #1
 800676c:	fa01 f303 	lsl.w	r3, r1, r3
 8006770:	4619      	mov	r1, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	619a      	str	r2, [r3, #24]
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <GPIO_WritePin_Afopt>:


void GPIO_WritePin_Afopt (GPIO_Handler_t *pPinHandler, uint8_t newState){
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]

	//Limpiamos la posicion que deseamos
	// pPinHandler->pGPIOx->ODR &= ~(SET<< pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == RESET){
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10d      	bne.n	80067b4 <GPIO_WritePin_Afopt+0x2e>
		//Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	791b      	ldrb	r3, [r3, #4]
 80067a2:	4619      	mov	r1, r3
 80067a4:	2301      	movs	r3, #1
 80067a6:	408b      	lsls	r3, r1
 80067a8:	4619      	mov	r1, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	619a      	str	r2, [r3, #24]
		//Trabajando con la parte alta del registro
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
	}


}
 80067b2:	e00d      	b.n	80067d0 <GPIO_WritePin_Afopt+0x4a>
				pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler ->GPIO_PinConfig.GPIO_PinNumber + 16));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	791b      	ldrb	r3, [r3, #4]
 80067be:	3310      	adds	r3, #16
 80067c0:	2101      	movs	r1, #1
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	4619      	mov	r1, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	619a      	str	r2, [r3, #24]
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <GPIO_ReadPin>:

/**
 * Funcion para leer el estado de un pin especifico
 */

uint32_t GPIO_ReadPin (GPIO_Handler_t *pPinHandler){
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar la cual luego retornaremos
	uint32_t pinValue = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del registro IDR, Desplazado a derecha tantas veces como la ubicacion
	// del pin especifico
	uint16_t mask = (SET << pPinHandler -> GPIO_PinConfig.GPIO_PinNumber);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	791b      	ldrb	r3, [r3, #4]
 80067ec:	461a      	mov	r2, r3
 80067ee:	2301      	movs	r3, #1
 80067f0:	4093      	lsls	r3, r2
 80067f2:	817b      	strh	r3, [r7, #10]
	pinValue = (pPinHandler -> pGPIOx -> IDR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	60fb      	str	r3, [r7, #12]
	pinValue &= mask;
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4013      	ands	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
	pinValue >>= (pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	791b      	ldrb	r3, [r3, #4]
 8006808:	461a      	mov	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	40d3      	lsrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

	return pinValue;
 8006810:	68fb      	ldr	r3, [r7, #12]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <GPIOxTooglePin>:

void GPIOxTooglePin (GPIO_Handler_t *pPinState){
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
		uint8_t state  = GPIO_ReadPin (pPinState);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffd8 	bl	80067dc <GPIO_ReadPin>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]
		GPIO_WritePin(pPinState, !state);
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf0c      	ite	eq
 8006836:	2301      	moveq	r3, #1
 8006838:	2300      	movne	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ff76 	bl	8006730 <GPIO_WritePin>
}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <configMPUAccel>:
#include "MPUAccel.h"
#include "I2CDriver.h"
#include "GPIOxDriver.h"


void configMPUAccel (MPUAccel_Config *ptrMPUAccel){
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	73bb      	strb	r3, [r7, #14]
	// Paso 1 se configuran los pines GPIO y el perisferico I2C respectivo para poder configurar a partir del
	//MCU el sensor, se tiene en cuenta tanto la lectura del pin SDA como el SCL
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSDA);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fe3b 	bl	80064dc <GPIO_Config>
	GPIO_Config(ptrMPUAccel->ptrGPIOhandlerSCL);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fe36 	bl	80064dc <GPIO_Config>
	i2c_config(ptrMPUAccel->ptrI2Chandler);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4618      	mov	r0, r3
 8006876:	f002 f88f 	bl	8008998 <i2c_config>


	// verificamos que el MPU se comunica con exito
	while(!rdy){
 800687a:	e004      	b.n	8006886 <configMPUAccel+0x3a>

		rdy = WHOIAM(ptrMPUAccel);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f94f 	bl	8006b20 <WHOIAM>
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f7      	beq.n	800687c <configMPUAccel+0x30>
	}

	//Paso 2, Colocamos en 0 el bit 7 del PM1, (registro 0x6B) ya que sin esto no se puede modificar ningun registro.
	byte = readData(ptrMPUAccel, 0x6B);
 800688c:	216b      	movs	r1, #107	; 0x6b
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f8f1 	bl	8006a76 <readData>
 8006894:	4603      	mov	r3, r0
 8006896:	73bb      	strb	r3, [r7, #14]
	byte &=  ~byte;
 8006898:	2300      	movs	r3, #0
 800689a:	73bb      	strb	r3, [r7, #14]
	writeData(ptrMPUAccel, 0x6B, byte );
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	461a      	mov	r2, r3
 80068a0:	216b      	movs	r1, #107	; 0x6b
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f89c 	bl	80069e0 <writeData>
	byte = readData(ptrMPUAccel, 0x6B);
 80068a8:	216b      	movs	r1, #107	; 0x6b
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8e3 	bl	8006a76 <readData>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73bb      	strb	r3, [r7, #14]
	// respectivamente


		//Preguntamos por el range requerido por el usuario de aceleracion, puede ser +-2g,4g,8g,16g (# X la aceleracion
		//de la gravedad)
		byte = readData(ptrMPUAccel, 0x1C);
 80068b4:	211c      	movs	r1, #28
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8dd 	bl	8006a76 <readData>
 80068bc:	4603      	mov	r3, r0
 80068be:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	f023 0318 	bic.w	r3, r3, #24
 80068c6:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleACCEL){
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d833      	bhi.n	8006938 <configMPUAccel+0xec>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <configMPUAccel+0x8c>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068e9 	.word	0x080068e9
 80068dc:	080068f7 	.word	0x080068f7
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	08006923 	.word	0x08006923
			case ACCEL_2G :{

				byte |= (ACCEL_2G << 3);
				writeData(ptrMPUAccel, 0x1C, byte);
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	461a      	mov	r2, r3
 80068ec:	211c      	movs	r1, #28
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f876 	bl	80069e0 <writeData>

				break;
 80068f4:	e021      	b.n	800693a <configMPUAccel+0xee>
			}case ACCEL_4G :{

				byte |= (ACCEL_4G << 3);
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	f043 0308 	orr.w	r3, r3, #8
 80068fc:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	461a      	mov	r2, r3
 8006902:	211c      	movs	r1, #28
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f86b 	bl	80069e0 <writeData>

				break;
 800690a:	e016      	b.n	800693a <configMPUAccel+0xee>
			}case ACCEL_8G :{

				byte |= (ACCEL_8G << 3);
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	f043 0310 	orr.w	r3, r3, #16
 8006912:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 8006914:	7bbb      	ldrb	r3, [r7, #14]
 8006916:	461a      	mov	r2, r3
 8006918:	211c      	movs	r1, #28
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f860 	bl	80069e0 <writeData>

				break;
 8006920:	e00b      	b.n	800693a <configMPUAccel+0xee>
			}case ACCEL_16G :{

				byte |= (ACCEL_16G << 3);
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	f043 0318 	orr.w	r3, r3, #24
 8006928:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1C, byte);
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	461a      	mov	r2, r3
 800692e:	211c      	movs	r1, #28
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f855 	bl	80069e0 <writeData>

				break;
 8006936:	e000      	b.n	800693a <configMPUAccel+0xee>
			}default:{
				break;
 8006938:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1C);
 800693a:	211c      	movs	r1, #28
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f89a 	bl	8006a76 <readData>
 8006942:	4603      	mov	r3, r0
 8006944:	73bb      	strb	r3, [r7, #14]

		//Preguntamos por el Range del giroscopio pedido por el usuario, puede ser +-250, +-500, +-1000, +-2000 (°/segundo)
		byte = readData(ptrMPUAccel, 0x1B);
 8006946:	211b      	movs	r1, #27
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f894 	bl	8006a76 <readData>
 800694e:	4603      	mov	r3, r0
 8006950:	73bb      	strb	r3, [r7, #14]
		byte &= ~(0b00011000) ;
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	f023 0318 	bic.w	r3, r3, #24
 8006958:	73bb      	strb	r3, [r7, #14]
		switch (ptrMPUAccel->fullScaleGYRO){
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d832      	bhi.n	80069c8 <configMPUAccel+0x17c>
 8006962:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <configMPUAccel+0x11c>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	08006979 	.word	0x08006979
 800696c:	08006987 	.word	0x08006987
 8006970:	0800699d 	.word	0x0800699d
 8006974:	080069b3 	.word	0x080069b3
			case GYRO_250 :{

				byte |= (GYRO_250 << 3);
				writeData(ptrMPUAccel, 0x1B, byte);
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	461a      	mov	r2, r3
 800697c:	211b      	movs	r1, #27
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f82e 	bl	80069e0 <writeData>

				break;
 8006984:	e021      	b.n	80069ca <configMPUAccel+0x17e>
			}case GYRO_500 :{

				byte |= (GYRO_500 << 3);
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	461a      	mov	r2, r3
 8006992:	211b      	movs	r1, #27
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f823 	bl	80069e0 <writeData>

				break;
 800699a:	e016      	b.n	80069ca <configMPUAccel+0x17e>
			}case GYRO_1000 :{

				byte |= (GYRO_1000 << 3);
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	f043 0310 	orr.w	r3, r3, #16
 80069a2:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	461a      	mov	r2, r3
 80069a8:	211b      	movs	r1, #27
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f818 	bl	80069e0 <writeData>

				break;
 80069b0:	e00b      	b.n	80069ca <configMPUAccel+0x17e>
			}case GYRO_2000 :{

				byte |= (GYRO_2000 << 3);
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	f043 0318 	orr.w	r3, r3, #24
 80069b8:	73bb      	strb	r3, [r7, #14]
				writeData(ptrMPUAccel, 0x1B, byte);
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	461a      	mov	r2, r3
 80069be:	211b      	movs	r1, #27
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f80d 	bl	80069e0 <writeData>

				break;
 80069c6:	e000      	b.n	80069ca <configMPUAccel+0x17e>
			}default:{
				break;
 80069c8:	bf00      	nop
			}

		}
		byte = readData(ptrMPUAccel, 0x1B);
 80069ca:	211b      	movs	r1, #27
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f852 	bl	8006a76 <readData>
 80069d2:	4603      	mov	r3, r0
 80069d4:	73bb      	strb	r3, [r7, #14]


}
 80069d6:	bf00      	nop
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop

080069e0 <writeData>:



// En esta funcion escribimos la secuencia para escritura propia del MCU
void writeData (MPUAccel_Config *ptrMPUAccel, uint8_t RA, uint8_t data){
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
 80069ec:	4613      	mov	r3, r2
 80069ee:	70bb      	strb	r3, [r7, #2]
	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a02:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f002 f949 	bl	8008ca0 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68d8      	ldr	r0, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	791b      	ldrb	r3, [r3, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f002 f993 	bl	8008d46 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f002 f9b4 	bl	8008d96 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006a2e:	e000      	b.n	8006a32 <writeData+0x52>
		__NOP();
 8006a30:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f6      	bne.n	8006a30 <writeData+0x50>
	}

	i2c_sendDataByte(ptrMPUAccel->ptrI2Chandler, data);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	78ba      	ldrb	r2, [r7, #2]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f002 f9bd 	bl	8008dca <i2c_sendDataByte>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006a50:	e000      	b.n	8006a54 <writeData+0x74>
		__NOP();
 8006a52:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f6      	bne.n	8006a52 <writeData+0x72>
	}

	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f002 f907 	bl	8008c7c <i2c_stopTransaction>



}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <readData>:

// En esta funcion escribimos la secuencia para lectura propia del MCU
uint8_t readData (MPUAccel_Config *ptrMPUAccel, uint8_t RA){
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]

	/* 0. Creamos una variable auxiliar para recribir el dato que leemos*/
	uint8_t auxRead = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]

	//Limpiamos la bandera AF por si antes se levanto
	ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 &= ~(I2C_SR1_AF);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695a      	ldr	r2, [r3, #20]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a98:	615a      	str	r2, [r3, #20]

	//Comenzamos la transacción
	i2c_startTransaction (ptrMPUAccel->ptrI2Chandler);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 f8fe 	bl	8008ca0 <i2c_startTransaction>

	//Mandamos el Address correspondiente y el bit escribir
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_WRITE_DATA);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68d8      	ldr	r0, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	791b      	ldrb	r3, [r3, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f002 f948 	bl	8008d46 <i2c_sendSlaveAddressRW>

	// Dentro de la funcion anterior ya esta la espera respectiva para el ACK que debe mandar el Slave
	i2c_sendMemoryAddress(ptrMPUAccel->ptrI2Chandler, RA);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f002 f969 	bl	8008d96 <i2c_sendMemoryAddress>

	// Esperamos el ACK que debe de mandar el Slave
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006ac4:	e000      	b.n	8006ac8 <readData+0x52>
		__NOP();
 8006ac6:	bf00      	nop
	while (ptrMPUAccel->ptrI2Chandler->ptrI2Cx->SR1 & I2C_SR1_AF){
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f6      	bne.n	8006ac6 <readData+0x50>
	}

	// Comenzamos el reestar
	i2c_reStartTransaction(ptrMPUAccel->ptrI2Chandler);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f002 f904 	bl	8008cea <i2c_reStartTransaction>

	// Ya dentro de la anterior funcion esta la espera a que comience el bit de start
	//Volvemos a mandar el Address con el bit de read (1)
	i2c_sendSlaveAddressRW(ptrMPUAccel->ptrI2Chandler, ptrMPUAccel->ptrI2Chandler->I2C_Config.slaveAddress, I2C_READ_DATA);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68d8      	ldr	r0, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	791b      	ldrb	r3, [r3, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	4619      	mov	r1, r3
 8006af0:	f002 f929 	bl	8008d46 <i2c_sendSlaveAddressRW>

	// Mandamos el noAcknowledge despues de recibir el dato respectivo
	i2c_sendNoAck(ptrMPUAccel->ptrI2Chandler);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f002 f912 	bl	8008d22 <i2c_sendNoAck>

	// Paramos la transacción
	i2c_stopTransaction(ptrMPUAccel->ptrI2Chandler);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f002 f8ba 	bl	8008c7c <i2c_stopTransaction>

	auxRead = i2c_readDataByte(ptrMPUAccel->ptrI2Chandler);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f002 f976 	bl	8008dfe <i2c_readDataByte>
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]

	return auxRead;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <WHOIAM>:


}

//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Config *ptrMPUAccel){
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]

	uint8_t whoami = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73bb      	strb	r3, [r7, #14]

	//leemos el registro 0x75 correspondiente
	whoami = readData(ptrMPUAccel, 0x75);
 8006b30:	2175      	movs	r1, #117	; 0x75
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff ff9f 	bl	8006a76 <readData>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]

	// verificamos la transacción

	whoami &= ~(129);
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006b42:	73fb      	strb	r3, [r7, #15]

	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bf14      	ite	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	2300      	moveq	r3, #0
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	73bb      	strb	r3, [r7, #14]

	return rdy;
 8006b56:	7bbb      	ldrb	r3, [r7, #14]

}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <readGyro_X>:
	return AccelZ_R;

}


float readGyro_X  (MPUAccel_Config *ptrMPUAccel){
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROX_H = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROX_L = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROX   = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	817b      	strh	r3, [r7, #10]
	double  GYROX_R   = 0;
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x43 y 0x44 respectivamente para el eje X
	GYROX_H = readData(ptrMPUAccel, 0x43);
 8006b80:	2143      	movs	r1, #67	; 0x43
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff ff77 	bl	8006a76 <readData>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	81fb      	strh	r3, [r7, #14]
	GYROX_L = readData(ptrMPUAccel, 0x44);
 8006b8c:	2144      	movs	r1, #68	; 0x44
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff ff71 	bl	8006a76 <readData>
 8006b94:	4603      	mov	r3, r0
 8006b96:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROX = (GYROX_H << 8) | (GYROX_L);
 8006b98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	b21a      	sxth	r2, r3
 8006ba0:	89bb      	ldrh	r3, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROX por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d846      	bhi.n	8006c3c <readGyro_X+0xdc>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <readGyro_X+0x54>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006be3 	.word	0x08006be3
 8006bbc:	08006c01 	.word	0x08006c01
 8006bc0:	08006c1f 	.word	0x08006c1f
		case GYRO_250 :{

			GYROX_R = GYROX / (double) GYRO_250_SENS;
 8006bc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7f9 fcc3 	bl	8000554 <__aeabi_i2d>
 8006bce:	a325      	add	r3, pc, #148	; (adr r3, 8006c64 <readGyro_X+0x104>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	f7f9 fe52 	bl	800087c <__aeabi_ddiv>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006be0:	e02d      	b.n	8006c3e <readGyro_X+0xde>
		}case GYRO_500 :{

			GYROX_R = GYROX / (double) GYRO_500_SENS;
 8006be2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7f9 fcb4 	bl	8000554 <__aeabi_i2d>
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <readGyro_X+0xf8>)
 8006bf2:	f7f9 fe43 	bl	800087c <__aeabi_ddiv>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006bfe:	e01e      	b.n	8006c3e <readGyro_X+0xde>
		}case GYRO_1000 :{

			GYROX_R = GYROX / (double) GYRO_1000_SENS;
 8006c00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7f9 fca5 	bl	8000554 <__aeabi_i2d>
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <readGyro_X+0xfc>)
 8006c10:	f7f9 fe34 	bl	800087c <__aeabi_ddiv>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006c1c:	e00f      	b.n	8006c3e <readGyro_X+0xde>
		}case GYRO_2000 :{

			GYROX_R = GYROX / (double) GYRO_2000_SENS;
 8006c1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7f9 fc96 	bl	8000554 <__aeabi_i2d>
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <readGyro_X+0x100>)
 8006c2e:	f7f9 fe25 	bl	800087c <__aeabi_ddiv>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006c3a:	e000      	b.n	8006c3e <readGyro_X+0xde>
		}default:{
			break;
 8006c3c:	bf00      	nop
		}

	}

	return GYROX_R;
 8006c3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c42:	f7f9 ffe9 	bl	8000c18 <__aeabi_d2f>
 8006c46:	4603      	mov	r3, r0
 8006c48:	ee07 3a90 	vmov	s15, r3

}
 8006c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40508000 	.word	0x40508000
 8006c5c:	40408000 	.word	0x40408000
 8006c60:	40300000 	.word	0x40300000
 8006c64:	00000000 	.word	0x00000000
 8006c68:	40606000 	.word	0x40606000
 8006c6c:	00000000 	.word	0x00000000

08006c70 <readGyro_Y>:


float readGyro_Y  (MPUAccel_Config *ptrMPUAccel){
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t GYROY_H = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	81fb      	strh	r3, [r7, #14]
	int16_t GYROY_L = 0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	81bb      	strh	r3, [r7, #12]
	int16_t   GYROY   = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	817b      	strh	r3, [r7, #10]
	double  GYROY_R   = 0;
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x45 y 0x46 respectivamente para el eje Y
	GYROY_H = readData(ptrMPUAccel, 0x45);
 8006c90:	2145      	movs	r1, #69	; 0x45
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff feef 	bl	8006a76 <readData>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	81fb      	strh	r3, [r7, #14]
	GYROY_L = readData(ptrMPUAccel, 0x46);
 8006c9c:	2146      	movs	r1, #70	; 0x46
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fee9 	bl	8006a76 <readData>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROY = (GYROY_H << 8) | (GYROY_L);
 8006ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	b21a      	sxth	r2, r3
 8006cb0:	89bb      	ldrh	r3, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROY por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d846      	bhi.n	8006d4c <readGyro_Y+0xdc>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <readGyro_Y+0x54>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d2f 	.word	0x08006d2f
		case GYRO_250 :{

			GYROY_R = GYROY / (double) GYRO_250_SENS;
 8006cd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7f9 fc3b 	bl	8000554 <__aeabi_i2d>
 8006cde:	a325      	add	r3, pc, #148	; (adr r3, 8006d74 <readGyro_Y+0x104>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 fdca 	bl	800087c <__aeabi_ddiv>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006cf0:	e02d      	b.n	8006d4e <readGyro_Y+0xde>
		}case GYRO_500 :{

			GYROY_R = GYROY / (double) GYRO_500_SENS;
 8006cf2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7f9 fc2c 	bl	8000554 <__aeabi_i2d>
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <readGyro_Y+0xf8>)
 8006d02:	f7f9 fdbb 	bl	800087c <__aeabi_ddiv>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006d0e:	e01e      	b.n	8006d4e <readGyro_Y+0xde>
		}case GYRO_1000 :{

			GYROY_R = GYROY / (double) GYRO_1000_SENS;
 8006d10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7f9 fc1d 	bl	8000554 <__aeabi_i2d>
 8006d1a:	f04f 0200 	mov.w	r2, #0
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <readGyro_Y+0xfc>)
 8006d20:	f7f9 fdac 	bl	800087c <__aeabi_ddiv>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006d2c:	e00f      	b.n	8006d4e <readGyro_Y+0xde>
		}case GYRO_2000 :{

			GYROY_R = GYROY / (double) GYRO_2000_SENS;
 8006d2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7f9 fc0e 	bl	8000554 <__aeabi_i2d>
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <readGyro_Y+0x100>)
 8006d3e:	f7f9 fd9d 	bl	800087c <__aeabi_ddiv>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006d4a:	e000      	b.n	8006d4e <readGyro_Y+0xde>
		}default:{
			break;
 8006d4c:	bf00      	nop
		}

	}

	return GYROY_R;
 8006d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d52:	f7f9 ff61 	bl	8000c18 <__aeabi_d2f>
 8006d56:	4603      	mov	r3, r0
 8006d58:	ee07 3a90 	vmov	s15, r3

}
 8006d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40508000 	.word	0x40508000
 8006d6c:	40408000 	.word	0x40408000
 8006d70:	40300000 	.word	0x40300000
 8006d74:	00000000 	.word	0x00000000
 8006d78:	40606000 	.word	0x40606000
 8006d7c:	00000000 	.word	0x00000000

08006d80 <readGyro_Z>:

float readGyro_Z  (MPUAccel_Config *ptrMPUAccel){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

	//Creamos las variables donde almacenamos todos los datos

	int16_t  GYROZ_H  = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	81fb      	strh	r3, [r7, #14]
	int16_t  GYROZ_L  = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	81bb      	strh	r3, [r7, #12]
	int16_t  GYROZ    = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	817b      	strh	r3, [r7, #10]
	double   GYROZ_R   = 0;
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Llamamos los bytes alto y bajo de los registros 0x47 y 0x48 respectivamente para el eje Z
	GYROZ_H = readData(ptrMPUAccel, 0x47);
 8006da0:	2147      	movs	r1, #71	; 0x47
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff fe67 	bl	8006a76 <readData>
 8006da8:	4603      	mov	r3, r0
 8006daa:	81fb      	strh	r3, [r7, #14]
	GYROZ_L = readData(ptrMPUAccel, 0x48);
 8006dac:	2148      	movs	r1, #72	; 0x48
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fe61 	bl	8006a76 <readData>
 8006db4:	4603      	mov	r3, r0
 8006db6:	81bb      	strh	r3, [r7, #12]

	//Juntamos ambos bytes en un solo numero para tener la lectura completa del ADC;
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
 8006db8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	b21a      	sxth	r2, r3
 8006dc0:	89bb      	ldrh	r3, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	817b      	strh	r3, [r7, #10]

	// Como queremos es el dato de cuantos dps hay , entonces dividimos GYROZ por la sensibilidad respectiva
	// Preguntamos que caso de rango se tiene para este caso
	switch (ptrMPUAccel->fullScaleGYRO){
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d846      	bhi.n	8006e5c <readGyro_Z+0xdc>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <readGyro_Z+0x54>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e21 	.word	0x08006e21
 8006de0:	08006e3f 	.word	0x08006e3f
		case GYRO_250 :{

			GYROZ_R = GYROZ / (double) GYRO_250_SENS ;
 8006de4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7f9 fbb3 	bl	8000554 <__aeabi_i2d>
 8006dee:	a325      	add	r3, pc, #148	; (adr r3, 8006e84 <readGyro_Z+0x104>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 fd42 	bl	800087c <__aeabi_ddiv>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006e00:	e02d      	b.n	8006e5e <readGyro_Z+0xde>
		}case GYRO_500 :{

			GYROZ_R = GYROZ /  (double) GYRO_500_SENS ;
 8006e02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7f9 fba4 	bl	8000554 <__aeabi_i2d>
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <readGyro_Z+0xf8>)
 8006e12:	f7f9 fd33 	bl	800087c <__aeabi_ddiv>
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006e1e:	e01e      	b.n	8006e5e <readGyro_Z+0xde>
		}case GYRO_1000 :{

			GYROZ_R = GYROZ / (double)  GYRO_1000_SENS;
 8006e20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7f9 fb95 	bl	8000554 <__aeabi_i2d>
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <readGyro_Z+0xfc>)
 8006e30:	f7f9 fd24 	bl	800087c <__aeabi_ddiv>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006e3c:	e00f      	b.n	8006e5e <readGyro_Z+0xde>
		}case GYRO_2000 :{

			GYROZ_R = GYROZ / (double) GYRO_2000_SENS;
 8006e3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fb86 	bl	8000554 <__aeabi_i2d>
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <readGyro_Z+0x100>)
 8006e4e:	f7f9 fd15 	bl	800087c <__aeabi_ddiv>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	e9c7 2304 	strd	r2, r3, [r7, #16]

			break;
 8006e5a:	e000      	b.n	8006e5e <readGyro_Z+0xde>
		}default:{
			break;
 8006e5c:	bf00      	nop
		}

	}

	return GYROZ_R;
 8006e5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e62:	f7f9 fed9 	bl	8000c18 <__aeabi_d2f>
 8006e66:	4603      	mov	r3, r0
 8006e68:	ee07 3a90 	vmov	s15, r3

}
 8006e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40508000 	.word	0x40508000
 8006e7c:	40408000 	.word	0x40408000
 8006e80:	40300000 	.word	0x40300000
 8006e84:	00000000 	.word	0x00000000
 8006e88:	40606000 	.word	0x40606000

08006e8c <pwm_Config>:

uint16_t periodo = 0;


/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if (ptrPwmHandler->ptrTIMx == TIM1){
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a6c      	ldr	r2, [pc, #432]	; (800704c <pwm_Config+0x1c0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d106      	bne.n	8006eac <pwm_Config+0x20>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8006e9e:	4b6c      	ldr	r3, [pc, #432]	; (8007050 <pwm_Config+0x1c4>)
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	4a6b      	ldr	r2, [pc, #428]	; (8007050 <pwm_Config+0x1c4>)
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8006eaa:	e030      	b.n	8006f0e <pwm_Config+0x82>

	}else if(ptrPwmHandler->ptrTIMx == TIM2){
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d106      	bne.n	8006ec4 <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8006eb6:	4b66      	ldr	r3, [pc, #408]	; (8007050 <pwm_Config+0x1c4>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	4a65      	ldr	r2, [pc, #404]	; (8007050 <pwm_Config+0x1c4>)
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ec2:	e024      	b.n	8006f0e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a62      	ldr	r2, [pc, #392]	; (8007054 <pwm_Config+0x1c8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d106      	bne.n	8006edc <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8006ece:	4b60      	ldr	r3, [pc, #384]	; (8007050 <pwm_Config+0x1c4>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	4a5f      	ldr	r2, [pc, #380]	; (8007050 <pwm_Config+0x1c4>)
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eda:	e018      	b.n	8006f0e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5d      	ldr	r2, [pc, #372]	; (8007058 <pwm_Config+0x1cc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d106      	bne.n	8006ef4 <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8006ee6:	4b5a      	ldr	r3, [pc, #360]	; (8007050 <pwm_Config+0x1c4>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	4a59      	ldr	r2, [pc, #356]	; (8007050 <pwm_Config+0x1c4>)
 8006eec:	f043 0304 	orr.w	r3, r3, #4
 8006ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef2:	e00c      	b.n	8006f0e <pwm_Config+0x82>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a58      	ldr	r2, [pc, #352]	; (800705c <pwm_Config+0x1d0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d106      	bne.n	8006f0c <pwm_Config+0x80>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8006efe:	4b54      	ldr	r3, [pc, #336]	; (8007050 <pwm_Config+0x1c4>)
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	4a53      	ldr	r2, [pc, #332]	; (8007050 <pwm_Config+0x1c4>)
 8006f04:	f043 0308 	orr.w	r3, r3, #8
 8006f08:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0a:	e000      	b.n	8006f0e <pwm_Config+0x82>
	}
	else{
		__NOP();
 8006f0c:	bf00      	nop
	}

	//Dejamos una relacion 1 a 1 para la velocidad de conteo del timer
	ptrPwmHandler->ptrTIMx->CR1 &= ~(TIM_CR1_CKD);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f1c:	601a      	str	r2, [r3, #0]



	// preguntamos si se estan usando optoacopladores

	if(ptrPwmHandler->config.optocoupler == PWM_DISABLE_OPTOCOUPLER){
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7d5b      	ldrb	r3, [r3, #21]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <pwm_Config+0xa8>
		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f930 	bl	800718c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycle(ptrPwmHandler);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fa47 	bl	80073c0 <setDuttyCycle>
 8006f32:	e005      	b.n	8006f40 <pwm_Config+0xb4>
	}else{

		/* 1. Cargamos la frecuencia deseada */
		setFrequency(ptrPwmHandler);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f929 	bl	800718c <setFrequency>

		/* 2. Cargamos el valor del dutty-Cycle*/
		setDuttyCycleAfOpt(ptrPwmHandler);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb18 	bl	8007570 <setDuttyCycleAfOpt>
	}

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0210 	bic.w	r2, r2, #16
 8006f4e:	601a      	str	r2, [r3, #0]


	ptrPwmHandler->ptrTIMx->CNT = 0;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2200      	movs	r2, #0
 8006f56:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	791b      	ldrb	r3, [r3, #4]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d86f      	bhi.n	8007040 <pwm_Config+0x1b4>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <pwm_Config+0xdc>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f79 	.word	0x08006f79
 8006f6c:	08006fab 	.word	0x08006fab
 8006f70:	08006fdd 	.word	0x08006fdd
 8006f74:	0800700f 	.word	0x0800700f
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0203 	bic.w	r2, r2, #3
 8006f86:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006f96:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0208 	orr.w	r2, r2, #8
 8006fa6:	619a      	str	r2, [r3, #24]


		break;
 8006fa8:	e04b      	b.n	8007042 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC2S;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fb8:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8006fc8:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fd8:	619a      	str	r2, [r3, #24]

		break;
 8006fda:	e032      	b.n	8007042 <pwm_Config+0x1b6>
	}

	case PWM_CHANNEL_3:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0203 	bic.w	r2, r2, #3
 8006fea:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69da      	ldr	r2, [r3, #28]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006ffa:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0208 	orr.w	r2, r2, #8
 800700a:	61da      	str	r2, [r3, #28]

		break;
 800700c:	e019      	b.n	8007042 <pwm_Config+0x1b6>
	}
	case PWM_CHANNEL_4:{
			// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800701c:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800702c:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800703c:	61da      	str	r2, [r3, #28]

		break;
 800703e:	e000      	b.n	8007042 <pwm_Config+0x1b6>
	}

	default:{
		break;
 8007040:	bf00      	nop
	}// fin del switch-case




}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40023800 	.word	0x40023800
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00

08007060 <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]

}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
uint8_t enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]

	if (ptrPwmHandler->ptrTIMx == TIM1){
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <enableOutput+0x104>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d13a      	bne.n	800710c <enableOutput+0x88>
		// Para el caso de Timer 1, devemos primero activar la opcion MOE en el BDTR register

		ptrPwmHandler->ptrTIMx->BDTR |= TIM_BDTR_MOE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070a4:	645a      	str	r2, [r3, #68]	; 0x44

		switch (ptrPwmHandler->config.channel) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	791b      	ldrb	r3, [r3, #4]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d862      	bhi.n	8007174 <enableOutput+0xf0>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <enableOutput+0x30>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070d7 	.word	0x080070d7
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	080070fb 	.word	0x080070fb
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	621a      	str	r2, [r3, #32]

				break;
 80070d4:	e051      	b.n	800717a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0210 	orr.w	r2, r2, #16
 80070e4:	621a      	str	r2, [r3, #32]

				break;
 80070e6:	e048      	b.n	800717a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f6:	621a      	str	r2, [r3, #32]

				break;
 80070f8:	e03f      	b.n	800717a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1a      	ldr	r2, [r3, #32]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007108:	621a      	str	r2, [r3, #32]

				break;
 800710a:	e036      	b.n	800717a <enableOutput+0xf6>
			}

		}

	}else{
		switch (ptrPwmHandler->config.channel) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	791b      	ldrb	r3, [r3, #4]
 8007110:	2b03      	cmp	r3, #3
 8007112:	d831      	bhi.n	8007178 <enableOutput+0xf4>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <enableOutput+0x98>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	0800712d 	.word	0x0800712d
 8007120:	0800713f 	.word	0x0800713f
 8007124:	08007151 	.word	0x08007151
 8007128:	08007163 	.word	0x08007163
			case PWM_CHANNEL_1: {
				// Activamos la salida del canal 1
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	621a      	str	r2, [r3, #32]

				break;
 800713c:	e01d      	b.n	800717a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_2: {
				// Activamos la salida del canal 2
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a1a      	ldr	r2, [r3, #32]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0210 	orr.w	r2, r2, #16
 800714c:	621a      	str	r2, [r3, #32]

				break;
 800714e:	e014      	b.n	800717a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_3: {
				// Activamos la salida del canal 3
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715e:	621a      	str	r2, [r3, #32]

				break;
 8007160:	e00b      	b.n	800717a <enableOutput+0xf6>
			}

			case PWM_CHANNEL_4: {
				// Activamos la salida del canal 4
				ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007170:	621a      	str	r2, [r3, #32]

				break;
 8007172:	e002      	b.n	800717a <enableOutput+0xf6>
				break;
 8007174:	bf00      	nop
 8007176:	e000      	b.n	800717a <enableOutput+0xf6>
			}

			default: {
				break;
 8007178:	bf00      	nop
			}

		}
	}
	return SET;
 800717a:	2301      	movs	r3, #1
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40010000 	.word	0x40010000

0800718c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

	uint32_t speed   = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC = ptrPwmHandler->config.prescaler;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6892      	ldr	r2, [r2, #8]
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28

	speed = ptrPwmHandler->config.prescaler;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60fb      	str	r3, [r7, #12]

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.


	if((speed == PWM_SPEED_16MHz_10us )
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2ba0      	cmp	r3, #160	; 0xa0
 80071ac:	d022      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_20MHz_10us)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2bc8      	cmp	r3, #200	; 0xc8
 80071b2:	d01f      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_30MHz_10us)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80071ba:	d01b      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_40MHz_10us)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80071c2:	d017      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_50MHz_10us)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80071ca:	d013      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_60MHz_10us)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80071d2:	d00f      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_70MHz_10us)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80071da:	d00b      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_80MHz_10us)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80071e2:	d007      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_90MHz_10us)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80071ea:	d003      	beq.n	80071f4 <setFrequency+0x68>
     ||(speed == PWM_SPEED_100MHz_10us)){
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071f2:	d111      	bne.n	8007218 <setFrequency+0x8c>

		periodo = ptrPwmHandler->config.periodo * 1000 ;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	899b      	ldrh	r3, [r3, #12]
 80071f8:	461a      	mov	r2, r3
 80071fa:	0152      	lsls	r2, r2, #5
 80071fc:	1ad2      	subs	r2, r2, r3
 80071fe:	0092      	lsls	r2, r2, #2
 8007200:	4413      	add	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	b29a      	uxth	r2, r3
 8007206:	4b68      	ldr	r3, [pc, #416]	; (80073a8 <setFrequency+0x21c>)
 8007208:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800720a:	4b67      	ldr	r3, [pc, #412]	; (80073a8 <setFrequency+0x21c>)
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	1e5a      	subs	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	62da      	str	r2, [r3, #44]	; 0x2c
 8007216:	e0c0      	b.n	800739a <setFrequency+0x20e>


	}else if ((speed == PWM_SPEED_16MHz_10us )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2ba0      	cmp	r3, #160	; 0xa0
 800721c:	d022      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_20MHz_10us)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2bc8      	cmp	r3, #200	; 0xc8
 8007222:	d01f      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_30MHz_10us)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800722a:	d01b      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_40MHz_10us)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007232:	d017      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_50MHz_10us)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800723a:	d013      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_60MHz_10us)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8007242:	d00f      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_70MHz_10us)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800724a:	d00b      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_80MHz_10us)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007252:	d007      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_90MHz_10us)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800725a:	d003      	beq.n	8007264 <setFrequency+0xd8>
	  ||(speed == PWM_SPEED_100MHz_10us)){
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007262:	d114      	bne.n	800728e <setFrequency+0x102>

		periodo = ptrPwmHandler->config.periodo * 100 ;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	899b      	ldrh	r3, [r3, #12]
 8007268:	461a      	mov	r2, r3
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	4413      	add	r3, r2
 800726e:	461a      	mov	r2, r3
 8007270:	0091      	lsls	r1, r2, #2
 8007272:	461a      	mov	r2, r3
 8007274:	460b      	mov	r3, r1
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	b29a      	uxth	r2, r3
 800727c:	4b4a      	ldr	r3, [pc, #296]	; (80073a8 <setFrequency+0x21c>)
 800727e:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 8007280:	4b49      	ldr	r3, [pc, #292]	; (80073a8 <setFrequency+0x21c>)
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	62da      	str	r2, [r3, #44]	; 0x2c
 800728c:	e085      	b.n	800739a <setFrequency+0x20e>

	}else if ((speed == PWM_SPEED_16MHz_100us )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007294:	d029      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_20MHz_100us)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800729c:	d025      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_30MHz_100us)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d020      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_40MHz_100us)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80072ae:	d01c      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_50MHz_100us)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_60MHz_100us)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f241 7270 	movw	r2, #6000	; 0x1770
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d012      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_70MHz_100us)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00d      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_80MHz_100us)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80072d4:	d009      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_90MHz_100us)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f242 3228 	movw	r2, #9000	; 0x2328
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <setFrequency+0x15e>
		   || (speed == PWM_SPEED_100MHz_100us)){
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d10f      	bne.n	800730a <setFrequency+0x17e>

		periodo = ptrPwmHandler->config.periodo * 10   ;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	899b      	ldrh	r3, [r3, #12]
 80072ee:	461a      	mov	r2, r3
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	4b2b      	ldr	r3, [pc, #172]	; (80073a8 <setFrequency+0x21c>)
 80072fa:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 80072fc:	4b2a      	ldr	r3, [pc, #168]	; (80073a8 <setFrequency+0x21c>)
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	1e5a      	subs	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
 8007308:	e047      	b.n	800739a <setFrequency+0x20e>



	}else if ((speed == PWM_SPEED_16MHz_1ms)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007310:	d028      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_20MHz_1ms)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007318:	4293      	cmp	r3, r2
 800731a:	d023      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_30MHz_1ms)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f247 5230 	movw	r2, #30000	; 0x7530
 8007322:	4293      	cmp	r3, r2
 8007324:	d01e      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_40MHz_1ms)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f649 4240 	movw	r2, #40000	; 0x9c40
 800732c:	4293      	cmp	r3, r2
 800732e:	d019      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_50MHz_1ms)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007336:	4293      	cmp	r3, r2
 8007338:	d014      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_60MHz_1ms)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007340:	4293      	cmp	r3, r2
 8007342:	d00f      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_70MHz_1ms)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a19      	ldr	r2, [pc, #100]	; (80073ac <setFrequency+0x220>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00b      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_80MHz_1ms)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <setFrequency+0x224>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d007      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_90MHz_1ms)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a17      	ldr	r2, [pc, #92]	; (80073b4 <setFrequency+0x228>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <setFrequency+0x1d8>
		   || (speed == PWM_SPEED_100MHz_1ms)){
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <setFrequency+0x22c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10a      	bne.n	800737a <setFrequency+0x1ee>

		periodo = ptrPwmHandler->config.periodo;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	899a      	ldrh	r2, [r3, #12]
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <setFrequency+0x21c>)
 800736a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800736c:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <setFrequency+0x21c>)
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	1e5a      	subs	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
 8007378:	e00f      	b.n	800739a <setFrequency+0x20e>

	}else{
		periodo = ptrPwmHandler->config.periodo / 20;  //Se tiene el caso mas minimo posible, donde el contador cuenta cada 10 nanosegundos
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	899b      	ldrh	r3, [r3, #12]
 800737e:	4a0f      	ldr	r2, [pc, #60]	; (80073bc <setFrequency+0x230>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	b29a      	uxth	r2, r3
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <setFrequency+0x21c>)
 800738a:	801a      	strh	r2, [r3, #0]

		ptrPwmHandler->ptrTIMx->ARR = periodo - 1;
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <setFrequency+0x21c>)
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	1e5a      	subs	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	20013168 	.word	0x20013168
 80073ac:	00011170 	.word	0x00011170
 80073b0:	00013880 	.word	0x00013880
 80073b4:	00015f90 	.word	0x00015f90
 80073b8:	000186a0 	.word	0x000186a0
 80073bc:	cccccccd 	.word	0xcccccccd

080073c0 <setDuttyCycle>:
	// Llamamos a la fucnión que cambia la frecuencia
	setFrequency(ptrPwmHandler);
}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b08b      	sub	sp, #44	; 0x2c
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	791b      	ldrb	r3, [r3, #4]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	f200 80c3 	bhi.w	8007558 <setDuttyCycle+0x198>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <setDuttyCycle+0x18>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073e9 	.word	0x080073e9
 80073dc:	08007445 	.word	0x08007445
 80073e0:	080074a1 	.word	0x080074a1
 80073e4:	080074fd 	.word	0x080074fd
	case PWM_CHANNEL_1:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80073ee:	4b5d      	ldr	r3, [pc, #372]	; (8007564 <setDuttyCycle+0x1a4>)
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073fe:	ee17 0a90 	vmov	r0, s15
 8007402:	f7f9 f8b9 	bl	8000578 <__aeabi_f2d>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 -1;
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	4b55      	ldr	r3, [pc, #340]	; (8007568 <setDuttyCycle+0x1a8>)
 8007414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007418:	f7f9 fa30 	bl	800087c <__aeabi_ddiv>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4610      	mov	r0, r2
 8007422:	4619      	mov	r1, r3
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	4b50      	ldr	r3, [pc, #320]	; (800756c <setDuttyCycle+0x1ac>)
 800742a:	f7f8 ff45 	bl	80002b8 <__aeabi_dsub>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681c      	ldr	r4, [r3, #0]
 800743a:	f7f9 fbcd 	bl	8000bd8 <__aeabi_d2uiz>
 800743e:	4603      	mov	r3, r0
 8007440:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 8007442:	e08a      	b.n	800755a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_2:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	ed93 7a04 	vldr	s14, [r3, #16]
 800744a:	4b46      	ldr	r3, [pc, #280]	; (8007564 <setDuttyCycle+0x1a4>)
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	ee17 0a90 	vmov	r0, s15
 800745e:	f7f9 f88b 	bl	8000578 <__aeabi_f2d>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 -1;
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	4b3e      	ldr	r3, [pc, #248]	; (8007568 <setDuttyCycle+0x1a8>)
 8007470:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007474:	f7f9 fa02 	bl	800087c <__aeabi_ddiv>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4610      	mov	r0, r2
 800747e:	4619      	mov	r1, r3
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	4b39      	ldr	r3, [pc, #228]	; (800756c <setDuttyCycle+0x1ac>)
 8007486:	f7f8 ff17 	bl	80002b8 <__aeabi_dsub>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4610      	mov	r0, r2
 8007490:	4619      	mov	r1, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681c      	ldr	r4, [r3, #0]
 8007496:	f7f9 fb9f 	bl	8000bd8 <__aeabi_d2uiz>
 800749a:	4603      	mov	r3, r0
 800749c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800749e:	e05c      	b.n	800755a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_3:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	ed93 7a04 	vldr	s14, [r3, #16]
 80074a6:	4b2f      	ldr	r3, [pc, #188]	; (8007564 <setDuttyCycle+0x1a4>)
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	ee17 0a90 	vmov	r0, s15
 80074ba:	f7f9 f85d 	bl	8000578 <__aeabi_f2d>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 -1;
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	4b27      	ldr	r3, [pc, #156]	; (8007568 <setDuttyCycle+0x1a8>)
 80074cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80074d0:	f7f9 f9d4 	bl	800087c <__aeabi_ddiv>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	4610      	mov	r0, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	4b22      	ldr	r3, [pc, #136]	; (800756c <setDuttyCycle+0x1ac>)
 80074e2:	f7f8 fee9 	bl	80002b8 <__aeabi_dsub>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681c      	ldr	r4, [r3, #0]
 80074f2:	f7f9 fb71 	bl	8000bd8 <__aeabi_d2uiz>
 80074f6:	4603      	mov	r3, r0
 80074f8:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80074fa:	e02e      	b.n	800755a <setDuttyCycle+0x19a>
	}

	case PWM_CHANNEL_4:{
		double op = (ptrPwmHandler->config.duttyCicle) * periodo;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8007502:	4b18      	ldr	r3, [pc, #96]	; (8007564 <setDuttyCycle+0x1a4>)
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800750e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007512:	ee17 0a90 	vmov	r0, s15
 8007516:	f7f9 f82f 	bl	8000578 <__aeabi_f2d>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 -1;
 8007522:	f04f 0200 	mov.w	r2, #0
 8007526:	4b10      	ldr	r3, [pc, #64]	; (8007568 <setDuttyCycle+0x1a8>)
 8007528:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800752c:	f7f9 f9a6 	bl	800087c <__aeabi_ddiv>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	f04f 0200 	mov.w	r2, #0
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <setDuttyCycle+0x1ac>)
 800753e:	f7f8 febb 	bl	80002b8 <__aeabi_dsub>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681c      	ldr	r4, [r3, #0]
 800754e:	f7f9 fb43 	bl	8000bd8 <__aeabi_d2uiz>
 8007552:	4603      	mov	r3, r0
 8007554:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8007556:	e000      	b.n	800755a <setDuttyCycle+0x19a>
	}

	default:{
		break;
 8007558:	bf00      	nop
	}

	}// fin del switch-case

}
 800755a:	bf00      	nop
 800755c:	372c      	adds	r7, #44	; 0x2c
 800755e:	46bd      	mov	sp, r7
 8007560:	bd90      	pop	{r4, r7, pc}
 8007562:	bf00      	nop
 8007564:	20013168 	.word	0x20013168
 8007568:	40590000 	.word	0x40590000
 800756c:	3ff00000 	.word	0x3ff00000

08007570 <setDuttyCycleAfOpt>:


void setDuttyCycleAfOpt(PWM_Handler_t *ptrPwmHandler){
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b08b      	sub	sp, #44	; 0x2c
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	791b      	ldrb	r3, [r3, #4]
 800757c:	2b03      	cmp	r3, #3
 800757e:	f200 80d3 	bhi.w	8007728 <setDuttyCycleAfOpt+0x1b8>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <setDuttyCycleAfOpt+0x18>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	08007599 	.word	0x08007599
 800758c:	080075fd 	.word	0x080075fd
 8007590:	08007661 	.word	0x08007661
 8007594:	080076c5 	.word	0x080076c5
	case PWM_CHANNEL_1:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	edd3 7a04 	vldr	s15, [r3, #16]
 800759e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007734 <setDuttyCycleAfOpt+0x1c4>
 80075a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075a6:	4b64      	ldr	r3, [pc, #400]	; (8007738 <setDuttyCycleAfOpt+0x1c8>)
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	ee17 0a90 	vmov	r0, s15
 80075ba:	f7f8 ffdd 	bl	8000578 <__aeabi_f2d>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ptrPwmHandler->ptrTIMx->CCR1 = (op)/100 - 1 ;
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	4b5c      	ldr	r3, [pc, #368]	; (800773c <setDuttyCycleAfOpt+0x1cc>)
 80075cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075d0:	f7f9 f954 	bl	800087c <__aeabi_ddiv>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4610      	mov	r0, r2
 80075da:	4619      	mov	r1, r3
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	4b57      	ldr	r3, [pc, #348]	; (8007740 <setDuttyCycleAfOpt+0x1d0>)
 80075e2:	f7f8 fe69 	bl	80002b8 <__aeabi_dsub>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681c      	ldr	r4, [r3, #0]
 80075f2:	f7f9 faf1 	bl	8000bd8 <__aeabi_d2uiz>
 80075f6:	4603      	mov	r3, r0
 80075f8:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 80075fa:	e096      	b.n	800772a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_2:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8007602:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007734 <setDuttyCycleAfOpt+0x1c4>
 8007606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800760a:	4b4b      	ldr	r3, [pc, #300]	; (8007738 <setDuttyCycleAfOpt+0x1c8>)
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761a:	ee17 0a90 	vmov	r0, s15
 800761e:	f7f8 ffab 	bl	8000578 <__aeabi_f2d>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ptrPwmHandler->ptrTIMx->CCR2 = (op)/100 - 1;
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	4b43      	ldr	r3, [pc, #268]	; (800773c <setDuttyCycleAfOpt+0x1cc>)
 8007630:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007634:	f7f9 f922 	bl	800087c <__aeabi_ddiv>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4610      	mov	r0, r2
 800763e:	4619      	mov	r1, r3
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <setDuttyCycleAfOpt+0x1d0>)
 8007646:	f7f8 fe37 	bl	80002b8 <__aeabi_dsub>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681c      	ldr	r4, [r3, #0]
 8007656:	f7f9 fabf 	bl	8000bd8 <__aeabi_d2uiz>
 800765a:	4603      	mov	r3, r0
 800765c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800765e:	e064      	b.n	800772a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_3:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	edd3 7a04 	vldr	s15, [r3, #16]
 8007666:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007734 <setDuttyCycleAfOpt+0x1c4>
 800766a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800766e:	4b32      	ldr	r3, [pc, #200]	; (8007738 <setDuttyCycleAfOpt+0x1c8>)
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	ee17 0a90 	vmov	r0, s15
 8007682:	f7f8 ff79 	bl	8000578 <__aeabi_f2d>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ptrPwmHandler->ptrTIMx->CCR3 = (op)/100 - 1;
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	4b2a      	ldr	r3, [pc, #168]	; (800773c <setDuttyCycleAfOpt+0x1cc>)
 8007694:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007698:	f7f9 f8f0 	bl	800087c <__aeabi_ddiv>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4610      	mov	r0, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <setDuttyCycleAfOpt+0x1d0>)
 80076aa:	f7f8 fe05 	bl	80002b8 <__aeabi_dsub>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4610      	mov	r0, r2
 80076b4:	4619      	mov	r1, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681c      	ldr	r4, [r3, #0]
 80076ba:	f7f9 fa8d 	bl	8000bd8 <__aeabi_d2uiz>
 80076be:	4603      	mov	r3, r0
 80076c0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 80076c2:	e032      	b.n	800772a <setDuttyCycleAfOpt+0x1ba>
	}

	case PWM_CHANNEL_4:{
		double op = (100-ptrPwmHandler->config.duttyCicle) * periodo;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80076ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007734 <setDuttyCycleAfOpt+0x1c4>
 80076ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076d2:	4b19      	ldr	r3, [pc, #100]	; (8007738 <setDuttyCycleAfOpt+0x1c8>)
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	ee17 0a90 	vmov	r0, s15
 80076e6:	f7f8 ff47 	bl	8000578 <__aeabi_f2d>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ptrPwmHandler->ptrTIMx->CCR4 = (op)/100 - 1;
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <setDuttyCycleAfOpt+0x1cc>)
 80076f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80076fc:	f7f9 f8be 	bl	800087c <__aeabi_ddiv>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4610      	mov	r0, r2
 8007706:	4619      	mov	r1, r3
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <setDuttyCycleAfOpt+0x1d0>)
 800770e:	f7f8 fdd3 	bl	80002b8 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4610      	mov	r0, r2
 8007718:	4619      	mov	r1, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681c      	ldr	r4, [r3, #0]
 800771e:	f7f9 fa5b 	bl	8000bd8 <__aeabi_d2uiz>
 8007722:	4603      	mov	r3, r0
 8007724:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8007726:	e000      	b.n	800772a <setDuttyCycleAfOpt+0x1ba>
	}

	default:{
		break;
 8007728:	bf00      	nop
	}

	}// fin del switch-case


}
 800772a:	bf00      	nop
 800772c:	372c      	adds	r7, #44	; 0x2c
 800772e:	46bd      	mov	sp, r7
 8007730:	bd90      	pop	{r4, r7, pc}
 8007732:	bf00      	nop
 8007734:	42c80000 	.word	0x42c80000
 8007738:	20013168 	.word	0x20013168
 800773c:	40590000 	.word	0x40590000
 8007740:	3ff00000 	.word	0x3ff00000

08007744 <disableOutput>:
		}
		}
}


uint8_t disableOutput(PWM_Handler_t *ptrPwmHandler){
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

	switch (ptrPwmHandler->config.channel) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	791b      	ldrb	r3, [r3, #4]
 8007750:	2b03      	cmp	r3, #3
 8007752:	d82f      	bhi.n	80077b4 <disableOutput+0x70>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <disableOutput+0x18>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	0800776d 	.word	0x0800776d
 8007760:	0800777f 	.word	0x0800777f
 8007764:	08007791 	.word	0x08007791
 8007768:	080077a3 	.word	0x080077a3
		case PWM_CHANNEL_1: {
			// Activamos la salida del canal 1
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a1a      	ldr	r2, [r3, #32]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0201 	bic.w	r2, r2, #1
 800777a:	621a      	str	r2, [r3, #32]

			break;
 800777c:	e01b      	b.n	80077b6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_2: {
			// Activamos la salida del canal 2
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0210 	bic.w	r2, r2, #16
 800778c:	621a      	str	r2, [r3, #32]

			break;
 800778e:	e012      	b.n	80077b6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_3: {
			// Activamos la salida del canal 3
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6a1a      	ldr	r2, [r3, #32]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800779e:	621a      	str	r2, [r3, #32]

			break;
 80077a0:	e009      	b.n	80077b6 <disableOutput+0x72>
		}

		case PWM_CHANNEL_4: {
			// Activamos la salida del canal 4
			ptrPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6a1a      	ldr	r2, [r3, #32]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077b0:	621a      	str	r2, [r3, #32]

			break;
 80077b2:	e000      	b.n	80077b6 <disableOutput+0x72>
		}

		default: {
			break;
 80077b4:	bf00      	nop
		}
		}

	return RESET;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <RCC_enableMaxFrequencies>:
#include "RCCHunMHz.h"
#include "GPIOxDriver.h"



void RCC_enableMaxFrequencies(uint8_t frequency){
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	71fb      	strb	r3, [r7, #7]

	//Nos aseguramos que el PLL esta apagado
	RCC->CR &= ~(RCC_CR_PLLON);
 80077ce:	4b92      	ldr	r3, [pc, #584]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a91      	ldr	r2, [pc, #580]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80077d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077d8:	6013      	str	r3, [r2, #0]
	//Activamos el PWR parapoder activar el uso de 100MHz de velocidad
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80077da:	4b8f      	ldr	r3, [pc, #572]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80077dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
	//Le damos la opcion al PWR de permitir al MCU para correr una frecuencia de maximo 100MHz
	PWR->CR |= (0b11 << 14);
 80077e2:	4b8e      	ldr	r3, [pc, #568]	; (8007a1c <RCC_enableMaxFrequencies+0x258>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a8d      	ldr	r2, [pc, #564]	; (8007a1c <RCC_enableMaxFrequencies+0x258>)
 80077e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077ec:	6013      	str	r3, [r2, #0]


	//Antes de configurar el PLL referenciamos cual sera la fuente para el PLL, en nuestro caso sera el HSI sobre el mismo
	//registro
	RCC->PLLCFGR &= ~(0b1 << 22);
 80077ee:	4b8a      	ldr	r3, [pc, #552]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	4a89      	ldr	r2, [pc, #548]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80077f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80077f8:	6053      	str	r3, [r2, #4]

	// Aqui si dependiendo de la velocidad que queramos usaremos unos multiplicadores y divisores especificos.
	// La formula es freqSys = freq input * (pllN/(pllM*pllP))

	switch (frequency) {
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	f200 82fc 	bhi.w	8007dfa <RCC_enableMaxFrequencies+0x636>
 8007802:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <RCC_enableMaxFrequencies+0x44>)
 8007804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007808:	0800782d 	.word	0x0800782d
 800780c:	080078cf 	.word	0x080078cf
 8007810:	08007971 	.word	0x08007971
 8007814:	08007a25 	.word	0x08007a25
 8007818:	08007ac7 	.word	0x08007ac7
 800781c:	08007b69 	.word	0x08007b69
 8007820:	08007c15 	.word	0x08007c15
 8007824:	08007cb7 	.word	0x08007cb7
 8007828:	08007d59 	.word	0x08007d59
		case RCC_20MHz:{
			//freqsys = 16MHz * (120/(16*6)) =  20MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 800782c:	4b7a      	ldr	r3, [pc, #488]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4a79      	ldr	r2, [pc, #484]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007836:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007838:	4b77      	ldr	r3, [pc, #476]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	4a76      	ldr	r2, [pc, #472]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800783e:	f043 0310 	orr.w	r3, r3, #16
 8007842:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007844:	4b74      	ldr	r3, [pc, #464]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a73      	ldr	r2, [pc, #460]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800784a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8007854:	4b70      	ldr	r3, [pc, #448]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a6f      	ldr	r2, [pc, #444]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800785a:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800785e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007860:	4b6d      	ldr	r3, [pc, #436]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a6c      	ldr	r2, [pc, #432]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007866:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800786a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 800786c:	4b6a      	ldr	r3, [pc, #424]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4a69      	ldr	r2, [pc, #420]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007876:	6053      	str	r3, [r2, #4]


			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007878:	4b67      	ldr	r3, [pc, #412]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	4a66      	ldr	r2, [pc, #408]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800787e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007882:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007884:	4b64      	ldr	r3, [pc, #400]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	4a63      	ldr	r2, [pc, #396]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800788a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800788e:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8007890:	4b61      	ldr	r3, [pc, #388]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	4a60      	ldr	r2, [pc, #384]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789a:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800789c:	4b5e      	ldr	r3, [pc, #376]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a5d      	ldr	r2, [pc, #372]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078a6:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80078a8:	e000      	b.n	80078ac <RCC_enableMaxFrequencies+0xe8>
				__NOP();
 80078aa:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80078ac:	4b5a      	ldr	r3, [pc, #360]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f8      	beq.n	80078aa <RCC_enableMaxFrequencies+0xe6>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80078b8:	4b59      	ldr	r3, [pc, #356]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a58      	ldr	r2, [pc, #352]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 80078be:	f023 030f 	bic.w	r3, r3, #15
 80078c2:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 80078c4:	4b56      	ldr	r3, [pc, #344]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 80078c6:	4a56      	ldr	r2, [pc, #344]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6013      	str	r3, [r2, #0]

			break;
 80078cc:	e296      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}case RCC_30MHz:{
			//freqsys = 16MHz * (120/(16*4)) =  30MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 80078ce:	4b52      	ldr	r3, [pc, #328]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	4a51      	ldr	r2, [pc, #324]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80078d8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 80078da:	4b4f      	ldr	r3, [pc, #316]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	4a4e      	ldr	r2, [pc, #312]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078e0:	f043 0310 	orr.w	r3, r3, #16
 80078e4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 80078e6:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	4a4b      	ldr	r2, [pc, #300]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078ec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078f4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 80078f6:	4b48      	ldr	r3, [pc, #288]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4a47      	ldr	r2, [pc, #284]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80078fc:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8007900:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007902:	4b45      	ldr	r3, [pc, #276]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	4a44      	ldr	r2, [pc, #272]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007908:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800790c:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b01 << RCC_PLLCFGR_PLLP_Pos); // Division por 4 en el pllP
 800790e:	4b42      	ldr	r3, [pc, #264]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4a41      	ldr	r2, [pc, #260]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007918:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 800791a:	4b3f      	ldr	r3, [pc, #252]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	4a3e      	ldr	r2, [pc, #248]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007924:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007926:	4b3c      	ldr	r3, [pc, #240]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	4a3b      	ldr	r2, [pc, #236]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800792c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007930:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8007932:	4b39      	ldr	r3, [pc, #228]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	4a38      	ldr	r2, [pc, #224]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793c:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 800793e:	4b36      	ldr	r3, [pc, #216]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a35      	ldr	r2, [pc, #212]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007948:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800794a:	e000      	b.n	800794e <RCC_enableMaxFrequencies+0x18a>
				__NOP();
 800794c:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 800794e:	4b32      	ldr	r3, [pc, #200]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f8      	beq.n	800794c <RCC_enableMaxFrequencies+0x188>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 800795a:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a30      	ldr	r2, [pc, #192]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 8007960:	f023 030f 	bic.w	r3, r3, #15
 8007964:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b000 << FLASH_ACR_LATENCY_Pos);
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 8007968:	4a2d      	ldr	r2, [pc, #180]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6013      	str	r3, [r2, #0]

			break;
 800796e:	e245      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}case RCC_40MHz:{
			//freqsys = 16MHz * (240/(16*6)) =  40MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007970:	4b29      	ldr	r3, [pc, #164]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800797a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 800797c:	4b26      	ldr	r3, [pc, #152]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	4a25      	ldr	r2, [pc, #148]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 8007982:	f043 0310 	orr.w	r3, r3, #16
 8007986:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007988:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4a22      	ldr	r2, [pc, #136]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800798e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007996:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (240 << RCC_PLLCFGR_PLLN_Pos);
 8007998:	4b1f      	ldr	r3, [pc, #124]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4a1e      	ldr	r2, [pc, #120]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 800799e:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80079a2:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 80079a4:	4b1c      	ldr	r3, [pc, #112]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4a1b      	ldr	r2, [pc, #108]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80079ae:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b10 << RCC_PLLCFGR_PLLP_Pos); // Division por 6 en el pllP
 80079b0:	4b19      	ldr	r3, [pc, #100]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ba:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 80079bc:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079c6:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 80079c8:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	4a12      	ldr	r2, [pc, #72]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079d2:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	4a0f      	ldr	r2, [pc, #60]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079de:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 80079e0:	4b0d      	ldr	r3, [pc, #52]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a0c      	ldr	r2, [pc, #48]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079ea:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80079ec:	e000      	b.n	80079f0 <RCC_enableMaxFrequencies+0x22c>
				__NOP();
 80079ee:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <RCC_enableMaxFrequencies+0x254>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f8      	beq.n	80079ee <RCC_enableMaxFrequencies+0x22a>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 80079fc:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a07      	ldr	r2, [pc, #28]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 8007a02:	f023 030f 	bic.w	r3, r3, #15
 8007a06:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007a08:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a04      	ldr	r2, [pc, #16]	; (8007a20 <RCC_enableMaxFrequencies+0x25c>)
 8007a0e:	f043 0301 	orr.w	r3, r3, #1
 8007a12:	6013      	str	r3, [r2, #0]


			break;
 8007a14:	e1f2      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
 8007a16:	bf00      	nop
 8007a18:	40023800 	.word	0x40023800
 8007a1c:	40007000 	.word	0x40007000
 8007a20:	40023c00 	.word	0x40023c00
		}case RCC_50MHz:{
			//freqsys = 16MHz * (100/(16*2)) =  50MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007a24:	4b79      	ldr	r3, [pc, #484]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a78      	ldr	r2, [pc, #480]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a2e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007a30:	4b76      	ldr	r3, [pc, #472]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4a75      	ldr	r2, [pc, #468]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a36:	f043 0310 	orr.w	r3, r3, #16
 8007a3a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007a3c:	4b73      	ldr	r3, [pc, #460]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a72      	ldr	r2, [pc, #456]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8007a4c:	4b6f      	ldr	r3, [pc, #444]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	4a6e      	ldr	r2, [pc, #440]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a52:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8007a56:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007a58:	4b6c      	ldr	r3, [pc, #432]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	4a6b      	ldr	r2, [pc, #428]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007a62:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007a64:	4b69      	ldr	r3, [pc, #420]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a66:	4a69      	ldr	r2, [pc, #420]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR No se divide nada en este caso
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007a6c:	4b67      	ldr	r3, [pc, #412]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	4a66      	ldr	r2, [pc, #408]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a76:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007a78:	4b64      	ldr	r3, [pc, #400]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a63      	ldr	r2, [pc, #396]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a82:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 10); // Division del APB1 por 1
 8007a84:	4b61      	ldr	r3, [pc, #388]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4a60      	ldr	r2, [pc, #384]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a8e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007a90:	4b5e      	ldr	r3, [pc, #376]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a5d      	ldr	r2, [pc, #372]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a9a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007a9c:	e000      	b.n	8007aa0 <RCC_enableMaxFrequencies+0x2dc>
				__NOP();
 8007a9e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007aa0:	4b5a      	ldr	r3, [pc, #360]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0f8      	beq.n	8007a9e <RCC_enableMaxFrequencies+0x2da>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007aac:	4b58      	ldr	r3, [pc, #352]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a57      	ldr	r2, [pc, #348]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007ab2:	f023 030f 	bic.w	r3, r3, #15
 8007ab6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007ab8:	4b55      	ldr	r3, [pc, #340]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a54      	ldr	r2, [pc, #336]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	6013      	str	r3, [r2, #0]

			break;
 8007ac4:	e19a      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}case RCC_60MHz:{
			//freqsys = 16MHz * (120/(16*2)) =  60MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007ac6:	4b51      	ldr	r3, [pc, #324]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4a50      	ldr	r2, [pc, #320]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007acc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ad0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007ad2:	4b4e      	ldr	r3, [pc, #312]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	4a4d      	ldr	r2, [pc, #308]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007ad8:	f043 0310 	orr.w	r3, r3, #16
 8007adc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007ade:	4b4b      	ldr	r3, [pc, #300]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	4a4a      	ldr	r2, [pc, #296]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007ae4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aec:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (120 << RCC_PLLCFGR_PLLN_Pos);
 8007aee:	4b47      	ldr	r3, [pc, #284]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4a46      	ldr	r2, [pc, #280]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007af4:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 8007af8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007afa:	4b44      	ldr	r3, [pc, #272]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	4a43      	ldr	r2, [pc, #268]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b04:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007b06:	4b41      	ldr	r3, [pc, #260]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b08:	4a40      	ldr	r2, [pc, #256]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007b0e:	4b3f      	ldr	r3, [pc, #252]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	4a3e      	ldr	r2, [pc, #248]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b18:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007b1a:	4b3c      	ldr	r3, [pc, #240]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4a3b      	ldr	r2, [pc, #236]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b24:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007b26:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	4a38      	ldr	r2, [pc, #224]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b30:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007b32:	4b36      	ldr	r3, [pc, #216]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a35      	ldr	r2, [pc, #212]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b3c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007b3e:	e000      	b.n	8007b42 <RCC_enableMaxFrequencies+0x37e>
				__NOP();
 8007b40:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007b42:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f8      	beq.n	8007b40 <RCC_enableMaxFrequencies+0x37c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007b4e:	4b30      	ldr	r3, [pc, #192]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a2f      	ldr	r2, [pc, #188]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007b54:	f023 030f 	bic.w	r3, r3, #15
 8007b58:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b001 << FLASH_ACR_LATENCY_Pos);
 8007b5a:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a2c      	ldr	r2, [pc, #176]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	6013      	str	r3, [r2, #0]

			break;
 8007b66:	e149      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}case RCC_70MHz:{
			//freqsys = 16MHz * (140/(16*2)) =  70MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007b68:	4b28      	ldr	r3, [pc, #160]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4a27      	ldr	r2, [pc, #156]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b72:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007b74:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b7a:	f043 0310 	orr.w	r3, r3, #16
 8007b7e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007b80:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (140 << RCC_PLLCFGR_PLLN_Pos);
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	4a1d      	ldr	r2, [pc, #116]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b96:	f443 530c 	orr.w	r3, r3, #8960	; 0x2300
 8007b9a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007b9c:	4b1b      	ldr	r3, [pc, #108]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4a1a      	ldr	r2, [pc, #104]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007ba2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007ba6:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007ba8:	4b18      	ldr	r3, [pc, #96]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007baa:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bba:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007bbc:	4b13      	ldr	r3, [pc, #76]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4a12      	ldr	r2, [pc, #72]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bc6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bd2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007bd4:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a0c      	ldr	r2, [pc, #48]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bde:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007be0:	e000      	b.n	8007be4 <RCC_enableMaxFrequencies+0x420>
				__NOP();
 8007be2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007be4:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <RCC_enableMaxFrequencies+0x448>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f8      	beq.n	8007be2 <RCC_enableMaxFrequencies+0x41e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007bf0:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a06      	ldr	r2, [pc, #24]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007bf6:	f023 030f 	bic.w	r3, r3, #15
 8007bfa:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007bfc:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a03      	ldr	r2, [pc, #12]	; (8007c10 <RCC_enableMaxFrequencies+0x44c>)
 8007c02:	f043 0302 	orr.w	r3, r3, #2
 8007c06:	6013      	str	r3, [r2, #0]

			break;
 8007c08:	e0f8      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
 8007c0a:	bf00      	nop
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	40023c00 	.word	0x40023c00
		}case RCC_80MHz:{
			//freqsys = 16MHz * (160/(16*2)) =  80MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007c14:	4b83      	ldr	r3, [pc, #524]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a82      	ldr	r2, [pc, #520]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c1e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007c20:	4b80      	ldr	r3, [pc, #512]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4a7f      	ldr	r2, [pc, #508]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c26:	f043 0310 	orr.w	r3, r3, #16
 8007c2a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007c2c:	4b7d      	ldr	r3, [pc, #500]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	4a7c      	ldr	r2, [pc, #496]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (160 << RCC_PLLCFGR_PLLN_Pos);
 8007c3c:	4b79      	ldr	r3, [pc, #484]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4a78      	ldr	r2, [pc, #480]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c42:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007c46:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007c48:	4b76      	ldr	r3, [pc, #472]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	4a75      	ldr	r2, [pc, #468]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007c52:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007c54:	4b73      	ldr	r3, [pc, #460]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c56:	4a73      	ldr	r2, [pc, #460]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007c5c:	4b71      	ldr	r3, [pc, #452]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4a70      	ldr	r2, [pc, #448]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c66:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007c68:	4b6e      	ldr	r3, [pc, #440]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	4a6d      	ldr	r2, [pc, #436]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c72:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007c74:	4b6b      	ldr	r3, [pc, #428]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a6a      	ldr	r2, [pc, #424]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c7e:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007c80:	4b68      	ldr	r3, [pc, #416]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a67      	ldr	r2, [pc, #412]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c8a:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007c8c:	e000      	b.n	8007c90 <RCC_enableMaxFrequencies+0x4cc>
				__NOP();
 8007c8e:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007c90:	4b64      	ldr	r3, [pc, #400]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f8      	beq.n	8007c8e <RCC_enableMaxFrequencies+0x4ca>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007c9c:	4b62      	ldr	r3, [pc, #392]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a61      	ldr	r2, [pc, #388]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007ca2:	f023 030f 	bic.w	r3, r3, #15
 8007ca6:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007ca8:	4b5f      	ldr	r3, [pc, #380]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a5e      	ldr	r2, [pc, #376]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007cae:	f043 0302 	orr.w	r3, r3, #2
 8007cb2:	6013      	str	r3, [r2, #0]

			break;
 8007cb4:	e0a2      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}case RCC_90MHz:{
			//freqsys = 16MHz * (180/(16*2)) =  90MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007cb6:	4b5b      	ldr	r3, [pc, #364]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4a5a      	ldr	r2, [pc, #360]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cc0:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
 8007cc2:	4b58      	ldr	r3, [pc, #352]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4a57      	ldr	r2, [pc, #348]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cc8:	f043 0310 	orr.w	r3, r3, #16
 8007ccc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007cce:	4b55      	ldr	r3, [pc, #340]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	4a54      	ldr	r2, [pc, #336]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cd4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cdc:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (180 << RCC_PLLCFGR_PLLN_Pos);
 8007cde:	4b51      	ldr	r3, [pc, #324]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	4a50      	ldr	r2, [pc, #320]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007ce4:	f443 5334 	orr.w	r3, r3, #11520	; 0x2d00
 8007ce8:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007cea:	4b4e      	ldr	r3, [pc, #312]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	4a4d      	ldr	r2, [pc, #308]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cf0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007cf4:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007cf6:	4b4b      	ldr	r3, [pc, #300]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cf8:	4a4a      	ldr	r2, [pc, #296]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007cfe:	4b49      	ldr	r3, [pc, #292]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	4a48      	ldr	r2, [pc, #288]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007d0a:	4b46      	ldr	r3, [pc, #280]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	4a45      	ldr	r2, [pc, #276]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d14:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007d16:	4b43      	ldr	r3, [pc, #268]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	4a42      	ldr	r2, [pc, #264]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d20:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007d22:	4b40      	ldr	r3, [pc, #256]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d2c:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007d2e:	e000      	b.n	8007d32 <RCC_enableMaxFrequencies+0x56e>
				__NOP();
 8007d30:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007d32:	4b3c      	ldr	r3, [pc, #240]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f8      	beq.n	8007d30 <RCC_enableMaxFrequencies+0x56c>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007d3e:	4b3a      	ldr	r3, [pc, #232]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a39      	ldr	r2, [pc, #228]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007d44:	f023 030f 	bic.w	r3, r3, #15
 8007d48:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b010 << FLASH_ACR_LATENCY_Pos);
 8007d4a:	4b37      	ldr	r3, [pc, #220]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a36      	ldr	r2, [pc, #216]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007d50:	f043 0302 	orr.w	r3, r3, #2
 8007d54:	6013      	str	r3, [r2, #0]

			break;
 8007d56:	e051      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}case RCC_100MHz:{
			//freqsys = 16MHz * (100/(8*2)) =  100MHz
			RCC->PLLCFGR &= ~(0xFF << RCC_PLLCFGR_PLLM_Pos);
 8007d58:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4a31      	ldr	r2, [pc, #196]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d62:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLM_Pos);
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a2e      	ldr	r2, [pc, #184]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d6a:	f043 0308 	orr.w	r3, r3, #8
 8007d6e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos);
 8007d70:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4a2b      	ldr	r2, [pc, #172]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d7e:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (100 << RCC_PLLCFGR_PLLN_Pos);
 8007d80:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4a27      	ldr	r2, [pc, #156]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d86:	f443 53c8 	orr.w	r3, r3, #6400	; 0x1900
 8007d8a:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR &= ~(0b11 << RCC_PLLCFGR_PLLP_Pos);
 8007d8c:	4b25      	ldr	r3, [pc, #148]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4a24      	ldr	r2, [pc, #144]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d96:	6053      	str	r3, [r2, #4]
			RCC->PLLCFGR |= (0b00 << RCC_PLLCFGR_PLLP_Pos); // Division por 2 en el pllP
 8007d98:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d9a:	4a22      	ldr	r2, [pc, #136]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	6053      	str	r3, [r2, #4]

			//Seleccionamos los preescalers adecuados para los AHB y APBx en el registro RCC_CFGR
			RCC->CFGR &= ~(0b1000 << 4); // Division del AHB por 1
 8007da0:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	4a1f      	ldr	r2, [pc, #124]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007daa:	6093      	str	r3, [r2, #8]
			RCC->CFGR &= ~(0b100 << 13); // division del APB2 por 1
 8007dac:	4b1d      	ldr	r3, [pc, #116]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007db2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007db6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100 << 10); // Division del APB1 por 2
 8007db8:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dc2:	6093      	str	r3, [r2, #8]

			//Configurado el PLL para salida de 100MHz entonces ya podemos activar el PLL
			RCC->CR |= RCC_CR_PLLON;
 8007dc4:	4b17      	ldr	r3, [pc, #92]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a16      	ldr	r2, [pc, #88]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dce:	6013      	str	r3, [r2, #0]
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007dd0:	e000      	b.n	8007dd4 <RCC_enableMaxFrequencies+0x610>
				__NOP();
 8007dd2:	bf00      	nop
			while (!(RCC->CR & RCC_CR_PLLRDY)){
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f8      	beq.n	8007dd2 <RCC_enableMaxFrequencies+0x60e>
			}

			//Antes de configurar el PLL del RCC, debemos cambiar la velocidad de lectura de la memoria flash
			FLASH->ACR &= ~(0xF << FLASH_ACR_LATENCY_Pos);
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007de6:	f023 030f 	bic.w	r3, r3, #15
 8007dea:	6013      	str	r3, [r2, #0]
			FLASH->ACR |= (0b011 << FLASH_ACR_LATENCY_Pos);
 8007dec:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0d      	ldr	r2, [pc, #52]	; (8007e28 <RCC_enableMaxFrequencies+0x664>)
 8007df2:	f043 0303 	orr.w	r3, r3, #3
 8007df6:	6013      	str	r3, [r2, #0]

			break;
 8007df8:	e000      	b.n	8007dfc <RCC_enableMaxFrequencies+0x638>
		}
		default:{
			break;
 8007dfa:	bf00      	nop
		}
	}


	// Se configura como system clock al PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8007dfc:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	4a08      	ldr	r2, [pc, #32]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007e02:	f043 0302 	orr.w	r3, r3, #2
 8007e06:	6093      	str	r3, [r2, #8]

	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8007e08:	e000      	b.n	8007e0c <RCC_enableMaxFrequencies+0x648>
		__NOP();
 8007e0a:	bf00      	nop
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <RCC_enableMaxFrequencies+0x660>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f8      	beq.n	8007e0a <RCC_enableMaxFrequencies+0x646>
	}

	SystemCoreClockUpdate();
 8007e18:	f000 fd3e 	bl	8008898 <SystemCoreClockUpdate>

}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40023c00 	.word	0x40023c00

08007e2c <__NVIC_EnableIRQ>:
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	db0b      	blt.n	8007e56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	f003 021f 	and.w	r2, r3, #31
 8007e44:	4907      	ldr	r1, [pc, #28]	; (8007e64 <__NVIC_EnableIRQ+0x38>)
 8007e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	e000e100 	.word	0xe000e100

08007e68 <__NVIC_SetPriority>:
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db0a      	blt.n	8007e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	490c      	ldr	r1, [pc, #48]	; (8007eb4 <__NVIC_SetPriority+0x4c>)
 8007e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e86:	0112      	lsls	r2, r2, #4
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e90:	e00a      	b.n	8007ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	4908      	ldr	r1, [pc, #32]	; (8007eb8 <__NVIC_SetPriority+0x50>)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	0112      	lsls	r2, r2, #4
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	761a      	strb	r2, [r3, #24]
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	e000e100 	.word	0xe000e100
 8007eb8:	e000ed00 	.word	0xe000ed00

08007ebc <USART_Config>:
/**
 * Configurando el puerto Serial...
 * Recordar que siempre se debe comenzar con activar la señal de reloj
 * del periferico que se está utilizando.
 */
void USART_Config(USART_Handler_t *ptrUsartHandler){
 8007ebc:	b590      	push	{r4, r7, lr}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ec4:	b672      	cpsid	i
}
 8007ec6:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las posibles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a8f      	ldr	r2, [pc, #572]	; (800810c <USART_Config+0x250>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d106      	bne.n	8007ee0 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8007ed2:	4b8f      	ldr	r3, [pc, #572]	; (8008110 <USART_Config+0x254>)
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	4a8e      	ldr	r2, [pc, #568]	; (8008110 <USART_Config+0x254>)
 8007ed8:	f043 0310 	orr.w	r3, r3, #16
 8007edc:	6453      	str	r3, [r2, #68]	; 0x44
 8007ede:	e018      	b.n	8007f12 <USART_Config+0x56>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a8b      	ldr	r2, [pc, #556]	; (8008114 <USART_Config+0x258>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d106      	bne.n	8007ef8 <USART_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8007eea:	4b89      	ldr	r3, [pc, #548]	; (8008110 <USART_Config+0x254>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	4a88      	ldr	r2, [pc, #544]	; (8008110 <USART_Config+0x254>)
 8007ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ef6:	e00c      	b.n	8007f12 <USART_Config+0x56>
	}
	
    /* 1.2 Configuramos el USART6 */
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a86      	ldr	r2, [pc, #536]	; (8008118 <USART_Config+0x25c>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d106      	bne.n	8007f10 <USART_Config+0x54>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8007f02:	4b83      	ldr	r3, [pc, #524]	; (8008110 <USART_Config+0x254>)
 8007f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f06:	4a82      	ldr	r2, [pc, #520]	; (8008110 <USART_Config+0x254>)
 8007f08:	f043 0320 	orr.w	r3, r3, #32
 8007f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f0e:	e000      	b.n	8007f12 <USART_Config+0x56>
	}
	else{
		__NOP();
 8007f10:	bf00      	nop
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2200      	movs	r2, #0
 8007f18:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7a5b      	ldrb	r3, [r3, #9]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d025      	beq.n	8007f76 <USART_Config+0xba>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7a5b      	ldrb	r3, [r3, #9]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d110      	bne.n	8007f54 <USART_Config+0x98>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f40:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f50:	60da      	str	r2, [r3, #12]
 8007f52:	e018      	b.n	8007f86 <USART_Config+0xca>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f62:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PEIE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f72:	60da      	str	r2, [r3, #12]
 8007f74:	e007      	b.n	8007f86 <USART_Config+0xca>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE ;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f84:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
	if(ptrUsartHandler->USART_Config.USART_datasize == USART_DATASIZE_8BIT){
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7a1b      	ldrb	r3, [r3, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d108      	bne.n	8007fa0 <USART_Config+0xe4>
			// Son 8 bits, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f9c:	60da      	str	r2, [r3, #12]
 8007f9e:	e007      	b.n	8007fb0 <USART_Config+0xf4>

	}else{
			// Si es "else" significa que se trata de un tamaño de dato de 9 bits, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fae:	60da      	str	r2, [r3, #12]
	}

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	7a9b      	ldrb	r3, [r3, #10]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d82f      	bhi.n	8008018 <USART_Config+0x15c>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <USART_Config+0x104>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd1 	.word	0x08007fd1
 8007fc4:	08007fe3 	.word	0x08007fe3
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	08008007 	.word	0x08008007
		case USART_STOPBIT_1: {
			// Debemos cargar el valor 0b00 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007fde:	611a      	str	r2, [r3, #16]
			break;
 8007fe0:	e023      	b.n	800802a <USART_Config+0x16e>
		}
		case USART_STOPBIT_0_5: {
			// Debemos cargar el valor 0b01 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff0:	611a      	str	r2, [r3, #16]
			break;
 8007ff2:	e01a      	b.n	800802a <USART_Config+0x16e>
		}
		case USART_STOPBIT_2: {
			// Debemoscargar el valor 0b10 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP & (~USART_CR2_STOP_0);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008002:	611a      	str	r2, [r3, #16]
			break;
 8008004:	e011      	b.n	800802a <USART_Config+0x16e>
		}
		case USART_STOPBIT_1_5: {
			// Debemoscargar el valor 0b11 en los dos bits de STOP
			ptrUsartHandler->ptrUSARTx->CR2 |= USART_CR2_STOP;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8008014:	611a      	str	r2, [r3, #16]
			break;
 8008016:	e008      	b.n	800802a <USART_Config+0x16e>
		}
		default: {
			// En el caso por defecto seleccionamos 1 bit de parada
			ptrUsartHandler->ptrUSARTx->CR2 &= ~USART_CR2_STOP;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691a      	ldr	r2, [r3, #16]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008026:	611a      	str	r2, [r3, #16]
			break;
 8008028:	bf00      	nop
		}
	}

		// 2.5 Configuracion del Baudrate (SFR USART_BRR)
		ptrUsartHandler->ptrUSARTx->BRR = brrCalculus (ptrUsartHandler, ptrUsartHandler->USART_Config.USART_MCUvelocity);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681c      	ldr	r4, [r3, #0]
 8008032:	4611      	mov	r1, r2
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f8cb 	bl	80081d0 <brrCalculus>
 800803a:	4603      	mov	r3, r0
 800803c:	60a3      	str	r3, [r4, #8]
//
//
//	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	799b      	ldrb	r3, [r3, #6]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d82e      	bhi.n	80080a4 <USART_Config+0x1e8>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <USART_Config+0x190>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	0800805d 	.word	0x0800805d
 8008050:	0800806f 	.word	0x0800806f
 8008054:	08008081 	.word	0x08008081
 8008058:	08008093 	.word	0x08008093
		case USART_MODE_TX:
		{
			// Activamos la parte del sistema encargada de enviar
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0208 	orr.w	r2, r2, #8
 800806a:	60da      	str	r2, [r3, #12]
			break;
 800806c:	e023      	b.n	80080b6 <USART_Config+0x1fa>
		}
		case USART_MODE_RX:
		{
			// Activamos la parte del sistema encargada de recibir
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0204 	orr.w	r2, r2, #4
 800807c:	60da      	str	r2, [r3, #12]
			break;
 800807e:	e01a      	b.n	80080b6 <USART_Config+0x1fa>
		}
		case USART_MODE_RXTX:
		{
			// Activamos ambas partes, tanto transmision como recepcion
			ptrUsartHandler->ptrUSARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 020c 	orr.w	r2, r2, #12
 800808e:	60da      	str	r2, [r3, #12]
			break;
 8008090:	e011      	b.n	80080b6 <USART_Config+0x1fa>
		}
		case USART_MODE_DISABLE:
		{
			// Desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 020c 	bic.w	r2, r2, #12
 80080a0:	60da      	str	r2, [r3, #12]
			break;
 80080a2:	e008      	b.n	80080b6 <USART_Config+0x1fa>
		}

		default:
		{
			// Actuando por defecto, desactivamos ambos canales
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_TE | USART_CR1_RE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 020c 	bic.w	r2, r2, #12
 80080b2:	60da      	str	r2, [r3, #12]
			break;
 80080b4:	bf00      	nop
		}
	}

	// 2.7 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	799b      	ldrb	r3, [r3, #6]
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d008      	beq.n	80080d0 <USART_Config+0x214>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080cc:	60da      	str	r2, [r3, #12]
 80080ce:	e007      	b.n	80080e0 <USART_Config+0x224>
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080de:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de recepcion RXNEIE
	if (ptrUsartHandler->USART_Config.USART_enableInRx == USART_INTERRUPT_RX_ENABLE){
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	795b      	ldrb	r3, [r3, #5]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d12d      	bne.n	8008144 <USART_Config+0x288>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0220 	orr.w	r2, r2, #32
 80080f6:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a03      	ldr	r2, [pc, #12]	; (800810c <USART_Config+0x250>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10c      	bne.n	800811c <USART_Config+0x260>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8008102:	2025      	movs	r0, #37	; 0x25
 8008104:	f7ff fe92 	bl	8007e2c <__NVIC_EnableIRQ>
 8008108:	e024      	b.n	8008154 <USART_Config+0x298>
 800810a:	bf00      	nop
 800810c:	40011000 	.word	0x40011000
 8008110:	40023800 	.word	0x40023800
 8008114:	40004400 	.word	0x40004400
 8008118:	40011400 	.word	0x40011400
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a28      	ldr	r2, [pc, #160]	; (80081c4 <USART_Config+0x308>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d103      	bne.n	800812e <USART_Config+0x272>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8008126:	2026      	movs	r0, #38	; 0x26
 8008128:	f7ff fe80 	bl	8007e2c <__NVIC_EnableIRQ>
 800812c:	e012      	b.n	8008154 <USART_Config+0x298>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a25      	ldr	r2, [pc, #148]	; (80081c8 <USART_Config+0x30c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d103      	bne.n	8008140 <USART_Config+0x284>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 8008138:	2047      	movs	r0, #71	; 0x47
 800813a:	f7ff fe77 	bl	8007e2c <__NVIC_EnableIRQ>
 800813e:	e009      	b.n	8008154 <USART_Config+0x298>
		}
		else{
				__NOP();
 8008140:	bf00      	nop
 8008142:	e007      	b.n	8008154 <USART_Config+0x298>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0220 	bic.w	r2, r2, #32
 8008152:	60da      	str	r2, [r3, #12]
	}

	//Habilitamos las interrupciones de  Transmisión
	if (ptrUsartHandler->USART_Config.USART_enableInTx == USART_INTERRUPT_TX_ENABLE){
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	791b      	ldrb	r3, [r3, #4]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d124      	bne.n	80081a6 <USART_Config+0x2ea>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TXEIE;;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800816a:	60da      	str	r2, [r3, #12]

		if(ptrUsartHandler->ptrUSARTx == USART1){
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a16      	ldr	r2, [pc, #88]	; (80081cc <USART_Config+0x310>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d103      	bne.n	800817e <USART_Config+0x2c2>
					// Activando en NVIC para la interrupción del USART1
					__NVIC_EnableIRQ(USART1_IRQn);
 8008176:	2025      	movs	r0, #37	; 0x25
 8008178:	f7ff fe58 	bl	8007e2c <__NVIC_EnableIRQ>
 800817c:	e01b      	b.n	80081b6 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2){
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <USART_Config+0x308>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d103      	bne.n	8008190 <USART_Config+0x2d4>
					// Activando en NVIC para la interrupción del USART2
					__NVIC_EnableIRQ(USART2_IRQn);
 8008188:	2026      	movs	r0, #38	; 0x26
 800818a:	f7ff fe4f 	bl	8007e2c <__NVIC_EnableIRQ>
 800818e:	e012      	b.n	80081b6 <USART_Config+0x2fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6){
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a0c      	ldr	r2, [pc, #48]	; (80081c8 <USART_Config+0x30c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d103      	bne.n	80081a2 <USART_Config+0x2e6>
				// Activando en NVIC para la interrupción del USART6
					__NVIC_EnableIRQ(USART6_IRQn);
 800819a:	2047      	movs	r0, #71	; 0x47
 800819c:	f7ff fe46 	bl	8007e2c <__NVIC_EnableIRQ>
 80081a0:	e009      	b.n	80081b6 <USART_Config+0x2fa>
		}
		else{
				__NOP();
 80081a2:	bf00      	nop
 80081a4:	e007      	b.n	80081b6 <USART_Config+0x2fa>
		}
	}else{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TXEIE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80081b6:	b662      	cpsie	i
}
 80081b8:	bf00      	nop
	}

	__enable_irq();
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd90      	pop	{r4, r7, pc}
 80081c2:	bf00      	nop
 80081c4:	40004400 	.word	0x40004400
 80081c8:	40011400 	.word	0x40011400
 80081cc:	40011000 	.word	0x40011000

080081d0 <brrCalculus>:



uint32_t brrCalculus (USART_Handler_t *ptrUsartHandler, uint32_t MCUvelocity){
 80081d0:	b5b0      	push	{r4, r5, r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]


	switch(ptrUsartHandler->USART_Config.USART_baudrate){
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	79db      	ldrb	r3, [r3, #7]
 80081de:	2b03      	cmp	r3, #3
 80081e0:	f200 8217 	bhi.w	8008612 <brrCalculus+0x442>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <brrCalculus+0x1c>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	080082f7 	.word	0x080082f7
 80081f4:	08008411 	.word	0x08008411
 80081f8:	08008519 	.word	0x08008519

	case USART_BAUDRATE_9600:{

		 value = 1/(16.0 * 9600);
 80081fc:	4980      	ldr	r1, [pc, #512]	; (8008400 <brrCalculus+0x230>)
 80081fe:	a37c      	add	r3, pc, #496	; (adr r3, 80083f0 <brrCalculus+0x220>)
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	ee17 0a90 	vmov	r0, s15
 8008216:	f7f8 f9af 	bl	8000578 <__aeabi_f2d>
 800821a:	4b79      	ldr	r3, [pc, #484]	; (8008400 <brrCalculus+0x230>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 fa02 	bl	8000628 <__aeabi_dmul>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4975      	ldr	r1, [pc, #468]	; (8008400 <brrCalculus+0x230>)
 800822a:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800822e:	4b74      	ldr	r3, [pc, #464]	; (8008400 <brrCalculus+0x230>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	4610      	mov	r0, r2
 8008236:	4619      	mov	r1, r3
 8008238:	f7f8 fca6 	bl	8000b88 <__aeabi_d2iz>
 800823c:	4603      	mov	r3, r0
 800823e:	b29a      	uxth	r2, r3
 8008240:	4b70      	ldr	r3, [pc, #448]	; (8008404 <brrCalculus+0x234>)
 8008242:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008244:	4b6e      	ldr	r3, [pc, #440]	; (8008400 <brrCalculus+0x230>)
 8008246:	e9d3 4500 	ldrd	r4, r5, [r3]
 800824a:	4b6d      	ldr	r3, [pc, #436]	; (8008400 <brrCalculus+0x230>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	4610      	mov	r0, r2
 8008252:	4619      	mov	r1, r3
 8008254:	f7f8 fc98 	bl	8000b88 <__aeabi_d2iz>
 8008258:	4603      	mov	r3, r0
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f97a 	bl	8000554 <__aeabi_i2d>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	f7f8 f826 	bl	80002b8 <__aeabi_dsub>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4610      	mov	r0, r2
 8008272:	4619      	mov	r1, r3
 8008274:	f7f8 fcd0 	bl	8000c18 <__aeabi_d2f>
 8008278:	4603      	mov	r3, r0
 800827a:	4a63      	ldr	r2, [pc, #396]	; (8008408 <brrCalculus+0x238>)
 800827c:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800827e:	4b62      	ldr	r3, [pc, #392]	; (8008408 <brrCalculus+0x238>)
 8008280:	edd3 7a00 	vldr	s15, [r3]
 8008284:	2004      	movs	r0, #4
 8008286:	eeb0 0a67 	vmov.f32	s0, s15
 800828a:	f000 fa6d 	bl	8008768 <roundToNDecimals>
 800828e:	eef0 7a40 	vmov.f32	s15, s0
 8008292:	4b5d      	ldr	r3, [pc, #372]	; (8008408 <brrCalculus+0x238>)
 8008294:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008298:	4b5b      	ldr	r3, [pc, #364]	; (8008408 <brrCalculus+0x238>)
 800829a:	edd3 7a00 	vldr	s15, [r3]
 800829e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80082a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082a6:	4b58      	ldr	r3, [pc, #352]	; (8008408 <brrCalculus+0x238>)
 80082a8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80082ac:	4b56      	ldr	r3, [pc, #344]	; (8008408 <brrCalculus+0x238>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7f8 f961 	bl	8000578 <__aeabi_f2d>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	ec43 2b10 	vmov	d0, r2, r3
 80082be:	f001 fc3f 	bl	8009b40 <round>
 80082c2:	ec53 2b10 	vmov	r2, r3, d0
 80082c6:	4610      	mov	r0, r2
 80082c8:	4619      	mov	r1, r3
 80082ca:	f7f8 fca5 	bl	8000c18 <__aeabi_d2f>
 80082ce:	4603      	mov	r3, r0
 80082d0:	4a4d      	ldr	r2, [pc, #308]	; (8008408 <brrCalculus+0x238>)
 80082d2:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80082d4:	4b4b      	ldr	r3, [pc, #300]	; (8008404 <brrCalculus+0x234>)
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	b29a      	uxth	r2, r3
 80082dc:	4b4a      	ldr	r3, [pc, #296]	; (8008408 <brrCalculus+0x238>)
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082e6:	ee17 3a90 	vmov	r3, s15
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	4313      	orrs	r3, r2
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	4b46      	ldr	r3, [pc, #280]	; (800840c <brrCalculus+0x23c>)
 80082f2:	801a      	strh	r2, [r3, #0]


		break;
 80082f4:	e18f      	b.n	8008616 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_19200:{

		 value = 1/(16.0 * 19200);
 80082f6:	4942      	ldr	r1, [pc, #264]	; (8008400 <brrCalculus+0x230>)
 80082f8:	a33f      	add	r3, pc, #252	; (adr r3, 80083f8 <brrCalculus+0x228>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	ee07 3a90 	vmov	s15, r3
 8008308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830c:	ee17 0a90 	vmov	r0, s15
 8008310:	f7f8 f932 	bl	8000578 <__aeabi_f2d>
 8008314:	4b3a      	ldr	r3, [pc, #232]	; (8008400 <brrCalculus+0x230>)
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	f7f8 f985 	bl	8000628 <__aeabi_dmul>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4937      	ldr	r1, [pc, #220]	; (8008400 <brrCalculus+0x230>)
 8008324:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8008328:	4b35      	ldr	r3, [pc, #212]	; (8008400 <brrCalculus+0x230>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	4610      	mov	r0, r2
 8008330:	4619      	mov	r1, r3
 8008332:	f7f8 fc29 	bl	8000b88 <__aeabi_d2iz>
 8008336:	4603      	mov	r3, r0
 8008338:	b29a      	uxth	r2, r3
 800833a:	4b32      	ldr	r3, [pc, #200]	; (8008404 <brrCalculus+0x234>)
 800833c:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 800833e:	4b30      	ldr	r3, [pc, #192]	; (8008400 <brrCalculus+0x230>)
 8008340:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008344:	4b2e      	ldr	r3, [pc, #184]	; (8008400 <brrCalculus+0x230>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	4610      	mov	r0, r2
 800834c:	4619      	mov	r1, r3
 800834e:	f7f8 fc1b 	bl	8000b88 <__aeabi_d2iz>
 8008352:	4603      	mov	r3, r0
 8008354:	4618      	mov	r0, r3
 8008356:	f7f8 f8fd 	bl	8000554 <__aeabi_i2d>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f7 ffa9 	bl	80002b8 <__aeabi_dsub>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	f7f8 fc53 	bl	8000c18 <__aeabi_d2f>
 8008372:	4603      	mov	r3, r0
 8008374:	4a24      	ldr	r2, [pc, #144]	; (8008408 <brrCalculus+0x238>)
 8008376:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008378:	4b23      	ldr	r3, [pc, #140]	; (8008408 <brrCalculus+0x238>)
 800837a:	edd3 7a00 	vldr	s15, [r3]
 800837e:	2004      	movs	r0, #4
 8008380:	eeb0 0a67 	vmov.f32	s0, s15
 8008384:	f000 f9f0 	bl	8008768 <roundToNDecimals>
 8008388:	eef0 7a40 	vmov.f32	s15, s0
 800838c:	4b1e      	ldr	r3, [pc, #120]	; (8008408 <brrCalculus+0x238>)
 800838e:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 8008392:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <brrCalculus+0x238>)
 8008394:	edd3 7a00 	vldr	s15, [r3]
 8008398:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800839c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083a0:	4b19      	ldr	r3, [pc, #100]	; (8008408 <brrCalculus+0x238>)
 80083a2:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80083a6:	4b18      	ldr	r3, [pc, #96]	; (8008408 <brrCalculus+0x238>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7f8 f8e4 	bl	8000578 <__aeabi_f2d>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	ec43 2b10 	vmov	d0, r2, r3
 80083b8:	f001 fbc2 	bl	8009b40 <round>
 80083bc:	ec53 2b10 	vmov	r2, r3, d0
 80083c0:	4610      	mov	r0, r2
 80083c2:	4619      	mov	r1, r3
 80083c4:	f7f8 fc28 	bl	8000c18 <__aeabi_d2f>
 80083c8:	4603      	mov	r3, r0
 80083ca:	4a0f      	ldr	r2, [pc, #60]	; (8008408 <brrCalculus+0x238>)
 80083cc:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80083ce:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <brrCalculus+0x234>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <brrCalculus+0x238>)
 80083d8:	edd3 7a00 	vldr	s15, [r3]
 80083dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e0:	ee17 3a90 	vmov	r3, s15
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	4313      	orrs	r3, r2
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	4b08      	ldr	r3, [pc, #32]	; (800840c <brrCalculus+0x23c>)
 80083ec:	801a      	strh	r2, [r3, #0]


		break;
 80083ee:	e112      	b.n	8008616 <brrCalculus+0x446>
 80083f0:	b4e81b4f 	.word	0xb4e81b4f
 80083f4:	3edb4e81 	.word	0x3edb4e81
 80083f8:	b4e81b4f 	.word	0xb4e81b4f
 80083fc:	3ecb4e81 	.word	0x3ecb4e81
 8008400:	20013178 	.word	0x20013178
 8008404:	2001316c 	.word	0x2001316c
 8008408:	20013170 	.word	0x20013170
 800840c:	2001316a 	.word	0x2001316a
	}
	case USART_BAUDRATE_28800:{

		 value = 1/(16.0 * 28800);
 8008410:	4989      	ldr	r1, [pc, #548]	; (8008638 <brrCalculus+0x468>)
 8008412:	a385      	add	r3, pc, #532	; (adr r3, 8008628 <brrCalculus+0x458>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	ee17 0a90 	vmov	r0, s15
 800842a:	f7f8 f8a5 	bl	8000578 <__aeabi_f2d>
 800842e:	4b82      	ldr	r3, [pc, #520]	; (8008638 <brrCalculus+0x468>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f8 f8f8 	bl	8000628 <__aeabi_dmul>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	497e      	ldr	r1, [pc, #504]	; (8008638 <brrCalculus+0x468>)
 800843e:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 8008442:	4b7d      	ldr	r3, [pc, #500]	; (8008638 <brrCalculus+0x468>)
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	4610      	mov	r0, r2
 800844a:	4619      	mov	r1, r3
 800844c:	f7f8 fb9c 	bl	8000b88 <__aeabi_d2iz>
 8008450:	4603      	mov	r3, r0
 8008452:	b29a      	uxth	r2, r3
 8008454:	4b79      	ldr	r3, [pc, #484]	; (800863c <brrCalculus+0x46c>)
 8008456:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008458:	4b77      	ldr	r3, [pc, #476]	; (8008638 <brrCalculus+0x468>)
 800845a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800845e:	4b76      	ldr	r3, [pc, #472]	; (8008638 <brrCalculus+0x468>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	4610      	mov	r0, r2
 8008466:	4619      	mov	r1, r3
 8008468:	f7f8 fb8e 	bl	8000b88 <__aeabi_d2iz>
 800846c:	4603      	mov	r3, r0
 800846e:	4618      	mov	r0, r3
 8008470:	f7f8 f870 	bl	8000554 <__aeabi_i2d>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f7 ff1c 	bl	80002b8 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4610      	mov	r0, r2
 8008486:	4619      	mov	r1, r3
 8008488:	f7f8 fbc6 	bl	8000c18 <__aeabi_d2f>
 800848c:	4603      	mov	r3, r0
 800848e:	4a6c      	ldr	r2, [pc, #432]	; (8008640 <brrCalculus+0x470>)
 8008490:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 8008492:	4b6b      	ldr	r3, [pc, #428]	; (8008640 <brrCalculus+0x470>)
 8008494:	edd3 7a00 	vldr	s15, [r3]
 8008498:	2004      	movs	r0, #4
 800849a:	eeb0 0a67 	vmov.f32	s0, s15
 800849e:	f000 f963 	bl	8008768 <roundToNDecimals>
 80084a2:	eef0 7a40 	vmov.f32	s15, s0
 80084a6:	4b66      	ldr	r3, [pc, #408]	; (8008640 <brrCalculus+0x470>)
 80084a8:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80084ac:	4b64      	ldr	r3, [pc, #400]	; (8008640 <brrCalculus+0x470>)
 80084ae:	edd3 7a00 	vldr	s15, [r3]
 80084b2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80084b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084ba:	4b61      	ldr	r3, [pc, #388]	; (8008640 <brrCalculus+0x470>)
 80084bc:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac) + 1;
 80084c0:	4b5f      	ldr	r3, [pc, #380]	; (8008640 <brrCalculus+0x470>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7f8 f857 	bl	8000578 <__aeabi_f2d>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	ec43 2b10 	vmov	d0, r2, r3
 80084d2:	f001 fb35 	bl	8009b40 <round>
 80084d6:	ec51 0b10 	vmov	r0, r1, d0
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	4b59      	ldr	r3, [pc, #356]	; (8008644 <brrCalculus+0x474>)
 80084e0:	f7f7 feec 	bl	80002bc <__adddf3>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4610      	mov	r0, r2
 80084ea:	4619      	mov	r1, r3
 80084ec:	f7f8 fb94 	bl	8000c18 <__aeabi_d2f>
 80084f0:	4603      	mov	r3, r0
 80084f2:	4a53      	ldr	r2, [pc, #332]	; (8008640 <brrCalculus+0x470>)
 80084f4:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80084f6:	4b51      	ldr	r3, [pc, #324]	; (800863c <brrCalculus+0x46c>)
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	4b50      	ldr	r3, [pc, #320]	; (8008640 <brrCalculus+0x470>)
 8008500:	edd3 7a00 	vldr	s15, [r3]
 8008504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008508:	ee17 3a90 	vmov	r3, s15
 800850c:	b29b      	uxth	r3, r3
 800850e:	4313      	orrs	r3, r2
 8008510:	b29a      	uxth	r2, r3
 8008512:	4b4d      	ldr	r3, [pc, #308]	; (8008648 <brrCalculus+0x478>)
 8008514:	801a      	strh	r2, [r3, #0]


		break;
 8008516:	e07e      	b.n	8008616 <brrCalculus+0x446>
	}
	case USART_BAUDRATE_115200:{

		 value = 1/(16.0 * 115200);
 8008518:	4947      	ldr	r1, [pc, #284]	; (8008638 <brrCalculus+0x468>)
 800851a:	a345      	add	r3, pc, #276	; (adr r3, 8008630 <brrCalculus+0x460>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	e9c1 2300 	strd	r2, r3, [r1]

		 value = ((float) MCUvelocity ) *value;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852e:	ee17 0a90 	vmov	r0, s15
 8008532:	f7f8 f821 	bl	8000578 <__aeabi_f2d>
 8008536:	4b40      	ldr	r3, [pc, #256]	; (8008638 <brrCalculus+0x468>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f7f8 f874 	bl	8000628 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	493c      	ldr	r1, [pc, #240]	; (8008638 <brrCalculus+0x468>)
 8008546:	e9c1 2300 	strd	r2, r3, [r1]

		 mant = (int) value;
 800854a:	4b3b      	ldr	r3, [pc, #236]	; (8008638 <brrCalculus+0x468>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	4610      	mov	r0, r2
 8008552:	4619      	mov	r1, r3
 8008554:	f7f8 fb18 	bl	8000b88 <__aeabi_d2iz>
 8008558:	4603      	mov	r3, r0
 800855a:	b29a      	uxth	r2, r3
 800855c:	4b37      	ldr	r3, [pc, #220]	; (800863c <brrCalculus+0x46c>)
 800855e:	801a      	strh	r2, [r3, #0]

		 DIVfrac = value -(int) value;
 8008560:	4b35      	ldr	r3, [pc, #212]	; (8008638 <brrCalculus+0x468>)
 8008562:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008566:	4b34      	ldr	r3, [pc, #208]	; (8008638 <brrCalculus+0x468>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	4610      	mov	r0, r2
 800856e:	4619      	mov	r1, r3
 8008570:	f7f8 fb0a 	bl	8000b88 <__aeabi_d2iz>
 8008574:	4603      	mov	r3, r0
 8008576:	4618      	mov	r0, r3
 8008578:	f7f7 ffec 	bl	8000554 <__aeabi_i2d>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4620      	mov	r0, r4
 8008582:	4629      	mov	r1, r5
 8008584:	f7f7 fe98 	bl	80002b8 <__aeabi_dsub>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4610      	mov	r0, r2
 800858e:	4619      	mov	r1, r3
 8008590:	f7f8 fb42 	bl	8000c18 <__aeabi_d2f>
 8008594:	4603      	mov	r3, r0
 8008596:	4a2a      	ldr	r2, [pc, #168]	; (8008640 <brrCalculus+0x470>)
 8008598:	6013      	str	r3, [r2, #0]

		 DIVfrac = roundToNDecimals(DIVfrac, 4 );
 800859a:	4b29      	ldr	r3, [pc, #164]	; (8008640 <brrCalculus+0x470>)
 800859c:	edd3 7a00 	vldr	s15, [r3]
 80085a0:	2004      	movs	r0, #4
 80085a2:	eeb0 0a67 	vmov.f32	s0, s15
 80085a6:	f000 f8df 	bl	8008768 <roundToNDecimals>
 80085aa:	eef0 7a40 	vmov.f32	s15, s0
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <brrCalculus+0x470>)
 80085b0:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = 16*DIVfrac;
 80085b4:	4b22      	ldr	r3, [pc, #136]	; (8008640 <brrCalculus+0x470>)
 80085b6:	edd3 7a00 	vldr	s15, [r3]
 80085ba:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80085be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085c2:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <brrCalculus+0x470>)
 80085c4:	edc3 7a00 	vstr	s15, [r3]

		 DIVfrac = round(DIVfrac);
 80085c8:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <brrCalculus+0x470>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7f7 ffd3 	bl	8000578 <__aeabi_f2d>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	ec43 2b10 	vmov	d0, r2, r3
 80085da:	f001 fab1 	bl	8009b40 <round>
 80085de:	ec53 2b10 	vmov	r2, r3, d0
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	f7f8 fb17 	bl	8000c18 <__aeabi_d2f>
 80085ea:	4603      	mov	r3, r0
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <brrCalculus+0x470>)
 80085ee:	6013      	str	r3, [r2, #0]

		 mant_DIVfrac = (mant << 4) | ((unsigned int) DIVfrac);
 80085f0:	4b12      	ldr	r3, [pc, #72]	; (800863c <brrCalculus+0x46c>)
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	4b11      	ldr	r3, [pc, #68]	; (8008640 <brrCalculus+0x470>)
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008602:	ee17 3a90 	vmov	r3, s15
 8008606:	b29b      	uxth	r3, r3
 8008608:	4313      	orrs	r3, r2
 800860a:	b29a      	uxth	r2, r3
 800860c:	4b0e      	ldr	r3, [pc, #56]	; (8008648 <brrCalculus+0x478>)
 800860e:	801a      	strh	r2, [r3, #0]


		break;
 8008610:	e001      	b.n	8008616 <brrCalculus+0x446>
	}
	default:{

		__NOP();
 8008612:	bf00      	nop
		break;
 8008614:	bf00      	nop
	}

	}


	return mant_DIVfrac;
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <brrCalculus+0x478>)
 8008618:	881b      	ldrh	r3, [r3, #0]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bdb0      	pop	{r4, r5, r7, pc}
 8008622:	bf00      	nop
 8008624:	f3af 8000 	nop.w
 8008628:	789abcdf 	.word	0x789abcdf
 800862c:	3ec23456 	.word	0x3ec23456
 8008630:	789abcdf 	.word	0x789abcdf
 8008634:	3ea23456 	.word	0x3ea23456
 8008638:	20013178 	.word	0x20013178
 800863c:	2001316c 	.word	0x2001316c
 8008640:	20013170 	.word	0x20013170
 8008644:	3ff00000 	.word	0x3ff00000
 8008648:	2001316a 	.word	0x2001316a

0800864c <writeChar>:


/* funcion para escribir un solo char */
void writeChar(USART_Handler_t *ptrUsartHandler, int dataToSend ){
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 8008656:	e000      	b.n	800865a <writeChar+0xe>
		__NOP();
 8008658:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0f7      	beq.n	8008658 <writeChar+0xc>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	605a      	str	r2, [r3, #4]

}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <writeMsg>:


void writeMsg(USART_Handler_t *ptrUsartHandler, const char* msgToSend){
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]

	while(*msgToSend != '\0'){
 8008686:	e008      	b.n	800869a <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff ffdc 	bl	800864c <writeChar>
		msgToSend ++ ;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	3301      	adds	r3, #1
 8008698:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f2      	bne.n	8008688 <writeMsg+0xc>
	}
}
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <usart1Rx_Callback>:

__attribute__((weak))	void usart2Rx_Callback(void){
	__NOP();
}
__attribute__((weak))	void usart1Rx_Callback(void){
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
	__NOP();
 80086b0:	bf00      	nop
}
 80086b2:	bf00      	nop
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <usart6Rx_Callback>:
__attribute__((weak))	void usart6Rx_Callback(void){
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
	__NOP();
 80086c0:	bf00      	nop
}
 80086c2:	bf00      	nop
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <getRxData>:

uint8_t auxRxData = 0;

uint8_t getRxData(void){
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
	return auxRxData;
 80086d0:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <getRxData+0x14>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20013180 	.word	0x20013180

080086e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0

	if(USART2->SR & USART_SR_RXNE){
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <USART2_IRQHandler+0x24>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <USART2_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART2->DR;
 80086f4:	4b04      	ldr	r3, [pc, #16]	; (8008708 <USART2_IRQHandler+0x24>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	4b04      	ldr	r3, [pc, #16]	; (800870c <USART2_IRQHandler+0x28>)
 80086fc:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 80086fe:	f7f8 fff1 	bl	80016e4 <usart2Rx_Callback>
	}

}
 8008702:	bf00      	nop
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40004400 	.word	0x40004400
 800870c:	20013180 	.word	0x20013180

08008710 <USART1_IRQHandler>:
//	}
//	if(USART2->SR & USART_SR_TXE){
//		usart2Rx_Callback();
//	}

void USART1_IRQHandler(void){
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0


	if(USART1->SR & USART_SR_RXNE){
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <USART1_IRQHandler+0x24>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d006      	beq.n	800872e <USART1_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART1->DR;
 8008720:	4b04      	ldr	r3, [pc, #16]	; (8008734 <USART1_IRQHandler+0x24>)
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	4b04      	ldr	r3, [pc, #16]	; (8008738 <USART1_IRQHandler+0x28>)
 8008728:	701a      	strb	r2, [r3, #0]
		usart1Rx_Callback();
 800872a:	f7ff ffbf 	bl	80086ac <usart1Rx_Callback>
	}
}
 800872e:	bf00      	nop
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40011000 	.word	0x40011000
 8008738:	20013180 	.word	0x20013180

0800873c <USART6_IRQHandler>:
//		usart1Rx_Callback();
//	}



void USART6_IRQHandler(void){
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0

	if(USART6->SR & USART_SR_RXNE){
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <USART6_IRQHandler+0x24>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <USART6_IRQHandler+0x1e>
		auxRxData = (uint8_t) USART6->DR;
 800874c:	4b04      	ldr	r3, [pc, #16]	; (8008760 <USART6_IRQHandler+0x24>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	4b04      	ldr	r3, [pc, #16]	; (8008764 <USART6_IRQHandler+0x28>)
 8008754:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 8008756:	f7ff ffb1 	bl	80086bc <usart6Rx_Callback>
	}

}
 800875a:	bf00      	nop
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40011400 	.word	0x40011400
 8008764:	20013180 	.word	0x20013180

08008768 <roundToNDecimals>:


float roundToNDecimals(float number, int n) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008772:	6038      	str	r0, [r7, #0]

    double factor = pow(10, n);
 8008774:	6838      	ldr	r0, [r7, #0]
 8008776:	f7f7 feed 	bl	8000554 <__aeabi_i2d>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	ec43 2b11 	vmov	d1, r2, r3
 8008782:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8008800 <roundToNDecimals+0x98>
 8008786:	f001 fa7d 	bl	8009c84 <pow>
 800878a:	ed87 0b02 	vstr	d0, [r7, #8]

    number *= factor;
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7f7 fef2 	bl	8000578 <__aeabi_f2d>
 8008794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008798:	f7f7 ff46 	bl	8000628 <__aeabi_dmul>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4610      	mov	r0, r2
 80087a2:	4619      	mov	r1, r3
 80087a4:	f7f8 fa38 	bl	8000c18 <__aeabi_d2f>
 80087a8:	4603      	mov	r3, r0
 80087aa:	607b      	str	r3, [r7, #4]

    number = round(number);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7f7 fee3 	bl	8000578 <__aeabi_f2d>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	ec43 2b10 	vmov	d0, r2, r3
 80087ba:	f001 f9c1 	bl	8009b40 <round>
 80087be:	ec53 2b10 	vmov	r2, r3, d0
 80087c2:	4610      	mov	r0, r2
 80087c4:	4619      	mov	r1, r3
 80087c6:	f7f8 fa27 	bl	8000c18 <__aeabi_d2f>
 80087ca:	4603      	mov	r3, r0
 80087cc:	607b      	str	r3, [r7, #4]

    number /= factor;
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7f7 fed2 	bl	8000578 <__aeabi_f2d>
 80087d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087d8:	f7f8 f850 	bl	800087c <__aeabi_ddiv>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	f7f8 fa18 	bl	8000c18 <__aeabi_d2f>
 80087e8:	4603      	mov	r3, r0
 80087ea:	607b      	str	r3, [r7, #4]

    return number;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	ee07 3a90 	vmov	s15, r3
}
 80087f2:	eeb0 0a67 	vmov.f32	s0, s15
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	f3af 8000 	nop.w
 8008800:	00000000 	.word	0x00000000
 8008804:	40240000 	.word	0x40240000

08008808 <usart_Set_Priority>:

void usart_Set_Priority(USART_Handler_t *ptrUsartHandler, uint8_t newPriority){
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("cpsid i" : : : "memory");
 8008814:	b672      	cpsid	i
}
 8008816:	bf00      	nop

	__disable_irq();


	if(ptrUsartHandler->ptrUSARTx == USART1){
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a12      	ldr	r2, [pc, #72]	; (8008868 <usart_Set_Priority+0x60>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d105      	bne.n	800882e <usart_Set_Priority+0x26>
				// Seteamos la prioridad en NVIC para la interrupción del USART1
		__NVIC_SetPriority(USART1_IRQn, newPriority);
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	4619      	mov	r1, r3
 8008826:	2025      	movs	r0, #37	; 0x25
 8008828:	f7ff fb1e 	bl	8007e68 <__NVIC_SetPriority>
 800882c:	e016      	b.n	800885c <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART2){
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a0e      	ldr	r2, [pc, #56]	; (800886c <usart_Set_Priority+0x64>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d105      	bne.n	8008844 <usart_Set_Priority+0x3c>
				// Seteamos la prioridad en NVIC para la interrupción del USART2
		__NVIC_SetPriority(USART2_IRQn, newPriority);
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	4619      	mov	r1, r3
 800883c:	2026      	movs	r0, #38	; 0x26
 800883e:	f7ff fb13 	bl	8007e68 <__NVIC_SetPriority>
 8008842:	e00b      	b.n	800885c <usart_Set_Priority+0x54>
	}
	else if(ptrUsartHandler->ptrUSARTx == USART6){
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a09      	ldr	r2, [pc, #36]	; (8008870 <usart_Set_Priority+0x68>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d105      	bne.n	800885a <usart_Set_Priority+0x52>
			// Seteamos la prioridad en NVIC para la interrupción del USART6
		__NVIC_SetPriority(USART6_IRQn, newPriority);
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	4619      	mov	r1, r3
 8008852:	2047      	movs	r0, #71	; 0x47
 8008854:	f7ff fb08 	bl	8007e68 <__NVIC_SetPriority>
 8008858:	e000      	b.n	800885c <usart_Set_Priority+0x54>
	}
	else{
			__NOP();
 800885a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800885c:	b662      	cpsie	i
}
 800885e:	bf00      	nop



	__enable_irq();

}
 8008860:	bf00      	nop
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	40011000 	.word	0x40011000
 800886c:	40004400 	.word	0x40004400
 8008870:	40011400 	.word	0x40011400

08008874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <SystemInit+0x20>)
 800887a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887e:	4a05      	ldr	r2, [pc, #20]	; (8008894 <SystemInit+0x20>)
 8008880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008888:	bf00      	nop
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	e000ed00 	.word	0xe000ed00

08008898 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800889e:	2300      	movs	r3, #0
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	2302      	movs	r3, #2
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	2300      	movs	r3, #0
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	2302      	movs	r3, #2
 80088b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80088b2:	4b34      	ldr	r3, [pc, #208]	; (8008984 <SystemCoreClockUpdate+0xec>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f003 030c 	and.w	r3, r3, #12
 80088ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d011      	beq.n	80088e6 <SystemCoreClockUpdate+0x4e>
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d844      	bhi.n	8008952 <SystemCoreClockUpdate+0xba>
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <SystemCoreClockUpdate+0x3e>
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d004      	beq.n	80088de <SystemCoreClockUpdate+0x46>
 80088d4:	e03d      	b.n	8008952 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80088d6:	4b2c      	ldr	r3, [pc, #176]	; (8008988 <SystemCoreClockUpdate+0xf0>)
 80088d8:	4a2c      	ldr	r2, [pc, #176]	; (800898c <SystemCoreClockUpdate+0xf4>)
 80088da:	601a      	str	r2, [r3, #0]
      break;
 80088dc:	e03d      	b.n	800895a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80088de:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <SystemCoreClockUpdate+0xf0>)
 80088e0:	4a2b      	ldr	r2, [pc, #172]	; (8008990 <SystemCoreClockUpdate+0xf8>)
 80088e2:	601a      	str	r2, [r3, #0]
      break;
 80088e4:	e039      	b.n	800895a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80088e6:	4b27      	ldr	r3, [pc, #156]	; (8008984 <SystemCoreClockUpdate+0xec>)
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	0d9b      	lsrs	r3, r3, #22
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <SystemCoreClockUpdate+0xec>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00c      	beq.n	800891c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008902:	4a23      	ldr	r2, [pc, #140]	; (8008990 <SystemCoreClockUpdate+0xf8>)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	fbb2 f3f3 	udiv	r3, r2, r3
 800890a:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <SystemCoreClockUpdate+0xec>)
 800890c:	6852      	ldr	r2, [r2, #4]
 800890e:	0992      	lsrs	r2, r2, #6
 8008910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008914:	fb02 f303 	mul.w	r3, r2, r3
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e00b      	b.n	8008934 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800891c:	4a1b      	ldr	r2, [pc, #108]	; (800898c <SystemCoreClockUpdate+0xf4>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	fbb2 f3f3 	udiv	r3, r2, r3
 8008924:	4a17      	ldr	r2, [pc, #92]	; (8008984 <SystemCoreClockUpdate+0xec>)
 8008926:	6852      	ldr	r2, [r2, #4]
 8008928:	0992      	lsrs	r2, r2, #6
 800892a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008934:	4b13      	ldr	r3, [pc, #76]	; (8008984 <SystemCoreClockUpdate+0xec>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	0c1b      	lsrs	r3, r3, #16
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	3301      	adds	r3, #1
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	fbb2 f3f3 	udiv	r3, r2, r3
 800894c:	4a0e      	ldr	r2, [pc, #56]	; (8008988 <SystemCoreClockUpdate+0xf0>)
 800894e:	6013      	str	r3, [r2, #0]
      break;
 8008950:	e003      	b.n	800895a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <SystemCoreClockUpdate+0xf0>)
 8008954:	4a0d      	ldr	r2, [pc, #52]	; (800898c <SystemCoreClockUpdate+0xf4>)
 8008956:	601a      	str	r2, [r3, #0]
      break;
 8008958:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800895a:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <SystemCoreClockUpdate+0xec>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	091b      	lsrs	r3, r3, #4
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	4a0b      	ldr	r2, [pc, #44]	; (8008994 <SystemCoreClockUpdate+0xfc>)
 8008966:	5cd3      	ldrb	r3, [r2, r3]
 8008968:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800896a:	4b07      	ldr	r3, [pc, #28]	; (8008988 <SystemCoreClockUpdate+0xf0>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	4a04      	ldr	r2, [pc, #16]	; (8008988 <SystemCoreClockUpdate+0xf0>)
 8008976:	6013      	str	r3, [r2, #0]
}
 8008978:	bf00      	nop
 800897a:	371c      	adds	r7, #28
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	40023800 	.word	0x40023800
 8008988:	20000024 	.word	0x20000024
 800898c:	00f42400 	.word	0x00f42400
 8008990:	017d7840 	.word	0x017d7840
 8008994:	0800c08c 	.word	0x0800c08c

08008998 <i2c_config>:
 * para lo cual se necesita el modulo GPIO y los pines configurados
 * en el modo ALternate Function.
 * Ademas, estos pines deben ser configurados como salidas open-drain
 * y con la resistencias en modo pull-up.
 */
void i2c_config(I2C_Handler_t *ptrHandlerI2C){
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

	/* 1 Activamos la señal de reloj para el modulo I2C seleccionado*/
	if(ptrHandlerI2C->ptrI2Cx == I2C1){
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a89      	ldr	r2, [pc, #548]	; (8008bcc <i2c_config+0x234>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d112      	bne.n	80089d0 <i2c_config+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80089aa:	4b89      	ldr	r3, [pc, #548]	; (8008bd0 <i2c_config+0x238>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	4a88      	ldr	r2, [pc, #544]	; (8008bd0 <i2c_config+0x238>)
 80089b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089b4:	6413      	str	r3, [r2, #64]	; 0x40
		RCC ->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 80089b6:	4b86      	ldr	r3, [pc, #536]	; (8008bd0 <i2c_config+0x238>)
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	4a85      	ldr	r2, [pc, #532]	; (8008bd0 <i2c_config+0x238>)
 80089bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089c0:	6213      	str	r3, [r2, #32]
		RCC ->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 80089c2:	4b83      	ldr	r3, [pc, #524]	; (8008bd0 <i2c_config+0x238>)
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	4a82      	ldr	r2, [pc, #520]	; (8008bd0 <i2c_config+0x238>)
 80089c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089cc:	6213      	str	r3, [r2, #32]
 80089ce:	e016      	b.n	80089fe <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C2){
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a7f      	ldr	r2, [pc, #508]	; (8008bd4 <i2c_config+0x23c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d106      	bne.n	80089e8 <i2c_config+0x50>
		RCC -> APB1ENR  |= RCC_APB1ENR_I2C2EN;
 80089da:	4b7d      	ldr	r3, [pc, #500]	; (8008bd0 <i2c_config+0x238>)
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	4a7c      	ldr	r2, [pc, #496]	; (8008bd0 <i2c_config+0x238>)
 80089e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089e4:	6413      	str	r3, [r2, #64]	; 0x40
 80089e6:	e00a      	b.n	80089fe <i2c_config+0x66>
	}

	else if(ptrHandlerI2C->ptrI2Cx == I2C3){
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a7a      	ldr	r2, [pc, #488]	; (8008bd8 <i2c_config+0x240>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d105      	bne.n	80089fe <i2c_config+0x66>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 80089f2:	4b77      	ldr	r3, [pc, #476]	; (8008bd0 <i2c_config+0x238>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	4a76      	ldr	r2, [pc, #472]	; (8008bd0 <i2c_config+0x238>)
 80089f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089fc:	6413      	str	r3, [r2, #64]	; 0x40
	}

	/* 0. desactivamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~I2C_CR1_PE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]


	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008a0e:	e000      	b.n	8008a12 <i2c_config+0x7a>
		__NOP();
 8008a10:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f7      	bne.n	8008a10 <i2c_config+0x78>
	}

	/* 2. Reiniciamos el periferico, de forma que inicia en un estado conocido */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_SWRST;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a2e:	601a      	str	r2, [r3, #0]

	//Esperamos un rato
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e003      	b.n	8008a3e <i2c_config+0xa6>
		__NOP();
 8008a36:	bf00      	nop
	for(uint32_t i = 0 ; i < 16 * pow(10,6); i++){
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4a66      	ldr	r2, [pc, #408]	; (8008bdc <i2c_config+0x244>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d3f7      	bcc.n	8008a36 <i2c_config+0x9e>
	}


	ptrHandlerI2C->ptrI2Cx->CR1 &= ~ I2C_CR1_SWRST;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a54:	601a      	str	r2, [r3, #0]

	/*3. Indicamos cual es la velocidad del reloj principal, que es la señal utilizada
	 * por el periferico para generar la señal de reloj para el bus I2C */


	ptrHandlerI2C->ptrI2Cx->CR2 &= ~(0b111111 << I2C_CR2_FREQ_Pos);	// Borramos la configuracion previa.
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008a64:	605a      	str	r2, [r3, #4]

	//Preguntamos que velocidad de reloj de tiene actualmente
	if (ptrHandlerI2C->I2C_Config.clkSpeed ==  MAIN_CLOCK_16_MHz_FOR_I2C ){
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	79db      	ldrb	r3, [r3, #7]
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d108      	bne.n	8008a80 <i2c_config+0xe8>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_16_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f042 0210 	orr.w	r2, r2, #16
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e00b      	b.n	8008a98 <i2c_config+0x100>

	}else if (ptrHandlerI2C->I2C_Config.clkSpeed == MAIN_CLOCK_50_MHz_FOR_I2C){
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	79db      	ldrb	r3, [r3, #7]
 8008a84:	2b32      	cmp	r3, #50	; 0x32
 8008a86:	d107      	bne.n	8008a98 <i2c_config+0x100>

		ptrHandlerI2C->ptrI2Cx->CR2 |= (MAIN_CLOCK_50_MHz_FOR_I2C << I2C_CR2_FREQ_Pos);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8008a96:	605a      	str	r2, [r3, #4]
	 * En esta configuracion se incluye tambien la velocidad del reloj
	 * y el tiempo máximo para el cambio de la señal (T-Rise).
	 * Todo comienza con los dos registros en 0
	 */
	//Nos aseguramos de que el periferico está desactivado
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(0b1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]

	ptrHandlerI2C->ptrI2Cx->CCR = 0;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2200      	movs	r2, #0
 8008aae:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->ptrI2Cx->TRISE = 0;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	621a      	str	r2, [r3, #32]

	if(ptrHandlerI2C->I2C_Config.modeI2C == I2C_MODE_SM){
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	795b      	ldrb	r3, [r3, #5]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d15c      	bne.n	8008b7a <i2c_config+0x1e2>

		//Estamos en modo "standar" (SM Mode)
		// Seleccionamos el modo estandar
		ptrHandlerI2C->ptrI2Cx->CCR &= ~ (I2C_CCR_FS);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69da      	ldr	r2, [r3, #28]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ace:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	79db      	ldrb	r3, [r3, #7]
 8008ad4:	2b32      	cmp	r3, #50	; 0x32
 8008ad6:	d03f      	beq.n	8008b58 <i2c_config+0x1c0>
 8008ad8:	2b32      	cmp	r3, #50	; 0x32
 8008ada:	f300 80b4 	bgt.w	8008c46 <i2c_config+0x2ae>
 8008ade:	2b14      	cmp	r3, #20
 8008ae0:	d029      	beq.n	8008b36 <i2c_config+0x19e>
 8008ae2:	2b14      	cmp	r3, #20
 8008ae4:	f300 80af 	bgt.w	8008c46 <i2c_config+0x2ae>
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d002      	beq.n	8008af2 <i2c_config+0x15a>
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d011      	beq.n	8008b14 <i2c_config+0x17c>


				break;
			}default:{

				break;
 8008af0:	e0a9      	b.n	8008c46 <i2c_config+0x2ae>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_4MHz << I2C_CCR_CCR_Pos);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69da      	ldr	r2, [r3, #28]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 0214 	orr.w	r2, r2, #20
 8008b00:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_4MHz;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a1a      	ldr	r2, [r3, #32]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 0205 	orr.w	r2, r2, #5
 8008b10:	621a      	str	r2, [r3, #32]
				break;
 8008b12:	e09b      	b.n	8008c4c <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_16MHz << I2C_CCR_CCR_Pos);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69da      	ldr	r2, [r3, #28]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008b22:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_16MHz;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6a1a      	ldr	r2, [r3, #32]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f042 0211 	orr.w	r2, r2, #17
 8008b32:	621a      	str	r2, [r3, #32]
				break;
 8008b34:	e08a      	b.n	8008c4c <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_20MHz << I2C_CCR_CCR_Pos);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8008b44:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_20MHz;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6a1a      	ldr	r2, [r3, #32]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0215 	orr.w	r2, r2, #21
 8008b54:	621a      	str	r2, [r3, #32]
				break;
 8008b56:	e079      	b.n	8008c4c <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_SM_SPEED_100KHz_50MHz << I2C_CCR_CCR_Pos);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69da      	ldr	r2, [r3, #28]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 02fa 	orr.w	r2, r2, #250	; 0xfa
 8008b66:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_SM_50MHz;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6a1a      	ldr	r2, [r3, #32]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8008b76:	621a      	str	r2, [r3, #32]
				break;
 8008b78:	e068      	b.n	8008c4c <i2c_config+0x2b4>
	else{


		//Estamos en modo "Fast" (FM Mode)
		//Seleccioanmo el modo Fast
		ptrHandlerI2C->ptrI2Cx->CCR |=  I2C_CCR_FS;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	69da      	ldr	r2, [r3, #28]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b88:	61da      	str	r2, [r3, #28]

		//configuramos el registro que se encarga de generar la señal del reloj
		switch(ptrHandlerI2C->I2C_Config.clkSpeed){
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	79db      	ldrb	r3, [r3, #7]
 8008b8e:	2b32      	cmp	r3, #50	; 0x32
 8008b90:	d048      	beq.n	8008c24 <i2c_config+0x28c>
 8008b92:	2b32      	cmp	r3, #50	; 0x32
 8008b94:	dc59      	bgt.n	8008c4a <i2c_config+0x2b2>
 8008b96:	2b14      	cmp	r3, #20
 8008b98:	d033      	beq.n	8008c02 <i2c_config+0x26a>
 8008b9a:	2b14      	cmp	r3, #20
 8008b9c:	dc55      	bgt.n	8008c4a <i2c_config+0x2b2>
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d002      	beq.n	8008ba8 <i2c_config+0x210>
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d01c      	beq.n	8008be0 <i2c_config+0x248>


				break;
			}default:{

				break;
 8008ba6:	e050      	b.n	8008c4a <i2c_config+0x2b2>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_4MHz << I2C_CCR_CCR_Pos);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69da      	ldr	r2, [r3, #28]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0203 	orr.w	r2, r2, #3
 8008bb6:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_4MHz;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0202 	orr.w	r2, r2, #2
 8008bc6:	621a      	str	r2, [r3, #32]
				break;
 8008bc8:	e040      	b.n	8008c4c <i2c_config+0x2b4>
 8008bca:	bf00      	nop
 8008bcc:	40005400 	.word	0x40005400
 8008bd0:	40023800 	.word	0x40023800
 8008bd4:	40005800 	.word	0x40005800
 8008bd8:	40005c00 	.word	0x40005c00
 8008bdc:	00f42400 	.word	0x00f42400
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_16MHz << I2C_CCR_CCR_Pos);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69da      	ldr	r2, [r3, #28]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 020d 	orr.w	r2, r2, #13
 8008bee:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_16MHz;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6a1a      	ldr	r2, [r3, #32]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0206 	orr.w	r2, r2, #6
 8008bfe:	621a      	str	r2, [r3, #32]
				break;
 8008c00:	e024      	b.n	8008c4c <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |=(I2C_MODE_FM_SPEED_400KHz_20MHz << I2C_CCR_CCR_Pos);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69da      	ldr	r2, [r3, #28]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0211 	orr.w	r2, r2, #17
 8008c10:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_20MHz;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0207 	orr.w	r2, r2, #7
 8008c20:	621a      	str	r2, [r3, #32]
				break;
 8008c22:	e013      	b.n	8008c4c <i2c_config+0x2b4>
				ptrHandlerI2C->ptrI2Cx->CCR |= (I2C_MODE_FM_SPEED_400KHz_50MHz << I2C_CCR_CCR_Pos);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69da      	ldr	r2, [r3, #28]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8008c32:	61da      	str	r2, [r3, #28]
				ptrHandlerI2C->ptrI2Cx->TRISE |= I2C_MAX_RISE_TIME_FM_50MHz;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6a1a      	ldr	r2, [r3, #32]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0210 	orr.w	r2, r2, #16
 8008c42:	621a      	str	r2, [r3, #32]
				break;
 8008c44:	e002      	b.n	8008c4c <i2c_config+0x2b4>
				break;
 8008c46:	bf00      	nop
 8008c48:	e002      	b.n	8008c50 <i2c_config+0x2b8>
				break;
 8008c4a:	bf00      	nop
			}

		}

	}
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008c4c:	e000      	b.n	8008c50 <i2c_config+0x2b8>
		__NOP();
 8008c4e:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1f7      	bne.n	8008c4e <i2c_config+0x2b6>
	}

	/* 5. Activamos el modulo I2C */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_PE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f042 0201 	orr.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

}
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop

08008c7c <i2c_stopTransaction>:


/* 8. Generamos la condicion de stop */
void i2c_stopTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_STOP;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <i2c_startTransaction>:


void i2c_startTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	/* 1. Verificamos que la linea no esta ocupada - bit "busy" en I2C_SR2 */
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008ca8:	e000      	b.n	8008cac <i2c_startTransaction+0xc>
		__NOP();
 8008caa:	bf00      	nop
	while(ptrHandlerI2C->ptrI2Cx->SR2 & I2C_SR2_BUSY){
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f7      	bne.n	8008caa <i2c_startTransaction+0xa>
	}

	/* 2. Genereamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc8:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante
	 * Mientras esperamos, el valor de SB es 0, entonces la negacion (!) es 1*/
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008cca:	e000      	b.n	8008cce <i2c_startTransaction+0x2e>
		__NOP();
 8008ccc:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f7      	beq.n	8008ccc <i2c_startTransaction+0x2c>
	}
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <i2c_reStartTransaction>:

/**/
void i2c_reStartTransaction(I2C_Handler_t *ptrHandlerI2C){
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
	/*2. Generamos la señal "start" */
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_START;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d00:	601a      	str	r2, [r3, #0]

	/* 2a. Esperamos a que la bandera del evento "start" se levante*/
	/* Mientras esperamos, el valor de SB es 0, entonces la negacion es 1 */
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008d02:	e000      	b.n	8008d06 <i2c_reStartTransaction+0x1c>
		__NOP();
 8008d04:	bf00      	nop
	while(!(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_SB)){
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0f7      	beq.n	8008d04 <i2c_reStartTransaction+0x1a>
	}
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <i2c_sendNoAck>:

/* 7a. Activamos la indicacion para no-ACK (indicacion para el Slave de terminar) */
void i2c_sendNoAck(I2C_Handler_t *ptrHandlerI2C){
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
	/*(Debemos escribir cero en la posicion ACK del registro de control 1) */
	ptrHandlerI2C->ptrI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d38:	601a      	str	r2, [r3, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <i2c_sendSlaveAddressRW>:
	/* (Debemos escribir uno en la posicion ACK del registro de control 1)*/
	ptrHandlerI2C->ptrI2Cx->CR1 |= I2C_CR1_ACK;
}

/**/
void i2c_sendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite){
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
 8008d52:	4613      	mov	r3, r2
 8008d54:	70bb      	strb	r3, [r7, #2]
	/* 0. Definimos una variable auxiliar */
	uint8_t auxByte = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	/* 3. Enviamos la direccion del Slave y el bit que indica que deseamos escribir (0) */
	/* (en el siguiente paso se envia la direccion de memoria que se desea escribir  */
	ptrHandlerI2C->ptrI2Cx->DR = (slaveAddress << 1) | readOrWrite;
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	005a      	lsls	r2, r3, #1
 8008d5e:	78bb      	ldrb	r3, [r7, #2]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	611a      	str	r2, [r3, #16]

	/* 3.1 Esperamos hasta que la bendera del evento "addr" se levante
	 * (esto nos indica que la direccion fue enviada satisfactoriamente
	 */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8008d68:	e000      	b.n	8008d6c <i2c_sendSlaveAddressRW+0x26>
		__NOP();
 8008d6a:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_ADDR)){
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0f7      	beq.n	8008d6a <i2c_sendSlaveAddressRW+0x24>
	}

	/* 3.2 Debemos limpiar la bandera de la recepcion de ACK de la "addr", para lo cual
	 * debemos leer en secuencia el I2C_SR1 y luego I2C_SR2
	 */
	auxByte = ptrHandlerI2C->ptrI2Cx->SR1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->ptrI2Cx->SR2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	73fb      	strb	r3, [r7, #15]

}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <i2c_sendMemoryAddress>:

/**/
void i2c_sendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr){
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70fb      	strb	r3, [r7, #3]
	/* 4. Enviamos la direccion de memoria qe deseamos leer */
	ptrHandlerI2C->ptrI2Cx->DR = memAddr;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	611a      	str	r2, [r3, #16]

	/* 4.1 Esoeramos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8008daa:	e000      	b.n	8008dae <i2c_sendMemoryAddress+0x18>
		__NOP();
 8008dac:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_TXE)){
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f7      	beq.n	8008dac <i2c_sendMemoryAddress+0x16>
	}
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <i2c_sendDataByte>:

/**/
void i2c_sendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite){
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
	/* 5. Cargamos el valor que deseamos escribir */
	ptrHandlerI2C->ptrI2Cx->DR = dataToWrite;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	611a      	str	r2, [r3, #16]

	/* 6. Esperamos hasta que el byte sea transmitido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8008dde:	e000      	b.n	8008de2 <i2c_sendDataByte+0x18>
		__NOP();
 8008de0:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_BTF)){
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0f7      	beq.n	8008de0 <i2c_sendDataByte+0x16>
	}
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <i2c_readDataByte>:

uint8_t i2c_readDataByte(I2C_Handler_t *ptrHandlerI2C){
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
	/*9. Esperamos hasta que el byte entrante sea recibido */
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8008e06:	e000      	b.n	8008e0a <i2c_readDataByte+0xc>
		__NOP();
 8008e08:	bf00      	nop
	while( !(ptrHandlerI2C->ptrI2Cx->SR1 & I2C_SR1_RXNE)){
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0f7      	beq.n	8008e08 <i2c_readDataByte+0xa>
	}

	ptrHandlerI2C->I2C_Config.dataI2C = ptrHandlerI2C->ptrI2Cx->DR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->I2C_Config.dataI2C;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	799b      	ldrb	r3, [r3, #6]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <__errno>:
 8008e34:	4b01      	ldr	r3, [pc, #4]	; (8008e3c <__errno+0x8>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	20000028 	.word	0x20000028

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4d0d      	ldr	r5, [pc, #52]	; (8008e78 <__libc_init_array+0x38>)
 8008e44:	4c0d      	ldr	r4, [pc, #52]	; (8008e7c <__libc_init_array+0x3c>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	42a6      	cmp	r6, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	4d0b      	ldr	r5, [pc, #44]	; (8008e80 <__libc_init_array+0x40>)
 8008e52:	4c0c      	ldr	r4, [pc, #48]	; (8008e84 <__libc_init_array+0x44>)
 8008e54:	f003 f814 	bl	800be80 <_init>
 8008e58:	1b64      	subs	r4, r4, r5
 8008e5a:	10a4      	asrs	r4, r4, #2
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	42a6      	cmp	r6, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e68:	4798      	blx	r3
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e72:	4798      	blx	r3
 8008e74:	3601      	adds	r6, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	0800c498 	.word	0x0800c498
 8008e7c:	0800c498 	.word	0x0800c498
 8008e80:	0800c498 	.word	0x0800c498
 8008e84:	0800c49c 	.word	0x0800c49c

08008e88 <memcpy>:
 8008e88:	440a      	add	r2, r1
 8008e8a:	4291      	cmp	r1, r2
 8008e8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e90:	d100      	bne.n	8008e94 <memcpy+0xc>
 8008e92:	4770      	bx	lr
 8008e94:	b510      	push	{r4, lr}
 8008e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	d1f9      	bne.n	8008e96 <memcpy+0xe>
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <memset>:
 8008ea4:	4402      	add	r2, r0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <_free_r>:
 8008eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d044      	beq.n	8008f44 <_free_r+0x90>
 8008eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebe:	9001      	str	r0, [sp, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ec6:	bfb8      	it	lt
 8008ec8:	18e4      	addlt	r4, r4, r3
 8008eca:	f000 f911 	bl	80090f0 <__malloc_lock>
 8008ece:	4a1e      	ldr	r2, [pc, #120]	; (8008f48 <_free_r+0x94>)
 8008ed0:	9801      	ldr	r0, [sp, #4]
 8008ed2:	6813      	ldr	r3, [r2, #0]
 8008ed4:	b933      	cbnz	r3, 8008ee4 <_free_r+0x30>
 8008ed6:	6063      	str	r3, [r4, #4]
 8008ed8:	6014      	str	r4, [r2, #0]
 8008eda:	b003      	add	sp, #12
 8008edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ee0:	f000 b90c 	b.w	80090fc <__malloc_unlock>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d908      	bls.n	8008efa <_free_r+0x46>
 8008ee8:	6825      	ldr	r5, [r4, #0]
 8008eea:	1961      	adds	r1, r4, r5
 8008eec:	428b      	cmp	r3, r1
 8008eee:	bf01      	itttt	eq
 8008ef0:	6819      	ldreq	r1, [r3, #0]
 8008ef2:	685b      	ldreq	r3, [r3, #4]
 8008ef4:	1949      	addeq	r1, r1, r5
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	e7ed      	b.n	8008ed6 <_free_r+0x22>
 8008efa:	461a      	mov	r2, r3
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	b10b      	cbz	r3, 8008f04 <_free_r+0x50>
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	d9fa      	bls.n	8008efa <_free_r+0x46>
 8008f04:	6811      	ldr	r1, [r2, #0]
 8008f06:	1855      	adds	r5, r2, r1
 8008f08:	42a5      	cmp	r5, r4
 8008f0a:	d10b      	bne.n	8008f24 <_free_r+0x70>
 8008f0c:	6824      	ldr	r4, [r4, #0]
 8008f0e:	4421      	add	r1, r4
 8008f10:	1854      	adds	r4, r2, r1
 8008f12:	42a3      	cmp	r3, r4
 8008f14:	6011      	str	r1, [r2, #0]
 8008f16:	d1e0      	bne.n	8008eda <_free_r+0x26>
 8008f18:	681c      	ldr	r4, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	6053      	str	r3, [r2, #4]
 8008f1e:	4421      	add	r1, r4
 8008f20:	6011      	str	r1, [r2, #0]
 8008f22:	e7da      	b.n	8008eda <_free_r+0x26>
 8008f24:	d902      	bls.n	8008f2c <_free_r+0x78>
 8008f26:	230c      	movs	r3, #12
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	e7d6      	b.n	8008eda <_free_r+0x26>
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	1961      	adds	r1, r4, r5
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf04      	itt	eq
 8008f34:	6819      	ldreq	r1, [r3, #0]
 8008f36:	685b      	ldreq	r3, [r3, #4]
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	bf04      	itt	eq
 8008f3c:	1949      	addeq	r1, r1, r5
 8008f3e:	6021      	streq	r1, [r4, #0]
 8008f40:	6054      	str	r4, [r2, #4]
 8008f42:	e7ca      	b.n	8008eda <_free_r+0x26>
 8008f44:	b003      	add	sp, #12
 8008f46:	bd30      	pop	{r4, r5, pc}
 8008f48:	20013184 	.word	0x20013184

08008f4c <sbrk_aligned>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	4e0e      	ldr	r6, [pc, #56]	; (8008f88 <sbrk_aligned+0x3c>)
 8008f50:	460c      	mov	r4, r1
 8008f52:	6831      	ldr	r1, [r6, #0]
 8008f54:	4605      	mov	r5, r0
 8008f56:	b911      	cbnz	r1, 8008f5e <sbrk_aligned+0x12>
 8008f58:	f000 f88c 	bl	8009074 <_sbrk_r>
 8008f5c:	6030      	str	r0, [r6, #0]
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4628      	mov	r0, r5
 8008f62:	f000 f887 	bl	8009074 <_sbrk_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	d00a      	beq.n	8008f80 <sbrk_aligned+0x34>
 8008f6a:	1cc4      	adds	r4, r0, #3
 8008f6c:	f024 0403 	bic.w	r4, r4, #3
 8008f70:	42a0      	cmp	r0, r4
 8008f72:	d007      	beq.n	8008f84 <sbrk_aligned+0x38>
 8008f74:	1a21      	subs	r1, r4, r0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f000 f87c 	bl	8009074 <_sbrk_r>
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d101      	bne.n	8008f84 <sbrk_aligned+0x38>
 8008f80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f84:	4620      	mov	r0, r4
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	20013188 	.word	0x20013188

08008f8c <_malloc_r>:
 8008f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	1ccd      	adds	r5, r1, #3
 8008f92:	f025 0503 	bic.w	r5, r5, #3
 8008f96:	3508      	adds	r5, #8
 8008f98:	2d0c      	cmp	r5, #12
 8008f9a:	bf38      	it	cc
 8008f9c:	250c      	movcc	r5, #12
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	db01      	blt.n	8008fa8 <_malloc_r+0x1c>
 8008fa4:	42a9      	cmp	r1, r5
 8008fa6:	d905      	bls.n	8008fb4 <_malloc_r+0x28>
 8008fa8:	230c      	movs	r3, #12
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	2600      	movs	r6, #0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb4:	4e2e      	ldr	r6, [pc, #184]	; (8009070 <_malloc_r+0xe4>)
 8008fb6:	f000 f89b 	bl	80090f0 <__malloc_lock>
 8008fba:	6833      	ldr	r3, [r6, #0]
 8008fbc:	461c      	mov	r4, r3
 8008fbe:	bb34      	cbnz	r4, 800900e <_malloc_r+0x82>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f7ff ffc2 	bl	8008f4c <sbrk_aligned>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	4604      	mov	r4, r0
 8008fcc:	d14d      	bne.n	800906a <_malloc_r+0xde>
 8008fce:	6834      	ldr	r4, [r6, #0]
 8008fd0:	4626      	mov	r6, r4
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	d140      	bne.n	8009058 <_malloc_r+0xcc>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4638      	mov	r0, r7
 8008fdc:	eb04 0803 	add.w	r8, r4, r3
 8008fe0:	f000 f848 	bl	8009074 <_sbrk_r>
 8008fe4:	4580      	cmp	r8, r0
 8008fe6:	d13a      	bne.n	800905e <_malloc_r+0xd2>
 8008fe8:	6821      	ldr	r1, [r4, #0]
 8008fea:	3503      	adds	r5, #3
 8008fec:	1a6d      	subs	r5, r5, r1
 8008fee:	f025 0503 	bic.w	r5, r5, #3
 8008ff2:	3508      	adds	r5, #8
 8008ff4:	2d0c      	cmp	r5, #12
 8008ff6:	bf38      	it	cc
 8008ff8:	250c      	movcc	r5, #12
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	f7ff ffa5 	bl	8008f4c <sbrk_aligned>
 8009002:	3001      	adds	r0, #1
 8009004:	d02b      	beq.n	800905e <_malloc_r+0xd2>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	442b      	add	r3, r5
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	e00e      	b.n	800902c <_malloc_r+0xa0>
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	1b52      	subs	r2, r2, r5
 8009012:	d41e      	bmi.n	8009052 <_malloc_r+0xc6>
 8009014:	2a0b      	cmp	r2, #11
 8009016:	d916      	bls.n	8009046 <_malloc_r+0xba>
 8009018:	1961      	adds	r1, r4, r5
 800901a:	42a3      	cmp	r3, r4
 800901c:	6025      	str	r5, [r4, #0]
 800901e:	bf18      	it	ne
 8009020:	6059      	strne	r1, [r3, #4]
 8009022:	6863      	ldr	r3, [r4, #4]
 8009024:	bf08      	it	eq
 8009026:	6031      	streq	r1, [r6, #0]
 8009028:	5162      	str	r2, [r4, r5]
 800902a:	604b      	str	r3, [r1, #4]
 800902c:	4638      	mov	r0, r7
 800902e:	f104 060b 	add.w	r6, r4, #11
 8009032:	f000 f863 	bl	80090fc <__malloc_unlock>
 8009036:	f026 0607 	bic.w	r6, r6, #7
 800903a:	1d23      	adds	r3, r4, #4
 800903c:	1af2      	subs	r2, r6, r3
 800903e:	d0b6      	beq.n	8008fae <_malloc_r+0x22>
 8009040:	1b9b      	subs	r3, r3, r6
 8009042:	50a3      	str	r3, [r4, r2]
 8009044:	e7b3      	b.n	8008fae <_malloc_r+0x22>
 8009046:	6862      	ldr	r2, [r4, #4]
 8009048:	42a3      	cmp	r3, r4
 800904a:	bf0c      	ite	eq
 800904c:	6032      	streq	r2, [r6, #0]
 800904e:	605a      	strne	r2, [r3, #4]
 8009050:	e7ec      	b.n	800902c <_malloc_r+0xa0>
 8009052:	4623      	mov	r3, r4
 8009054:	6864      	ldr	r4, [r4, #4]
 8009056:	e7b2      	b.n	8008fbe <_malloc_r+0x32>
 8009058:	4634      	mov	r4, r6
 800905a:	6876      	ldr	r6, [r6, #4]
 800905c:	e7b9      	b.n	8008fd2 <_malloc_r+0x46>
 800905e:	230c      	movs	r3, #12
 8009060:	603b      	str	r3, [r7, #0]
 8009062:	4638      	mov	r0, r7
 8009064:	f000 f84a 	bl	80090fc <__malloc_unlock>
 8009068:	e7a1      	b.n	8008fae <_malloc_r+0x22>
 800906a:	6025      	str	r5, [r4, #0]
 800906c:	e7de      	b.n	800902c <_malloc_r+0xa0>
 800906e:	bf00      	nop
 8009070:	20013184 	.word	0x20013184

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d06      	ldr	r5, [pc, #24]	; (8009090 <_sbrk_r+0x1c>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f002 fef0 	bl	800be64 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	2001318c 	.word	0x2001318c

08009094 <siscanf>:
 8009094:	b40e      	push	{r1, r2, r3}
 8009096:	b510      	push	{r4, lr}
 8009098:	b09f      	sub	sp, #124	; 0x7c
 800909a:	ac21      	add	r4, sp, #132	; 0x84
 800909c:	f44f 7101 	mov.w	r1, #516	; 0x204
 80090a0:	f854 2b04 	ldr.w	r2, [r4], #4
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80090aa:	9004      	str	r0, [sp, #16]
 80090ac:	9008      	str	r0, [sp, #32]
 80090ae:	f7f7 f8a1 	bl	80001f4 <strlen>
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <siscanf+0x50>)
 80090b4:	9005      	str	r0, [sp, #20]
 80090b6:	9009      	str	r0, [sp, #36]	; 0x24
 80090b8:	930d      	str	r3, [sp, #52]	; 0x34
 80090ba:	480b      	ldr	r0, [pc, #44]	; (80090e8 <siscanf+0x54>)
 80090bc:	9a01      	ldr	r2, [sp, #4]
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	9403      	str	r4, [sp, #12]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9311      	str	r3, [sp, #68]	; 0x44
 80090c6:	9316      	str	r3, [sp, #88]	; 0x58
 80090c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80090d0:	a904      	add	r1, sp, #16
 80090d2:	4623      	mov	r3, r4
 80090d4:	f000 f872 	bl	80091bc <__ssvfiscanf_r>
 80090d8:	b01f      	add	sp, #124	; 0x7c
 80090da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090de:	b003      	add	sp, #12
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	080090ed 	.word	0x080090ed
 80090e8:	20000028 	.word	0x20000028

080090ec <__seofread>:
 80090ec:	2000      	movs	r0, #0
 80090ee:	4770      	bx	lr

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__malloc_lock+0x8>)
 80090f2:	f000 bc97 	b.w	8009a24 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20013190 	.word	0x20013190

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__malloc_unlock+0x8>)
 80090fe:	f000 bc92 	b.w	8009a26 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20013190 	.word	0x20013190

08009108 <_sungetc_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	1c4b      	adds	r3, r1, #1
 800910c:	4614      	mov	r4, r2
 800910e:	d103      	bne.n	8009118 <_sungetc_r+0x10>
 8009110:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009114:	4628      	mov	r0, r5
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	8993      	ldrh	r3, [r2, #12]
 800911a:	f023 0320 	bic.w	r3, r3, #32
 800911e:	8193      	strh	r3, [r2, #12]
 8009120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009122:	6852      	ldr	r2, [r2, #4]
 8009124:	b2cd      	uxtb	r5, r1
 8009126:	b18b      	cbz	r3, 800914c <_sungetc_r+0x44>
 8009128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800912a:	4293      	cmp	r3, r2
 800912c:	dd08      	ble.n	8009140 <_sungetc_r+0x38>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	1e5a      	subs	r2, r3, #1
 8009132:	6022      	str	r2, [r4, #0]
 8009134:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	3301      	adds	r3, #1
 800913c:	6063      	str	r3, [r4, #4]
 800913e:	e7e9      	b.n	8009114 <_sungetc_r+0xc>
 8009140:	4621      	mov	r1, r4
 8009142:	f000 fc35 	bl	80099b0 <__submore>
 8009146:	2800      	cmp	r0, #0
 8009148:	d0f1      	beq.n	800912e <_sungetc_r+0x26>
 800914a:	e7e1      	b.n	8009110 <_sungetc_r+0x8>
 800914c:	6921      	ldr	r1, [r4, #16]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	b151      	cbz	r1, 8009168 <_sungetc_r+0x60>
 8009152:	4299      	cmp	r1, r3
 8009154:	d208      	bcs.n	8009168 <_sungetc_r+0x60>
 8009156:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800915a:	42a9      	cmp	r1, r5
 800915c:	d104      	bne.n	8009168 <_sungetc_r+0x60>
 800915e:	3b01      	subs	r3, #1
 8009160:	3201      	adds	r2, #1
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	6062      	str	r2, [r4, #4]
 8009166:	e7d5      	b.n	8009114 <_sungetc_r+0xc>
 8009168:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800916c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009170:	6363      	str	r3, [r4, #52]	; 0x34
 8009172:	2303      	movs	r3, #3
 8009174:	63a3      	str	r3, [r4, #56]	; 0x38
 8009176:	4623      	mov	r3, r4
 8009178:	f803 5f46 	strb.w	r5, [r3, #70]!
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	2301      	movs	r3, #1
 8009180:	e7dc      	b.n	800913c <_sungetc_r+0x34>

08009182 <__ssrefill_r>:
 8009182:	b510      	push	{r4, lr}
 8009184:	460c      	mov	r4, r1
 8009186:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009188:	b169      	cbz	r1, 80091a6 <__ssrefill_r+0x24>
 800918a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800918e:	4299      	cmp	r1, r3
 8009190:	d001      	beq.n	8009196 <__ssrefill_r+0x14>
 8009192:	f7ff fe8f 	bl	8008eb4 <_free_r>
 8009196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	2000      	movs	r0, #0
 800919c:	6360      	str	r0, [r4, #52]	; 0x34
 800919e:	b113      	cbz	r3, 80091a6 <__ssrefill_r+0x24>
 80091a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f043 0320 	orr.w	r3, r3, #32
 80091b4:	81a3      	strh	r3, [r4, #12]
 80091b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ba:	e7f3      	b.n	80091a4 <__ssrefill_r+0x22>

080091bc <__ssvfiscanf_r>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80091c6:	2100      	movs	r1, #0
 80091c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80091cc:	49a6      	ldr	r1, [pc, #664]	; (8009468 <__ssvfiscanf_r+0x2ac>)
 80091ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80091d0:	f10d 0804 	add.w	r8, sp, #4
 80091d4:	49a5      	ldr	r1, [pc, #660]	; (800946c <__ssvfiscanf_r+0x2b0>)
 80091d6:	4fa6      	ldr	r7, [pc, #664]	; (8009470 <__ssvfiscanf_r+0x2b4>)
 80091d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009474 <__ssvfiscanf_r+0x2b8>
 80091dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80091e0:	4606      	mov	r6, r0
 80091e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	7813      	ldrb	r3, [r2, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 815a 	beq.w	80094a2 <__ssvfiscanf_r+0x2e6>
 80091ee:	5dd9      	ldrb	r1, [r3, r7]
 80091f0:	f011 0108 	ands.w	r1, r1, #8
 80091f4:	f102 0501 	add.w	r5, r2, #1
 80091f8:	d019      	beq.n	800922e <__ssvfiscanf_r+0x72>
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dd0f      	ble.n	8009220 <__ssvfiscanf_r+0x64>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	781a      	ldrb	r2, [r3, #0]
 8009204:	5cba      	ldrb	r2, [r7, r2]
 8009206:	0712      	lsls	r2, r2, #28
 8009208:	d401      	bmi.n	800920e <__ssvfiscanf_r+0x52>
 800920a:	462a      	mov	r2, r5
 800920c:	e7eb      	b.n	80091e6 <__ssvfiscanf_r+0x2a>
 800920e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009210:	3201      	adds	r2, #1
 8009212:	9245      	str	r2, [sp, #276]	; 0x114
 8009214:	6862      	ldr	r2, [r4, #4]
 8009216:	3301      	adds	r3, #1
 8009218:	3a01      	subs	r2, #1
 800921a:	6062      	str	r2, [r4, #4]
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	e7ec      	b.n	80091fa <__ssvfiscanf_r+0x3e>
 8009220:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009222:	4621      	mov	r1, r4
 8009224:	4630      	mov	r0, r6
 8009226:	4798      	blx	r3
 8009228:	2800      	cmp	r0, #0
 800922a:	d0e9      	beq.n	8009200 <__ssvfiscanf_r+0x44>
 800922c:	e7ed      	b.n	800920a <__ssvfiscanf_r+0x4e>
 800922e:	2b25      	cmp	r3, #37	; 0x25
 8009230:	d012      	beq.n	8009258 <__ssvfiscanf_r+0x9c>
 8009232:	469a      	mov	sl, r3
 8009234:	6863      	ldr	r3, [r4, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f340 8091 	ble.w	800935e <__ssvfiscanf_r+0x1a2>
 800923c:	6822      	ldr	r2, [r4, #0]
 800923e:	7813      	ldrb	r3, [r2, #0]
 8009240:	4553      	cmp	r3, sl
 8009242:	f040 812e 	bne.w	80094a2 <__ssvfiscanf_r+0x2e6>
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	3b01      	subs	r3, #1
 800924a:	6063      	str	r3, [r4, #4]
 800924c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800924e:	3201      	adds	r2, #1
 8009250:	3301      	adds	r3, #1
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	9345      	str	r3, [sp, #276]	; 0x114
 8009256:	e7d8      	b.n	800920a <__ssvfiscanf_r+0x4e>
 8009258:	9141      	str	r1, [sp, #260]	; 0x104
 800925a:	9143      	str	r1, [sp, #268]	; 0x10c
 800925c:	7853      	ldrb	r3, [r2, #1]
 800925e:	2b2a      	cmp	r3, #42	; 0x2a
 8009260:	bf02      	ittt	eq
 8009262:	2310      	moveq	r3, #16
 8009264:	1c95      	addeq	r5, r2, #2
 8009266:	9341      	streq	r3, [sp, #260]	; 0x104
 8009268:	220a      	movs	r2, #10
 800926a:	46aa      	mov	sl, r5
 800926c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009270:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009274:	2b09      	cmp	r3, #9
 8009276:	d91d      	bls.n	80092b4 <__ssvfiscanf_r+0xf8>
 8009278:	487e      	ldr	r0, [pc, #504]	; (8009474 <__ssvfiscanf_r+0x2b8>)
 800927a:	2203      	movs	r2, #3
 800927c:	f7f6 ffc8 	bl	8000210 <memchr>
 8009280:	b140      	cbz	r0, 8009294 <__ssvfiscanf_r+0xd8>
 8009282:	2301      	movs	r3, #1
 8009284:	eba0 0009 	sub.w	r0, r0, r9
 8009288:	fa03 f000 	lsl.w	r0, r3, r0
 800928c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800928e:	4318      	orrs	r0, r3
 8009290:	9041      	str	r0, [sp, #260]	; 0x104
 8009292:	4655      	mov	r5, sl
 8009294:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009298:	2b78      	cmp	r3, #120	; 0x78
 800929a:	d806      	bhi.n	80092aa <__ssvfiscanf_r+0xee>
 800929c:	2b57      	cmp	r3, #87	; 0x57
 800929e:	d810      	bhi.n	80092c2 <__ssvfiscanf_r+0x106>
 80092a0:	2b25      	cmp	r3, #37	; 0x25
 80092a2:	d0c6      	beq.n	8009232 <__ssvfiscanf_r+0x76>
 80092a4:	d856      	bhi.n	8009354 <__ssvfiscanf_r+0x198>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d064      	beq.n	8009374 <__ssvfiscanf_r+0x1b8>
 80092aa:	2303      	movs	r3, #3
 80092ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80092ae:	230a      	movs	r3, #10
 80092b0:	9342      	str	r3, [sp, #264]	; 0x108
 80092b2:	e071      	b.n	8009398 <__ssvfiscanf_r+0x1dc>
 80092b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80092b6:	fb02 1103 	mla	r1, r2, r3, r1
 80092ba:	3930      	subs	r1, #48	; 0x30
 80092bc:	9143      	str	r1, [sp, #268]	; 0x10c
 80092be:	4655      	mov	r5, sl
 80092c0:	e7d3      	b.n	800926a <__ssvfiscanf_r+0xae>
 80092c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80092c6:	2a20      	cmp	r2, #32
 80092c8:	d8ef      	bhi.n	80092aa <__ssvfiscanf_r+0xee>
 80092ca:	a101      	add	r1, pc, #4	; (adr r1, 80092d0 <__ssvfiscanf_r+0x114>)
 80092cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092d0:	08009383 	.word	0x08009383
 80092d4:	080092ab 	.word	0x080092ab
 80092d8:	080092ab 	.word	0x080092ab
 80092dc:	080093e1 	.word	0x080093e1
 80092e0:	080092ab 	.word	0x080092ab
 80092e4:	080092ab 	.word	0x080092ab
 80092e8:	080092ab 	.word	0x080092ab
 80092ec:	080092ab 	.word	0x080092ab
 80092f0:	080092ab 	.word	0x080092ab
 80092f4:	080092ab 	.word	0x080092ab
 80092f8:	080092ab 	.word	0x080092ab
 80092fc:	080093f7 	.word	0x080093f7
 8009300:	080093cd 	.word	0x080093cd
 8009304:	0800935b 	.word	0x0800935b
 8009308:	0800935b 	.word	0x0800935b
 800930c:	0800935b 	.word	0x0800935b
 8009310:	080092ab 	.word	0x080092ab
 8009314:	080093d1 	.word	0x080093d1
 8009318:	080092ab 	.word	0x080092ab
 800931c:	080092ab 	.word	0x080092ab
 8009320:	080092ab 	.word	0x080092ab
 8009324:	080092ab 	.word	0x080092ab
 8009328:	08009407 	.word	0x08009407
 800932c:	080093d9 	.word	0x080093d9
 8009330:	0800937b 	.word	0x0800937b
 8009334:	080092ab 	.word	0x080092ab
 8009338:	080092ab 	.word	0x080092ab
 800933c:	08009403 	.word	0x08009403
 8009340:	080092ab 	.word	0x080092ab
 8009344:	080093cd 	.word	0x080093cd
 8009348:	080092ab 	.word	0x080092ab
 800934c:	080092ab 	.word	0x080092ab
 8009350:	08009383 	.word	0x08009383
 8009354:	3b45      	subs	r3, #69	; 0x45
 8009356:	2b02      	cmp	r3, #2
 8009358:	d8a7      	bhi.n	80092aa <__ssvfiscanf_r+0xee>
 800935a:	2305      	movs	r3, #5
 800935c:	e01b      	b.n	8009396 <__ssvfiscanf_r+0x1da>
 800935e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009360:	4621      	mov	r1, r4
 8009362:	4630      	mov	r0, r6
 8009364:	4798      	blx	r3
 8009366:	2800      	cmp	r0, #0
 8009368:	f43f af68 	beq.w	800923c <__ssvfiscanf_r+0x80>
 800936c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800936e:	2800      	cmp	r0, #0
 8009370:	f040 808d 	bne.w	800948e <__ssvfiscanf_r+0x2d2>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009378:	e08f      	b.n	800949a <__ssvfiscanf_r+0x2de>
 800937a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800937c:	f042 0220 	orr.w	r2, r2, #32
 8009380:	9241      	str	r2, [sp, #260]	; 0x104
 8009382:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009388:	9241      	str	r2, [sp, #260]	; 0x104
 800938a:	2210      	movs	r2, #16
 800938c:	2b6f      	cmp	r3, #111	; 0x6f
 800938e:	9242      	str	r2, [sp, #264]	; 0x108
 8009390:	bf34      	ite	cc
 8009392:	2303      	movcc	r3, #3
 8009394:	2304      	movcs	r3, #4
 8009396:	9347      	str	r3, [sp, #284]	; 0x11c
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	dd42      	ble.n	8009424 <__ssvfiscanf_r+0x268>
 800939e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093a0:	0659      	lsls	r1, r3, #25
 80093a2:	d404      	bmi.n	80093ae <__ssvfiscanf_r+0x1f2>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	5cba      	ldrb	r2, [r7, r2]
 80093aa:	0712      	lsls	r2, r2, #28
 80093ac:	d441      	bmi.n	8009432 <__ssvfiscanf_r+0x276>
 80093ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	dc50      	bgt.n	8009456 <__ssvfiscanf_r+0x29a>
 80093b4:	466b      	mov	r3, sp
 80093b6:	4622      	mov	r2, r4
 80093b8:	a941      	add	r1, sp, #260	; 0x104
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 f876 	bl	80094ac <_scanf_chars>
 80093c0:	2801      	cmp	r0, #1
 80093c2:	d06e      	beq.n	80094a2 <__ssvfiscanf_r+0x2e6>
 80093c4:	2802      	cmp	r0, #2
 80093c6:	f47f af20 	bne.w	800920a <__ssvfiscanf_r+0x4e>
 80093ca:	e7cf      	b.n	800936c <__ssvfiscanf_r+0x1b0>
 80093cc:	220a      	movs	r2, #10
 80093ce:	e7dd      	b.n	800938c <__ssvfiscanf_r+0x1d0>
 80093d0:	2300      	movs	r3, #0
 80093d2:	9342      	str	r3, [sp, #264]	; 0x108
 80093d4:	2303      	movs	r3, #3
 80093d6:	e7de      	b.n	8009396 <__ssvfiscanf_r+0x1da>
 80093d8:	2308      	movs	r3, #8
 80093da:	9342      	str	r3, [sp, #264]	; 0x108
 80093dc:	2304      	movs	r3, #4
 80093de:	e7da      	b.n	8009396 <__ssvfiscanf_r+0x1da>
 80093e0:	4629      	mov	r1, r5
 80093e2:	4640      	mov	r0, r8
 80093e4:	f000 f9b4 	bl	8009750 <__sccl>
 80093e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ee:	9341      	str	r3, [sp, #260]	; 0x104
 80093f0:	4605      	mov	r5, r0
 80093f2:	2301      	movs	r3, #1
 80093f4:	e7cf      	b.n	8009396 <__ssvfiscanf_r+0x1da>
 80093f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fc:	9341      	str	r3, [sp, #260]	; 0x104
 80093fe:	2300      	movs	r3, #0
 8009400:	e7c9      	b.n	8009396 <__ssvfiscanf_r+0x1da>
 8009402:	2302      	movs	r3, #2
 8009404:	e7c7      	b.n	8009396 <__ssvfiscanf_r+0x1da>
 8009406:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009408:	06c3      	lsls	r3, r0, #27
 800940a:	f53f aefe 	bmi.w	800920a <__ssvfiscanf_r+0x4e>
 800940e:	9b00      	ldr	r3, [sp, #0]
 8009410:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009412:	1d19      	adds	r1, r3, #4
 8009414:	9100      	str	r1, [sp, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f010 0f01 	tst.w	r0, #1
 800941c:	bf14      	ite	ne
 800941e:	801a      	strhne	r2, [r3, #0]
 8009420:	601a      	streq	r2, [r3, #0]
 8009422:	e6f2      	b.n	800920a <__ssvfiscanf_r+0x4e>
 8009424:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009426:	4621      	mov	r1, r4
 8009428:	4630      	mov	r0, r6
 800942a:	4798      	blx	r3
 800942c:	2800      	cmp	r0, #0
 800942e:	d0b6      	beq.n	800939e <__ssvfiscanf_r+0x1e2>
 8009430:	e79c      	b.n	800936c <__ssvfiscanf_r+0x1b0>
 8009432:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009434:	3201      	adds	r2, #1
 8009436:	9245      	str	r2, [sp, #276]	; 0x114
 8009438:	6862      	ldr	r2, [r4, #4]
 800943a:	3a01      	subs	r2, #1
 800943c:	2a00      	cmp	r2, #0
 800943e:	6062      	str	r2, [r4, #4]
 8009440:	dd02      	ble.n	8009448 <__ssvfiscanf_r+0x28c>
 8009442:	3301      	adds	r3, #1
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	e7ad      	b.n	80093a4 <__ssvfiscanf_r+0x1e8>
 8009448:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800944a:	4621      	mov	r1, r4
 800944c:	4630      	mov	r0, r6
 800944e:	4798      	blx	r3
 8009450:	2800      	cmp	r0, #0
 8009452:	d0a7      	beq.n	80093a4 <__ssvfiscanf_r+0x1e8>
 8009454:	e78a      	b.n	800936c <__ssvfiscanf_r+0x1b0>
 8009456:	2b04      	cmp	r3, #4
 8009458:	dc0e      	bgt.n	8009478 <__ssvfiscanf_r+0x2bc>
 800945a:	466b      	mov	r3, sp
 800945c:	4622      	mov	r2, r4
 800945e:	a941      	add	r1, sp, #260	; 0x104
 8009460:	4630      	mov	r0, r6
 8009462:	f000 f87d 	bl	8009560 <_scanf_i>
 8009466:	e7ab      	b.n	80093c0 <__ssvfiscanf_r+0x204>
 8009468:	08009109 	.word	0x08009109
 800946c:	08009183 	.word	0x08009183
 8009470:	0800c0bc 	.word	0x0800c0bc
 8009474:	0800c09c 	.word	0x0800c09c
 8009478:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <__ssvfiscanf_r+0x2ec>)
 800947a:	2b00      	cmp	r3, #0
 800947c:	f43f aec5 	beq.w	800920a <__ssvfiscanf_r+0x4e>
 8009480:	466b      	mov	r3, sp
 8009482:	4622      	mov	r2, r4
 8009484:	a941      	add	r1, sp, #260	; 0x104
 8009486:	4630      	mov	r0, r6
 8009488:	f3af 8000 	nop.w
 800948c:	e798      	b.n	80093c0 <__ssvfiscanf_r+0x204>
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009494:	bf18      	it	ne
 8009496:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800949a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80094a4:	e7f9      	b.n	800949a <__ssvfiscanf_r+0x2de>
 80094a6:	bf00      	nop
 80094a8:	00000000 	.word	0x00000000

080094ac <_scanf_chars>:
 80094ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b0:	4615      	mov	r5, r2
 80094b2:	688a      	ldr	r2, [r1, #8]
 80094b4:	4680      	mov	r8, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	b932      	cbnz	r2, 80094c8 <_scanf_chars+0x1c>
 80094ba:	698a      	ldr	r2, [r1, #24]
 80094bc:	2a00      	cmp	r2, #0
 80094be:	bf0c      	ite	eq
 80094c0:	2201      	moveq	r2, #1
 80094c2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80094c6:	608a      	str	r2, [r1, #8]
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800955c <_scanf_chars+0xb0>
 80094ce:	06d1      	lsls	r1, r2, #27
 80094d0:	bf5f      	itttt	pl
 80094d2:	681a      	ldrpl	r2, [r3, #0]
 80094d4:	1d11      	addpl	r1, r2, #4
 80094d6:	6019      	strpl	r1, [r3, #0]
 80094d8:	6816      	ldrpl	r6, [r2, #0]
 80094da:	2700      	movs	r7, #0
 80094dc:	69a0      	ldr	r0, [r4, #24]
 80094de:	b188      	cbz	r0, 8009504 <_scanf_chars+0x58>
 80094e0:	2801      	cmp	r0, #1
 80094e2:	d107      	bne.n	80094f4 <_scanf_chars+0x48>
 80094e4:	682a      	ldr	r2, [r5, #0]
 80094e6:	7811      	ldrb	r1, [r2, #0]
 80094e8:	6962      	ldr	r2, [r4, #20]
 80094ea:	5c52      	ldrb	r2, [r2, r1]
 80094ec:	b952      	cbnz	r2, 8009504 <_scanf_chars+0x58>
 80094ee:	2f00      	cmp	r7, #0
 80094f0:	d031      	beq.n	8009556 <_scanf_chars+0xaa>
 80094f2:	e022      	b.n	800953a <_scanf_chars+0x8e>
 80094f4:	2802      	cmp	r0, #2
 80094f6:	d120      	bne.n	800953a <_scanf_chars+0x8e>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009500:	071b      	lsls	r3, r3, #28
 8009502:	d41a      	bmi.n	800953a <_scanf_chars+0x8e>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	06da      	lsls	r2, r3, #27
 8009508:	bf5e      	ittt	pl
 800950a:	682b      	ldrpl	r3, [r5, #0]
 800950c:	781b      	ldrbpl	r3, [r3, #0]
 800950e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009512:	682a      	ldr	r2, [r5, #0]
 8009514:	686b      	ldr	r3, [r5, #4]
 8009516:	3201      	adds	r2, #1
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	68a2      	ldr	r2, [r4, #8]
 800951c:	3b01      	subs	r3, #1
 800951e:	3a01      	subs	r2, #1
 8009520:	606b      	str	r3, [r5, #4]
 8009522:	3701      	adds	r7, #1
 8009524:	60a2      	str	r2, [r4, #8]
 8009526:	b142      	cbz	r2, 800953a <_scanf_chars+0x8e>
 8009528:	2b00      	cmp	r3, #0
 800952a:	dcd7      	bgt.n	80094dc <_scanf_chars+0x30>
 800952c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009530:	4629      	mov	r1, r5
 8009532:	4640      	mov	r0, r8
 8009534:	4798      	blx	r3
 8009536:	2800      	cmp	r0, #0
 8009538:	d0d0      	beq.n	80094dc <_scanf_chars+0x30>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	f013 0310 	ands.w	r3, r3, #16
 8009540:	d105      	bne.n	800954e <_scanf_chars+0xa2>
 8009542:	68e2      	ldr	r2, [r4, #12]
 8009544:	3201      	adds	r2, #1
 8009546:	60e2      	str	r2, [r4, #12]
 8009548:	69a2      	ldr	r2, [r4, #24]
 800954a:	b102      	cbz	r2, 800954e <_scanf_chars+0xa2>
 800954c:	7033      	strb	r3, [r6, #0]
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	443b      	add	r3, r7
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	2000      	movs	r0, #0
 8009556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800955a:	bf00      	nop
 800955c:	0800c0bc 	.word	0x0800c0bc

08009560 <_scanf_i>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	4b76      	ldr	r3, [pc, #472]	; (8009740 <_scanf_i+0x1e0>)
 8009568:	460c      	mov	r4, r1
 800956a:	4682      	mov	sl, r0
 800956c:	4616      	mov	r6, r2
 800956e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009572:	b087      	sub	sp, #28
 8009574:	ab03      	add	r3, sp, #12
 8009576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800957a:	4b72      	ldr	r3, [pc, #456]	; (8009744 <_scanf_i+0x1e4>)
 800957c:	69a1      	ldr	r1, [r4, #24]
 800957e:	4a72      	ldr	r2, [pc, #456]	; (8009748 <_scanf_i+0x1e8>)
 8009580:	2903      	cmp	r1, #3
 8009582:	bf18      	it	ne
 8009584:	461a      	movne	r2, r3
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	9201      	str	r2, [sp, #4]
 800958a:	1e5a      	subs	r2, r3, #1
 800958c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009590:	bf88      	it	hi
 8009592:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009596:	4627      	mov	r7, r4
 8009598:	bf82      	ittt	hi
 800959a:	eb03 0905 	addhi.w	r9, r3, r5
 800959e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80095a2:	60a3      	strhi	r3, [r4, #8]
 80095a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80095a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80095ac:	bf98      	it	ls
 80095ae:	f04f 0900 	movls.w	r9, #0
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	463d      	mov	r5, r7
 80095b6:	f04f 0b00 	mov.w	fp, #0
 80095ba:	6831      	ldr	r1, [r6, #0]
 80095bc:	ab03      	add	r3, sp, #12
 80095be:	7809      	ldrb	r1, [r1, #0]
 80095c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f7f6 fe23 	bl	8000210 <memchr>
 80095ca:	b328      	cbz	r0, 8009618 <_scanf_i+0xb8>
 80095cc:	f1bb 0f01 	cmp.w	fp, #1
 80095d0:	d159      	bne.n	8009686 <_scanf_i+0x126>
 80095d2:	6862      	ldr	r2, [r4, #4]
 80095d4:	b92a      	cbnz	r2, 80095e2 <_scanf_i+0x82>
 80095d6:	6822      	ldr	r2, [r4, #0]
 80095d8:	2308      	movs	r3, #8
 80095da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095de:	6063      	str	r3, [r4, #4]
 80095e0:	6022      	str	r2, [r4, #0]
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80095e8:	6022      	str	r2, [r4, #0]
 80095ea:	68a2      	ldr	r2, [r4, #8]
 80095ec:	1e51      	subs	r1, r2, #1
 80095ee:	60a1      	str	r1, [r4, #8]
 80095f0:	b192      	cbz	r2, 8009618 <_scanf_i+0xb8>
 80095f2:	6832      	ldr	r2, [r6, #0]
 80095f4:	1c51      	adds	r1, r2, #1
 80095f6:	6031      	str	r1, [r6, #0]
 80095f8:	7812      	ldrb	r2, [r2, #0]
 80095fa:	f805 2b01 	strb.w	r2, [r5], #1
 80095fe:	6872      	ldr	r2, [r6, #4]
 8009600:	3a01      	subs	r2, #1
 8009602:	2a00      	cmp	r2, #0
 8009604:	6072      	str	r2, [r6, #4]
 8009606:	dc07      	bgt.n	8009618 <_scanf_i+0xb8>
 8009608:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800960c:	4631      	mov	r1, r6
 800960e:	4650      	mov	r0, sl
 8009610:	4790      	blx	r2
 8009612:	2800      	cmp	r0, #0
 8009614:	f040 8085 	bne.w	8009722 <_scanf_i+0x1c2>
 8009618:	f10b 0b01 	add.w	fp, fp, #1
 800961c:	f1bb 0f03 	cmp.w	fp, #3
 8009620:	d1cb      	bne.n	80095ba <_scanf_i+0x5a>
 8009622:	6863      	ldr	r3, [r4, #4]
 8009624:	b90b      	cbnz	r3, 800962a <_scanf_i+0xca>
 8009626:	230a      	movs	r3, #10
 8009628:	6063      	str	r3, [r4, #4]
 800962a:	6863      	ldr	r3, [r4, #4]
 800962c:	4947      	ldr	r1, [pc, #284]	; (800974c <_scanf_i+0x1ec>)
 800962e:	6960      	ldr	r0, [r4, #20]
 8009630:	1ac9      	subs	r1, r1, r3
 8009632:	f000 f88d 	bl	8009750 <__sccl>
 8009636:	f04f 0b00 	mov.w	fp, #0
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	6822      	ldr	r2, [r4, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d03d      	beq.n	80096be <_scanf_i+0x15e>
 8009642:	6831      	ldr	r1, [r6, #0]
 8009644:	6960      	ldr	r0, [r4, #20]
 8009646:	f891 c000 	ldrb.w	ip, [r1]
 800964a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800964e:	2800      	cmp	r0, #0
 8009650:	d035      	beq.n	80096be <_scanf_i+0x15e>
 8009652:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009656:	d124      	bne.n	80096a2 <_scanf_i+0x142>
 8009658:	0510      	lsls	r0, r2, #20
 800965a:	d522      	bpl.n	80096a2 <_scanf_i+0x142>
 800965c:	f10b 0b01 	add.w	fp, fp, #1
 8009660:	f1b9 0f00 	cmp.w	r9, #0
 8009664:	d003      	beq.n	800966e <_scanf_i+0x10e>
 8009666:	3301      	adds	r3, #1
 8009668:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800966c:	60a3      	str	r3, [r4, #8]
 800966e:	6873      	ldr	r3, [r6, #4]
 8009670:	3b01      	subs	r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	6073      	str	r3, [r6, #4]
 8009676:	dd1b      	ble.n	80096b0 <_scanf_i+0x150>
 8009678:	6833      	ldr	r3, [r6, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	6033      	str	r3, [r6, #0]
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	3b01      	subs	r3, #1
 8009682:	60a3      	str	r3, [r4, #8]
 8009684:	e7d9      	b.n	800963a <_scanf_i+0xda>
 8009686:	f1bb 0f02 	cmp.w	fp, #2
 800968a:	d1ae      	bne.n	80095ea <_scanf_i+0x8a>
 800968c:	6822      	ldr	r2, [r4, #0]
 800968e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009696:	d1bf      	bne.n	8009618 <_scanf_i+0xb8>
 8009698:	2310      	movs	r3, #16
 800969a:	6063      	str	r3, [r4, #4]
 800969c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096a0:	e7a2      	b.n	80095e8 <_scanf_i+0x88>
 80096a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80096a6:	6022      	str	r2, [r4, #0]
 80096a8:	780b      	ldrb	r3, [r1, #0]
 80096aa:	f805 3b01 	strb.w	r3, [r5], #1
 80096ae:	e7de      	b.n	800966e <_scanf_i+0x10e>
 80096b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80096b4:	4631      	mov	r1, r6
 80096b6:	4650      	mov	r0, sl
 80096b8:	4798      	blx	r3
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0df      	beq.n	800967e <_scanf_i+0x11e>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	05db      	lsls	r3, r3, #23
 80096c2:	d50d      	bpl.n	80096e0 <_scanf_i+0x180>
 80096c4:	42bd      	cmp	r5, r7
 80096c6:	d909      	bls.n	80096dc <_scanf_i+0x17c>
 80096c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80096cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096d0:	4632      	mov	r2, r6
 80096d2:	4650      	mov	r0, sl
 80096d4:	4798      	blx	r3
 80096d6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80096da:	464d      	mov	r5, r9
 80096dc:	42bd      	cmp	r5, r7
 80096de:	d02d      	beq.n	800973c <_scanf_i+0x1dc>
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	f012 0210 	ands.w	r2, r2, #16
 80096e6:	d113      	bne.n	8009710 <_scanf_i+0x1b0>
 80096e8:	702a      	strb	r2, [r5, #0]
 80096ea:	6863      	ldr	r3, [r4, #4]
 80096ec:	9e01      	ldr	r6, [sp, #4]
 80096ee:	4639      	mov	r1, r7
 80096f0:	4650      	mov	r0, sl
 80096f2:	47b0      	blx	r6
 80096f4:	6821      	ldr	r1, [r4, #0]
 80096f6:	f8d8 3000 	ldr.w	r3, [r8]
 80096fa:	f011 0f20 	tst.w	r1, #32
 80096fe:	d013      	beq.n	8009728 <_scanf_i+0x1c8>
 8009700:	1d1a      	adds	r2, r3, #4
 8009702:	f8c8 2000 	str.w	r2, [r8]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6018      	str	r0, [r3, #0]
 800970a:	68e3      	ldr	r3, [r4, #12]
 800970c:	3301      	adds	r3, #1
 800970e:	60e3      	str	r3, [r4, #12]
 8009710:	1bed      	subs	r5, r5, r7
 8009712:	44ab      	add	fp, r5
 8009714:	6925      	ldr	r5, [r4, #16]
 8009716:	445d      	add	r5, fp
 8009718:	6125      	str	r5, [r4, #16]
 800971a:	2000      	movs	r0, #0
 800971c:	b007      	add	sp, #28
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	f04f 0b00 	mov.w	fp, #0
 8009726:	e7ca      	b.n	80096be <_scanf_i+0x15e>
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	f8c8 2000 	str.w	r2, [r8]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f011 0f01 	tst.w	r1, #1
 8009734:	bf14      	ite	ne
 8009736:	8018      	strhne	r0, [r3, #0]
 8009738:	6018      	streq	r0, [r3, #0]
 800973a:	e7e6      	b.n	800970a <_scanf_i+0x1aa>
 800973c:	2001      	movs	r0, #1
 800973e:	e7ed      	b.n	800971c <_scanf_i+0x1bc>
 8009740:	0800c080 	.word	0x0800c080
 8009744:	080099ad 	.word	0x080099ad
 8009748:	080098c5 	.word	0x080098c5
 800974c:	0800c0b9 	.word	0x0800c0b9

08009750 <__sccl>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	780b      	ldrb	r3, [r1, #0]
 8009754:	4604      	mov	r4, r0
 8009756:	2b5e      	cmp	r3, #94	; 0x5e
 8009758:	bf0b      	itete	eq
 800975a:	784b      	ldrbeq	r3, [r1, #1]
 800975c:	1c48      	addne	r0, r1, #1
 800975e:	1c88      	addeq	r0, r1, #2
 8009760:	2200      	movne	r2, #0
 8009762:	bf08      	it	eq
 8009764:	2201      	moveq	r2, #1
 8009766:	1e61      	subs	r1, r4, #1
 8009768:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800976c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009770:	42a9      	cmp	r1, r5
 8009772:	d1fb      	bne.n	800976c <__sccl+0x1c>
 8009774:	b90b      	cbnz	r3, 800977a <__sccl+0x2a>
 8009776:	3801      	subs	r0, #1
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	f082 0201 	eor.w	r2, r2, #1
 800977e:	54e2      	strb	r2, [r4, r3]
 8009780:	4605      	mov	r5, r0
 8009782:	4628      	mov	r0, r5
 8009784:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009788:	292d      	cmp	r1, #45	; 0x2d
 800978a:	d006      	beq.n	800979a <__sccl+0x4a>
 800978c:	295d      	cmp	r1, #93	; 0x5d
 800978e:	d0f3      	beq.n	8009778 <__sccl+0x28>
 8009790:	b909      	cbnz	r1, 8009796 <__sccl+0x46>
 8009792:	4628      	mov	r0, r5
 8009794:	e7f0      	b.n	8009778 <__sccl+0x28>
 8009796:	460b      	mov	r3, r1
 8009798:	e7f1      	b.n	800977e <__sccl+0x2e>
 800979a:	786e      	ldrb	r6, [r5, #1]
 800979c:	2e5d      	cmp	r6, #93	; 0x5d
 800979e:	d0fa      	beq.n	8009796 <__sccl+0x46>
 80097a0:	42b3      	cmp	r3, r6
 80097a2:	dcf8      	bgt.n	8009796 <__sccl+0x46>
 80097a4:	3502      	adds	r5, #2
 80097a6:	4619      	mov	r1, r3
 80097a8:	3101      	adds	r1, #1
 80097aa:	428e      	cmp	r6, r1
 80097ac:	5462      	strb	r2, [r4, r1]
 80097ae:	dcfb      	bgt.n	80097a8 <__sccl+0x58>
 80097b0:	1af1      	subs	r1, r6, r3
 80097b2:	3901      	subs	r1, #1
 80097b4:	1c58      	adds	r0, r3, #1
 80097b6:	42b3      	cmp	r3, r6
 80097b8:	bfa8      	it	ge
 80097ba:	2100      	movge	r1, #0
 80097bc:	1843      	adds	r3, r0, r1
 80097be:	e7e0      	b.n	8009782 <__sccl+0x32>

080097c0 <_strtol_l.constprop.0>:
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c6:	d001      	beq.n	80097cc <_strtol_l.constprop.0+0xc>
 80097c8:	2b24      	cmp	r3, #36	; 0x24
 80097ca:	d906      	bls.n	80097da <_strtol_l.constprop.0+0x1a>
 80097cc:	f7ff fb32 	bl	8008e34 <__errno>
 80097d0:	2316      	movs	r3, #22
 80097d2:	6003      	str	r3, [r0, #0]
 80097d4:	2000      	movs	r0, #0
 80097d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098c0 <_strtol_l.constprop.0+0x100>
 80097de:	460d      	mov	r5, r1
 80097e0:	462e      	mov	r6, r5
 80097e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80097ea:	f017 0708 	ands.w	r7, r7, #8
 80097ee:	d1f7      	bne.n	80097e0 <_strtol_l.constprop.0+0x20>
 80097f0:	2c2d      	cmp	r4, #45	; 0x2d
 80097f2:	d132      	bne.n	800985a <_strtol_l.constprop.0+0x9a>
 80097f4:	782c      	ldrb	r4, [r5, #0]
 80097f6:	2701      	movs	r7, #1
 80097f8:	1cb5      	adds	r5, r6, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d05b      	beq.n	80098b6 <_strtol_l.constprop.0+0xf6>
 80097fe:	2b10      	cmp	r3, #16
 8009800:	d109      	bne.n	8009816 <_strtol_l.constprop.0+0x56>
 8009802:	2c30      	cmp	r4, #48	; 0x30
 8009804:	d107      	bne.n	8009816 <_strtol_l.constprop.0+0x56>
 8009806:	782c      	ldrb	r4, [r5, #0]
 8009808:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800980c:	2c58      	cmp	r4, #88	; 0x58
 800980e:	d14d      	bne.n	80098ac <_strtol_l.constprop.0+0xec>
 8009810:	786c      	ldrb	r4, [r5, #1]
 8009812:	2310      	movs	r3, #16
 8009814:	3502      	adds	r5, #2
 8009816:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800981a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800981e:	f04f 0c00 	mov.w	ip, #0
 8009822:	fbb8 f9f3 	udiv	r9, r8, r3
 8009826:	4666      	mov	r6, ip
 8009828:	fb03 8a19 	mls	sl, r3, r9, r8
 800982c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009830:	f1be 0f09 	cmp.w	lr, #9
 8009834:	d816      	bhi.n	8009864 <_strtol_l.constprop.0+0xa4>
 8009836:	4674      	mov	r4, lr
 8009838:	42a3      	cmp	r3, r4
 800983a:	dd24      	ble.n	8009886 <_strtol_l.constprop.0+0xc6>
 800983c:	f1bc 0f00 	cmp.w	ip, #0
 8009840:	db1e      	blt.n	8009880 <_strtol_l.constprop.0+0xc0>
 8009842:	45b1      	cmp	r9, r6
 8009844:	d31c      	bcc.n	8009880 <_strtol_l.constprop.0+0xc0>
 8009846:	d101      	bne.n	800984c <_strtol_l.constprop.0+0x8c>
 8009848:	45a2      	cmp	sl, r4
 800984a:	db19      	blt.n	8009880 <_strtol_l.constprop.0+0xc0>
 800984c:	fb06 4603 	mla	r6, r6, r3, r4
 8009850:	f04f 0c01 	mov.w	ip, #1
 8009854:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009858:	e7e8      	b.n	800982c <_strtol_l.constprop.0+0x6c>
 800985a:	2c2b      	cmp	r4, #43	; 0x2b
 800985c:	bf04      	itt	eq
 800985e:	782c      	ldrbeq	r4, [r5, #0]
 8009860:	1cb5      	addeq	r5, r6, #2
 8009862:	e7ca      	b.n	80097fa <_strtol_l.constprop.0+0x3a>
 8009864:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009868:	f1be 0f19 	cmp.w	lr, #25
 800986c:	d801      	bhi.n	8009872 <_strtol_l.constprop.0+0xb2>
 800986e:	3c37      	subs	r4, #55	; 0x37
 8009870:	e7e2      	b.n	8009838 <_strtol_l.constprop.0+0x78>
 8009872:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009876:	f1be 0f19 	cmp.w	lr, #25
 800987a:	d804      	bhi.n	8009886 <_strtol_l.constprop.0+0xc6>
 800987c:	3c57      	subs	r4, #87	; 0x57
 800987e:	e7db      	b.n	8009838 <_strtol_l.constprop.0+0x78>
 8009880:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009884:	e7e6      	b.n	8009854 <_strtol_l.constprop.0+0x94>
 8009886:	f1bc 0f00 	cmp.w	ip, #0
 800988a:	da05      	bge.n	8009898 <_strtol_l.constprop.0+0xd8>
 800988c:	2322      	movs	r3, #34	; 0x22
 800988e:	6003      	str	r3, [r0, #0]
 8009890:	4646      	mov	r6, r8
 8009892:	b942      	cbnz	r2, 80098a6 <_strtol_l.constprop.0+0xe6>
 8009894:	4630      	mov	r0, r6
 8009896:	e79e      	b.n	80097d6 <_strtol_l.constprop.0+0x16>
 8009898:	b107      	cbz	r7, 800989c <_strtol_l.constprop.0+0xdc>
 800989a:	4276      	negs	r6, r6
 800989c:	2a00      	cmp	r2, #0
 800989e:	d0f9      	beq.n	8009894 <_strtol_l.constprop.0+0xd4>
 80098a0:	f1bc 0f00 	cmp.w	ip, #0
 80098a4:	d000      	beq.n	80098a8 <_strtol_l.constprop.0+0xe8>
 80098a6:	1e69      	subs	r1, r5, #1
 80098a8:	6011      	str	r1, [r2, #0]
 80098aa:	e7f3      	b.n	8009894 <_strtol_l.constprop.0+0xd4>
 80098ac:	2430      	movs	r4, #48	; 0x30
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1b1      	bne.n	8009816 <_strtol_l.constprop.0+0x56>
 80098b2:	2308      	movs	r3, #8
 80098b4:	e7af      	b.n	8009816 <_strtol_l.constprop.0+0x56>
 80098b6:	2c30      	cmp	r4, #48	; 0x30
 80098b8:	d0a5      	beq.n	8009806 <_strtol_l.constprop.0+0x46>
 80098ba:	230a      	movs	r3, #10
 80098bc:	e7ab      	b.n	8009816 <_strtol_l.constprop.0+0x56>
 80098be:	bf00      	nop
 80098c0:	0800c0bc 	.word	0x0800c0bc

080098c4 <_strtol_r>:
 80098c4:	f7ff bf7c 	b.w	80097c0 <_strtol_l.constprop.0>

080098c8 <_strtoul_l.constprop.0>:
 80098c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098cc:	4f36      	ldr	r7, [pc, #216]	; (80099a8 <_strtoul_l.constprop.0+0xe0>)
 80098ce:	4686      	mov	lr, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	4628      	mov	r0, r5
 80098d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098d8:	5de6      	ldrb	r6, [r4, r7]
 80098da:	f016 0608 	ands.w	r6, r6, #8
 80098de:	d1f8      	bne.n	80098d2 <_strtoul_l.constprop.0+0xa>
 80098e0:	2c2d      	cmp	r4, #45	; 0x2d
 80098e2:	d12f      	bne.n	8009944 <_strtoul_l.constprop.0+0x7c>
 80098e4:	782c      	ldrb	r4, [r5, #0]
 80098e6:	2601      	movs	r6, #1
 80098e8:	1c85      	adds	r5, r0, #2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d057      	beq.n	800999e <_strtoul_l.constprop.0+0xd6>
 80098ee:	2b10      	cmp	r3, #16
 80098f0:	d109      	bne.n	8009906 <_strtoul_l.constprop.0+0x3e>
 80098f2:	2c30      	cmp	r4, #48	; 0x30
 80098f4:	d107      	bne.n	8009906 <_strtoul_l.constprop.0+0x3e>
 80098f6:	7828      	ldrb	r0, [r5, #0]
 80098f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098fc:	2858      	cmp	r0, #88	; 0x58
 80098fe:	d149      	bne.n	8009994 <_strtoul_l.constprop.0+0xcc>
 8009900:	786c      	ldrb	r4, [r5, #1]
 8009902:	2310      	movs	r3, #16
 8009904:	3502      	adds	r5, #2
 8009906:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800990a:	2700      	movs	r7, #0
 800990c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009910:	fb03 f908 	mul.w	r9, r3, r8
 8009914:	ea6f 0909 	mvn.w	r9, r9
 8009918:	4638      	mov	r0, r7
 800991a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800991e:	f1bc 0f09 	cmp.w	ip, #9
 8009922:	d814      	bhi.n	800994e <_strtoul_l.constprop.0+0x86>
 8009924:	4664      	mov	r4, ip
 8009926:	42a3      	cmp	r3, r4
 8009928:	dd22      	ble.n	8009970 <_strtoul_l.constprop.0+0xa8>
 800992a:	2f00      	cmp	r7, #0
 800992c:	db1d      	blt.n	800996a <_strtoul_l.constprop.0+0xa2>
 800992e:	4580      	cmp	r8, r0
 8009930:	d31b      	bcc.n	800996a <_strtoul_l.constprop.0+0xa2>
 8009932:	d101      	bne.n	8009938 <_strtoul_l.constprop.0+0x70>
 8009934:	45a1      	cmp	r9, r4
 8009936:	db18      	blt.n	800996a <_strtoul_l.constprop.0+0xa2>
 8009938:	fb00 4003 	mla	r0, r0, r3, r4
 800993c:	2701      	movs	r7, #1
 800993e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009942:	e7ea      	b.n	800991a <_strtoul_l.constprop.0+0x52>
 8009944:	2c2b      	cmp	r4, #43	; 0x2b
 8009946:	bf04      	itt	eq
 8009948:	782c      	ldrbeq	r4, [r5, #0]
 800994a:	1c85      	addeq	r5, r0, #2
 800994c:	e7cd      	b.n	80098ea <_strtoul_l.constprop.0+0x22>
 800994e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009952:	f1bc 0f19 	cmp.w	ip, #25
 8009956:	d801      	bhi.n	800995c <_strtoul_l.constprop.0+0x94>
 8009958:	3c37      	subs	r4, #55	; 0x37
 800995a:	e7e4      	b.n	8009926 <_strtoul_l.constprop.0+0x5e>
 800995c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009960:	f1bc 0f19 	cmp.w	ip, #25
 8009964:	d804      	bhi.n	8009970 <_strtoul_l.constprop.0+0xa8>
 8009966:	3c57      	subs	r4, #87	; 0x57
 8009968:	e7dd      	b.n	8009926 <_strtoul_l.constprop.0+0x5e>
 800996a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800996e:	e7e6      	b.n	800993e <_strtoul_l.constprop.0+0x76>
 8009970:	2f00      	cmp	r7, #0
 8009972:	da07      	bge.n	8009984 <_strtoul_l.constprop.0+0xbc>
 8009974:	2322      	movs	r3, #34	; 0x22
 8009976:	f8ce 3000 	str.w	r3, [lr]
 800997a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800997e:	b932      	cbnz	r2, 800998e <_strtoul_l.constprop.0+0xc6>
 8009980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009984:	b106      	cbz	r6, 8009988 <_strtoul_l.constprop.0+0xc0>
 8009986:	4240      	negs	r0, r0
 8009988:	2a00      	cmp	r2, #0
 800998a:	d0f9      	beq.n	8009980 <_strtoul_l.constprop.0+0xb8>
 800998c:	b107      	cbz	r7, 8009990 <_strtoul_l.constprop.0+0xc8>
 800998e:	1e69      	subs	r1, r5, #1
 8009990:	6011      	str	r1, [r2, #0]
 8009992:	e7f5      	b.n	8009980 <_strtoul_l.constprop.0+0xb8>
 8009994:	2430      	movs	r4, #48	; 0x30
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1b5      	bne.n	8009906 <_strtoul_l.constprop.0+0x3e>
 800999a:	2308      	movs	r3, #8
 800999c:	e7b3      	b.n	8009906 <_strtoul_l.constprop.0+0x3e>
 800999e:	2c30      	cmp	r4, #48	; 0x30
 80099a0:	d0a9      	beq.n	80098f6 <_strtoul_l.constprop.0+0x2e>
 80099a2:	230a      	movs	r3, #10
 80099a4:	e7af      	b.n	8009906 <_strtoul_l.constprop.0+0x3e>
 80099a6:	bf00      	nop
 80099a8:	0800c0bc 	.word	0x0800c0bc

080099ac <_strtoul_r>:
 80099ac:	f7ff bf8c 	b.w	80098c8 <_strtoul_l.constprop.0>

080099b0 <__submore>:
 80099b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b4:	460c      	mov	r4, r1
 80099b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80099b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099bc:	4299      	cmp	r1, r3
 80099be:	d11d      	bne.n	80099fc <__submore+0x4c>
 80099c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099c4:	f7ff fae2 	bl	8008f8c <_malloc_r>
 80099c8:	b918      	cbnz	r0, 80099d2 <__submore+0x22>
 80099ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80099d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80099dc:	6360      	str	r0, [r4, #52]	; 0x34
 80099de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80099e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80099e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80099ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80099ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80099f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80099f6:	6020      	str	r0, [r4, #0]
 80099f8:	2000      	movs	r0, #0
 80099fa:	e7e8      	b.n	80099ce <__submore+0x1e>
 80099fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80099fe:	0077      	lsls	r7, r6, #1
 8009a00:	463a      	mov	r2, r7
 8009a02:	f000 f811 	bl	8009a28 <_realloc_r>
 8009a06:	4605      	mov	r5, r0
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d0de      	beq.n	80099ca <__submore+0x1a>
 8009a0c:	eb00 0806 	add.w	r8, r0, r6
 8009a10:	4601      	mov	r1, r0
 8009a12:	4632      	mov	r2, r6
 8009a14:	4640      	mov	r0, r8
 8009a16:	f7ff fa37 	bl	8008e88 <memcpy>
 8009a1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009a1e:	f8c4 8000 	str.w	r8, [r4]
 8009a22:	e7e9      	b.n	80099f8 <__submore+0x48>

08009a24 <__retarget_lock_acquire_recursive>:
 8009a24:	4770      	bx	lr

08009a26 <__retarget_lock_release_recursive>:
 8009a26:	4770      	bx	lr

08009a28 <_realloc_r>:
 8009a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	4614      	mov	r4, r2
 8009a30:	460e      	mov	r6, r1
 8009a32:	b921      	cbnz	r1, 8009a3e <_realloc_r+0x16>
 8009a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a38:	4611      	mov	r1, r2
 8009a3a:	f7ff baa7 	b.w	8008f8c <_malloc_r>
 8009a3e:	b92a      	cbnz	r2, 8009a4c <_realloc_r+0x24>
 8009a40:	f7ff fa38 	bl	8008eb4 <_free_r>
 8009a44:	4625      	mov	r5, r4
 8009a46:	4628      	mov	r0, r5
 8009a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4c:	f000 f81b 	bl	8009a86 <_malloc_usable_size_r>
 8009a50:	4284      	cmp	r4, r0
 8009a52:	4607      	mov	r7, r0
 8009a54:	d802      	bhi.n	8009a5c <_realloc_r+0x34>
 8009a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a5a:	d812      	bhi.n	8009a82 <_realloc_r+0x5a>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7ff fa94 	bl	8008f8c <_malloc_r>
 8009a64:	4605      	mov	r5, r0
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d0ed      	beq.n	8009a46 <_realloc_r+0x1e>
 8009a6a:	42bc      	cmp	r4, r7
 8009a6c:	4622      	mov	r2, r4
 8009a6e:	4631      	mov	r1, r6
 8009a70:	bf28      	it	cs
 8009a72:	463a      	movcs	r2, r7
 8009a74:	f7ff fa08 	bl	8008e88 <memcpy>
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	f7ff fa1a 	bl	8008eb4 <_free_r>
 8009a80:	e7e1      	b.n	8009a46 <_realloc_r+0x1e>
 8009a82:	4635      	mov	r5, r6
 8009a84:	e7df      	b.n	8009a46 <_realloc_r+0x1e>

08009a86 <_malloc_usable_size_r>:
 8009a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8a:	1f18      	subs	r0, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bfbc      	itt	lt
 8009a90:	580b      	ldrlt	r3, [r1, r0]
 8009a92:	18c0      	addlt	r0, r0, r3
 8009a94:	4770      	bx	lr
	...

08009a98 <cos>:
 8009a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a9a:	ec53 2b10 	vmov	r2, r3, d0
 8009a9e:	4826      	ldr	r0, [pc, #152]	; (8009b38 <cos+0xa0>)
 8009aa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009aa4:	4281      	cmp	r1, r0
 8009aa6:	dc06      	bgt.n	8009ab6 <cos+0x1e>
 8009aa8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009b30 <cos+0x98>
 8009aac:	b005      	add	sp, #20
 8009aae:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab2:	f001 ba15 	b.w	800aee0 <__kernel_cos>
 8009ab6:	4821      	ldr	r0, [pc, #132]	; (8009b3c <cos+0xa4>)
 8009ab8:	4281      	cmp	r1, r0
 8009aba:	dd09      	ble.n	8009ad0 <cos+0x38>
 8009abc:	ee10 0a10 	vmov	r0, s0
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f7f6 fbf9 	bl	80002b8 <__aeabi_dsub>
 8009ac6:	ec41 0b10 	vmov	d0, r0, r1
 8009aca:	b005      	add	sp, #20
 8009acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ad0:	4668      	mov	r0, sp
 8009ad2:	f000 ff45 	bl	800a960 <__ieee754_rem_pio2>
 8009ad6:	f000 0003 	and.w	r0, r0, #3
 8009ada:	2801      	cmp	r0, #1
 8009adc:	d00b      	beq.n	8009af6 <cos+0x5e>
 8009ade:	2802      	cmp	r0, #2
 8009ae0:	d016      	beq.n	8009b10 <cos+0x78>
 8009ae2:	b9e0      	cbnz	r0, 8009b1e <cos+0x86>
 8009ae4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ae8:	ed9d 0b00 	vldr	d0, [sp]
 8009aec:	f001 f9f8 	bl	800aee0 <__kernel_cos>
 8009af0:	ec51 0b10 	vmov	r0, r1, d0
 8009af4:	e7e7      	b.n	8009ac6 <cos+0x2e>
 8009af6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009afa:	ed9d 0b00 	vldr	d0, [sp]
 8009afe:	f001 fe07 	bl	800b710 <__kernel_sin>
 8009b02:	ec53 2b10 	vmov	r2, r3, d0
 8009b06:	ee10 0a10 	vmov	r0, s0
 8009b0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b0e:	e7da      	b.n	8009ac6 <cos+0x2e>
 8009b10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b14:	ed9d 0b00 	vldr	d0, [sp]
 8009b18:	f001 f9e2 	bl	800aee0 <__kernel_cos>
 8009b1c:	e7f1      	b.n	8009b02 <cos+0x6a>
 8009b1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b22:	ed9d 0b00 	vldr	d0, [sp]
 8009b26:	2001      	movs	r0, #1
 8009b28:	f001 fdf2 	bl	800b710 <__kernel_sin>
 8009b2c:	e7e0      	b.n	8009af0 <cos+0x58>
 8009b2e:	bf00      	nop
	...
 8009b38:	3fe921fb 	.word	0x3fe921fb
 8009b3c:	7fefffff 	.word	0x7fefffff

08009b40 <round>:
 8009b40:	ec51 0b10 	vmov	r0, r1, d0
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8009b4a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8009b4e:	2c13      	cmp	r4, #19
 8009b50:	ee10 2a10 	vmov	r2, s0
 8009b54:	460b      	mov	r3, r1
 8009b56:	dc19      	bgt.n	8009b8c <round+0x4c>
 8009b58:	2c00      	cmp	r4, #0
 8009b5a:	da09      	bge.n	8009b70 <round+0x30>
 8009b5c:	3401      	adds	r4, #1
 8009b5e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009b62:	d103      	bne.n	8009b6c <round+0x2c>
 8009b64:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	e028      	b.n	8009bc2 <round+0x82>
 8009b70:	4d15      	ldr	r5, [pc, #84]	; (8009bc8 <round+0x88>)
 8009b72:	4125      	asrs	r5, r4
 8009b74:	ea01 0605 	and.w	r6, r1, r5
 8009b78:	4332      	orrs	r2, r6
 8009b7a:	d00e      	beq.n	8009b9a <round+0x5a>
 8009b7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009b80:	fa42 f404 	asr.w	r4, r2, r4
 8009b84:	4423      	add	r3, r4
 8009b86:	ea23 0305 	bic.w	r3, r3, r5
 8009b8a:	e7ef      	b.n	8009b6c <round+0x2c>
 8009b8c:	2c33      	cmp	r4, #51	; 0x33
 8009b8e:	dd07      	ble.n	8009ba0 <round+0x60>
 8009b90:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8009b94:	d101      	bne.n	8009b9a <round+0x5a>
 8009b96:	f7f6 fb91 	bl	80002bc <__adddf3>
 8009b9a:	ec41 0b10 	vmov	d0, r0, r1
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8009ba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009ba8:	40f5      	lsrs	r5, r6
 8009baa:	4228      	tst	r0, r5
 8009bac:	d0f5      	beq.n	8009b9a <round+0x5a>
 8009bae:	2101      	movs	r1, #1
 8009bb0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009bb4:	fa01 f404 	lsl.w	r4, r1, r4
 8009bb8:	1912      	adds	r2, r2, r4
 8009bba:	bf28      	it	cs
 8009bbc:	185b      	addcs	r3, r3, r1
 8009bbe:	ea22 0205 	bic.w	r2, r2, r5
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	e7e8      	b.n	8009b9a <round+0x5a>
 8009bc8:	000fffff 	.word	0x000fffff
 8009bcc:	00000000 	.word	0x00000000

08009bd0 <sin>:
 8009bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bd2:	ec53 2b10 	vmov	r2, r3, d0
 8009bd6:	4828      	ldr	r0, [pc, #160]	; (8009c78 <sin+0xa8>)
 8009bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bdc:	4281      	cmp	r1, r0
 8009bde:	dc07      	bgt.n	8009bf0 <sin+0x20>
 8009be0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009c70 <sin+0xa0>
 8009be4:	2000      	movs	r0, #0
 8009be6:	b005      	add	sp, #20
 8009be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bec:	f001 bd90 	b.w	800b710 <__kernel_sin>
 8009bf0:	4822      	ldr	r0, [pc, #136]	; (8009c7c <sin+0xac>)
 8009bf2:	4281      	cmp	r1, r0
 8009bf4:	dd09      	ble.n	8009c0a <sin+0x3a>
 8009bf6:	ee10 0a10 	vmov	r0, s0
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f7f6 fb5c 	bl	80002b8 <__aeabi_dsub>
 8009c00:	ec41 0b10 	vmov	d0, r0, r1
 8009c04:	b005      	add	sp, #20
 8009c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c0a:	4668      	mov	r0, sp
 8009c0c:	f000 fea8 	bl	800a960 <__ieee754_rem_pio2>
 8009c10:	f000 0003 	and.w	r0, r0, #3
 8009c14:	2801      	cmp	r0, #1
 8009c16:	d00c      	beq.n	8009c32 <sin+0x62>
 8009c18:	2802      	cmp	r0, #2
 8009c1a:	d011      	beq.n	8009c40 <sin+0x70>
 8009c1c:	b9f0      	cbnz	r0, 8009c5c <sin+0x8c>
 8009c1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c22:	ed9d 0b00 	vldr	d0, [sp]
 8009c26:	2001      	movs	r0, #1
 8009c28:	f001 fd72 	bl	800b710 <__kernel_sin>
 8009c2c:	ec51 0b10 	vmov	r0, r1, d0
 8009c30:	e7e6      	b.n	8009c00 <sin+0x30>
 8009c32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c36:	ed9d 0b00 	vldr	d0, [sp]
 8009c3a:	f001 f951 	bl	800aee0 <__kernel_cos>
 8009c3e:	e7f5      	b.n	8009c2c <sin+0x5c>
 8009c40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c44:	ed9d 0b00 	vldr	d0, [sp]
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f001 fd61 	bl	800b710 <__kernel_sin>
 8009c4e:	ec53 2b10 	vmov	r2, r3, d0
 8009c52:	ee10 0a10 	vmov	r0, s0
 8009c56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c5a:	e7d1      	b.n	8009c00 <sin+0x30>
 8009c5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c60:	ed9d 0b00 	vldr	d0, [sp]
 8009c64:	f001 f93c 	bl	800aee0 <__kernel_cos>
 8009c68:	e7f1      	b.n	8009c4e <sin+0x7e>
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w
	...
 8009c78:	3fe921fb 	.word	0x3fe921fb
 8009c7c:	7fefffff 	.word	0x7fefffff

08009c80 <atan2>:
 8009c80:	f000 b872 	b.w	8009d68 <__ieee754_atan2>

08009c84 <pow>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	ed2d 8b02 	vpush	{d8}
 8009c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8009c8e:	eef0 8a60 	vmov.f32	s17, s1
 8009c92:	ec55 4b11 	vmov	r4, r5, d1
 8009c96:	f000 f933 	bl	8009f00 <__ieee754_pow>
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	ec57 6b10 	vmov	r6, r7, d0
 8009ca6:	f7f6 ff59 	bl	8000b5c <__aeabi_dcmpun>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d13b      	bne.n	8009d26 <pow+0xa2>
 8009cae:	ec51 0b18 	vmov	r0, r1, d8
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f7f6 ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8009cba:	b1b8      	cbz	r0, 8009cec <pow+0x68>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	4629      	mov	r1, r5
 8009cc4:	f7f6 ff18 	bl	8000af8 <__aeabi_dcmpeq>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d146      	bne.n	8009d5a <pow+0xd6>
 8009ccc:	ec45 4b10 	vmov	d0, r4, r5
 8009cd0:	f001 ffb7 	bl	800bc42 <finite>
 8009cd4:	b338      	cbz	r0, 8009d26 <pow+0xa2>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f7f6 ff15 	bl	8000b0c <__aeabi_dcmplt>
 8009ce2:	b300      	cbz	r0, 8009d26 <pow+0xa2>
 8009ce4:	f7ff f8a6 	bl	8008e34 <__errno>
 8009ce8:	2322      	movs	r3, #34	; 0x22
 8009cea:	e01b      	b.n	8009d24 <pow+0xa0>
 8009cec:	ec47 6b10 	vmov	d0, r6, r7
 8009cf0:	f001 ffa7 	bl	800bc42 <finite>
 8009cf4:	b9e0      	cbnz	r0, 8009d30 <pow+0xac>
 8009cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8009cfa:	eef0 0a68 	vmov.f32	s1, s17
 8009cfe:	f001 ffa0 	bl	800bc42 <finite>
 8009d02:	b1a8      	cbz	r0, 8009d30 <pow+0xac>
 8009d04:	ec45 4b10 	vmov	d0, r4, r5
 8009d08:	f001 ff9b 	bl	800bc42 <finite>
 8009d0c:	b180      	cbz	r0, 8009d30 <pow+0xac>
 8009d0e:	4632      	mov	r2, r6
 8009d10:	463b      	mov	r3, r7
 8009d12:	4630      	mov	r0, r6
 8009d14:	4639      	mov	r1, r7
 8009d16:	f7f6 ff21 	bl	8000b5c <__aeabi_dcmpun>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d0e2      	beq.n	8009ce4 <pow+0x60>
 8009d1e:	f7ff f889 	bl	8008e34 <__errno>
 8009d22:	2321      	movs	r3, #33	; 0x21
 8009d24:	6003      	str	r3, [r0, #0]
 8009d26:	ecbd 8b02 	vpop	{d8}
 8009d2a:	ec47 6b10 	vmov	d0, r6, r7
 8009d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d30:	2200      	movs	r2, #0
 8009d32:	2300      	movs	r3, #0
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fede 	bl	8000af8 <__aeabi_dcmpeq>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0f2      	beq.n	8009d26 <pow+0xa2>
 8009d40:	eeb0 0a48 	vmov.f32	s0, s16
 8009d44:	eef0 0a68 	vmov.f32	s1, s17
 8009d48:	f001 ff7b 	bl	800bc42 <finite>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d0ea      	beq.n	8009d26 <pow+0xa2>
 8009d50:	ec45 4b10 	vmov	d0, r4, r5
 8009d54:	f001 ff75 	bl	800bc42 <finite>
 8009d58:	e7c3      	b.n	8009ce2 <pow+0x5e>
 8009d5a:	4f01      	ldr	r7, [pc, #4]	; (8009d60 <pow+0xdc>)
 8009d5c:	2600      	movs	r6, #0
 8009d5e:	e7e2      	b.n	8009d26 <pow+0xa2>
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	00000000 	.word	0x00000000

08009d68 <__ieee754_atan2>:
 8009d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d6c:	ec57 6b11 	vmov	r6, r7, d1
 8009d70:	4273      	negs	r3, r6
 8009d72:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009ef8 <__ieee754_atan2+0x190>
 8009d76:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009d7a:	4333      	orrs	r3, r6
 8009d7c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d80:	4573      	cmp	r3, lr
 8009d82:	ec51 0b10 	vmov	r0, r1, d0
 8009d86:	ee11 8a10 	vmov	r8, s2
 8009d8a:	d80a      	bhi.n	8009da2 <__ieee754_atan2+0x3a>
 8009d8c:	4244      	negs	r4, r0
 8009d8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d92:	4304      	orrs	r4, r0
 8009d94:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009d98:	4574      	cmp	r4, lr
 8009d9a:	ee10 9a10 	vmov	r9, s0
 8009d9e:	468c      	mov	ip, r1
 8009da0:	d907      	bls.n	8009db2 <__ieee754_atan2+0x4a>
 8009da2:	4632      	mov	r2, r6
 8009da4:	463b      	mov	r3, r7
 8009da6:	f7f6 fa89 	bl	80002bc <__adddf3>
 8009daa:	ec41 0b10 	vmov	d0, r0, r1
 8009dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009db6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009dba:	4334      	orrs	r4, r6
 8009dbc:	d103      	bne.n	8009dc6 <__ieee754_atan2+0x5e>
 8009dbe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc2:	f001 bd95 	b.w	800b8f0 <atan>
 8009dc6:	17bc      	asrs	r4, r7, #30
 8009dc8:	f004 0402 	and.w	r4, r4, #2
 8009dcc:	ea53 0909 	orrs.w	r9, r3, r9
 8009dd0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009dd4:	d107      	bne.n	8009de6 <__ieee754_atan2+0x7e>
 8009dd6:	2c02      	cmp	r4, #2
 8009dd8:	d060      	beq.n	8009e9c <__ieee754_atan2+0x134>
 8009dda:	2c03      	cmp	r4, #3
 8009ddc:	d1e5      	bne.n	8009daa <__ieee754_atan2+0x42>
 8009dde:	a142      	add	r1, pc, #264	; (adr r1, 8009ee8 <__ieee754_atan2+0x180>)
 8009de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de4:	e7e1      	b.n	8009daa <__ieee754_atan2+0x42>
 8009de6:	ea52 0808 	orrs.w	r8, r2, r8
 8009dea:	d106      	bne.n	8009dfa <__ieee754_atan2+0x92>
 8009dec:	f1bc 0f00 	cmp.w	ip, #0
 8009df0:	da5f      	bge.n	8009eb2 <__ieee754_atan2+0x14a>
 8009df2:	a13f      	add	r1, pc, #252	; (adr r1, 8009ef0 <__ieee754_atan2+0x188>)
 8009df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df8:	e7d7      	b.n	8009daa <__ieee754_atan2+0x42>
 8009dfa:	4572      	cmp	r2, lr
 8009dfc:	d10f      	bne.n	8009e1e <__ieee754_atan2+0xb6>
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009e04:	d107      	bne.n	8009e16 <__ieee754_atan2+0xae>
 8009e06:	2c02      	cmp	r4, #2
 8009e08:	d84c      	bhi.n	8009ea4 <__ieee754_atan2+0x13c>
 8009e0a:	4b35      	ldr	r3, [pc, #212]	; (8009ee0 <__ieee754_atan2+0x178>)
 8009e0c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009e10:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e14:	e7c9      	b.n	8009daa <__ieee754_atan2+0x42>
 8009e16:	2c02      	cmp	r4, #2
 8009e18:	d848      	bhi.n	8009eac <__ieee754_atan2+0x144>
 8009e1a:	4b32      	ldr	r3, [pc, #200]	; (8009ee4 <__ieee754_atan2+0x17c>)
 8009e1c:	e7f6      	b.n	8009e0c <__ieee754_atan2+0xa4>
 8009e1e:	4573      	cmp	r3, lr
 8009e20:	d0e4      	beq.n	8009dec <__ieee754_atan2+0x84>
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009e28:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e2c:	da1e      	bge.n	8009e6c <__ieee754_atan2+0x104>
 8009e2e:	2f00      	cmp	r7, #0
 8009e30:	da01      	bge.n	8009e36 <__ieee754_atan2+0xce>
 8009e32:	323c      	adds	r2, #60	; 0x3c
 8009e34:	db1e      	blt.n	8009e74 <__ieee754_atan2+0x10c>
 8009e36:	4632      	mov	r2, r6
 8009e38:	463b      	mov	r3, r7
 8009e3a:	f7f6 fd1f 	bl	800087c <__aeabi_ddiv>
 8009e3e:	ec41 0b10 	vmov	d0, r0, r1
 8009e42:	f001 fef5 	bl	800bc30 <fabs>
 8009e46:	f001 fd53 	bl	800b8f0 <atan>
 8009e4a:	ec51 0b10 	vmov	r0, r1, d0
 8009e4e:	2c01      	cmp	r4, #1
 8009e50:	d013      	beq.n	8009e7a <__ieee754_atan2+0x112>
 8009e52:	2c02      	cmp	r4, #2
 8009e54:	d015      	beq.n	8009e82 <__ieee754_atan2+0x11a>
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	d0a7      	beq.n	8009daa <__ieee754_atan2+0x42>
 8009e5a:	a319      	add	r3, pc, #100	; (adr r3, 8009ec0 <__ieee754_atan2+0x158>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 fa2a 	bl	80002b8 <__aeabi_dsub>
 8009e64:	a318      	add	r3, pc, #96	; (adr r3, 8009ec8 <__ieee754_atan2+0x160>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	e014      	b.n	8009e96 <__ieee754_atan2+0x12e>
 8009e6c:	a118      	add	r1, pc, #96	; (adr r1, 8009ed0 <__ieee754_atan2+0x168>)
 8009e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e72:	e7ec      	b.n	8009e4e <__ieee754_atan2+0xe6>
 8009e74:	2000      	movs	r0, #0
 8009e76:	2100      	movs	r1, #0
 8009e78:	e7e9      	b.n	8009e4e <__ieee754_atan2+0xe6>
 8009e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e7e:	4619      	mov	r1, r3
 8009e80:	e793      	b.n	8009daa <__ieee754_atan2+0x42>
 8009e82:	a30f      	add	r3, pc, #60	; (adr r3, 8009ec0 <__ieee754_atan2+0x158>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f7f6 fa16 	bl	80002b8 <__aeabi_dsub>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	a10d      	add	r1, pc, #52	; (adr r1, 8009ec8 <__ieee754_atan2+0x160>)
 8009e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e96:	f7f6 fa0f 	bl	80002b8 <__aeabi_dsub>
 8009e9a:	e786      	b.n	8009daa <__ieee754_atan2+0x42>
 8009e9c:	a10a      	add	r1, pc, #40	; (adr r1, 8009ec8 <__ieee754_atan2+0x160>)
 8009e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea2:	e782      	b.n	8009daa <__ieee754_atan2+0x42>
 8009ea4:	a10c      	add	r1, pc, #48	; (adr r1, 8009ed8 <__ieee754_atan2+0x170>)
 8009ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eaa:	e77e      	b.n	8009daa <__ieee754_atan2+0x42>
 8009eac:	2000      	movs	r0, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	e77b      	b.n	8009daa <__ieee754_atan2+0x42>
 8009eb2:	a107      	add	r1, pc, #28	; (adr r1, 8009ed0 <__ieee754_atan2+0x168>)
 8009eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb8:	e777      	b.n	8009daa <__ieee754_atan2+0x42>
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w
 8009ec0:	33145c07 	.word	0x33145c07
 8009ec4:	3ca1a626 	.word	0x3ca1a626
 8009ec8:	54442d18 	.word	0x54442d18
 8009ecc:	400921fb 	.word	0x400921fb
 8009ed0:	54442d18 	.word	0x54442d18
 8009ed4:	3ff921fb 	.word	0x3ff921fb
 8009ed8:	54442d18 	.word	0x54442d18
 8009edc:	3fe921fb 	.word	0x3fe921fb
 8009ee0:	0800c220 	.word	0x0800c220
 8009ee4:	0800c238 	.word	0x0800c238
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	c00921fb 	.word	0xc00921fb
 8009ef0:	54442d18 	.word	0x54442d18
 8009ef4:	bff921fb 	.word	0xbff921fb
 8009ef8:	7ff00000 	.word	0x7ff00000
 8009efc:	00000000 	.word	0x00000000

08009f00 <__ieee754_pow>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	ed2d 8b06 	vpush	{d8-d10}
 8009f08:	b089      	sub	sp, #36	; 0x24
 8009f0a:	ed8d 1b00 	vstr	d1, [sp]
 8009f0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009f12:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009f16:	ea58 0102 	orrs.w	r1, r8, r2
 8009f1a:	ec57 6b10 	vmov	r6, r7, d0
 8009f1e:	d115      	bne.n	8009f4c <__ieee754_pow+0x4c>
 8009f20:	19b3      	adds	r3, r6, r6
 8009f22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009f26:	4152      	adcs	r2, r2
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	4b89      	ldr	r3, [pc, #548]	; (800a150 <__ieee754_pow+0x250>)
 8009f2c:	4193      	sbcs	r3, r2
 8009f2e:	f080 84d2 	bcs.w	800a8d6 <__ieee754_pow+0x9d6>
 8009f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f36:	4630      	mov	r0, r6
 8009f38:	4639      	mov	r1, r7
 8009f3a:	f7f6 f9bf 	bl	80002bc <__adddf3>
 8009f3e:	ec41 0b10 	vmov	d0, r0, r1
 8009f42:	b009      	add	sp, #36	; 0x24
 8009f44:	ecbd 8b06 	vpop	{d8-d10}
 8009f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4c:	4b81      	ldr	r3, [pc, #516]	; (800a154 <__ieee754_pow+0x254>)
 8009f4e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009f52:	429c      	cmp	r4, r3
 8009f54:	ee10 aa10 	vmov	sl, s0
 8009f58:	463d      	mov	r5, r7
 8009f5a:	dc06      	bgt.n	8009f6a <__ieee754_pow+0x6a>
 8009f5c:	d101      	bne.n	8009f62 <__ieee754_pow+0x62>
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d1e7      	bne.n	8009f32 <__ieee754_pow+0x32>
 8009f62:	4598      	cmp	r8, r3
 8009f64:	dc01      	bgt.n	8009f6a <__ieee754_pow+0x6a>
 8009f66:	d10f      	bne.n	8009f88 <__ieee754_pow+0x88>
 8009f68:	b172      	cbz	r2, 8009f88 <__ieee754_pow+0x88>
 8009f6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009f6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009f72:	ea55 050a 	orrs.w	r5, r5, sl
 8009f76:	d1dc      	bne.n	8009f32 <__ieee754_pow+0x32>
 8009f78:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f7c:	18db      	adds	r3, r3, r3
 8009f7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009f82:	4152      	adcs	r2, r2
 8009f84:	429d      	cmp	r5, r3
 8009f86:	e7d0      	b.n	8009f2a <__ieee754_pow+0x2a>
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	da3b      	bge.n	800a004 <__ieee754_pow+0x104>
 8009f8c:	4b72      	ldr	r3, [pc, #456]	; (800a158 <__ieee754_pow+0x258>)
 8009f8e:	4598      	cmp	r8, r3
 8009f90:	dc51      	bgt.n	800a036 <__ieee754_pow+0x136>
 8009f92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009f96:	4598      	cmp	r8, r3
 8009f98:	f340 84ac 	ble.w	800a8f4 <__ieee754_pow+0x9f4>
 8009f9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fa0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009fa4:	2b14      	cmp	r3, #20
 8009fa6:	dd0f      	ble.n	8009fc8 <__ieee754_pow+0xc8>
 8009fa8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009fac:	fa22 f103 	lsr.w	r1, r2, r3
 8009fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	f040 849d 	bne.w	800a8f4 <__ieee754_pow+0x9f4>
 8009fba:	f001 0101 	and.w	r1, r1, #1
 8009fbe:	f1c1 0302 	rsb	r3, r1, #2
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	b182      	cbz	r2, 8009fe8 <__ieee754_pow+0xe8>
 8009fc6:	e05f      	b.n	800a088 <__ieee754_pow+0x188>
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	d15b      	bne.n	800a084 <__ieee754_pow+0x184>
 8009fcc:	f1c3 0314 	rsb	r3, r3, #20
 8009fd0:	fa48 f103 	asr.w	r1, r8, r3
 8009fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd8:	4543      	cmp	r3, r8
 8009fda:	f040 8488 	bne.w	800a8ee <__ieee754_pow+0x9ee>
 8009fde:	f001 0101 	and.w	r1, r1, #1
 8009fe2:	f1c1 0302 	rsb	r3, r1, #2
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	4b5c      	ldr	r3, [pc, #368]	; (800a15c <__ieee754_pow+0x25c>)
 8009fea:	4598      	cmp	r8, r3
 8009fec:	d132      	bne.n	800a054 <__ieee754_pow+0x154>
 8009fee:	f1b9 0f00 	cmp.w	r9, #0
 8009ff2:	f280 8478 	bge.w	800a8e6 <__ieee754_pow+0x9e6>
 8009ff6:	4959      	ldr	r1, [pc, #356]	; (800a15c <__ieee754_pow+0x25c>)
 8009ff8:	4632      	mov	r2, r6
 8009ffa:	463b      	mov	r3, r7
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7f6 fc3d 	bl	800087c <__aeabi_ddiv>
 800a002:	e79c      	b.n	8009f3e <__ieee754_pow+0x3e>
 800a004:	2300      	movs	r3, #0
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	2a00      	cmp	r2, #0
 800a00a:	d13d      	bne.n	800a088 <__ieee754_pow+0x188>
 800a00c:	4b51      	ldr	r3, [pc, #324]	; (800a154 <__ieee754_pow+0x254>)
 800a00e:	4598      	cmp	r8, r3
 800a010:	d1ea      	bne.n	8009fe8 <__ieee754_pow+0xe8>
 800a012:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a016:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a01a:	ea53 030a 	orrs.w	r3, r3, sl
 800a01e:	f000 845a 	beq.w	800a8d6 <__ieee754_pow+0x9d6>
 800a022:	4b4f      	ldr	r3, [pc, #316]	; (800a160 <__ieee754_pow+0x260>)
 800a024:	429c      	cmp	r4, r3
 800a026:	dd08      	ble.n	800a03a <__ieee754_pow+0x13a>
 800a028:	f1b9 0f00 	cmp.w	r9, #0
 800a02c:	f2c0 8457 	blt.w	800a8de <__ieee754_pow+0x9de>
 800a030:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a034:	e783      	b.n	8009f3e <__ieee754_pow+0x3e>
 800a036:	2302      	movs	r3, #2
 800a038:	e7e5      	b.n	800a006 <__ieee754_pow+0x106>
 800a03a:	f1b9 0f00 	cmp.w	r9, #0
 800a03e:	f04f 0000 	mov.w	r0, #0
 800a042:	f04f 0100 	mov.w	r1, #0
 800a046:	f6bf af7a 	bge.w	8009f3e <__ieee754_pow+0x3e>
 800a04a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a04e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a052:	e774      	b.n	8009f3e <__ieee754_pow+0x3e>
 800a054:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a058:	d106      	bne.n	800a068 <__ieee754_pow+0x168>
 800a05a:	4632      	mov	r2, r6
 800a05c:	463b      	mov	r3, r7
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 fae1 	bl	8000628 <__aeabi_dmul>
 800a066:	e76a      	b.n	8009f3e <__ieee754_pow+0x3e>
 800a068:	4b3e      	ldr	r3, [pc, #248]	; (800a164 <__ieee754_pow+0x264>)
 800a06a:	4599      	cmp	r9, r3
 800a06c:	d10c      	bne.n	800a088 <__ieee754_pow+0x188>
 800a06e:	2d00      	cmp	r5, #0
 800a070:	db0a      	blt.n	800a088 <__ieee754_pow+0x188>
 800a072:	ec47 6b10 	vmov	d0, r6, r7
 800a076:	b009      	add	sp, #36	; 0x24
 800a078:	ecbd 8b06 	vpop	{d8-d10}
 800a07c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	f000 be7a 	b.w	800ad78 <__ieee754_sqrt>
 800a084:	2300      	movs	r3, #0
 800a086:	9304      	str	r3, [sp, #16]
 800a088:	ec47 6b10 	vmov	d0, r6, r7
 800a08c:	f001 fdd0 	bl	800bc30 <fabs>
 800a090:	ec51 0b10 	vmov	r0, r1, d0
 800a094:	f1ba 0f00 	cmp.w	sl, #0
 800a098:	d129      	bne.n	800a0ee <__ieee754_pow+0x1ee>
 800a09a:	b124      	cbz	r4, 800a0a6 <__ieee754_pow+0x1a6>
 800a09c:	4b2f      	ldr	r3, [pc, #188]	; (800a15c <__ieee754_pow+0x25c>)
 800a09e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d123      	bne.n	800a0ee <__ieee754_pow+0x1ee>
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	da05      	bge.n	800a0b8 <__ieee754_pow+0x1b8>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	492a      	ldr	r1, [pc, #168]	; (800a15c <__ieee754_pow+0x25c>)
 800a0b4:	f7f6 fbe2 	bl	800087c <__aeabi_ddiv>
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	f6bf af40 	bge.w	8009f3e <__ieee754_pow+0x3e>
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a0c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a0c8:	4323      	orrs	r3, r4
 800a0ca:	d108      	bne.n	800a0de <__ieee754_pow+0x1de>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	f7f6 f8f0 	bl	80002b8 <__aeabi_dsub>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	e78f      	b.n	8009ffe <__ieee754_pow+0xfe>
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	f47f af2c 	bne.w	8009f3e <__ieee754_pow+0x3e>
 800a0e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	e727      	b.n	8009f3e <__ieee754_pow+0x3e>
 800a0ee:	0feb      	lsrs	r3, r5, #31
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	9306      	str	r3, [sp, #24]
 800a0f4:	9a06      	ldr	r2, [sp, #24]
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	d102      	bne.n	800a102 <__ieee754_pow+0x202>
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	463b      	mov	r3, r7
 800a100:	e7e6      	b.n	800a0d0 <__ieee754_pow+0x1d0>
 800a102:	4b19      	ldr	r3, [pc, #100]	; (800a168 <__ieee754_pow+0x268>)
 800a104:	4598      	cmp	r8, r3
 800a106:	f340 80fb 	ble.w	800a300 <__ieee754_pow+0x400>
 800a10a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a10e:	4598      	cmp	r8, r3
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <__ieee754_pow+0x260>)
 800a112:	dd0c      	ble.n	800a12e <__ieee754_pow+0x22e>
 800a114:	429c      	cmp	r4, r3
 800a116:	dc0f      	bgt.n	800a138 <__ieee754_pow+0x238>
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	da0f      	bge.n	800a13e <__ieee754_pow+0x23e>
 800a11e:	2000      	movs	r0, #0
 800a120:	b009      	add	sp, #36	; 0x24
 800a122:	ecbd 8b06 	vpop	{d8-d10}
 800a126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12a:	f001 bbd6 	b.w	800b8da <__math_oflow>
 800a12e:	429c      	cmp	r4, r3
 800a130:	dbf2      	blt.n	800a118 <__ieee754_pow+0x218>
 800a132:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <__ieee754_pow+0x25c>)
 800a134:	429c      	cmp	r4, r3
 800a136:	dd19      	ble.n	800a16c <__ieee754_pow+0x26c>
 800a138:	f1b9 0f00 	cmp.w	r9, #0
 800a13c:	dcef      	bgt.n	800a11e <__ieee754_pow+0x21e>
 800a13e:	2000      	movs	r0, #0
 800a140:	b009      	add	sp, #36	; 0x24
 800a142:	ecbd 8b06 	vpop	{d8-d10}
 800a146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f001 bbbd 	b.w	800b8c8 <__math_uflow>
 800a14e:	bf00      	nop
 800a150:	fff00000 	.word	0xfff00000
 800a154:	7ff00000 	.word	0x7ff00000
 800a158:	433fffff 	.word	0x433fffff
 800a15c:	3ff00000 	.word	0x3ff00000
 800a160:	3fefffff 	.word	0x3fefffff
 800a164:	3fe00000 	.word	0x3fe00000
 800a168:	41e00000 	.word	0x41e00000
 800a16c:	4b60      	ldr	r3, [pc, #384]	; (800a2f0 <__ieee754_pow+0x3f0>)
 800a16e:	2200      	movs	r2, #0
 800a170:	f7f6 f8a2 	bl	80002b8 <__aeabi_dsub>
 800a174:	a354      	add	r3, pc, #336	; (adr r3, 800a2c8 <__ieee754_pow+0x3c8>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	4604      	mov	r4, r0
 800a17c:	460d      	mov	r5, r1
 800a17e:	f7f6 fa53 	bl	8000628 <__aeabi_dmul>
 800a182:	a353      	add	r3, pc, #332	; (adr r3, 800a2d0 <__ieee754_pow+0x3d0>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	4620      	mov	r0, r4
 800a18e:	4629      	mov	r1, r5
 800a190:	f7f6 fa4a 	bl	8000628 <__aeabi_dmul>
 800a194:	4b57      	ldr	r3, [pc, #348]	; (800a2f4 <__ieee754_pow+0x3f4>)
 800a196:	4682      	mov	sl, r0
 800a198:	468b      	mov	fp, r1
 800a19a:	2200      	movs	r2, #0
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7f6 fa42 	bl	8000628 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	a14b      	add	r1, pc, #300	; (adr r1, 800a2d8 <__ieee754_pow+0x3d8>)
 800a1aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ae:	f7f6 f883 	bl	80002b8 <__aeabi_dsub>
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	f7f6 fa37 	bl	8000628 <__aeabi_dmul>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	2000      	movs	r0, #0
 800a1c0:	494d      	ldr	r1, [pc, #308]	; (800a2f8 <__ieee754_pow+0x3f8>)
 800a1c2:	f7f6 f879 	bl	80002b8 <__aeabi_dsub>
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4689      	mov	r9, r1
 800a1cc:	462b      	mov	r3, r5
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	f7f6 fa29 	bl	8000628 <__aeabi_dmul>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4640      	mov	r0, r8
 800a1dc:	4649      	mov	r1, r9
 800a1de:	f7f6 fa23 	bl	8000628 <__aeabi_dmul>
 800a1e2:	a33f      	add	r3, pc, #252	; (adr r3, 800a2e0 <__ieee754_pow+0x3e0>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f7f6 fa1e 	bl	8000628 <__aeabi_dmul>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4650      	mov	r0, sl
 800a1f2:	4659      	mov	r1, fp
 800a1f4:	f7f6 f860 	bl	80002b8 <__aeabi_dsub>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4689      	mov	r9, r1
 800a200:	4630      	mov	r0, r6
 800a202:	4639      	mov	r1, r7
 800a204:	f7f6 f85a 	bl	80002bc <__adddf3>
 800a208:	2000      	movs	r0, #0
 800a20a:	4632      	mov	r2, r6
 800a20c:	463b      	mov	r3, r7
 800a20e:	4604      	mov	r4, r0
 800a210:	460d      	mov	r5, r1
 800a212:	f7f6 f851 	bl	80002b8 <__aeabi_dsub>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 f84b 	bl	80002b8 <__aeabi_dsub>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	9a06      	ldr	r2, [sp, #24]
 800a226:	3b01      	subs	r3, #1
 800a228:	4313      	orrs	r3, r2
 800a22a:	4682      	mov	sl, r0
 800a22c:	468b      	mov	fp, r1
 800a22e:	f040 81e7 	bne.w	800a600 <__ieee754_pow+0x700>
 800a232:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a2e8 <__ieee754_pow+0x3e8>
 800a236:	eeb0 8a47 	vmov.f32	s16, s14
 800a23a:	eef0 8a67 	vmov.f32	s17, s15
 800a23e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a242:	2600      	movs	r6, #0
 800a244:	4632      	mov	r2, r6
 800a246:	463b      	mov	r3, r7
 800a248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a24c:	f7f6 f834 	bl	80002b8 <__aeabi_dsub>
 800a250:	4622      	mov	r2, r4
 800a252:	462b      	mov	r3, r5
 800a254:	f7f6 f9e8 	bl	8000628 <__aeabi_dmul>
 800a258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a25c:	4680      	mov	r8, r0
 800a25e:	4689      	mov	r9, r1
 800a260:	4650      	mov	r0, sl
 800a262:	4659      	mov	r1, fp
 800a264:	f7f6 f9e0 	bl	8000628 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 f824 	bl	80002bc <__adddf3>
 800a274:	4632      	mov	r2, r6
 800a276:	463b      	mov	r3, r7
 800a278:	4680      	mov	r8, r0
 800a27a:	4689      	mov	r9, r1
 800a27c:	4620      	mov	r0, r4
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f6 f9d2 	bl	8000628 <__aeabi_dmul>
 800a284:	460b      	mov	r3, r1
 800a286:	4604      	mov	r4, r0
 800a288:	460d      	mov	r5, r1
 800a28a:	4602      	mov	r2, r0
 800a28c:	4649      	mov	r1, r9
 800a28e:	4640      	mov	r0, r8
 800a290:	f7f6 f814 	bl	80002bc <__adddf3>
 800a294:	4b19      	ldr	r3, [pc, #100]	; (800a2fc <__ieee754_pow+0x3fc>)
 800a296:	4299      	cmp	r1, r3
 800a298:	ec45 4b19 	vmov	d9, r4, r5
 800a29c:	4606      	mov	r6, r0
 800a29e:	460f      	mov	r7, r1
 800a2a0:	468b      	mov	fp, r1
 800a2a2:	f340 82f1 	ble.w	800a888 <__ieee754_pow+0x988>
 800a2a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a2aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a2ae:	4303      	orrs	r3, r0
 800a2b0:	f000 81e4 	beq.w	800a67c <__ieee754_pow+0x77c>
 800a2b4:	ec51 0b18 	vmov	r0, r1, d8
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f7f6 fc26 	bl	8000b0c <__aeabi_dcmplt>
 800a2c0:	3800      	subs	r0, #0
 800a2c2:	bf18      	it	ne
 800a2c4:	2001      	movne	r0, #1
 800a2c6:	e72b      	b.n	800a120 <__ieee754_pow+0x220>
 800a2c8:	60000000 	.word	0x60000000
 800a2cc:	3ff71547 	.word	0x3ff71547
 800a2d0:	f85ddf44 	.word	0xf85ddf44
 800a2d4:	3e54ae0b 	.word	0x3e54ae0b
 800a2d8:	55555555 	.word	0x55555555
 800a2dc:	3fd55555 	.word	0x3fd55555
 800a2e0:	652b82fe 	.word	0x652b82fe
 800a2e4:	3ff71547 	.word	0x3ff71547
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	bff00000 	.word	0xbff00000
 800a2f0:	3ff00000 	.word	0x3ff00000
 800a2f4:	3fd00000 	.word	0x3fd00000
 800a2f8:	3fe00000 	.word	0x3fe00000
 800a2fc:	408fffff 	.word	0x408fffff
 800a300:	4bd5      	ldr	r3, [pc, #852]	; (800a658 <__ieee754_pow+0x758>)
 800a302:	402b      	ands	r3, r5
 800a304:	2200      	movs	r2, #0
 800a306:	b92b      	cbnz	r3, 800a314 <__ieee754_pow+0x414>
 800a308:	4bd4      	ldr	r3, [pc, #848]	; (800a65c <__ieee754_pow+0x75c>)
 800a30a:	f7f6 f98d 	bl	8000628 <__aeabi_dmul>
 800a30e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a312:	460c      	mov	r4, r1
 800a314:	1523      	asrs	r3, r4, #20
 800a316:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a31a:	4413      	add	r3, r2
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	4bd0      	ldr	r3, [pc, #832]	; (800a660 <__ieee754_pow+0x760>)
 800a320:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a324:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a328:	429c      	cmp	r4, r3
 800a32a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a32e:	dd08      	ble.n	800a342 <__ieee754_pow+0x442>
 800a330:	4bcc      	ldr	r3, [pc, #816]	; (800a664 <__ieee754_pow+0x764>)
 800a332:	429c      	cmp	r4, r3
 800a334:	f340 8162 	ble.w	800a5fc <__ieee754_pow+0x6fc>
 800a338:	9b05      	ldr	r3, [sp, #20]
 800a33a:	3301      	adds	r3, #1
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a342:	2400      	movs	r4, #0
 800a344:	00e3      	lsls	r3, r4, #3
 800a346:	9307      	str	r3, [sp, #28]
 800a348:	4bc7      	ldr	r3, [pc, #796]	; (800a668 <__ieee754_pow+0x768>)
 800a34a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a34e:	ed93 7b00 	vldr	d7, [r3]
 800a352:	4629      	mov	r1, r5
 800a354:	ec53 2b17 	vmov	r2, r3, d7
 800a358:	eeb0 9a47 	vmov.f32	s18, s14
 800a35c:	eef0 9a67 	vmov.f32	s19, s15
 800a360:	4682      	mov	sl, r0
 800a362:	f7f5 ffa9 	bl	80002b8 <__aeabi_dsub>
 800a366:	4652      	mov	r2, sl
 800a368:	4606      	mov	r6, r0
 800a36a:	460f      	mov	r7, r1
 800a36c:	462b      	mov	r3, r5
 800a36e:	ec51 0b19 	vmov	r0, r1, d9
 800a372:	f7f5 ffa3 	bl	80002bc <__adddf3>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	2000      	movs	r0, #0
 800a37c:	49bb      	ldr	r1, [pc, #748]	; (800a66c <__ieee754_pow+0x76c>)
 800a37e:	f7f6 fa7d 	bl	800087c <__aeabi_ddiv>
 800a382:	ec41 0b1a 	vmov	d10, r0, r1
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f6 f94b 	bl	8000628 <__aeabi_dmul>
 800a392:	2300      	movs	r3, #0
 800a394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a398:	9302      	str	r3, [sp, #8]
 800a39a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a39e:	46ab      	mov	fp, r5
 800a3a0:	106d      	asrs	r5, r5, #1
 800a3a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a3a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a3aa:	ec41 0b18 	vmov	d8, r0, r1
 800a3ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	461d      	mov	r5, r3
 800a3bc:	f7f6 f934 	bl	8000628 <__aeabi_dmul>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	f7f5 ff76 	bl	80002b8 <__aeabi_dsub>
 800a3cc:	ec53 2b19 	vmov	r2, r3, d9
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f5 ff6e 	bl	80002b8 <__aeabi_dsub>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4650      	mov	r0, sl
 800a3e2:	4659      	mov	r1, fp
 800a3e4:	f7f5 ff68 	bl	80002b8 <__aeabi_dsub>
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	f7f6 f91c 	bl	8000628 <__aeabi_dmul>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	f7f5 ff5e 	bl	80002b8 <__aeabi_dsub>
 800a3fc:	ec53 2b1a 	vmov	r2, r3, d10
 800a400:	f7f6 f912 	bl	8000628 <__aeabi_dmul>
 800a404:	ec53 2b18 	vmov	r2, r3, d8
 800a408:	ec41 0b19 	vmov	d9, r0, r1
 800a40c:	ec51 0b18 	vmov	r0, r1, d8
 800a410:	f7f6 f90a 	bl	8000628 <__aeabi_dmul>
 800a414:	a37c      	add	r3, pc, #496	; (adr r3, 800a608 <__ieee754_pow+0x708>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	f7f6 f903 	bl	8000628 <__aeabi_dmul>
 800a422:	a37b      	add	r3, pc, #492	; (adr r3, 800a610 <__ieee754_pow+0x710>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f5 ff48 	bl	80002bc <__adddf3>
 800a42c:	4622      	mov	r2, r4
 800a42e:	462b      	mov	r3, r5
 800a430:	f7f6 f8fa 	bl	8000628 <__aeabi_dmul>
 800a434:	a378      	add	r3, pc, #480	; (adr r3, 800a618 <__ieee754_pow+0x718>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f5 ff3f 	bl	80002bc <__adddf3>
 800a43e:	4622      	mov	r2, r4
 800a440:	462b      	mov	r3, r5
 800a442:	f7f6 f8f1 	bl	8000628 <__aeabi_dmul>
 800a446:	a376      	add	r3, pc, #472	; (adr r3, 800a620 <__ieee754_pow+0x720>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f5 ff36 	bl	80002bc <__adddf3>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	f7f6 f8e8 	bl	8000628 <__aeabi_dmul>
 800a458:	a373      	add	r3, pc, #460	; (adr r3, 800a628 <__ieee754_pow+0x728>)
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f7f5 ff2d 	bl	80002bc <__adddf3>
 800a462:	4622      	mov	r2, r4
 800a464:	462b      	mov	r3, r5
 800a466:	f7f6 f8df 	bl	8000628 <__aeabi_dmul>
 800a46a:	a371      	add	r3, pc, #452	; (adr r3, 800a630 <__ieee754_pow+0x730>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f7f5 ff24 	bl	80002bc <__adddf3>
 800a474:	4622      	mov	r2, r4
 800a476:	4606      	mov	r6, r0
 800a478:	460f      	mov	r7, r1
 800a47a:	462b      	mov	r3, r5
 800a47c:	4620      	mov	r0, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	f7f6 f8d2 	bl	8000628 <__aeabi_dmul>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4630      	mov	r0, r6
 800a48a:	4639      	mov	r1, r7
 800a48c:	f7f6 f8cc 	bl	8000628 <__aeabi_dmul>
 800a490:	4642      	mov	r2, r8
 800a492:	4604      	mov	r4, r0
 800a494:	460d      	mov	r5, r1
 800a496:	464b      	mov	r3, r9
 800a498:	ec51 0b18 	vmov	r0, r1, d8
 800a49c:	f7f5 ff0e 	bl	80002bc <__adddf3>
 800a4a0:	ec53 2b19 	vmov	r2, r3, d9
 800a4a4:	f7f6 f8c0 	bl	8000628 <__aeabi_dmul>
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	462b      	mov	r3, r5
 800a4ac:	f7f5 ff06 	bl	80002bc <__adddf3>
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	4682      	mov	sl, r0
 800a4b4:	468b      	mov	fp, r1
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 f8b4 	bl	8000628 <__aeabi_dmul>
 800a4c0:	4b6b      	ldr	r3, [pc, #428]	; (800a670 <__ieee754_pow+0x770>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	f7f5 fef8 	bl	80002bc <__adddf3>
 800a4cc:	4652      	mov	r2, sl
 800a4ce:	465b      	mov	r3, fp
 800a4d0:	f7f5 fef4 	bl	80002bc <__adddf3>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	460d      	mov	r5, r1
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 f8a1 	bl	8000628 <__aeabi_dmul>
 800a4e6:	4b62      	ldr	r3, [pc, #392]	; (800a670 <__ieee754_pow+0x770>)
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	4689      	mov	r9, r1
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f5 fee1 	bl	80002b8 <__aeabi_dsub>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	f7f5 fedd 	bl	80002b8 <__aeabi_dsub>
 800a4fe:	4602      	mov	r2, r0
 800a500:	460b      	mov	r3, r1
 800a502:	4650      	mov	r0, sl
 800a504:	4659      	mov	r1, fp
 800a506:	f7f5 fed7 	bl	80002b8 <__aeabi_dsub>
 800a50a:	ec53 2b18 	vmov	r2, r3, d8
 800a50e:	f7f6 f88b 	bl	8000628 <__aeabi_dmul>
 800a512:	4622      	mov	r2, r4
 800a514:	4606      	mov	r6, r0
 800a516:	460f      	mov	r7, r1
 800a518:	462b      	mov	r3, r5
 800a51a:	ec51 0b19 	vmov	r0, r1, d9
 800a51e:	f7f6 f883 	bl	8000628 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4630      	mov	r0, r6
 800a528:	4639      	mov	r1, r7
 800a52a:	f7f5 fec7 	bl	80002bc <__adddf3>
 800a52e:	4606      	mov	r6, r0
 800a530:	460f      	mov	r7, r1
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4640      	mov	r0, r8
 800a538:	4649      	mov	r1, r9
 800a53a:	f7f5 febf 	bl	80002bc <__adddf3>
 800a53e:	a33e      	add	r3, pc, #248	; (adr r3, 800a638 <__ieee754_pow+0x738>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	2000      	movs	r0, #0
 800a546:	4604      	mov	r4, r0
 800a548:	460d      	mov	r5, r1
 800a54a:	f7f6 f86d 	bl	8000628 <__aeabi_dmul>
 800a54e:	4642      	mov	r2, r8
 800a550:	ec41 0b18 	vmov	d8, r0, r1
 800a554:	464b      	mov	r3, r9
 800a556:	4620      	mov	r0, r4
 800a558:	4629      	mov	r1, r5
 800a55a:	f7f5 fead 	bl	80002b8 <__aeabi_dsub>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4630      	mov	r0, r6
 800a564:	4639      	mov	r1, r7
 800a566:	f7f5 fea7 	bl	80002b8 <__aeabi_dsub>
 800a56a:	a335      	add	r3, pc, #212	; (adr r3, 800a640 <__ieee754_pow+0x740>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f6 f85a 	bl	8000628 <__aeabi_dmul>
 800a574:	a334      	add	r3, pc, #208	; (adr r3, 800a648 <__ieee754_pow+0x748>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f7f6 f851 	bl	8000628 <__aeabi_dmul>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f5 fe95 	bl	80002bc <__adddf3>
 800a592:	9a07      	ldr	r2, [sp, #28]
 800a594:	4b37      	ldr	r3, [pc, #220]	; (800a674 <__ieee754_pow+0x774>)
 800a596:	4413      	add	r3, r2
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	f7f5 fe8e 	bl	80002bc <__adddf3>
 800a5a0:	4682      	mov	sl, r0
 800a5a2:	9805      	ldr	r0, [sp, #20]
 800a5a4:	468b      	mov	fp, r1
 800a5a6:	f7f5 ffd5 	bl	8000554 <__aeabi_i2d>
 800a5aa:	9a07      	ldr	r2, [sp, #28]
 800a5ac:	4b32      	ldr	r3, [pc, #200]	; (800a678 <__ieee754_pow+0x778>)
 800a5ae:	4413      	add	r3, r2
 800a5b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	465b      	mov	r3, fp
 800a5bc:	ec51 0b18 	vmov	r0, r1, d8
 800a5c0:	f7f5 fe7c 	bl	80002bc <__adddf3>
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	f7f5 fe78 	bl	80002bc <__adddf3>
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	f7f5 fe74 	bl	80002bc <__adddf3>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	4632      	mov	r2, r6
 800a5d8:	463b      	mov	r3, r7
 800a5da:	4604      	mov	r4, r0
 800a5dc:	460d      	mov	r5, r1
 800a5de:	f7f5 fe6b 	bl	80002b8 <__aeabi_dsub>
 800a5e2:	4642      	mov	r2, r8
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	f7f5 fe67 	bl	80002b8 <__aeabi_dsub>
 800a5ea:	ec53 2b18 	vmov	r2, r3, d8
 800a5ee:	f7f5 fe63 	bl	80002b8 <__aeabi_dsub>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4659      	mov	r1, fp
 800a5fa:	e610      	b.n	800a21e <__ieee754_pow+0x31e>
 800a5fc:	2401      	movs	r4, #1
 800a5fe:	e6a1      	b.n	800a344 <__ieee754_pow+0x444>
 800a600:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a650 <__ieee754_pow+0x750>
 800a604:	e617      	b.n	800a236 <__ieee754_pow+0x336>
 800a606:	bf00      	nop
 800a608:	4a454eef 	.word	0x4a454eef
 800a60c:	3fca7e28 	.word	0x3fca7e28
 800a610:	93c9db65 	.word	0x93c9db65
 800a614:	3fcd864a 	.word	0x3fcd864a
 800a618:	a91d4101 	.word	0xa91d4101
 800a61c:	3fd17460 	.word	0x3fd17460
 800a620:	518f264d 	.word	0x518f264d
 800a624:	3fd55555 	.word	0x3fd55555
 800a628:	db6fabff 	.word	0xdb6fabff
 800a62c:	3fdb6db6 	.word	0x3fdb6db6
 800a630:	33333303 	.word	0x33333303
 800a634:	3fe33333 	.word	0x3fe33333
 800a638:	e0000000 	.word	0xe0000000
 800a63c:	3feec709 	.word	0x3feec709
 800a640:	dc3a03fd 	.word	0xdc3a03fd
 800a644:	3feec709 	.word	0x3feec709
 800a648:	145b01f5 	.word	0x145b01f5
 800a64c:	be3e2fe0 	.word	0xbe3e2fe0
 800a650:	00000000 	.word	0x00000000
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	7ff00000 	.word	0x7ff00000
 800a65c:	43400000 	.word	0x43400000
 800a660:	0003988e 	.word	0x0003988e
 800a664:	000bb679 	.word	0x000bb679
 800a668:	0800c250 	.word	0x0800c250
 800a66c:	3ff00000 	.word	0x3ff00000
 800a670:	40080000 	.word	0x40080000
 800a674:	0800c270 	.word	0x0800c270
 800a678:	0800c260 	.word	0x0800c260
 800a67c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a954 <__ieee754_pow+0xa54>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	4640      	mov	r0, r8
 800a684:	4649      	mov	r1, r9
 800a686:	f7f5 fe19 	bl	80002bc <__adddf3>
 800a68a:	4622      	mov	r2, r4
 800a68c:	ec41 0b1a 	vmov	d10, r0, r1
 800a690:	462b      	mov	r3, r5
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f5 fe0f 	bl	80002b8 <__aeabi_dsub>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	ec51 0b1a 	vmov	r0, r1, d10
 800a6a2:	f7f6 fa51 	bl	8000b48 <__aeabi_dcmpgt>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f47f ae04 	bne.w	800a2b4 <__ieee754_pow+0x3b4>
 800a6ac:	4aa4      	ldr	r2, [pc, #656]	; (800a940 <__ieee754_pow+0xa40>)
 800a6ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	f340 8108 	ble.w	800a8c8 <__ieee754_pow+0x9c8>
 800a6b8:	151b      	asrs	r3, r3, #20
 800a6ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a6be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a6c2:	fa4a f303 	asr.w	r3, sl, r3
 800a6c6:	445b      	add	r3, fp
 800a6c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a6cc:	4e9d      	ldr	r6, [pc, #628]	; (800a944 <__ieee754_pow+0xa44>)
 800a6ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a6d2:	4116      	asrs	r6, r2
 800a6d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a6d8:	2000      	movs	r0, #0
 800a6da:	ea23 0106 	bic.w	r1, r3, r6
 800a6de:	f1c2 0214 	rsb	r2, r2, #20
 800a6e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a6e6:	fa4a fa02 	asr.w	sl, sl, r2
 800a6ea:	f1bb 0f00 	cmp.w	fp, #0
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	bfb8      	it	lt
 800a6f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800a6fc:	f7f5 fddc 	bl	80002b8 <__aeabi_dsub>
 800a700:	ec41 0b19 	vmov	d9, r0, r1
 800a704:	4642      	mov	r2, r8
 800a706:	464b      	mov	r3, r9
 800a708:	ec51 0b19 	vmov	r0, r1, d9
 800a70c:	f7f5 fdd6 	bl	80002bc <__adddf3>
 800a710:	a37b      	add	r3, pc, #492	; (adr r3, 800a900 <__ieee754_pow+0xa00>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	2000      	movs	r0, #0
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	f7f5 ff84 	bl	8000628 <__aeabi_dmul>
 800a720:	ec53 2b19 	vmov	r2, r3, d9
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fdc4 	bl	80002b8 <__aeabi_dsub>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f5 fdbe 	bl	80002b8 <__aeabi_dsub>
 800a73c:	a372      	add	r3, pc, #456	; (adr r3, 800a908 <__ieee754_pow+0xa08>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	f7f5 ff71 	bl	8000628 <__aeabi_dmul>
 800a746:	a372      	add	r3, pc, #456	; (adr r3, 800a910 <__ieee754_pow+0xa10>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	4680      	mov	r8, r0
 800a74e:	4689      	mov	r9, r1
 800a750:	4620      	mov	r0, r4
 800a752:	4629      	mov	r1, r5
 800a754:	f7f5 ff68 	bl	8000628 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4640      	mov	r0, r8
 800a75e:	4649      	mov	r1, r9
 800a760:	f7f5 fdac 	bl	80002bc <__adddf3>
 800a764:	4604      	mov	r4, r0
 800a766:	460d      	mov	r5, r1
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4630      	mov	r0, r6
 800a76e:	4639      	mov	r1, r7
 800a770:	f7f5 fda4 	bl	80002bc <__adddf3>
 800a774:	4632      	mov	r2, r6
 800a776:	463b      	mov	r3, r7
 800a778:	4680      	mov	r8, r0
 800a77a:	4689      	mov	r9, r1
 800a77c:	f7f5 fd9c 	bl	80002b8 <__aeabi_dsub>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4620      	mov	r0, r4
 800a786:	4629      	mov	r1, r5
 800a788:	f7f5 fd96 	bl	80002b8 <__aeabi_dsub>
 800a78c:	4642      	mov	r2, r8
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	464b      	mov	r3, r9
 800a794:	4640      	mov	r0, r8
 800a796:	4649      	mov	r1, r9
 800a798:	f7f5 ff46 	bl	8000628 <__aeabi_dmul>
 800a79c:	a35e      	add	r3, pc, #376	; (adr r3, 800a918 <__ieee754_pow+0xa18>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	460d      	mov	r5, r1
 800a7a6:	f7f5 ff3f 	bl	8000628 <__aeabi_dmul>
 800a7aa:	a35d      	add	r3, pc, #372	; (adr r3, 800a920 <__ieee754_pow+0xa20>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f7f5 fd82 	bl	80002b8 <__aeabi_dsub>
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	f7f5 ff36 	bl	8000628 <__aeabi_dmul>
 800a7bc:	a35a      	add	r3, pc, #360	; (adr r3, 800a928 <__ieee754_pow+0xa28>)
 800a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c2:	f7f5 fd7b 	bl	80002bc <__adddf3>
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	f7f5 ff2d 	bl	8000628 <__aeabi_dmul>
 800a7ce:	a358      	add	r3, pc, #352	; (adr r3, 800a930 <__ieee754_pow+0xa30>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f7f5 fd70 	bl	80002b8 <__aeabi_dsub>
 800a7d8:	4622      	mov	r2, r4
 800a7da:	462b      	mov	r3, r5
 800a7dc:	f7f5 ff24 	bl	8000628 <__aeabi_dmul>
 800a7e0:	a355      	add	r3, pc, #340	; (adr r3, 800a938 <__ieee754_pow+0xa38>)
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f7f5 fd69 	bl	80002bc <__adddf3>
 800a7ea:	4622      	mov	r2, r4
 800a7ec:	462b      	mov	r3, r5
 800a7ee:	f7f5 ff1b 	bl	8000628 <__aeabi_dmul>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	f7f5 fd5d 	bl	80002b8 <__aeabi_dsub>
 800a7fe:	4604      	mov	r4, r0
 800a800:	460d      	mov	r5, r1
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	f7f5 ff0d 	bl	8000628 <__aeabi_dmul>
 800a80e:	2200      	movs	r2, #0
 800a810:	ec41 0b19 	vmov	d9, r0, r1
 800a814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a818:	4620      	mov	r0, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7f5 fd4c 	bl	80002b8 <__aeabi_dsub>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	ec51 0b19 	vmov	r0, r1, d9
 800a828:	f7f6 f828 	bl	800087c <__aeabi_ddiv>
 800a82c:	4632      	mov	r2, r6
 800a82e:	4604      	mov	r4, r0
 800a830:	460d      	mov	r5, r1
 800a832:	463b      	mov	r3, r7
 800a834:	4640      	mov	r0, r8
 800a836:	4649      	mov	r1, r9
 800a838:	f7f5 fef6 	bl	8000628 <__aeabi_dmul>
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	f7f5 fd3c 	bl	80002bc <__adddf3>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	f7f5 fd34 	bl	80002b8 <__aeabi_dsub>
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	f7f5 fd30 	bl	80002b8 <__aeabi_dsub>
 800a858:	460b      	mov	r3, r1
 800a85a:	4602      	mov	r2, r0
 800a85c:	493a      	ldr	r1, [pc, #232]	; (800a948 <__ieee754_pow+0xa48>)
 800a85e:	2000      	movs	r0, #0
 800a860:	f7f5 fd2a 	bl	80002b8 <__aeabi_dsub>
 800a864:	ec41 0b10 	vmov	d0, r0, r1
 800a868:	ee10 3a90 	vmov	r3, s1
 800a86c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a874:	da2b      	bge.n	800a8ce <__ieee754_pow+0x9ce>
 800a876:	4650      	mov	r0, sl
 800a878:	f001 fa6e 	bl	800bd58 <scalbn>
 800a87c:	ec51 0b10 	vmov	r0, r1, d0
 800a880:	ec53 2b18 	vmov	r2, r3, d8
 800a884:	f7ff bbed 	b.w	800a062 <__ieee754_pow+0x162>
 800a888:	4b30      	ldr	r3, [pc, #192]	; (800a94c <__ieee754_pow+0xa4c>)
 800a88a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a88e:	429e      	cmp	r6, r3
 800a890:	f77f af0c 	ble.w	800a6ac <__ieee754_pow+0x7ac>
 800a894:	4b2e      	ldr	r3, [pc, #184]	; (800a950 <__ieee754_pow+0xa50>)
 800a896:	440b      	add	r3, r1
 800a898:	4303      	orrs	r3, r0
 800a89a:	d009      	beq.n	800a8b0 <__ieee754_pow+0x9b0>
 800a89c:	ec51 0b18 	vmov	r0, r1, d8
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f7f6 f932 	bl	8000b0c <__aeabi_dcmplt>
 800a8a8:	3800      	subs	r0, #0
 800a8aa:	bf18      	it	ne
 800a8ac:	2001      	movne	r0, #1
 800a8ae:	e447      	b.n	800a140 <__ieee754_pow+0x240>
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	f7f5 fd00 	bl	80002b8 <__aeabi_dsub>
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	f7f6 f93a 	bl	8000b34 <__aeabi_dcmpge>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f43f aef3 	beq.w	800a6ac <__ieee754_pow+0x7ac>
 800a8c6:	e7e9      	b.n	800a89c <__ieee754_pow+0x99c>
 800a8c8:	f04f 0a00 	mov.w	sl, #0
 800a8cc:	e71a      	b.n	800a704 <__ieee754_pow+0x804>
 800a8ce:	ec51 0b10 	vmov	r0, r1, d0
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	e7d4      	b.n	800a880 <__ieee754_pow+0x980>
 800a8d6:	491c      	ldr	r1, [pc, #112]	; (800a948 <__ieee754_pow+0xa48>)
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f7ff bb30 	b.w	8009f3e <__ieee754_pow+0x3e>
 800a8de:	2000      	movs	r0, #0
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	f7ff bb2c 	b.w	8009f3e <__ieee754_pow+0x3e>
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f7ff bb28 	b.w	8009f3e <__ieee754_pow+0x3e>
 800a8ee:	9204      	str	r2, [sp, #16]
 800a8f0:	f7ff bb7a 	b.w	8009fe8 <__ieee754_pow+0xe8>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f7ff bb64 	b.w	8009fc2 <__ieee754_pow+0xc2>
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w
 800a900:	00000000 	.word	0x00000000
 800a904:	3fe62e43 	.word	0x3fe62e43
 800a908:	fefa39ef 	.word	0xfefa39ef
 800a90c:	3fe62e42 	.word	0x3fe62e42
 800a910:	0ca86c39 	.word	0x0ca86c39
 800a914:	be205c61 	.word	0xbe205c61
 800a918:	72bea4d0 	.word	0x72bea4d0
 800a91c:	3e663769 	.word	0x3e663769
 800a920:	c5d26bf1 	.word	0xc5d26bf1
 800a924:	3ebbbd41 	.word	0x3ebbbd41
 800a928:	af25de2c 	.word	0xaf25de2c
 800a92c:	3f11566a 	.word	0x3f11566a
 800a930:	16bebd93 	.word	0x16bebd93
 800a934:	3f66c16c 	.word	0x3f66c16c
 800a938:	5555553e 	.word	0x5555553e
 800a93c:	3fc55555 	.word	0x3fc55555
 800a940:	3fe00000 	.word	0x3fe00000
 800a944:	000fffff 	.word	0x000fffff
 800a948:	3ff00000 	.word	0x3ff00000
 800a94c:	4090cbff 	.word	0x4090cbff
 800a950:	3f6f3400 	.word	0x3f6f3400
 800a954:	652b82fe 	.word	0x652b82fe
 800a958:	3c971547 	.word	0x3c971547
 800a95c:	00000000 	.word	0x00000000

0800a960 <__ieee754_rem_pio2>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	ed2d 8b02 	vpush	{d8}
 800a968:	ec55 4b10 	vmov	r4, r5, d0
 800a96c:	4bca      	ldr	r3, [pc, #808]	; (800ac98 <__ieee754_rem_pio2+0x338>)
 800a96e:	b08b      	sub	sp, #44	; 0x2c
 800a970:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a974:	4598      	cmp	r8, r3
 800a976:	4682      	mov	sl, r0
 800a978:	9502      	str	r5, [sp, #8]
 800a97a:	dc08      	bgt.n	800a98e <__ieee754_rem_pio2+0x2e>
 800a97c:	2200      	movs	r2, #0
 800a97e:	2300      	movs	r3, #0
 800a980:	ed80 0b00 	vstr	d0, [r0]
 800a984:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a988:	f04f 0b00 	mov.w	fp, #0
 800a98c:	e028      	b.n	800a9e0 <__ieee754_rem_pio2+0x80>
 800a98e:	4bc3      	ldr	r3, [pc, #780]	; (800ac9c <__ieee754_rem_pio2+0x33c>)
 800a990:	4598      	cmp	r8, r3
 800a992:	dc78      	bgt.n	800aa86 <__ieee754_rem_pio2+0x126>
 800a994:	9b02      	ldr	r3, [sp, #8]
 800a996:	4ec2      	ldr	r6, [pc, #776]	; (800aca0 <__ieee754_rem_pio2+0x340>)
 800a998:	2b00      	cmp	r3, #0
 800a99a:	ee10 0a10 	vmov	r0, s0
 800a99e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x300>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	dd39      	ble.n	800aa1c <__ieee754_rem_pio2+0xbc>
 800a9a8:	f7f5 fc86 	bl	80002b8 <__aeabi_dsub>
 800a9ac:	45b0      	cmp	r8, r6
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	d01b      	beq.n	800a9ec <__ieee754_rem_pio2+0x8c>
 800a9b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x308>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc7d 	bl	80002b8 <__aeabi_dsub>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	e9ca 2300 	strd	r2, r3, [sl]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f5 fc75 	bl	80002b8 <__aeabi_dsub>
 800a9ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x308>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f5 fc70 	bl	80002b8 <__aeabi_dsub>
 800a9d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9dc:	f04f 0b01 	mov.w	fp, #1
 800a9e0:	4658      	mov	r0, fp
 800a9e2:	b00b      	add	sp, #44	; 0x2c
 800a9e4:	ecbd 8b02 	vpop	{d8}
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x310>)
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f7f5 fc61 	bl	80002b8 <__aeabi_dsub>
 800a9f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac78 <__ieee754_rem_pio2+0x318>)
 800a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	460d      	mov	r5, r1
 800aa00:	f7f5 fc5a 	bl	80002b8 <__aeabi_dsub>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	e9ca 2300 	strd	r2, r3, [sl]
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f7f5 fc52 	bl	80002b8 <__aeabi_dsub>
 800aa14:	a398      	add	r3, pc, #608	; (adr r3, 800ac78 <__ieee754_rem_pio2+0x318>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	e7db      	b.n	800a9d4 <__ieee754_rem_pio2+0x74>
 800aa1c:	f7f5 fc4e 	bl	80002bc <__adddf3>
 800aa20:	45b0      	cmp	r8, r6
 800aa22:	4604      	mov	r4, r0
 800aa24:	460d      	mov	r5, r1
 800aa26:	d016      	beq.n	800aa56 <__ieee754_rem_pio2+0xf6>
 800aa28:	a38f      	add	r3, pc, #572	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x308>)
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f7f5 fc45 	bl	80002bc <__adddf3>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	e9ca 2300 	strd	r2, r3, [sl]
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7f5 fc3b 	bl	80002b8 <__aeabi_dsub>
 800aa42:	a389      	add	r3, pc, #548	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x308>)
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f7f5 fc38 	bl	80002bc <__adddf3>
 800aa4c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800aa50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa54:	e7c4      	b.n	800a9e0 <__ieee754_rem_pio2+0x80>
 800aa56:	a386      	add	r3, pc, #536	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x310>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f5 fc2e 	bl	80002bc <__adddf3>
 800aa60:	a385      	add	r3, pc, #532	; (adr r3, 800ac78 <__ieee754_rem_pio2+0x318>)
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	4604      	mov	r4, r0
 800aa68:	460d      	mov	r5, r1
 800aa6a:	f7f5 fc27 	bl	80002bc <__adddf3>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	e9ca 2300 	strd	r2, r3, [sl]
 800aa76:	4620      	mov	r0, r4
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7f5 fc1d 	bl	80002b8 <__aeabi_dsub>
 800aa7e:	a37e      	add	r3, pc, #504	; (adr r3, 800ac78 <__ieee754_rem_pio2+0x318>)
 800aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa84:	e7e0      	b.n	800aa48 <__ieee754_rem_pio2+0xe8>
 800aa86:	4b87      	ldr	r3, [pc, #540]	; (800aca4 <__ieee754_rem_pio2+0x344>)
 800aa88:	4598      	cmp	r8, r3
 800aa8a:	f300 80d9 	bgt.w	800ac40 <__ieee754_rem_pio2+0x2e0>
 800aa8e:	f001 f8cf 	bl	800bc30 <fabs>
 800aa92:	ec55 4b10 	vmov	r4, r5, d0
 800aa96:	ee10 0a10 	vmov	r0, s0
 800aa9a:	a379      	add	r3, pc, #484	; (adr r3, 800ac80 <__ieee754_rem_pio2+0x320>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	f7f5 fdc1 	bl	8000628 <__aeabi_dmul>
 800aaa6:	4b80      	ldr	r3, [pc, #512]	; (800aca8 <__ieee754_rem_pio2+0x348>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f7f5 fc07 	bl	80002bc <__adddf3>
 800aaae:	f7f6 f86b 	bl	8000b88 <__aeabi_d2iz>
 800aab2:	4683      	mov	fp, r0
 800aab4:	f7f5 fd4e 	bl	8000554 <__aeabi_i2d>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	ec43 2b18 	vmov	d8, r2, r3
 800aac0:	a367      	add	r3, pc, #412	; (adr r3, 800ac60 <__ieee754_rem_pio2+0x300>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fdaf 	bl	8000628 <__aeabi_dmul>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	4620      	mov	r0, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	f7f5 fbf1 	bl	80002b8 <__aeabi_dsub>
 800aad6:	a364      	add	r3, pc, #400	; (adr r3, 800ac68 <__ieee754_rem_pio2+0x308>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	4606      	mov	r6, r0
 800aade:	460f      	mov	r7, r1
 800aae0:	ec51 0b18 	vmov	r0, r1, d8
 800aae4:	f7f5 fda0 	bl	8000628 <__aeabi_dmul>
 800aae8:	f1bb 0f1f 	cmp.w	fp, #31
 800aaec:	4604      	mov	r4, r0
 800aaee:	460d      	mov	r5, r1
 800aaf0:	dc0d      	bgt.n	800ab0e <__ieee754_rem_pio2+0x1ae>
 800aaf2:	4b6e      	ldr	r3, [pc, #440]	; (800acac <__ieee754_rem_pio2+0x34c>)
 800aaf4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800aaf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafc:	4543      	cmp	r3, r8
 800aafe:	d006      	beq.n	800ab0e <__ieee754_rem_pio2+0x1ae>
 800ab00:	4622      	mov	r2, r4
 800ab02:	462b      	mov	r3, r5
 800ab04:	4630      	mov	r0, r6
 800ab06:	4639      	mov	r1, r7
 800ab08:	f7f5 fbd6 	bl	80002b8 <__aeabi_dsub>
 800ab0c:	e00f      	b.n	800ab2e <__ieee754_rem_pio2+0x1ce>
 800ab0e:	462b      	mov	r3, r5
 800ab10:	4622      	mov	r2, r4
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fbcf 	bl	80002b8 <__aeabi_dsub>
 800ab1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab1e:	9303      	str	r3, [sp, #12]
 800ab20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab24:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ab28:	f1b8 0f10 	cmp.w	r8, #16
 800ab2c:	dc02      	bgt.n	800ab34 <__ieee754_rem_pio2+0x1d4>
 800ab2e:	e9ca 0100 	strd	r0, r1, [sl]
 800ab32:	e039      	b.n	800aba8 <__ieee754_rem_pio2+0x248>
 800ab34:	a34e      	add	r3, pc, #312	; (adr r3, 800ac70 <__ieee754_rem_pio2+0x310>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	ec51 0b18 	vmov	r0, r1, d8
 800ab3e:	f7f5 fd73 	bl	8000628 <__aeabi_dmul>
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	f7f5 fbb3 	bl	80002b8 <__aeabi_dsub>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4680      	mov	r8, r0
 800ab58:	4689      	mov	r9, r1
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 fbab 	bl	80002b8 <__aeabi_dsub>
 800ab62:	4622      	mov	r2, r4
 800ab64:	462b      	mov	r3, r5
 800ab66:	f7f5 fba7 	bl	80002b8 <__aeabi_dsub>
 800ab6a:	a343      	add	r3, pc, #268	; (adr r3, 800ac78 <__ieee754_rem_pio2+0x318>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	4604      	mov	r4, r0
 800ab72:	460d      	mov	r5, r1
 800ab74:	ec51 0b18 	vmov	r0, r1, d8
 800ab78:	f7f5 fd56 	bl	8000628 <__aeabi_dmul>
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	462b      	mov	r3, r5
 800ab80:	f7f5 fb9a 	bl	80002b8 <__aeabi_dsub>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4604      	mov	r4, r0
 800ab8a:	460d      	mov	r5, r1
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	4649      	mov	r1, r9
 800ab90:	f7f5 fb92 	bl	80002b8 <__aeabi_dsub>
 800ab94:	9a03      	ldr	r2, [sp, #12]
 800ab96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	2b31      	cmp	r3, #49	; 0x31
 800ab9e:	dc24      	bgt.n	800abea <__ieee754_rem_pio2+0x28a>
 800aba0:	e9ca 0100 	strd	r0, r1, [sl]
 800aba4:	4646      	mov	r6, r8
 800aba6:	464f      	mov	r7, r9
 800aba8:	e9da 8900 	ldrd	r8, r9, [sl]
 800abac:	4630      	mov	r0, r6
 800abae:	4642      	mov	r2, r8
 800abb0:	464b      	mov	r3, r9
 800abb2:	4639      	mov	r1, r7
 800abb4:	f7f5 fb80 	bl	80002b8 <__aeabi_dsub>
 800abb8:	462b      	mov	r3, r5
 800abba:	4622      	mov	r2, r4
 800abbc:	f7f5 fb7c 	bl	80002b8 <__aeabi_dsub>
 800abc0:	9b02      	ldr	r3, [sp, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800abc8:	f6bf af0a 	bge.w	800a9e0 <__ieee754_rem_pio2+0x80>
 800abcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abd0:	f8ca 3004 	str.w	r3, [sl, #4]
 800abd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd8:	f8ca 8000 	str.w	r8, [sl]
 800abdc:	f8ca 0008 	str.w	r0, [sl, #8]
 800abe0:	f8ca 300c 	str.w	r3, [sl, #12]
 800abe4:	f1cb 0b00 	rsb	fp, fp, #0
 800abe8:	e6fa      	b.n	800a9e0 <__ieee754_rem_pio2+0x80>
 800abea:	a327      	add	r3, pc, #156	; (adr r3, 800ac88 <__ieee754_rem_pio2+0x328>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	ec51 0b18 	vmov	r0, r1, d8
 800abf4:	f7f5 fd18 	bl	8000628 <__aeabi_dmul>
 800abf8:	4604      	mov	r4, r0
 800abfa:	460d      	mov	r5, r1
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4640      	mov	r0, r8
 800ac02:	4649      	mov	r1, r9
 800ac04:	f7f5 fb58 	bl	80002b8 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	4640      	mov	r0, r8
 800ac12:	4649      	mov	r1, r9
 800ac14:	f7f5 fb50 	bl	80002b8 <__aeabi_dsub>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	f7f5 fb4c 	bl	80002b8 <__aeabi_dsub>
 800ac20:	a31b      	add	r3, pc, #108	; (adr r3, 800ac90 <__ieee754_rem_pio2+0x330>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	4604      	mov	r4, r0
 800ac28:	460d      	mov	r5, r1
 800ac2a:	ec51 0b18 	vmov	r0, r1, d8
 800ac2e:	f7f5 fcfb 	bl	8000628 <__aeabi_dmul>
 800ac32:	4622      	mov	r2, r4
 800ac34:	462b      	mov	r3, r5
 800ac36:	f7f5 fb3f 	bl	80002b8 <__aeabi_dsub>
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	460d      	mov	r5, r1
 800ac3e:	e75f      	b.n	800ab00 <__ieee754_rem_pio2+0x1a0>
 800ac40:	4b1b      	ldr	r3, [pc, #108]	; (800acb0 <__ieee754_rem_pio2+0x350>)
 800ac42:	4598      	cmp	r8, r3
 800ac44:	dd36      	ble.n	800acb4 <__ieee754_rem_pio2+0x354>
 800ac46:	ee10 2a10 	vmov	r2, s0
 800ac4a:	462b      	mov	r3, r5
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fb32 	bl	80002b8 <__aeabi_dsub>
 800ac54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac58:	e9ca 0100 	strd	r0, r1, [sl]
 800ac5c:	e694      	b.n	800a988 <__ieee754_rem_pio2+0x28>
 800ac5e:	bf00      	nop
 800ac60:	54400000 	.word	0x54400000
 800ac64:	3ff921fb 	.word	0x3ff921fb
 800ac68:	1a626331 	.word	0x1a626331
 800ac6c:	3dd0b461 	.word	0x3dd0b461
 800ac70:	1a600000 	.word	0x1a600000
 800ac74:	3dd0b461 	.word	0x3dd0b461
 800ac78:	2e037073 	.word	0x2e037073
 800ac7c:	3ba3198a 	.word	0x3ba3198a
 800ac80:	6dc9c883 	.word	0x6dc9c883
 800ac84:	3fe45f30 	.word	0x3fe45f30
 800ac88:	2e000000 	.word	0x2e000000
 800ac8c:	3ba3198a 	.word	0x3ba3198a
 800ac90:	252049c1 	.word	0x252049c1
 800ac94:	397b839a 	.word	0x397b839a
 800ac98:	3fe921fb 	.word	0x3fe921fb
 800ac9c:	4002d97b 	.word	0x4002d97b
 800aca0:	3ff921fb 	.word	0x3ff921fb
 800aca4:	413921fb 	.word	0x413921fb
 800aca8:	3fe00000 	.word	0x3fe00000
 800acac:	0800c280 	.word	0x0800c280
 800acb0:	7fefffff 	.word	0x7fefffff
 800acb4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800acb8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800acbc:	ee10 0a10 	vmov	r0, s0
 800acc0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800acc4:	ee10 6a10 	vmov	r6, s0
 800acc8:	460f      	mov	r7, r1
 800acca:	f7f5 ff5d 	bl	8000b88 <__aeabi_d2iz>
 800acce:	f7f5 fc41 	bl	8000554 <__aeabi_i2d>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acde:	f7f5 faeb 	bl	80002b8 <__aeabi_dsub>
 800ace2:	4b23      	ldr	r3, [pc, #140]	; (800ad70 <__ieee754_rem_pio2+0x410>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	f7f5 fc9f 	bl	8000628 <__aeabi_dmul>
 800acea:	460f      	mov	r7, r1
 800acec:	4606      	mov	r6, r0
 800acee:	f7f5 ff4b 	bl	8000b88 <__aeabi_d2iz>
 800acf2:	f7f5 fc2f 	bl	8000554 <__aeabi_i2d>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4630      	mov	r0, r6
 800acfc:	4639      	mov	r1, r7
 800acfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad02:	f7f5 fad9 	bl	80002b8 <__aeabi_dsub>
 800ad06:	4b1a      	ldr	r3, [pc, #104]	; (800ad70 <__ieee754_rem_pio2+0x410>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f7f5 fc8d 	bl	8000628 <__aeabi_dmul>
 800ad0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad12:	ad04      	add	r5, sp, #16
 800ad14:	f04f 0803 	mov.w	r8, #3
 800ad18:	46a9      	mov	r9, r5
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	2700      	movs	r7, #0
 800ad1e:	4632      	mov	r2, r6
 800ad20:	463b      	mov	r3, r7
 800ad22:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ad26:	46c3      	mov	fp, r8
 800ad28:	3d08      	subs	r5, #8
 800ad2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ad2e:	f7f5 fee3 	bl	8000af8 <__aeabi_dcmpeq>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d1f3      	bne.n	800ad1e <__ieee754_rem_pio2+0x3be>
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <__ieee754_rem_pio2+0x414>)
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	4622      	mov	r2, r4
 800ad40:	465b      	mov	r3, fp
 800ad42:	4651      	mov	r1, sl
 800ad44:	4648      	mov	r0, r9
 800ad46:	f000 f993 	bl	800b070 <__kernel_rem_pio2>
 800ad4a:	9b02      	ldr	r3, [sp, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	4683      	mov	fp, r0
 800ad50:	f6bf ae46 	bge.w	800a9e0 <__ieee754_rem_pio2+0x80>
 800ad54:	e9da 2100 	ldrd	r2, r1, [sl]
 800ad58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad5c:	e9ca 2300 	strd	r2, r3, [sl]
 800ad60:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ad64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad68:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ad6c:	e73a      	b.n	800abe4 <__ieee754_rem_pio2+0x284>
 800ad6e:	bf00      	nop
 800ad70:	41700000 	.word	0x41700000
 800ad74:	0800c300 	.word	0x0800c300

0800ad78 <__ieee754_sqrt>:
 800ad78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7c:	ec55 4b10 	vmov	r4, r5, d0
 800ad80:	4e55      	ldr	r6, [pc, #340]	; (800aed8 <__ieee754_sqrt+0x160>)
 800ad82:	43ae      	bics	r6, r5
 800ad84:	ee10 0a10 	vmov	r0, s0
 800ad88:	ee10 3a10 	vmov	r3, s0
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	4629      	mov	r1, r5
 800ad90:	d110      	bne.n	800adb4 <__ieee754_sqrt+0x3c>
 800ad92:	ee10 2a10 	vmov	r2, s0
 800ad96:	462b      	mov	r3, r5
 800ad98:	f7f5 fc46 	bl	8000628 <__aeabi_dmul>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4620      	mov	r0, r4
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7f5 fa8a 	bl	80002bc <__adddf3>
 800ada8:	4604      	mov	r4, r0
 800adaa:	460d      	mov	r5, r1
 800adac:	ec45 4b10 	vmov	d0, r4, r5
 800adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	dc10      	bgt.n	800adda <__ieee754_sqrt+0x62>
 800adb8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800adbc:	4330      	orrs	r0, r6
 800adbe:	d0f5      	beq.n	800adac <__ieee754_sqrt+0x34>
 800adc0:	b15d      	cbz	r5, 800adda <__ieee754_sqrt+0x62>
 800adc2:	ee10 2a10 	vmov	r2, s0
 800adc6:	462b      	mov	r3, r5
 800adc8:	ee10 0a10 	vmov	r0, s0
 800adcc:	f7f5 fa74 	bl	80002b8 <__aeabi_dsub>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	f7f5 fd52 	bl	800087c <__aeabi_ddiv>
 800add8:	e7e6      	b.n	800ada8 <__ieee754_sqrt+0x30>
 800adda:	1512      	asrs	r2, r2, #20
 800addc:	d074      	beq.n	800aec8 <__ieee754_sqrt+0x150>
 800adde:	07d4      	lsls	r4, r2, #31
 800ade0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ade4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ade8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800adec:	bf5e      	ittt	pl
 800adee:	0fda      	lsrpl	r2, r3, #31
 800adf0:	005b      	lslpl	r3, r3, #1
 800adf2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800adf6:	2400      	movs	r4, #0
 800adf8:	0fda      	lsrs	r2, r3, #31
 800adfa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800adfe:	107f      	asrs	r7, r7, #1
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	2516      	movs	r5, #22
 800ae04:	4620      	mov	r0, r4
 800ae06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ae0a:	1886      	adds	r6, r0, r2
 800ae0c:	428e      	cmp	r6, r1
 800ae0e:	bfde      	ittt	le
 800ae10:	1b89      	suble	r1, r1, r6
 800ae12:	18b0      	addle	r0, r6, r2
 800ae14:	18a4      	addle	r4, r4, r2
 800ae16:	0049      	lsls	r1, r1, #1
 800ae18:	3d01      	subs	r5, #1
 800ae1a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ae1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ae22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae26:	d1f0      	bne.n	800ae0a <__ieee754_sqrt+0x92>
 800ae28:	462a      	mov	r2, r5
 800ae2a:	f04f 0e20 	mov.w	lr, #32
 800ae2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae32:	4281      	cmp	r1, r0
 800ae34:	eb06 0c05 	add.w	ip, r6, r5
 800ae38:	dc02      	bgt.n	800ae40 <__ieee754_sqrt+0xc8>
 800ae3a:	d113      	bne.n	800ae64 <__ieee754_sqrt+0xec>
 800ae3c:	459c      	cmp	ip, r3
 800ae3e:	d811      	bhi.n	800ae64 <__ieee754_sqrt+0xec>
 800ae40:	f1bc 0f00 	cmp.w	ip, #0
 800ae44:	eb0c 0506 	add.w	r5, ip, r6
 800ae48:	da43      	bge.n	800aed2 <__ieee754_sqrt+0x15a>
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	db41      	blt.n	800aed2 <__ieee754_sqrt+0x15a>
 800ae4e:	f100 0801 	add.w	r8, r0, #1
 800ae52:	1a09      	subs	r1, r1, r0
 800ae54:	459c      	cmp	ip, r3
 800ae56:	bf88      	it	hi
 800ae58:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ae5c:	eba3 030c 	sub.w	r3, r3, ip
 800ae60:	4432      	add	r2, r6
 800ae62:	4640      	mov	r0, r8
 800ae64:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ae68:	f1be 0e01 	subs.w	lr, lr, #1
 800ae6c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ae70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae78:	d1db      	bne.n	800ae32 <__ieee754_sqrt+0xba>
 800ae7a:	430b      	orrs	r3, r1
 800ae7c:	d006      	beq.n	800ae8c <__ieee754_sqrt+0x114>
 800ae7e:	1c50      	adds	r0, r2, #1
 800ae80:	bf13      	iteet	ne
 800ae82:	3201      	addne	r2, #1
 800ae84:	3401      	addeq	r4, #1
 800ae86:	4672      	moveq	r2, lr
 800ae88:	f022 0201 	bicne.w	r2, r2, #1
 800ae8c:	1063      	asrs	r3, r4, #1
 800ae8e:	0852      	lsrs	r2, r2, #1
 800ae90:	07e1      	lsls	r1, r4, #31
 800ae92:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae9a:	bf48      	it	mi
 800ae9c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aea0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aea4:	4614      	mov	r4, r2
 800aea6:	e781      	b.n	800adac <__ieee754_sqrt+0x34>
 800aea8:	0ad9      	lsrs	r1, r3, #11
 800aeaa:	3815      	subs	r0, #21
 800aeac:	055b      	lsls	r3, r3, #21
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d0fa      	beq.n	800aea8 <__ieee754_sqrt+0x130>
 800aeb2:	02cd      	lsls	r5, r1, #11
 800aeb4:	d50a      	bpl.n	800aecc <__ieee754_sqrt+0x154>
 800aeb6:	f1c2 0420 	rsb	r4, r2, #32
 800aeba:	fa23 f404 	lsr.w	r4, r3, r4
 800aebe:	1e55      	subs	r5, r2, #1
 800aec0:	4093      	lsls	r3, r2
 800aec2:	4321      	orrs	r1, r4
 800aec4:	1b42      	subs	r2, r0, r5
 800aec6:	e78a      	b.n	800adde <__ieee754_sqrt+0x66>
 800aec8:	4610      	mov	r0, r2
 800aeca:	e7f0      	b.n	800aeae <__ieee754_sqrt+0x136>
 800aecc:	0049      	lsls	r1, r1, #1
 800aece:	3201      	adds	r2, #1
 800aed0:	e7ef      	b.n	800aeb2 <__ieee754_sqrt+0x13a>
 800aed2:	4680      	mov	r8, r0
 800aed4:	e7bd      	b.n	800ae52 <__ieee754_sqrt+0xda>
 800aed6:	bf00      	nop
 800aed8:	7ff00000 	.word	0x7ff00000
 800aedc:	00000000 	.word	0x00000000

0800aee0 <__kernel_cos>:
 800aee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	ec57 6b10 	vmov	r6, r7, d0
 800aee8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aeec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aef0:	ed8d 1b00 	vstr	d1, [sp]
 800aef4:	da07      	bge.n	800af06 <__kernel_cos+0x26>
 800aef6:	ee10 0a10 	vmov	r0, s0
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fe44 	bl	8000b88 <__aeabi_d2iz>
 800af00:	2800      	cmp	r0, #0
 800af02:	f000 8088 	beq.w	800b016 <__kernel_cos+0x136>
 800af06:	4632      	mov	r2, r6
 800af08:	463b      	mov	r3, r7
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 fb8b 	bl	8000628 <__aeabi_dmul>
 800af12:	4b51      	ldr	r3, [pc, #324]	; (800b058 <__kernel_cos+0x178>)
 800af14:	2200      	movs	r2, #0
 800af16:	4604      	mov	r4, r0
 800af18:	460d      	mov	r5, r1
 800af1a:	f7f5 fb85 	bl	8000628 <__aeabi_dmul>
 800af1e:	a340      	add	r3, pc, #256	; (adr r3, 800b020 <__kernel_cos+0x140>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	4620      	mov	r0, r4
 800af2a:	4629      	mov	r1, r5
 800af2c:	f7f5 fb7c 	bl	8000628 <__aeabi_dmul>
 800af30:	a33d      	add	r3, pc, #244	; (adr r3, 800b028 <__kernel_cos+0x148>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 f9c1 	bl	80002bc <__adddf3>
 800af3a:	4622      	mov	r2, r4
 800af3c:	462b      	mov	r3, r5
 800af3e:	f7f5 fb73 	bl	8000628 <__aeabi_dmul>
 800af42:	a33b      	add	r3, pc, #236	; (adr r3, 800b030 <__kernel_cos+0x150>)
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f7f5 f9b6 	bl	80002b8 <__aeabi_dsub>
 800af4c:	4622      	mov	r2, r4
 800af4e:	462b      	mov	r3, r5
 800af50:	f7f5 fb6a 	bl	8000628 <__aeabi_dmul>
 800af54:	a338      	add	r3, pc, #224	; (adr r3, 800b038 <__kernel_cos+0x158>)
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	f7f5 f9af 	bl	80002bc <__adddf3>
 800af5e:	4622      	mov	r2, r4
 800af60:	462b      	mov	r3, r5
 800af62:	f7f5 fb61 	bl	8000628 <__aeabi_dmul>
 800af66:	a336      	add	r3, pc, #216	; (adr r3, 800b040 <__kernel_cos+0x160>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 f9a4 	bl	80002b8 <__aeabi_dsub>
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	f7f5 fb58 	bl	8000628 <__aeabi_dmul>
 800af78:	a333      	add	r3, pc, #204	; (adr r3, 800b048 <__kernel_cos+0x168>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 f99d 	bl	80002bc <__adddf3>
 800af82:	4622      	mov	r2, r4
 800af84:	462b      	mov	r3, r5
 800af86:	f7f5 fb4f 	bl	8000628 <__aeabi_dmul>
 800af8a:	4622      	mov	r2, r4
 800af8c:	462b      	mov	r3, r5
 800af8e:	f7f5 fb4b 	bl	8000628 <__aeabi_dmul>
 800af92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af96:	4604      	mov	r4, r0
 800af98:	460d      	mov	r5, r1
 800af9a:	4630      	mov	r0, r6
 800af9c:	4639      	mov	r1, r7
 800af9e:	f7f5 fb43 	bl	8000628 <__aeabi_dmul>
 800afa2:	460b      	mov	r3, r1
 800afa4:	4602      	mov	r2, r0
 800afa6:	4629      	mov	r1, r5
 800afa8:	4620      	mov	r0, r4
 800afaa:	f7f5 f985 	bl	80002b8 <__aeabi_dsub>
 800afae:	4b2b      	ldr	r3, [pc, #172]	; (800b05c <__kernel_cos+0x17c>)
 800afb0:	4598      	cmp	r8, r3
 800afb2:	4606      	mov	r6, r0
 800afb4:	460f      	mov	r7, r1
 800afb6:	dc10      	bgt.n	800afda <__kernel_cos+0xfa>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4650      	mov	r0, sl
 800afbe:	4659      	mov	r1, fp
 800afc0:	f7f5 f97a 	bl	80002b8 <__aeabi_dsub>
 800afc4:	460b      	mov	r3, r1
 800afc6:	4926      	ldr	r1, [pc, #152]	; (800b060 <__kernel_cos+0x180>)
 800afc8:	4602      	mov	r2, r0
 800afca:	2000      	movs	r0, #0
 800afcc:	f7f5 f974 	bl	80002b8 <__aeabi_dsub>
 800afd0:	ec41 0b10 	vmov	d0, r0, r1
 800afd4:	b003      	add	sp, #12
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afda:	4b22      	ldr	r3, [pc, #136]	; (800b064 <__kernel_cos+0x184>)
 800afdc:	4920      	ldr	r1, [pc, #128]	; (800b060 <__kernel_cos+0x180>)
 800afde:	4598      	cmp	r8, r3
 800afe0:	bfcc      	ite	gt
 800afe2:	4d21      	ldrgt	r5, [pc, #132]	; (800b068 <__kernel_cos+0x188>)
 800afe4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800afe8:	2400      	movs	r4, #0
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	2000      	movs	r0, #0
 800aff0:	f7f5 f962 	bl	80002b8 <__aeabi_dsub>
 800aff4:	4622      	mov	r2, r4
 800aff6:	4680      	mov	r8, r0
 800aff8:	4689      	mov	r9, r1
 800affa:	462b      	mov	r3, r5
 800affc:	4650      	mov	r0, sl
 800affe:	4659      	mov	r1, fp
 800b000:	f7f5 f95a 	bl	80002b8 <__aeabi_dsub>
 800b004:	4632      	mov	r2, r6
 800b006:	463b      	mov	r3, r7
 800b008:	f7f5 f956 	bl	80002b8 <__aeabi_dsub>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4640      	mov	r0, r8
 800b012:	4649      	mov	r1, r9
 800b014:	e7da      	b.n	800afcc <__kernel_cos+0xec>
 800b016:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b050 <__kernel_cos+0x170>
 800b01a:	e7db      	b.n	800afd4 <__kernel_cos+0xf4>
 800b01c:	f3af 8000 	nop.w
 800b020:	be8838d4 	.word	0xbe8838d4
 800b024:	bda8fae9 	.word	0xbda8fae9
 800b028:	bdb4b1c4 	.word	0xbdb4b1c4
 800b02c:	3e21ee9e 	.word	0x3e21ee9e
 800b030:	809c52ad 	.word	0x809c52ad
 800b034:	3e927e4f 	.word	0x3e927e4f
 800b038:	19cb1590 	.word	0x19cb1590
 800b03c:	3efa01a0 	.word	0x3efa01a0
 800b040:	16c15177 	.word	0x16c15177
 800b044:	3f56c16c 	.word	0x3f56c16c
 800b048:	5555554c 	.word	0x5555554c
 800b04c:	3fa55555 	.word	0x3fa55555
 800b050:	00000000 	.word	0x00000000
 800b054:	3ff00000 	.word	0x3ff00000
 800b058:	3fe00000 	.word	0x3fe00000
 800b05c:	3fd33332 	.word	0x3fd33332
 800b060:	3ff00000 	.word	0x3ff00000
 800b064:	3fe90000 	.word	0x3fe90000
 800b068:	3fd20000 	.word	0x3fd20000
 800b06c:	00000000 	.word	0x00000000

0800b070 <__kernel_rem_pio2>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ed2d 8b02 	vpush	{d8}
 800b078:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b07c:	f112 0f14 	cmn.w	r2, #20
 800b080:	9308      	str	r3, [sp, #32]
 800b082:	9101      	str	r1, [sp, #4]
 800b084:	4bc4      	ldr	r3, [pc, #784]	; (800b398 <__kernel_rem_pio2+0x328>)
 800b086:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b088:	900b      	str	r0, [sp, #44]	; 0x2c
 800b08a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b08e:	9302      	str	r3, [sp, #8]
 800b090:	9b08      	ldr	r3, [sp, #32]
 800b092:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b096:	bfa8      	it	ge
 800b098:	1ed4      	subge	r4, r2, #3
 800b09a:	9306      	str	r3, [sp, #24]
 800b09c:	bfb2      	itee	lt
 800b09e:	2400      	movlt	r4, #0
 800b0a0:	2318      	movge	r3, #24
 800b0a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b0a6:	f06f 0317 	mvn.w	r3, #23
 800b0aa:	fb04 3303 	mla	r3, r4, r3, r3
 800b0ae:	eb03 0a02 	add.w	sl, r3, r2
 800b0b2:	9b02      	ldr	r3, [sp, #8]
 800b0b4:	9a06      	ldr	r2, [sp, #24]
 800b0b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b388 <__kernel_rem_pio2+0x318>
 800b0ba:	eb03 0802 	add.w	r8, r3, r2
 800b0be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b0c0:	1aa7      	subs	r7, r4, r2
 800b0c2:	ae22      	add	r6, sp, #136	; 0x88
 800b0c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	4545      	cmp	r5, r8
 800b0cc:	dd13      	ble.n	800b0f6 <__kernel_rem_pio2+0x86>
 800b0ce:	9b08      	ldr	r3, [sp, #32]
 800b0d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b388 <__kernel_rem_pio2+0x318>
 800b0d4:	aa22      	add	r2, sp, #136	; 0x88
 800b0d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b0da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b0de:	f04f 0800 	mov.w	r8, #0
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	4598      	cmp	r8, r3
 800b0e6:	dc2f      	bgt.n	800b148 <__kernel_rem_pio2+0xd8>
 800b0e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b0ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b0f0:	462f      	mov	r7, r5
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	e01b      	b.n	800b12e <__kernel_rem_pio2+0xbe>
 800b0f6:	42ef      	cmn	r7, r5
 800b0f8:	d407      	bmi.n	800b10a <__kernel_rem_pio2+0x9a>
 800b0fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b0fe:	f7f5 fa29 	bl	8000554 <__aeabi_i2d>
 800b102:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b106:	3501      	adds	r5, #1
 800b108:	e7df      	b.n	800b0ca <__kernel_rem_pio2+0x5a>
 800b10a:	ec51 0b18 	vmov	r0, r1, d8
 800b10e:	e7f8      	b.n	800b102 <__kernel_rem_pio2+0x92>
 800b110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b114:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b118:	f7f5 fa86 	bl	8000628 <__aeabi_dmul>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b124:	f7f5 f8ca 	bl	80002bc <__adddf3>
 800b128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b12c:	3601      	adds	r6, #1
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	429e      	cmp	r6, r3
 800b132:	f1a7 0708 	sub.w	r7, r7, #8
 800b136:	ddeb      	ble.n	800b110 <__kernel_rem_pio2+0xa0>
 800b138:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b13c:	f108 0801 	add.w	r8, r8, #1
 800b140:	ecab 7b02 	vstmia	fp!, {d7}
 800b144:	3508      	adds	r5, #8
 800b146:	e7cc      	b.n	800b0e2 <__kernel_rem_pio2+0x72>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	aa0e      	add	r2, sp, #56	; 0x38
 800b14c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b150:	930d      	str	r3, [sp, #52]	; 0x34
 800b152:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b154:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b158:	9c02      	ldr	r4, [sp, #8]
 800b15a:	930c      	str	r3, [sp, #48]	; 0x30
 800b15c:	00e3      	lsls	r3, r4, #3
 800b15e:	930a      	str	r3, [sp, #40]	; 0x28
 800b160:	ab9a      	add	r3, sp, #616	; 0x268
 800b162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b166:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b16a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b16e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b170:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b174:	46c3      	mov	fp, r8
 800b176:	46a1      	mov	r9, r4
 800b178:	f1b9 0f00 	cmp.w	r9, #0
 800b17c:	f1a5 0508 	sub.w	r5, r5, #8
 800b180:	dc77      	bgt.n	800b272 <__kernel_rem_pio2+0x202>
 800b182:	ec47 6b10 	vmov	d0, r6, r7
 800b186:	4650      	mov	r0, sl
 800b188:	f000 fde6 	bl	800bd58 <scalbn>
 800b18c:	ec57 6b10 	vmov	r6, r7, d0
 800b190:	2200      	movs	r2, #0
 800b192:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b196:	ee10 0a10 	vmov	r0, s0
 800b19a:	4639      	mov	r1, r7
 800b19c:	f7f5 fa44 	bl	8000628 <__aeabi_dmul>
 800b1a0:	ec41 0b10 	vmov	d0, r0, r1
 800b1a4:	f000 fd58 	bl	800bc58 <floor>
 800b1a8:	4b7c      	ldr	r3, [pc, #496]	; (800b39c <__kernel_rem_pio2+0x32c>)
 800b1aa:	ec51 0b10 	vmov	r0, r1, d0
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f7f5 fa3a 	bl	8000628 <__aeabi_dmul>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	f7f5 f87c 	bl	80002b8 <__aeabi_dsub>
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	f7f5 fce0 	bl	8000b88 <__aeabi_d2iz>
 800b1c8:	9004      	str	r0, [sp, #16]
 800b1ca:	f7f5 f9c3 	bl	8000554 <__aeabi_i2d>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f7f5 f86f 	bl	80002b8 <__aeabi_dsub>
 800b1da:	f1ba 0f00 	cmp.w	sl, #0
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	dd6d      	ble.n	800b2c0 <__kernel_rem_pio2+0x250>
 800b1e4:	1e62      	subs	r2, r4, #1
 800b1e6:	ab0e      	add	r3, sp, #56	; 0x38
 800b1e8:	9d04      	ldr	r5, [sp, #16]
 800b1ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b1ee:	f1ca 0118 	rsb	r1, sl, #24
 800b1f2:	fa40 f301 	asr.w	r3, r0, r1
 800b1f6:	441d      	add	r5, r3
 800b1f8:	408b      	lsls	r3, r1
 800b1fa:	1ac0      	subs	r0, r0, r3
 800b1fc:	ab0e      	add	r3, sp, #56	; 0x38
 800b1fe:	9504      	str	r5, [sp, #16]
 800b200:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b204:	f1ca 0317 	rsb	r3, sl, #23
 800b208:	fa40 fb03 	asr.w	fp, r0, r3
 800b20c:	f1bb 0f00 	cmp.w	fp, #0
 800b210:	dd65      	ble.n	800b2de <__kernel_rem_pio2+0x26e>
 800b212:	9b04      	ldr	r3, [sp, #16]
 800b214:	2200      	movs	r2, #0
 800b216:	3301      	adds	r3, #1
 800b218:	9304      	str	r3, [sp, #16]
 800b21a:	4615      	mov	r5, r2
 800b21c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b220:	4294      	cmp	r4, r2
 800b222:	f300 809c 	bgt.w	800b35e <__kernel_rem_pio2+0x2ee>
 800b226:	f1ba 0f00 	cmp.w	sl, #0
 800b22a:	dd07      	ble.n	800b23c <__kernel_rem_pio2+0x1cc>
 800b22c:	f1ba 0f01 	cmp.w	sl, #1
 800b230:	f000 80c0 	beq.w	800b3b4 <__kernel_rem_pio2+0x344>
 800b234:	f1ba 0f02 	cmp.w	sl, #2
 800b238:	f000 80c6 	beq.w	800b3c8 <__kernel_rem_pio2+0x358>
 800b23c:	f1bb 0f02 	cmp.w	fp, #2
 800b240:	d14d      	bne.n	800b2de <__kernel_rem_pio2+0x26e>
 800b242:	4632      	mov	r2, r6
 800b244:	463b      	mov	r3, r7
 800b246:	4956      	ldr	r1, [pc, #344]	; (800b3a0 <__kernel_rem_pio2+0x330>)
 800b248:	2000      	movs	r0, #0
 800b24a:	f7f5 f835 	bl	80002b8 <__aeabi_dsub>
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	2d00      	cmp	r5, #0
 800b254:	d043      	beq.n	800b2de <__kernel_rem_pio2+0x26e>
 800b256:	4650      	mov	r0, sl
 800b258:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b390 <__kernel_rem_pio2+0x320>
 800b25c:	f000 fd7c 	bl	800bd58 <scalbn>
 800b260:	4630      	mov	r0, r6
 800b262:	4639      	mov	r1, r7
 800b264:	ec53 2b10 	vmov	r2, r3, d0
 800b268:	f7f5 f826 	bl	80002b8 <__aeabi_dsub>
 800b26c:	4606      	mov	r6, r0
 800b26e:	460f      	mov	r7, r1
 800b270:	e035      	b.n	800b2de <__kernel_rem_pio2+0x26e>
 800b272:	4b4c      	ldr	r3, [pc, #304]	; (800b3a4 <__kernel_rem_pio2+0x334>)
 800b274:	2200      	movs	r2, #0
 800b276:	4630      	mov	r0, r6
 800b278:	4639      	mov	r1, r7
 800b27a:	f7f5 f9d5 	bl	8000628 <__aeabi_dmul>
 800b27e:	f7f5 fc83 	bl	8000b88 <__aeabi_d2iz>
 800b282:	f7f5 f967 	bl	8000554 <__aeabi_i2d>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	ec43 2b18 	vmov	d8, r2, r3
 800b28e:	4b46      	ldr	r3, [pc, #280]	; (800b3a8 <__kernel_rem_pio2+0x338>)
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9c9 	bl	8000628 <__aeabi_dmul>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f5 f80b 	bl	80002b8 <__aeabi_dsub>
 800b2a2:	f7f5 fc71 	bl	8000b88 <__aeabi_d2iz>
 800b2a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2aa:	f84b 0b04 	str.w	r0, [fp], #4
 800b2ae:	ec51 0b18 	vmov	r0, r1, d8
 800b2b2:	f7f5 f803 	bl	80002bc <__adddf3>
 800b2b6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	460f      	mov	r7, r1
 800b2be:	e75b      	b.n	800b178 <__kernel_rem_pio2+0x108>
 800b2c0:	d106      	bne.n	800b2d0 <__kernel_rem_pio2+0x260>
 800b2c2:	1e63      	subs	r3, r4, #1
 800b2c4:	aa0e      	add	r2, sp, #56	; 0x38
 800b2c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b2ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b2ce:	e79d      	b.n	800b20c <__kernel_rem_pio2+0x19c>
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <__kernel_rem_pio2+0x33c>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f7f5 fc2e 	bl	8000b34 <__aeabi_dcmpge>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d13d      	bne.n	800b358 <__kernel_rem_pio2+0x2e8>
 800b2dc:	4683      	mov	fp, r0
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	f7f5 fc07 	bl	8000af8 <__aeabi_dcmpeq>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f000 80c0 	beq.w	800b470 <__kernel_rem_pio2+0x400>
 800b2f0:	1e65      	subs	r5, r4, #1
 800b2f2:	462b      	mov	r3, r5
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	9902      	ldr	r1, [sp, #8]
 800b2f8:	428b      	cmp	r3, r1
 800b2fa:	da6c      	bge.n	800b3d6 <__kernel_rem_pio2+0x366>
 800b2fc:	2a00      	cmp	r2, #0
 800b2fe:	f000 8089 	beq.w	800b414 <__kernel_rem_pio2+0x3a4>
 800b302:	ab0e      	add	r3, sp, #56	; 0x38
 800b304:	f1aa 0a18 	sub.w	sl, sl, #24
 800b308:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 80ad 	beq.w	800b46c <__kernel_rem_pio2+0x3fc>
 800b312:	4650      	mov	r0, sl
 800b314:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b390 <__kernel_rem_pio2+0x320>
 800b318:	f000 fd1e 	bl	800bd58 <scalbn>
 800b31c:	ab9a      	add	r3, sp, #616	; 0x268
 800b31e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b322:	ec57 6b10 	vmov	r6, r7, d0
 800b326:	00ec      	lsls	r4, r5, #3
 800b328:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b32c:	46aa      	mov	sl, r5
 800b32e:	f1ba 0f00 	cmp.w	sl, #0
 800b332:	f280 80d6 	bge.w	800b4e2 <__kernel_rem_pio2+0x472>
 800b336:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b388 <__kernel_rem_pio2+0x318>
 800b33a:	462e      	mov	r6, r5
 800b33c:	2e00      	cmp	r6, #0
 800b33e:	f2c0 8104 	blt.w	800b54a <__kernel_rem_pio2+0x4da>
 800b342:	ab72      	add	r3, sp, #456	; 0x1c8
 800b344:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b348:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b3b0 <__kernel_rem_pio2+0x340>
 800b34c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b350:	f04f 0800 	mov.w	r8, #0
 800b354:	1baf      	subs	r7, r5, r6
 800b356:	e0ea      	b.n	800b52e <__kernel_rem_pio2+0x4be>
 800b358:	f04f 0b02 	mov.w	fp, #2
 800b35c:	e759      	b.n	800b212 <__kernel_rem_pio2+0x1a2>
 800b35e:	f8d8 3000 	ldr.w	r3, [r8]
 800b362:	b955      	cbnz	r5, 800b37a <__kernel_rem_pio2+0x30a>
 800b364:	b123      	cbz	r3, 800b370 <__kernel_rem_pio2+0x300>
 800b366:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b36a:	f8c8 3000 	str.w	r3, [r8]
 800b36e:	2301      	movs	r3, #1
 800b370:	3201      	adds	r2, #1
 800b372:	f108 0804 	add.w	r8, r8, #4
 800b376:	461d      	mov	r5, r3
 800b378:	e752      	b.n	800b220 <__kernel_rem_pio2+0x1b0>
 800b37a:	1acb      	subs	r3, r1, r3
 800b37c:	f8c8 3000 	str.w	r3, [r8]
 800b380:	462b      	mov	r3, r5
 800b382:	e7f5      	b.n	800b370 <__kernel_rem_pio2+0x300>
 800b384:	f3af 8000 	nop.w
	...
 800b394:	3ff00000 	.word	0x3ff00000
 800b398:	0800c448 	.word	0x0800c448
 800b39c:	40200000 	.word	0x40200000
 800b3a0:	3ff00000 	.word	0x3ff00000
 800b3a4:	3e700000 	.word	0x3e700000
 800b3a8:	41700000 	.word	0x41700000
 800b3ac:	3fe00000 	.word	0x3fe00000
 800b3b0:	0800c408 	.word	0x0800c408
 800b3b4:	1e62      	subs	r2, r4, #1
 800b3b6:	ab0e      	add	r3, sp, #56	; 0x38
 800b3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3c0:	a90e      	add	r1, sp, #56	; 0x38
 800b3c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3c6:	e739      	b.n	800b23c <__kernel_rem_pio2+0x1cc>
 800b3c8:	1e62      	subs	r2, r4, #1
 800b3ca:	ab0e      	add	r3, sp, #56	; 0x38
 800b3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3d4:	e7f4      	b.n	800b3c0 <__kernel_rem_pio2+0x350>
 800b3d6:	a90e      	add	r1, sp, #56	; 0x38
 800b3d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	e789      	b.n	800b2f6 <__kernel_rem_pio2+0x286>
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d0fa      	beq.n	800b3e2 <__kernel_rem_pio2+0x372>
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b3f2:	446a      	add	r2, sp
 800b3f4:	3a98      	subs	r2, #152	; 0x98
 800b3f6:	920a      	str	r2, [sp, #40]	; 0x28
 800b3f8:	9a08      	ldr	r2, [sp, #32]
 800b3fa:	18e3      	adds	r3, r4, r3
 800b3fc:	18a5      	adds	r5, r4, r2
 800b3fe:	aa22      	add	r2, sp, #136	; 0x88
 800b400:	f104 0801 	add.w	r8, r4, #1
 800b404:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	9b04      	ldr	r3, [sp, #16]
 800b40c:	4543      	cmp	r3, r8
 800b40e:	da04      	bge.n	800b41a <__kernel_rem_pio2+0x3aa>
 800b410:	461c      	mov	r4, r3
 800b412:	e6a3      	b.n	800b15c <__kernel_rem_pio2+0xec>
 800b414:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b416:	2301      	movs	r3, #1
 800b418:	e7e4      	b.n	800b3e4 <__kernel_rem_pio2+0x374>
 800b41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b41c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b420:	f7f5 f898 	bl	8000554 <__aeabi_i2d>
 800b424:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b42a:	46ab      	mov	fp, r5
 800b42c:	461c      	mov	r4, r3
 800b42e:	f04f 0900 	mov.w	r9, #0
 800b432:	2600      	movs	r6, #0
 800b434:	2700      	movs	r7, #0
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	4599      	cmp	r9, r3
 800b43a:	dd06      	ble.n	800b44a <__kernel_rem_pio2+0x3da>
 800b43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b442:	f108 0801 	add.w	r8, r8, #1
 800b446:	930a      	str	r3, [sp, #40]	; 0x28
 800b448:	e7df      	b.n	800b40a <__kernel_rem_pio2+0x39a>
 800b44a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b44e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b452:	f7f5 f8e9 	bl	8000628 <__aeabi_dmul>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f4 ff2d 	bl	80002bc <__adddf3>
 800b462:	f109 0901 	add.w	r9, r9, #1
 800b466:	4606      	mov	r6, r0
 800b468:	460f      	mov	r7, r1
 800b46a:	e7e4      	b.n	800b436 <__kernel_rem_pio2+0x3c6>
 800b46c:	3d01      	subs	r5, #1
 800b46e:	e748      	b.n	800b302 <__kernel_rem_pio2+0x292>
 800b470:	ec47 6b10 	vmov	d0, r6, r7
 800b474:	f1ca 0000 	rsb	r0, sl, #0
 800b478:	f000 fc6e 	bl	800bd58 <scalbn>
 800b47c:	ec57 6b10 	vmov	r6, r7, d0
 800b480:	4ba0      	ldr	r3, [pc, #640]	; (800b704 <__kernel_rem_pio2+0x694>)
 800b482:	ee10 0a10 	vmov	r0, s0
 800b486:	2200      	movs	r2, #0
 800b488:	4639      	mov	r1, r7
 800b48a:	f7f5 fb53 	bl	8000b34 <__aeabi_dcmpge>
 800b48e:	b1f8      	cbz	r0, 800b4d0 <__kernel_rem_pio2+0x460>
 800b490:	4b9d      	ldr	r3, [pc, #628]	; (800b708 <__kernel_rem_pio2+0x698>)
 800b492:	2200      	movs	r2, #0
 800b494:	4630      	mov	r0, r6
 800b496:	4639      	mov	r1, r7
 800b498:	f7f5 f8c6 	bl	8000628 <__aeabi_dmul>
 800b49c:	f7f5 fb74 	bl	8000b88 <__aeabi_d2iz>
 800b4a0:	4680      	mov	r8, r0
 800b4a2:	f7f5 f857 	bl	8000554 <__aeabi_i2d>
 800b4a6:	4b97      	ldr	r3, [pc, #604]	; (800b704 <__kernel_rem_pio2+0x694>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f7f5 f8bd 	bl	8000628 <__aeabi_dmul>
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7f4 feff 	bl	80002b8 <__aeabi_dsub>
 800b4ba:	f7f5 fb65 	bl	8000b88 <__aeabi_d2iz>
 800b4be:	1c65      	adds	r5, r4, #1
 800b4c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b4c2:	f10a 0a18 	add.w	sl, sl, #24
 800b4c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b4ce:	e720      	b.n	800b312 <__kernel_rem_pio2+0x2a2>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	f7f5 fb58 	bl	8000b88 <__aeabi_d2iz>
 800b4d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b4da:	4625      	mov	r5, r4
 800b4dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b4e0:	e717      	b.n	800b312 <__kernel_rem_pio2+0x2a2>
 800b4e2:	ab0e      	add	r3, sp, #56	; 0x38
 800b4e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b4e8:	f7f5 f834 	bl	8000554 <__aeabi_i2d>
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	f7f5 f89a 	bl	8000628 <__aeabi_dmul>
 800b4f4:	4b84      	ldr	r3, [pc, #528]	; (800b708 <__kernel_rem_pio2+0x698>)
 800b4f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f7f5 f892 	bl	8000628 <__aeabi_dmul>
 800b504:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b508:	4606      	mov	r6, r0
 800b50a:	460f      	mov	r7, r1
 800b50c:	e70f      	b.n	800b32e <__kernel_rem_pio2+0x2be>
 800b50e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b512:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b516:	f7f5 f887 	bl	8000628 <__aeabi_dmul>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b522:	f7f4 fecb 	bl	80002bc <__adddf3>
 800b526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b52a:	f108 0801 	add.w	r8, r8, #1
 800b52e:	9b02      	ldr	r3, [sp, #8]
 800b530:	4598      	cmp	r8, r3
 800b532:	dc01      	bgt.n	800b538 <__kernel_rem_pio2+0x4c8>
 800b534:	45b8      	cmp	r8, r7
 800b536:	ddea      	ble.n	800b50e <__kernel_rem_pio2+0x49e>
 800b538:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b53c:	ab4a      	add	r3, sp, #296	; 0x128
 800b53e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b542:	ed87 7b00 	vstr	d7, [r7]
 800b546:	3e01      	subs	r6, #1
 800b548:	e6f8      	b.n	800b33c <__kernel_rem_pio2+0x2cc>
 800b54a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	dc0b      	bgt.n	800b568 <__kernel_rem_pio2+0x4f8>
 800b550:	2b00      	cmp	r3, #0
 800b552:	dc35      	bgt.n	800b5c0 <__kernel_rem_pio2+0x550>
 800b554:	d059      	beq.n	800b60a <__kernel_rem_pio2+0x59a>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	f003 0007 	and.w	r0, r3, #7
 800b55c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b560:	ecbd 8b02 	vpop	{d8}
 800b564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b568:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d1f3      	bne.n	800b556 <__kernel_rem_pio2+0x4e6>
 800b56e:	ab4a      	add	r3, sp, #296	; 0x128
 800b570:	4423      	add	r3, r4
 800b572:	9306      	str	r3, [sp, #24]
 800b574:	461c      	mov	r4, r3
 800b576:	469a      	mov	sl, r3
 800b578:	9502      	str	r5, [sp, #8]
 800b57a:	9b02      	ldr	r3, [sp, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b582:	dc6b      	bgt.n	800b65c <__kernel_rem_pio2+0x5ec>
 800b584:	46aa      	mov	sl, r5
 800b586:	f1ba 0f01 	cmp.w	sl, #1
 800b58a:	f1a4 0408 	sub.w	r4, r4, #8
 800b58e:	f300 8085 	bgt.w	800b69c <__kernel_rem_pio2+0x62c>
 800b592:	9c06      	ldr	r4, [sp, #24]
 800b594:	2000      	movs	r0, #0
 800b596:	3408      	adds	r4, #8
 800b598:	2100      	movs	r1, #0
 800b59a:	2d01      	cmp	r5, #1
 800b59c:	f300 809d 	bgt.w	800b6da <__kernel_rem_pio2+0x66a>
 800b5a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b5a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b5a8:	f1bb 0f00 	cmp.w	fp, #0
 800b5ac:	f040 809b 	bne.w	800b6e6 <__kernel_rem_pio2+0x676>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	e9c3 5600 	strd	r5, r6, [r3]
 800b5b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b5ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b5be:	e7ca      	b.n	800b556 <__kernel_rem_pio2+0x4e6>
 800b5c0:	3408      	adds	r4, #8
 800b5c2:	ab4a      	add	r3, sp, #296	; 0x128
 800b5c4:	441c      	add	r4, r3
 800b5c6:	462e      	mov	r6, r5
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	2e00      	cmp	r6, #0
 800b5ce:	da36      	bge.n	800b63e <__kernel_rem_pio2+0x5ce>
 800b5d0:	f1bb 0f00 	cmp.w	fp, #0
 800b5d4:	d039      	beq.n	800b64a <__kernel_rem_pio2+0x5da>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5dc:	9c01      	ldr	r4, [sp, #4]
 800b5de:	e9c4 2300 	strd	r2, r3, [r4]
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b5ea:	f7f4 fe65 	bl	80002b8 <__aeabi_dsub>
 800b5ee:	ae4c      	add	r6, sp, #304	; 0x130
 800b5f0:	2401      	movs	r4, #1
 800b5f2:	42a5      	cmp	r5, r4
 800b5f4:	da2c      	bge.n	800b650 <__kernel_rem_pio2+0x5e0>
 800b5f6:	f1bb 0f00 	cmp.w	fp, #0
 800b5fa:	d002      	beq.n	800b602 <__kernel_rem_pio2+0x592>
 800b5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b600:	4619      	mov	r1, r3
 800b602:	9b01      	ldr	r3, [sp, #4]
 800b604:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b608:	e7a5      	b.n	800b556 <__kernel_rem_pio2+0x4e6>
 800b60a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b60e:	eb0d 0403 	add.w	r4, sp, r3
 800b612:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b616:	2000      	movs	r0, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	2d00      	cmp	r5, #0
 800b61c:	da09      	bge.n	800b632 <__kernel_rem_pio2+0x5c2>
 800b61e:	f1bb 0f00 	cmp.w	fp, #0
 800b622:	d002      	beq.n	800b62a <__kernel_rem_pio2+0x5ba>
 800b624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b628:	4619      	mov	r1, r3
 800b62a:	9b01      	ldr	r3, [sp, #4]
 800b62c:	e9c3 0100 	strd	r0, r1, [r3]
 800b630:	e791      	b.n	800b556 <__kernel_rem_pio2+0x4e6>
 800b632:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b636:	f7f4 fe41 	bl	80002bc <__adddf3>
 800b63a:	3d01      	subs	r5, #1
 800b63c:	e7ed      	b.n	800b61a <__kernel_rem_pio2+0x5aa>
 800b63e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b642:	f7f4 fe3b 	bl	80002bc <__adddf3>
 800b646:	3e01      	subs	r6, #1
 800b648:	e7c0      	b.n	800b5cc <__kernel_rem_pio2+0x55c>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	e7c5      	b.n	800b5dc <__kernel_rem_pio2+0x56c>
 800b650:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b654:	f7f4 fe32 	bl	80002bc <__adddf3>
 800b658:	3401      	adds	r4, #1
 800b65a:	e7ca      	b.n	800b5f2 <__kernel_rem_pio2+0x582>
 800b65c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b660:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	3b01      	subs	r3, #1
 800b668:	9302      	str	r3, [sp, #8]
 800b66a:	4632      	mov	r2, r6
 800b66c:	463b      	mov	r3, r7
 800b66e:	4640      	mov	r0, r8
 800b670:	4649      	mov	r1, r9
 800b672:	f7f4 fe23 	bl	80002bc <__adddf3>
 800b676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4640      	mov	r0, r8
 800b680:	4649      	mov	r1, r9
 800b682:	f7f4 fe19 	bl	80002b8 <__aeabi_dsub>
 800b686:	4632      	mov	r2, r6
 800b688:	463b      	mov	r3, r7
 800b68a:	f7f4 fe17 	bl	80002bc <__adddf3>
 800b68e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b692:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b696:	ed8a 7b00 	vstr	d7, [sl]
 800b69a:	e76e      	b.n	800b57a <__kernel_rem_pio2+0x50a>
 800b69c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b6a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	463b      	mov	r3, r7
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	f7f4 fe06 	bl	80002bc <__adddf3>
 800b6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	f7f4 fdfc 	bl	80002b8 <__aeabi_dsub>
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	463b      	mov	r3, r7
 800b6c4:	f7f4 fdfa 	bl	80002bc <__adddf3>
 800b6c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6d0:	ed84 7b00 	vstr	d7, [r4]
 800b6d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b6d8:	e755      	b.n	800b586 <__kernel_rem_pio2+0x516>
 800b6da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6de:	f7f4 fded 	bl	80002bc <__adddf3>
 800b6e2:	3d01      	subs	r5, #1
 800b6e4:	e759      	b.n	800b59a <__kernel_rem_pio2+0x52a>
 800b6e6:	9b01      	ldr	r3, [sp, #4]
 800b6e8:	9a01      	ldr	r2, [sp, #4]
 800b6ea:	601d      	str	r5, [r3, #0]
 800b6ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b6f0:	605c      	str	r4, [r3, #4]
 800b6f2:	609f      	str	r7, [r3, #8]
 800b6f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b6f8:	60d3      	str	r3, [r2, #12]
 800b6fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6fe:	6110      	str	r0, [r2, #16]
 800b700:	6153      	str	r3, [r2, #20]
 800b702:	e728      	b.n	800b556 <__kernel_rem_pio2+0x4e6>
 800b704:	41700000 	.word	0x41700000
 800b708:	3e700000 	.word	0x3e700000
 800b70c:	00000000 	.word	0x00000000

0800b710 <__kernel_sin>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	ed2d 8b04 	vpush	{d8-d9}
 800b718:	eeb0 8a41 	vmov.f32	s16, s2
 800b71c:	eef0 8a61 	vmov.f32	s17, s3
 800b720:	ec55 4b10 	vmov	r4, r5, d0
 800b724:	b083      	sub	sp, #12
 800b726:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b72a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b72e:	9001      	str	r0, [sp, #4]
 800b730:	da06      	bge.n	800b740 <__kernel_sin+0x30>
 800b732:	ee10 0a10 	vmov	r0, s0
 800b736:	4629      	mov	r1, r5
 800b738:	f7f5 fa26 	bl	8000b88 <__aeabi_d2iz>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d051      	beq.n	800b7e4 <__kernel_sin+0xd4>
 800b740:	4622      	mov	r2, r4
 800b742:	462b      	mov	r3, r5
 800b744:	4620      	mov	r0, r4
 800b746:	4629      	mov	r1, r5
 800b748:	f7f4 ff6e 	bl	8000628 <__aeabi_dmul>
 800b74c:	4682      	mov	sl, r0
 800b74e:	468b      	mov	fp, r1
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4620      	mov	r0, r4
 800b756:	4629      	mov	r1, r5
 800b758:	f7f4 ff66 	bl	8000628 <__aeabi_dmul>
 800b75c:	a341      	add	r3, pc, #260	; (adr r3, 800b864 <__kernel_sin+0x154>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	4680      	mov	r8, r0
 800b764:	4689      	mov	r9, r1
 800b766:	4650      	mov	r0, sl
 800b768:	4659      	mov	r1, fp
 800b76a:	f7f4 ff5d 	bl	8000628 <__aeabi_dmul>
 800b76e:	a33f      	add	r3, pc, #252	; (adr r3, 800b86c <__kernel_sin+0x15c>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f4 fda0 	bl	80002b8 <__aeabi_dsub>
 800b778:	4652      	mov	r2, sl
 800b77a:	465b      	mov	r3, fp
 800b77c:	f7f4 ff54 	bl	8000628 <__aeabi_dmul>
 800b780:	a33c      	add	r3, pc, #240	; (adr r3, 800b874 <__kernel_sin+0x164>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 fd99 	bl	80002bc <__adddf3>
 800b78a:	4652      	mov	r2, sl
 800b78c:	465b      	mov	r3, fp
 800b78e:	f7f4 ff4b 	bl	8000628 <__aeabi_dmul>
 800b792:	a33a      	add	r3, pc, #232	; (adr r3, 800b87c <__kernel_sin+0x16c>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f7f4 fd8e 	bl	80002b8 <__aeabi_dsub>
 800b79c:	4652      	mov	r2, sl
 800b79e:	465b      	mov	r3, fp
 800b7a0:	f7f4 ff42 	bl	8000628 <__aeabi_dmul>
 800b7a4:	a337      	add	r3, pc, #220	; (adr r3, 800b884 <__kernel_sin+0x174>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 fd87 	bl	80002bc <__adddf3>
 800b7ae:	9b01      	ldr	r3, [sp, #4]
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	460f      	mov	r7, r1
 800b7b4:	b9eb      	cbnz	r3, 800b7f2 <__kernel_sin+0xe2>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	4659      	mov	r1, fp
 800b7be:	f7f4 ff33 	bl	8000628 <__aeabi_dmul>
 800b7c2:	a325      	add	r3, pc, #148	; (adr r3, 800b858 <__kernel_sin+0x148>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f7f4 fd76 	bl	80002b8 <__aeabi_dsub>
 800b7cc:	4642      	mov	r2, r8
 800b7ce:	464b      	mov	r3, r9
 800b7d0:	f7f4 ff2a 	bl	8000628 <__aeabi_dmul>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f7f4 fd6e 	bl	80002bc <__adddf3>
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	ec45 4b10 	vmov	d0, r4, r5
 800b7e8:	b003      	add	sp, #12
 800b7ea:	ecbd 8b04 	vpop	{d8-d9}
 800b7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	; (800b860 <__kernel_sin+0x150>)
 800b7f4:	ec51 0b18 	vmov	r0, r1, d8
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f7f4 ff15 	bl	8000628 <__aeabi_dmul>
 800b7fe:	4632      	mov	r2, r6
 800b800:	ec41 0b19 	vmov	d9, r0, r1
 800b804:	463b      	mov	r3, r7
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	f7f4 ff0d 	bl	8000628 <__aeabi_dmul>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	ec51 0b19 	vmov	r0, r1, d9
 800b816:	f7f4 fd4f 	bl	80002b8 <__aeabi_dsub>
 800b81a:	4652      	mov	r2, sl
 800b81c:	465b      	mov	r3, fp
 800b81e:	f7f4 ff03 	bl	8000628 <__aeabi_dmul>
 800b822:	ec53 2b18 	vmov	r2, r3, d8
 800b826:	f7f4 fd47 	bl	80002b8 <__aeabi_dsub>
 800b82a:	a30b      	add	r3, pc, #44	; (adr r3, 800b858 <__kernel_sin+0x148>)
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	4606      	mov	r6, r0
 800b832:	460f      	mov	r7, r1
 800b834:	4640      	mov	r0, r8
 800b836:	4649      	mov	r1, r9
 800b838:	f7f4 fef6 	bl	8000628 <__aeabi_dmul>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f4 fd3a 	bl	80002bc <__adddf3>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4620      	mov	r0, r4
 800b84e:	4629      	mov	r1, r5
 800b850:	f7f4 fd32 	bl	80002b8 <__aeabi_dsub>
 800b854:	e7c4      	b.n	800b7e0 <__kernel_sin+0xd0>
 800b856:	bf00      	nop
 800b858:	55555549 	.word	0x55555549
 800b85c:	3fc55555 	.word	0x3fc55555
 800b860:	3fe00000 	.word	0x3fe00000
 800b864:	5acfd57c 	.word	0x5acfd57c
 800b868:	3de5d93a 	.word	0x3de5d93a
 800b86c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b870:	3e5ae5e6 	.word	0x3e5ae5e6
 800b874:	57b1fe7d 	.word	0x57b1fe7d
 800b878:	3ec71de3 	.word	0x3ec71de3
 800b87c:	19c161d5 	.word	0x19c161d5
 800b880:	3f2a01a0 	.word	0x3f2a01a0
 800b884:	1110f8a6 	.word	0x1110f8a6
 800b888:	3f811111 	.word	0x3f811111

0800b88c <with_errno>:
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	4616      	mov	r6, r2
 800b894:	f7fd face 	bl	8008e34 <__errno>
 800b898:	4629      	mov	r1, r5
 800b89a:	6006      	str	r6, [r0, #0]
 800b89c:	4620      	mov	r0, r4
 800b89e:	bd70      	pop	{r4, r5, r6, pc}

0800b8a0 <xflow>:
 800b8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a2:	4614      	mov	r4, r2
 800b8a4:	461d      	mov	r5, r3
 800b8a6:	b108      	cbz	r0, 800b8ac <xflow+0xc>
 800b8a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8ac:	e9cd 2300 	strd	r2, r3, [sp]
 800b8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	f7f4 feb6 	bl	8000628 <__aeabi_dmul>
 800b8bc:	2222      	movs	r2, #34	; 0x22
 800b8be:	b003      	add	sp, #12
 800b8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8c4:	f7ff bfe2 	b.w	800b88c <with_errno>

0800b8c8 <__math_uflow>:
 800b8c8:	b508      	push	{r3, lr}
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8d0:	f7ff ffe6 	bl	800b8a0 <xflow>
 800b8d4:	ec41 0b10 	vmov	d0, r0, r1
 800b8d8:	bd08      	pop	{r3, pc}

0800b8da <__math_oflow>:
 800b8da:	b508      	push	{r3, lr}
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b8e2:	f7ff ffdd 	bl	800b8a0 <xflow>
 800b8e6:	ec41 0b10 	vmov	d0, r0, r1
 800b8ea:	bd08      	pop	{r3, pc}
 800b8ec:	0000      	movs	r0, r0
	...

0800b8f0 <atan>:
 800b8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	ec55 4b10 	vmov	r4, r5, d0
 800b8f8:	4bc3      	ldr	r3, [pc, #780]	; (800bc08 <atan+0x318>)
 800b8fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8fe:	429e      	cmp	r6, r3
 800b900:	46ab      	mov	fp, r5
 800b902:	dd18      	ble.n	800b936 <atan+0x46>
 800b904:	4bc1      	ldr	r3, [pc, #772]	; (800bc0c <atan+0x31c>)
 800b906:	429e      	cmp	r6, r3
 800b908:	dc01      	bgt.n	800b90e <atan+0x1e>
 800b90a:	d109      	bne.n	800b920 <atan+0x30>
 800b90c:	b144      	cbz	r4, 800b920 <atan+0x30>
 800b90e:	4622      	mov	r2, r4
 800b910:	462b      	mov	r3, r5
 800b912:	4620      	mov	r0, r4
 800b914:	4629      	mov	r1, r5
 800b916:	f7f4 fcd1 	bl	80002bc <__adddf3>
 800b91a:	4604      	mov	r4, r0
 800b91c:	460d      	mov	r5, r1
 800b91e:	e006      	b.n	800b92e <atan+0x3e>
 800b920:	f1bb 0f00 	cmp.w	fp, #0
 800b924:	f300 8131 	bgt.w	800bb8a <atan+0x29a>
 800b928:	a59b      	add	r5, pc, #620	; (adr r5, 800bb98 <atan+0x2a8>)
 800b92a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b92e:	ec45 4b10 	vmov	d0, r4, r5
 800b932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b936:	4bb6      	ldr	r3, [pc, #728]	; (800bc10 <atan+0x320>)
 800b938:	429e      	cmp	r6, r3
 800b93a:	dc14      	bgt.n	800b966 <atan+0x76>
 800b93c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b940:	429e      	cmp	r6, r3
 800b942:	dc0d      	bgt.n	800b960 <atan+0x70>
 800b944:	a396      	add	r3, pc, #600	; (adr r3, 800bba0 <atan+0x2b0>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	ee10 0a10 	vmov	r0, s0
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f4 fcb4 	bl	80002bc <__adddf3>
 800b954:	4baf      	ldr	r3, [pc, #700]	; (800bc14 <atan+0x324>)
 800b956:	2200      	movs	r2, #0
 800b958:	f7f5 f8f6 	bl	8000b48 <__aeabi_dcmpgt>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d1e6      	bne.n	800b92e <atan+0x3e>
 800b960:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b964:	e02b      	b.n	800b9be <atan+0xce>
 800b966:	f000 f963 	bl	800bc30 <fabs>
 800b96a:	4bab      	ldr	r3, [pc, #684]	; (800bc18 <atan+0x328>)
 800b96c:	429e      	cmp	r6, r3
 800b96e:	ec55 4b10 	vmov	r4, r5, d0
 800b972:	f300 80bf 	bgt.w	800baf4 <atan+0x204>
 800b976:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b97a:	429e      	cmp	r6, r3
 800b97c:	f300 80a0 	bgt.w	800bac0 <atan+0x1d0>
 800b980:	ee10 2a10 	vmov	r2, s0
 800b984:	ee10 0a10 	vmov	r0, s0
 800b988:	462b      	mov	r3, r5
 800b98a:	4629      	mov	r1, r5
 800b98c:	f7f4 fc96 	bl	80002bc <__adddf3>
 800b990:	4ba0      	ldr	r3, [pc, #640]	; (800bc14 <atan+0x324>)
 800b992:	2200      	movs	r2, #0
 800b994:	f7f4 fc90 	bl	80002b8 <__aeabi_dsub>
 800b998:	2200      	movs	r2, #0
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	f7f4 fc89 	bl	80002bc <__adddf3>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	f7f4 ff63 	bl	800087c <__aeabi_ddiv>
 800b9b6:	f04f 0a00 	mov.w	sl, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	460d      	mov	r5, r1
 800b9be:	4622      	mov	r2, r4
 800b9c0:	462b      	mov	r3, r5
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f7f4 fe2f 	bl	8000628 <__aeabi_dmul>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	f7f4 fe29 	bl	8000628 <__aeabi_dmul>
 800b9d6:	a374      	add	r3, pc, #464	; (adr r3, 800bba8 <atan+0x2b8>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	4606      	mov	r6, r0
 800b9de:	460f      	mov	r7, r1
 800b9e0:	f7f4 fe22 	bl	8000628 <__aeabi_dmul>
 800b9e4:	a372      	add	r3, pc, #456	; (adr r3, 800bbb0 <atan+0x2c0>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f4 fc67 	bl	80002bc <__adddf3>
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	463b      	mov	r3, r7
 800b9f2:	f7f4 fe19 	bl	8000628 <__aeabi_dmul>
 800b9f6:	a370      	add	r3, pc, #448	; (adr r3, 800bbb8 <atan+0x2c8>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fc5e 	bl	80002bc <__adddf3>
 800ba00:	4632      	mov	r2, r6
 800ba02:	463b      	mov	r3, r7
 800ba04:	f7f4 fe10 	bl	8000628 <__aeabi_dmul>
 800ba08:	a36d      	add	r3, pc, #436	; (adr r3, 800bbc0 <atan+0x2d0>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	f7f4 fc55 	bl	80002bc <__adddf3>
 800ba12:	4632      	mov	r2, r6
 800ba14:	463b      	mov	r3, r7
 800ba16:	f7f4 fe07 	bl	8000628 <__aeabi_dmul>
 800ba1a:	a36b      	add	r3, pc, #428	; (adr r3, 800bbc8 <atan+0x2d8>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f7f4 fc4c 	bl	80002bc <__adddf3>
 800ba24:	4632      	mov	r2, r6
 800ba26:	463b      	mov	r3, r7
 800ba28:	f7f4 fdfe 	bl	8000628 <__aeabi_dmul>
 800ba2c:	a368      	add	r3, pc, #416	; (adr r3, 800bbd0 <atan+0x2e0>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fc43 	bl	80002bc <__adddf3>
 800ba36:	4642      	mov	r2, r8
 800ba38:	464b      	mov	r3, r9
 800ba3a:	f7f4 fdf5 	bl	8000628 <__aeabi_dmul>
 800ba3e:	a366      	add	r3, pc, #408	; (adr r3, 800bbd8 <atan+0x2e8>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	4680      	mov	r8, r0
 800ba46:	4689      	mov	r9, r1
 800ba48:	4630      	mov	r0, r6
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	f7f4 fdec 	bl	8000628 <__aeabi_dmul>
 800ba50:	a363      	add	r3, pc, #396	; (adr r3, 800bbe0 <atan+0x2f0>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	463b      	mov	r3, r7
 800ba5e:	f7f4 fde3 	bl	8000628 <__aeabi_dmul>
 800ba62:	a361      	add	r3, pc, #388	; (adr r3, 800bbe8 <atan+0x2f8>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	f7f4 fc26 	bl	80002b8 <__aeabi_dsub>
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	463b      	mov	r3, r7
 800ba70:	f7f4 fdda 	bl	8000628 <__aeabi_dmul>
 800ba74:	a35e      	add	r3, pc, #376	; (adr r3, 800bbf0 <atan+0x300>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fc1d 	bl	80002b8 <__aeabi_dsub>
 800ba7e:	4632      	mov	r2, r6
 800ba80:	463b      	mov	r3, r7
 800ba82:	f7f4 fdd1 	bl	8000628 <__aeabi_dmul>
 800ba86:	a35c      	add	r3, pc, #368	; (adr r3, 800bbf8 <atan+0x308>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f7f4 fc14 	bl	80002b8 <__aeabi_dsub>
 800ba90:	4632      	mov	r2, r6
 800ba92:	463b      	mov	r3, r7
 800ba94:	f7f4 fdc8 	bl	8000628 <__aeabi_dmul>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	4649      	mov	r1, r9
 800baa0:	f7f4 fc0c 	bl	80002bc <__adddf3>
 800baa4:	4622      	mov	r2, r4
 800baa6:	462b      	mov	r3, r5
 800baa8:	f7f4 fdbe 	bl	8000628 <__aeabi_dmul>
 800baac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	d14b      	bne.n	800bb4e <atan+0x25e>
 800bab6:	4620      	mov	r0, r4
 800bab8:	4629      	mov	r1, r5
 800baba:	f7f4 fbfd 	bl	80002b8 <__aeabi_dsub>
 800babe:	e72c      	b.n	800b91a <atan+0x2a>
 800bac0:	ee10 0a10 	vmov	r0, s0
 800bac4:	4b53      	ldr	r3, [pc, #332]	; (800bc14 <atan+0x324>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fbf5 	bl	80002b8 <__aeabi_dsub>
 800bace:	4b51      	ldr	r3, [pc, #324]	; (800bc14 <atan+0x324>)
 800bad0:	4606      	mov	r6, r0
 800bad2:	460f      	mov	r7, r1
 800bad4:	2200      	movs	r2, #0
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 fbef 	bl	80002bc <__adddf3>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4630      	mov	r0, r6
 800bae4:	4639      	mov	r1, r7
 800bae6:	f7f4 fec9 	bl	800087c <__aeabi_ddiv>
 800baea:	f04f 0a01 	mov.w	sl, #1
 800baee:	4604      	mov	r4, r0
 800baf0:	460d      	mov	r5, r1
 800baf2:	e764      	b.n	800b9be <atan+0xce>
 800baf4:	4b49      	ldr	r3, [pc, #292]	; (800bc1c <atan+0x32c>)
 800baf6:	429e      	cmp	r6, r3
 800baf8:	da1d      	bge.n	800bb36 <atan+0x246>
 800bafa:	ee10 0a10 	vmov	r0, s0
 800bafe:	4b48      	ldr	r3, [pc, #288]	; (800bc20 <atan+0x330>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	4629      	mov	r1, r5
 800bb04:	f7f4 fbd8 	bl	80002b8 <__aeabi_dsub>
 800bb08:	4b45      	ldr	r3, [pc, #276]	; (800bc20 <atan+0x330>)
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460f      	mov	r7, r1
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4620      	mov	r0, r4
 800bb12:	4629      	mov	r1, r5
 800bb14:	f7f4 fd88 	bl	8000628 <__aeabi_dmul>
 800bb18:	4b3e      	ldr	r3, [pc, #248]	; (800bc14 <atan+0x324>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f7f4 fbce 	bl	80002bc <__adddf3>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4630      	mov	r0, r6
 800bb26:	4639      	mov	r1, r7
 800bb28:	f7f4 fea8 	bl	800087c <__aeabi_ddiv>
 800bb2c:	f04f 0a02 	mov.w	sl, #2
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	e743      	b.n	800b9be <atan+0xce>
 800bb36:	462b      	mov	r3, r5
 800bb38:	ee10 2a10 	vmov	r2, s0
 800bb3c:	4939      	ldr	r1, [pc, #228]	; (800bc24 <atan+0x334>)
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f7f4 fe9c 	bl	800087c <__aeabi_ddiv>
 800bb44:	f04f 0a03 	mov.w	sl, #3
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	e737      	b.n	800b9be <atan+0xce>
 800bb4e:	4b36      	ldr	r3, [pc, #216]	; (800bc28 <atan+0x338>)
 800bb50:	4e36      	ldr	r6, [pc, #216]	; (800bc2c <atan+0x33c>)
 800bb52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bb56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bb5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bb5e:	f7f4 fbab 	bl	80002b8 <__aeabi_dsub>
 800bb62:	4622      	mov	r2, r4
 800bb64:	462b      	mov	r3, r5
 800bb66:	f7f4 fba7 	bl	80002b8 <__aeabi_dsub>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bb72:	f7f4 fba1 	bl	80002b8 <__aeabi_dsub>
 800bb76:	f1bb 0f00 	cmp.w	fp, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	f6bf aed6 	bge.w	800b92e <atan+0x3e>
 800bb82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb86:	461d      	mov	r5, r3
 800bb88:	e6d1      	b.n	800b92e <atan+0x3e>
 800bb8a:	a51d      	add	r5, pc, #116	; (adr r5, 800bc00 <atan+0x310>)
 800bb8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb90:	e6cd      	b.n	800b92e <atan+0x3e>
 800bb92:	bf00      	nop
 800bb94:	f3af 8000 	nop.w
 800bb98:	54442d18 	.word	0x54442d18
 800bb9c:	bff921fb 	.word	0xbff921fb
 800bba0:	8800759c 	.word	0x8800759c
 800bba4:	7e37e43c 	.word	0x7e37e43c
 800bba8:	e322da11 	.word	0xe322da11
 800bbac:	3f90ad3a 	.word	0x3f90ad3a
 800bbb0:	24760deb 	.word	0x24760deb
 800bbb4:	3fa97b4b 	.word	0x3fa97b4b
 800bbb8:	a0d03d51 	.word	0xa0d03d51
 800bbbc:	3fb10d66 	.word	0x3fb10d66
 800bbc0:	c54c206e 	.word	0xc54c206e
 800bbc4:	3fb745cd 	.word	0x3fb745cd
 800bbc8:	920083ff 	.word	0x920083ff
 800bbcc:	3fc24924 	.word	0x3fc24924
 800bbd0:	5555550d 	.word	0x5555550d
 800bbd4:	3fd55555 	.word	0x3fd55555
 800bbd8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bbdc:	bfa2b444 	.word	0xbfa2b444
 800bbe0:	52defd9a 	.word	0x52defd9a
 800bbe4:	3fadde2d 	.word	0x3fadde2d
 800bbe8:	af749a6d 	.word	0xaf749a6d
 800bbec:	3fb3b0f2 	.word	0x3fb3b0f2
 800bbf0:	fe231671 	.word	0xfe231671
 800bbf4:	3fbc71c6 	.word	0x3fbc71c6
 800bbf8:	9998ebc4 	.word	0x9998ebc4
 800bbfc:	3fc99999 	.word	0x3fc99999
 800bc00:	54442d18 	.word	0x54442d18
 800bc04:	3ff921fb 	.word	0x3ff921fb
 800bc08:	440fffff 	.word	0x440fffff
 800bc0c:	7ff00000 	.word	0x7ff00000
 800bc10:	3fdbffff 	.word	0x3fdbffff
 800bc14:	3ff00000 	.word	0x3ff00000
 800bc18:	3ff2ffff 	.word	0x3ff2ffff
 800bc1c:	40038000 	.word	0x40038000
 800bc20:	3ff80000 	.word	0x3ff80000
 800bc24:	bff00000 	.word	0xbff00000
 800bc28:	0800c478 	.word	0x0800c478
 800bc2c:	0800c458 	.word	0x0800c458

0800bc30 <fabs>:
 800bc30:	ec51 0b10 	vmov	r0, r1, d0
 800bc34:	ee10 2a10 	vmov	r2, s0
 800bc38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc3c:	ec43 2b10 	vmov	d0, r2, r3
 800bc40:	4770      	bx	lr

0800bc42 <finite>:
 800bc42:	b082      	sub	sp, #8
 800bc44:	ed8d 0b00 	vstr	d0, [sp]
 800bc48:	9801      	ldr	r0, [sp, #4]
 800bc4a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bc4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bc52:	0fc0      	lsrs	r0, r0, #31
 800bc54:	b002      	add	sp, #8
 800bc56:	4770      	bx	lr

0800bc58 <floor>:
 800bc58:	ec51 0b10 	vmov	r0, r1, d0
 800bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bc64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bc68:	2e13      	cmp	r6, #19
 800bc6a:	ee10 5a10 	vmov	r5, s0
 800bc6e:	ee10 8a10 	vmov	r8, s0
 800bc72:	460c      	mov	r4, r1
 800bc74:	dc32      	bgt.n	800bcdc <floor+0x84>
 800bc76:	2e00      	cmp	r6, #0
 800bc78:	da14      	bge.n	800bca4 <floor+0x4c>
 800bc7a:	a333      	add	r3, pc, #204	; (adr r3, 800bd48 <floor+0xf0>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fb1c 	bl	80002bc <__adddf3>
 800bc84:	2200      	movs	r2, #0
 800bc86:	2300      	movs	r3, #0
 800bc88:	f7f4 ff5e 	bl	8000b48 <__aeabi_dcmpgt>
 800bc8c:	b138      	cbz	r0, 800bc9e <floor+0x46>
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	da57      	bge.n	800bd42 <floor+0xea>
 800bc92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bc96:	431d      	orrs	r5, r3
 800bc98:	d001      	beq.n	800bc9e <floor+0x46>
 800bc9a:	4c2d      	ldr	r4, [pc, #180]	; (800bd50 <floor+0xf8>)
 800bc9c:	2500      	movs	r5, #0
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4628      	mov	r0, r5
 800bca2:	e025      	b.n	800bcf0 <floor+0x98>
 800bca4:	4f2b      	ldr	r7, [pc, #172]	; (800bd54 <floor+0xfc>)
 800bca6:	4137      	asrs	r7, r6
 800bca8:	ea01 0307 	and.w	r3, r1, r7
 800bcac:	4303      	orrs	r3, r0
 800bcae:	d01f      	beq.n	800bcf0 <floor+0x98>
 800bcb0:	a325      	add	r3, pc, #148	; (adr r3, 800bd48 <floor+0xf0>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 fb01 	bl	80002bc <__adddf3>
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	f7f4 ff43 	bl	8000b48 <__aeabi_dcmpgt>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d0eb      	beq.n	800bc9e <floor+0x46>
 800bcc6:	2c00      	cmp	r4, #0
 800bcc8:	bfbe      	ittt	lt
 800bcca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bcce:	fa43 f606 	asrlt.w	r6, r3, r6
 800bcd2:	19a4      	addlt	r4, r4, r6
 800bcd4:	ea24 0407 	bic.w	r4, r4, r7
 800bcd8:	2500      	movs	r5, #0
 800bcda:	e7e0      	b.n	800bc9e <floor+0x46>
 800bcdc:	2e33      	cmp	r6, #51	; 0x33
 800bcde:	dd0b      	ble.n	800bcf8 <floor+0xa0>
 800bce0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bce4:	d104      	bne.n	800bcf0 <floor+0x98>
 800bce6:	ee10 2a10 	vmov	r2, s0
 800bcea:	460b      	mov	r3, r1
 800bcec:	f7f4 fae6 	bl	80002bc <__adddf3>
 800bcf0:	ec41 0b10 	vmov	d0, r0, r1
 800bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bcfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd00:	fa23 f707 	lsr.w	r7, r3, r7
 800bd04:	4207      	tst	r7, r0
 800bd06:	d0f3      	beq.n	800bcf0 <floor+0x98>
 800bd08:	a30f      	add	r3, pc, #60	; (adr r3, 800bd48 <floor+0xf0>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fad5 	bl	80002bc <__adddf3>
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	f7f4 ff17 	bl	8000b48 <__aeabi_dcmpgt>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d0bf      	beq.n	800bc9e <floor+0x46>
 800bd1e:	2c00      	cmp	r4, #0
 800bd20:	da02      	bge.n	800bd28 <floor+0xd0>
 800bd22:	2e14      	cmp	r6, #20
 800bd24:	d103      	bne.n	800bd2e <floor+0xd6>
 800bd26:	3401      	adds	r4, #1
 800bd28:	ea25 0507 	bic.w	r5, r5, r7
 800bd2c:	e7b7      	b.n	800bc9e <floor+0x46>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd34:	fa03 f606 	lsl.w	r6, r3, r6
 800bd38:	4435      	add	r5, r6
 800bd3a:	4545      	cmp	r5, r8
 800bd3c:	bf38      	it	cc
 800bd3e:	18e4      	addcc	r4, r4, r3
 800bd40:	e7f2      	b.n	800bd28 <floor+0xd0>
 800bd42:	2500      	movs	r5, #0
 800bd44:	462c      	mov	r4, r5
 800bd46:	e7aa      	b.n	800bc9e <floor+0x46>
 800bd48:	8800759c 	.word	0x8800759c
 800bd4c:	7e37e43c 	.word	0x7e37e43c
 800bd50:	bff00000 	.word	0xbff00000
 800bd54:	000fffff 	.word	0x000fffff

0800bd58 <scalbn>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	ec55 4b10 	vmov	r4, r5, d0
 800bd5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bd62:	4606      	mov	r6, r0
 800bd64:	462b      	mov	r3, r5
 800bd66:	b99a      	cbnz	r2, 800bd90 <scalbn+0x38>
 800bd68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd6c:	4323      	orrs	r3, r4
 800bd6e:	d036      	beq.n	800bdde <scalbn+0x86>
 800bd70:	4b39      	ldr	r3, [pc, #228]	; (800be58 <scalbn+0x100>)
 800bd72:	4629      	mov	r1, r5
 800bd74:	ee10 0a10 	vmov	r0, s0
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f7f4 fc55 	bl	8000628 <__aeabi_dmul>
 800bd7e:	4b37      	ldr	r3, [pc, #220]	; (800be5c <scalbn+0x104>)
 800bd80:	429e      	cmp	r6, r3
 800bd82:	4604      	mov	r4, r0
 800bd84:	460d      	mov	r5, r1
 800bd86:	da10      	bge.n	800bdaa <scalbn+0x52>
 800bd88:	a32b      	add	r3, pc, #172	; (adr r3, 800be38 <scalbn+0xe0>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	e03a      	b.n	800be06 <scalbn+0xae>
 800bd90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bd94:	428a      	cmp	r2, r1
 800bd96:	d10c      	bne.n	800bdb2 <scalbn+0x5a>
 800bd98:	ee10 2a10 	vmov	r2, s0
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	4629      	mov	r1, r5
 800bda0:	f7f4 fa8c 	bl	80002bc <__adddf3>
 800bda4:	4604      	mov	r4, r0
 800bda6:	460d      	mov	r5, r1
 800bda8:	e019      	b.n	800bdde <scalbn+0x86>
 800bdaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bdae:	460b      	mov	r3, r1
 800bdb0:	3a36      	subs	r2, #54	; 0x36
 800bdb2:	4432      	add	r2, r6
 800bdb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bdb8:	428a      	cmp	r2, r1
 800bdba:	dd08      	ble.n	800bdce <scalbn+0x76>
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	a120      	add	r1, pc, #128	; (adr r1, 800be40 <scalbn+0xe8>)
 800bdc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdc4:	da1c      	bge.n	800be00 <scalbn+0xa8>
 800bdc6:	a120      	add	r1, pc, #128	; (adr r1, 800be48 <scalbn+0xf0>)
 800bdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdcc:	e018      	b.n	800be00 <scalbn+0xa8>
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	dd08      	ble.n	800bde4 <scalbn+0x8c>
 800bdd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bdda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bdde:	ec45 4b10 	vmov	d0, r4, r5
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bde8:	da19      	bge.n	800be1e <scalbn+0xc6>
 800bdea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bdee:	429e      	cmp	r6, r3
 800bdf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bdf4:	dd0a      	ble.n	800be0c <scalbn+0xb4>
 800bdf6:	a112      	add	r1, pc, #72	; (adr r1, 800be40 <scalbn+0xe8>)
 800bdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e2      	bne.n	800bdc6 <scalbn+0x6e>
 800be00:	a30f      	add	r3, pc, #60	; (adr r3, 800be40 <scalbn+0xe8>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fc0f 	bl	8000628 <__aeabi_dmul>
 800be0a:	e7cb      	b.n	800bda4 <scalbn+0x4c>
 800be0c:	a10a      	add	r1, pc, #40	; (adr r1, 800be38 <scalbn+0xe0>)
 800be0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0b8      	beq.n	800bd88 <scalbn+0x30>
 800be16:	a10e      	add	r1, pc, #56	; (adr r1, 800be50 <scalbn+0xf8>)
 800be18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be1c:	e7b4      	b.n	800bd88 <scalbn+0x30>
 800be1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be22:	3236      	adds	r2, #54	; 0x36
 800be24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800be2c:	4620      	mov	r0, r4
 800be2e:	4b0c      	ldr	r3, [pc, #48]	; (800be60 <scalbn+0x108>)
 800be30:	2200      	movs	r2, #0
 800be32:	e7e8      	b.n	800be06 <scalbn+0xae>
 800be34:	f3af 8000 	nop.w
 800be38:	c2f8f359 	.word	0xc2f8f359
 800be3c:	01a56e1f 	.word	0x01a56e1f
 800be40:	8800759c 	.word	0x8800759c
 800be44:	7e37e43c 	.word	0x7e37e43c
 800be48:	8800759c 	.word	0x8800759c
 800be4c:	fe37e43c 	.word	0xfe37e43c
 800be50:	c2f8f359 	.word	0xc2f8f359
 800be54:	81a56e1f 	.word	0x81a56e1f
 800be58:	43500000 	.word	0x43500000
 800be5c:	ffff3cb0 	.word	0xffff3cb0
 800be60:	3c900000 	.word	0x3c900000

0800be64 <_sbrk>:
 800be64:	4a04      	ldr	r2, [pc, #16]	; (800be78 <_sbrk+0x14>)
 800be66:	6811      	ldr	r1, [r2, #0]
 800be68:	4603      	mov	r3, r0
 800be6a:	b909      	cbnz	r1, 800be70 <_sbrk+0xc>
 800be6c:	4903      	ldr	r1, [pc, #12]	; (800be7c <_sbrk+0x18>)
 800be6e:	6011      	str	r1, [r2, #0]
 800be70:	6810      	ldr	r0, [r2, #0]
 800be72:	4403      	add	r3, r0
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	4770      	bx	lr
 800be78:	20013194 	.word	0x20013194
 800be7c:	20013198 	.word	0x20013198

0800be80 <_init>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	bf00      	nop
 800be84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be86:	bc08      	pop	{r3}
 800be88:	469e      	mov	lr, r3
 800be8a:	4770      	bx	lr

0800be8c <_fini>:
 800be8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8e:	bf00      	nop
 800be90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be92:	bc08      	pop	{r3}
 800be94:	469e      	mov	lr, r3
 800be96:	4770      	bx	lr
